// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: teleport/devicetrust/v1/devicetrust_service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// DeviceTrustService provides methods to manage, enroll and authenticate
/// trusted devices.
///
/// A trusted device is a device that is registered and enrolled with Teleport,
/// thus allowing the system to provide some guarantees about its provenance and
/// state.
///
/// Managing devices requires the corresponding CRUD "device" permission.
/// Additionally, creating enrollment tokens requires the "create_enroll_token"
/// permission and enrolling devices requires the "enroll" permission. See
/// CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.
///
/// An authenticated, trusted device allows its user to perform device-aware
/// actions. Such actions include accessing an SSH node, managing sensitive
/// resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
/// and/or per-role toggles. Device authentication is automatic for enrolled
/// devices communicating with Enterprise clusters. See AuthenticateDevice for
/// reference.
///
/// Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
/// treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
public protocol Teleport_Devicetrust_V1_DeviceTrustServiceClientInterface: Sendable {

    /// Ping foo bar.
    @discardableResult
    func `ping`(request: Teleport_Devicetrust_V1_PingRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_PingResponse>) -> Void) -> Connect.Cancelable

    /// Ping foo bar.
    @available(iOS 13, *)
    func `ping`(request: Teleport_Devicetrust_V1_PingRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_PingResponse>

    /// CreateDevice creates a device, effectively registering it on Teleport.
    /// Devices need to be registered before they can be enrolled.
    ///
    /// It is possible to create both a Device and a DeviceEnrollToken in a
    /// single invocation, see CreateDeviceRequest.create_enroll_token.
    @discardableResult
    func `createDevice`(request: Teleport_Devicetrust_V1_CreateDeviceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable

    /// CreateDevice creates a device, effectively registering it on Teleport.
    /// Devices need to be registered before they can be enrolled.
    ///
    /// It is possible to create both a Device and a DeviceEnrollToken in a
    /// single invocation, see CreateDeviceRequest.create_enroll_token.
    @available(iOS 13, *)
    func `createDevice`(request: Teleport_Devicetrust_V1_CreateDeviceRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_Device>

    /// UpdateDevice is a masked device update.
    ///
    /// Only certain fields may be updated, see Device for details.
    @discardableResult
    func `updateDevice`(request: Teleport_Devicetrust_V1_UpdateDeviceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable

    /// UpdateDevice is a masked device update.
    ///
    /// Only certain fields may be updated, see Device for details.
    @available(iOS 13, *)
    func `updateDevice`(request: Teleport_Devicetrust_V1_UpdateDeviceRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_Device>

    /// UpsertDevice creates or updates a device.
    ///
    /// UpsertDevice attempts a write of all mutable fields on updates, therefore
    /// reading a fresh copy of the device is recommended. Update semantics still
    /// apply.
    @discardableResult
    func `upsertDevice`(request: Teleport_Devicetrust_V1_UpsertDeviceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable

    /// UpsertDevice creates or updates a device.
    ///
    /// UpsertDevice attempts a write of all mutable fields on updates, therefore
    /// reading a fresh copy of the device is recommended. Update semantics still
    /// apply.
    @available(iOS 13, *)
    func `upsertDevice`(request: Teleport_Devicetrust_V1_UpsertDeviceRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_Device>

    /// DeleteDevice hard-deletes a device, removing it and all collected data
    /// history from the system.
    ///
    /// Prefer locking the device instead (see the `tctl lock` command). Deleting a
    /// device doesn't invalidate existing device certificates, but does prevent
    /// new device authentication ceremonies from occurring.
    ///
    /// Use with caution.
    @discardableResult
    func `deleteDevice`(request: Teleport_Devicetrust_V1_DeleteDeviceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// DeleteDevice hard-deletes a device, removing it and all collected data
    /// history from the system.
    ///
    /// Prefer locking the device instead (see the `tctl lock` command). Deleting a
    /// device doesn't invalidate existing device certificates, but does prevent
    /// new device authentication ceremonies from occurring.
    ///
    /// Use with caution.
    @available(iOS 13, *)
    func `deleteDevice`(request: Teleport_Devicetrust_V1_DeleteDeviceRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// FindDevices retrieves devices by device ID and/or asset tag.
    ///
    /// It provides an in-between search between fetching a device by ID and
    /// listing all devices.
    ///
    /// ID matches are guaranteed to be present in the response.
    @discardableResult
    func `findDevices`(request: Teleport_Devicetrust_V1_FindDevicesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_FindDevicesResponse>) -> Void) -> Connect.Cancelable

    /// FindDevices retrieves devices by device ID and/or asset tag.
    ///
    /// It provides an in-between search between fetching a device by ID and
    /// listing all devices.
    ///
    /// ID matches are guaranteed to be present in the response.
    @available(iOS 13, *)
    func `findDevices`(request: Teleport_Devicetrust_V1_FindDevicesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_FindDevicesResponse>

    /// GetDevice retrieves a device by ID.
    @discardableResult
    func `getDevice`(request: Teleport_Devicetrust_V1_GetDeviceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable

    /// GetDevice retrieves a device by ID.
    @available(iOS 13, *)
    func `getDevice`(request: Teleport_Devicetrust_V1_GetDeviceRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_Device>

    /// ListDevices lists all registered devices.
    @discardableResult
    func `listDevices`(request: Teleport_Devicetrust_V1_ListDevicesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_ListDevicesResponse>) -> Void) -> Connect.Cancelable

    /// ListDevices lists all registered devices.
    @available(iOS 13, *)
    func `listDevices`(request: Teleport_Devicetrust_V1_ListDevicesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_ListDevicesResponse>

    /// ListDevicesByUser lists all devices owned by the user
    @discardableResult
    func `listDevicesByUser`(request: Teleport_Devicetrust_V1_ListDevicesByUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_ListDevicesByUserResponse>) -> Void) -> Connect.Cancelable

    /// ListDevicesByUser lists all devices owned by the user
    @available(iOS 13, *)
    func `listDevicesByUser`(request: Teleport_Devicetrust_V1_ListDevicesByUserRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_ListDevicesByUserResponse>

    /// BulkCreateDevices is a bulk variant of CreateDevice.
    ///
    /// Unlike CreateDevice, it does not support creation of enrollment tokens, as
    /// it is meant for bulk inventory registration.
    @discardableResult
    func `bulkCreateDevices`(request: Teleport_Devicetrust_V1_BulkCreateDevicesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>) -> Void) -> Connect.Cancelable

    /// BulkCreateDevices is a bulk variant of CreateDevice.
    ///
    /// Unlike CreateDevice, it does not support creation of enrollment tokens, as
    /// it is meant for bulk inventory registration.
    @available(iOS 13, *)
    func `bulkCreateDevices`(request: Teleport_Devicetrust_V1_BulkCreateDevicesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>

    /// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
    /// An enrollment token is required for the enrollment ceremony. See
    /// EnrollDevice.
    @discardableResult
    func `createDeviceEnrollToken`(request: Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_DeviceEnrollToken>) -> Void) -> Connect.Cancelable

    /// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
    /// An enrollment token is required for the enrollment ceremony. See
    /// EnrollDevice.
    @available(iOS 13, *)
    func `createDeviceEnrollToken`(request: Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_DeviceEnrollToken>

    /// EnrollDevice performs the device enrollment ceremony.
    ///
    /// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
    /// see CreateDevice and CreateDeviceEnrollToken.
    ///
    /// An enrolled device is allowed, via AuthenticateDevice, to acquire
    /// certificates containing device extensions, thus gaining access to
    /// device-aware actions.
    ///
    /// macOS enrollment flow:
    /// -> EnrollDeviceInit (client)
    /// <- MacOSEnrollChallenge (server)
    /// -> MacOSEnrollChallengeResponse
    /// <- EnrollDeviceSuccess
    ///
    /// TPM enrollment flow:
    /// -> EnrollDeviceInit (client)
    /// <- TPMEnrollChallenge (server)
    /// -> TPMEnrollChallengeResponse
    /// <- EnrollDeviceSuccess
    func `enrollDevice`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Devicetrust_V1_EnrollDeviceResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Devicetrust_V1_EnrollDeviceRequest>

    /// EnrollDevice performs the device enrollment ceremony.
    ///
    /// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
    /// see CreateDevice and CreateDeviceEnrollToken.
    ///
    /// An enrolled device is allowed, via AuthenticateDevice, to acquire
    /// certificates containing device extensions, thus gaining access to
    /// device-aware actions.
    ///
    /// macOS enrollment flow:
    /// -> EnrollDeviceInit (client)
    /// <- MacOSEnrollChallenge (server)
    /// -> MacOSEnrollChallengeResponse
    /// <- EnrollDeviceSuccess
    ///
    /// TPM enrollment flow:
    /// -> EnrollDeviceInit (client)
    /// <- TPMEnrollChallenge (server)
    /// -> TPMEnrollChallengeResponse
    /// <- EnrollDeviceSuccess
    @available(iOS 13, *)
    func `enrollDevice`(headers: Connect.Headers) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Devicetrust_V1_EnrollDeviceRequest, Teleport_Devicetrust_V1_EnrollDeviceResponse>

    /// AuthenticateDevice performs the device authentication ceremony.
    ///
    /// Device authentication exchanges existing user certificates without device
    /// extensions for certificates augmented with device extensions. The new
    /// certificates allow the user to perform device-aware actions.
    ///
    /// Only registered and enrolled devices may perform device authentication.
    func `authenticateDevice`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>

    /// AuthenticateDevice performs the device authentication ceremony.
    ///
    /// Device authentication exchanges existing user certificates without device
    /// extensions for certificates augmented with device extensions. The new
    /// certificates allow the user to perform device-aware actions.
    ///
    /// Only registered and enrolled devices may perform device authentication.
    @available(iOS 13, *)
    func `authenticateDevice`(headers: Connect.Headers) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Devicetrust_V1_AuthenticateDeviceRequest, Teleport_Devicetrust_V1_AuthenticateDeviceResponse>

    /// ConfirmDeviceWebAuthentication finalizes the device web authentication
    /// ceremony started by the creation of a DeviceWebToken and subsequent
    /// AuthenticateDevice call.
    ///
    /// The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
    /// method, which consequently augments the corresponding Web Session
    /// certificates with device extensions.
    ///
    /// This method must be called by the Teleport Proxy, and the Proxy itself must
    /// be called by the same browser that started the on-behalf-of authentication
    /// attempt. See the /webapi/device/webconfirm endpoint.
    ///
    /// See
    /// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    @discardableResult
    func `confirmDeviceWebAuthentication`(request: Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>) -> Void) -> Connect.Cancelable

    /// ConfirmDeviceWebAuthentication finalizes the device web authentication
    /// ceremony started by the creation of a DeviceWebToken and subsequent
    /// AuthenticateDevice call.
    ///
    /// The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
    /// method, which consequently augments the corresponding Web Session
    /// certificates with device extensions.
    ///
    /// This method must be called by the Teleport Proxy, and the Proxy itself must
    /// be called by the same browser that started the on-behalf-of authentication
    /// attempt. See the /webapi/device/webconfirm endpoint.
    ///
    /// See
    /// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    @available(iOS 13, *)
    func `confirmDeviceWebAuthentication`(request: Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>

    /// Syncs device inventory from a source exterior to Teleport, for example an
    /// MDM.
    /// Allows both partial and full syncs; for the latter, devices missing from
    /// the external inventory are handled as specified.
    /// Authorized either by a valid MDM service certificate or the appropriate
    /// "device" permissions (create/update/delete).
    func `syncInventory`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Devicetrust_V1_SyncInventoryResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Devicetrust_V1_SyncInventoryRequest>

    /// Syncs device inventory from a source exterior to Teleport, for example an
    /// MDM.
    /// Allows both partial and full syncs; for the latter, devices missing from
    /// the external inventory are handled as specified.
    /// Authorized either by a valid MDM service certificate or the appropriate
    /// "device" permissions (create/update/delete).
    @available(iOS 13, *)
    func `syncInventory`(headers: Connect.Headers) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Devicetrust_V1_SyncInventoryRequest, Teleport_Devicetrust_V1_SyncInventoryResponse>

    /// Superseded by ResourceUsageService.GetUsage.
    @available(iOS, introduced: 12, deprecated: 12, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(macOS, introduced: 10.15, deprecated: 10.15, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(tvOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(watchOS, introduced: 6, deprecated: 6, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @discardableResult
    func `getDevicesUsage`(request: Teleport_Devicetrust_V1_GetDevicesUsageRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_DevicesUsage>) -> Void) -> Connect.Cancelable

    /// Superseded by ResourceUsageService.GetUsage.
    @available(iOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    func `getDevicesUsage`(request: Teleport_Devicetrust_V1_GetDevicesUsageRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Devicetrust_V1_DevicesUsage>
}

/// Concrete implementation of `Teleport_Devicetrust_V1_DeviceTrustServiceClientInterface`.
public final class Teleport_Devicetrust_V1_DeviceTrustServiceClient: Teleport_Devicetrust_V1_DeviceTrustServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `ping`(request: Teleport_Devicetrust_V1_PingRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_PingResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/Ping", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `ping`(request: Teleport_Devicetrust_V1_PingRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_PingResponse> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/Ping", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createDevice`(request: Teleport_Devicetrust_V1_CreateDeviceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/CreateDevice", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createDevice`(request: Teleport_Devicetrust_V1_CreateDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_Device> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/CreateDevice", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateDevice`(request: Teleport_Devicetrust_V1_UpdateDeviceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/UpdateDevice", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateDevice`(request: Teleport_Devicetrust_V1_UpdateDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_Device> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/UpdateDevice", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `upsertDevice`(request: Teleport_Devicetrust_V1_UpsertDeviceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/UpsertDevice", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `upsertDevice`(request: Teleport_Devicetrust_V1_UpsertDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_Device> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/UpsertDevice", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteDevice`(request: Teleport_Devicetrust_V1_DeleteDeviceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteDevice`(request: Teleport_Devicetrust_V1_DeleteDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `findDevices`(request: Teleport_Devicetrust_V1_FindDevicesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_FindDevicesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/FindDevices", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `findDevices`(request: Teleport_Devicetrust_V1_FindDevicesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_FindDevicesResponse> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/FindDevices", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getDevice`(request: Teleport_Devicetrust_V1_GetDeviceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_Device>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/GetDevice", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getDevice`(request: Teleport_Devicetrust_V1_GetDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_Device> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/GetDevice", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listDevices`(request: Teleport_Devicetrust_V1_ListDevicesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_ListDevicesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/ListDevices", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listDevices`(request: Teleport_Devicetrust_V1_ListDevicesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_ListDevicesResponse> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/ListDevices", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listDevicesByUser`(request: Teleport_Devicetrust_V1_ListDevicesByUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_ListDevicesByUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/ListDevicesByUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listDevicesByUser`(request: Teleport_Devicetrust_V1_ListDevicesByUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_ListDevicesByUserResponse> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/ListDevicesByUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `bulkCreateDevices`(request: Teleport_Devicetrust_V1_BulkCreateDevicesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `bulkCreateDevices`(request: Teleport_Devicetrust_V1_BulkCreateDevicesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_BulkCreateDevicesResponse> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createDeviceEnrollToken`(request: Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_DeviceEnrollToken>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createDeviceEnrollToken`(request: Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_DeviceEnrollToken> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public func `enrollDevice`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Devicetrust_V1_EnrollDeviceResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Devicetrust_V1_EnrollDeviceRequest> {
        return self.client.bidirectionalStream(path: "/teleport.devicetrust.v1.DeviceTrustService/EnrollDevice", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `enrollDevice`(headers: Connect.Headers = [:]) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Devicetrust_V1_EnrollDeviceRequest, Teleport_Devicetrust_V1_EnrollDeviceResponse> {
        return self.client.bidirectionalStream(path: "/teleport.devicetrust.v1.DeviceTrustService/EnrollDevice", headers: headers)
    }

    public func `authenticateDevice`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Devicetrust_V1_AuthenticateDeviceRequest> {
        return self.client.bidirectionalStream(path: "/teleport.devicetrust.v1.DeviceTrustService/AuthenticateDevice", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `authenticateDevice`(headers: Connect.Headers = [:]) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Devicetrust_V1_AuthenticateDeviceRequest, Teleport_Devicetrust_V1_AuthenticateDeviceResponse> {
        return self.client.bidirectionalStream(path: "/teleport.devicetrust.v1.DeviceTrustService/AuthenticateDevice", headers: headers)
    }

    @discardableResult
    public func `confirmDeviceWebAuthentication`(request: Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/ConfirmDeviceWebAuthentication", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `confirmDeviceWebAuthentication`(request: Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/ConfirmDeviceWebAuthentication", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public func `syncInventory`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Devicetrust_V1_SyncInventoryResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Devicetrust_V1_SyncInventoryRequest> {
        return self.client.bidirectionalStream(path: "/teleport.devicetrust.v1.DeviceTrustService/SyncInventory", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `syncInventory`(headers: Connect.Headers = [:]) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Devicetrust_V1_SyncInventoryRequest, Teleport_Devicetrust_V1_SyncInventoryResponse> {
        return self.client.bidirectionalStream(path: "/teleport.devicetrust.v1.DeviceTrustService/SyncInventory", headers: headers)
    }

    @available(iOS, introduced: 12, deprecated: 12, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(macOS, introduced: 10.15, deprecated: 10.15, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(tvOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(watchOS, introduced: 6, deprecated: 6, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @discardableResult
    public func `getDevicesUsage`(request: Teleport_Devicetrust_V1_GetDevicesUsageRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Devicetrust_V1_DevicesUsage>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/GetDevicesUsage", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    public func `getDevicesUsage`(request: Teleport_Devicetrust_V1_GetDevicesUsageRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Devicetrust_V1_DevicesUsage> {
        return await self.client.unary(path: "/teleport.devicetrust.v1.DeviceTrustService/GetDevicesUsage", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let ping = Connect.MethodSpec(name: "Ping", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let createDevice = Connect.MethodSpec(name: "CreateDevice", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let updateDevice = Connect.MethodSpec(name: "UpdateDevice", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let upsertDevice = Connect.MethodSpec(name: "UpsertDevice", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let deleteDevice = Connect.MethodSpec(name: "DeleteDevice", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let findDevices = Connect.MethodSpec(name: "FindDevices", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let getDevice = Connect.MethodSpec(name: "GetDevice", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let listDevices = Connect.MethodSpec(name: "ListDevices", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let listDevicesByUser = Connect.MethodSpec(name: "ListDevicesByUser", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let bulkCreateDevices = Connect.MethodSpec(name: "BulkCreateDevices", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let createDeviceEnrollToken = Connect.MethodSpec(name: "CreateDeviceEnrollToken", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let enrollDevice = Connect.MethodSpec(name: "EnrollDevice", service: "teleport.devicetrust.v1.DeviceTrustService", type: .bidirectionalStream)
            public static let authenticateDevice = Connect.MethodSpec(name: "AuthenticateDevice", service: "teleport.devicetrust.v1.DeviceTrustService", type: .bidirectionalStream)
            public static let confirmDeviceWebAuthentication = Connect.MethodSpec(name: "ConfirmDeviceWebAuthentication", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
            public static let syncInventory = Connect.MethodSpec(name: "SyncInventory", service: "teleport.devicetrust.v1.DeviceTrustService", type: .bidirectionalStream)
            public static let getDevicesUsage = Connect.MethodSpec(name: "GetDevicesUsage", service: "teleport.devicetrust.v1.DeviceTrustService", type: .unary)
        }
    }
}
