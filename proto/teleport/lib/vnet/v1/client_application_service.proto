// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package teleport.lib.vnet.v1;

import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/gen/proto/go/teleport/lib/vnet/v1;vnetv1";

// ClientApplicationService is a service the VNet client applications provide to
// the VNet admin process to facilate app queries, certificate issuance,
// metrics, error reporting, and signatures.
service ClientApplicationService {
  // AuthenticateProcess is used to authenticate the client application (running
  // this gRPC service) to the Windows service.
  rpc AuthenticateProcess(AuthenticateProcessRequest) returns (AuthenticateProcessResponse);
  // ReportNetworkStackInfo should be called exactly once when the admin process
  // connects to the ClientApplicationService, it's used to report information
  // about the VNet networking stack to the client application.
  rpc ReportNetworkStackInfo(ReportNetworkStackInfoRequest) returns (ReportNetworkStackInfoResponse);
  // Ping is used by the admin process to regularly poll that the client
  // application is still running.
  rpc Ping(PingRequest) returns (PingResponse);
  // ResolveFQDN is called during DNS resolution to resolve a fully-qualified
  // domain name to a target.
  rpc ResolveFQDN(ResolveFQDNRequest) returns (ResolveFQDNResponse);
  // ReissueAppCert issues a new app cert.
  rpc ReissueAppCert(ReissueAppCertRequest) returns (ReissueAppCertResponse);
  // SignForApp issues a signature with the private key associated with an x509
  // certificate previously issued for a requested app.
  rpc SignForApp(SignForAppRequest) returns (SignForAppResponse);
  // OnNewConnection gets called whenever a new connection is about to be
  // established through VNet for observability.
  rpc OnNewConnection(OnNewConnectionRequest) returns (OnNewConnectionResponse);
  // OnInvalidLocalPort gets called before VNet refuses to handle a connection
  // to a multi-port TCP app because the provided port does not match any of the
  // TCP ports in the app spec.
  rpc OnInvalidLocalPort(OnInvalidLocalPortRequest) returns (OnInvalidLocalPortResponse);
  // GetTargetOSConfiguration gets the target OS configuration.
  rpc GetTargetOSConfiguration(GetTargetOSConfigurationRequest) returns (GetTargetOSConfigurationResponse);
  // UserTLSCert returns the user TLS certificate for a specific profile.
  rpc UserTLSCert(UserTLSCertRequest) returns (UserTLSCertResponse);
  // SignForUserTLS signs a digest with the user TLS private key.
  rpc SignForUserTLS(SignForUserTLSRequest) returns (SignForUserTLSResponse);
  // SessionSSHConfig returns the user SSH configuration for an SSH session.
  rpc SessionSSHConfig(SessionSSHConfigRequest) returns (SessionSSHConfigResponse);
  // SignForSSHSession signs a digest with the SSH private key associated with the
  // session from a previous call to SessionSSHConfig.
  rpc SignForSSHSession(SignForSSHSessionRequest) returns (SignForSSHSessionResponse);
  // ExchangeSSHKeys sends VNet's SSH host CA key to the client application and
  // returns the user public key.
  rpc ExchangeSSHKeys(ExchangeSSHKeysRequest) returns (ExchangeSSHKeysResponse);
}

// AuthenticateProcessRequest is a request for AuthenticateProcess.
message AuthenticateProcessRequest {
  // Version is the admin process version.
  string version = 1;
  // PipePath is the path to a named pipe used for process authentication on
  // Windows. The client application must dial the pipe
  string pipe_path = 2;
}

// AuthenticateProcessResponse is a response for AuthenticateProcess.
message AuthenticateProcessResponse {
  // Version is the client application version.
  string version = 1;
}

// ReportNetworkStackInfoRequest is a request to report network stack
// information to the client application.
message ReportNetworkStackInfoRequest {
  // NetworkStackInfo holds network stack information.
  NetworkStackInfo network_stack_info = 1;
}

// NetworkStackInfo holds static information about the VNet networking stack.
message NetworkStackInfo {
  // InterfaceName is the name of the TUN interface used by VNet.
  string interface_name = 1;
  // Ipv6Prefix the the IPv5 prefix under which VNet assigns IPv6 addresses.
  string ipv6_prefix = 2;
}

// ReportNetworkStackInfoResponse is currently empty.
message ReportNetworkStackInfoResponse {}

// PingRequest is a request for the Ping rpc.
message PingRequest {}

// PingResponse is a response for the Ping rpc.
message PingResponse {}

// ResolveFQDNRequest is a request for ResolveFQDN.
message ResolveFQDNRequest {
  // Fqdn is the fully-qualified domain name queried.
  string fqdn = 1;
}

// ResolveFQDNReponse is a response for ResolveFQDN.
message ResolveFQDNResponse {
  oneof match {
    // MatchedTcpApp will be set when the query matched a TCP app.
    MatchedTCPApp matched_tcp_app = 1;
    // MatchedWebApp will be set when the query matched a web app.
    MatchedWebApp matched_web_app = 2;
    // MatchedCluster will be set when the query did not match any app, but did
    // match a subdomain of a proxy address. VNet will resolve the DNS query to
    // a handler that may later resolve the FQDN to an app or SSH server.
    MatchedCluster matched_cluster = 3;
  }
}

// MatchedTCPApp holds info about a TCP app that matched a query.
message MatchedTCPApp {
  // AppInfo holds all necessary info for making connections to the resolved app.
  AppInfo app_info = 1;
}

// MatchedTCPApp is a placeholder to signify that the query matched a web app.
message MatchedWebApp {}

// MatchedCluster holds info about a cluster that a query matched.
message MatchedCluster {
  // Ipv4CidrRange is the CIDR range from which an IPv4 address should be assigned
  // based on this cluster's vnet_config.
  string ipv4_cidr_range = 1;
  // WebProxyAddr is the web proxy address of the root cluster that matched the
  // query.
  string web_proxy_addr = 2;
  // Profile is the profile the matched cluster was found in.
  string profile = 3;
  // RootCluster will always be set to the name of the root cluster that matched
  // the query.
  string root_cluster = 4;
  // LeafCluster will be set only when the query matched a leaf cluster of
  // RootCluster, or else it will be empty.
  string leaf_cluster = 5;
}

// AppInfo holds all necessary info for making connections to VNet TCP apps.
message AppInfo {
  // AppKey uniquely identifies a TCP app (and optionally a port for multi-port
  // TCP apps).
  AppKey app_key = 1;
  // Cluster is the name of the cluster in which the app is found.
  // Iff the app is in a leaf cluster, this will match app_key.leaf_cluster.
  string cluster = 2;
  // App is the app spec.
  types.AppV3 app = 3;
  // Ipv4CidrRange is the CIDR range from which an IPv4 address should be
  // assigned to the app.
  string ipv4_cidr_range = 4;
  // DialOptions holds options that should be used when dialing the root cluster
  // of the app.
  DialOptions dial_options = 5;
}

// AppKey uniquely identifies a TCP app in a specific profile and cluster.
message AppKey {
  // Profile is the profile in which the app is found.
  string profile = 1;
  // LeafCluster is the leaf cluster in which the app is found. If empty, the
  // app is in the root cluster for the profile.
  string leaf_cluster = 2;
  // Name is the name of the app.
  string name = 3;
}

// DialOptions holds ALPN dial options for dialing apps.
message DialOptions {
  // WebProxyAddr is the address to dial.
  string web_proxy_addr = 1;
  // AlpnConnUpgradeRequired specifies if ALPN connection upgrade is required.
  bool alpn_conn_upgrade_required = 2;
  // Sni is a ServerName value set for upstream TLS connection.
  string sni = 3;
  // InsecureSkipVerify turns off verification for x509 upstream ALPN proxy service certificate.
  bool insecure_skip_verify = 4;
  // RootClusterCaCertPool is the host CA TLS certificate pool for the root
  // cluster. It is a PEM-encoded X509 certificate pool. It should be used when
  // dialing the proxy and AlpnConnUpgradeRequired is true or when dialing the
  // transport service.
  bytes root_cluster_ca_cert_pool = 5;
}

// ReissueAppCertRequest is a request for ReissueAppCert.
message ReissueAppCertRequest {
  // AppInfo contains info about the app, every ReissueAppCertRequest must
  // include an app_info as returned from ResolveFQDN.
  AppInfo app_info = 1;
  // TargetPort is the TCP port to issue the cert for.
  uint32 target_port = 2;
}

// ReissueAppCertResponse is a response for ReissueAppCert.
message ReissueAppCertResponse {
  // Cert is the issued app certificate in x509 DER format.
  bytes cert = 1;
}

// SignForAppRequest is a request to sign data with a private key that the
// server has cached for the (app_key, target_port) pair. The (app_key,
// target_port) pair here must match a previous successful call to
// ReissueAppCert. The private key used for the signature will match the subject
// public key of the issued x509 certificate.
message SignForAppRequest {
  reserved 3, 4, 5;
  reserved "digest", "hash", "pss_salt_length";
  // AppKey uniquely identifies a TCP app, it must match the key of an app from
  // a previous successful call to ReissueAppCert.
  AppKey app_key = 1;
  // TargetPort identifies the TCP port of the app, it must match the
  // TargetPort of a previous successful call to ReissueAppCert for an app
  // matching AppKey.
  uint32 target_port = 2;
  // Sign holds signature request details.
  SignRequest sign = 6;
}

// SignRequest holds signature request details.
message SignRequest {
  // Digest is the bytes to sign.
  bytes digest = 1;
  // Hash is the hash function used to compute digest.
  Hash hash = 2;
  // PssSaltLength specifies the length of the salt added to the digest before a
  // signature. Only used and required for RSA PSS signatures.
  optional int32 pss_salt_length = 3;
}

// Hash specifies a cryptographic hash function.
enum Hash {
  HASH_UNSPECIFIED = 0;
  // HASH_NONE is used for Ed25519 signatures, which do no pre-hash.
  // Currently app access always uses ECDSA or RSA signatures, except for some
  // tests that use Ed25519. This is unlikely to be used in product code unless
  // and until that changes.
  HASH_NONE = 1;
  // HASH_SHA256 is used with ECDSA P-256 and RSA 2048 signatures.
  HASH_SHA256 = 2;
}

// SignForAppResponse is a response for SignForApp.
message SignForAppResponse {
  // Signature is the signature.
  bytes signature = 1;
}

// OnNewConnectionRequest is a request for OnNewConnection.
message OnNewConnectionRequest {
  // AppKey identifies the app the connection is being made for.
  AppKey app_key = 1;
}

// OnNewConnectionRequest is a response for OnNewConnection.
message OnNewConnectionResponse {}

// OnInvalidLocalPortRequest is a request for OnInvalidLocalPort.
message OnInvalidLocalPortRequest {
  // AppInfo identifies the app the request was made for. AppInfo is used
  // instaed of AppKey so that the application spec is included, which includes
  // the TCP port ranges allowed for the app, which are ultimately included in
  // the user error message.
  AppInfo app_info = 1;
  // TargetPort is the invalid port the request was made for.
  uint32 target_port = 2;
}

// OnInvalidLocalPortResponse is a response for OnInvalidLocalPort.
message OnInvalidLocalPortResponse {}

// GetTargetOSConfigurationRequest is a request for the target host OS configuration.
message GetTargetOSConfigurationRequest {}

// GetTargetOSConfigurationResponse is a response including the target host OS configuration.
message GetTargetOSConfigurationResponse {
  // TargetOsConfiguration holds target configuration values for the host OS.
  TargetOSConfiguration target_os_configuration = 1;
}

// TargetOSConfiguration holds desired OS configuration parameters that need to
// be fetched from the client application.
message TargetOSConfiguration {
  // DnsZones is a list of all DNS zones that VNet should handle queries for. This
  // should include the public hostname of every cluster the user is logged in
  // to, and all configured custom DNS zones from all clusters.
  repeated string dns_zones = 1;
  // Ipv4CidrRanges is a list of IPv4 CIDR ranges that VNet addresses may be
  // assigned from, these ranges should all be routed to the VNet TUN interface.
  // This should include the custom range configured for each cluster the user
  // is logged in to, and if any cluster does not configure a custom range it
  // should also include the default range.
  repeated string ipv4_cidr_ranges = 2;
}

// UserTLSCertRequest is a request for UserTLSCert.
message UserTLSCertRequest {
  // Profile is the profile to retrieve the certificate for.
  string profile = 1;
}

// UserTLSCertResponse is a response for UserTLSCert.
message UserTLSCertResponse {
  // Cert is the user TLS certificate in X.509 ASN.1 DER format.
  bytes cert = 1;
  // DialOptions holds options that should be used when dialing the root cluster
  // proxy.
  DialOptions dial_options = 2;
}

// SignForUserTLSRequest is a request for SignForUserTLS.
message SignForUserTLSRequest {
  // Profile is the user profile to sign for.
  string profile = 1;
  // Sign holds signature request details.
  SignRequest sign = 2;
}

// SignForUserTLSResponse is a response for SignForUserTLS.
message SignForUserTLSResponse {
  // Signature is the signature.
  bytes signature = 1;
}

// SessionSSHConfigRequest is a request for SessionSSHConfig.
message SessionSSHConfigRequest {
  // Profile is the profile in which the SSH server is found.
  string profile = 1;
  // RootCluster is the cluster in which the SSH server is found.
  string root_cluster = 2;
  // LeafCluster is the leaf cluster in which the SSH server is found.
  // If empty, the SSH server is in the root cluster.
  string leaf_cluster = 3;
  // Address is the address of the SSH server.
  string address = 4;
  // User is the SSH user the session is for.
  string user = 5;
}

// SessionSSHConfigResponse is a response for SessionSSHConfig.
message SessionSSHConfigResponse {
  // SessionId is an opaque identifier for the session, it should be passed to
  // SignForSSHSession to issue signatures with the private key associated with
  // the session.
  string session_id = 1;
  // Cert is the session SSH certificate in SSH wire format.
  bytes cert = 2;
  // TrustedCas is a list of trusted SSH certificate authorities in SSH wire
  // format.
  repeated bytes trusted_cas = 3;
}

// SignForSSHSessionRequest is a request for SignForSSHSession.
message SignForSSHSessionRequest {
  // SessionId is an opaque identifier for the session returned from a previous
  // call to SessionSSHConfig.
  string session_id = 1;
  // Sign holds signature request details.
  SignRequest sign = 2;
}

// SignForSSHSessionResponse is a response for SignForSSHSession.
message SignForSSHSessionResponse {
  // Signature is the signature.
  bytes signature = 1;
}

// ExchangeSSHKeysRequest is a request to exchange SSH keys for VNet SSH.
message ExchangeSSHKeysRequest {
  // HostPublicKey is the host key that should be trusted by clients connecting
  // to VNet SSH addresses. It is encoded in OpenSSH wire format.
  bytes host_public_key = 1;
}

// ExchangeSSHKeysResponse is a response for ExchangeSSHKeys.
message ExchangeSSHKeysResponse {
  // UserPublicKey is the user key that should be trusted by VNet for incoming
  // connections from SSH clients. It is encoded in OpenSSH wire format.
  bytes user_public_key = 1;
}
