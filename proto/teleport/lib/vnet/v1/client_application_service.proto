// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package teleport.lib.vnet.v1;

import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/gen/proto/go/teleport/lib/vnet/v1;vnetv1";

// ClientApplicationService is a service the VNet client applications provide to
// the VNet admin process to facilate app queries, certificate issuance,
// metrics, error reporting, and signatures.
service ClientApplicationService {
  // AuthenticateProcess mutually authenticates client applicates to the admin
  // service.
  rpc AuthenticateProcess(AuthenticateProcessRequest) returns (AuthenticateProcessResponse);
  // Ping is used by the admin process to regularly poll that the client
  // application is still running.
  rpc Ping(PingRequest) returns (PingResponse);
  // ResolveAppInfo returns info for the given app fqdn, or an error if the app
  // is not present in any logged-in cluster.
  rpc ResolveAppInfo(ResolveAppInfoRequest) returns (ResolveAppInfoResponse);
  // ReissueAppCert issues a new app cert.
  rpc ReissueAppCert(ReissueAppCertRequest) returns (ReissueAppCertResponse);
  // SignForApp issues a signature with the private key associated with an x509
  // certificate previously issued for a requested app.
  rpc SignForApp(SignForAppRequest) returns (SignForAppResponse);
  // OnNewConnection gets called whenever a new connection is about to be
  // established through VNet for observability.
  rpc OnNewConnection(OnNewConnectionRequest) returns (OnNewConnectionResponse);
  // OnInvalidLocalPort gets called before VNet refuses to handle a connection
  // to a multi-port TCP app because the provided port does not match any of the
  // TCP ports in the app spec.
  rpc OnInvalidLocalPort(OnInvalidLocalPortRequest) returns (OnInvalidLocalPortResponse);
}

// AuthenticateProcessRequest is a request for AuthenticateProcess.
message AuthenticateProcessRequest {
  // version is the admin process version.
  string version = 1;
  // pipe_path is the path to a named pipe used for process authentication.
  string pipe_path = 2;
}

// AuthenticateProcessResponse is a response for AuthenticateProcess.
message AuthenticateProcessResponse {
  // version is the client application version.
  string version = 1;
}

// PingRequest is a request for the Ping rpc.
message PingRequest {}

// PingResponse is a response for the Ping rpc.
message PingResponse {}

// ResolveAppInfoRequest is a request for ResolveAppInfo.
message ResolveAppInfoRequest {
  // fqdn is the fully-qualified domain name of the app.
  string fqdn = 1;
}

// ResolveAppInfoResponse is a response for ResolveAppInfo.
message ResolveAppInfoResponse {
  // app_info holds all necessary info for making connections to the resolved app.
  AppInfo app_info = 1;
}

// AppInfo holds all necessary info for making connections to VNet TCP apps.
message AppInfo {
  // app_key uniquely identifies a TCP app (and optionally a port for multi-port
  // TCP apps).
  AppKey app_key = 1;
  // cluster is the name of the cluster in which the app is found.
  // Iff the app is in a leaf cluster, this will match app_key.leaf_cluster.
  string cluster = 2;
  // app is the app spec.
  types.AppV3 app = 3;
  // ipv4_cidr_range is the CIDR range from which an IPv4 address should be
  // assigned to the app.
  string ipv4_cidr_range = 4;
  // dial_options holds options that should be used when dialing the root cluster
  // of the app.
  DialOptions dial_options = 5;
}

// AppKey uniquely identifies a TCP app in a specific profile and cluster.
message AppKey {
  // profile is the profile in which the app is found.
  string profile = 1;
  // leaf_cluster is the leaf cluster in which the app is found. If empty, the
  // app is in the root cluster for the profile.
  string leaf_cluster = 2;
  // name is the name of the app.
  string name = 3;
}

// DialOptions holds ALPN dial options for dialing apps.
message DialOptions {
  // web_proxy_addr is the address to dial.
  string web_proxy_addr = 1;
  // alpn_conn_upgrade_required specifies if ALPN connection upgrade is required.
  bool alpn_conn_upgrade_required = 2;
  // sni is a ServerName value set for upstream TLS connection.
  string sni = 3;
  // insecure_skip_verify turns off verification for x509 upstream ALPN proxy service certificate.
  bool insecure_skip_verify = 4;
  // root_cluster_ca_cert_pool overrides the x509 certificate pool used to verify the server.
  bytes root_cluster_ca_cert_pool = 5;
}

// ReissueAppCertRequest is a request for ReissueAppCert.
message ReissueAppCertRequest {
  // app_info contains info about the app, every ReissueAppCertRequest must
  // include an app_info as returned from ResolveAppInfo.
  AppInfo app_info = 1;
  // target_port is the TCP port to issue the cert for.
  uint32 target_port = 2;
}

// ReissueAppCertResponse is a response for ReissueAppCert.
message ReissueAppCertResponse {
  // cert is the issued app certificate in x509 DER format.
  bytes cert = 1;
}

// SignForAppRequest is a request to sign data with a private key that the
// server has cached for the (app_key, target_port) pair. The (app_key,
// target_port) pair here must match a previous successful call to
// ReissueAppCert. The private key used for the signature will match the subject
// public key of the issued x509 certificate.
message SignForAppRequest {
  // app_key uniquely identifies a TCP app, it must match the key of an app from
  // a previous successful call to ReissueAppCert.
  AppKey app_key = 1;
  // target_port identifies the TCP port of the app, it must match the
  // target_port of a previous successful call to ReissueAppCert for an app
  // matching AppKey.
  uint32 target_port = 2;
  // digest is the bytes to sign.
  bytes digest = 3;
  // hash is the hash function used to compute digest.
  Hash hash = 4;
}

// Hash specifies a cryptographic hash function.
enum Hash {
  HASH_UNSPECIFIED = 0;
  // HASH_NONE is used for Ed25519 signatures, which do no pre-hash.
  // Currently app access always uses ECDSA or RSA signatures, except for some
  // tests that use Ed25519. This is unlikely to be used in product code unless
  // and until that changes.
  HASH_NONE = 1;
  // HASH_SHA256 is used with ECDSA P-256 and RSA 2048 signatures.
  HASH_SHA256 = 2;
}

// SignForAppResponse is a response for SignForApp.
message SignForAppResponse {
  // signature is the signature.
  bytes signature = 1;
}

// OnNewConnectionRequest is a request for OnNewConnection.
message OnNewConnectionRequest {
  // app_key identifies the app the connection is being made for.
  AppKey app_key = 1;
}

// OnNewConnectionRequest is a response for OnNewConnection.
message OnNewConnectionResponse {}

// OnInvalidLocalPortRequest is a request for OnInvalidLocalPort.
message OnInvalidLocalPortRequest {
  // app_info identifies the app the request was made for. AppInfo is used
  // instaed of AppKey so that the application spec is included, which includes
  // the TCP port ranges allowed for the app, which are ultimately included in
  // the user error message.
  AppInfo app_info = 1;
  // target_port is the invalid port the request was made for.
  uint32 target_port = 2;
}

// OnInvalidLocalPortResponse is a response for OnInvalidLocalPort.
message OnInvalidLocalPortResponse {}
