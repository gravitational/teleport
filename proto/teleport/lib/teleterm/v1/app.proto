/*
 * Teleport
 * Copyright (C) 2024 Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package teleport.lib.teleterm.v1;

import "teleport/lib/teleterm/v1/label.proto";

option go_package = "github.com/gravitational/teleport/gen/proto/go/teleport/lib/teleterm/v1;teletermv1";

// App describes an app resource.
message App {
  // uri uniquely identifies an app within Teleport Connect.
  string uri = 1;
  // name is the name of the app.
  string name = 2;
  // endpoint_uri is the URI to which the app service is going to proxy requests. It corresponds to
  // app_service.apps[].uri in the Teleport configuration.
  string endpoint_uri = 3;
  // desc is the app description.
  string desc = 4;
  // aws_console is true if this app is AWS management console.
  bool aws_console = 5;
  // public_addr is the public address the application is accessible at.
  //
  // If the app resource has its public_addr field set, this field returns the value of public_addr
  // from the app resource.
  //
  // If the app resource does not have public_addr field set, this field returns the name of the app
  // under the proxy hostname of the cluster to which the app belongs, e.g.,
  // dumper.root-cluster.com, example-app.leaf-cluster.org.
  //
  // In both cases public_addr does not include a port number. This is all cool and fine if the
  // actual public address and the proxy service share the default port 443. In a scenario where the
  // proxy uses a non-standard port like 3080 and the public address uses 443, it might cause
  // problems. public_addr of an app resource cannot include a port number. The backend will reject
  // such app resource with an error saying "public_addr "example.com:1337" can not contain a port,
  // applications will be available on the same port as the web proxy". This is not always the case
  // for custom public addresses. Ultimately, it means that public_addr alone might not be enough to
  // access the app if either the cluster or the custom address use a port number other than 443.
  //
  // public_addr is always empty for SAML applications.
  string public_addr = 6;
  // friendly_name is a user readable name of the app.
  // Right now, it is set only for Okta applications.
  // It is constructed from a label value.
  // See more in api/types/resource.go.
  string friendly_name = 7;
  // saml_app is true if the application is a SAML Application (Service Provider).
  bool saml_app = 8;
  // labels is a list of labels for the app.
  repeated Label labels = 9;
  // fqdn is the hostname under which the app is accessible within the root cluster. It is used by
  // the Web UI to route the requests from the /web/launch URL to the correct app. fqdn by itself
  // does not include the port number, so fqdn alone cannot be used to launch an app, hence why it's
  // incorporated into the /web/launch URL.
  //
  // If the app belongs to a root cluster, fqdn is equal to public_addr or [name].[root cluster
  // proxy hostname] if public_addr is not present.
  // If the app belongs to a leaf cluster, fqdn is equal to [name].[root cluster proxy hostname].
  //
  // fqdn is not present for SAML applications.
  string fqdn = 10;
  // aws_roles is a list of AWS IAM roles for the application representing AWS console.
  repeated AWSRole aws_roles = 11;
}

// AwsRole describes AWS IAM role.
message AWSRole {
  // Name is the full role name with the entire path.
  string name = 1;
  // Display is the role display name.
  string display = 2;
  // ARN is the full role ARN.
  string arn = 3;
  // AccountID is the AWS Account ID this role refers to.
  string account_id = 4;
}
