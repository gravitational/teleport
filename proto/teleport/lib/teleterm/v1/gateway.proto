/*
 * Teleport
 * Copyright (C) 2023  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package teleport.lib.teleterm.v1;

option go_package = "github.com/gravitational/teleport/gen/proto/go/teleport/lib/teleterm/v1;teletermv1";

// Gateway is Teleterm's name for a connection to a resource like a database or a web app
// established through our ALPN proxy.
//
// The term "gateway" is used to avoid using the term "proxy" itself which could be confusing as
// "proxy" means a couple of different things depending on the context. But for Teleterm, a gateway
// is always an ALPN proxy connection.
//
// See RFD 39 for more info on ALPN.
message Gateway {
  // uri is the gateway uri
  string uri = 1;
  // target_name is the target resource name
  string target_name = 2;
  // target_uri is the target uri
  string target_uri = 3;
  // target_user is the target user
  string target_user = 4;
  // local_address is the gateway address on localhost
  string local_address = 5;
  // local_port is the gateway address on localhost
  string local_port = 6;
  // protocol is the gateway protocol
  string protocol = 7;
  reserved 8;
  reserved "cli_command";
  // target_subresource_name points at a subresource of the remote resource, for example a
  // database name on a database server.
  string target_subresource_name = 9;
  // gateway_cli_client represents a command that the user can execute to connect to the resource
  // through the gateway.
  //
  // Instead of generating those commands in in the frontend code, they are returned from the tsh
  // daemon. This means that the Database Access team can add support for a new protocol and
  // Connect will support it right away with no extra changes.
  GatewayCLICommand gateway_cli_command = 10;
}

// GatewayCLICommand represents a command that the user can execute to connect to a gateway
// resource. It is a combination of two different os/exec.Cmd structs, where path, args and env are
// directly taken from one Cmd and the preview field is constructed from another Cmd.
message GatewayCLICommand {
  // path is the absolute path to the CLI client of a gateway if the client is
  // in PATH. Otherwise, the name of the program we were trying to find.
  string path = 1;
  // args is a list containing the name of the program as the first element
  // and the actual args as the other elements
  repeated string args = 2;
  // env is a list of env vars that need to be set for the command
  // invocation. The elements of the list are in the format of NAME=value.
  repeated string env = 3;
  // preview is used to show the user what command will be executed before they decide to run it.
  // It can also be copied and then pasted into a terminal.
  // It's like os/exec.Cmd.String with two exceptions:
  //
  // 1) It is prepended with Cmd.Env.
  // 2) The command name is relative and not absolute.
  // 3) It is taken from a different Cmd than the other fields in this message. This Cmd uses a
  // special print format which makes the args suitable to be entered into a terminal, but not to
  // directly spawn a process.
  //
  // Should not be used to execute the command in the shell. Instead, use path, args, and env.
  string preview = 4;
}
