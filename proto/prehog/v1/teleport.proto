/*
 * Teleport
 * Copyright (C) 2023  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package prehog.v1;

import "google/protobuf/timestamp.proto";

// counters for user activity coming from a specific auth server from a specific
// cluster, for a time window of up to 15 minutes
//
// PostHog event: tp.user.activity
message UserActivityReport {
  // randomly generated UUID for this specific report, 16 bytes (in string order)
  //
  // PostHog property: tp.report_uuid (in 8-4-4-4-12 string form)
  bytes report_uuid = 1;

  // cluster name, anonymized, 32 bytes (HMAC-SHA-256)
  //
  // PostHog property: tp.cluster_name (in base64)
  bytes cluster_name = 2;

  // hostid of the auth that collected this report, anonymized, 32 bytes (HMAC-SHA-256)
  //
  // PostHog property: tp.reporter_hostid (in base64)
  bytes reporter_hostid = 3;

  // beginning of the time window for this data; ending is not specified but is
  // intended to be at most 15 minutes
  //
  // PostHog timestamp (not a property, the ingest time is tp.report_time instead)
  google.protobuf.Timestamp start_time = 4;

  // one set of counters for each user
  //
  // PostHog property: tp.records (encoded as a map keyed by username, not as a list)
  repeated UserActivityRecord records = 5;
}

// The kind of user a given username refers to. Usernames should always refer to
// a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
// bot users.
enum UserKind {
  // Indicates a legacy cluster emitting events without a defined user kind.
  // Note that users (from PostHog's perspective) can be identified via future
  // events if the cluster is upgraded to specify this field.
  //
  // PostHog property value: ""
  USER_KIND_UNSPECIFIED = 0;

  // Indicates the user associated with this event is human, either created
  // locally or via SSO.
  //
  // PostHog property value: "human"
  USER_KIND_HUMAN = 1;

  // Indicates the user associated with this event is a Machine ID bot user.
  //
  // PostHog property value: "bot"
  USER_KIND_BOT = 2;
}

// a set of activity counters for a single user; some old versions report
// "ssh_port_sessions", counting both SSH port forwards and kubectl port-forward
// connections in a single counter
//
// fields other than user_name are encoded as the same field name in PostHog
message UserActivityRecord {
  // anonymized, 32 bytes (HMAC-SHA-256)
  //
  // key of the tp.records map in tp.user.activity (in base64)
  bytes user_name = 1;

  // Indicates the type of user, e.g. bot or human, if known.
  UserKind user_kind = 14;

  // counter of user.login events
  uint64 logins = 2;

  // counter of session.start events (non-Kube)
  uint64 ssh_sessions = 3;
  // counter of app.session.start events (non-TCP)
  uint64 app_sessions = 4;
  // counter of session.start events (only Kube)
  uint64 kube_sessions = 5;
  // counter of db.session.start events
  uint64 db_sessions = 6;
  // counter of windows.desktop.session.start events
  uint64 desktop_sessions = 7;
  // counter of app.session.start events (only TCP)
  uint64 app_tcp_sessions = 8;
  // counter of port events (both SSH and Kube)
  uint64 ssh_port_sessions = 9 [deprecated = true];
  // counter of kube.request events
  uint64 kube_requests = 10;
  // counter of sftp events
  uint64 sftp_events = 11;
  // counter of port events (only SSH)
  uint64 ssh_port_v2_sessions = 12;
  // counter of port events (only Kube)
  uint64 kube_port_sessions = 13;
  // counter of SPIFFE SVIDs issued
  uint64 spiffe_svids_issued = 15;
  // counter of bot joins
  uint64 bot_joins = 16;
  // counter of certificates issued for this user
  uint64 certificates_issued = 17;
  // counter of SVIDs issued for each SPIFFE ID.
  repeated SPIFFEIDRecord spiffe_ids_issued = 18;
}

// the kind of a "resource" (e.g. a node, a database, a desktop, etc.)
// Keep in sync with prehog/v1alpha/teleport.proto
enum ResourceKind {
  RESOURCE_KIND_UNSPECIFIED = 0;

  // PostHog property value: "node"
  RESOURCE_KIND_NODE = 1;

  // PostHog property value: "app_server"
  RESOURCE_KIND_APP_SERVER = 2;

  // PostHog property value: "kube_server"
  RESOURCE_KIND_KUBE_SERVER = 3;

  // PostHog property value: "db_server"
  RESOURCE_KIND_DB_SERVER = 4;

  // PostHog property value: "windows_desktop"
  RESOURCE_KIND_WINDOWS_DESKTOP = 5;

  // ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
  // empty or "teleport"); not used in keepalives
  //
  // PostHog property value: "node.openssh"
  RESOURCE_KIND_NODE_OPENSSH = 6;

  // ServerV3 ("node") heartbeat with a subkind of "openssh-ec2-ice".
  // Nodes that map EC2 instances and are accessed using EC2 Instance Connect Endpoint.
  // Not used in keepalives.
  // This is the SubKind SubKindOpenSSHEICENode in teleport repo.
  //
  // PostHog property value: "node.openssh_ec2_ice"
  RESOURCE_KIND_NODE_OPENSSH_EICE = 7;
}

message ResourcePresenceReport {
  // randomly generated UUID for this specific report, 16 bytes (in string order)
  bytes report_uuid = 1;
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes cluster_name = 2;
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes reporter_hostid = 3;
  // beginning of the time window for this data; ending is not specified but is
  // intended to be at most one hour
  google.protobuf.Timestamp start_time = 4;

  repeated ResourceKindPresenceReport resource_kind_reports = 5;
}

// Counts all resources of one kind that were active during the time window
// to track the number of active resources in a cluster over time.
message ResourceKindPresenceReport {
  // the kind of resource
  ResourceKind resource_kind = 1;
  // first 8 bytes of anonymized resource name
  repeated fixed64 resource_ids = 2;
}

// counters for bot instance activity coming from a specific auth server from a
// specific cluster.
//
// PostHog event: tp.bot_instance.activity
message BotInstanceActivityReport {
  // randomly generated UUID for this specific report, 16 bytes (in string order)
  //
  // PostHog property: tp.report_uuid (in 8-4-4-4-12 string form)
  bytes report_uuid = 1;

  // cluster name, anonymized, 32 bytes (HMAC-SHA-256)
  //
  // PostHog property: tp.cluster_name (in base64)
  bytes cluster_name = 2;

  // hostid of the auth that collected this report, anonymized, 32 bytes (HMAC-SHA-256)
  //
  // PostHog property: tp.reporter_hostid (in base64)
  bytes reporter_hostid = 3;

  // beginning of the time window for this data; ending is not specified but is
  // intended to be at most 15 minutes
  //
  // PostHog timestamp (not a property, the ingest time is tp.report_time instead)
  google.protobuf.Timestamp start_time = 4;

  // one set of counters for each bot instance
  //
  // PostHog property: tp.records (encoded as a map keyed by anonymized bot
  // instance id, not as a list)
  repeated BotInstanceActivityRecord records = 5;
}

// Records the activity for a single bot instance against a specific auth server
// from a specific cluster.
message BotInstanceActivityRecord {
  // The UUID of the BotInstance, anonymized using HMAC-SHA-256.
  bytes bot_instance_id = 1;
  // The name of the user associated with the BotInstance,
  // anonymized using HMAC-SHA-256.
  // Enables correlation with the UserActivityRecord for the Bot.
  bytes bot_user_name = 2;

  // counter of bot joins
  uint64 bot_joins = 3;
  // counter of SPIFFE SVIDs issued
  uint64 spiffe_svids_issued = 4;
  // counter of certificates issued for this user
  uint64 certificates_issued = 5;
}

// Used to record the issuance of a specific SPIFFE ID.
message SPIFFEIDRecord {
  // The anonymized SPIFFE ID - HMAC-SHA-256 (32 bytes)
  bytes spiffe_id = 1;
  // Number of SVIDs issued for the given spiffe_id.
  uint32 svids_issued = 2;
}

message SubmitUsageReportsRequest {
  // at most 10 reports of all kinds in a single RPC, each shouldn't exceed 128KiB or so
  //
  // each report is encoded as a separate tp.user.activity PostHog event
  repeated UserActivityReport user_activity = 1;
  // encoded as a separate tp.resource.counts PostHog event
  repeated ResourcePresenceReport resource_presence = 2;
  // encoded as a seperate tp.bot_instance.activity PostHog event
  repeated BotInstanceActivityReport bot_instance_activity = 3;
}
message SubmitUsageReportsResponse {
  // randomly generated UUID for this specific batch, 16 bytes (in string order)
  //
  // PostHog property: tp.batch_uuid (in each report of the batch)
  bytes batch_uuid = 1;
}

service TeleportReportingService {
  // encodes and forwards usage reports to the PostHog event database; each
  // event is annotated with some properties that depend on the identity of the
  // caller:
  // - tp.account_id (UUID in string form, can be empty if missing from the
  //   license)
  // - tp.license_name (should always be a UUID)
  // - tp.license_authority (name of the authority that signed the license file
  //   used for authentication)
  // - tp.is_cloud (boolean)
  rpc SubmitUsageReports(SubmitUsageReportsRequest) returns (SubmitUsageReportsResponse) {}
}
