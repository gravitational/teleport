/*
 * Teleport
 * Copyright (C) 2023  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package accessgraph.v1alpha;

import "accessgraph/v1alpha/aws.proto";
import "accessgraph/v1alpha/entra.proto";
import "accessgraph/v1alpha/events.proto";
import "accessgraph/v1alpha/gitlab.proto";
import "accessgraph/v1alpha/graph.proto";
import "accessgraph/v1alpha/resources.proto";

option go_package = "github.com/gravitational/teleport/gen/proto/go/accessgraph/v1alpha;accessgraphv1alpha";

// AccessGraphService is a service for interacting the access graph service.
service AccessGraphService {
  // Query queries the access graph.
  // Currently only used by WebUI.
  rpc Query(QueryRequest) returns (QueryResponse);
  // GetFile gets a static UI file from the access graph container.
  rpc GetFile(GetFileRequest) returns (GetFileResponse);

  // TODO(justinas|jakule): the following methods are "privileged", i.e. must only available to the Auth server.
  // In service version v1, they should be split into one or more separate gRPC services.
  // E.g.:
  //  - AccessGraphQueryService: Query, GetFile
  //  - AccessGraphDataService: EventsStream, Register, ReplaceCAs
  // or:
  //  - AccessGraphQueryService: Query, GetFile
  //  - AccessGraphDataService: EventsStream
  //  - AccessGraphAuthManagementService: Register, ReplaceCAs

  // EventsStream is a stream of commands to the access graph service.
  // Teleport Auth server creates a stream to the access graph service
  // and pushes all resources and following events to it.
  // This stream is used to sync the access graph with the Teleport database state.
  // Once Teleport finishes syncing the current state, it sends a sync command
  // to the access graph service and resumes sending events.
  rpc EventsStream(stream EventsStreamRequest) returns (EventsStreamResponse);

  // EventsStreamV2 is a stream of commands to the access graph service.
  // This stream works the same way as EventsStream, but it returns a stream of events
  // instead of a single response.
  rpc EventsStreamV2(stream EventsStreamV2Request) returns (stream EventsStreamV2Response);

  // Register submits a new tenant representing this Teleport cluster to the TAG service,
  // identified by its HostCA certificate.
  // The method is idempotent: it succeeds if the tenant has already registered and has the specific CA associated.
  //
  // This method, unlike all others, expects the client to authenticate using a TLS certificate signed by the registration CA,
  // rather than the Teleport cluster's Host CA.
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // ReplaceCAs is a request to completely replace the set of Host CAs that authenticate this tenant with the given set.
  // This accommodates Teleport Host CA rotation. In a transition from certificate authority A to authority B,
  // the client is expected to call the RPC as follows:
  // 1. Authenticate via existing authority A and call ReplaceCAs([A, B]) -- introduce the incoming CA
  // 2.a. If rotation succeeds, authenticate via the new authority B and call ReplaceCAs([B]) -- delete the previous CA
  // 2.b. If rotation is rolled back, authenticate via the old authority A and call ReplaceCAs([A]) -- delete the candidate CA
  rpc ReplaceCAs(ReplaceCAsRequest) returns (ReplaceCAsResponse);
  // AWSEventsStream is a stream of commands to the AWS importer.
  // Teleport Discovery Service creates a stream to the access graph service
  // and pushes all AWS resources and following events to it.
  // This stream is used to sync the access graph with the AWS database state.
  rpc AWSEventsStream(stream AWSEventsStreamRequest) returns (AWSEventsStreamResponse);

  // GitlabEventsStream is a stream of commands to the Gitlab importer.
  rpc GitlabEventsStream(stream GitlabEventsStreamRequest) returns (stream GitlabEventsStreamResponse);

  // EntraEventsStream is a stream of commands to the Entra ID SSO importer.
  rpc EntraEventsStream(stream EntraEventsStreamRequest) returns (stream EntraEventsStreamResponse);
}

// QueryRequest is a request to query the access graph.
message QueryRequest {
  // query is a SQL query.
  string query = 1;
}

// QueryResponse is a response to a query.
message QueryResponse {
  // nodes is a list of nodes returned by the query. The response may contain only nodes.
  repeated Node nodes = 1;
  // edges is a list of edges returned by the query.
  repeated Edge edges = 2;
}

// GetFileRequest is a request to get a file.
message GetFileRequest {
  // filepath is a path to the file.
  string filepath = 1;
}

// GetFileResponse is a response to a file request.
message GetFileResponse {
  // data is a raw file content.
  bytes data = 1;
}

// EventsStreamRequest is a request to send commands to the access graph.
// This command is used to sync the access graph with the Teleport database state.
message EventsStreamRequest {
  // operation contains the desired operation
  oneof operation {
    // sync is a command to sync the access graph with the Teleport database state.
    // it's issued once Teleport finishes syncing all resources with the database.
    SyncOperation sync = 1;
    // upsert is a command to put a resource into the access graph or update it.
    ResourceList upsert = 2;
    // delete is a command to delete a resource from the access graph when it's deleted from Teleport.
    ResourceHeaderList delete = 3;
    // access_lists_members is a command to upsert access lists members.
    // It's issued when a user is added to an access list or when their membership is updated.
    // It's also issued when a user membership expires but the user remains in the access list.
    // In that case, the state of the user reflects the expiration reason.
    AccessListsMembers access_lists_members = 4;
    // exclude_access_list_members is a command to exclude access lists members
    // when they are manually removed from the access list.
    // If their membership remains but it's expired, they are not excluded
    // from the access list but they don't receive any access - in that case,
    // the request is [access_lists_members].
    ExcludeAccessListsMembers exclude_access_list_members = 5;
  }
}

// EventsStreamV2Request is a request to send commands to the access graph.
// This command is used to sync the access graph with the Teleport database state.
message EventsStreamV2Request {
  // operation contains the desired operation
  oneof operation {
    // sync is a command to sync the access graph with the Teleport database state.
    // it's issued once Teleport finishes syncing all resources with the database.
    SyncOperation sync = 1;
    // upsert is a command to put a resource into the access graph or update it.
    ResourceList upsert = 2;
    // delete is a command to delete a resource from the access graph when it's deleted from Teleport.
    ResourceHeaderList delete = 3;
    // access_lists_members is a command to upsert access lists members.
    // It's issued when a user is added to an access list or when their membership is updated.
    // It's also issued when a user membership expires but the user remains in the access list.
    // In that case, the state of the user reflects the expiration reason.
    AccessListsMembers access_lists_members = 4;
    // exclude_access_list_members is a command to exclude access lists members
    // when they are manually removed from the access list.
    // If their membership remains but it's expired, they are not excluded
    // from the access list but they don't receive any access - in that case,
    // the request is [access_lists_members].
    ExcludeAccessListsMembers exclude_access_list_members = 5;
  }
}

// SyncOperation is a command that Teleport sends to the access graph service
// at the end of the sync process.
message SyncOperation {}

// EventsStreamResponse is the response from EventsStream.
message EventsStreamResponse {}

// EventsStreamV2Response is the response from EventsStreamV2.
message EventsStreamV2Response {
  // action is a action that should be performed by Teleport on behalf of the access graph service.
  oneof action {
    // event is a audit event that should be logged by Teleport.
    AuditEvent event = 1;
  }
}

// AuditEvent is an event that should be logged by Teleport.
message AuditEvent {
  oneof event {
    // access_path_changed is an event that should be logged when the access path changes.
    AccessPathChanged access_path_changed = 1;
  }
}

// RegisterRequest is the request for Register.
message RegisterRequest {
  bytes host_ca_pem = 1;

  // ClusterName is the self-submitted name of the Teleport cluster (usually a FQDN).
  // This may not uniquely identify the cluster, and is only used to make identification easier for debugging purposes.
  string cluster_name = 2;
}

// RegisterResponse is the response for Register.
message RegisterResponse {}

// ReplaceCAsRequest is the request for ReplaceCAs.
message ReplaceCAsRequest {
  repeated bytes host_ca_pem = 1;
}

// ReplaceCAsResponse is the response for ReplaceCAs.
message ReplaceCAsResponse {}

// AWSEventsStreamRequest is a request to send commands to the AWS importer.
// This command is used to sync the access graph with the AWS database state.
message AWSEventsStreamRequest {
  // operation contains the desired operation
  oneof operation {
    // sync is a command to sync the access graph with the Teleport database state.
    // it's issued once Teleport finishes syncing all resources with the database.
    AWSSyncOperation sync = 1;
    // upsert is a command to put a resource into the access graph or update it.
    AWSResourceList upsert = 2;
    // delete is a command to delete a resource from the access graph when it's deleted from Teleport.
    AWSResourceList delete = 3;
  }
}

// AWSSyncOperation is a command that Teleport sends to the access graph service
// at the end of the sync process.
message AWSSyncOperation {}

// AWSEventsStreamResponse is the response from AWSEventsStream.
message AWSEventsStreamResponse {}

// GitlabEventsStreamRequest is a request to send commands to the Gitlab importer.
message GitlabEventsStreamRequest {
  // operation contains the desired operation
  oneof operation {
    // sync is a command to sync the access graph with the Teleport database state.
    // it's issued once Teleport finishes syncing all resources with the database.
    GitlabSyncOperation sync = 1;
    // upsert is a command to put a resource into the access graph or update it.
    GitlabResourceList upsert = 2;
    // delete is a command to delete a resource from the access graph when it's deleted from Teleport.
    GitlabResourceList delete = 3;
  }
}

// GitlabEventsStreamResponse is the response from GitlabEventsStream.
message GitlabEventsStreamResponse {}

// EntraEventsStreamRequest is a request to send commands to the Gitlab importer.
message EntraEventsStreamRequest {
  // operation contains the desired operation
  oneof operation {
    // sync is a command to sync the access graph with the Teleport database state.
    // it's issued once Teleport finishes syncing all resources with the database.
    EntraSyncOperation sync = 1;
    // upsert is a command to put a resource into the access graph or update it.
    EntraResourceList upsert = 2;
    // delete is a command to delete a resource from the access graph when it's deleted from Teleport.
    EntraResourceList delete = 3;
  }
}

// EntraEventsStreamResponse is the response from GitlabEventsStream.
message EntraEventsStreamResponse {}
