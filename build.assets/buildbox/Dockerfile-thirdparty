# Cross-compiling build box
#
# Stage 1 builds crosstool-NG for the 4 architectures we support: arm64, amd64,
# arm and 386, and also builds the third party C libraries that Teleport needs
# to build, also for these architectures.
#
# We also build a specific version of clang that is required for a FIPS
# compliant build of boring ssl, used by the boring rust crate.

ARG BASE_IMAGE=ubuntu:22.04

# Directory where the third-party components are installed. Used in multiple
# stages, so defined here globally before the first stage.
ARG THIRDPARTY_DIR=/opt/thirdparty

# A multi-stage build is used to make it easier to do development of this
# Dockerfile. It can be useful to build up to a particular stage so you
# can then test run commands at that stage of the buildbox. e.g.
#   docker build -f Dockerfile-base --target ctng .
FROM ${BASE_IMAGE} AS ctng

# Bash used for some brace expansions in clean-up
SHELL ["/bin/bash", "-c"]

# Create a buildbox user that owns all the tools installed in /opt. When using the
# buildbox, a different uid/gid should be used as these tools should not be
# modifiable when using the buildbox
ARG BUILDBOX_UID=99
ARG BUILDBOX_GID=99
RUN groupadd -g $BUILDBOX_GID buildbox
RUN useradd -d /home/buildbox -m -g $BUILDBOX_GID -u $BUILDBOX_UID -s /bin/bash buildbox

ARG THIRDPARTY_DIR
RUN install -d -m 0775 -o buildbox -g buildbox $THIRDPARTY_DIR

# Non-interactive configuration of tzdata
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true
RUN { echo 'tzdata tzdata/Areas select Etc'; echo 'tzdata tzdata/Zones/Etc select UTC'; } | debconf-set-selections

RUN apt-get update
RUN apt-get install -y \
	autoconf \
	autoconf-archive \
	automake \
	autopoint \
	bison \
	bzip2 \
	cmake \
	curl \
	flex \
	g++ \
	gawk \
	gcc \
	gettext \
	git \
	gperf \
	help2man \
	libncurses5-dev \
	libstdc++6 \
	libtool \
	libtool-bin \
	make \
	meson \
	patch \
	pkg-config \
	python3-dev \
	rsync \
	texinfo \
	texi2html \
	unzip \
	xz-utils

USER buildbox
WORKDIR /home/buildbox

COPY ct-ng-configs ct-ng-configs
COPY pkgconfig pkgconfig
COPY bbcommon.mk ctng.mk .

# Build and install ct-ng
ARG BUILDARCH
ARG THIRDPARTY_DIR
ENV THIRDPARTY_DIR=$THIRDPARTY_DIR

RUN make -f ctng.mk install-ctng && \
	rm -rf ${THIRDPARTY_DIR}/host/src

FROM ctng AS compilers

# Build cross-compiling toolchains with ct-ng
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f ctng.mk ctng-build ARCH=amd64 && \
	rm -rf ${THIRDPARTY_DIR}/amd64/ctng
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f ctng.mk ctng-build ARCH=arm64 && \
	rm -rf ${THIRDPARTY_DIR}/arm64/ctng
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f ctng.mk ctng-build ARCH=386 && \
	rm -rf ${THIRDPARTY_DIR}/386/ctng
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f ctng.mk ctng-build ARCH=arm && \
	rm -rf ${THIRDPARTY_DIR}/arm/ctng

FROM compilers AS tplibs

COPY cross-compile.mk tplibs.mk .

# Build and install third party C libraries for all architectures
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f tplibs.mk thirdparty-build-libs ARCH=amd64 && \
	rm -rf ${THIRDPARTY_DIR}/amd64/{bin,sbin,src}
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f tplibs.mk thirdparty-build-libs ARCH=arm64 && \
	rm -rf ${THIRDPARTY_DIR}/arm64/{bin,sbin,src}
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f tplibs.mk thirdparty-build-libs ARCH=386 && \
	rm -rf ${THIRDPARTY_DIR}/386/{bin,sbin,src}
RUN --mount=type=cache,id=download,uid=${BUILDBOX_UID},target=${THIRDPARTY_DIR}/download \
	make -f tplibs.mk thirdparty-build-libs ARCH=arm && \
	rm -rf ${THIRDPARTY_DIR}/arm/{bin,sbin,src}

# Start buildbox-thirdparty from a fresh ${BASE_IMAGE} and copy in
# /opt/thirdparty so as to remove any layers above with the build tools. We
# copy it into ${BASE_IMAGE} instead of scratch so that we can run the
# container and easily inspect and work with it for development purposes.
FROM ${BASE_IMAGE} AS buildbox-thirdparty

# Install third party toolchain and libraries
ARG THIRDPARTY_DIR
COPY --from=tplibs ${THIRDPARTY_DIR} ${THIRDPARTY_DIR}
