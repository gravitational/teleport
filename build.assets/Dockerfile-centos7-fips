# syntax=docker/dockerfile:1

# Create an alias to the assets image. Ref: https://github.com/docker/for-mac/issues/2155
ARG BUILDARCH
FROM ghcr.io/gravitational/teleport-buildbox-centos7-assets:teleport14-${BUILDARCH} AS teleport-buildbox-centos7-assets

# Set up a base container from centos:7 adjusted for using vault.centos.org
FROM centos:7 AS base

ARG BUILDARCH
ARG TARGETARCH
ARG DEVTOOLSET

# devtoolset-12 is only in CentOS buildlogs. The rpms are unsigned since they never were
# published to the official CentOS SCL repos.
ENV DEVTOOLSET=${DEVTOOLSET} \
    TARGETARCH=${TARGETARCH}

RUN bash -c 'if [ "${TARGETARCH}" = "arm64" ]; then export TARGETARCH="aarch64"; fi; \
    echo -e "[${DEVTOOLSET}-build]\nname=${DEVTOOLSET} - Build\nbaseurl=https://buildlogs.centos.org/c7-${DEVTOOLSET}.${TARGETARCH}/\ngpgcheck=0\nenabled=1" > /etc/yum.repos.d/${DEVTOOLSET}-build.repo'

# mirrorlist is no longer available since CentOS 7 EOL. The software collection
# stuff for arm64 (aarch64) is in /altarch not /centos on vault.centos.org.
# Make the fixup a script as it needs to be run multiple times as installing
# and updating centos-release-scl-rh leaves the old unavailable URLs.
# https://serverfault.com/a/1161847
RUN cat <<EOF > /tmp/fix-yum-repo-list.sh
#!/bin/sh
sed -e 's/mirror.centos.org/vault.centos.org/g' \
    -e 's/^#.*baseurl=http/baseurl=http/g' \
    -e 's/^mirrorlist=http/#mirrorlist=http/g' \
    -i /etc/yum.repos.d/*.repo
if [ "$(uname -m)" = 'aarch64' ]; then
    sed 's|centos/7/sclo|altarch/7/sclo|' -i /etc/yum.repos.d/*.repo
fi
EOF
RUN chmod 755 /tmp/fix-yum-repo-list.sh && \
    /tmp/fix-yum-repo-list.sh

RUN yum groupinstall -y 'Development Tools' && \
    yum install -y \
        centos-release-scl-rh \
        centos-release-scl && \
    /tmp/fix-yum-repo-list.sh

FROM base AS libbpf

# Install required dependencies.
RUN yum install -y epel-release && \
    yum update -y && \
    yum install -y \
        elfutils-libelf-devel-static \
        scl-utils && \
    yum clean all

# As mentioned above, these packages are unsigned.
RUN yum install --nogpgcheck -y \
        ${DEVTOOLSET}-gcc* \
        ${DEVTOOLSET}-make && \
    yum clean all

# Install libbpf - compile with a newer GCC. The one installed by default is not able to compile it.
# BUILD_STATIC_ONLY disables libbpf.so build as we don't need it.
ARG LIBBPF_VERSION
RUN mkdir -p /opt && cd /opt && \
    curl -fsSL https://github.com/libbpf/libbpf/archive/refs/tags/v${LIBBPF_VERSION}.tar.gz | tar xz && \
    cd /opt/libbpf-${LIBBPF_VERSION}/src && \
    scl enable ${DEVTOOLSET} "make && BUILD_STATIC_ONLY=y DESTDIR=/opt/libbpf make install install_uapi_headers"

FROM base

ARG BUILDARCH
ARG TARGETARCH
ARG DEVTOOLSET

ENV LANGUAGE=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    LC_CTYPE=en_US.UTF-8

ARG UID
ARG GID
RUN (groupadd ci --gid=$GID -o && useradd ci --uid=$UID --gid=$GID --create-home --shell=/bin/sh && \
     mkdir -p -m0700 /var/lib/teleport && chown -R ci /var/lib/teleport)

# Install required dependencies.
RUN yum install -y epel-release && \
    yum update -y && \
    yum install -y \
    # required by Clang/LLVM
    cmake3 \
    # required by libbpf
    elfutils-libelf-devel-static \
    git \
    net-tools \
    # required by boringssl
    ninja-build \
    # required by Teleport PAM support
    pam-devel \
    perl-IPC-Cmd \
    tree \
    # used by our Makefile
    which \
    zip \
    # required by libbpf
    zlib-static && \
    yum clean all

# As mentioned above, these packages are unsigned.
RUN yum install --nogpgcheck -y \
        ${DEVTOOLSET}-gcc* \
        ${DEVTOOLSET}-make && \
    yum clean all

# Install Go.
ARG GOLANG_VERSION
RUN mkdir -p /opt && cd /opt && curl -fsSL https://storage.googleapis.com/golang/${GOLANG_VERSION}.linux-${BUILDARCH}.tar.gz | tar xz && \
    mkdir -p /go/src/github.com/gravitational/teleport && \
    chmod a+w /go && \
    chmod a+w /var/lib && \
    chmod a-w /
ENV GOEXPERIMENT=boringcrypto \
    GOPATH="/go" \
    GOROOT="/opt/go" \
    PATH="/opt/llvm/bin:$PATH:/opt/go/bin:/go/bin:/go/src/github.com/gravitational/teleport/build"

# Install PAM module and policies for testing.
COPY pam/ /opt/pam_teleport/
RUN make -C /opt/pam_teleport install

RUN chmod a-w /

ARG RUST_VERSION
ENV RUSTUP_HOME=/usr/local/rustup \
     CARGO_HOME=/usr/local/cargo \
     PATH=/usr/local/cargo/bin:$PATH \
     RUST_VERSION=$RUST_VERSION

RUN mkdir -p $RUSTUP_HOME && chmod a+w $RUSTUP_HOME && \
    mkdir -p $CARGO_HOME/registry && chmod -R a+w $CARGO_HOME

# Install Rust using the ci user, as that is the user that
# will run builds using the Rust toolchains we install here.
USER ci
RUN curl --proto '=https' --tlsv1.2 -fsSL https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain $RUST_VERSION && \
    rustup --version && \
    cargo --version && \
    rustc --version && \
    rustup component add rustfmt clippy && \
    rustup target add ${TARGETARCH}-unknown-linux-gnu

ARG LIBBPF_VERSION
COPY --from=libbpf /opt/libbpf/usr /usr/libbpf-${LIBBPF_VERSION}

# Download pre-built CentOS 7 assets with clang needed to build BoringSSL and BPF tools.
COPY --from=teleport-buildbox-centos7-assets /opt/llvm /opt/llvm

# Needed for boring-rs
ENV CMAKE=cmake3

# Libclang is needed by boring-rs to generate bindings. libclang is kept in /opt/llvm/lib
# and without this environment variable, boring-rs will not be able to find it.
ENV LIBCLANG_PATH=/opt/llvm/lib/

VOLUME ["/go/src/github.com/gravitational/teleport"]
EXPOSE 6600 2379 2380
