//go:build ignore
// +build ignore

// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
package main

import (
	"encoding/json"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strconv"
	"text/template"

	"github.com/gravitational/trace"
)

var tmpl = template.Must(template.New("generate").
	Funcs(map[string]any{
		"quote": func(v string) string {
			return strconv.Quote(v)
		},
	}).
	Parse(`
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by internal/region/codegen.go. DO NOT EDIT.

package aws

// Region represents an AWS region.
type Region struct {
	// Name is the region name.
	Name string
	// Description is the human readable region name.
	Description string
}

// regions is the set of available AWS regions based on the AWS SDK definition.
var regions = map[string]Region{
	{{- range $name, $desc := $.Regions }}
	{{ quote $name }}: Region{
		Name: {{ quote $name }},
		Description: {{ quote $desc }},
	},
	{{- end }}
}

// globalRegions is the set of available AWS global regions based on the AWS SDK
// definition.
var globalRegions = map[string]Region{
	{{- range $name, $desc := $.GlobalRegions }}
	{{ quote $name }}: Region{
		Name: {{ quote $name }},
		Description: {{ quote $desc }},
	},
	{{- end }}
}
`))

// TemplateData is the data passed to the template.
type TemplateData struct {
	Regions       map[string]string
	GlobalRegions map[string]string
}

// AWSPartitions contains the struct representation of the AWS SDK patitions
// JSON file.
type AWSPartitions struct {
	Partitions []struct {
		Regions map[string]struct {
			Description string `json:"description"`
		} `json:"regions"`
	} `json:"partitions"`
}

func main() {
	partitionsContents, err := loadSDKPartitionsFile()
	if err != nil {
		log.Fatalf("failed to parse patitions: %s", trace.DebugReport(err))
	}

	data, err := convertToTemplateData(partitionsContents)
	if err != nil {
		log.Fatalf("failed to parse partitions file: %s", trace.DebugReport(err))
	}

	file, err := os.Create(outputFilename)
	if err != nil {
		log.Fatalf("failed to create output file: %v", err)
	}
	defer func() {
		if err := file.Close(); err != nil {
			log.Fatalf("failed to close output file: %v", err)
		}
	}()

	if err := tmpl.Execute(file, data); err != nil {
		log.Fatalf("failed to generate file: %v", err)
	}
}

// ListModule is the struct representation of the `go list` module output.
// Only the necessary fields are included.
type ListModule struct {
	// Version is module version
	Version string
	// Dir is directory holding local copy of files, if any
	Dir string
}

func convertToTemplateData(partitionsContents []byte) (*TemplateData, error) {
	var awsPartitions AWSPartitions
	if err := json.Unmarshal(partitionsContents, &awsPartitions); err != nil {
		return nil, trace.Wrap(err)
	}

	data := &TemplateData{
		Regions:       make(map[string]string),
		GlobalRegions: make(map[string]string),
	}

	for _, partition := range awsPartitions.Partitions {
		for name, region := range partition.Regions {
			if matchGlobalRegion.MatchString(name) {
				data.GlobalRegions[name] = region.Description
				continue
			}

			data.Regions[name] = region.Description
		}
	}

	return data, nil
}

// loadSDKPartitionsFile loads the partitions JSON file from AWS SDK.
func loadSDKPartitionsFile() ([]byte, error) {
	cmd := exec.Command("go", "list", "-m", "-json", awsPackageName)
	listOutput, err := cmd.Output()
	if err != nil {
		return nil, trace.Wrap(err)
	}

	var module ListModule
	if err := json.Unmarshal(listOutput, &module); err != nil {
		return nil, trace.Wrap(err)
	}

	contents, err := os.ReadFile(filepath.Join(module.Dir, awsPartitionsFilePath))
	if err != nil {
		return nil, trace.Wrap(err)
	}

	return contents, nil
}

const (
	// outputFilename is the generated filename.
	outputFilename = "regions.go"
	// awsPackageName is the AWS package used to find the paritions references.
	awsPackageName = "github.com/aws/aws-sdk-go-v2"
	// awsPartitionsFilePath is the patitions JSON file path inside the package.
	awsPartitionsFilePath = "internal/endpoints/awsrulesfn/partitions.json"
)

var (
	// matchGlobalRegion is a regex that defines the format of AWS global regions.
	// Those regions are usually used for endpoint resolution.
	//
	// The regex matches the following from left to right:
	// - `aws` prefix.
	// - optional -us-gov, -cn, -iso, -iso-b for corresponding partitions
	// - `global` suffix.
	//
	// Reference:
	// https://github.com/aws/aws-sdk-go-v2/blob/main/codegen/smithy-aws-go-codegen/src/main/resources/software/amazon/smithy/aws/go/codegen/endpoints.json
	matchGlobalRegion = regexp.MustCompile(`^aws(-us-gov|-cn|-iso|-iso-b|-iso-e|-iso-f)?-global$`)
)
