// Package ztpki provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ztpki

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeBearerScopes = "OAuth2AuthorizationCodeBearer.Scopes"
)

// Defines values for CertRequestSource.
const (
	CertRequestSourceACM    CertRequestSource = "ACM"
	CertRequestSourceACME   CertRequestSource = "ACME"
	CertRequestSourceEST    CertRequestSource = "EST"
	CertRequestSourcePortal CertRequestSource = "Portal"
	CertRequestSourceRESTv1 CertRequestSource = "RESTv1"
	CertRequestSourceRESTv2 CertRequestSource = "RESTv2"
	CertRequestSourceSCEP   CertRequestSource = "SCEP"
	CertRequestSourceSOAP   CertRequestSource = "SOAP"
)

// Defines values for CertRequestStatusRevocationStatus.
const (
	CertRequestStatusRevocationStatusFAILED    CertRequestStatusRevocationStatus = "FAILED"
	CertRequestStatusRevocationStatusINPROCESS CertRequestStatusRevocationStatus = "IN_PROCESS"
	CertRequestStatusRevocationStatusPENDING   CertRequestStatusRevocationStatus = "PENDING"
	CertRequestStatusRevocationStatusREVOKED   CertRequestStatusRevocationStatus = "REVOKED"
	CertRequestStatusRevocationStatusVALID     CertRequestStatusRevocationStatus = "VALID"
)

// Defines values for IssuanceStatus.
const (
	IssuanceStatusAPPROVALREQUIRED IssuanceStatus = "APPROVAL_REQUIRED"
	IssuanceStatusAPPROVED         IssuanceStatus = "APPROVED"
	IssuanceStatusCANCELLED        IssuanceStatus = "CANCELLED"
	IssuanceStatusFAILED           IssuanceStatus = "FAILED"
	IssuanceStatusINPROCESS        IssuanceStatus = "IN_PROCESS"
	IssuanceStatusISSUED           IssuanceStatus = "ISSUED"
	IssuanceStatusPENDING          IssuanceStatus = "PENDING"
	IssuanceStatusREJECTED         IssuanceStatus = "REJECTED"
)

// Defines values for PolicyDetailsDnComponentsTag.
const (
	PolicyDetailsDnComponentsTagAEID  PolicyDetailsDnComponentsTag = "AEID"
	PolicyDetailsDnComponentsTagC     PolicyDetailsDnComponentsTag = "C"
	PolicyDetailsDnComponentsTagCN    PolicyDetailsDnComponentsTag = "CN"
	PolicyDetailsDnComponentsTagDC    PolicyDetailsDnComponentsTag = "DC"
	PolicyDetailsDnComponentsTagEMAIL PolicyDetailsDnComponentsTag = "EMAIL"
	PolicyDetailsDnComponentsTagL     PolicyDetailsDnComponentsTag = "L"
	PolicyDetailsDnComponentsTagO     PolicyDetailsDnComponentsTag = "O"
	PolicyDetailsDnComponentsTagOU    PolicyDetailsDnComponentsTag = "OU"
	PolicyDetailsDnComponentsTagST    PolicyDetailsDnComponentsTag = "ST"
)

// Defines values for PolicyDetailsExpiryEmailsTag.
const (
	PolicyDetailsExpiryEmailsTagExpiryEmails PolicyDetailsExpiryEmailsTag = "expiryEmails"
)

// Defines values for PolicyDetailsSubjectAltNamesTag.
const (
	PolicyDetailsSubjectAltNamesTagDNSNAME    PolicyDetailsSubjectAltNamesTag = "DNSNAME"
	PolicyDetailsSubjectAltNamesTagIPADDRESS  PolicyDetailsSubjectAltNamesTag = "IPADDRESS"
	PolicyDetailsSubjectAltNamesTagRFC822NAME PolicyDetailsSubjectAltNamesTag = "RFC822NAME"
	PolicyDetailsSubjectAltNamesTagUPN        PolicyDetailsSubjectAltNamesTag = "UPN"
	PolicyDetailsSubjectAltNamesTagURI        PolicyDetailsSubjectAltNamesTag = "URI"
)

// Defines values for RevocationReasons.
const (
	RevocationReasonsN0 RevocationReasons = 0
	RevocationReasonsN1 RevocationReasons = 1
	RevocationReasonsN3 RevocationReasons = 3
	RevocationReasonsN4 RevocationReasons = 4
	RevocationReasonsN5 RevocationReasons = 5
)

// Defines values for RevocationStatusEnum.
const (
	RevocationStatusEnumEXPIRED   RevocationStatusEnum = "EXPIRED"
	RevocationStatusEnumFAILED    RevocationStatusEnum = "FAILED"
	RevocationStatusEnumINPROCESS RevocationStatusEnum = "IN_PROCESS"
	RevocationStatusEnumPENDING   RevocationStatusEnum = "PENDING"
	RevocationStatusEnumRENEWED   RevocationStatusEnum = "RENEWED"
	RevocationStatusEnumREVOKED   RevocationStatusEnum = "REVOKED"
	RevocationStatusEnumVALID     RevocationStatusEnum = "VALID"
)

// Defines values for SetRenewStatusEnum.
const (
	SetRenewStatusEnumRENEWED SetRenewStatusEnum = "RENEWED"
	SetRenewStatusEnumVALID   SetRenewStatusEnum = "VALID"
)

// Defines values for SortDirectionEnum.
const (
	SortDirectionEnumAsc  SortDirectionEnum = "asc"
	SortDirectionEnumDesc SortDirectionEnum = "desc"
)

// Defines values for GetCertificatesIdDerParamsExtension.
const (
	GetCertificatesIdDerParamsExtensionCer GetCertificatesIdDerParamsExtension = "cer"
	GetCertificatesIdDerParamsExtensionCrt GetCertificatesIdDerParamsExtension = "crt"
)

// Defines values for GetCertificatesIdPemParamsExtension.
const (
	GetCertificatesIdPemParamsExtensionCer GetCertificatesIdPemParamsExtension = "cer"
	GetCertificatesIdPemParamsExtensionCrt GetCertificatesIdPemParamsExtension = "crt"
)

// Defines values for GetPoliciesParamsImported.
const (
	GetPoliciesParamsImportedFalse GetPoliciesParamsImported = "false"
	GetPoliciesParamsImportedOnly  GetPoliciesParamsImported = "only"
	GetPoliciesParamsImportedTrue  GetPoliciesParamsImported = "true"
)

// CertRequest defines model for CertRequest.
type CertRequest struct {
	CommonName     *string                `json:"commonName"`
	CreatedAt      string                 `json:"createdAt"`
	Csr            string                 `json:"csr"`
	Details        map[string]interface{} `json:"details"`
	Fingerprint    string                 `json:"fingerprint"`
	Id             string                 `json:"id"`
	IssuanceStatus IssuanceStatus         `json:"issuanceStatus"`
	Policy         NamedObject            `json:"policy"`
	Source         CertRequestSource      `json:"source"`

	// User Do not modify this file directly. It is automatically generated from the model definition.
	User UserMinimal `json:"user"`
}

// CertRequestBody defines model for CertRequestBody.
type CertRequestBody struct {
	CN                          *string                         `json:"CN,omitempty"`
	ClearRemindersCertificateId *string                         `json:"clearRemindersCertificateId,omitempty"`
	Comment                     *string                         `json:"comment,omitempty"`
	Csr                         string                          `json:"csr"`
	CustomExtensions            *map[string]interface{}         `json:"customExtensions,omitempty"`
	CustomFields                *map[string]interface{}         `json:"customFields,omitempty"`
	DnComponents                CertRequestBodyDnComponents     `json:"dnComponents"`
	ExpiryEmails                *[]string                       `json:"expiryEmails,omitempty"`
	Policy                      string                          `json:"policy"`
	SubjectAltNames             *CertRequestBodySubjectAltNames `json:"subjectAltNames,omitempty"`
	Validity                    *CertRequestBodyValidity        `json:"validity,omitempty"`
}

// CertRequestBodyDnComponents defines model for CertRequestBodyDnComponents.
type CertRequestBodyDnComponents struct {
	AEID  *string   `json:"AEID,omitempty"`
	C     *string   `json:"C,omitempty"`
	CN    *string   `json:"CN,omitempty"`
	DC    *[]string `json:"DC,omitempty"`
	EMAIL *string   `json:"EMAIL,omitempty"`
	L     *string   `json:"L,omitempty"`
	O     *string   `json:"O,omitempty"`
	OU    *[]string `json:"OU,omitempty"`
	ST    *string   `json:"ST,omitempty"`
}

// CertRequestBodySubjectAltNames defines model for CertRequestBodySubjectAltNames.
type CertRequestBodySubjectAltNames struct {
	DNSNAME    *[]string `json:"DNSNAME,omitempty"`
	IPADDRESS  *[]string `json:"IPADDRESS,omitempty"`
	RFC822NAME *[]string `json:"RFC822NAME,omitempty"`
	UPN        *[]string `json:"UPN,omitempty"`
	URI        *[]string `json:"URI,omitempty"`
}

// CertRequestBodyValidity defines model for CertRequestBodyValidity.
type CertRequestBodyValidity struct {
	Days     *float32 `json:"days,omitempty"`
	Months   *float32 `json:"months,omitempty"`
	NotAfter *string  `json:"notAfter,omitempty"`
	Years    *float32 `json:"years,omitempty"`
}

// CertRequestSource defines model for CertRequestSource.
type CertRequestSource string

// CertRequestStatus defines model for CertRequestStatus.
type CertRequestStatus struct {
	CertificateId         *string                            `json:"certificateId,omitempty"`
	Id                    string                             `json:"id"`
	IssuanceStatus        IssuanceStatus                     `json:"issuanceStatus"`
	IssuanceStatusDetails *map[string]interface{}            `json:"issuanceStatusDetails,omitempty"`
	RevocationStatus      *CertRequestStatusRevocationStatus `json:"revocationStatus,omitempty"`
}

// CertRequestStatusRevocationStatus defines model for CertRequestStatusRevocationStatus.
type CertRequestStatusRevocationStatus string

// Certificate defines model for Certificate.
type Certificate struct {
	SANs                []string             `json:"SANs"`
	Account             NamedObject          `json:"account"`
	CertRequestId       *string              `json:"certRequestId,omitempty"`
	CommonName          string               `json:"commonName"`
	CreatedAt           string               `json:"createdAt"`
	Discovered          bool                 `json:"discovered"`
	ExpiryNotifications []string             `json:"expiryNotifications"`
	Id                  string               `json:"id"`
	Imported            bool                 `json:"imported"`
	IssuerDN            string               `json:"issuerDN"`
	NotAfter            string               `json:"notAfter"`
	NotBefore           string               `json:"notBefore"`
	Organization        NamedObject          `json:"organization"`
	Pem                 string               `json:"pem"`
	Policy              NamedObject          `json:"policy"`
	RevocationDate      *string              `json:"revocationDate,omitempty"`
	RevocationReason    float32              `json:"revocationReason"`
	RevocationStatus    RevocationStatusEnum `json:"revocationStatus"`
	SelfSigned          bool                 `json:"selfSigned"`
	Serial              string               `json:"serial"`
	SignatureAlgorithm  string               `json:"signatureAlgorithm"`
	SubjectDN           string               `json:"subjectDN"`

	// User Do not modify this file directly. It is automatically generated from the model definition.
	User UserMinimal `json:"user"`
}

// CertificateStatus defines model for CertificateStatus.
type CertificateStatus struct {
	Id               string               `json:"id"`
	RevocationDate   *string              `json:"revocationDate,omitempty"`
	RevocationReason *RevocationReasons   `json:"revocationReason,omitempty"`
	RevocationStatus RevocationStatusEnum `json:"revocationStatus"`
}

// GetCertificatesPayload defines model for GetCertificatesPayload.
type GetCertificatesPayload struct {
	Account       *string               `json:"account,omitempty"`
	CommonName    *string               `json:"common_name,omitempty"`
	CreatedSince  *string               `json:"created_since,omitempty"`
	Discovered    *bool                 `json:"discovered,omitempty"`
	Expired       *bool                 `json:"expired,omitempty"`
	Fingerprint   *string               `json:"fingerprint,omitempty"`
	Imported      *bool                 `json:"imported,omitempty"`
	Limit         *float32              `json:"limit,omitempty"`
	NotAfter      *string               `json:"not_after,omitempty"`
	NotBefore     *string               `json:"not_before,omitempty"`
	Offset        *float32              `json:"offset,omitempty"`
	Organization  *string               `json:"organization,omitempty"`
	Owner         *string               `json:"owner,omitempty"`
	Pem           *bool                 `json:"pem,omitempty"`
	Policy        *string               `json:"policy,omitempty"`
	Renewed       *bool                 `json:"renewed,omitempty"`
	SelfSigned    *bool                 `json:"selfSigned,omitempty"`
	Serial        *string               `json:"serial,omitempty"`
	SortDirection *SortDirectionEnum    `json:"sort_direction,omitempty"`
	SortType      *string               `json:"sort_type,omitempty"`
	Span          *float32              `json:"span,omitempty"`
	Status        *RevocationStatusEnum `json:"status,omitempty"`
	UpdatedSince  *string               `json:"updated_since,omitempty"`
}

// GetCertificatesResponse defines model for GetCertificatesResponse.
type GetCertificatesResponse struct {
	Count *float32                       `json:"count,omitempty"`
	Items *[]GetCertificatesResponseItem `json:"items,omitempty"`
}

// GetCertificatesResponseItem defines model for GetCertificatesResponseItem.
type GetCertificatesResponseItem struct {
	SANs             *[]string             `json:"SANs,omitempty"`
	CommonName       *string               `json:"commonName,omitempty"`
	Discovered       bool                  `json:"discovered"`
	Id               *string               `json:"id,omitempty"`
	Imported         bool                  `json:"imported"`
	NotAfter         *string               `json:"notAfter,omitempty"`
	NotBefore        *string               `json:"notBefore,omitempty"`
	Policy           *NameObject           `json:"policy,omitempty"`
	RevocationStatus *RevocationStatusEnum `json:"revocationStatus,omitempty"`
	SelfSigned       bool                  `json:"selfSigned"`
	Serial           *string               `json:"serial,omitempty"`
}

// HawkCredential Do not modify this file directly. It is automatically generated from the model definition.
type HawkCredential struct {
	// Comments Comment for HAWK credential
	Comments *string `json:"comments,omitempty"`

	// CreatedAt Date/time HAWK credential created
	CreatedAt string `json:"createdAt"`

	// Id HAWK Identifier
	Id string `json:"id"`

	// LastUsed Date/time HAWK credential last used
	LastUsed *string `json:"lastUsed,omitempty"`

	// UpdatedAt Date/time HAWK credential updated
	UpdatedAt string `json:"updatedAt"`
}

// HawkCredentialComment defines model for HawkCredentialComment.
type HawkCredentialComment struct {
	Comments *string `json:"comments,omitempty"`
}

// HawkCredentialComments defines model for HawkCredentialComments.
type HawkCredentialComments struct {
	Comments *string `json:"comments,omitempty"`
}

// HawkCredentialDeleteResults defines model for HawkCredentialDeleteResults.
type HawkCredentialDeleteResults struct {
	Deleted *bool   `json:"deleted,omitempty"`
	Id      *string `json:"id,omitempty"`
}

// HawkCredentialWithKey defines model for HawkCredentialWithKey.
type HawkCredentialWithKey struct {
	// Comments Comment for HAWK credential
	Comments *string `json:"comments,omitempty"`

	// CreatedAt Date/time HAWK credential created
	CreatedAt string `json:"createdAt"`

	// Id HAWK Identifier
	Id  string `json:"id"`
	Key string `json:"key"`

	// LastUsed Date/time HAWK credential last used
	LastUsed *string `json:"lastUsed,omitempty"`

	// UpdatedAt Date/time HAWK credential updated
	UpdatedAt string `json:"updatedAt"`
}

// IssuanceStatus defines model for IssuanceStatus.
type IssuanceStatus string

// MockPolicy Do not modify this file directly. It is automatically generated from the model definition.
type MockPolicy struct {
	CertificateType string `json:"certificateType"`
	Id              string `json:"id"`
	OrganizationId  string `json:"organizationId"`
}

// NameObject defines model for NameObject.
type NameObject struct {
	Name *string `json:"name,omitempty"`
}

// NamedObject defines model for NamedObject.
type NamedObject struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Policy defines model for Policy.
type Policy struct {
	// MockPolicy Do not modify this file directly. It is automatically generated from the model definition.
	MockPolicy             *MockPolicy   `json:"MockPolicy,omitempty"`
	ApiId                  float32       `json:"apiId"`
	CertificateAuthorityId string        `json:"certificateAuthorityId"`
	Details                PolicyDetails `json:"details"`

	// Enabled Do not modify this file directly. It is automatically generated from the model definition.
	Enabled        PolicyEnabled `json:"enabled"`
	Id             string        `json:"id"`
	Name           string        `json:"name"`
	OrganizationId string        `json:"organizationId"`
}

// PolicyDetails defines model for PolicyDetails.
type PolicyDetails struct {
	ApprovalRequired *bool                            `json:"approvalRequired,omitempty"`
	CustomExtensions *[]PolicyDetailsCustomExtensions `json:"customExtensions,omitempty"`
	CustomFields     *[]PolicyDetailsCustomFields     `json:"customFields,omitempty"`
	DnComponents     []PolicyDetailsDnComponents      `json:"dnComponents"`
	ExpiryEmails     *PolicyDetailsExpiryEmails       `json:"expiryEmails,omitempty"`
	RenewCanReuseCSR *bool                            `json:"renewCanReuseCSR,omitempty"`
	SubjectAltNames  *[]PolicyDetailsSubjectAltNames  `json:"subjectAltNames,omitempty"`
	Validator        *string                          `json:"validator,omitempty"`
	Validity         *PolicyDetailsValidity           `json:"validity,omitempty"`
}

// PolicyDetailsCustomExtensions Do not modify this file directly. It is automatically generated from the model definition.
type PolicyDetailsCustomExtensions struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Label        *string `json:"label,omitempty"`
	Modifiable   *bool   `json:"modifiable,omitempty"`
	Oid          *string `json:"oid,omitempty"`
	Required     *bool   `json:"required,omitempty"`
}

// PolicyDetailsCustomFields Do not modify this file directly. It is automatically generated from the model definition.
type PolicyDetailsCustomFields struct {
	DefaultValue *string   `json:"defaultValue,omitempty"`
	Label        *string   `json:"label,omitempty"`
	Modifiable   *bool     `json:"modifiable,omitempty"`
	Required     *bool     `json:"required,omitempty"`
	Tag          *string   `json:"tag,omitempty"`
	Values       *[]string `json:"values,omitempty"`
}

// PolicyDetailsDnComponents defines model for PolicyDetailsDnComponents.
type PolicyDetailsDnComponents struct {
	CopyAsFirstSAN *bool                         `json:"copyAsFirstSAN,omitempty"`
	DefaultValue   *string                       `json:"defaultValue,omitempty"`
	Label          *string                       `json:"label,omitempty"`
	Modifiable     *bool                         `json:"modifiable,omitempty"`
	RegEx          *string                       `json:"regEx,omitempty"`
	Required       *bool                         `json:"required,omitempty"`
	Tag            *PolicyDetailsDnComponentsTag `json:"tag,omitempty"`
}

// PolicyDetailsDnComponentsTag defines model for PolicyDetailsDnComponentsTag.
type PolicyDetailsDnComponentsTag string

// PolicyDetailsExpiryEmails defines model for PolicyDetailsExpiryEmails.
type PolicyDetailsExpiryEmails struct {
	DefaultValue *string                       `json:"defaultValue,omitempty"`
	Label        *string                       `json:"label,omitempty"`
	Modifiable   *bool                         `json:"modifiable,omitempty"`
	Required     *bool                         `json:"required,omitempty"`
	Tag          *PolicyDetailsExpiryEmailsTag `json:"tag,omitempty"`
}

// PolicyDetailsExpiryEmailsTag defines model for PolicyDetailsExpiryEmailsTag.
type PolicyDetailsExpiryEmailsTag string

// PolicyDetailsSubjectAltNames defines model for PolicyDetailsSubjectAltNames.
type PolicyDetailsSubjectAltNames struct {
	DefaultValue *string                          `json:"defaultValue,omitempty"`
	Label        *string                          `json:"label,omitempty"`
	Modifiable   *bool                            `json:"modifiable,omitempty"`
	RegEx        *string                          `json:"regEx,omitempty"`
	Required     *bool                            `json:"required,omitempty"`
	Tag          *PolicyDetailsSubjectAltNamesTag `json:"tag,omitempty"`
}

// PolicyDetailsSubjectAltNamesTag defines model for PolicyDetailsSubjectAltNamesTag.
type PolicyDetailsSubjectAltNamesTag string

// PolicyDetailsValidity defines model for PolicyDetailsValidity.
type PolicyDetailsValidity struct {
	AllowDatePicker *bool                                 `json:"allowDatePicker,omitempty"`
	BlackoutDates   *[]PolicyDetailsValidityBlackoutDates `json:"blackoutDates,omitempty"`
	Days            *interface{}                          `json:"days,omitempty"`

	// DefaultValue Do not modify this file directly. It is automatically generated from the model definition.
	DefaultValue *ValidityPeriod `json:"defaultValue,omitempty"`

	// MaxValue Do not modify this file directly. It is automatically generated from the model definition.
	MaxValue   *ValidityPeriod `json:"maxValue,omitempty"`
	Modifiable *bool           `json:"modifiable,omitempty"`
	Months     *interface{}    `json:"months,omitempty"`
	Required   *bool           `json:"required,omitempty"`
	Years      *interface{}    `json:"years,omitempty"`
}

// PolicyDetailsValidityBlackoutDate Do not modify this file directly. It is automatically generated from the model definition.
type PolicyDetailsValidityBlackoutDate struct {
	Date     *string  `json:"date,omitempty"`
	Day      *float32 `json:"day,omitempty"`
	Month    *float32 `json:"month,omitempty"`
	TimeZone *string  `json:"timeZone,omitempty"`
	Year     *float32 `json:"year,omitempty"`
}

// PolicyDetailsValidityBlackoutDates defines model for PolicyDetailsValidityBlackoutDates.
type PolicyDetailsValidityBlackoutDates struct {
	Description *string `json:"description,omitempty"`

	// End Do not modify this file directly. It is automatically generated from the model definition.
	End PolicyDetailsValidityBlackoutDate `json:"end"`

	// Start Do not modify this file directly. It is automatically generated from the model definition.
	Start    PolicyDetailsValidityBlackoutDate `json:"start"`
	TimeZone *string                           `json:"timeZone,omitempty"`
}

// PolicyEnabled Do not modify this file directly. It is automatically generated from the model definition.
type PolicyEnabled struct {
	Acme *bool `json:"acme,omitempty"`
	Est  *bool `json:"est,omitempty"`
	Rest *bool `json:"rest,omitempty"`
	Scep *bool `json:"scep,omitempty"`
	Ui   *bool `json:"ui,omitempty"`
}

// RenewCertificatePayload defines model for RenewCertificatePayload.
type RenewCertificatePayload struct {
	Csr      *string `json:"csr,omitempty"`
	ReuseCsr *bool   `json:"reuseCsr,omitempty"`
}

// RenewCertificateStatus defines model for RenewCertificateStatus.
type RenewCertificateStatus struct {
	RevocationStatus *SetRenewStatusEnum `json:"revocationStatus,omitempty"`
}

// ResultError defines model for ResultError.
type ResultError struct {
	Message string `json:"message"`
}

// RevocationReasons defines model for RevocationReasons.
type RevocationReasons float32

// RevocationStatusEnum defines model for RevocationStatusEnum.
type RevocationStatusEnum string

// RevokeCertificateReasonIssuerDN defines model for RevokeCertificateReasonIssuerDN.
type RevokeCertificateReasonIssuerDN struct {
	// IssuerDN Issuer distinguished name
	IssuerDN       *string           `json:"issuerDN,omitempty"`
	Reason         RevocationReasons `json:"reason"`
	RevocationDate *string           `json:"revocationDate,omitempty"`
}

// SetRenewStatusEnum defines model for SetRenewStatusEnum.
type SetRenewStatusEnum string

// SortDirectionEnum defines model for SortDirectionEnum.
type SortDirectionEnum string

// UserMinimal Do not modify this file directly. It is automatically generated from the model definition.
type UserMinimal struct {
	Email     *string `json:"email,omitempty"`
	FirstName string  `json:"firstName"`
	Id        string  `json:"id"`
	LastName  string  `json:"lastName"`
}

// ValidityPeriod Do not modify this file directly. It is automatically generated from the model definition.
type ValidityPeriod struct {
	Days   *float32 `json:"days,omitempty"`
	Months *float32 `json:"months,omitempty"`
	Years  *float32 `json:"years,omitempty"`
}

// GetCertificatesIdDerParams defines parameters for GetCertificatesIdDer.
type GetCertificatesIdDerParams struct {
	// Extension File extension
	Extension *GetCertificatesIdDerParamsExtension `form:"extension,omitempty" json:"extension,omitempty"`

	// Chain Include Chain
	Chain *bool `form:"chain,omitempty" json:"chain,omitempty"`
}

// GetCertificatesIdDerParamsExtension defines parameters for GetCertificatesIdDer.
type GetCertificatesIdDerParamsExtension string

// GetCertificatesIdPemParams defines parameters for GetCertificatesIdPem.
type GetCertificatesIdPemParams struct {
	// Extension File extension
	Extension *GetCertificatesIdPemParamsExtension `form:"extension,omitempty" json:"extension,omitempty"`

	// Chain Include Chain
	Chain *bool `form:"chain,omitempty" json:"chain,omitempty"`
}

// GetCertificatesIdPemParamsExtension defines parameters for GetCertificatesIdPem.
type GetCertificatesIdPemParamsExtension string

// GetPoliciesParams defines parameters for GetPolicies.
type GetPoliciesParams struct {
	// Imported Load imported policies (type = IMPORTED) - true: include imported, false: exclude imported, only: only imported
	Imported *GetPoliciesParamsImported `form:"imported,omitempty" json:"imported,omitempty"`
}

// GetPoliciesParamsImported defines parameters for GetPolicies.
type GetPoliciesParamsImported string

// PostCertificatesJSONRequestBody defines body for PostCertificates for application/json ContentType.
type PostCertificatesJSONRequestBody = GetCertificatesPayload

// PatchCertificatesIdJSONRequestBody defines body for PatchCertificatesId for application/json ContentType.
type PatchCertificatesIdJSONRequestBody = RevokeCertificateReasonIssuerDN

// PostCertificatesIdRenewJSONRequestBody defines body for PostCertificatesIdRenew for application/json ContentType.
type PostCertificatesIdRenewJSONRequestBody = RenewCertificatePayload

// PatchCertificatesIdStatusJSONRequestBody defines body for PatchCertificatesIdStatus for application/json ContentType.
type PatchCertificatesIdStatusJSONRequestBody = RenewCertificateStatus

// PostCsrJSONRequestBody defines body for PostCsr for application/json ContentType.
type PostCsrJSONRequestBody = CertRequestBody

// PostHawkJSONRequestBody defines body for PostHawk for application/json ContentType.
type PostHawkJSONRequestBody = HawkCredentialComments

// PutHawkHawkIdJSONRequestBody defines body for PutHawkHawkId for application/json ContentType.
type PutHawkHawkIdJSONRequestBody = HawkCredentialComment

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostCertificatesWithBody request with any body
	PostCertificatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificates(ctx context.Context, body PostCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificatesId request
	GetCertificatesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCertificatesIdWithBody request with any body
	PatchCertificatesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCertificatesId(ctx context.Context, id string, body PatchCertificatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificatesIdDer request
	GetCertificatesIdDer(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdDerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificatesIdPem request
	GetCertificatesIdPem(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdPemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCertificatesIdRenewWithBody request with any body
	PostCertificatesIdRenewWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCertificatesIdRenew(ctx context.Context, id openapi_types.UUID, body PostCertificatesIdRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificatesIdStatus request
	GetCertificatesIdStatus(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCertificatesIdStatusWithBody request with any body
	PatchCertificatesIdStatusWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCertificatesIdStatus(ctx context.Context, id openapi_types.UUID, body PatchCertificatesIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCsrWithBody request with any body
	PostCsrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCsr(ctx context.Context, body PostCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCsrId request
	GetCsrId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCsrIdStatus request
	GetCsrIdStatus(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHawk request
	GetHawk(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHawkWithBody request with any body
	PostHawkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHawk(ctx context.Context, body PostHawkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHawkHawkId request
	DeleteHawkHawkId(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHawkHawkId request
	GetHawkHawkId(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutHawkHawkIdWithBody request with any body
	PutHawkHawkIdWithBody(ctx context.Context, hawkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutHawkHawkId(ctx context.Context, hawkId string, body PutHawkHawkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicies request
	GetPolicies(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoliciesId request
	GetPoliciesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostCertificatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificates(ctx context.Context, body PostCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificatesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificatesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCertificatesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCertificatesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCertificatesId(ctx context.Context, id string, body PatchCertificatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCertificatesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificatesIdDer(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdDerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificatesIdDerRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificatesIdPem(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdPemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificatesIdPemRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificatesIdRenewWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificatesIdRenewRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCertificatesIdRenew(ctx context.Context, id openapi_types.UUID, body PostCertificatesIdRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCertificatesIdRenewRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificatesIdStatus(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificatesIdStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCertificatesIdStatusWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCertificatesIdStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCertificatesIdStatus(ctx context.Context, id openapi_types.UUID, body PatchCertificatesIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCertificatesIdStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCsrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCsrRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCsr(ctx context.Context, body PostCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCsrRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCsrId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCsrIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCsrIdStatus(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCsrIdStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHawk(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHawkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHawkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHawkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHawk(ctx context.Context, body PostHawkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHawkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHawkHawkId(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHawkHawkIdRequest(c.Server, hawkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHawkHawkId(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHawkHawkIdRequest(c.Server, hawkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHawkHawkIdWithBody(ctx context.Context, hawkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHawkHawkIdRequestWithBody(c.Server, hawkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHawkHawkId(ctx context.Context, hawkId string, body PutHawkHawkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHawkHawkIdRequest(c.Server, hawkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicies(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoliciesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoliciesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostCertificatesRequest calls the generic PostCertificates builder with application/json body
func NewPostCertificatesRequest(server string, body PostCertificatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificatesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCertificatesRequestWithBody generates requests for PostCertificates with any type of body
func NewPostCertificatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificatesIdRequest generates requests for GetCertificatesId
func NewGetCertificatesIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCertificatesIdRequest calls the generic PatchCertificatesId builder with application/json body
func NewPatchCertificatesIdRequest(server string, id string, body PatchCertificatesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCertificatesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchCertificatesIdRequestWithBody generates requests for PatchCertificatesId with any type of body
func NewPatchCertificatesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificatesIdDerRequest generates requests for GetCertificatesIdDer
func NewGetCertificatesIdDerRequest(server string, id openapi_types.UUID, params *GetCertificatesIdDerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s/der", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Extension != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extension", runtime.ParamLocationQuery, *params.Extension); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Chain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain", runtime.ParamLocationQuery, *params.Chain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificatesIdPemRequest generates requests for GetCertificatesIdPem
func NewGetCertificatesIdPemRequest(server string, id openapi_types.UUID, params *GetCertificatesIdPemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s/pem", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Extension != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extension", runtime.ParamLocationQuery, *params.Extension); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Chain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain", runtime.ParamLocationQuery, *params.Chain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCertificatesIdRenewRequest calls the generic PostCertificatesIdRenew builder with application/json body
func NewPostCertificatesIdRenewRequest(server string, id openapi_types.UUID, body PostCertificatesIdRenewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCertificatesIdRenewRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCertificatesIdRenewRequestWithBody generates requests for PostCertificatesIdRenew with any type of body
func NewPostCertificatesIdRenewRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s/renew", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificatesIdStatusRequest generates requests for GetCertificatesIdStatus
func NewGetCertificatesIdStatusRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCertificatesIdStatusRequest calls the generic PatchCertificatesIdStatus builder with application/json body
func NewPatchCertificatesIdStatusRequest(server string, id openapi_types.UUID, body PatchCertificatesIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCertificatesIdStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchCertificatesIdStatusRequestWithBody generates requests for PatchCertificatesIdStatus with any type of body
func NewPatchCertificatesIdStatusRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCsrRequest calls the generic PostCsr builder with application/json body
func NewPostCsrRequest(server string, body PostCsrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCsrRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCsrRequestWithBody generates requests for PostCsr with any type of body
func NewPostCsrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csr/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCsrIdRequest generates requests for GetCsrId
func NewGetCsrIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csr/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCsrIdStatusRequest generates requests for GetCsrIdStatus
func NewGetCsrIdStatusRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/csr/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHawkRequest generates requests for GetHawk
func NewGetHawkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hawk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHawkRequest calls the generic PostHawk builder with application/json body
func NewPostHawkRequest(server string, body PostHawkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHawkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHawkRequestWithBody generates requests for PostHawk with any type of body
func NewPostHawkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hawk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHawkHawkIdRequest generates requests for DeleteHawkHawkId
func NewDeleteHawkHawkIdRequest(server string, hawkId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hawkId", runtime.ParamLocationPath, hawkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hawk/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHawkHawkIdRequest generates requests for GetHawkHawkId
func NewGetHawkHawkIdRequest(server string, hawkId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hawkId", runtime.ParamLocationPath, hawkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hawk/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutHawkHawkIdRequest calls the generic PutHawkHawkId builder with application/json body
func NewPutHawkHawkIdRequest(server string, hawkId string, body PutHawkHawkIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutHawkHawkIdRequestWithBody(server, hawkId, "application/json", bodyReader)
}

// NewPutHawkHawkIdRequestWithBody generates requests for PutHawkHawkId with any type of body
func NewPutHawkHawkIdRequestWithBody(server string, hawkId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hawkId", runtime.ParamLocationPath, hawkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hawk/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoliciesRequest generates requests for GetPolicies
func NewGetPoliciesRequest(server string, params *GetPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Imported != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "imported", runtime.ParamLocationQuery, *params.Imported); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPoliciesIdRequest generates requests for GetPoliciesId
func NewGetPoliciesIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostCertificatesWithBodyWithResponse request with any body
	PostCertificatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificatesResponse, error)

	PostCertificatesWithResponse(ctx context.Context, body PostCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificatesResponse, error)

	// GetCertificatesIdWithResponse request
	GetCertificatesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCertificatesIdResponse, error)

	// PatchCertificatesIdWithBodyWithResponse request with any body
	PatchCertificatesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCertificatesIdResponse, error)

	PatchCertificatesIdWithResponse(ctx context.Context, id string, body PatchCertificatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCertificatesIdResponse, error)

	// GetCertificatesIdDerWithResponse request
	GetCertificatesIdDerWithResponse(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdDerParams, reqEditors ...RequestEditorFn) (*GetCertificatesIdDerResponse, error)

	// GetCertificatesIdPemWithResponse request
	GetCertificatesIdPemWithResponse(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdPemParams, reqEditors ...RequestEditorFn) (*GetCertificatesIdPemResponse, error)

	// PostCertificatesIdRenewWithBodyWithResponse request with any body
	PostCertificatesIdRenewWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificatesIdRenewResponse, error)

	PostCertificatesIdRenewWithResponse(ctx context.Context, id openapi_types.UUID, body PostCertificatesIdRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificatesIdRenewResponse, error)

	// GetCertificatesIdStatusWithResponse request
	GetCertificatesIdStatusWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCertificatesIdStatusResponse, error)

	// PatchCertificatesIdStatusWithBodyWithResponse request with any body
	PatchCertificatesIdStatusWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCertificatesIdStatusResponse, error)

	PatchCertificatesIdStatusWithResponse(ctx context.Context, id openapi_types.UUID, body PatchCertificatesIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCertificatesIdStatusResponse, error)

	// PostCsrWithBodyWithResponse request with any body
	PostCsrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCsrResponse, error)

	PostCsrWithResponse(ctx context.Context, body PostCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCsrResponse, error)

	// GetCsrIdWithResponse request
	GetCsrIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCsrIdResponse, error)

	// GetCsrIdStatusWithResponse request
	GetCsrIdStatusWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCsrIdStatusResponse, error)

	// GetHawkWithResponse request
	GetHawkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHawkResponse, error)

	// PostHawkWithBodyWithResponse request with any body
	PostHawkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHawkResponse, error)

	PostHawkWithResponse(ctx context.Context, body PostHawkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHawkResponse, error)

	// DeleteHawkHawkIdWithResponse request
	DeleteHawkHawkIdWithResponse(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*DeleteHawkHawkIdResponse, error)

	// GetHawkHawkIdWithResponse request
	GetHawkHawkIdWithResponse(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*GetHawkHawkIdResponse, error)

	// PutHawkHawkIdWithBodyWithResponse request with any body
	PutHawkHawkIdWithBodyWithResponse(ctx context.Context, hawkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHawkHawkIdResponse, error)

	PutHawkHawkIdWithResponse(ctx context.Context, hawkId string, body PutHawkHawkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHawkHawkIdResponse, error)

	// GetPoliciesWithResponse request
	GetPoliciesWithResponse(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*GetPoliciesResponse, error)

	// GetPoliciesIdWithResponse request
	GetPoliciesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPoliciesIdResponse, error)
}

type PostCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCertificatesResponse
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r PostCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Certificate
	JSON404      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetCertificatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCertificatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateStatus
	JSON403      *ResultError
	JSON404      *ResultError
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r PatchCertificatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCertificatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificatesIdDerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetCertificatesIdDerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificatesIdDerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificatesIdPemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetCertificatesIdPemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificatesIdPemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCertificatesIdRenewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertRequestStatus
	JSON404      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r PostCertificatesIdRenewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCertificatesIdRenewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificatesIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateStatus
	JSON404      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetCertificatesIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificatesIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCertificatesIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateStatus
	JSON404      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r PatchCertificatesIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCertificatesIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCsrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertRequestStatus
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r PostCsrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCsrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCsrIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertRequest
	JSON404      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetCsrIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCsrIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCsrIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertRequestStatus
	JSON404      *ResultError
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetCsrIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCsrIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHawkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HawkCredential
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetHawkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHawkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHawkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HawkCredentialWithKey
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r PostHawkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHawkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHawkHawkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HawkCredentialDeleteResults
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r DeleteHawkHawkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHawkHawkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHawkHawkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HawkCredential
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetHawkHawkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHawkHawkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutHawkHawkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HawkCredentialWithKey
	JSON422      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r PutHawkHawkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutHawkHawkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Policy
}

// Status returns HTTPResponse.Status
func (r GetPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoliciesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
	JSON404      *ResultError
	JSON500      *ResultError
}

// Status returns HTTPResponse.Status
func (r GetPoliciesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoliciesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostCertificatesWithBodyWithResponse request with arbitrary body returning *PostCertificatesResponse
func (c *ClientWithResponses) PostCertificatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificatesResponse, error) {
	rsp, err := c.PostCertificatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificatesResponse(rsp)
}

func (c *ClientWithResponses) PostCertificatesWithResponse(ctx context.Context, body PostCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificatesResponse, error) {
	rsp, err := c.PostCertificates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificatesResponse(rsp)
}

// GetCertificatesIdWithResponse request returning *GetCertificatesIdResponse
func (c *ClientWithResponses) GetCertificatesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCertificatesIdResponse, error) {
	rsp, err := c.GetCertificatesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificatesIdResponse(rsp)
}

// PatchCertificatesIdWithBodyWithResponse request with arbitrary body returning *PatchCertificatesIdResponse
func (c *ClientWithResponses) PatchCertificatesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCertificatesIdResponse, error) {
	rsp, err := c.PatchCertificatesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCertificatesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchCertificatesIdWithResponse(ctx context.Context, id string, body PatchCertificatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCertificatesIdResponse, error) {
	rsp, err := c.PatchCertificatesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCertificatesIdResponse(rsp)
}

// GetCertificatesIdDerWithResponse request returning *GetCertificatesIdDerResponse
func (c *ClientWithResponses) GetCertificatesIdDerWithResponse(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdDerParams, reqEditors ...RequestEditorFn) (*GetCertificatesIdDerResponse, error) {
	rsp, err := c.GetCertificatesIdDer(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificatesIdDerResponse(rsp)
}

// GetCertificatesIdPemWithResponse request returning *GetCertificatesIdPemResponse
func (c *ClientWithResponses) GetCertificatesIdPemWithResponse(ctx context.Context, id openapi_types.UUID, params *GetCertificatesIdPemParams, reqEditors ...RequestEditorFn) (*GetCertificatesIdPemResponse, error) {
	rsp, err := c.GetCertificatesIdPem(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificatesIdPemResponse(rsp)
}

// PostCertificatesIdRenewWithBodyWithResponse request with arbitrary body returning *PostCertificatesIdRenewResponse
func (c *ClientWithResponses) PostCertificatesIdRenewWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCertificatesIdRenewResponse, error) {
	rsp, err := c.PostCertificatesIdRenewWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificatesIdRenewResponse(rsp)
}

func (c *ClientWithResponses) PostCertificatesIdRenewWithResponse(ctx context.Context, id openapi_types.UUID, body PostCertificatesIdRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCertificatesIdRenewResponse, error) {
	rsp, err := c.PostCertificatesIdRenew(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCertificatesIdRenewResponse(rsp)
}

// GetCertificatesIdStatusWithResponse request returning *GetCertificatesIdStatusResponse
func (c *ClientWithResponses) GetCertificatesIdStatusWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCertificatesIdStatusResponse, error) {
	rsp, err := c.GetCertificatesIdStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificatesIdStatusResponse(rsp)
}

// PatchCertificatesIdStatusWithBodyWithResponse request with arbitrary body returning *PatchCertificatesIdStatusResponse
func (c *ClientWithResponses) PatchCertificatesIdStatusWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCertificatesIdStatusResponse, error) {
	rsp, err := c.PatchCertificatesIdStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCertificatesIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PatchCertificatesIdStatusWithResponse(ctx context.Context, id openapi_types.UUID, body PatchCertificatesIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCertificatesIdStatusResponse, error) {
	rsp, err := c.PatchCertificatesIdStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCertificatesIdStatusResponse(rsp)
}

// PostCsrWithBodyWithResponse request with arbitrary body returning *PostCsrResponse
func (c *ClientWithResponses) PostCsrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCsrResponse, error) {
	rsp, err := c.PostCsrWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCsrResponse(rsp)
}

func (c *ClientWithResponses) PostCsrWithResponse(ctx context.Context, body PostCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCsrResponse, error) {
	rsp, err := c.PostCsr(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCsrResponse(rsp)
}

// GetCsrIdWithResponse request returning *GetCsrIdResponse
func (c *ClientWithResponses) GetCsrIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCsrIdResponse, error) {
	rsp, err := c.GetCsrId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCsrIdResponse(rsp)
}

// GetCsrIdStatusWithResponse request returning *GetCsrIdStatusResponse
func (c *ClientWithResponses) GetCsrIdStatusWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCsrIdStatusResponse, error) {
	rsp, err := c.GetCsrIdStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCsrIdStatusResponse(rsp)
}

// GetHawkWithResponse request returning *GetHawkResponse
func (c *ClientWithResponses) GetHawkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHawkResponse, error) {
	rsp, err := c.GetHawk(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHawkResponse(rsp)
}

// PostHawkWithBodyWithResponse request with arbitrary body returning *PostHawkResponse
func (c *ClientWithResponses) PostHawkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHawkResponse, error) {
	rsp, err := c.PostHawkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHawkResponse(rsp)
}

func (c *ClientWithResponses) PostHawkWithResponse(ctx context.Context, body PostHawkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHawkResponse, error) {
	rsp, err := c.PostHawk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHawkResponse(rsp)
}

// DeleteHawkHawkIdWithResponse request returning *DeleteHawkHawkIdResponse
func (c *ClientWithResponses) DeleteHawkHawkIdWithResponse(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*DeleteHawkHawkIdResponse, error) {
	rsp, err := c.DeleteHawkHawkId(ctx, hawkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHawkHawkIdResponse(rsp)
}

// GetHawkHawkIdWithResponse request returning *GetHawkHawkIdResponse
func (c *ClientWithResponses) GetHawkHawkIdWithResponse(ctx context.Context, hawkId string, reqEditors ...RequestEditorFn) (*GetHawkHawkIdResponse, error) {
	rsp, err := c.GetHawkHawkId(ctx, hawkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHawkHawkIdResponse(rsp)
}

// PutHawkHawkIdWithBodyWithResponse request with arbitrary body returning *PutHawkHawkIdResponse
func (c *ClientWithResponses) PutHawkHawkIdWithBodyWithResponse(ctx context.Context, hawkId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHawkHawkIdResponse, error) {
	rsp, err := c.PutHawkHawkIdWithBody(ctx, hawkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHawkHawkIdResponse(rsp)
}

func (c *ClientWithResponses) PutHawkHawkIdWithResponse(ctx context.Context, hawkId string, body PutHawkHawkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHawkHawkIdResponse, error) {
	rsp, err := c.PutHawkHawkId(ctx, hawkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHawkHawkIdResponse(rsp)
}

// GetPoliciesWithResponse request returning *GetPoliciesResponse
func (c *ClientWithResponses) GetPoliciesWithResponse(ctx context.Context, params *GetPoliciesParams, reqEditors ...RequestEditorFn) (*GetPoliciesResponse, error) {
	rsp, err := c.GetPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoliciesResponse(rsp)
}

// GetPoliciesIdWithResponse request returning *GetPoliciesIdResponse
func (c *ClientWithResponses) GetPoliciesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPoliciesIdResponse, error) {
	rsp, err := c.GetPoliciesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoliciesIdResponse(rsp)
}

// ParsePostCertificatesResponse parses an HTTP response from a PostCertificatesWithResponse call
func ParsePostCertificatesResponse(rsp *http.Response) (*PostCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCertificatesIdResponse parses an HTTP response from a GetCertificatesIdWithResponse call
func ParseGetCertificatesIdResponse(rsp *http.Response) (*GetCertificatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchCertificatesIdResponse parses an HTTP response from a PatchCertificatesIdWithResponse call
func ParsePatchCertificatesIdResponse(rsp *http.Response) (*PatchCertificatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCertificatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCertificatesIdDerResponse parses an HTTP response from a GetCertificatesIdDerWithResponse call
func ParseGetCertificatesIdDerResponse(rsp *http.Response) (*GetCertificatesIdDerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificatesIdDerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCertificatesIdPemResponse parses an HTTP response from a GetCertificatesIdPemWithResponse call
func ParseGetCertificatesIdPemResponse(rsp *http.Response) (*GetCertificatesIdPemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificatesIdPemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCertificatesIdRenewResponse parses an HTTP response from a PostCertificatesIdRenewWithResponse call
func ParsePostCertificatesIdRenewResponse(rsp *http.Response) (*PostCertificatesIdRenewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCertificatesIdRenewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertRequestStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCertificatesIdStatusResponse parses an HTTP response from a GetCertificatesIdStatusWithResponse call
func ParseGetCertificatesIdStatusResponse(rsp *http.Response) (*GetCertificatesIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificatesIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchCertificatesIdStatusResponse parses an HTTP response from a PatchCertificatesIdStatusWithResponse call
func ParsePatchCertificatesIdStatusResponse(rsp *http.Response) (*PatchCertificatesIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCertificatesIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCsrResponse parses an HTTP response from a PostCsrWithResponse call
func ParsePostCsrResponse(rsp *http.Response) (*PostCsrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCsrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertRequestStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCsrIdResponse parses an HTTP response from a GetCsrIdWithResponse call
func ParseGetCsrIdResponse(rsp *http.Response) (*GetCsrIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCsrIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCsrIdStatusResponse parses an HTTP response from a GetCsrIdStatusWithResponse call
func ParseGetCsrIdStatusResponse(rsp *http.Response) (*GetCsrIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCsrIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertRequestStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHawkResponse parses an HTTP response from a GetHawkWithResponse call
func ParseGetHawkResponse(rsp *http.Response) (*GetHawkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHawkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HawkCredential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostHawkResponse parses an HTTP response from a PostHawkWithResponse call
func ParsePostHawkResponse(rsp *http.Response) (*PostHawkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHawkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HawkCredentialWithKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteHawkHawkIdResponse parses an HTTP response from a DeleteHawkHawkIdWithResponse call
func ParseDeleteHawkHawkIdResponse(rsp *http.Response) (*DeleteHawkHawkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHawkHawkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HawkCredentialDeleteResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHawkHawkIdResponse parses an HTTP response from a GetHawkHawkIdWithResponse call
func ParseGetHawkHawkIdResponse(rsp *http.Response) (*GetHawkHawkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHawkHawkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HawkCredential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutHawkHawkIdResponse parses an HTTP response from a PutHawkHawkIdWithResponse call
func ParsePutHawkHawkIdResponse(rsp *http.Response) (*PutHawkHawkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutHawkHawkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HawkCredentialWithKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPoliciesResponse parses an HTTP response from a GetPoliciesWithResponse call
func ParseGetPoliciesResponse(rsp *http.Response) (*GetPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPoliciesIdResponse parses an HTTP response from a GetPoliciesIdWithResponse call
func ParseGetPoliciesIdResponse(rsp *http.Response) (*GetPoliciesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoliciesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
