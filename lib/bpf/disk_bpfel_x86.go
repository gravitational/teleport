// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && bpf

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type diskDataT struct {
	Cgroup     uint64
	Pid        uint64
	ReturnCode int32
	Command    [16]int8
	FilePath   [255]int8
	_          [1]byte
	Flags      int32
}

// loadDisk returns the embedded CollectionSpec for disk.
func loadDisk() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DiskBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load disk: %w", err)
	}

	return spec, err
}

// loadDiskObjects loads disk and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*diskObjects
//	*diskPrograms
//	*diskMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDiskObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDisk()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// diskSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type diskSpecs struct {
	diskProgramSpecs
	diskMapSpecs
}

// diskSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type diskProgramSpecs struct {
	TracepointSyscallsSysEnterCreat   *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_enter_creat"`
	TracepointSyscallsSysEnterOpen    *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_enter_open"`
	TracepointSyscallsSysEnterOpenat  *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_enter_openat"`
	TracepointSyscallsSysEnterOpenat2 *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_enter_openat2"`
	TracepointSyscallsSysExitCreat    *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_exit_creat"`
	TracepointSyscallsSysExitOpen     *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_exit_open"`
	TracepointSyscallsSysExitOpenat   *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_exit_openat"`
	TracepointSyscallsSysExitOpenat2  *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_exit_openat2"`
}

// diskMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type diskMapSpecs struct {
	Infotmp          *ebpf.MapSpec `ebpf:"infotmp"`
	LostCounter      *ebpf.MapSpec `ebpf:"lost_counter"`
	LostDoorbell     *ebpf.MapSpec `ebpf:"lost_doorbell"`
	MonitoredCgroups *ebpf.MapSpec `ebpf:"monitored_cgroups"`
	OpenEvents       *ebpf.MapSpec `ebpf:"open_events"`
}

// diskObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDiskObjects or ebpf.CollectionSpec.LoadAndAssign.
type diskObjects struct {
	diskPrograms
	diskMaps
}

func (o *diskObjects) Close() error {
	return _DiskClose(
		&o.diskPrograms,
		&o.diskMaps,
	)
}

// diskMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDiskObjects or ebpf.CollectionSpec.LoadAndAssign.
type diskMaps struct {
	Infotmp          *ebpf.Map `ebpf:"infotmp"`
	LostCounter      *ebpf.Map `ebpf:"lost_counter"`
	LostDoorbell     *ebpf.Map `ebpf:"lost_doorbell"`
	MonitoredCgroups *ebpf.Map `ebpf:"monitored_cgroups"`
	OpenEvents       *ebpf.Map `ebpf:"open_events"`
}

func (m *diskMaps) Close() error {
	return _DiskClose(
		m.Infotmp,
		m.LostCounter,
		m.LostDoorbell,
		m.MonitoredCgroups,
		m.OpenEvents,
	)
}

// diskPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDiskObjects or ebpf.CollectionSpec.LoadAndAssign.
type diskPrograms struct {
	TracepointSyscallsSysEnterCreat   *ebpf.Program `ebpf:"tracepoint__syscalls__sys_enter_creat"`
	TracepointSyscallsSysEnterOpen    *ebpf.Program `ebpf:"tracepoint__syscalls__sys_enter_open"`
	TracepointSyscallsSysEnterOpenat  *ebpf.Program `ebpf:"tracepoint__syscalls__sys_enter_openat"`
	TracepointSyscallsSysEnterOpenat2 *ebpf.Program `ebpf:"tracepoint__syscalls__sys_enter_openat2"`
	TracepointSyscallsSysExitCreat    *ebpf.Program `ebpf:"tracepoint__syscalls__sys_exit_creat"`
	TracepointSyscallsSysExitOpen     *ebpf.Program `ebpf:"tracepoint__syscalls__sys_exit_open"`
	TracepointSyscallsSysExitOpenat   *ebpf.Program `ebpf:"tracepoint__syscalls__sys_exit_openat"`
	TracepointSyscallsSysExitOpenat2  *ebpf.Program `ebpf:"tracepoint__syscalls__sys_exit_openat2"`
}

func (p *diskPrograms) Close() error {
	return _DiskClose(
		p.TracepointSyscallsSysEnterCreat,
		p.TracepointSyscallsSysEnterOpen,
		p.TracepointSyscallsSysEnterOpenat,
		p.TracepointSyscallsSysEnterOpenat2,
		p.TracepointSyscallsSysExitCreat,
		p.TracepointSyscallsSysExitOpen,
		p.TracepointSyscallsSysExitOpenat,
		p.TracepointSyscallsSysExitOpenat2,
	)
}

func _DiskClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed disk_bpfel_x86.o
var _DiskBytes []byte
