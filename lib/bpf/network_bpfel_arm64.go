// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64 && bpf

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type networkIpv4DataT struct {
	Cgroup  uint64
	Ip      uint64
	Pid     uint32
	Saddr   uint32
	Daddr   uint32
	Dport   uint16
	Command [16]int8
	_       [2]byte
}

type networkIpv6DataT struct {
	Cgroup  uint64
	Ip      uint64
	Pid     uint32
	Saddr   struct{ In6U struct{ U6Addr8 [16]uint8 } }
	Daddr   struct{ In6U struct{ U6Addr8 [16]uint8 } }
	Dport   uint16
	Command [16]int8
	_       [2]byte
}

// loadNetwork returns the embedded CollectionSpec for network.
func loadNetwork() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NetworkBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load network: %w", err)
	}

	return spec, err
}

// loadNetworkObjects loads network and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*networkObjects
//	*networkPrograms
//	*networkMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNetworkObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNetwork()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// networkSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type networkSpecs struct {
	networkProgramSpecs
	networkMapSpecs
}

// networkSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type networkProgramSpecs struct {
	KprobeTcpV4Connect    *ebpf.ProgramSpec `ebpf:"kprobe__tcp_v4_connect"`
	KprobeTcpV6Connect    *ebpf.ProgramSpec `ebpf:"kprobe__tcp_v6_connect"`
	KretprobeTcpV4Connect *ebpf.ProgramSpec `ebpf:"kretprobe__tcp_v4_connect"`
	KretprobeTcpV6Connect *ebpf.ProgramSpec `ebpf:"kretprobe__tcp_v6_connect"`
}

// networkMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type networkMapSpecs struct {
	Currsock         *ebpf.MapSpec `ebpf:"currsock"`
	Ipv4Events       *ebpf.MapSpec `ebpf:"ipv4_events"`
	Ipv6Events       *ebpf.MapSpec `ebpf:"ipv6_events"`
	LostCounter      *ebpf.MapSpec `ebpf:"lost_counter"`
	LostDoorbell     *ebpf.MapSpec `ebpf:"lost_doorbell"`
	MonitoredCgroups *ebpf.MapSpec `ebpf:"monitored_cgroups"`
}

// networkObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNetworkObjects or ebpf.CollectionSpec.LoadAndAssign.
type networkObjects struct {
	networkPrograms
	networkMaps
}

func (o *networkObjects) Close() error {
	return _NetworkClose(
		&o.networkPrograms,
		&o.networkMaps,
	)
}

// networkMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNetworkObjects or ebpf.CollectionSpec.LoadAndAssign.
type networkMaps struct {
	Currsock         *ebpf.Map `ebpf:"currsock"`
	Ipv4Events       *ebpf.Map `ebpf:"ipv4_events"`
	Ipv6Events       *ebpf.Map `ebpf:"ipv6_events"`
	LostCounter      *ebpf.Map `ebpf:"lost_counter"`
	LostDoorbell     *ebpf.Map `ebpf:"lost_doorbell"`
	MonitoredCgroups *ebpf.Map `ebpf:"monitored_cgroups"`
}

func (m *networkMaps) Close() error {
	return _NetworkClose(
		m.Currsock,
		m.Ipv4Events,
		m.Ipv6Events,
		m.LostCounter,
		m.LostDoorbell,
		m.MonitoredCgroups,
	)
}

// networkPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNetworkObjects or ebpf.CollectionSpec.LoadAndAssign.
type networkPrograms struct {
	KprobeTcpV4Connect    *ebpf.Program `ebpf:"kprobe__tcp_v4_connect"`
	KprobeTcpV6Connect    *ebpf.Program `ebpf:"kprobe__tcp_v6_connect"`
	KretprobeTcpV4Connect *ebpf.Program `ebpf:"kretprobe__tcp_v4_connect"`
	KretprobeTcpV6Connect *ebpf.Program `ebpf:"kretprobe__tcp_v6_connect"`
}

func (p *networkPrograms) Close() error {
	return _NetworkClose(
		p.KprobeTcpV4Connect,
		p.KprobeTcpV6Connect,
		p.KretprobeTcpV4Connect,
		p.KretprobeTcpV6Connect,
	)
}

func _NetworkClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed network_bpfel_arm64.o
var _NetworkBytes []byte
