-- suppress notices for test output consistency
SET client_min_messages = warning;

-- reset the playground schema
DROP SCHEMA IF EXISTS test_ddl_db CASCADE;
CREATE SCHEMA test_ddl_db;
SET search_path = test_ddl_db, public;
DROP SCHEMA IF EXISTS test_ddl CASCADE;
CREATE SCHEMA test_ddl;
SET search_path = test_ddl, public;

-- tables
CREATE TABLE test_table (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  value TEXT NOT NULL,
  note  VARCHAR(100) DEFAULT NULL
);

-- views
CREATE VIEW test_view AS
SELECT id, value
FROM test_table;

-- functions
CREATE OR REPLACE FUNCTION test_func(x INT)
RETURNS INT
LANGUAGE sql
IMMUTABLE
AS $$
  SELECT x * 2
$$;

-- procedures
CREATE OR REPLACE PROCEDURE test_proc()
LANGUAGE sql
AS $$
  INSERT INTO test_table(value) VALUES ('from proc')
$$;

CALL test_proc();

-- triggers (which use a function)
-- this fails to parse because delimiters are in the dollar quoted string
-- TODO(gavin): fix the parser to handle delimiter quotation properly
CREATE OR REPLACE FUNCTION test_trigger_before_insert_fn()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.value := UPPER(NEW.value);
  RETURN NEW;
END; $$;

-- for now, create the func with all delimiters on one line
CREATE OR REPLACE FUNCTION test_trigger_before_insert_fn()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN NEW.value := UPPER(NEW.value); RETURN NEW; END; $$;

CREATE TRIGGER test_trigger_before_insert
BEFORE INSERT ON test_table
FOR EACH ROW
EXECUTE FUNCTION test_trigger_before_insert_fn();

CALL test_proc();

-- manage roles
DROP ROLE IF EXISTS test_role;
CREATE ROLE test_role;
DROP ROLE test_role;

DROP ROLE IF EXISTS test_user;
CREATE ROLE test_user NOLOGIN PASSWORD 'some password';
ALTER ROLE test_user VALID UNTIL '1970-01-01';
DROP ROLE test_user;

-- table alteration
ALTER TABLE test_table ADD COLUMN note2 VARCHAR(100) DEFAULT 'LLAMA';

-- comments on objects
COMMENT ON FUNCTION test_func(INT) IS 'Test function';
COMMENT ON PROCEDURE test_proc() IS 'Test procedure';

-- rename a table and query it
ALTER TABLE test_table RENAME TO test_table_renamed;
SELECT * FROM test_table_renamed;

-- rename it back
ALTER TABLE test_table_renamed RENAME TO test_table;
SELECT * FROM test_table;

-- insert a bunch of dummy values with a wide column in the middle
-- (checking column alignment formatting)
INSERT INTO test_table (value)
WITH RECURSIVE numbers(n) AS (
  SELECT 4
  UNION ALL
  SELECT n + 1 FROM numbers WHERE n < 120
)
SELECT 'especially wide column' AS value
UNION ALL
SELECT 'value_' || n FROM numbers;
SELECT * FROM test_table;

-- intentionally cause an error: no such foreign server
ALTER SERVER test_server OPTIONS (SET host '127.0.0.1');

-- test dropping some other kinds of objects
DROP TRIGGER IF EXISTS test_trigger_before_insert ON test_table;
DROP FUNCTION IF EXISTS test_trigger_before_insert_fn();
DROP PROCEDURE test_proc;
DROP VIEW test_view;

TRUNCATE TABLE test_table;
DROP TABLE test_table;

-- clean up: reset the search path and drop the schema
SET search_path = public;
DROP SCHEMA test_ddl_db CASCADE;
