Teleport PostgreSQL interactive shell (v19.0.0-dev)
Connected to "postgres-test-container" instance as "postgres" user.
Type \? for help.

postgres=> -- suppress notices for test output consistency
postgres=> SET client_min_messages = warning;
SET

postgres=> 
postgres=> -- reset the playground schema
postgres=> DROP SCHEMA IF EXISTS test_ddl_db CASCADE;
DROP SCHEMA

postgres=> CREATE SCHEMA test_ddl_db;
CREATE SCHEMA

postgres=> SET search_path = test_ddl_db, public;
SET

postgres=> DROP SCHEMA IF EXISTS test_ddl CASCADE;
DROP SCHEMA

postgres=> CREATE SCHEMA test_ddl;
CREATE SCHEMA

postgres=> SET search_path = test_ddl, public;
SET

postgres=> 
postgres=> -- tables
postgres=> CREATE TABLE test_table (
             id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
             value TEXT NOT NULL,
             note  VARCHAR(100) DEFAULT NULL
           );
CREATE TABLE

postgres=> 
postgres=> -- views
postgres=> CREATE VIEW test_view AS
           SELECT id, value
           FROM test_table;
CREATE VIEW

postgres=> 
postgres=> -- functions
postgres=> CREATE OR REPLACE FUNCTION test_func(x INT)
           RETURNS INT
           LANGUAGE sql
           IMMUTABLE
           AS $$
             SELECT x * 2
           $$;
CREATE FUNCTION

postgres=> 
postgres=> -- procedures
postgres=> CREATE OR REPLACE PROCEDURE test_proc()
           LANGUAGE sql
           AS $$
             INSERT INTO test_table(value) VALUES ('from proc')
           $$;
CREATE PROCEDURE

postgres=> 
postgres=> CALL test_proc();
CALL

postgres=> 
postgres=> -- triggers (which use a function)
postgres=> -- this fails to parse because delimiters are in the dollar quoted st
ring
postgres=> -- TODO(gavin): fix the parser to handle delimiter quotation properly

postgres=> CREATE OR REPLACE FUNCTION test_trigger_before_insert_fn()
           RETURNS trigger
           LANGUAGE plpgsql
           AS $$
           BEGIN
             NEW.value := UPPER(NEW.value);
ERR ERROR: unterminated dollar-quoted string at or near "$$
BEGIN
NEW.value := UPPER(NEW.value);" (SQLSTATE 42601)

postgres=>   RETURN NEW;
ERR ERROR: syntax error at or near "RETURN" (SQLSTATE 42601)

postgres=> END; $$;
ERR ERROR: unterminated dollar-quoted string at or near "$$;" (SQLSTATE 42601)

postgres=> 
postgres=> -- for now, create the func with all delimiters on one line
postgres=> CREATE OR REPLACE FUNCTION test_trigger_before_insert_fn()
           RETURNS trigger
           LANGUAGE plpgsql
           AS $$
           BEGIN NEW.value := UPPER(NEW.value); RETURN NEW; END; $$;
CREATE FUNCTION

postgres=> 
postgres=> CREATE TRIGGER test_trigger_before_insert
           BEFORE INSERT ON test_table
           FOR EACH ROW
           EXECUTE FUNCTION test_trigger_before_insert_fn();
CREATE TRIGGER

postgres=> 
postgres=> CALL test_proc();
CALL

postgres=> 
postgres=> -- manage roles
postgres=> DROP ROLE IF EXISTS test_role;
DROP ROLE

postgres=> CREATE ROLE test_role;
CREATE ROLE

postgres=> DROP ROLE test_role;
DROP ROLE

postgres=> 
postgres=> DROP ROLE IF EXISTS test_user;
DROP ROLE

postgres=> CREATE ROLE test_user NOLOGIN PASSWORD 'some password';
CREATE ROLE

postgres=> ALTER ROLE test_user VALID UNTIL '1970-01-01';
ALTER ROLE

postgres=> DROP ROLE test_user;
DROP ROLE

postgres=> 
postgres=> -- table alteration
postgres=> ALTER TABLE test_table ADD COLUMN note2 VARCHAR(100) DEFAULT 'LLAMA';

ALTER TABLE

postgres=> 
postgres=> -- comments on objects
postgres=> COMMENT ON FUNCTION test_func(INT) IS 'Test function';
COMMENT

postgres=> COMMENT ON PROCEDURE test_proc() IS 'Test procedure';
COMMENT

postgres=> 
postgres=> -- rename a table and query it
postgres=> ALTER TABLE test_table RENAME TO test_table_renamed;
ALTER TABLE

postgres=> SELECT * FROM test_table_renamed;
id | value     | note | note2
-- | -----     | ---- | -----
1  | from proc |      | LLAMA
2  | FROM PROC |      | LLAMA
(2 rows)

postgres=> 
postgres=> -- rename it back
postgres=> ALTER TABLE test_table_renamed RENAME TO test_table;
ALTER TABLE

postgres=> SELECT * FROM test_table;
id | value     | note | note2
-- | -----     | ---- | -----
1  | from proc |      | LLAMA
2  | FROM PROC |      | LLAMA
(2 rows)

postgres=> 
postgres=> 
postgres=> -- insert a bunch of dummy values with a wide column in the middle
postgres=> -- (checking column alignment formatting)
postgres=> INSERT INTO test_table (value)
           WITH RECURSIVE numbers(n) AS (
             SELECT 4
             UNION ALL
             SELECT n + 1 FROM numbers WHERE n < 120
           )
           SELECT 'especially wide column' AS value
           UNION ALL
           SELECT 'value_' || n FROM numbers;
INSERT 0 118

postgres=> SELECT * FROM test_table;
id  | value                  | note | note2
--  | -----                  | ---- | -----
1   | from proc              |      | LLAMA
2   | FROM PROC              |      | LLAMA
3   | ESPECIALLY WIDE COLUMN |      | LLAMA
4   | VALUE_4                |      | LLAMA
5   | VALUE_5                |      | LLAMA
6   | VALUE_6                |      | LLAMA
7   | VALUE_7                |      | LLAMA
8   | VALUE_8                |      | LLAMA
9   | VALUE_9                |      | LLAMA
10  | VALUE_10               |      | LLAMA
11  | VALUE_11               |      | LLAMA
12  | VALUE_12               |      | LLAMA
13  | VALUE_13               |      | LLAMA
14  | VALUE_14               |      | LLAMA
15  | VALUE_15               |      | LLAMA
16  | VALUE_16               |      | LLAMA
17  | VALUE_17               |      | LLAMA
18  | VALUE_18               |      | LLAMA
19  | VALUE_19               |      | LLAMA
20  | VALUE_20               |      | LLAMA
21  | VALUE_21               |      | LLAMA
22  | VALUE_22               |      | LLAMA
23  | VALUE_23               |      | LLAMA
24  | VALUE_24               |      | LLAMA
25  | VALUE_25               |      | LLAMA
26  | VALUE_26               |      | LLAMA
27  | VALUE_27               |      | LLAMA
28  | VALUE_28               |      | LLAMA
29  | VALUE_29               |      | LLAMA
30  | VALUE_30               |      | LLAMA
31  | VALUE_31               |      | LLAMA
32  | VALUE_32               |      | LLAMA
33  | VALUE_33               |      | LLAMA
34  | VALUE_34               |      | LLAMA
35  | VALUE_35               |      | LLAMA
36  | VALUE_36               |      | LLAMA
37  | VALUE_37               |      | LLAMA
38  | VALUE_38               |      | LLAMA
39  | VALUE_39               |      | LLAMA
40  | VALUE_40               |      | LLAMA
41  | VALUE_41               |      | LLAMA
42  | VALUE_42               |      | LLAMA
43  | VALUE_43               |      | LLAMA
44  | VALUE_44               |      | LLAMA
45  | VALUE_45               |      | LLAMA
46  | VALUE_46               |      | LLAMA
47  | VALUE_47               |      | LLAMA
48  | VALUE_48               |      | LLAMA
49  | VALUE_49               |      | LLAMA
50  | VALUE_50               |      | LLAMA
51  | VALUE_51               |      | LLAMA
52  | VALUE_52               |      | LLAMA
53  | VALUE_53               |      | LLAMA
54  | VALUE_54               |      | LLAMA
55  | VALUE_55               |      | LLAMA
56  | VALUE_56               |      | LLAMA
57  | VALUE_57               |      | LLAMA
58  | VALUE_58               |      | LLAMA
59  | VALUE_59               |      | LLAMA
60  | VALUE_60               |      | LLAMA
61  | VALUE_61               |      | LLAMA
62  | VALUE_62               |      | LLAMA
63  | VALUE_63               |      | LLAMA
64  | VALUE_64               |      | LLAMA
65  | VALUE_65               |      | LLAMA
66  | VALUE_66               |      | LLAMA
67  | VALUE_67               |      | LLAMA
68  | VALUE_68               |      | LLAMA
69  | VALUE_69               |      | LLAMA
70  | VALUE_70               |      | LLAMA
71  | VALUE_71               |      | LLAMA
72  | VALUE_72               |      | LLAMA
73  | VALUE_73               |      | LLAMA
74  | VALUE_74               |      | LLAMA
75  | VALUE_75               |      | LLAMA
76  | VALUE_76               |      | LLAMA
77  | VALUE_77               |      | LLAMA
78  | VALUE_78               |      | LLAMA
79  | VALUE_79               |      | LLAMA
80  | VALUE_80               |      | LLAMA
81  | VALUE_81               |      | LLAMA
82  | VALUE_82               |      | LLAMA
83  | VALUE_83               |      | LLAMA
84  | VALUE_84               |      | LLAMA
85  | VALUE_85               |      | LLAMA
86  | VALUE_86               |      | LLAMA
87  | VALUE_87               |      | LLAMA
88  | VALUE_88               |      | LLAMA
89  | VALUE_89               |      | LLAMA
90  | VALUE_90               |      | LLAMA
91  | VALUE_91               |      | LLAMA
92  | VALUE_92               |      | LLAMA
93  | VALUE_93               |      | LLAMA
94  | VALUE_94               |      | LLAMA
95  | VALUE_95               |      | LLAMA
96  | VALUE_96               |      | LLAMA
97  | VALUE_97               |      | LLAMA
98  | VALUE_98               |      | LLAMA
99  | VALUE_99               |      | LLAMA
100 | VALUE_100              |      | LLAMA
101 | VALUE_101 |  | LLAMA
102 | VALUE_102 |  | LLAMA
103 | VALUE_103 |  | LLAMA
104 | VALUE_104 |  | LLAMA
105 | VALUE_105 |  | LLAMA
106 | VALUE_106 |  | LLAMA
107 | VALUE_107 |  | LLAMA
108 | VALUE_108 |  | LLAMA
109 | VALUE_109 |  | LLAMA
110 | VALUE_110 |  | LLAMA
111 | VALUE_111 |  | LLAMA
112 | VALUE_112 |  | LLAMA
113 | VALUE_113 |  | LLAMA
114 | VALUE_114 |  | LLAMA
115 | VALUE_115 |  | LLAMA
116 | VALUE_116 |  | LLAMA
117 | VALUE_117 |  | LLAMA
118 | VALUE_118 |  | LLAMA
119 | VALUE_119 |  | LLAMA
120 | VALUE_120 |  | LLAMA
(120 rows)

postgres=> 
postgres=> -- intentionally cause an error: no such foreign server
postgres=> ALTER SERVER test_server OPTIONS (SET host '127.0.0.1');
ERR ERROR: server "test_server" does not exist (SQLSTATE 42704)

postgres=> 
postgres=> -- test dropping some other kinds of objects
postgres=> DROP TRIGGER IF EXISTS test_trigger_before_insert ON test_table;
DROP TRIGGER

postgres=> DROP FUNCTION IF EXISTS test_trigger_before_insert_fn();
DROP FUNCTION

postgres=> DROP PROCEDURE test_proc;
DROP PROCEDURE

postgres=> DROP VIEW test_view;
DROP VIEW

postgres=> 
postgres=> TRUNCATE TABLE test_table;
TRUNCATE TABLE

postgres=> DROP TABLE test_table;
DROP TABLE

postgres=> 
postgres=> -- clean up: reset the search path and drop the schema
postgres=> SET search_path = public;
SET

postgres=> DROP SCHEMA test_ddl_db CASCADE;
DROP SCHEMA

postgres=> 
postgres=> 