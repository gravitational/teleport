//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: prehog/v1alpha/connect.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - prehog.v1alpha.ConnectReportingService

/// Namespace containing generated types for the "prehog.v1alpha.ConnectReportingService" service.
internal enum Prehog_V1alpha_ConnectReportingService {
    /// Service descriptor for the "prehog.v1alpha.ConnectReportingService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "prehog.v1alpha.ConnectReportingService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "SubmitConnectEvent" metadata.
        internal enum SubmitConnectEvent {
            /// Request type for "SubmitConnectEvent".
            internal typealias Input = Prehog_V1alpha_SubmitConnectEventRequest
            /// Response type for "SubmitConnectEvent".
            internal typealias Output = Prehog_V1alpha_SubmitConnectEventResponse
            /// Descriptor for "SubmitConnectEvent".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "prehog.v1alpha.ConnectReportingService"),
                method: "SubmitConnectEvent"
            )
        }
        /// Descriptors for all methods in the "prehog.v1alpha.ConnectReportingService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            SubmitConnectEvent.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "prehog.v1alpha.ConnectReportingService" service.
    internal static let prehog_v1Alpha_ConnectReportingService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "prehog.v1alpha.ConnectReportingService")
}

// MARK: prehog.v1alpha.ConnectReportingService (client)

extension Prehog_V1alpha_ConnectReportingService {
    /// Generated client protocol for the "prehog.v1alpha.ConnectReportingService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "SubmitConnectEvent" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Prehog_V1alpha_SubmitConnectEventRequest` message.
        ///   - serializer: A serializer for `Prehog_V1alpha_SubmitConnectEventRequest` messages.
        ///   - deserializer: A deserializer for `Prehog_V1alpha_SubmitConnectEventResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func submitConnectEvent<Result>(
            request: GRPCCore.ClientRequest<Prehog_V1alpha_SubmitConnectEventRequest>,
            serializer: some GRPCCore.MessageSerializer<Prehog_V1alpha_SubmitConnectEventRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Prehog_V1alpha_SubmitConnectEventResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Prehog_V1alpha_SubmitConnectEventResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "prehog.v1alpha.ConnectReportingService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "SubmitConnectEvent" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Prehog_V1alpha_SubmitConnectEventRequest` message.
        ///   - serializer: A serializer for `Prehog_V1alpha_SubmitConnectEventRequest` messages.
        ///   - deserializer: A deserializer for `Prehog_V1alpha_SubmitConnectEventResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func submitConnectEvent<Result>(
            request: GRPCCore.ClientRequest<Prehog_V1alpha_SubmitConnectEventRequest>,
            serializer: some GRPCCore.MessageSerializer<Prehog_V1alpha_SubmitConnectEventRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Prehog_V1alpha_SubmitConnectEventResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Prehog_V1alpha_SubmitConnectEventResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Prehog_V1alpha_ConnectReportingService.Method.SubmitConnectEvent.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Prehog_V1alpha_ConnectReportingService.ClientProtocol {
    /// Call the "SubmitConnectEvent" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Prehog_V1alpha_SubmitConnectEventRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func submitConnectEvent<Result>(
        request: GRPCCore.ClientRequest<Prehog_V1alpha_SubmitConnectEventRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Prehog_V1alpha_SubmitConnectEventResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.submitConnectEvent(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Prehog_V1alpha_SubmitConnectEventRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Prehog_V1alpha_SubmitConnectEventResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Prehog_V1alpha_ConnectReportingService.ClientProtocol {
    /// Call the "SubmitConnectEvent" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func submitConnectEvent<Result>(
        _ message: Prehog_V1alpha_SubmitConnectEventRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Prehog_V1alpha_SubmitConnectEventResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Prehog_V1alpha_SubmitConnectEventRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.submitConnectEvent(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}