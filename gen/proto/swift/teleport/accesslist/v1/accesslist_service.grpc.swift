// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: teleport/accesslist/v1/accesslist_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - teleport.accesslist.v1.AccessListService

/// Namespace containing generated types for the "teleport.accesslist.v1.AccessListService" service.
internal enum Teleport_Accesslist_V1_AccessListService {
    /// Service descriptor for the "teleport.accesslist.v1.AccessListService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetAccessLists" metadata.
        internal enum GetAccessLists {
            /// Request type for "GetAccessLists".
            internal typealias Input = Teleport_Accesslist_V1_GetAccessListsRequest
            /// Response type for "GetAccessLists".
            internal typealias Output = Teleport_Accesslist_V1_GetAccessListsResponse
            /// Descriptor for "GetAccessLists".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "GetAccessLists"
            )
        }
        /// Namespace for "ListAccessLists" metadata.
        internal enum ListAccessLists {
            /// Request type for "ListAccessLists".
            internal typealias Input = Teleport_Accesslist_V1_ListAccessListsRequest
            /// Response type for "ListAccessLists".
            internal typealias Output = Teleport_Accesslist_V1_ListAccessListsResponse
            /// Descriptor for "ListAccessLists".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "ListAccessLists"
            )
        }
        /// Namespace for "GetAccessList" metadata.
        internal enum GetAccessList {
            /// Request type for "GetAccessList".
            internal typealias Input = Teleport_Accesslist_V1_GetAccessListRequest
            /// Response type for "GetAccessList".
            internal typealias Output = Teleport_Accesslist_V1_AccessList
            /// Descriptor for "GetAccessList".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "GetAccessList"
            )
        }
        /// Namespace for "UpsertAccessList" metadata.
        internal enum UpsertAccessList {
            /// Request type for "UpsertAccessList".
            internal typealias Input = Teleport_Accesslist_V1_UpsertAccessListRequest
            /// Response type for "UpsertAccessList".
            internal typealias Output = Teleport_Accesslist_V1_AccessList
            /// Descriptor for "UpsertAccessList".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "UpsertAccessList"
            )
        }
        /// Namespace for "UpdateAccessList" metadata.
        internal enum UpdateAccessList {
            /// Request type for "UpdateAccessList".
            internal typealias Input = Teleport_Accesslist_V1_UpdateAccessListRequest
            /// Response type for "UpdateAccessList".
            internal typealias Output = Teleport_Accesslist_V1_AccessList
            /// Descriptor for "UpdateAccessList".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "UpdateAccessList"
            )
        }
        /// Namespace for "DeleteAccessList" metadata.
        internal enum DeleteAccessList {
            /// Request type for "DeleteAccessList".
            internal typealias Input = Teleport_Accesslist_V1_DeleteAccessListRequest
            /// Response type for "DeleteAccessList".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteAccessList".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "DeleteAccessList"
            )
        }
        /// Namespace for "DeleteAllAccessLists" metadata.
        internal enum DeleteAllAccessLists {
            /// Request type for "DeleteAllAccessLists".
            internal typealias Input = Teleport_Accesslist_V1_DeleteAllAccessListsRequest
            /// Response type for "DeleteAllAccessLists".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteAllAccessLists".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "DeleteAllAccessLists"
            )
        }
        /// Namespace for "GetAccessListsToReview" metadata.
        internal enum GetAccessListsToReview {
            /// Request type for "GetAccessListsToReview".
            internal typealias Input = Teleport_Accesslist_V1_GetAccessListsToReviewRequest
            /// Response type for "GetAccessListsToReview".
            internal typealias Output = Teleport_Accesslist_V1_GetAccessListsToReviewResponse
            /// Descriptor for "GetAccessListsToReview".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "GetAccessListsToReview"
            )
        }
        /// Namespace for "CountAccessListMembers" metadata.
        internal enum CountAccessListMembers {
            /// Request type for "CountAccessListMembers".
            internal typealias Input = Teleport_Accesslist_V1_CountAccessListMembersRequest
            /// Response type for "CountAccessListMembers".
            internal typealias Output = Teleport_Accesslist_V1_CountAccessListMembersResponse
            /// Descriptor for "CountAccessListMembers".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "CountAccessListMembers"
            )
        }
        /// Namespace for "ListAccessListMembers" metadata.
        internal enum ListAccessListMembers {
            /// Request type for "ListAccessListMembers".
            internal typealias Input = Teleport_Accesslist_V1_ListAccessListMembersRequest
            /// Response type for "ListAccessListMembers".
            internal typealias Output = Teleport_Accesslist_V1_ListAccessListMembersResponse
            /// Descriptor for "ListAccessListMembers".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "ListAccessListMembers"
            )
        }
        /// Namespace for "ListAllAccessListMembers" metadata.
        internal enum ListAllAccessListMembers {
            /// Request type for "ListAllAccessListMembers".
            internal typealias Input = Teleport_Accesslist_V1_ListAllAccessListMembersRequest
            /// Response type for "ListAllAccessListMembers".
            internal typealias Output = Teleport_Accesslist_V1_ListAllAccessListMembersResponse
            /// Descriptor for "ListAllAccessListMembers".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "ListAllAccessListMembers"
            )
        }
        /// Namespace for "GetAccessListMember" metadata.
        internal enum GetAccessListMember {
            /// Request type for "GetAccessListMember".
            internal typealias Input = Teleport_Accesslist_V1_GetAccessListMemberRequest
            /// Response type for "GetAccessListMember".
            internal typealias Output = Teleport_Accesslist_V1_Member
            /// Descriptor for "GetAccessListMember".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "GetAccessListMember"
            )
        }
        /// Namespace for "GetAccessListOwners" metadata.
        internal enum GetAccessListOwners {
            /// Request type for "GetAccessListOwners".
            internal typealias Input = Teleport_Accesslist_V1_GetAccessListOwnersRequest
            /// Response type for "GetAccessListOwners".
            internal typealias Output = Teleport_Accesslist_V1_GetAccessListOwnersResponse
            /// Descriptor for "GetAccessListOwners".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "GetAccessListOwners"
            )
        }
        /// Namespace for "UpsertAccessListMember" metadata.
        internal enum UpsertAccessListMember {
            /// Request type for "UpsertAccessListMember".
            internal typealias Input = Teleport_Accesslist_V1_UpsertAccessListMemberRequest
            /// Response type for "UpsertAccessListMember".
            internal typealias Output = Teleport_Accesslist_V1_Member
            /// Descriptor for "UpsertAccessListMember".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "UpsertAccessListMember"
            )
        }
        /// Namespace for "UpdateAccessListMember" metadata.
        internal enum UpdateAccessListMember {
            /// Request type for "UpdateAccessListMember".
            internal typealias Input = Teleport_Accesslist_V1_UpdateAccessListMemberRequest
            /// Response type for "UpdateAccessListMember".
            internal typealias Output = Teleport_Accesslist_V1_Member
            /// Descriptor for "UpdateAccessListMember".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "UpdateAccessListMember"
            )
        }
        /// Namespace for "DeleteAccessListMember" metadata.
        internal enum DeleteAccessListMember {
            /// Request type for "DeleteAccessListMember".
            internal typealias Input = Teleport_Accesslist_V1_DeleteAccessListMemberRequest
            /// Response type for "DeleteAccessListMember".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteAccessListMember".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "DeleteAccessListMember"
            )
        }
        /// Namespace for "DeleteAllAccessListMembersForAccessList" metadata.
        internal enum DeleteAllAccessListMembersForAccessList {
            /// Request type for "DeleteAllAccessListMembersForAccessList".
            internal typealias Input = Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest
            /// Response type for "DeleteAllAccessListMembersForAccessList".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteAllAccessListMembersForAccessList".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "DeleteAllAccessListMembersForAccessList"
            )
        }
        /// Namespace for "DeleteAllAccessListMembers" metadata.
        internal enum DeleteAllAccessListMembers {
            /// Request type for "DeleteAllAccessListMembers".
            internal typealias Input = Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest
            /// Response type for "DeleteAllAccessListMembers".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteAllAccessListMembers".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "DeleteAllAccessListMembers"
            )
        }
        /// Namespace for "UpsertAccessListWithMembers" metadata.
        internal enum UpsertAccessListWithMembers {
            /// Request type for "UpsertAccessListWithMembers".
            internal typealias Input = Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest
            /// Response type for "UpsertAccessListWithMembers".
            internal typealias Output = Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse
            /// Descriptor for "UpsertAccessListWithMembers".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "UpsertAccessListWithMembers"
            )
        }
        /// Namespace for "ListAccessListReviews" metadata.
        internal enum ListAccessListReviews {
            /// Request type for "ListAccessListReviews".
            internal typealias Input = Teleport_Accesslist_V1_ListAccessListReviewsRequest
            /// Response type for "ListAccessListReviews".
            internal typealias Output = Teleport_Accesslist_V1_ListAccessListReviewsResponse
            /// Descriptor for "ListAccessListReviews".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "ListAccessListReviews"
            )
        }
        /// Namespace for "ListAllAccessListReviews" metadata.
        internal enum ListAllAccessListReviews {
            /// Request type for "ListAllAccessListReviews".
            internal typealias Input = Teleport_Accesslist_V1_ListAllAccessListReviewsRequest
            /// Response type for "ListAllAccessListReviews".
            internal typealias Output = Teleport_Accesslist_V1_ListAllAccessListReviewsResponse
            /// Descriptor for "ListAllAccessListReviews".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "ListAllAccessListReviews"
            )
        }
        /// Namespace for "CreateAccessListReview" metadata.
        internal enum CreateAccessListReview {
            /// Request type for "CreateAccessListReview".
            internal typealias Input = Teleport_Accesslist_V1_CreateAccessListReviewRequest
            /// Response type for "CreateAccessListReview".
            internal typealias Output = Teleport_Accesslist_V1_CreateAccessListReviewResponse
            /// Descriptor for "CreateAccessListReview".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "CreateAccessListReview"
            )
        }
        /// Namespace for "DeleteAccessListReview" metadata.
        internal enum DeleteAccessListReview {
            /// Request type for "DeleteAccessListReview".
            internal typealias Input = Teleport_Accesslist_V1_DeleteAccessListReviewRequest
            /// Response type for "DeleteAccessListReview".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteAccessListReview".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "DeleteAccessListReview"
            )
        }
        /// Namespace for "AccessRequestPromote" metadata.
        internal enum AccessRequestPromote {
            /// Request type for "AccessRequestPromote".
            internal typealias Input = Teleport_Accesslist_V1_AccessRequestPromoteRequest
            /// Response type for "AccessRequestPromote".
            internal typealias Output = Teleport_Accesslist_V1_AccessRequestPromoteResponse
            /// Descriptor for "AccessRequestPromote".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "AccessRequestPromote"
            )
        }
        /// Namespace for "GetSuggestedAccessLists" metadata.
        internal enum GetSuggestedAccessLists {
            /// Request type for "GetSuggestedAccessLists".
            internal typealias Input = Teleport_Accesslist_V1_GetSuggestedAccessListsRequest
            /// Response type for "GetSuggestedAccessLists".
            internal typealias Output = Teleport_Accesslist_V1_GetSuggestedAccessListsResponse
            /// Descriptor for "GetSuggestedAccessLists".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "GetSuggestedAccessLists"
            )
        }
        /// Namespace for "GetInheritedGrants" metadata.
        internal enum GetInheritedGrants {
            /// Request type for "GetInheritedGrants".
            internal typealias Input = Teleport_Accesslist_V1_GetInheritedGrantsRequest
            /// Response type for "GetInheritedGrants".
            internal typealias Output = Teleport_Accesslist_V1_GetInheritedGrantsResponse
            /// Descriptor for "GetInheritedGrants".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService"),
                method: "GetInheritedGrants"
            )
        }
        /// Descriptors for all methods in the "teleport.accesslist.v1.AccessListService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetAccessLists.descriptor,
            ListAccessLists.descriptor,
            GetAccessList.descriptor,
            UpsertAccessList.descriptor,
            UpdateAccessList.descriptor,
            DeleteAccessList.descriptor,
            DeleteAllAccessLists.descriptor,
            GetAccessListsToReview.descriptor,
            CountAccessListMembers.descriptor,
            ListAccessListMembers.descriptor,
            ListAllAccessListMembers.descriptor,
            GetAccessListMember.descriptor,
            GetAccessListOwners.descriptor,
            UpsertAccessListMember.descriptor,
            UpdateAccessListMember.descriptor,
            DeleteAccessListMember.descriptor,
            DeleteAllAccessListMembersForAccessList.descriptor,
            DeleteAllAccessListMembers.descriptor,
            UpsertAccessListWithMembers.descriptor,
            ListAccessListReviews.descriptor,
            ListAllAccessListReviews.descriptor,
            CreateAccessListReview.descriptor,
            DeleteAccessListReview.descriptor,
            AccessRequestPromote.descriptor,
            GetSuggestedAccessLists.descriptor,
            GetInheritedGrants.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "teleport.accesslist.v1.AccessListService" service.
    internal static let teleport_accesslist_v1_AccessListService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.accesslist.v1.AccessListService")
}

// MARK: teleport.accesslist.v1.AccessListService (client)

extension Teleport_Accesslist_V1_AccessListService {
    /// Generated client protocol for the "teleport.accesslist.v1.AccessListService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AccessListService provides CRUD methods for Access List resources.
    internal protocol ClientProtocol: Sendable {
        /// Call the "GetAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessLists returns a list of all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetAccessListsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAccessLists returns a paginated list of all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAccessListsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessList returns the specified access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpsertAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertAccessList creates or updates an access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpsertAccessListRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func upsertAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpsertAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateAccessList updates an access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpdateAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpdateAccessListRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpdateAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessList hard deletes the specified access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAccessListRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAllAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAllAccessLists hard deletes all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAllAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAllAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAllAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAccessListsToReview" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessListsToReview will return access lists that need to be reviewed by
        /// > the current user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListsToReviewRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListsToReviewRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetAccessListsToReviewResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccessListsToReview<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsToReviewRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListsToReviewRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CountAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CountAccessListMembers returns the count of access list members in an
        /// > access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_CountAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_CountAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_CountAccessListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func countAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_CountAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_CountAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_CountAccessListMembersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CountAccessListMembersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAccessListMembers returns a paginated list of all access list members.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAccessListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAccessListMembersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListMembersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAllAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAllAccessListMembers returns a paginated list of all access list
        /// > members for all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAllAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAllAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAllAccessListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAllAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAllAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessListMember returns the specified access list member resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_Member` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_Member>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAccessListOwners" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessListOwners returns a list of all owners in an Access List,
        /// > including those inherited from nested Access Lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListOwnersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListOwnersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetAccessListOwnersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccessListOwners<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListOwnersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListOwnersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetAccessListOwnersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListOwnersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpsertAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertAccessListMember creates or updates an access list member resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpsertAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_Member` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func upsertAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpsertAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_Member>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateAccessListMember conditionally updates an access list member resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpdateAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpdateAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_Member` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpdateAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_Member>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessListMember hard deletes the specified access list member
        /// > resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAllAccessListMembersForAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAllAccessListMembers hard deletes all access list members for an
        /// > access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAllAccessListMembersForAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAllAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAllAccessListMembers hard deletes all access list members for an
        /// > access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAllAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpsertAccessListWithMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertAccessListWithMembers creates or updates an access list with members.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func upsertAccessListWithMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAccessListReviews" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAccessListReviews will list access list reviews for a particular access
        /// > list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListReviewsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAccessListReviewsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAccessListReviewsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAccessListReviews<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListReviewsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAccessListReviewsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAccessListReviewsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListReviewsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAllAccessListReviews" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAllAccessListReviews will list access list reviews for all access
        /// > lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAllAccessListReviewsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAllAccessListReviewsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAllAccessListReviewsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAllAccessListReviews<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListReviewsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAllAccessListReviewsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateAccessListReview" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateAccessListReview will create a new review for an access list. It will
        /// > also modify the original access list and its members depending on the
        /// > details of the review.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_CreateAccessListReviewRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_CreateAccessListReviewRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_CreateAccessListReviewResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createAccessListReview<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_CreateAccessListReviewRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_CreateAccessListReviewRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_CreateAccessListReviewResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CreateAccessListReviewResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAccessListReview" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessListReview will delete an access list review from the backend.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListReviewRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAccessListReviewRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAccessListReview<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListReviewRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAccessListReviewRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AccessRequestPromote" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AccessRequestPromote promotes an access request to an access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_AccessRequestPromoteRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_AccessRequestPromoteRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessRequestPromoteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func accessRequestPromote<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_AccessRequestPromoteRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_AccessRequestPromoteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessRequestPromoteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessRequestPromoteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetSuggestedAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSuggestedAccessLists returns suggested access lists for an access
        /// > request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetSuggestedAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetSuggestedAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetSuggestedAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getSuggestedAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetSuggestedAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetSuggestedAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetInheritedGrants" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetInheritedGrants returns the inherited grants for an access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetInheritedGrantsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetInheritedGrantsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetInheritedGrantsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getInheritedGrants<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetInheritedGrantsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetInheritedGrantsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetInheritedGrantsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetInheritedGrantsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "teleport.accesslist.v1.AccessListService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AccessListService provides CRUD methods for Access List resources.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessLists returns a list of all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetAccessListsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.GetAccessLists.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAccessLists returns a paginated list of all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAccessListsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.ListAccessLists.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessList returns the specified access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.GetAccessList.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpsertAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertAccessList creates or updates an access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpsertAccessListRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func upsertAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpsertAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.UpsertAccessList.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateAccessList updates an access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpdateAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpdateAccessListRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpdateAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.UpdateAccessList.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessList hard deletes the specified access list resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAccessListRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.DeleteAccessList.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAllAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAllAccessLists hard deletes all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAllAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteAllAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAllAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.DeleteAllAccessLists.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAccessListsToReview" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessListsToReview will return access lists that need to be reviewed by
        /// > the current user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListsToReviewRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListsToReviewRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetAccessListsToReviewResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAccessListsToReview<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsToReviewRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListsToReviewRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.GetAccessListsToReview.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CountAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CountAccessListMembers returns the count of access list members in an
        /// > access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_CountAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_CountAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_CountAccessListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func countAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_CountAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_CountAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_CountAccessListMembersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CountAccessListMembersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.CountAccessListMembers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAccessListMembers returns a paginated list of all access list members.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAccessListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAccessListMembersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListMembersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.ListAccessListMembers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAllAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAllAccessListMembers returns a paginated list of all access list
        /// > members for all access lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAllAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAllAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAllAccessListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listAllAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAllAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.ListAllAccessListMembers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessListMember returns the specified access list member resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_Member` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_Member>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.GetAccessListMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAccessListOwners" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessListOwners returns a list of all owners in an Access List,
        /// > including those inherited from nested Access Lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListOwnersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetAccessListOwnersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetAccessListOwnersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAccessListOwners<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListOwnersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetAccessListOwnersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetAccessListOwnersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListOwnersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.GetAccessListOwners.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpsertAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertAccessListMember creates or updates an access list member resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpsertAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_Member` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func upsertAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpsertAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_Member>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.UpsertAccessListMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateAccessListMember conditionally updates an access list member resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpdateAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpdateAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_Member` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpdateAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_Member>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.UpdateAccessListMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAccessListMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessListMember hard deletes the specified access list member
        /// > resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListMemberRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAccessListMemberRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteAccessListMember<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAccessListMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.DeleteAccessListMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAllAccessListMembersForAccessList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAllAccessListMembers hard deletes all access list members for an
        /// > access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteAllAccessListMembersForAccessList<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.DeleteAllAccessListMembersForAccessList.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAllAccessListMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAllAccessListMembers hard deletes all access list members for an
        /// > access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteAllAccessListMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.DeleteAllAccessListMembers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpsertAccessListWithMembers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertAccessListWithMembers creates or updates an access list with members.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func upsertAccessListWithMembers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.UpsertAccessListWithMembers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAccessListReviews" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAccessListReviews will list access list reviews for a particular access
        /// > list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListReviewsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAccessListReviewsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAccessListReviewsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listAccessListReviews<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListReviewsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAccessListReviewsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAccessListReviewsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListReviewsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.ListAccessListReviews.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAllAccessListReviews" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListAllAccessListReviews will list access list reviews for all access
        /// > lists.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAllAccessListReviewsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_ListAllAccessListReviewsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_ListAllAccessListReviewsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listAllAccessListReviews<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListReviewsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_ListAllAccessListReviewsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.ListAllAccessListReviews.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateAccessListReview" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateAccessListReview will create a new review for an access list. It will
        /// > also modify the original access list and its members depending on the
        /// > details of the review.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_CreateAccessListReviewRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_CreateAccessListReviewRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_CreateAccessListReviewResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createAccessListReview<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_CreateAccessListReviewRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_CreateAccessListReviewRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_CreateAccessListReviewResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CreateAccessListReviewResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.CreateAccessListReview.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAccessListReview" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessListReview will delete an access list review from the backend.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListReviewRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_DeleteAccessListReviewRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteAccessListReview<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListReviewRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_DeleteAccessListReviewRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.DeleteAccessListReview.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AccessRequestPromote" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AccessRequestPromote promotes an access request to an access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_AccessRequestPromoteRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_AccessRequestPromoteRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_AccessRequestPromoteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func accessRequestPromote<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_AccessRequestPromoteRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_AccessRequestPromoteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_AccessRequestPromoteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessRequestPromoteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.AccessRequestPromote.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetSuggestedAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSuggestedAccessLists returns suggested access lists for an access
        /// > request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetSuggestedAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetSuggestedAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetSuggestedAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getSuggestedAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetSuggestedAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetSuggestedAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.GetSuggestedAccessLists.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetInheritedGrants" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetInheritedGrants returns the inherited grants for an access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Accesslist_V1_GetInheritedGrantsRequest` message.
        ///   - serializer: A serializer for `Teleport_Accesslist_V1_GetInheritedGrantsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Accesslist_V1_GetInheritedGrantsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getInheritedGrants<Result>(
            request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetInheritedGrantsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Accesslist_V1_GetInheritedGrantsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Accesslist_V1_GetInheritedGrantsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetInheritedGrantsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Accesslist_V1_AccessListService.Method.GetInheritedGrants.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Teleport_Accesslist_V1_AccessListService.ClientProtocol {
    /// Call the "GetAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessLists returns a list of all access lists.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessLists<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccessLists(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_GetAccessListsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_GetAccessListsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAccessLists returns a paginated list of all access lists.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAccessLists<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAccessLists(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_ListAccessListsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_ListAccessListsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessList returns the specified access list resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessList<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccessList(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_GetAccessListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_AccessList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertAccessList creates or updates an access list resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertAccessList<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.upsertAccessList(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_UpsertAccessListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_AccessList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateAccessList updates an access list resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_UpdateAccessListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateAccessList<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateAccessList(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_UpdateAccessListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_AccessList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessList hard deletes the specified access list resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessList<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAccessList(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_DeleteAccessListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAllAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAllAccessLists hard deletes all access lists.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAllAccessLists<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAllAccessLists(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_DeleteAllAccessListsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessListsToReview" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessListsToReview will return access lists that need to be reviewed by
    /// > the current user.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListsToReviewRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessListsToReview<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsToReviewRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccessListsToReview(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_GetAccessListsToReviewRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CountAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CountAccessListMembers returns the count of access list members in an
    /// > access list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_CountAccessListMembersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func countAccessListMembers<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_CountAccessListMembersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CountAccessListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.countAccessListMembers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_CountAccessListMembersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_CountAccessListMembersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAccessListMembers returns a paginated list of all access list members.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListMembersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAccessListMembers<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListMembersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAccessListMembers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_ListAccessListMembersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_ListAccessListMembersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAllAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAllAccessListMembers returns a paginated list of all access list
    /// > members for all access lists.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAllAccessListMembersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAllAccessListMembers<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListMembersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAllAccessListMembers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_ListAllAccessListMembersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessListMember returns the specified access list member resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessListMember<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccessListMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_GetAccessListMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_Member>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessListOwners" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessListOwners returns a list of all owners in an Access List,
    /// > including those inherited from nested Access Lists.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_GetAccessListOwnersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessListOwners<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListOwnersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListOwnersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccessListOwners(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_GetAccessListOwnersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_GetAccessListOwnersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertAccessListMember creates or updates an access list member resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertAccessListMember<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.upsertAccessListMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_UpsertAccessListMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_Member>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateAccessListMember conditionally updates an access list member resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_UpdateAccessListMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateAccessListMember<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateAccessListMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_UpdateAccessListMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_Member>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessListMember hard deletes the specified access list member
    /// > resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessListMember<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAccessListMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_DeleteAccessListMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAllAccessListMembersForAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAllAccessListMembers hard deletes all access list members for an
    /// > access list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAllAccessListMembersForAccessList<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAllAccessListMembersForAccessList(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAllAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAllAccessListMembers hard deletes all access list members for an
    /// > access list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAllAccessListMembers<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAllAccessListMembers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertAccessListWithMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertAccessListWithMembers creates or updates an access list with members.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertAccessListWithMembers<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.upsertAccessListWithMembers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAccessListReviews" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAccessListReviews will list access list reviews for a particular access
    /// > list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAccessListReviewsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAccessListReviews<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListReviewsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListReviewsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAccessListReviews(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_ListAccessListReviewsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_ListAccessListReviewsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAllAccessListReviews" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAllAccessListReviews will list access list reviews for all access
    /// > lists.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_ListAllAccessListReviewsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAllAccessListReviews<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListReviewsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAllAccessListReviews(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_ListAllAccessListReviewsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAccessListReview" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateAccessListReview will create a new review for an access list. It will
    /// > also modify the original access list and its members depending on the
    /// > details of the review.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_CreateAccessListReviewRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createAccessListReview<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_CreateAccessListReviewRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CreateAccessListReviewResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createAccessListReview(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_CreateAccessListReviewRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_CreateAccessListReviewResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessListReview" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessListReview will delete an access list review from the backend.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_DeleteAccessListReviewRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessListReview<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListReviewRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAccessListReview(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_DeleteAccessListReviewRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AccessRequestPromote" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AccessRequestPromote promotes an access request to an access list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_AccessRequestPromoteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func accessRequestPromote<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_AccessRequestPromoteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessRequestPromoteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.accessRequestPromote(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_AccessRequestPromoteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_AccessRequestPromoteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSuggestedAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSuggestedAccessLists returns suggested access lists for an access
    /// > request.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_GetSuggestedAccessListsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getSuggestedAccessLists<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetSuggestedAccessListsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getSuggestedAccessLists(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_GetSuggestedAccessListsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetInheritedGrants" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetInheritedGrants returns the inherited grants for an access list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Accesslist_V1_GetInheritedGrantsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getInheritedGrants<Result>(
        request: GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetInheritedGrantsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetInheritedGrantsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getInheritedGrants(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Accesslist_V1_GetInheritedGrantsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Accesslist_V1_GetInheritedGrantsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Teleport_Accesslist_V1_AccessListService.ClientProtocol {
    /// Call the "GetAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessLists returns a list of all access lists.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessLists<Result>(
        _ message: Teleport_Accesslist_V1_GetAccessListsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccessLists(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAccessLists returns a paginated list of all access lists.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAccessLists<Result>(
        _ message: Teleport_Accesslist_V1_ListAccessListsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAccessLists(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessList returns the specified access list resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessList<Result>(
        _ message: Teleport_Accesslist_V1_GetAccessListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccessList(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertAccessList creates or updates an access list resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertAccessList<Result>(
        _ message: Teleport_Accesslist_V1_UpsertAccessListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.upsertAccessList(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateAccessList updates an access list resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateAccessList<Result>(
        _ message: Teleport_Accesslist_V1_UpdateAccessListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateAccessList(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessList hard deletes the specified access list resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessList<Result>(
        _ message: Teleport_Accesslist_V1_DeleteAccessListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAccessList(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAllAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAllAccessLists hard deletes all access lists.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAllAccessLists<Result>(
        _ message: Teleport_Accesslist_V1_DeleteAllAccessListsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAllAccessLists(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessListsToReview" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessListsToReview will return access lists that need to be reviewed by
    /// > the current user.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessListsToReview<Result>(
        _ message: Teleport_Accesslist_V1_GetAccessListsToReviewRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListsToReviewRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccessListsToReview(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CountAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CountAccessListMembers returns the count of access list members in an
    /// > access list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func countAccessListMembers<Result>(
        _ message: Teleport_Accesslist_V1_CountAccessListMembersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CountAccessListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_CountAccessListMembersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.countAccessListMembers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAccessListMembers returns a paginated list of all access list members.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAccessListMembers<Result>(
        _ message: Teleport_Accesslist_V1_ListAccessListMembersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListMembersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAccessListMembers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAllAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAllAccessListMembers returns a paginated list of all access list
    /// > members for all access lists.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAllAccessListMembers<Result>(
        _ message: Teleport_Accesslist_V1_ListAllAccessListMembersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListMembersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAllAccessListMembers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessListMember returns the specified access list member resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessListMember<Result>(
        _ message: Teleport_Accesslist_V1_GetAccessListMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccessListMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessListOwners" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessListOwners returns a list of all owners in an Access List,
    /// > including those inherited from nested Access Lists.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessListOwners<Result>(
        _ message: Teleport_Accesslist_V1_GetAccessListOwnersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetAccessListOwnersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetAccessListOwnersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccessListOwners(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertAccessListMember creates or updates an access list member resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertAccessListMember<Result>(
        _ message: Teleport_Accesslist_V1_UpsertAccessListMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.upsertAccessListMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateAccessListMember conditionally updates an access list member resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateAccessListMember<Result>(
        _ message: Teleport_Accesslist_V1_UpdateAccessListMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_Member>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpdateAccessListMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateAccessListMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessListMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessListMember hard deletes the specified access list member
    /// > resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessListMember<Result>(
        _ message: Teleport_Accesslist_V1_DeleteAccessListMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAccessListMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAllAccessListMembersForAccessList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAllAccessListMembers hard deletes all access list members for an
    /// > access list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAllAccessListMembersForAccessList<Result>(
        _ message: Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAllAccessListMembersForAccessList(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAllAccessListMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAllAccessListMembers hard deletes all access list members for an
    /// > access list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAllAccessListMembers<Result>(
        _ message: Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAllAccessListMembers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertAccessListWithMembers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertAccessListWithMembers creates or updates an access list with members.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertAccessListWithMembers<Result>(
        _ message: Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.upsertAccessListWithMembers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAccessListReviews" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAccessListReviews will list access list reviews for a particular access
    /// > list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAccessListReviews<Result>(
        _ message: Teleport_Accesslist_V1_ListAccessListReviewsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAccessListReviewsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAccessListReviewsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAccessListReviews(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAllAccessListReviews" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListAllAccessListReviews will list access list reviews for all access
    /// > lists.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listAllAccessListReviews<Result>(
        _ message: Teleport_Accesslist_V1_ListAllAccessListReviewsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_ListAllAccessListReviewsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAllAccessListReviews(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAccessListReview" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateAccessListReview will create a new review for an access list. It will
    /// > also modify the original access list and its members depending on the
    /// > details of the review.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createAccessListReview<Result>(
        _ message: Teleport_Accesslist_V1_CreateAccessListReviewRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_CreateAccessListReviewResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_CreateAccessListReviewRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createAccessListReview(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessListReview" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessListReview will delete an access list review from the backend.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessListReview<Result>(
        _ message: Teleport_Accesslist_V1_DeleteAccessListReviewRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_DeleteAccessListReviewRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAccessListReview(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AccessRequestPromote" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AccessRequestPromote promotes an access request to an access list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func accessRequestPromote<Result>(
        _ message: Teleport_Accesslist_V1_AccessRequestPromoteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_AccessRequestPromoteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_AccessRequestPromoteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.accessRequestPromote(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSuggestedAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSuggestedAccessLists returns suggested access lists for an access
    /// > request.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getSuggestedAccessLists<Result>(
        _ message: Teleport_Accesslist_V1_GetSuggestedAccessListsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetSuggestedAccessListsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSuggestedAccessLists(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetInheritedGrants" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetInheritedGrants returns the inherited grants for an access list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getInheritedGrants<Result>(
        _ message: Teleport_Accesslist_V1_GetInheritedGrantsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Accesslist_V1_GetInheritedGrantsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Accesslist_V1_GetInheritedGrantsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getInheritedGrants(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}