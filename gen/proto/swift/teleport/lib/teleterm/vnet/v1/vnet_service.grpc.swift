// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: teleport/lib/teleterm/vnet/v1/vnet_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - teleport.lib.teleterm.vnet.v1.VnetService

/// Namespace containing generated types for the "teleport.lib.teleterm.vnet.v1.VnetService" service.
internal enum Teleport_Lib_Teleterm_Vnet_V1_VnetService {
    /// Service descriptor for the "teleport.lib.teleterm.vnet.v1.VnetService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.vnet.v1.VnetService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "Start" metadata.
        internal enum Start {
            /// Request type for "Start".
            internal typealias Input = Teleport_Lib_Teleterm_Vnet_V1_StartRequest
            /// Response type for "Start".
            internal typealias Output = Teleport_Lib_Teleterm_Vnet_V1_StartResponse
            /// Descriptor for "Start".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.vnet.v1.VnetService"),
                method: "Start"
            )
        }
        /// Namespace for "Stop" metadata.
        internal enum Stop {
            /// Request type for "Stop".
            internal typealias Input = Teleport_Lib_Teleterm_Vnet_V1_StopRequest
            /// Response type for "Stop".
            internal typealias Output = Teleport_Lib_Teleterm_Vnet_V1_StopResponse
            /// Descriptor for "Stop".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.vnet.v1.VnetService"),
                method: "Stop"
            )
        }
        /// Namespace for "ListDNSZones" metadata.
        internal enum ListDNSZones {
            /// Request type for "ListDNSZones".
            internal typealias Input = Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest
            /// Response type for "ListDNSZones".
            internal typealias Output = Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse
            /// Descriptor for "ListDNSZones".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.vnet.v1.VnetService"),
                method: "ListDNSZones"
            )
        }
        /// Namespace for "GetBackgroundItemStatus" metadata.
        internal enum GetBackgroundItemStatus {
            /// Request type for "GetBackgroundItemStatus".
            internal typealias Input = Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest
            /// Response type for "GetBackgroundItemStatus".
            internal typealias Output = Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse
            /// Descriptor for "GetBackgroundItemStatus".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.vnet.v1.VnetService"),
                method: "GetBackgroundItemStatus"
            )
        }
        /// Namespace for "RunDiagnostics" metadata.
        internal enum RunDiagnostics {
            /// Request type for "RunDiagnostics".
            internal typealias Input = Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest
            /// Response type for "RunDiagnostics".
            internal typealias Output = Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse
            /// Descriptor for "RunDiagnostics".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.vnet.v1.VnetService"),
                method: "RunDiagnostics"
            )
        }
        /// Descriptors for all methods in the "teleport.lib.teleterm.vnet.v1.VnetService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Start.descriptor,
            Stop.descriptor,
            ListDNSZones.descriptor,
            GetBackgroundItemStatus.descriptor,
            RunDiagnostics.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "teleport.lib.teleterm.vnet.v1.VnetService" service.
    internal static let teleport_lib_teleterm_vnet_v1_VnetService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.vnet.v1.VnetService")
}

// MARK: teleport.lib.teleterm.vnet.v1.VnetService (client)

extension Teleport_Lib_Teleterm_Vnet_V1_VnetService {
    /// Generated client protocol for the "teleport.lib.teleterm.vnet.v1.VnetService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > VnetService provides methods to manage a VNet instance.
    internal protocol ClientProtocol: Sendable {
        /// Call the "Start" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Start starts VNet.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_StartRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_StartRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_StartResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func start<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StartRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_StartRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_StartResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StartResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Stop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stop stops VNet.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_StopRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_StopRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_StopResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func stop<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StopRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_StopRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_StopResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StopResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDNSZones" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
        /// > includes the proxy service hostnames and custom DNS zones configured in vnet_config.
        /// > 
        /// > This is fetched independently of what the Electron app thinks the current state of the cluster
        /// > looks like, since the VNet admin process also fetches this data independently of the Electron
        /// > app.
        /// > 
        /// > Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
        /// > be fetched (due to e.g., a network error or an expired cert).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDNSZones<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetBackgroundItemStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetBackgroundItemStatus returns the status of the background item responsible for launching
        /// > VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getBackgroundItemStatus<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RunDiagnostics" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RunDiagnostics runs a set of heuristics to determine if VNet actually works on the device, that
        /// > is receives network traffic and DNS queries. RunDiagnostics requires VNet to be started.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func runDiagnostics<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "teleport.lib.teleterm.vnet.v1.VnetService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > VnetService provides methods to manage a VNet instance.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Start" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Start starts VNet.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_StartRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_StartRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_StartResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func start<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StartRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_StartRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_StartResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StartResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_Vnet_V1_VnetService.Method.Start.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Stop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stop stops VNet.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_StopRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_StopRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_StopResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func stop<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StopRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_StopRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_StopResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StopResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_Vnet_V1_VnetService.Method.Stop.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDNSZones" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
        /// > includes the proxy service hostnames and custom DNS zones configured in vnet_config.
        /// > 
        /// > This is fetched independently of what the Electron app thinks the current state of the cluster
        /// > looks like, since the VNet admin process also fetches this data independently of the Electron
        /// > app.
        /// > 
        /// > Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
        /// > be fetched (due to e.g., a network error or an expired cert).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listDNSZones<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_Vnet_V1_VnetService.Method.ListDNSZones.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetBackgroundItemStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetBackgroundItemStatus returns the status of the background item responsible for launching
        /// > VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getBackgroundItemStatus<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_Vnet_V1_VnetService.Method.GetBackgroundItemStatus.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RunDiagnostics" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RunDiagnostics runs a set of heuristics to determine if VNet actually works on the device, that
        /// > is receives network traffic and DNS queries. RunDiagnostics requires VNet to be started.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func runDiagnostics<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_Vnet_V1_VnetService.Method.RunDiagnostics.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Teleport_Lib_Teleterm_Vnet_V1_VnetService.ClientProtocol {
    /// Call the "Start" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Start starts VNet.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_StartRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func start<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StartRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StartResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.start(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_Vnet_V1_StartRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_Vnet_V1_StartResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Stop" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stop stops VNet.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_StopRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func stop<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StopRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StopResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.stop(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_Vnet_V1_StopRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_Vnet_V1_StopResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDNSZones" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
    /// > includes the proxy service hostnames and custom DNS zones configured in vnet_config.
    /// > 
    /// > This is fetched independently of what the Electron app thinks the current state of the cluster
    /// > looks like, since the VNet admin process also fetches this data independently of the Electron
    /// > app.
    /// > 
    /// > Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
    /// > be fetched (due to e.g., a network error or an expired cert).
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDNSZones<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDNSZones(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetBackgroundItemStatus" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetBackgroundItemStatus returns the status of the background item responsible for launching
    /// > VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getBackgroundItemStatus<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getBackgroundItemStatus(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunDiagnostics" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RunDiagnostics runs a set of heuristics to determine if VNet actually works on the device, that
    /// > is receives network traffic and DNS queries. RunDiagnostics requires VNet to be started.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func runDiagnostics<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.runDiagnostics(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Teleport_Lib_Teleterm_Vnet_V1_VnetService.ClientProtocol {
    /// Call the "Start" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Start starts VNet.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func start<Result>(
        _ message: Teleport_Lib_Teleterm_Vnet_V1_StartRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StartResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StartRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.start(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Stop" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stop stops VNet.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func stop<Result>(
        _ message: Teleport_Lib_Teleterm_Vnet_V1_StopRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_StopResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_StopRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.stop(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDNSZones" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
    /// > includes the proxy service hostnames and custom DNS zones configured in vnet_config.
    /// > 
    /// > This is fetched independently of what the Electron app thinks the current state of the cluster
    /// > looks like, since the VNet admin process also fetches this data independently of the Electron
    /// > app.
    /// > 
    /// > Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
    /// > be fetched (due to e.g., a network error or an expired cert).
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDNSZones<Result>(
        _ message: Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_ListDNSZonesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDNSZones(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetBackgroundItemStatus" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetBackgroundItemStatus returns the status of the background item responsible for launching
    /// > VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getBackgroundItemStatus<Result>(
        _ message: Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_GetBackgroundItemStatusRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getBackgroundItemStatus(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunDiagnostics" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RunDiagnostics runs a set of heuristics to determine if VNet actually works on the device, that
    /// > is receives network traffic and DNS queries. RunDiagnostics requires VNet to be started.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func runDiagnostics<Result>(
        _ message: Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_Vnet_V1_RunDiagnosticsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.runDiagnostics(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}