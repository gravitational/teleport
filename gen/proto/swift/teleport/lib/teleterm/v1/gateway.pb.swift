// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/lib/teleterm/v1/gateway.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Gateway is Teleterm's name for a connection to a resource like a database or a web app
/// established through our ALPN proxy.
///
/// The term "gateway" is used to avoid using the term "proxy" itself which could be confusing as
/// "proxy" means a couple of different things depending on the context. But for Teleterm, a gateway
/// is always an ALPN proxy connection.
///
/// See RFD 39 for more info on ALPN.
struct Teleport_Lib_Teleterm_V1_Gateway: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// uri is the gateway uri
  var uri: String = String()

  /// target_name is the target resource name
  var targetName: String = String()

  /// target_uri is the target uri
  var targetUri: String = String()

  /// target_user is the target user
  var targetUser: String = String()

  /// local_address is the gateway address on localhost
  var localAddress: String = String()

  /// local_port is the gateway address on localhost
  var localPort: String = String()

  /// protocol is the protocol used by the gateway. For databases, it matches the type of the
  /// database that the gateway targets. For apps, it's either "HTTP" or "TCP".
  var `protocol`: String = String()

  /// target_subresource_name points at a subresource of the remote resource, for example a
  /// database name on a database server or a target port of a multi-port TCP app.
  var targetSubresourceName: String = String()

  /// gateway_cli_client represents a command that the user can execute to connect to the resource
  /// through the gateway.
  ///
  /// Instead of generating those commands in in the frontend code, they are returned from the tsh
  /// daemon. This means that the Database Access team can add support for a new protocol and
  /// Connect will support it right away with no extra changes.
  var gatewayCliCommand: Teleport_Lib_Teleterm_V1_GatewayCLICommand {
    get {return _gatewayCliCommand ?? Teleport_Lib_Teleterm_V1_GatewayCLICommand()}
    set {_gatewayCliCommand = newValue}
  }
  /// Returns true if `gatewayCliCommand` has been explicitly set.
  var hasGatewayCliCommand: Bool {return self._gatewayCliCommand != nil}
  /// Clears the value of `gatewayCliCommand`. Subsequent reads from it will return its default value.
  mutating func clearGatewayCliCommand() {self._gatewayCliCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _gatewayCliCommand: Teleport_Lib_Teleterm_V1_GatewayCLICommand? = nil
}

/// GatewayCLICommand represents a command that the user can execute to connect to a gateway
/// resource. It is a combination of two different os/exec.Cmd structs, where path, args and env are
/// directly taken from one Cmd and the preview field is constructed from another Cmd.
struct Teleport_Lib_Teleterm_V1_GatewayCLICommand: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// path is the absolute path to the CLI client of a gateway if the client is
  /// in PATH. Otherwise, the name of the program we were trying to find.
  var path: String = String()

  /// args is a list containing the name of the program as the first element
  /// and the actual args as the other elements
  var args: [String] = []

  /// env is a list of env vars that need to be set for the command
  /// invocation. The elements of the list are in the format of NAME=value.
  var env: [String] = []

  /// preview is used to show the user what command will be executed before they decide to run it.
  /// It can also be copied and then pasted into a terminal.
  /// It's like os/exec.Cmd.String with two exceptions:
  ///
  /// 1) It is prepended with Cmd.Env.
  /// 2) The command name is relative and not absolute.
  /// 3) It is taken from a different Cmd than the other fields in this message. This Cmd uses a
  /// special print format which makes the args suitable to be entered into a terminal, but not to
  /// directly spawn a process.
  ///
  /// Should not be used to execute the command in the shell. Instead, use path, args, and env.
  var preview: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.lib.teleterm.v1"

extension Teleport_Lib_Teleterm_V1_Gateway: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Gateway"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .standard(proto: "target_name"),
    3: .standard(proto: "target_uri"),
    4: .standard(proto: "target_user"),
    5: .standard(proto: "local_address"),
    6: .standard(proto: "local_port"),
    7: .same(proto: "protocol"),
    9: .standard(proto: "target_subresource_name"),
    10: .standard(proto: "gateway_cli_command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.targetName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.targetUri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.targetUser) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.localAddress) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.localPort) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.`protocol`) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.targetSubresourceName) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._gatewayCliCommand) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.targetName.isEmpty {
      try visitor.visitSingularStringField(value: self.targetName, fieldNumber: 2)
    }
    if !self.targetUri.isEmpty {
      try visitor.visitSingularStringField(value: self.targetUri, fieldNumber: 3)
    }
    if !self.targetUser.isEmpty {
      try visitor.visitSingularStringField(value: self.targetUser, fieldNumber: 4)
    }
    if !self.localAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.localAddress, fieldNumber: 5)
    }
    if !self.localPort.isEmpty {
      try visitor.visitSingularStringField(value: self.localPort, fieldNumber: 6)
    }
    if !self.`protocol`.isEmpty {
      try visitor.visitSingularStringField(value: self.`protocol`, fieldNumber: 7)
    }
    if !self.targetSubresourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.targetSubresourceName, fieldNumber: 9)
    }
    try { if let v = self._gatewayCliCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Lib_Teleterm_V1_Gateway, rhs: Teleport_Lib_Teleterm_V1_Gateway) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.targetName != rhs.targetName {return false}
    if lhs.targetUri != rhs.targetUri {return false}
    if lhs.targetUser != rhs.targetUser {return false}
    if lhs.localAddress != rhs.localAddress {return false}
    if lhs.localPort != rhs.localPort {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.targetSubresourceName != rhs.targetSubresourceName {return false}
    if lhs._gatewayCliCommand != rhs._gatewayCliCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Lib_Teleterm_V1_GatewayCLICommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GatewayCLICommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "args"),
    3: .same(proto: "env"),
    4: .same(proto: "preview"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.args) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.env) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.preview) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 2)
    }
    if !self.env.isEmpty {
      try visitor.visitRepeatedStringField(value: self.env, fieldNumber: 3)
    }
    if !self.preview.isEmpty {
      try visitor.visitSingularStringField(value: self.preview, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Lib_Teleterm_V1_GatewayCLICommand, rhs: Teleport_Lib_Teleterm_V1_GatewayCLICommand) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.args != rhs.args {return false}
    if lhs.env != rhs.env {return false}
    if lhs.preview != rhs.preview {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
