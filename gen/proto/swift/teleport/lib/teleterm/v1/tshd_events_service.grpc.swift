//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: teleport/lib/teleterm/v1/tshd_events_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - teleport.lib.teleterm.v1.TshdEventsService

/// Namespace containing generated types for the "teleport.lib.teleterm.v1.TshdEventsService" service.
internal enum Teleport_Lib_Teleterm_V1_TshdEventsService {
    /// Service descriptor for the "teleport.lib.teleterm.v1.TshdEventsService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "Relogin" metadata.
        internal enum Relogin {
            /// Request type for "Relogin".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ReloginRequest
            /// Response type for "Relogin".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ReloginResponse
            /// Descriptor for "Relogin".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "Relogin"
            )
        }
        /// Namespace for "SendNotification" metadata.
        internal enum SendNotification {
            /// Request type for "SendNotification".
            internal typealias Input = Teleport_Lib_Teleterm_V1_SendNotificationRequest
            /// Response type for "SendNotification".
            internal typealias Output = Teleport_Lib_Teleterm_V1_SendNotificationResponse
            /// Descriptor for "SendNotification".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "SendNotification"
            )
        }
        /// Namespace for "SendPendingHeadlessAuthentication" metadata.
        internal enum SendPendingHeadlessAuthentication {
            /// Request type for "SendPendingHeadlessAuthentication".
            internal typealias Input = Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest
            /// Response type for "SendPendingHeadlessAuthentication".
            internal typealias Output = Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse
            /// Descriptor for "SendPendingHeadlessAuthentication".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "SendPendingHeadlessAuthentication"
            )
        }
        /// Namespace for "PromptMFA" metadata.
        internal enum PromptMFA {
            /// Request type for "PromptMFA".
            internal typealias Input = Teleport_Lib_Teleterm_V1_PromptMFARequest
            /// Response type for "PromptMFA".
            internal typealias Output = Teleport_Lib_Teleterm_V1_PromptMFAResponse
            /// Descriptor for "PromptMFA".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "PromptMFA"
            )
        }
        /// Namespace for "PromptHardwareKeyPIN" metadata.
        internal enum PromptHardwareKeyPIN {
            /// Request type for "PromptHardwareKeyPIN".
            internal typealias Input = Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest
            /// Response type for "PromptHardwareKeyPIN".
            internal typealias Output = Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse
            /// Descriptor for "PromptHardwareKeyPIN".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "PromptHardwareKeyPIN"
            )
        }
        /// Namespace for "PromptHardwareKeyTouch" metadata.
        internal enum PromptHardwareKeyTouch {
            /// Request type for "PromptHardwareKeyTouch".
            internal typealias Input = Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest
            /// Response type for "PromptHardwareKeyTouch".
            internal typealias Output = Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse
            /// Descriptor for "PromptHardwareKeyTouch".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "PromptHardwareKeyTouch"
            )
        }
        /// Namespace for "PromptHardwareKeyPINChange" metadata.
        internal enum PromptHardwareKeyPINChange {
            /// Request type for "PromptHardwareKeyPINChange".
            internal typealias Input = Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest
            /// Response type for "PromptHardwareKeyPINChange".
            internal typealias Output = Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse
            /// Descriptor for "PromptHardwareKeyPINChange".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "PromptHardwareKeyPINChange"
            )
        }
        /// Namespace for "ConfirmHardwareKeySlotOverwrite" metadata.
        internal enum ConfirmHardwareKeySlotOverwrite {
            /// Request type for "ConfirmHardwareKeySlotOverwrite".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest
            /// Response type for "ConfirmHardwareKeySlotOverwrite".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse
            /// Descriptor for "ConfirmHardwareKeySlotOverwrite".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "ConfirmHardwareKeySlotOverwrite"
            )
        }
        /// Namespace for "GetUsageReportingSettings" metadata.
        internal enum GetUsageReportingSettings {
            /// Request type for "GetUsageReportingSettings".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest
            /// Response type for "GetUsageReportingSettings".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse
            /// Descriptor for "GetUsageReportingSettings".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "GetUsageReportingSettings"
            )
        }
        /// Namespace for "ReportUnexpectedVnetShutdown" metadata.
        internal enum ReportUnexpectedVnetShutdown {
            /// Request type for "ReportUnexpectedVnetShutdown".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest
            /// Response type for "ReportUnexpectedVnetShutdown".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse
            /// Descriptor for "ReportUnexpectedVnetShutdown".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService"),
                method: "ReportUnexpectedVnetShutdown"
            )
        }
        /// Descriptors for all methods in the "teleport.lib.teleterm.v1.TshdEventsService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Relogin.descriptor,
            SendNotification.descriptor,
            SendPendingHeadlessAuthentication.descriptor,
            PromptMFA.descriptor,
            PromptHardwareKeyPIN.descriptor,
            PromptHardwareKeyTouch.descriptor,
            PromptHardwareKeyPINChange.descriptor,
            ConfirmHardwareKeySlotOverwrite.descriptor,
            GetUsageReportingSettings.descriptor,
            ReportUnexpectedVnetShutdown.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "teleport.lib.teleterm.v1.TshdEventsService" service.
    internal static let teleport_lib_teleterm_v1_TshdEventsService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TshdEventsService")
}

// MARK: teleport.lib.teleterm.v1.TshdEventsService (client)

extension Teleport_Lib_Teleterm_V1_TshdEventsService {
    /// Generated client protocol for the "teleport.lib.teleterm.v1.TshdEventsService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TshdEventsService is served by the Electron app. The tsh daemon calls this service to notify the
    /// > app about actions that happen outside of the app itself.
    internal protocol ClientProtocol: Sendable {
        /// Call the "Relogin" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Relogin makes the Electron app display a login modal for the specific root cluster. The request
        /// > returns a response after the relogin procedure has been successfully finished.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReloginRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReloginRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ReloginResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func relogin<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReloginRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReloginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ReloginResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReloginResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SendNotification" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SendNotification causes the Electron app to display a notification in the UI. The request
        /// > accepts a specific message rather than a generic string so that the Electron is in control as
        /// > to what message is displayed and how exactly it looks.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SendNotificationRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SendNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_SendNotificationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendNotification<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SendNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_SendNotificationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendNotificationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SendPendingHeadlessAuthentication" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SendPendingHeadlessAuthentication notifies the Electron app of a pending headless authentication,
        /// > which it can use to initiate headless authentication resolution in the UI.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendPendingHeadlessAuthentication<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PromptMFA" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptMFA notifies the Electron app that the daemon wants to prompt for MFA.
        /// > If TOTP is supported, the Electron app can return a totp code to complete the ceremony.
        /// > If Webauthn or SSO are supported, tsh daemon waits for the Electron App to choose
        /// > an option in the response before prompting for either.
        /// > 
        /// > In order for the WebAuthn and SSO prompts to be reflected in the Electron App, the
        /// > Electron app can display a waiting screen and listen for the tsh daemon to send a
        /// > notification to close the screen.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptMFARequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptMFARequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptMFAResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func promptMFA<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptMFARequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptMFARequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptMFAResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptMFAResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PromptHardwareKeyPIN" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptHardwareKeyPIN notifies the Electron app that the daemon is waiting for the user to
        /// > provide the hardware key PIN.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func promptHardwareKeyPIN<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PromptHardwareKeyTouch" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptHardwareKeyTouch notifies the Electron app that the daemon is waiting for the user to touch the hardware key.
        /// > When the daemon detects the touch, it cancels the prompt.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func promptHardwareKeyTouch<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PromptHardwareKeyPINChange" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptHardwareKeyPINChange notifies the Electron app that the daemon is waiting for the user to
        /// > change the hardware key PIN.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func promptHardwareKeyPINChange<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ConfirmHardwareKeySlotOverwrite" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ConfirmHardwareKeySlotOverwrite displays a dialog prompting the user to confirm whether
        /// > the slot's private key and certificate should be overwritten.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func confirmHardwareKeySlotOverwrite<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUsageReportingSettings" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetUsageReportingSettings returns the current state of usage reporting.
        /// > At the moment, the user cannot toggle usage reporting on and off without shutting down the app,
        /// > with the only exception being the first start of the app when they're prompted about telemetry.
        /// > Hence why this is an RPC and not information passed over argv to tsh daemon.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUsageReportingSettings<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ReportUnexpectedVnetShutdown" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ReportUnexpectedVnetShutdown is sent by tsh daemon when VNet exits outside of the
        /// > request-response cycle of Start and Stop RPCs of VnetService. The Electron app is then able to
        /// > update the state of VNet in the UI.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func reportUnexpectedVnetShutdown<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "teleport.lib.teleterm.v1.TshdEventsService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TshdEventsService is served by the Electron app. The tsh daemon calls this service to notify the
    /// > app about actions that happen outside of the app itself.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Relogin" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Relogin makes the Electron app display a login modal for the specific root cluster. The request
        /// > returns a response after the relogin procedure has been successfully finished.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReloginRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReloginRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ReloginResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func relogin<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReloginRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReloginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ReloginResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReloginResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.Relogin.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SendNotification" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SendNotification causes the Electron app to display a notification in the UI. The request
        /// > accepts a specific message rather than a generic string so that the Electron is in control as
        /// > to what message is displayed and how exactly it looks.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SendNotificationRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SendNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_SendNotificationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendNotification<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SendNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_SendNotificationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendNotificationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.SendNotification.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SendPendingHeadlessAuthentication" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SendPendingHeadlessAuthentication notifies the Electron app of a pending headless authentication,
        /// > which it can use to initiate headless authentication resolution in the UI.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendPendingHeadlessAuthentication<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.SendPendingHeadlessAuthentication.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PromptMFA" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptMFA notifies the Electron app that the daemon wants to prompt for MFA.
        /// > If TOTP is supported, the Electron app can return a totp code to complete the ceremony.
        /// > If Webauthn or SSO are supported, tsh daemon waits for the Electron App to choose
        /// > an option in the response before prompting for either.
        /// > 
        /// > In order for the WebAuthn and SSO prompts to be reflected in the Electron App, the
        /// > Electron app can display a waiting screen and listen for the tsh daemon to send a
        /// > notification to close the screen.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptMFARequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptMFARequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptMFAResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func promptMFA<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptMFARequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptMFARequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptMFAResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptMFAResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.PromptMFA.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PromptHardwareKeyPIN" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptHardwareKeyPIN notifies the Electron app that the daemon is waiting for the user to
        /// > provide the hardware key PIN.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func promptHardwareKeyPIN<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.PromptHardwareKeyPIN.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PromptHardwareKeyTouch" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptHardwareKeyTouch notifies the Electron app that the daemon is waiting for the user to touch the hardware key.
        /// > When the daemon detects the touch, it cancels the prompt.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func promptHardwareKeyTouch<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.PromptHardwareKeyTouch.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PromptHardwareKeyPINChange" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromptHardwareKeyPINChange notifies the Electron app that the daemon is waiting for the user to
        /// > change the hardware key PIN.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func promptHardwareKeyPINChange<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.PromptHardwareKeyPINChange.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ConfirmHardwareKeySlotOverwrite" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ConfirmHardwareKeySlotOverwrite displays a dialog prompting the user to confirm whether
        /// > the slot's private key and certificate should be overwritten.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func confirmHardwareKeySlotOverwrite<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.ConfirmHardwareKeySlotOverwrite.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUsageReportingSettings" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetUsageReportingSettings returns the current state of usage reporting.
        /// > At the moment, the user cannot toggle usage reporting on and off without shutting down the app,
        /// > with the only exception being the first start of the app when they're prompted about telemetry.
        /// > Hence why this is an RPC and not information passed over argv to tsh daemon.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getUsageReportingSettings<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.GetUsageReportingSettings.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ReportUnexpectedVnetShutdown" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ReportUnexpectedVnetShutdown is sent by tsh daemon when VNet exits outside of the
        /// > request-response cycle of Start and Stop RPCs of VnetService. The Electron app is then able to
        /// > update the state of VNet in the UI.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func reportUnexpectedVnetShutdown<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TshdEventsService.Method.ReportUnexpectedVnetShutdown.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Teleport_Lib_Teleterm_V1_TshdEventsService.ClientProtocol {
    /// Call the "Relogin" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Relogin makes the Electron app display a login modal for the specific root cluster. The request
    /// > returns a response after the relogin procedure has been successfully finished.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReloginRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func relogin<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReloginRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReloginResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.relogin(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ReloginRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ReloginResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendNotification" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SendNotification causes the Electron app to display a notification in the UI. The request
    /// > accepts a specific message rather than a generic string so that the Electron is in control as
    /// > to what message is displayed and how exactly it looks.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SendNotificationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendNotification<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendNotificationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendNotificationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendNotification(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_SendNotificationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_SendNotificationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendPendingHeadlessAuthentication" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SendPendingHeadlessAuthentication notifies the Electron app of a pending headless authentication,
    /// > which it can use to initiate headless authentication resolution in the UI.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendPendingHeadlessAuthentication<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendPendingHeadlessAuthentication(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptMFA" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptMFA notifies the Electron app that the daemon wants to prompt for MFA.
    /// > If TOTP is supported, the Electron app can return a totp code to complete the ceremony.
    /// > If Webauthn or SSO are supported, tsh daemon waits for the Electron App to choose
    /// > an option in the response before prompting for either.
    /// > 
    /// > In order for the WebAuthn and SSO prompts to be reflected in the Electron App, the
    /// > Electron app can display a waiting screen and listen for the tsh daemon to send a
    /// > notification to close the screen.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptMFARequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptMFA<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptMFARequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptMFAResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.promptMFA(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_PromptMFARequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_PromptMFAResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptHardwareKeyPIN" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptHardwareKeyPIN notifies the Electron app that the daemon is waiting for the user to
    /// > provide the hardware key PIN.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptHardwareKeyPIN<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.promptHardwareKeyPIN(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptHardwareKeyTouch" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptHardwareKeyTouch notifies the Electron app that the daemon is waiting for the user to touch the hardware key.
    /// > When the daemon detects the touch, it cancels the prompt.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptHardwareKeyTouch<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.promptHardwareKeyTouch(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptHardwareKeyPINChange" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptHardwareKeyPINChange notifies the Electron app that the daemon is waiting for the user to
    /// > change the hardware key PIN.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptHardwareKeyPINChange<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.promptHardwareKeyPINChange(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConfirmHardwareKeySlotOverwrite" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ConfirmHardwareKeySlotOverwrite displays a dialog prompting the user to confirm whether
    /// > the slot's private key and certificate should be overwritten.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func confirmHardwareKeySlotOverwrite<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.confirmHardwareKeySlotOverwrite(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUsageReportingSettings" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetUsageReportingSettings returns the current state of usage reporting.
    /// > At the moment, the user cannot toggle usage reporting on and off without shutting down the app,
    /// > with the only exception being the first start of the app when they're prompted about telemetry.
    /// > Hence why this is an RPC and not information passed over argv to tsh daemon.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUsageReportingSettings<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUsageReportingSettings(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReportUnexpectedVnetShutdown" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ReportUnexpectedVnetShutdown is sent by tsh daemon when VNet exits outside of the
    /// > request-response cycle of Start and Stop RPCs of VnetService. The Electron app is then able to
    /// > update the state of VNet in the UI.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reportUnexpectedVnetShutdown<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.reportUnexpectedVnetShutdown(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Teleport_Lib_Teleterm_V1_TshdEventsService.ClientProtocol {
    /// Call the "Relogin" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Relogin makes the Electron app display a login modal for the specific root cluster. The request
    /// > returns a response after the relogin procedure has been successfully finished.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func relogin<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ReloginRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReloginResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReloginRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.relogin(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendNotification" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SendNotification causes the Electron app to display a notification in the UI. The request
    /// > accepts a specific message rather than a generic string so that the Electron is in control as
    /// > to what message is displayed and how exactly it looks.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendNotification<Result>(
        _ message: Teleport_Lib_Teleterm_V1_SendNotificationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendNotificationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendNotificationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.sendNotification(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendPendingHeadlessAuthentication" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SendPendingHeadlessAuthentication notifies the Electron app of a pending headless authentication,
    /// > which it can use to initiate headless authentication resolution in the UI.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendPendingHeadlessAuthentication<Result>(
        _ message: Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SendPendingHeadlessAuthenticationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.sendPendingHeadlessAuthentication(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptMFA" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptMFA notifies the Electron app that the daemon wants to prompt for MFA.
    /// > If TOTP is supported, the Electron app can return a totp code to complete the ceremony.
    /// > If Webauthn or SSO are supported, tsh daemon waits for the Electron App to choose
    /// > an option in the response before prompting for either.
    /// > 
    /// > In order for the WebAuthn and SSO prompts to be reflected in the Electron App, the
    /// > Electron app can display a waiting screen and listen for the tsh daemon to send a
    /// > notification to close the screen.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptMFA<Result>(
        _ message: Teleport_Lib_Teleterm_V1_PromptMFARequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptMFAResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptMFARequest>(
            message: message,
            metadata: metadata
        )
        return try await self.promptMFA(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptHardwareKeyPIN" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptHardwareKeyPIN notifies the Electron app that the daemon is waiting for the user to
    /// > provide the hardware key PIN.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptHardwareKeyPIN<Result>(
        _ message: Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.promptHardwareKeyPIN(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptHardwareKeyTouch" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptHardwareKeyTouch notifies the Electron app that the daemon is waiting for the user to touch the hardware key.
    /// > When the daemon detects the touch, it cancels the prompt.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptHardwareKeyTouch<Result>(
        _ message: Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyTouchRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.promptHardwareKeyTouch(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromptHardwareKeyPINChange" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromptHardwareKeyPINChange notifies the Electron app that the daemon is waiting for the user to
    /// > change the hardware key PIN.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promptHardwareKeyPINChange<Result>(
        _ message: Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromptHardwareKeyPINChangeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.promptHardwareKeyPINChange(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConfirmHardwareKeySlotOverwrite" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ConfirmHardwareKeySlotOverwrite displays a dialog prompting the user to confirm whether
    /// > the slot's private key and certificate should be overwritten.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func confirmHardwareKeySlotOverwrite<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ConfirmHardwareKeySlotOverwriteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.confirmHardwareKeySlotOverwrite(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUsageReportingSettings" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetUsageReportingSettings returns the current state of usage reporting.
    /// > At the moment, the user cannot toggle usage reporting on and off without shutting down the app,
    /// > with the only exception being the first start of the app when they're prompted about telemetry.
    /// > Hence why this is an RPC and not information passed over argv to tsh daemon.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUsageReportingSettings<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUsageReportingSettingsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUsageReportingSettings(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReportUnexpectedVnetShutdown" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ReportUnexpectedVnetShutdown is sent by tsh daemon when VNet exits outside of the
    /// > request-response cycle of Start and Stop RPCs of VnetService. The Electron app is then able to
    /// > update the state of VNet in the UI.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reportUnexpectedVnetShutdown<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUnexpectedVnetShutdownRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.reportUnexpectedVnetShutdown(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}