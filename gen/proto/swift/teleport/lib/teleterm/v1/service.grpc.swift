//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: teleport/lib/teleterm/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - teleport.lib.teleterm.v1.TerminalService

/// Namespace containing generated types for the "teleport.lib.teleterm.v1.TerminalService" service.
internal enum Teleport_Lib_Teleterm_V1_TerminalService {
    /// Service descriptor for the "teleport.lib.teleterm.v1.TerminalService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "UpdateTshdEventsServerAddress" metadata.
        internal enum UpdateTshdEventsServerAddress {
            /// Request type for "UpdateTshdEventsServerAddress".
            internal typealias Input = Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest
            /// Response type for "UpdateTshdEventsServerAddress".
            internal typealias Output = Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse
            /// Descriptor for "UpdateTshdEventsServerAddress".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "UpdateTshdEventsServerAddress"
            )
        }
        /// Namespace for "ListRootClusters" metadata.
        internal enum ListRootClusters {
            /// Request type for "ListRootClusters".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ListClustersRequest
            /// Response type for "ListRootClusters".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ListClustersResponse
            /// Descriptor for "ListRootClusters".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ListRootClusters"
            )
        }
        /// Namespace for "ListLeafClusters" metadata.
        internal enum ListLeafClusters {
            /// Request type for "ListLeafClusters".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ListLeafClustersRequest
            /// Response type for "ListLeafClusters".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ListClustersResponse
            /// Descriptor for "ListLeafClusters".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ListLeafClusters"
            )
        }
        /// Namespace for "StartHeadlessWatcher" metadata.
        internal enum StartHeadlessWatcher {
            /// Request type for "StartHeadlessWatcher".
            internal typealias Input = Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest
            /// Response type for "StartHeadlessWatcher".
            internal typealias Output = Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse
            /// Descriptor for "StartHeadlessWatcher".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "StartHeadlessWatcher"
            )
        }
        /// Namespace for "ListDatabaseUsers" metadata.
        internal enum ListDatabaseUsers {
            /// Request type for "ListDatabaseUsers".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest
            /// Response type for "ListDatabaseUsers".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse
            /// Descriptor for "ListDatabaseUsers".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ListDatabaseUsers"
            )
        }
        /// Namespace for "GetServers" metadata.
        internal enum GetServers {
            /// Request type for "GetServers".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetServersRequest
            /// Response type for "GetServers".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetServersResponse
            /// Descriptor for "GetServers".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetServers"
            )
        }
        /// Namespace for "GetAccessRequests" metadata.
        internal enum GetAccessRequests {
            /// Request type for "GetAccessRequests".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest
            /// Response type for "GetAccessRequests".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse
            /// Descriptor for "GetAccessRequests".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetAccessRequests"
            )
        }
        /// Namespace for "GetAccessRequest" metadata.
        internal enum GetAccessRequest {
            /// Request type for "GetAccessRequest".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetAccessRequestRequest
            /// Response type for "GetAccessRequest".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetAccessRequestResponse
            /// Descriptor for "GetAccessRequest".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetAccessRequest"
            )
        }
        /// Namespace for "DeleteAccessRequest" metadata.
        internal enum DeleteAccessRequest {
            /// Request type for "DeleteAccessRequest".
            internal typealias Input = Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest
            /// Response type for "DeleteAccessRequest".
            internal typealias Output = Teleport_Lib_Teleterm_V1_EmptyResponse
            /// Descriptor for "DeleteAccessRequest".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "DeleteAccessRequest"
            )
        }
        /// Namespace for "CreateAccessRequest" metadata.
        internal enum CreateAccessRequest {
            /// Request type for "CreateAccessRequest".
            internal typealias Input = Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest
            /// Response type for "CreateAccessRequest".
            internal typealias Output = Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse
            /// Descriptor for "CreateAccessRequest".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "CreateAccessRequest"
            )
        }
        /// Namespace for "ReviewAccessRequest" metadata.
        internal enum ReviewAccessRequest {
            /// Request type for "ReviewAccessRequest".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest
            /// Response type for "ReviewAccessRequest".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse
            /// Descriptor for "ReviewAccessRequest".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ReviewAccessRequest"
            )
        }
        /// Namespace for "GetRequestableRoles" metadata.
        internal enum GetRequestableRoles {
            /// Request type for "GetRequestableRoles".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest
            /// Response type for "GetRequestableRoles".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse
            /// Descriptor for "GetRequestableRoles".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetRequestableRoles"
            )
        }
        /// Namespace for "AssumeRole" metadata.
        internal enum AssumeRole {
            /// Request type for "AssumeRole".
            internal typealias Input = Teleport_Lib_Teleterm_V1_AssumeRoleRequest
            /// Response type for "AssumeRole".
            internal typealias Output = Teleport_Lib_Teleterm_V1_EmptyResponse
            /// Descriptor for "AssumeRole".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "AssumeRole"
            )
        }
        /// Namespace for "PromoteAccessRequest" metadata.
        internal enum PromoteAccessRequest {
            /// Request type for "PromoteAccessRequest".
            internal typealias Input = Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest
            /// Response type for "PromoteAccessRequest".
            internal typealias Output = Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse
            /// Descriptor for "PromoteAccessRequest".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "PromoteAccessRequest"
            )
        }
        /// Namespace for "GetSuggestedAccessLists" metadata.
        internal enum GetSuggestedAccessLists {
            /// Request type for "GetSuggestedAccessLists".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest
            /// Response type for "GetSuggestedAccessLists".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse
            /// Descriptor for "GetSuggestedAccessLists".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetSuggestedAccessLists"
            )
        }
        /// Namespace for "ListKubernetesResources" metadata.
        internal enum ListKubernetesResources {
            /// Request type for "ListKubernetesResources".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest
            /// Response type for "ListKubernetesResources".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse
            /// Descriptor for "ListKubernetesResources".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ListKubernetesResources"
            )
        }
        /// Namespace for "AddCluster" metadata.
        internal enum AddCluster {
            /// Request type for "AddCluster".
            internal typealias Input = Teleport_Lib_Teleterm_V1_AddClusterRequest
            /// Response type for "AddCluster".
            internal typealias Output = Teleport_Lib_Teleterm_V1_Cluster
            /// Descriptor for "AddCluster".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "AddCluster"
            )
        }
        /// Namespace for "RemoveCluster" metadata.
        internal enum RemoveCluster {
            /// Request type for "RemoveCluster".
            internal typealias Input = Teleport_Lib_Teleterm_V1_RemoveClusterRequest
            /// Response type for "RemoveCluster".
            internal typealias Output = Teleport_Lib_Teleterm_V1_EmptyResponse
            /// Descriptor for "RemoveCluster".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "RemoveCluster"
            )
        }
        /// Namespace for "ListGateways" metadata.
        internal enum ListGateways {
            /// Request type for "ListGateways".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ListGatewaysRequest
            /// Response type for "ListGateways".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ListGatewaysResponse
            /// Descriptor for "ListGateways".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ListGateways"
            )
        }
        /// Namespace for "CreateGateway" metadata.
        internal enum CreateGateway {
            /// Request type for "CreateGateway".
            internal typealias Input = Teleport_Lib_Teleterm_V1_CreateGatewayRequest
            /// Response type for "CreateGateway".
            internal typealias Output = Teleport_Lib_Teleterm_V1_Gateway
            /// Descriptor for "CreateGateway".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "CreateGateway"
            )
        }
        /// Namespace for "RemoveGateway" metadata.
        internal enum RemoveGateway {
            /// Request type for "RemoveGateway".
            internal typealias Input = Teleport_Lib_Teleterm_V1_RemoveGatewayRequest
            /// Response type for "RemoveGateway".
            internal typealias Output = Teleport_Lib_Teleterm_V1_EmptyResponse
            /// Descriptor for "RemoveGateway".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "RemoveGateway"
            )
        }
        /// Namespace for "SetGatewayTargetSubresourceName" metadata.
        internal enum SetGatewayTargetSubresourceName {
            /// Request type for "SetGatewayTargetSubresourceName".
            internal typealias Input = Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest
            /// Response type for "SetGatewayTargetSubresourceName".
            internal typealias Output = Teleport_Lib_Teleterm_V1_Gateway
            /// Descriptor for "SetGatewayTargetSubresourceName".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "SetGatewayTargetSubresourceName"
            )
        }
        /// Namespace for "SetGatewayLocalPort" metadata.
        internal enum SetGatewayLocalPort {
            /// Request type for "SetGatewayLocalPort".
            internal typealias Input = Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest
            /// Response type for "SetGatewayLocalPort".
            internal typealias Output = Teleport_Lib_Teleterm_V1_Gateway
            /// Descriptor for "SetGatewayLocalPort".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "SetGatewayLocalPort"
            )
        }
        /// Namespace for "GetAuthSettings" metadata.
        internal enum GetAuthSettings {
            /// Request type for "GetAuthSettings".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest
            /// Response type for "GetAuthSettings".
            internal typealias Output = Teleport_Lib_Teleterm_V1_AuthSettings
            /// Descriptor for "GetAuthSettings".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetAuthSettings"
            )
        }
        /// Namespace for "GetCluster" metadata.
        internal enum GetCluster {
            /// Request type for "GetCluster".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetClusterRequest
            /// Response type for "GetCluster".
            internal typealias Output = Teleport_Lib_Teleterm_V1_Cluster
            /// Descriptor for "GetCluster".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetCluster"
            )
        }
        /// Namespace for "Login" metadata.
        internal enum Login {
            /// Request type for "Login".
            internal typealias Input = Teleport_Lib_Teleterm_V1_LoginRequest
            /// Response type for "Login".
            internal typealias Output = Teleport_Lib_Teleterm_V1_EmptyResponse
            /// Descriptor for "Login".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "Login"
            )
        }
        /// Namespace for "LoginPasswordless" metadata.
        internal enum LoginPasswordless {
            /// Request type for "LoginPasswordless".
            internal typealias Input = Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest
            /// Response type for "LoginPasswordless".
            internal typealias Output = Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse
            /// Descriptor for "LoginPasswordless".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "LoginPasswordless"
            )
        }
        /// Namespace for "Logout" metadata.
        internal enum Logout {
            /// Request type for "Logout".
            internal typealias Input = Teleport_Lib_Teleterm_V1_LogoutRequest
            /// Response type for "Logout".
            internal typealias Output = Teleport_Lib_Teleterm_V1_EmptyResponse
            /// Descriptor for "Logout".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "Logout"
            )
        }
        /// Namespace for "TransferFile" metadata.
        internal enum TransferFile {
            /// Request type for "TransferFile".
            internal typealias Input = Teleport_Lib_Teleterm_V1_FileTransferRequest
            /// Response type for "TransferFile".
            internal typealias Output = Teleport_Lib_Teleterm_V1_FileTransferProgress
            /// Descriptor for "TransferFile".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "TransferFile"
            )
        }
        /// Namespace for "ReportUsageEvent" metadata.
        internal enum ReportUsageEvent {
            /// Request type for "ReportUsageEvent".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ReportUsageEventRequest
            /// Response type for "ReportUsageEvent".
            internal typealias Output = Teleport_Lib_Teleterm_V1_EmptyResponse
            /// Descriptor for "ReportUsageEvent".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ReportUsageEvent"
            )
        }
        /// Namespace for "UpdateHeadlessAuthenticationState" metadata.
        internal enum UpdateHeadlessAuthenticationState {
            /// Request type for "UpdateHeadlessAuthenticationState".
            internal typealias Input = Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest
            /// Response type for "UpdateHeadlessAuthenticationState".
            internal typealias Output = Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse
            /// Descriptor for "UpdateHeadlessAuthenticationState".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "UpdateHeadlessAuthenticationState"
            )
        }
        /// Namespace for "CreateConnectMyComputerRole" metadata.
        internal enum CreateConnectMyComputerRole {
            /// Request type for "CreateConnectMyComputerRole".
            internal typealias Input = Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest
            /// Response type for "CreateConnectMyComputerRole".
            internal typealias Output = Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse
            /// Descriptor for "CreateConnectMyComputerRole".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "CreateConnectMyComputerRole"
            )
        }
        /// Namespace for "CreateConnectMyComputerNodeToken" metadata.
        internal enum CreateConnectMyComputerNodeToken {
            /// Request type for "CreateConnectMyComputerNodeToken".
            internal typealias Input = Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest
            /// Response type for "CreateConnectMyComputerNodeToken".
            internal typealias Output = Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse
            /// Descriptor for "CreateConnectMyComputerNodeToken".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "CreateConnectMyComputerNodeToken"
            )
        }
        /// Namespace for "WaitForConnectMyComputerNodeJoin" metadata.
        internal enum WaitForConnectMyComputerNodeJoin {
            /// Request type for "WaitForConnectMyComputerNodeJoin".
            internal typealias Input = Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest
            /// Response type for "WaitForConnectMyComputerNodeJoin".
            internal typealias Output = Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse
            /// Descriptor for "WaitForConnectMyComputerNodeJoin".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "WaitForConnectMyComputerNodeJoin"
            )
        }
        /// Namespace for "DeleteConnectMyComputerNode" metadata.
        internal enum DeleteConnectMyComputerNode {
            /// Request type for "DeleteConnectMyComputerNode".
            internal typealias Input = Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest
            /// Response type for "DeleteConnectMyComputerNode".
            internal typealias Output = Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse
            /// Descriptor for "DeleteConnectMyComputerNode".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "DeleteConnectMyComputerNode"
            )
        }
        /// Namespace for "GetConnectMyComputerNodeName" metadata.
        internal enum GetConnectMyComputerNodeName {
            /// Request type for "GetConnectMyComputerNodeName".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest
            /// Response type for "GetConnectMyComputerNodeName".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse
            /// Descriptor for "GetConnectMyComputerNodeName".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetConnectMyComputerNodeName"
            )
        }
        /// Namespace for "ListUnifiedResources" metadata.
        internal enum ListUnifiedResources {
            /// Request type for "ListUnifiedResources".
            internal typealias Input = Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest
            /// Response type for "ListUnifiedResources".
            internal typealias Output = Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse
            /// Descriptor for "ListUnifiedResources".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "ListUnifiedResources"
            )
        }
        /// Namespace for "GetUserPreferences" metadata.
        internal enum GetUserPreferences {
            /// Request type for "GetUserPreferences".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest
            /// Response type for "GetUserPreferences".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse
            /// Descriptor for "GetUserPreferences".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetUserPreferences"
            )
        }
        /// Namespace for "UpdateUserPreferences" metadata.
        internal enum UpdateUserPreferences {
            /// Request type for "UpdateUserPreferences".
            internal typealias Input = Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest
            /// Response type for "UpdateUserPreferences".
            internal typealias Output = Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse
            /// Descriptor for "UpdateUserPreferences".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "UpdateUserPreferences"
            )
        }
        /// Namespace for "AuthenticateWebDevice" metadata.
        internal enum AuthenticateWebDevice {
            /// Request type for "AuthenticateWebDevice".
            internal typealias Input = Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest
            /// Response type for "AuthenticateWebDevice".
            internal typealias Output = Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse
            /// Descriptor for "AuthenticateWebDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "AuthenticateWebDevice"
            )
        }
        /// Namespace for "GetApp" metadata.
        internal enum GetApp {
            /// Request type for "GetApp".
            internal typealias Input = Teleport_Lib_Teleterm_V1_GetAppRequest
            /// Response type for "GetApp".
            internal typealias Output = Teleport_Lib_Teleterm_V1_GetAppResponse
            /// Descriptor for "GetApp".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService"),
                method: "GetApp"
            )
        }
        /// Descriptors for all methods in the "teleport.lib.teleterm.v1.TerminalService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            UpdateTshdEventsServerAddress.descriptor,
            ListRootClusters.descriptor,
            ListLeafClusters.descriptor,
            StartHeadlessWatcher.descriptor,
            ListDatabaseUsers.descriptor,
            GetServers.descriptor,
            GetAccessRequests.descriptor,
            GetAccessRequest.descriptor,
            DeleteAccessRequest.descriptor,
            CreateAccessRequest.descriptor,
            ReviewAccessRequest.descriptor,
            GetRequestableRoles.descriptor,
            AssumeRole.descriptor,
            PromoteAccessRequest.descriptor,
            GetSuggestedAccessLists.descriptor,
            ListKubernetesResources.descriptor,
            AddCluster.descriptor,
            RemoveCluster.descriptor,
            ListGateways.descriptor,
            CreateGateway.descriptor,
            RemoveGateway.descriptor,
            SetGatewayTargetSubresourceName.descriptor,
            SetGatewayLocalPort.descriptor,
            GetAuthSettings.descriptor,
            GetCluster.descriptor,
            Login.descriptor,
            LoginPasswordless.descriptor,
            Logout.descriptor,
            TransferFile.descriptor,
            ReportUsageEvent.descriptor,
            UpdateHeadlessAuthenticationState.descriptor,
            CreateConnectMyComputerRole.descriptor,
            CreateConnectMyComputerNodeToken.descriptor,
            WaitForConnectMyComputerNodeJoin.descriptor,
            DeleteConnectMyComputerNode.descriptor,
            GetConnectMyComputerNodeName.descriptor,
            ListUnifiedResources.descriptor,
            GetUserPreferences.descriptor,
            UpdateUserPreferences.descriptor,
            AuthenticateWebDevice.descriptor,
            GetApp.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "teleport.lib.teleterm.v1.TerminalService" service.
    internal static let teleport_lib_teleterm_v1_TerminalService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.lib.teleterm.v1.TerminalService")
}

// MARK: teleport.lib.teleterm.v1.TerminalService (client)

extension Teleport_Lib_Teleterm_V1_TerminalService {
    /// Generated client protocol for the "teleport.lib.teleterm.v1.TerminalService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TerminalService is used by the Electron app to communicate with the tsh daemon.
    /// > 
    /// > While we aim to preserve backwards compatibility in order to satisfy CI checks and follow the
    /// > proto practices used within the company, this service is not guaranteed to be stable across
    /// > versions. The packaging process of Teleport Connect ensures that the server and the client use
    /// > the same version of the service.
    internal protocol ClientProtocol: Sendable {
        /// Call the "UpdateTshdEventsServerAddress" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
        /// > supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
        /// > before any other from this service.
        /// > 
        /// > The service is supposed to return a response from this call only after the client is ready.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateTshdEventsServerAddress<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListRootClusters" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListRootClusters lists root clusters
        /// > Does not include detailed cluster information that would require a network request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListClustersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListClustersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListClustersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listRootClusters<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListClustersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListClustersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListClustersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListLeafClusters" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListLeafClusters lists leaf clusters
        /// > Does not include detailed cluster information that would require a network request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListLeafClustersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListLeafClustersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListClustersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listLeafClusters<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListLeafClustersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListLeafClustersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListClustersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StartHeadlessWatcher" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StartHeadlessWatcher starts a headless watcher.
        /// > If the watcher is already running, it is restarted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func startHeadlessWatcher<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDatabaseUsers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDatabaseUsers lists allowed users for the given database based on the role set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDatabaseUsers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetServers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetServers returns filtered, sorted, and paginated servers
        /// > 
        /// > Deprecated: Use ListUnifiedResources instead.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetServersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetServersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetServersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getServers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetServersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetServersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetServersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetServersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAccessRequests" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessRequests lists filtered AccessRequests
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccessRequests<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessRequest retreives a single Access Request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessRequest deletes the access request by id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateAccessRequest creates an access request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ReviewAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ReviewAccessRequest submits a review for an Access Request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func reviewAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetRequestableRoles" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetRequestableRoles gets all requestable roles
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getRequestableRoles<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AssumeRole" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AssumeRole assumes the role of the given access request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AssumeRoleRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_AssumeRoleRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func assumeRole<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AssumeRoleRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_AssumeRoleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PromoteAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromoteAccessRequest promotes an access request to an access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func promoteAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetSuggestedAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSuggestedAccessLists returns suggested access lists for an access request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getSuggestedAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListKubernetesResources" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListKubernetesResourcesRequest defines a request to retrieve kube resources paginated.
        /// > Only one type of kube resource can be retrieved per request (eg: namespace, pods, secrets, etc.)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listKubernetesResources<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddCluster adds a cluster to profile
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AddClusterRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_AddClusterRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Cluster` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addCluster<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AddClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_AddClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Cluster>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveCluster removes a cluster from profile
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_RemoveClusterRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_RemoveClusterRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeCluster<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_RemoveClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListGateways" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListGateways lists gateways
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListGatewaysRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListGatewaysRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListGatewaysResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listGateways<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListGatewaysRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListGatewaysRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateGateway" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateGateway creates a gateway
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateGatewayRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateGatewayRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Gateway` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createGateway<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateGatewayRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateGatewayRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Gateway>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveGateway" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveGateway removes a gateway
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_RemoveGatewayRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_RemoveGatewayRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeGateway<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveGatewayRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_RemoveGatewayRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetGatewayTargetSubresourceName" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
        /// > and returns the updated version of gateway.Gateway.
        /// > 
        /// > In Connect this is used to update the db name of a db connection along with the CLI command.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Gateway` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setGatewayTargetSubresourceName<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Gateway>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetGatewayLocalPort" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
        /// > assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Gateway` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setGatewayLocalPort<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Gateway>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAuthSettings" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAuthSettings returns cluster auth settigns
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_AuthSettings` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAuthSettings<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_AuthSettings>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthSettings>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetCluster returns cluster. Makes a network request and includes detailed
        /// > information about enterprise features availabed on the connected auth server
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetClusterRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetClusterRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Cluster` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCluster<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Cluster>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Login" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Login logs in a user to a cluster
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_LoginRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_LoginRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func login<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LoginRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_LoginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "LoginPasswordless" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > LoginPasswordless logs in a user to a cluster passwordlessly.
        /// > 
        /// > The RPC is streaming both ways and the message sequence example for hardware keys are:
        /// > (-> means client-to-server, <- means server-to-client)
        /// > 
        /// > Hardware keys:
        /// > -> Init
        /// > <- Send PasswordlessPrompt enum TAP to choose a device
        /// > -> Receive TAP device response
        /// > <- Send PasswordlessPrompt enum PIN
        /// > -> Receive PIN response
        /// > <- Send PasswordlessPrompt enum RETAP to confirm
        /// > -> Receive RETAP device response
        /// > <- Send list of credentials (e.g. usernames) associated with device
        /// > -> Receive the index number associated with the selected credential in list
        /// > <- End
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest` messages.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func loginPasswordless<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Logout" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ClusterLogin logs out a user from cluster
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_LogoutRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_LogoutRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func logout<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LogoutRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_LogoutRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "TransferFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > TransferFile sends a request to download/upload a file
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_FileTransferRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_FileTransferRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_FileTransferProgress` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func transferFile<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_FileTransferRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_FileTransferRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_FileTransferProgress>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_FileTransferProgress>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ReportUsageEvent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReportUsageEventRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReportUsageEventRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func reportUsageEvent<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUsageEventRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReportUsageEventRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateHeadlessAuthenticationState" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
        /// > An MFA challenge will be prompted when approving a headless authentication.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateHeadlessAuthenticationState<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateConnectMyComputerRole" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateConnectMyComputerRole creates a role which allows access to nodes with the label
        /// > teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
        /// > the current system user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createConnectMyComputerRole<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateConnectMyComputerNodeToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createConnectMyComputerNodeToken<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "WaitForConnectMyComputerNodeJoin" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
        /// > that the Connect My Computer node for the particular cluster has joined the cluster (the
        /// > OpPut event).
        /// > 
        /// > This RPC times out by itself after a minute to prevent the request from hanging forever, in
        /// > case the client didn't set a deadline or doesn't abort the request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func waitForConnectMyComputerNodeJoin<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteConnectMyComputerNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteConnectMyComputerNode deletes the Connect My Computer node.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteConnectMyComputerNode<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetConnectMyComputerNodeName" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getConnectMyComputerNodeName<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListUnifiedResources" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listUnifiedResources<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
        /// > Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AuthenticateWebDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AuthenticateWebDevice blesses a web session with device trust by performing
        /// > the on-behalf-of device authentication ceremony.
        /// > 
        /// > See
        /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func authenticateWebDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetApp" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetApp returns details of an app resource. It does not include information about AWS roles and
        /// > FQDN.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAppRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAppRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetAppResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getApp<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetAppResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAppResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "teleport.lib.teleterm.v1.TerminalService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TerminalService is used by the Electron app to communicate with the tsh daemon.
    /// > 
    /// > While we aim to preserve backwards compatibility in order to satisfy CI checks and follow the
    /// > proto practices used within the company, this service is not guaranteed to be stable across
    /// > versions. The packaging process of Teleport Connect ensures that the server and the client use
    /// > the same version of the service.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "UpdateTshdEventsServerAddress" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
        /// > supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
        /// > before any other from this service.
        /// > 
        /// > The service is supposed to return a response from this call only after the client is ready.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateTshdEventsServerAddress<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.UpdateTshdEventsServerAddress.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListRootClusters" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListRootClusters lists root clusters
        /// > Does not include detailed cluster information that would require a network request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListClustersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListClustersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListClustersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listRootClusters<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListClustersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListClustersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListClustersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ListRootClusters.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListLeafClusters" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListLeafClusters lists leaf clusters
        /// > Does not include detailed cluster information that would require a network request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListLeafClustersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListLeafClustersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListClustersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listLeafClusters<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListLeafClustersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListLeafClustersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListClustersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ListLeafClusters.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StartHeadlessWatcher" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StartHeadlessWatcher starts a headless watcher.
        /// > If the watcher is already running, it is restarted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func startHeadlessWatcher<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.StartHeadlessWatcher.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDatabaseUsers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDatabaseUsers lists allowed users for the given database based on the role set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listDatabaseUsers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ListDatabaseUsers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetServers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetServers returns filtered, sorted, and paginated servers
        /// > 
        /// > Deprecated: Use ListUnifiedResources instead.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetServersRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetServersRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetServersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getServers<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetServersRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetServersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetServersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetServersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetServers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAccessRequests" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessRequests lists filtered AccessRequests
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAccessRequests<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetAccessRequests.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAccessRequest retreives a single Access Request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetAccessRequest.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteAccessRequest deletes the access request by id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.DeleteAccessRequest.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateAccessRequest creates an access request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.CreateAccessRequest.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ReviewAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ReviewAccessRequest submits a review for an Access Request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func reviewAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ReviewAccessRequest.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetRequestableRoles" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetRequestableRoles gets all requestable roles
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getRequestableRoles<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetRequestableRoles.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AssumeRole" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AssumeRole assumes the role of the given access request
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AssumeRoleRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_AssumeRoleRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func assumeRole<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AssumeRoleRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_AssumeRoleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.AssumeRole.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PromoteAccessRequest" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PromoteAccessRequest promotes an access request to an access list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func promoteAccessRequest<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.PromoteAccessRequest.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetSuggestedAccessLists" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSuggestedAccessLists returns suggested access lists for an access request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getSuggestedAccessLists<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetSuggestedAccessLists.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListKubernetesResources" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListKubernetesResourcesRequest defines a request to retrieve kube resources paginated.
        /// > Only one type of kube resource can be retrieved per request (eg: namespace, pods, secrets, etc.)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listKubernetesResources<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ListKubernetesResources.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddCluster adds a cluster to profile
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AddClusterRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_AddClusterRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Cluster` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func addCluster<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AddClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_AddClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Cluster>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.AddCluster.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveCluster removes a cluster from profile
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_RemoveClusterRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_RemoveClusterRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func removeCluster<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_RemoveClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.RemoveCluster.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListGateways" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListGateways lists gateways
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListGatewaysRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListGatewaysRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListGatewaysResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listGateways<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListGatewaysRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListGatewaysRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ListGateways.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateGateway" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateGateway creates a gateway
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateGatewayRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateGatewayRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Gateway` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createGateway<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateGatewayRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateGatewayRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Gateway>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.CreateGateway.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveGateway" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveGateway removes a gateway
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_RemoveGatewayRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_RemoveGatewayRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func removeGateway<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveGatewayRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_RemoveGatewayRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.RemoveGateway.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetGatewayTargetSubresourceName" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
        /// > and returns the updated version of gateway.Gateway.
        /// > 
        /// > In Connect this is used to update the db name of a db connection along with the CLI command.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Gateway` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func setGatewayTargetSubresourceName<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Gateway>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.SetGatewayTargetSubresourceName.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetGatewayLocalPort" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
        /// > assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Gateway` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func setGatewayLocalPort<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Gateway>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.SetGatewayLocalPort.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAuthSettings" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetAuthSettings returns cluster auth settigns
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_AuthSettings` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getAuthSettings<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_AuthSettings>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthSettings>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetAuthSettings.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetCluster returns cluster. Makes a network request and includes detailed
        /// > information about enterprise features availabed on the connected auth server
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetClusterRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetClusterRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_Cluster` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCluster<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_Cluster>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetCluster.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Login" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Login logs in a user to a cluster
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_LoginRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_LoginRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func login<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LoginRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_LoginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.Login.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "LoginPasswordless" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > LoginPasswordless logs in a user to a cluster passwordlessly.
        /// > 
        /// > The RPC is streaming both ways and the message sequence example for hardware keys are:
        /// > (-> means client-to-server, <- means server-to-client)
        /// > 
        /// > Hardware keys:
        /// > -> Init
        /// > <- Send PasswordlessPrompt enum TAP to choose a device
        /// > -> Receive TAP device response
        /// > <- Send PasswordlessPrompt enum PIN
        /// > -> Receive PIN response
        /// > <- Send PasswordlessPrompt enum RETAP to confirm
        /// > -> Receive RETAP device response
        /// > <- Send list of credentials (e.g. usernames) associated with device
        /// > -> Receive the index number associated with the selected credential in list
        /// > <- End
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest` messages.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func loginPasswordless<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.LoginPasswordless.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Logout" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ClusterLogin logs out a user from cluster
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_LogoutRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_LogoutRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func logout<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LogoutRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_LogoutRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.Logout.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "TransferFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > TransferFile sends a request to download/upload a file
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_FileTransferRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_FileTransferRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_FileTransferProgress` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func transferFile<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_FileTransferRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_FileTransferRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_FileTransferProgress>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_FileTransferProgress>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.TransferFile.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ReportUsageEvent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReportUsageEventRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ReportUsageEventRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_EmptyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func reportUsageEvent<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUsageEventRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ReportUsageEventRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ReportUsageEvent.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateHeadlessAuthenticationState" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
        /// > An MFA challenge will be prompted when approving a headless authentication.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateHeadlessAuthenticationState<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.UpdateHeadlessAuthenticationState.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateConnectMyComputerRole" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateConnectMyComputerRole creates a role which allows access to nodes with the label
        /// > teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
        /// > the current system user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createConnectMyComputerRole<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.CreateConnectMyComputerRole.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateConnectMyComputerNodeToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createConnectMyComputerNodeToken<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.CreateConnectMyComputerNodeToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "WaitForConnectMyComputerNodeJoin" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
        /// > that the Connect My Computer node for the particular cluster has joined the cluster (the
        /// > OpPut event).
        /// > 
        /// > This RPC times out by itself after a minute to prevent the request from hanging forever, in
        /// > case the client didn't set a deadline or doesn't abort the request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func waitForConnectMyComputerNodeJoin<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.WaitForConnectMyComputerNodeJoin.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteConnectMyComputerNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteConnectMyComputerNode deletes the Connect My Computer node.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteConnectMyComputerNode<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.DeleteConnectMyComputerNode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetConnectMyComputerNodeName" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getConnectMyComputerNodeName<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetConnectMyComputerNodeName.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListUnifiedResources" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listUnifiedResources<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.ListUnifiedResources.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetUserPreferences.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
        /// > Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.UpdateUserPreferences.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AuthenticateWebDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AuthenticateWebDevice blesses a web session with device trust by performing
        /// > the on-behalf-of device authentication ceremony.
        /// > 
        /// > See
        /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func authenticateWebDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.AuthenticateWebDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetApp" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetApp returns details of an app resource. It does not include information about AWS roles and
        /// > FQDN.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAppRequest` message.
        ///   - serializer: A serializer for `Teleport_Lib_Teleterm_V1_GetAppRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Lib_Teleterm_V1_GetAppResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getApp<Result>(
            request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Lib_Teleterm_V1_GetAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Lib_Teleterm_V1_GetAppResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAppResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Lib_Teleterm_V1_TerminalService.Method.GetApp.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Teleport_Lib_Teleterm_V1_TerminalService.ClientProtocol {
    /// Call the "UpdateTshdEventsServerAddress" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
    /// > supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
    /// > before any other from this service.
    /// > 
    /// > The service is supposed to return a response from this call only after the client is ready.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateTshdEventsServerAddress<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateTshdEventsServerAddress(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListRootClusters" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListRootClusters lists root clusters
    /// > Does not include detailed cluster information that would require a network request.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListClustersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listRootClusters<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListClustersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listRootClusters(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ListClustersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ListClustersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListLeafClusters" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListLeafClusters lists leaf clusters
    /// > Does not include detailed cluster information that would require a network request.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListLeafClustersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listLeafClusters<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListLeafClustersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listLeafClusters(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ListLeafClustersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ListClustersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartHeadlessWatcher" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StartHeadlessWatcher starts a headless watcher.
    /// > If the watcher is already running, it is restarted.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func startHeadlessWatcher<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.startHeadlessWatcher(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatabaseUsers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDatabaseUsers lists allowed users for the given database based on the role set.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDatabaseUsers<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDatabaseUsers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetServers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetServers returns filtered, sorted, and paginated servers
    /// > 
    /// > Deprecated: Use ListUnifiedResources instead.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetServersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getServers<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetServersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetServersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getServers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetServersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetServersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessRequests" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessRequests lists filtered AccessRequests
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessRequests<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccessRequests(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessRequest retreives a single Access Request
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAccessRequestRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessRequest<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccessRequest(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetAccessRequestRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessRequest deletes the access request by id
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessRequest<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAccessRequest(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateAccessRequest creates an access request
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createAccessRequest<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createAccessRequest(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReviewAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ReviewAccessRequest submits a review for an Access Request
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reviewAccessRequest<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.reviewAccessRequest(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRequestableRoles" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetRequestableRoles gets all requestable roles
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getRequestableRoles<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getRequestableRoles(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AssumeRole" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AssumeRole assumes the role of the given access request
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AssumeRoleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func assumeRole<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AssumeRoleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.assumeRole(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_AssumeRoleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromoteAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromoteAccessRequest promotes an access request to an access list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promoteAccessRequest<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.promoteAccessRequest(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSuggestedAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSuggestedAccessLists returns suggested access lists for an access request.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getSuggestedAccessLists<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getSuggestedAccessLists(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListKubernetesResources" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListKubernetesResourcesRequest defines a request to retrieve kube resources paginated.
    /// > Only one type of kube resource can be retrieved per request (eg: namespace, pods, secrets, etc.)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listKubernetesResources<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listKubernetesResources(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddCluster adds a cluster to profile
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AddClusterRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func addCluster<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AddClusterRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addCluster(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_AddClusterRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_Cluster>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveCluster removes a cluster from profile
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_RemoveClusterRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func removeCluster<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveClusterRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeCluster(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_RemoveClusterRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListGateways" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListGateways lists gateways
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListGatewaysRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listGateways<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListGatewaysRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listGateways(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ListGatewaysRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateGateway" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateGateway creates a gateway
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateGatewayRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createGateway<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateGatewayRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createGateway(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_CreateGatewayRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_Gateway>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveGateway" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveGateway removes a gateway
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_RemoveGatewayRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func removeGateway<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveGatewayRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeGateway(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_RemoveGatewayRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetGatewayTargetSubresourceName" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
    /// > and returns the updated version of gateway.Gateway.
    /// > 
    /// > In Connect this is used to update the db name of a db connection along with the CLI command.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func setGatewayTargetSubresourceName<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setGatewayTargetSubresourceName(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_Gateway>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetGatewayLocalPort" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
    /// > assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func setGatewayLocalPort<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setGatewayLocalPort(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_Gateway>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAuthSettings" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAuthSettings returns cluster auth settigns
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAuthSettings<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthSettings>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAuthSettings(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_AuthSettings>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetCluster returns cluster. Makes a network request and includes detailed
    /// > information about enterprise features availabed on the connected auth server
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetClusterRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCluster<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetClusterRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCluster(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetClusterRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_Cluster>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Login" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Login logs in a user to a cluster
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_LoginRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func login<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LoginRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.login(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_LoginRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LoginPasswordless" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > LoginPasswordless logs in a user to a cluster passwordlessly.
    /// > 
    /// > The RPC is streaming both ways and the message sequence example for hardware keys are:
    /// > (-> means client-to-server, <- means server-to-client)
    /// > 
    /// > Hardware keys:
    /// > -> Init
    /// > <- Send PasswordlessPrompt enum TAP to choose a device
    /// > -> Receive TAP device response
    /// > <- Send PasswordlessPrompt enum PIN
    /// > -> Receive PIN response
    /// > <- Send PasswordlessPrompt enum RETAP to confirm
    /// > -> Receive RETAP device response
    /// > <- Send list of credentials (e.g. usernames) associated with device
    /// > -> Receive the index number associated with the selected credential in list
    /// > <- End
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func loginPasswordless<Result>(
        request: GRPCCore.StreamingClientRequest<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.loginPasswordless(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Logout" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ClusterLogin logs out a user from cluster
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_LogoutRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func logout<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LogoutRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.logout(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_LogoutRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TransferFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TransferFile sends a request to download/upload a file
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_FileTransferRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func transferFile<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_FileTransferRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_FileTransferProgress>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.transferFile(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_FileTransferRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_FileTransferProgress>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReportUsageEvent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ReportUsageEventRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reportUsageEvent<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUsageEventRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.reportUsageEvent(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ReportUsageEventRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_EmptyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateHeadlessAuthenticationState" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
    /// > An MFA challenge will be prompted when approving a headless authentication.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateHeadlessAuthenticationState<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateHeadlessAuthenticationState(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateConnectMyComputerRole" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateConnectMyComputerRole creates a role which allows access to nodes with the label
    /// > teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
    /// > the current system user.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createConnectMyComputerRole<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createConnectMyComputerRole(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateConnectMyComputerNodeToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createConnectMyComputerNodeToken<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createConnectMyComputerNodeToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WaitForConnectMyComputerNodeJoin" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
    /// > that the Connect My Computer node for the particular cluster has joined the cluster (the
    /// > OpPut event).
    /// > 
    /// > This RPC times out by itself after a minute to prevent the request from hanging forever, in
    /// > case the client didn't set a deadline or doesn't abort the request.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func waitForConnectMyComputerNodeJoin<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.waitForConnectMyComputerNodeJoin(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteConnectMyComputerNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteConnectMyComputerNode deletes the Connect My Computer node.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteConnectMyComputerNode<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteConnectMyComputerNode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetConnectMyComputerNodeName" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getConnectMyComputerNodeName<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getConnectMyComputerNodeName(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListUnifiedResources" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listUnifiedResources<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listUnifiedResources(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUserPreferences<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUserPreferences(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
    /// > Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateUserPreferences<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateUserPreferences(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AuthenticateWebDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AuthenticateWebDevice blesses a web session with device trust by performing
    /// > the on-behalf-of device authentication ceremony.
    /// > 
    /// > See
    /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authenticateWebDevice<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.authenticateWebDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApp" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetApp returns details of an app resource. It does not include information about AWS roles and
    /// > FQDN.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Lib_Teleterm_V1_GetAppRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getApp<Result>(
        request: GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAppRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAppResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getApp(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Lib_Teleterm_V1_GetAppRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Lib_Teleterm_V1_GetAppResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Teleport_Lib_Teleterm_V1_TerminalService.ClientProtocol {
    /// Call the "UpdateTshdEventsServerAddress" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
    /// > supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
    /// > before any other from this service.
    /// > 
    /// > The service is supposed to return a response from this call only after the client is ready.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateTshdEventsServerAddress<Result>(
        _ message: Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTshdEventsServerAddress(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListRootClusters" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListRootClusters lists root clusters
    /// > Does not include detailed cluster information that would require a network request.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listRootClusters<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ListClustersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListClustersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listRootClusters(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListLeafClusters" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListLeafClusters lists leaf clusters
    /// > Does not include detailed cluster information that would require a network request.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listLeafClusters<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ListLeafClustersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListClustersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListLeafClustersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listLeafClusters(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartHeadlessWatcher" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StartHeadlessWatcher starts a headless watcher.
    /// > If the watcher is already running, it is restarted.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func startHeadlessWatcher<Result>(
        _ message: Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.startHeadlessWatcher(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatabaseUsers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDatabaseUsers lists allowed users for the given database based on the role set.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDatabaseUsers<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDatabaseUsers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetServers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetServers returns filtered, sorted, and paginated servers
    /// > 
    /// > Deprecated: Use ListUnifiedResources instead.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getServers<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetServersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetServersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetServersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getServers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessRequests" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessRequests lists filtered AccessRequests
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessRequests<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccessRequests(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAccessRequest retreives a single Access Request
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAccessRequest<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetAccessRequestRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAccessRequestRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccessRequest(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteAccessRequest deletes the access request by id
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteAccessRequest<Result>(
        _ message: Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAccessRequest(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateAccessRequest creates an access request
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createAccessRequest<Result>(
        _ message: Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createAccessRequest(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReviewAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ReviewAccessRequest submits a review for an Access Request
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reviewAccessRequest<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.reviewAccessRequest(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRequestableRoles" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetRequestableRoles gets all requestable roles
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getRequestableRoles<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getRequestableRoles(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AssumeRole" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AssumeRole assumes the role of the given access request
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func assumeRole<Result>(
        _ message: Teleport_Lib_Teleterm_V1_AssumeRoleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AssumeRoleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.assumeRole(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PromoteAccessRequest" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PromoteAccessRequest promotes an access request to an access list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func promoteAccessRequest<Result>(
        _ message: Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.promoteAccessRequest(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSuggestedAccessLists" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSuggestedAccessLists returns suggested access lists for an access request.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getSuggestedAccessLists<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSuggestedAccessLists(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListKubernetesResources" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListKubernetesResourcesRequest defines a request to retrieve kube resources paginated.
    /// > Only one type of kube resource can be retrieved per request (eg: namespace, pods, secrets, etc.)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listKubernetesResources<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listKubernetesResources(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddCluster adds a cluster to profile
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func addCluster<Result>(
        _ message: Teleport_Lib_Teleterm_V1_AddClusterRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AddClusterRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addCluster(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveCluster removes a cluster from profile
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func removeCluster<Result>(
        _ message: Teleport_Lib_Teleterm_V1_RemoveClusterRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveClusterRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeCluster(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListGateways" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListGateways lists gateways
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listGateways<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ListGatewaysRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListGatewaysRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listGateways(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateGateway" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateGateway creates a gateway
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createGateway<Result>(
        _ message: Teleport_Lib_Teleterm_V1_CreateGatewayRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateGatewayRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createGateway(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveGateway" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveGateway removes a gateway
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func removeGateway<Result>(
        _ message: Teleport_Lib_Teleterm_V1_RemoveGatewayRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_RemoveGatewayRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeGateway(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetGatewayTargetSubresourceName" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
    /// > and returns the updated version of gateway.Gateway.
    /// > 
    /// > In Connect this is used to update the db name of a db connection along with the CLI command.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func setGatewayTargetSubresourceName<Result>(
        _ message: Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setGatewayTargetSubresourceName(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetGatewayLocalPort" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
    /// > assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func setGatewayLocalPort<Result>(
        _ message: Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Gateway>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setGatewayLocalPort(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAuthSettings" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetAuthSettings returns cluster auth settigns
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getAuthSettings<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthSettings>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAuthSettings(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetCluster returns cluster. Makes a network request and includes detailed
    /// > information about enterprise features availabed on the connected auth server
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCluster<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetClusterRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_Cluster>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetClusterRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getCluster(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Login" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Login logs in a user to a cluster
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func login<Result>(
        _ message: Teleport_Lib_Teleterm_V1_LoginRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LoginRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.login(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LoginPasswordless" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > LoginPasswordless logs in a user to a cluster passwordlessly.
    /// > 
    /// > The RPC is streaming both ways and the message sequence example for hardware keys are:
    /// > (-> means client-to-server, <- means server-to-client)
    /// > 
    /// > Hardware keys:
    /// > -> Init
    /// > <- Send PasswordlessPrompt enum TAP to choose a device
    /// > -> Receive TAP device response
    /// > <- Send PasswordlessPrompt enum PIN
    /// > -> Receive PIN response
    /// > <- Send PasswordlessPrompt enum RETAP to confirm
    /// > -> Receive RETAP device response
    /// > <- Send list of credentials (e.g. usernames) associated with device
    /// > -> Receive the index number associated with the selected credential in list
    /// > <- End
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func loginPasswordless<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.loginPasswordless(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Logout" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ClusterLogin logs out a user from cluster
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func logout<Result>(
        _ message: Teleport_Lib_Teleterm_V1_LogoutRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_LogoutRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.logout(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TransferFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TransferFile sends a request to download/upload a file
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func transferFile<Result>(
        _ message: Teleport_Lib_Teleterm_V1_FileTransferRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Lib_Teleterm_V1_FileTransferProgress>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_FileTransferRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.transferFile(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReportUsageEvent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func reportUsageEvent<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ReportUsageEventRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_EmptyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ReportUsageEventRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.reportUsageEvent(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateHeadlessAuthenticationState" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
    /// > An MFA challenge will be prompted when approving a headless authentication.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateHeadlessAuthenticationState<Result>(
        _ message: Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateHeadlessAuthenticationState(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateConnectMyComputerRole" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateConnectMyComputerRole creates a role which allows access to nodes with the label
    /// > teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
    /// > the current system user.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createConnectMyComputerRole<Result>(
        _ message: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createConnectMyComputerRole(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateConnectMyComputerNodeToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createConnectMyComputerNodeToken<Result>(
        _ message: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createConnectMyComputerNodeToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WaitForConnectMyComputerNodeJoin" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
    /// > that the Connect My Computer node for the particular cluster has joined the cluster (the
    /// > OpPut event).
    /// > 
    /// > This RPC times out by itself after a minute to prevent the request from hanging forever, in
    /// > case the client didn't set a deadline or doesn't abort the request.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func waitForConnectMyComputerNodeJoin<Result>(
        _ message: Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.waitForConnectMyComputerNodeJoin(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteConnectMyComputerNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteConnectMyComputerNode deletes the Connect My Computer node.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteConnectMyComputerNode<Result>(
        _ message: Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteConnectMyComputerNode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetConnectMyComputerNodeName" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getConnectMyComputerNodeName<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getConnectMyComputerNodeName(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListUnifiedResources" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listUnifiedResources<Result>(
        _ message: Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listUnifiedResources(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUserPreferences<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUserPreferences(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
    /// > Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateUserPreferences<Result>(
        _ message: Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateUserPreferences(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AuthenticateWebDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AuthenticateWebDevice blesses a web session with device trust by performing
    /// > the on-behalf-of device authentication ceremony.
    /// > 
    /// > See
    /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authenticateWebDevice<Result>(
        _ message: Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.authenticateWebDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApp" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetApp returns details of an app resource. It does not include information about AWS roles and
    /// > FQDN.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getApp<Result>(
        _ message: Teleport_Lib_Teleterm_V1_GetAppRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Lib_Teleterm_V1_GetAppResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Lib_Teleterm_V1_GetAppRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getApp(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}