// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/devicetrust/v1/device_collected_data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// DeviceCollectedData contains information gathered from the device during
/// various ceremonies.
/// Gathered information must match, within reason, the original registration
/// data and previous instances of collected data.
struct Teleport_Devicetrust_V1_DeviceCollectedData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time of data collection, set by the client.
  /// Required.
  var collectTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._collectTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._collectTime = newValue}
  }
  /// Returns true if `collectTime` has been explicitly set.
  var hasCollectTime: Bool {return _storage._collectTime != nil}
  /// Clears the value of `collectTime`. Subsequent reads from it will return its default value.
  mutating func clearCollectTime() {_uniqueStorage()._collectTime = nil}

  /// Time of data collection, as received by the server.
  /// System managed.
  var recordTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._recordTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._recordTime = newValue}
  }
  /// Returns true if `recordTime` has been explicitly set.
  var hasRecordTime: Bool {return _storage._recordTime != nil}
  /// Clears the value of `recordTime`. Subsequent reads from it will return its default value.
  mutating func clearRecordTime() {_uniqueStorage()._recordTime = nil}

  /// Device operating system.
  /// Required.
  var osType: Teleport_Devicetrust_V1_OSType {
    get {return _storage._osType}
    set {_uniqueStorage()._osType = newValue}
  }

  /// Device serial number used to match the device with the inventory.
  /// This field is one of the three following
  /// values in this precedence:
  /// - reported_asset_tag
  /// - system_serial_number
  /// - base_board_serial_number
  /// Required.
  var serialNumber: String {
    get {return _storage._serialNumber}
    set {_uniqueStorage()._serialNumber = newValue}
  }

  /// Non-descriptive model identifier.
  /// Example: "MacBookPro9,2".
  var modelIdentifier: String {
    get {return _storage._modelIdentifier}
    set {_uniqueStorage()._modelIdentifier = newValue}
  }

  /// OS version number, without the leading 'v'.
  /// Example: "13.2.1".
  var osVersion: String {
    get {return _storage._osVersion}
    set {_uniqueStorage()._osVersion = newValue}
  }

  /// OS build identifier. Augments the os_version.
  /// May match either the DeviceProfile os_build or os_build_supplemental.
  /// Example: "22D68" or "22F770820d".
  var osBuild: String {
    get {return _storage._osBuild}
    set {_uniqueStorage()._osBuild = newValue}
  }

  /// OS username (distinct from the Teleport user).
  var osUsername: String {
    get {return _storage._osUsername}
    set {_uniqueStorage()._osUsername = newValue}
  }

  /// Jamf binary version, without the leading 'v'.
  /// Example: "9.27" or "10.44.1-t1677509507".
  var jamfBinaryVersion: String {
    get {return _storage._jamfBinaryVersion}
    set {_uniqueStorage()._jamfBinaryVersion = newValue}
  }

  /// Unmodified output of `/usr/bin/profiles status -type enrollment`.
  /// Used to verify the presence of an enrollment profile.
  var macosEnrollmentProfiles: String {
    get {return _storage._macosEnrollmentProfiles}
    set {_uniqueStorage()._macosEnrollmentProfiles = newValue}
  }

  /// The asset tag of the device as reported by the BIOS DMI Type 3. Tools
  /// used by customers to manage their fleet may set this value.
  var reportedAssetTag: String {
    get {return _storage._reportedAssetTag}
    set {_uniqueStorage()._reportedAssetTag = newValue}
  }

  /// The serial number of the "system" as reported by the BIOS DMI Type 1.
  /// This field can be empty if no value has been configured.
  var systemSerialNumber: String {
    get {return _storage._systemSerialNumber}
    set {_uniqueStorage()._systemSerialNumber = newValue}
  }

  /// The serial number of the "base board" as reported by BIOS DMI Type 2.
  /// This field can be empty if no value has been configured.
  var baseBoardSerialNumber: String {
    get {return _storage._baseBoardSerialNumber}
    set {_uniqueStorage()._baseBoardSerialNumber = newValue}
  }

  /// If during the collection of this device data, the device performed a TPM
  /// platform attestation (e.g during enrollment or authentication), then this
  /// field holds the record of this attestation. This allows the state of the
  /// device to be compared to historical state, and allows for the platform
  /// attestations to be revalidated at a later date.
  ///
  /// This field is not explicitly sent up by the client, and any DCD sent by a
  /// client including this field should be rejected. The server should inject
  /// this field once verifying that the submitted platform attestation during
  /// the enrollment or authentication.
  ///
  /// System managed.
  var tpmPlatformAttestation: Teleport_Devicetrust_V1_TPMPlatformAttestation {
    get {return _storage._tpmPlatformAttestation ?? Teleport_Devicetrust_V1_TPMPlatformAttestation()}
    set {_uniqueStorage()._tpmPlatformAttestation = newValue}
  }
  /// Returns true if `tpmPlatformAttestation` has been explicitly set.
  var hasTpmPlatformAttestation: Bool {return _storage._tpmPlatformAttestation != nil}
  /// Clears the value of `tpmPlatformAttestation`. Subsequent reads from it will return its default value.
  mutating func clearTpmPlatformAttestation() {_uniqueStorage()._tpmPlatformAttestation = nil}

  /// OS identifier.
  /// Mainly used to differentiate Linux distros, as there is be no variation
  /// for systems like macOS or Windows.
  /// Example: "ubuntu", "centos", "fedora", "rhel".
  var osID: String {
    get {return _storage._osID}
    set {_uniqueStorage()._osID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.devicetrust.v1"

extension Teleport_Devicetrust_V1_DeviceCollectedData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceCollectedData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collect_time"),
    2: .standard(proto: "record_time"),
    3: .standard(proto: "os_type"),
    4: .standard(proto: "serial_number"),
    5: .standard(proto: "model_identifier"),
    6: .standard(proto: "os_version"),
    7: .standard(proto: "os_build"),
    8: .standard(proto: "os_username"),
    9: .standard(proto: "jamf_binary_version"),
    10: .standard(proto: "macos_enrollment_profiles"),
    11: .standard(proto: "reported_asset_tag"),
    12: .standard(proto: "system_serial_number"),
    13: .standard(proto: "base_board_serial_number"),
    14: .standard(proto: "tpm_platform_attestation"),
    15: .standard(proto: "os_id"),
  ]

  fileprivate class _StorageClass {
    var _collectTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _recordTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _osType: Teleport_Devicetrust_V1_OSType = .unspecified
    var _serialNumber: String = String()
    var _modelIdentifier: String = String()
    var _osVersion: String = String()
    var _osBuild: String = String()
    var _osUsername: String = String()
    var _jamfBinaryVersion: String = String()
    var _macosEnrollmentProfiles: String = String()
    var _reportedAssetTag: String = String()
    var _systemSerialNumber: String = String()
    var _baseBoardSerialNumber: String = String()
    var _tpmPlatformAttestation: Teleport_Devicetrust_V1_TPMPlatformAttestation? = nil
    var _osID: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _collectTime = source._collectTime
      _recordTime = source._recordTime
      _osType = source._osType
      _serialNumber = source._serialNumber
      _modelIdentifier = source._modelIdentifier
      _osVersion = source._osVersion
      _osBuild = source._osBuild
      _osUsername = source._osUsername
      _jamfBinaryVersion = source._jamfBinaryVersion
      _macosEnrollmentProfiles = source._macosEnrollmentProfiles
      _reportedAssetTag = source._reportedAssetTag
      _systemSerialNumber = source._systemSerialNumber
      _baseBoardSerialNumber = source._baseBoardSerialNumber
      _tpmPlatformAttestation = source._tpmPlatformAttestation
      _osID = source._osID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._collectTime) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._recordTime) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._osType) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._serialNumber) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._modelIdentifier) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._osVersion) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._osBuild) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._osUsername) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._jamfBinaryVersion) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._macosEnrollmentProfiles) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._reportedAssetTag) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._systemSerialNumber) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._baseBoardSerialNumber) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._tpmPlatformAttestation) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._osID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._collectTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._recordTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._osType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._osType, fieldNumber: 3)
      }
      if !_storage._serialNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serialNumber, fieldNumber: 4)
      }
      if !_storage._modelIdentifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._modelIdentifier, fieldNumber: 5)
      }
      if !_storage._osVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osVersion, fieldNumber: 6)
      }
      if !_storage._osBuild.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osBuild, fieldNumber: 7)
      }
      if !_storage._osUsername.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osUsername, fieldNumber: 8)
      }
      if !_storage._jamfBinaryVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jamfBinaryVersion, fieldNumber: 9)
      }
      if !_storage._macosEnrollmentProfiles.isEmpty {
        try visitor.visitSingularStringField(value: _storage._macosEnrollmentProfiles, fieldNumber: 10)
      }
      if !_storage._reportedAssetTag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reportedAssetTag, fieldNumber: 11)
      }
      if !_storage._systemSerialNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._systemSerialNumber, fieldNumber: 12)
      }
      if !_storage._baseBoardSerialNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._baseBoardSerialNumber, fieldNumber: 13)
      }
      try { if let v = _storage._tpmPlatformAttestation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      if !_storage._osID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osID, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Devicetrust_V1_DeviceCollectedData, rhs: Teleport_Devicetrust_V1_DeviceCollectedData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._collectTime != rhs_storage._collectTime {return false}
        if _storage._recordTime != rhs_storage._recordTime {return false}
        if _storage._osType != rhs_storage._osType {return false}
        if _storage._serialNumber != rhs_storage._serialNumber {return false}
        if _storage._modelIdentifier != rhs_storage._modelIdentifier {return false}
        if _storage._osVersion != rhs_storage._osVersion {return false}
        if _storage._osBuild != rhs_storage._osBuild {return false}
        if _storage._osUsername != rhs_storage._osUsername {return false}
        if _storage._jamfBinaryVersion != rhs_storage._jamfBinaryVersion {return false}
        if _storage._macosEnrollmentProfiles != rhs_storage._macosEnrollmentProfiles {return false}
        if _storage._reportedAssetTag != rhs_storage._reportedAssetTag {return false}
        if _storage._systemSerialNumber != rhs_storage._systemSerialNumber {return false}
        if _storage._baseBoardSerialNumber != rhs_storage._baseBoardSerialNumber {return false}
        if _storage._tpmPlatformAttestation != rhs_storage._tpmPlatformAttestation {return false}
        if _storage._osID != rhs_storage._osID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
