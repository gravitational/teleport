// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: teleport/devicetrust/v1/devicetrust_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - teleport.devicetrust.v1.DeviceTrustService

/// Namespace containing generated types for the "teleport.devicetrust.v1.DeviceTrustService" service.
internal enum Teleport_Devicetrust_V1_DeviceTrustService {
    /// Service descriptor for the "teleport.devicetrust.v1.DeviceTrustService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "CreateDevice" metadata.
        internal enum CreateDevice {
            /// Request type for "CreateDevice".
            internal typealias Input = Teleport_Devicetrust_V1_CreateDeviceRequest
            /// Response type for "CreateDevice".
            internal typealias Output = Teleport_Devicetrust_V1_Device
            /// Descriptor for "CreateDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "CreateDevice"
            )
        }
        /// Namespace for "UpdateDevice" metadata.
        internal enum UpdateDevice {
            /// Request type for "UpdateDevice".
            internal typealias Input = Teleport_Devicetrust_V1_UpdateDeviceRequest
            /// Response type for "UpdateDevice".
            internal typealias Output = Teleport_Devicetrust_V1_Device
            /// Descriptor for "UpdateDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "UpdateDevice"
            )
        }
        /// Namespace for "UpsertDevice" metadata.
        internal enum UpsertDevice {
            /// Request type for "UpsertDevice".
            internal typealias Input = Teleport_Devicetrust_V1_UpsertDeviceRequest
            /// Response type for "UpsertDevice".
            internal typealias Output = Teleport_Devicetrust_V1_Device
            /// Descriptor for "UpsertDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "UpsertDevice"
            )
        }
        /// Namespace for "DeleteDevice" metadata.
        internal enum DeleteDevice {
            /// Request type for "DeleteDevice".
            internal typealias Input = Teleport_Devicetrust_V1_DeleteDeviceRequest
            /// Response type for "DeleteDevice".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "DeleteDevice"
            )
        }
        /// Namespace for "FindDevices" metadata.
        internal enum FindDevices {
            /// Request type for "FindDevices".
            internal typealias Input = Teleport_Devicetrust_V1_FindDevicesRequest
            /// Response type for "FindDevices".
            internal typealias Output = Teleport_Devicetrust_V1_FindDevicesResponse
            /// Descriptor for "FindDevices".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "FindDevices"
            )
        }
        /// Namespace for "GetDevice" metadata.
        internal enum GetDevice {
            /// Request type for "GetDevice".
            internal typealias Input = Teleport_Devicetrust_V1_GetDeviceRequest
            /// Response type for "GetDevice".
            internal typealias Output = Teleport_Devicetrust_V1_Device
            /// Descriptor for "GetDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "GetDevice"
            )
        }
        /// Namespace for "ListDevices" metadata.
        internal enum ListDevices {
            /// Request type for "ListDevices".
            internal typealias Input = Teleport_Devicetrust_V1_ListDevicesRequest
            /// Response type for "ListDevices".
            internal typealias Output = Teleport_Devicetrust_V1_ListDevicesResponse
            /// Descriptor for "ListDevices".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "ListDevices"
            )
        }
        /// Namespace for "ListDevicesByUser" metadata.
        internal enum ListDevicesByUser {
            /// Request type for "ListDevicesByUser".
            internal typealias Input = Teleport_Devicetrust_V1_ListDevicesByUserRequest
            /// Response type for "ListDevicesByUser".
            internal typealias Output = Teleport_Devicetrust_V1_ListDevicesByUserResponse
            /// Descriptor for "ListDevicesByUser".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "ListDevicesByUser"
            )
        }
        /// Namespace for "BulkCreateDevices" metadata.
        internal enum BulkCreateDevices {
            /// Request type for "BulkCreateDevices".
            internal typealias Input = Teleport_Devicetrust_V1_BulkCreateDevicesRequest
            /// Response type for "BulkCreateDevices".
            internal typealias Output = Teleport_Devicetrust_V1_BulkCreateDevicesResponse
            /// Descriptor for "BulkCreateDevices".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "BulkCreateDevices"
            )
        }
        /// Namespace for "CreateDeviceEnrollToken" metadata.
        internal enum CreateDeviceEnrollToken {
            /// Request type for "CreateDeviceEnrollToken".
            internal typealias Input = Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest
            /// Response type for "CreateDeviceEnrollToken".
            internal typealias Output = Teleport_Devicetrust_V1_DeviceEnrollToken
            /// Descriptor for "CreateDeviceEnrollToken".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "CreateDeviceEnrollToken"
            )
        }
        /// Namespace for "EnrollDevice" metadata.
        internal enum EnrollDevice {
            /// Request type for "EnrollDevice".
            internal typealias Input = Teleport_Devicetrust_V1_EnrollDeviceRequest
            /// Response type for "EnrollDevice".
            internal typealias Output = Teleport_Devicetrust_V1_EnrollDeviceResponse
            /// Descriptor for "EnrollDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "EnrollDevice"
            )
        }
        /// Namespace for "AuthenticateDevice" metadata.
        internal enum AuthenticateDevice {
            /// Request type for "AuthenticateDevice".
            internal typealias Input = Teleport_Devicetrust_V1_AuthenticateDeviceRequest
            /// Response type for "AuthenticateDevice".
            internal typealias Output = Teleport_Devicetrust_V1_AuthenticateDeviceResponse
            /// Descriptor for "AuthenticateDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "AuthenticateDevice"
            )
        }
        /// Namespace for "ConfirmDeviceWebAuthentication" metadata.
        internal enum ConfirmDeviceWebAuthentication {
            /// Request type for "ConfirmDeviceWebAuthentication".
            internal typealias Input = Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest
            /// Response type for "ConfirmDeviceWebAuthentication".
            internal typealias Output = Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse
            /// Descriptor for "ConfirmDeviceWebAuthentication".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "ConfirmDeviceWebAuthentication"
            )
        }
        /// Namespace for "SyncInventory" metadata.
        internal enum SyncInventory {
            /// Request type for "SyncInventory".
            internal typealias Input = Teleport_Devicetrust_V1_SyncInventoryRequest
            /// Response type for "SyncInventory".
            internal typealias Output = Teleport_Devicetrust_V1_SyncInventoryResponse
            /// Descriptor for "SyncInventory".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "SyncInventory"
            )
        }
        /// Namespace for "GetDevicesUsage" metadata.
        internal enum GetDevicesUsage {
            /// Request type for "GetDevicesUsage".
            internal typealias Input = Teleport_Devicetrust_V1_GetDevicesUsageRequest
            /// Response type for "GetDevicesUsage".
            internal typealias Output = Teleport_Devicetrust_V1_DevicesUsage
            /// Descriptor for "GetDevicesUsage".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService"),
                method: "GetDevicesUsage"
            )
        }
        /// Descriptors for all methods in the "teleport.devicetrust.v1.DeviceTrustService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateDevice.descriptor,
            UpdateDevice.descriptor,
            UpsertDevice.descriptor,
            DeleteDevice.descriptor,
            FindDevices.descriptor,
            GetDevice.descriptor,
            ListDevices.descriptor,
            ListDevicesByUser.descriptor,
            BulkCreateDevices.descriptor,
            CreateDeviceEnrollToken.descriptor,
            EnrollDevice.descriptor,
            AuthenticateDevice.descriptor,
            ConfirmDeviceWebAuthentication.descriptor,
            SyncInventory.descriptor,
            GetDevicesUsage.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "teleport.devicetrust.v1.DeviceTrustService" service.
    internal static let teleport_devicetrust_v1_DeviceTrustService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.devicetrust.v1.DeviceTrustService")
}

// MARK: teleport.devicetrust.v1.DeviceTrustService (client)

extension Teleport_Devicetrust_V1_DeviceTrustService {
    /// Generated client protocol for the "teleport.devicetrust.v1.DeviceTrustService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeviceTrustService provides methods to manage, enroll and authenticate
    /// > trusted devices.
    /// > 
    /// > A trusted device is a device that is registered and enrolled with Teleport,
    /// > thus allowing the system to provide some guarantees about its provenance and
    /// > state.
    /// > 
    /// > Managing devices requires the corresponding CRUD "device" permission.
    /// > Additionally, creating enrollment tokens requires the "create_enroll_token"
    /// > permission and enrolling devices requires the "enroll" permission. See
    /// > CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.
    /// > 
    /// > An authenticated, trusted device allows its user to perform device-aware
    /// > actions. Such actions include accessing an SSH node, managing sensitive
    /// > resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
    /// > and/or per-role toggles. Device authentication is automatic for enrolled
    /// > devices communicating with Enterprise clusters. See AuthenticateDevice for
    /// > reference.
    /// > 
    /// > Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
    /// > treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
    internal protocol ClientProtocol: Sendable {
        /// Call the "CreateDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateDevice creates a device, effectively registering it on Teleport.
        /// > Devices need to be registered before they can be enrolled.
        /// > 
        /// > It is possible to create both a Device and a DeviceEnrollToken in a
        /// > single invocation, see CreateDeviceRequest.create_enroll_token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_CreateDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_CreateDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_CreateDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateDevice is a masked device update.
        /// > 
        /// > Only certain fields may be updated, see Device for details.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_UpdateDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_UpdateDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpdateDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_UpdateDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpsertDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertDevice creates or updates a device.
        /// > 
        /// > UpsertDevice attempts a write of all mutable fields on updates, therefore
        /// > reading a fresh copy of the device is recommended. Update semantics still
        /// > apply.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_UpsertDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_UpsertDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func upsertDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpsertDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_UpsertDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteDevice hard-deletes a device, removing it and all collected data
        /// > history from the system.
        /// > 
        /// > Prefer locking the device instead (see the `tctl lock` command). Deleting a
        /// > device doesn't invalidate existing device certificates, but does prevent
        /// > new device authentication ceremonies from occurring.
        /// > 
        /// > Use with caution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_DeleteDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_DeleteDeviceRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_DeleteDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_DeleteDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "FindDevices" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > FindDevices retrieves devices by device ID and/or asset tag.
        /// > 
        /// > It provides an in-between search between fetching a device by ID and
        /// > listing all devices.
        /// > 
        /// > ID matches are guaranteed to be present in the response.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_FindDevicesRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_FindDevicesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_FindDevicesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func findDevices<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_FindDevicesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_FindDevicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_FindDevicesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_FindDevicesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetDevice retrieves a device by ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_GetDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_GetDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_GetDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDevices" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDevices lists all registered devices.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_ListDevicesRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_ListDevicesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_ListDevicesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDevices<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_ListDevicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_ListDevicesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDevicesByUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDevicesByUser lists all devices owned by the user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_ListDevicesByUserRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_ListDevicesByUserRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_ListDevicesByUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDevicesByUser<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesByUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_ListDevicesByUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_ListDevicesByUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesByUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "BulkCreateDevices" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > BulkCreateDevices is a bulk variant of CreateDevice.
        /// > 
        /// > Unlike CreateDevice, it does not support creation of enrollment tokens, as
        /// > it is meant for bulk inventory registration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_BulkCreateDevicesRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_BulkCreateDevicesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_BulkCreateDevicesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func bulkCreateDevices<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_BulkCreateDevicesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_BulkCreateDevicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateDeviceEnrollToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
        /// > An enrollment token is required for the enrollment ceremony. See
        /// > EnrollDevice.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_DeviceEnrollToken` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createDeviceEnrollToken<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_DeviceEnrollToken>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DeviceEnrollToken>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "EnrollDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > EnrollDevice performs the device enrollment ceremony.
        /// > 
        /// > Enrollment requires a previously-registered Device and a DeviceEnrollToken,
        /// > see CreateDevice and CreateDeviceEnrollToken.
        /// > 
        /// > An enrolled device is allowed, via AuthenticateDevice, to acquire
        /// > certificates containing device extensions, thus gaining access to
        /// > device-aware actions.
        /// > 
        /// > macOS enrollment flow:
        /// > -> EnrollDeviceInit (client)
        /// > <- MacOSEnrollChallenge (server)
        /// > -> MacOSEnrollChallengeResponse
        /// > <- EnrollDeviceSuccess
        /// > 
        /// > TPM enrollment flow:
        /// > -> EnrollDeviceInit (client)
        /// > <- TPMEnrollChallenge (server)
        /// > -> TPMEnrollChallengeResponse
        /// > <- EnrollDeviceSuccess
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Devicetrust_V1_EnrollDeviceRequest` messages.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_EnrollDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_EnrollDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func enrollDevice<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_EnrollDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_EnrollDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_EnrollDeviceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_EnrollDeviceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AuthenticateDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AuthenticateDevice performs the device authentication ceremony.
        /// > 
        /// > Device authentication exchanges existing user certificates without device
        /// > extensions for certificates augmented with device extensions. The new
        /// > certificates allow the user to perform device-aware actions.
        /// > 
        /// > Only registered and enrolled devices may perform device authentication.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Devicetrust_V1_AuthenticateDeviceRequest` messages.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_AuthenticateDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_AuthenticateDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func authenticateDevice<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ConfirmDeviceWebAuthentication" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ConfirmDeviceWebAuthentication finalizes the device web authentication
        /// > ceremony started by the creation of a DeviceWebToken and subsequent
        /// > AuthenticateDevice call.
        /// > 
        /// > The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
        /// > method, which consequently augments the corresponding Web Session
        /// > certificates with device extensions.
        /// > 
        /// > This method must be called by the Teleport Proxy, and the Proxy itself must
        /// > be called by the same browser that started the on-behalf-of authentication
        /// > attempt. See the /webapi/device/webconfirm endpoint.
        /// > 
        /// > See
        /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func confirmDeviceWebAuthentication<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SyncInventory" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Syncs device inventory from a source exterior to Teleport, for example an
        /// > MDM.
        /// > Allows both partial and full syncs; for the latter, devices missing from
        /// > the external inventory are handled as specified.
        /// > Authorized either by a valid MDM service certificate or the appropriate
        /// > "device" permissions (create/update/delete).
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Devicetrust_V1_SyncInventoryRequest` messages.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_SyncInventoryRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_SyncInventoryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func syncInventory<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_SyncInventoryRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_SyncInventoryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_SyncInventoryResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_SyncInventoryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDevicesUsage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Superseded by ResourceUsageService.GetUsage.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_GetDevicesUsageRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_GetDevicesUsageRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_DevicesUsage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDevicesUsage<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDevicesUsageRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_GetDevicesUsageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_DevicesUsage>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DevicesUsage>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "teleport.devicetrust.v1.DeviceTrustService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeviceTrustService provides methods to manage, enroll and authenticate
    /// > trusted devices.
    /// > 
    /// > A trusted device is a device that is registered and enrolled with Teleport,
    /// > thus allowing the system to provide some guarantees about its provenance and
    /// > state.
    /// > 
    /// > Managing devices requires the corresponding CRUD "device" permission.
    /// > Additionally, creating enrollment tokens requires the "create_enroll_token"
    /// > permission and enrolling devices requires the "enroll" permission. See
    /// > CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.
    /// > 
    /// > An authenticated, trusted device allows its user to perform device-aware
    /// > actions. Such actions include accessing an SSH node, managing sensitive
    /// > resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
    /// > and/or per-role toggles. Device authentication is automatic for enrolled
    /// > devices communicating with Enterprise clusters. See AuthenticateDevice for
    /// > reference.
    /// > 
    /// > Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
    /// > treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateDevice creates a device, effectively registering it on Teleport.
        /// > Devices need to be registered before they can be enrolled.
        /// > 
        /// > It is possible to create both a Device and a DeviceEnrollToken in a
        /// > single invocation, see CreateDeviceRequest.create_enroll_token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_CreateDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_CreateDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_CreateDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.CreateDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateDevice is a masked device update.
        /// > 
        /// > Only certain fields may be updated, see Device for details.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_UpdateDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_UpdateDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpdateDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_UpdateDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.UpdateDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpsertDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertDevice creates or updates a device.
        /// > 
        /// > UpsertDevice attempts a write of all mutable fields on updates, therefore
        /// > reading a fresh copy of the device is recommended. Update semantics still
        /// > apply.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_UpsertDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_UpsertDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func upsertDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpsertDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_UpsertDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.UpsertDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteDevice hard-deletes a device, removing it and all collected data
        /// > history from the system.
        /// > 
        /// > Prefer locking the device instead (see the `tctl lock` command). Deleting a
        /// > device doesn't invalidate existing device certificates, but does prevent
        /// > new device authentication ceremonies from occurring.
        /// > 
        /// > Use with caution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_DeleteDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_DeleteDeviceRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_DeleteDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_DeleteDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.DeleteDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "FindDevices" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > FindDevices retrieves devices by device ID and/or asset tag.
        /// > 
        /// > It provides an in-between search between fetching a device by ID and
        /// > listing all devices.
        /// > 
        /// > ID matches are guaranteed to be present in the response.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_FindDevicesRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_FindDevicesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_FindDevicesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func findDevices<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_FindDevicesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_FindDevicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_FindDevicesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_FindDevicesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.FindDevices.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetDevice retrieves a device by ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_GetDeviceRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_GetDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_Device` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getDevice<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_GetDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_Device>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.GetDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDevices" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDevices lists all registered devices.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_ListDevicesRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_ListDevicesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_ListDevicesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listDevices<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_ListDevicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_ListDevicesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.ListDevices.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDevicesByUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListDevicesByUser lists all devices owned by the user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_ListDevicesByUserRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_ListDevicesByUserRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_ListDevicesByUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func listDevicesByUser<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesByUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_ListDevicesByUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_ListDevicesByUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesByUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.ListDevicesByUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "BulkCreateDevices" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > BulkCreateDevices is a bulk variant of CreateDevice.
        /// > 
        /// > Unlike CreateDevice, it does not support creation of enrollment tokens, as
        /// > it is meant for bulk inventory registration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_BulkCreateDevicesRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_BulkCreateDevicesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_BulkCreateDevicesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func bulkCreateDevices<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_BulkCreateDevicesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_BulkCreateDevicesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.BulkCreateDevices.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateDeviceEnrollToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
        /// > An enrollment token is required for the enrollment ceremony. See
        /// > EnrollDevice.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_DeviceEnrollToken` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createDeviceEnrollToken<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_DeviceEnrollToken>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DeviceEnrollToken>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.CreateDeviceEnrollToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "EnrollDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > EnrollDevice performs the device enrollment ceremony.
        /// > 
        /// > Enrollment requires a previously-registered Device and a DeviceEnrollToken,
        /// > see CreateDevice and CreateDeviceEnrollToken.
        /// > 
        /// > An enrolled device is allowed, via AuthenticateDevice, to acquire
        /// > certificates containing device extensions, thus gaining access to
        /// > device-aware actions.
        /// > 
        /// > macOS enrollment flow:
        /// > -> EnrollDeviceInit (client)
        /// > <- MacOSEnrollChallenge (server)
        /// > -> MacOSEnrollChallengeResponse
        /// > <- EnrollDeviceSuccess
        /// > 
        /// > TPM enrollment flow:
        /// > -> EnrollDeviceInit (client)
        /// > <- TPMEnrollChallenge (server)
        /// > -> TPMEnrollChallengeResponse
        /// > <- EnrollDeviceSuccess
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Devicetrust_V1_EnrollDeviceRequest` messages.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_EnrollDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_EnrollDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func enrollDevice<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_EnrollDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_EnrollDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_EnrollDeviceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_EnrollDeviceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.EnrollDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AuthenticateDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AuthenticateDevice performs the device authentication ceremony.
        /// > 
        /// > Device authentication exchanges existing user certificates without device
        /// > extensions for certificates augmented with device extensions. The new
        /// > certificates allow the user to perform device-aware actions.
        /// > 
        /// > Only registered and enrolled devices may perform device authentication.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Devicetrust_V1_AuthenticateDeviceRequest` messages.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_AuthenticateDeviceRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_AuthenticateDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func authenticateDevice<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.AuthenticateDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ConfirmDeviceWebAuthentication" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ConfirmDeviceWebAuthentication finalizes the device web authentication
        /// > ceremony started by the creation of a DeviceWebToken and subsequent
        /// > AuthenticateDevice call.
        /// > 
        /// > The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
        /// > method, which consequently augments the corresponding Web Session
        /// > certificates with device extensions.
        /// > 
        /// > This method must be called by the Teleport Proxy, and the Proxy itself must
        /// > be called by the same browser that started the on-behalf-of authentication
        /// > attempt. See the /webapi/device/webconfirm endpoint.
        /// > 
        /// > See
        /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func confirmDeviceWebAuthentication<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.ConfirmDeviceWebAuthentication.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SyncInventory" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Syncs device inventory from a source exterior to Teleport, for example an
        /// > MDM.
        /// > Allows both partial and full syncs; for the latter, devices missing from
        /// > the external inventory are handled as specified.
        /// > Authorized either by a valid MDM service certificate or the appropriate
        /// > "device" permissions (create/update/delete).
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Teleport_Devicetrust_V1_SyncInventoryRequest` messages.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_SyncInventoryRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_SyncInventoryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func syncInventory<Result>(
            request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_SyncInventoryRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_SyncInventoryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_SyncInventoryResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_SyncInventoryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.SyncInventory.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDevicesUsage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Superseded by ResourceUsageService.GetUsage.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Devicetrust_V1_GetDevicesUsageRequest` message.
        ///   - serializer: A serializer for `Teleport_Devicetrust_V1_GetDevicesUsageRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Devicetrust_V1_DevicesUsage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getDevicesUsage<Result>(
            request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDevicesUsageRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Devicetrust_V1_GetDevicesUsageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Devicetrust_V1_DevicesUsage>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DevicesUsage>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Devicetrust_V1_DeviceTrustService.Method.GetDevicesUsage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Teleport_Devicetrust_V1_DeviceTrustService.ClientProtocol {
    /// Call the "CreateDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateDevice creates a device, effectively registering it on Teleport.
    /// > Devices need to be registered before they can be enrolled.
    /// > 
    /// > It is possible to create both a Device and a DeviceEnrollToken in a
    /// > single invocation, see CreateDeviceRequest.create_enroll_token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_CreateDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createDevice<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_CreateDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_Device>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateDevice is a masked device update.
    /// > 
    /// > Only certain fields may be updated, see Device for details.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_UpdateDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateDevice<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpdateDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_UpdateDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_Device>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertDevice creates or updates a device.
    /// > 
    /// > UpsertDevice attempts a write of all mutable fields on updates, therefore
    /// > reading a fresh copy of the device is recommended. Update semantics still
    /// > apply.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_UpsertDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertDevice<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpsertDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.upsertDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_UpsertDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_Device>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteDevice hard-deletes a device, removing it and all collected data
    /// > history from the system.
    /// > 
    /// > Prefer locking the device instead (see the `tctl lock` command). Deleting a
    /// > device doesn't invalidate existing device certificates, but does prevent
    /// > new device authentication ceremonies from occurring.
    /// > 
    /// > Use with caution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_DeleteDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteDevice<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_DeleteDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_DeleteDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FindDevices" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > FindDevices retrieves devices by device ID and/or asset tag.
    /// > 
    /// > It provides an in-between search between fetching a device by ID and
    /// > listing all devices.
    /// > 
    /// > ID matches are guaranteed to be present in the response.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_FindDevicesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func findDevices<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_FindDevicesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_FindDevicesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.findDevices(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_FindDevicesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_FindDevicesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetDevice retrieves a device by ID.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_GetDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDevice<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_GetDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_Device>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDevices" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDevices lists all registered devices.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_ListDevicesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDevices<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDevices(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_ListDevicesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_ListDevicesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDevicesByUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDevicesByUser lists all devices owned by the user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_ListDevicesByUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDevicesByUser<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesByUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesByUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDevicesByUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_ListDevicesByUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_ListDevicesByUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BulkCreateDevices" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > BulkCreateDevices is a bulk variant of CreateDevice.
    /// > 
    /// > Unlike CreateDevice, it does not support creation of enrollment tokens, as
    /// > it is meant for bulk inventory registration.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_BulkCreateDevicesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bulkCreateDevices<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_BulkCreateDevicesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.bulkCreateDevices(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_BulkCreateDevicesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateDeviceEnrollToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
    /// > An enrollment token is required for the enrollment ceremony. See
    /// > EnrollDevice.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createDeviceEnrollToken<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DeviceEnrollToken>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createDeviceEnrollToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_DeviceEnrollToken>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "EnrollDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > EnrollDevice performs the device enrollment ceremony.
    /// > 
    /// > Enrollment requires a previously-registered Device and a DeviceEnrollToken,
    /// > see CreateDevice and CreateDeviceEnrollToken.
    /// > 
    /// > An enrolled device is allowed, via AuthenticateDevice, to acquire
    /// > certificates containing device extensions, thus gaining access to
    /// > device-aware actions.
    /// > 
    /// > macOS enrollment flow:
    /// > -> EnrollDeviceInit (client)
    /// > <- MacOSEnrollChallenge (server)
    /// > -> MacOSEnrollChallengeResponse
    /// > <- EnrollDeviceSuccess
    /// > 
    /// > TPM enrollment flow:
    /// > -> EnrollDeviceInit (client)
    /// > <- TPMEnrollChallenge (server)
    /// > -> TPMEnrollChallengeResponse
    /// > <- EnrollDeviceSuccess
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Teleport_Devicetrust_V1_EnrollDeviceRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func enrollDevice<Result>(
        request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_EnrollDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_EnrollDeviceResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.enrollDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_EnrollDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_EnrollDeviceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AuthenticateDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AuthenticateDevice performs the device authentication ceremony.
    /// > 
    /// > Device authentication exchanges existing user certificates without device
    /// > extensions for certificates augmented with device extensions. The new
    /// > certificates allow the user to perform device-aware actions.
    /// > 
    /// > Only registered and enrolled devices may perform device authentication.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Teleport_Devicetrust_V1_AuthenticateDeviceRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authenticateDevice<Result>(
        request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.authenticateDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConfirmDeviceWebAuthentication" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ConfirmDeviceWebAuthentication finalizes the device web authentication
    /// > ceremony started by the creation of a DeviceWebToken and subsequent
    /// > AuthenticateDevice call.
    /// > 
    /// > The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
    /// > method, which consequently augments the corresponding Web Session
    /// > certificates with device extensions.
    /// > 
    /// > This method must be called by the Teleport Proxy, and the Proxy itself must
    /// > be called by the same browser that started the on-behalf-of authentication
    /// > attempt. See the /webapi/device/webconfirm endpoint.
    /// > 
    /// > See
    /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func confirmDeviceWebAuthentication<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.confirmDeviceWebAuthentication(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SyncInventory" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Syncs device inventory from a source exterior to Teleport, for example an
    /// > MDM.
    /// > Allows both partial and full syncs; for the latter, devices missing from
    /// > the external inventory are handled as specified.
    /// > Authorized either by a valid MDM service certificate or the appropriate
    /// > "device" permissions (create/update/delete).
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Teleport_Devicetrust_V1_SyncInventoryRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func syncInventory<Result>(
        request: GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_SyncInventoryRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_SyncInventoryResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.syncInventory(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_SyncInventoryRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_SyncInventoryResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDevicesUsage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Superseded by ResourceUsageService.GetUsage.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Devicetrust_V1_GetDevicesUsageRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDevicesUsage<Result>(
        request: GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDevicesUsageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DevicesUsage>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDevicesUsage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Devicetrust_V1_GetDevicesUsageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Devicetrust_V1_DevicesUsage>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Teleport_Devicetrust_V1_DeviceTrustService.ClientProtocol {
    /// Call the "CreateDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateDevice creates a device, effectively registering it on Teleport.
    /// > Devices need to be registered before they can be enrolled.
    /// > 
    /// > It is possible to create both a Device and a DeviceEnrollToken in a
    /// > single invocation, see CreateDeviceRequest.create_enroll_token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createDevice<Result>(
        _ message: Teleport_Devicetrust_V1_CreateDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateDevice is a masked device update.
    /// > 
    /// > Only certain fields may be updated, see Device for details.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateDevice<Result>(
        _ message: Teleport_Devicetrust_V1_UpdateDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpdateDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertDevice creates or updates a device.
    /// > 
    /// > UpsertDevice attempts a write of all mutable fields on updates, therefore
    /// > reading a fresh copy of the device is recommended. Update semantics still
    /// > apply.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertDevice<Result>(
        _ message: Teleport_Devicetrust_V1_UpsertDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_UpsertDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.upsertDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteDevice hard-deletes a device, removing it and all collected data
    /// > history from the system.
    /// > 
    /// > Prefer locking the device instead (see the `tctl lock` command). Deleting a
    /// > device doesn't invalidate existing device certificates, but does prevent
    /// > new device authentication ceremonies from occurring.
    /// > 
    /// > Use with caution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteDevice<Result>(
        _ message: Teleport_Devicetrust_V1_DeleteDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_DeleteDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FindDevices" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > FindDevices retrieves devices by device ID and/or asset tag.
    /// > 
    /// > It provides an in-between search between fetching a device by ID and
    /// > listing all devices.
    /// > 
    /// > ID matches are guaranteed to be present in the response.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func findDevices<Result>(
        _ message: Teleport_Devicetrust_V1_FindDevicesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_FindDevicesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_FindDevicesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.findDevices(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetDevice retrieves a device by ID.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDevice<Result>(
        _ message: Teleport_Devicetrust_V1_GetDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_Device>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDevices" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDevices lists all registered devices.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDevices<Result>(
        _ message: Teleport_Devicetrust_V1_ListDevicesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDevices(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDevicesByUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListDevicesByUser lists all devices owned by the user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func listDevicesByUser<Result>(
        _ message: Teleport_Devicetrust_V1_ListDevicesByUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ListDevicesByUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ListDevicesByUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDevicesByUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BulkCreateDevices" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > BulkCreateDevices is a bulk variant of CreateDevice.
    /// > 
    /// > Unlike CreateDevice, it does not support creation of enrollment tokens, as
    /// > it is meant for bulk inventory registration.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func bulkCreateDevices<Result>(
        _ message: Teleport_Devicetrust_V1_BulkCreateDevicesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_BulkCreateDevicesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_BulkCreateDevicesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.bulkCreateDevices(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateDeviceEnrollToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
    /// > An enrollment token is required for the enrollment ceremony. See
    /// > EnrollDevice.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createDeviceEnrollToken<Result>(
        _ message: Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DeviceEnrollToken>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_CreateDeviceEnrollTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createDeviceEnrollToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "EnrollDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > EnrollDevice performs the device enrollment ceremony.
    /// > 
    /// > Enrollment requires a previously-registered Device and a DeviceEnrollToken,
    /// > see CreateDevice and CreateDeviceEnrollToken.
    /// > 
    /// > An enrolled device is allowed, via AuthenticateDevice, to acquire
    /// > certificates containing device extensions, thus gaining access to
    /// > device-aware actions.
    /// > 
    /// > macOS enrollment flow:
    /// > -> EnrollDeviceInit (client)
    /// > <- MacOSEnrollChallenge (server)
    /// > -> MacOSEnrollChallengeResponse
    /// > <- EnrollDeviceSuccess
    /// > 
    /// > TPM enrollment flow:
    /// > -> EnrollDeviceInit (client)
    /// > <- TPMEnrollChallenge (server)
    /// > -> TPMEnrollChallengeResponse
    /// > <- EnrollDeviceSuccess
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func enrollDevice<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Teleport_Devicetrust_V1_EnrollDeviceRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_EnrollDeviceResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_EnrollDeviceRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.enrollDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AuthenticateDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AuthenticateDevice performs the device authentication ceremony.
    /// > 
    /// > Device authentication exchanges existing user certificates without device
    /// > extensions for certificates augmented with device extensions. The new
    /// > certificates allow the user to perform device-aware actions.
    /// > 
    /// > Only registered and enrolled devices may perform device authentication.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authenticateDevice<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_AuthenticateDeviceResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_AuthenticateDeviceRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.authenticateDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConfirmDeviceWebAuthentication" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ConfirmDeviceWebAuthentication finalizes the device web authentication
    /// > ceremony started by the creation of a DeviceWebToken and subsequent
    /// > AuthenticateDevice call.
    /// > 
    /// > The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
    /// > method, which consequently augments the corresponding Web Session
    /// > certificates with device extensions.
    /// > 
    /// > This method must be called by the Teleport Proxy, and the Proxy itself must
    /// > be called by the same browser that started the on-behalf-of authentication
    /// > attempt. See the /webapi/device/webconfirm endpoint.
    /// > 
    /// > See
    /// > https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func confirmDeviceWebAuthentication<Result>(
        _ message: Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_ConfirmDeviceWebAuthenticationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.confirmDeviceWebAuthentication(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SyncInventory" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Syncs device inventory from a source exterior to Teleport, for example an
    /// > MDM.
    /// > Allows both partial and full syncs; for the latter, devices missing from
    /// > the external inventory are handled as specified.
    /// > Authorized either by a valid MDM service certificate or the appropriate
    /// > "device" permissions (create/update/delete).
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func syncInventory<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Teleport_Devicetrust_V1_SyncInventoryRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Teleport_Devicetrust_V1_SyncInventoryResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Teleport_Devicetrust_V1_SyncInventoryRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.syncInventory(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDevicesUsage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Superseded by ResourceUsageService.GetUsage.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDevicesUsage<Result>(
        _ message: Teleport_Devicetrust_V1_GetDevicesUsageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Devicetrust_V1_DevicesUsage>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Devicetrust_V1_GetDevicesUsageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDevicesUsage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}