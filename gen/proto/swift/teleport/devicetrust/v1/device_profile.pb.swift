// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/devicetrust/v1/device_profile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Device profile information acquired from an external source.
/// If present, it's used to further validate collected data.
struct Teleport_Devicetrust_V1_DeviceProfile: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Latest profile update time.
  /// System managed.
  var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  mutating func clearUpdateTime() {self._updateTime = nil}

  /// Non-descriptive model identifier.
  /// Example: "MacBookPro9,2".
  var modelIdentifier: String = String()

  /// OS version number, without the leading 'v'.
  /// See the Device's os_type for the general OS category.
  /// Example: "13.2.1".
  var osVersion: String = String()

  /// OS build identifier. Augments the os_version.
  /// Example: "22D68".
  var osBuild: String = String()

  /// Known OS users (distinct from the Teleport user).
  var osUsernames: [String] = []

  /// Jamf binary version, without the leading 'v'.
  /// Example: "9.27" or "10.44.1-t1677509507".
  var jamfBinaryVersion: String = String()

  /// External device identifier, for example the Jamf or Intune ID.
  var externalID: String = String()

  /// OS build supplemental number.
  /// May match `sw_vers` BuildVersion more closely in certain situations, like
  /// macOS rapid security response builds.
  /// Example: "22F770820d".
  var osBuildSupplemental: String = String()

  /// OS identifier.
  /// Mainly used to differentiate Linux distros, as there is be no variation
  /// for systems like macOS or Windows.
  /// Example: "ubuntu", "centos", "fedora", "rhel".
  var osID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.devicetrust.v1"

extension Teleport_Devicetrust_V1_DeviceProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceProfile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_time"),
    2: .standard(proto: "model_identifier"),
    3: .standard(proto: "os_version"),
    4: .standard(proto: "os_build"),
    5: .standard(proto: "os_usernames"),
    6: .standard(proto: "jamf_binary_version"),
    7: .standard(proto: "external_id"),
    8: .standard(proto: "os_build_supplemental"),
    9: .standard(proto: "os_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.modelIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.osVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.osBuild) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.osUsernames) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.jamfBinaryVersion) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.externalID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.osBuildSupplemental) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.osID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.modelIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.modelIdentifier, fieldNumber: 2)
    }
    if !self.osVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.osVersion, fieldNumber: 3)
    }
    if !self.osBuild.isEmpty {
      try visitor.visitSingularStringField(value: self.osBuild, fieldNumber: 4)
    }
    if !self.osUsernames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.osUsernames, fieldNumber: 5)
    }
    if !self.jamfBinaryVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.jamfBinaryVersion, fieldNumber: 6)
    }
    if !self.externalID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalID, fieldNumber: 7)
    }
    if !self.osBuildSupplemental.isEmpty {
      try visitor.visitSingularStringField(value: self.osBuildSupplemental, fieldNumber: 8)
    }
    if !self.osID.isEmpty {
      try visitor.visitSingularStringField(value: self.osID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Devicetrust_V1_DeviceProfile, rhs: Teleport_Devicetrust_V1_DeviceProfile) -> Bool {
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.modelIdentifier != rhs.modelIdentifier {return false}
    if lhs.osVersion != rhs.osVersion {return false}
    if lhs.osBuild != rhs.osBuild {return false}
    if lhs.osUsernames != rhs.osUsernames {return false}
    if lhs.jamfBinaryVersion != rhs.jamfBinaryVersion {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs.osBuildSupplemental != rhs.osBuildSupplemental {return false}
    if lhs.osID != rhs.osID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
