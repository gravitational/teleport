// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/devicetrust/v1/device_web_token.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A device web token is a token used to device-authenticate a Web UI session.
///
/// Tokens are generally acquired on login and exchanged for a single
/// on-behalf-of device authentication attempt, performed by Connect.
///
/// See
/// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-token.
struct Teleport_Devicetrust_V1_DeviceWebToken: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Opaque token identifier.
  /// Required for token usage.
  /// System-generated.
  var id: String = String()

  /// Opaque device web token, in plaintext, encoded in base64.RawURLEncoding
  /// (so it is inherently safe for URl use).
  /// Required for token usage.
  /// System-generated.
  var token: String = String()

  /// Identifier for the Web Session being device-authorized.
  /// Required for creation.
  var webSessionID: String = String()

  /// Browser user agent, as acquired from the Web UI browser.
  /// Used as part of expected device checks.
  /// Required for creation.
  var browserUserAgent: String = String()

  /// Browser public IP, as acquired from the Web UI browser.
  /// Used as part of expected device checks.
  /// Required for creation.
  var browserIp: String = String()

  /// Owner of the Web Session and trusted device.
  /// Used internally by the Device Trust system.
  /// Transient.
  var user: String = String()

  /// ID of the devices allowed to perform on-behalf-of device authentication.
  /// Used internally by the Device Trust system.
  /// Transient.
  var expectedDeviceIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.devicetrust.v1"

extension Teleport_Devicetrust_V1_DeviceWebToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceWebToken"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "token"),
    3: .standard(proto: "web_session_id"),
    4: .standard(proto: "browser_user_agent"),
    5: .standard(proto: "browser_ip"),
    6: .same(proto: "user"),
    7: .standard(proto: "expected_device_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.webSessionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.browserUserAgent) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.browserIp) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.user) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.expectedDeviceIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    if !self.webSessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.webSessionID, fieldNumber: 3)
    }
    if !self.browserUserAgent.isEmpty {
      try visitor.visitSingularStringField(value: self.browserUserAgent, fieldNumber: 4)
    }
    if !self.browserIp.isEmpty {
      try visitor.visitSingularStringField(value: self.browserIp, fieldNumber: 5)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 6)
    }
    if !self.expectedDeviceIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.expectedDeviceIds, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Devicetrust_V1_DeviceWebToken, rhs: Teleport_Devicetrust_V1_DeviceWebToken) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.token != rhs.token {return false}
    if lhs.webSessionID != rhs.webSessionID {return false}
    if lhs.browserUserAgent != rhs.browserUserAgent {return false}
    if lhs.browserIp != rhs.browserIp {return false}
    if lhs.user != rhs.user {return false}
    if lhs.expectedDeviceIds != rhs.expectedDeviceIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
