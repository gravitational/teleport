// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/devicetrust/v1/assert.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request to assert an enrolled device. Assertion authenticates the device,
/// regardless of the user driving the assertion.
///
/// Assertion messages are meant to be included by other requests and responses,
/// either streams or multi-stage RPCs. The ceremony is resolved by a co-located
/// DeviceTrustService.
///
/// See the lib/devicetrust/assert (client) and lib/devicetrust/assertserver
/// (server) packages.
///
/// Assertion ceremony flow:
/// -> AssertDeviceInit (client)
/// <- AssertDeviceChallenge (server)
/// -> AssertDeviceChallengeResponse (client)
/// <- DeviceAsserted (server)
///
/// A successful ceremony signifies that the device is registered, enrolled and
/// passed the authentication challenge.
struct Teleport_Devicetrust_V1_AssertDeviceRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Teleport_Devicetrust_V1_AssertDeviceRequest.OneOf_Payload? = nil

  var init_p: Teleport_Devicetrust_V1_AssertDeviceInit {
    get {
      if case .init_p(let v)? = payload {return v}
      return Teleport_Devicetrust_V1_AssertDeviceInit()
    }
    set {payload = .init_p(newValue)}
  }

  var challengeResponse: Teleport_Devicetrust_V1_AuthenticateDeviceChallengeResponse {
    get {
      if case .challengeResponse(let v)? = payload {return v}
      return Teleport_Devicetrust_V1_AuthenticateDeviceChallengeResponse()
    }
    set {payload = .challengeResponse(newValue)}
  }

  var tpmChallengeResponse: Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallengeResponse {
    get {
      if case .tpmChallengeResponse(let v)? = payload {return v}
      return Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallengeResponse()
    }
    set {payload = .tpmChallengeResponse(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable, Sendable {
    case init_p(Teleport_Devicetrust_V1_AssertDeviceInit)
    case challengeResponse(Teleport_Devicetrust_V1_AuthenticateDeviceChallengeResponse)
    case tpmChallengeResponse(Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallengeResponse)

  }

  init() {}
}

/// Response of the device assertion ceremony.
/// See [AssertDeviceRequest].
struct Teleport_Devicetrust_V1_AssertDeviceResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Teleport_Devicetrust_V1_AssertDeviceResponse.OneOf_Payload? = nil

  var challenge: Teleport_Devicetrust_V1_AuthenticateDeviceChallenge {
    get {
      if case .challenge(let v)? = payload {return v}
      return Teleport_Devicetrust_V1_AuthenticateDeviceChallenge()
    }
    set {payload = .challenge(newValue)}
  }

  var tpmChallenge: Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallenge {
    get {
      if case .tpmChallenge(let v)? = payload {return v}
      return Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallenge()
    }
    set {payload = .tpmChallenge(newValue)}
  }

  var deviceAsserted: Teleport_Devicetrust_V1_DeviceAsserted {
    get {
      if case .deviceAsserted(let v)? = payload {return v}
      return Teleport_Devicetrust_V1_DeviceAsserted()
    }
    set {payload = .deviceAsserted(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable, Sendable {
    case challenge(Teleport_Devicetrust_V1_AuthenticateDeviceChallenge)
    case tpmChallenge(Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallenge)
    case deviceAsserted(Teleport_Devicetrust_V1_DeviceAsserted)

  }

  init() {}
}

/// AssertDeviceInit initiates the device assertion ceremony.
/// See [AssertDeviceRequest].
struct Teleport_Devicetrust_V1_AssertDeviceInit: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID of the enrolled device credential.
  var credentialID: String = String()

  /// Device collected data.
  /// Matched against the device registration information and any previously
  /// collected data.
  var deviceData: Teleport_Devicetrust_V1_DeviceCollectedData {
    get {return _deviceData ?? Teleport_Devicetrust_V1_DeviceCollectedData()}
    set {_deviceData = newValue}
  }
  /// Returns true if `deviceData` has been explicitly set.
  var hasDeviceData: Bool {return self._deviceData != nil}
  /// Clears the value of `deviceData`. Subsequent reads from it will return its default value.
  mutating func clearDeviceData() {self._deviceData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deviceData: Teleport_Devicetrust_V1_DeviceCollectedData? = nil
}

/// DeviceAsserted marks a successful device assertion ceremony.
/// See [AssertDeviceRequest].
struct Teleport_Devicetrust_V1_DeviceAsserted: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.devicetrust.v1"

extension Teleport_Devicetrust_V1_AssertDeviceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssertDeviceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "init"),
    2: .standard(proto: "challenge_response"),
    3: .standard(proto: "tpm_challenge_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Teleport_Devicetrust_V1_AssertDeviceInit?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .init_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .init_p(v)
        }
      }()
      case 2: try {
        var v: Teleport_Devicetrust_V1_AuthenticateDeviceChallengeResponse?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .challengeResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .challengeResponse(v)
        }
      }()
      case 3: try {
        var v: Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallengeResponse?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .tpmChallengeResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .tpmChallengeResponse(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .init_p?: try {
      guard case .init_p(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .challengeResponse?: try {
      guard case .challengeResponse(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .tpmChallengeResponse?: try {
      guard case .tpmChallengeResponse(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Devicetrust_V1_AssertDeviceRequest, rhs: Teleport_Devicetrust_V1_AssertDeviceRequest) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Devicetrust_V1_AssertDeviceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssertDeviceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "challenge"),
    2: .standard(proto: "tpm_challenge"),
    3: .standard(proto: "device_asserted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Teleport_Devicetrust_V1_AuthenticateDeviceChallenge?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .challenge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .challenge(v)
        }
      }()
      case 2: try {
        var v: Teleport_Devicetrust_V1_TPMAuthenticateDeviceChallenge?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .tpmChallenge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .tpmChallenge(v)
        }
      }()
      case 3: try {
        var v: Teleport_Devicetrust_V1_DeviceAsserted?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .deviceAsserted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .deviceAsserted(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .challenge?: try {
      guard case .challenge(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .tpmChallenge?: try {
      guard case .tpmChallenge(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .deviceAsserted?: try {
      guard case .deviceAsserted(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Devicetrust_V1_AssertDeviceResponse, rhs: Teleport_Devicetrust_V1_AssertDeviceResponse) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Devicetrust_V1_AssertDeviceInit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssertDeviceInit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "credential_id"),
    2: .standard(proto: "device_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.credentialID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._deviceData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.credentialID.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialID, fieldNumber: 1)
    }
    try { if let v = self._deviceData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Devicetrust_V1_AssertDeviceInit, rhs: Teleport_Devicetrust_V1_AssertDeviceInit) -> Bool {
    if lhs.credentialID != rhs.credentialID {return false}
    if lhs._deviceData != rhs._deviceData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Devicetrust_V1_DeviceAsserted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceAsserted"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Devicetrust_V1_DeviceAsserted, rhs: Teleport_Devicetrust_V1_DeviceAsserted) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
