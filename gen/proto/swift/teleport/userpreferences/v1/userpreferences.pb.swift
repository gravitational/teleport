// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/userpreferences/v1/userpreferences.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UserPreferences is a collection of different user changeable preferences for the frontend.
struct Teleport_Userpreferences_V1_UserPreferences: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// theme is the theme of the frontend.
  var theme: Teleport_Userpreferences_V1_Theme = .unspecified

  /// onboard is the preferences from the onboarding questionnaire.
  var onboard: Teleport_Userpreferences_V1_OnboardUserPreferences {
    get {return _onboard ?? Teleport_Userpreferences_V1_OnboardUserPreferences()}
    set {_onboard = newValue}
  }
  /// Returns true if `onboard` has been explicitly set.
  var hasOnboard: Bool {return self._onboard != nil}
  /// Clears the value of `onboard`. Subsequent reads from it will return its default value.
  mutating func clearOnboard() {self._onboard = nil}

  /// cluster_preferences are user preferences saved per cluster.
  var clusterPreferences: Teleport_Userpreferences_V1_ClusterUserPreferences {
    get {return _clusterPreferences ?? Teleport_Userpreferences_V1_ClusterUserPreferences()}
    set {_clusterPreferences = newValue}
  }
  /// Returns true if `clusterPreferences` has been explicitly set.
  var hasClusterPreferences: Bool {return self._clusterPreferences != nil}
  /// Clears the value of `clusterPreferences`. Subsequent reads from it will return its default value.
  mutating func clearClusterPreferences() {self._clusterPreferences = nil}

  /// unified_resource_preferences are user preferences saved for the Unified Resource web UI
  var unifiedResourcePreferences: Teleport_Userpreferences_V1_UnifiedResourcePreferences {
    get {return _unifiedResourcePreferences ?? Teleport_Userpreferences_V1_UnifiedResourcePreferences()}
    set {_unifiedResourcePreferences = newValue}
  }
  /// Returns true if `unifiedResourcePreferences` has been explicitly set.
  var hasUnifiedResourcePreferences: Bool {return self._unifiedResourcePreferences != nil}
  /// Clears the value of `unifiedResourcePreferences`. Subsequent reads from it will return its default value.
  mutating func clearUnifiedResourcePreferences() {self._unifiedResourcePreferences = nil}

  /// access_graph is the preferences for Access Graph.
  var accessGraph: Teleport_Userpreferences_V1_AccessGraphUserPreferences {
    get {return _accessGraph ?? Teleport_Userpreferences_V1_AccessGraphUserPreferences()}
    set {_accessGraph = newValue}
  }
  /// Returns true if `accessGraph` has been explicitly set.
  var hasAccessGraph: Bool {return self._accessGraph != nil}
  /// Clears the value of `accessGraph`. Subsequent reads from it will return its default value.
  mutating func clearAccessGraph() {self._accessGraph = nil}

  /// side_nav_drawer_mode is the sidenav drawer behavior preference in the frontend.
  var sideNavDrawerMode: Teleport_Userpreferences_V1_SideNavDrawerMode = .unspecified

  /// discover_resource_preferences are user preferences saved for the discover resource web UI.
  var discoverResourcePreferences: Teleport_Userpreferences_V1_DiscoverResourcePreferences {
    get {return _discoverResourcePreferences ?? Teleport_Userpreferences_V1_DiscoverResourcePreferences()}
    set {_discoverResourcePreferences = newValue}
  }
  /// Returns true if `discoverResourcePreferences` has been explicitly set.
  var hasDiscoverResourcePreferences: Bool {return self._discoverResourcePreferences != nil}
  /// Clears the value of `discoverResourcePreferences`. Subsequent reads from it will return its default value.
  mutating func clearDiscoverResourcePreferences() {self._discoverResourcePreferences = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _onboard: Teleport_Userpreferences_V1_OnboardUserPreferences? = nil
  fileprivate var _clusterPreferences: Teleport_Userpreferences_V1_ClusterUserPreferences? = nil
  fileprivate var _unifiedResourcePreferences: Teleport_Userpreferences_V1_UnifiedResourcePreferences? = nil
  fileprivate var _accessGraph: Teleport_Userpreferences_V1_AccessGraphUserPreferences? = nil
  fileprivate var _discoverResourcePreferences: Teleport_Userpreferences_V1_DiscoverResourcePreferences? = nil
}

/// GetUserPreferencesRequest is a request to get the user preferences.
struct Teleport_Userpreferences_V1_GetUserPreferencesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetUserPreferencesResponse is a response to get the user preferences.
struct Teleport_Userpreferences_V1_GetUserPreferencesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// preferences is the user preferences.
  var preferences: Teleport_Userpreferences_V1_UserPreferences {
    get {return _preferences ?? Teleport_Userpreferences_V1_UserPreferences()}
    set {_preferences = newValue}
  }
  /// Returns true if `preferences` has been explicitly set.
  var hasPreferences: Bool {return self._preferences != nil}
  /// Clears the value of `preferences`. Subsequent reads from it will return its default value.
  mutating func clearPreferences() {self._preferences = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _preferences: Teleport_Userpreferences_V1_UserPreferences? = nil
}

/// UpsertUserPreferencesRequest is a request to create or update the user preferences.
struct Teleport_Userpreferences_V1_UpsertUserPreferencesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// preferences is the new user preferences to set.
  var preferences: Teleport_Userpreferences_V1_UserPreferences {
    get {return _preferences ?? Teleport_Userpreferences_V1_UserPreferences()}
    set {_preferences = newValue}
  }
  /// Returns true if `preferences` has been explicitly set.
  var hasPreferences: Bool {return self._preferences != nil}
  /// Clears the value of `preferences`. Subsequent reads from it will return its default value.
  mutating func clearPreferences() {self._preferences = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _preferences: Teleport_Userpreferences_V1_UserPreferences? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.userpreferences.v1"

extension Teleport_Userpreferences_V1_UserPreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserPreferences"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "theme"),
    3: .same(proto: "onboard"),
    4: .standard(proto: "cluster_preferences"),
    5: .standard(proto: "unified_resource_preferences"),
    6: .standard(proto: "access_graph"),
    7: .standard(proto: "side_nav_drawer_mode"),
    8: .standard(proto: "discover_resource_preferences"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularEnumField(value: &self.theme) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._onboard) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._clusterPreferences) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._unifiedResourcePreferences) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._accessGraph) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.sideNavDrawerMode) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._discoverResourcePreferences) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.theme != .unspecified {
      try visitor.visitSingularEnumField(value: self.theme, fieldNumber: 2)
    }
    try { if let v = self._onboard {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._clusterPreferences {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._unifiedResourcePreferences {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._accessGraph {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.sideNavDrawerMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.sideNavDrawerMode, fieldNumber: 7)
    }
    try { if let v = self._discoverResourcePreferences {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Userpreferences_V1_UserPreferences, rhs: Teleport_Userpreferences_V1_UserPreferences) -> Bool {
    if lhs.theme != rhs.theme {return false}
    if lhs._onboard != rhs._onboard {return false}
    if lhs._clusterPreferences != rhs._clusterPreferences {return false}
    if lhs._unifiedResourcePreferences != rhs._unifiedResourcePreferences {return false}
    if lhs._accessGraph != rhs._accessGraph {return false}
    if lhs.sideNavDrawerMode != rhs.sideNavDrawerMode {return false}
    if lhs._discoverResourcePreferences != rhs._discoverResourcePreferences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Userpreferences_V1_GetUserPreferencesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserPreferencesRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Userpreferences_V1_GetUserPreferencesRequest, rhs: Teleport_Userpreferences_V1_GetUserPreferencesRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Userpreferences_V1_GetUserPreferencesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserPreferencesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "preferences"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._preferences) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._preferences {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Userpreferences_V1_GetUserPreferencesResponse, rhs: Teleport_Userpreferences_V1_GetUserPreferencesResponse) -> Bool {
    if lhs._preferences != rhs._preferences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Userpreferences_V1_UpsertUserPreferencesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpsertUserPreferencesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "preferences"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._preferences) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._preferences {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Userpreferences_V1_UpsertUserPreferencesRequest, rhs: Teleport_Userpreferences_V1_UpsertUserPreferencesRequest) -> Bool {
    if lhs._preferences != rhs._preferences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
