// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/userpreferences/v1/unified_resource_preferences.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// DefaultTab is the default tab selected in the unified resource web UI
enum Teleport_Userpreferences_V1_DefaultTab: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unspecified // = 0

  /// ALL is all resources
  case all // = 1

  /// PINNED is only pinned resources
  case pinned // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .all
    case 2: self = .pinned
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .all: return 1
    case .pinned: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Teleport_Userpreferences_V1_DefaultTab] = [
    .unspecified,
    .all,
    .pinned,
  ]

}

/// ViewMode is the view mode selected in the unified resource Web UI
enum Teleport_Userpreferences_V1_ViewMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unspecified // = 0

  /// CARD is the card view
  case card // = 1

  /// LIST is the list view
  case list // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .card
    case 2: self = .list
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .card: return 1
    case .list: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Teleport_Userpreferences_V1_ViewMode] = [
    .unspecified,
    .card,
    .list,
  ]

}

///* LabelsViewMode is whether the labels for resources should all be collapsed or expanded. This only applies to the list view. 
enum Teleport_Userpreferences_V1_LabelsViewMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unspecified // = 0

  /// EXPANDED is the expanded state which shows all labels for every resource.
  case expanded // = 1

  /// COLLAPSED is the collapsed state which hides all labels for every resource.
  case collapsed // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .expanded
    case 2: self = .collapsed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .expanded: return 1
    case .collapsed: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Teleport_Userpreferences_V1_LabelsViewMode] = [
    .unspecified,
    .expanded,
    .collapsed,
  ]

}

///* AvailableResourceMode specifies which option in the availability filter menu the user has selected, if any 
enum Teleport_Userpreferences_V1_AvailableResourceMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unspecified // = 0
  case all // = 1
  case accessible // = 2
  case requestable // = 3
  case none // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .all
    case 2: self = .accessible
    case 3: self = .requestable
    case 4: self = .none
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .all: return 1
    case .accessible: return 2
    case .requestable: return 3
    case .none: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Teleport_Userpreferences_V1_AvailableResourceMode] = [
    .unspecified,
    .all,
    .accessible,
    .requestable,
    .none,
  ]

}

/// UnifiedResourcePreferences are preferences used in the Unified Resource web UI
struct Teleport_Userpreferences_V1_UnifiedResourcePreferences: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// default_tab is the default tab selected in the unified resource web UI
  var defaultTab: Teleport_Userpreferences_V1_DefaultTab = .unspecified

  /// view_mode is the view mode selected in the unified resource Web UI
  var viewMode: Teleport_Userpreferences_V1_ViewMode = .unspecified

  /// labels_view_mode is whether the labels for resources should all be collapsed or expanded in the unified resource Web UI list view.
  var labelsViewMode: Teleport_Userpreferences_V1_LabelsViewMode = .unspecified

  /// available_resource_mode specifies which option in the availability filter menu the user has selected, if any
  var availableResourceMode: Teleport_Userpreferences_V1_AvailableResourceMode = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.userpreferences.v1"

extension Teleport_Userpreferences_V1_DefaultTab: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT_TAB_UNSPECIFIED"),
    1: .same(proto: "DEFAULT_TAB_ALL"),
    2: .same(proto: "DEFAULT_TAB_PINNED"),
  ]
}

extension Teleport_Userpreferences_V1_ViewMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VIEW_MODE_UNSPECIFIED"),
    1: .same(proto: "VIEW_MODE_CARD"),
    2: .same(proto: "VIEW_MODE_LIST"),
  ]
}

extension Teleport_Userpreferences_V1_LabelsViewMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LABELS_VIEW_MODE_UNSPECIFIED"),
    1: .same(proto: "LABELS_VIEW_MODE_EXPANDED"),
    2: .same(proto: "LABELS_VIEW_MODE_COLLAPSED"),
  ]
}

extension Teleport_Userpreferences_V1_AvailableResourceMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AVAILABLE_RESOURCE_MODE_UNSPECIFIED"),
    1: .same(proto: "AVAILABLE_RESOURCE_MODE_ALL"),
    2: .same(proto: "AVAILABLE_RESOURCE_MODE_ACCESSIBLE"),
    3: .same(proto: "AVAILABLE_RESOURCE_MODE_REQUESTABLE"),
    4: .same(proto: "AVAILABLE_RESOURCE_MODE_NONE"),
  ]
}

extension Teleport_Userpreferences_V1_UnifiedResourcePreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnifiedResourcePreferences"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "default_tab"),
    2: .standard(proto: "view_mode"),
    3: .standard(proto: "labels_view_mode"),
    4: .standard(proto: "available_resource_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.defaultTab) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.viewMode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.labelsViewMode) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.availableResourceMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.defaultTab != .unspecified {
      try visitor.visitSingularEnumField(value: self.defaultTab, fieldNumber: 1)
    }
    if self.viewMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.viewMode, fieldNumber: 2)
    }
    if self.labelsViewMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.labelsViewMode, fieldNumber: 3)
    }
    if self.availableResourceMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.availableResourceMode, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Userpreferences_V1_UnifiedResourcePreferences, rhs: Teleport_Userpreferences_V1_UnifiedResourcePreferences) -> Bool {
    if lhs.defaultTab != rhs.defaultTab {return false}
    if lhs.viewMode != rhs.viewMode {return false}
    if lhs.labelsViewMode != rhs.labelsViewMode {return false}
    if lhs.availableResourceMode != rhs.availableResourceMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
