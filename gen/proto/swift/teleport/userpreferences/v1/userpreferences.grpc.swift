// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: teleport/userpreferences/v1/userpreferences.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - teleport.userpreferences.v1.UserPreferencesService

/// Namespace containing generated types for the "teleport.userpreferences.v1.UserPreferencesService" service.
internal enum Teleport_Userpreferences_V1_UserPreferencesService {
    /// Service descriptor for the "teleport.userpreferences.v1.UserPreferencesService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.userpreferences.v1.UserPreferencesService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetUserPreferences" metadata.
        internal enum GetUserPreferences {
            /// Request type for "GetUserPreferences".
            internal typealias Input = Teleport_Userpreferences_V1_GetUserPreferencesRequest
            /// Response type for "GetUserPreferences".
            internal typealias Output = Teleport_Userpreferences_V1_GetUserPreferencesResponse
            /// Descriptor for "GetUserPreferences".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.userpreferences.v1.UserPreferencesService"),
                method: "GetUserPreferences"
            )
        }
        /// Namespace for "UpsertUserPreferences" metadata.
        internal enum UpsertUserPreferences {
            /// Request type for "UpsertUserPreferences".
            internal typealias Input = Teleport_Userpreferences_V1_UpsertUserPreferencesRequest
            /// Response type for "UpsertUserPreferences".
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "UpsertUserPreferences".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.userpreferences.v1.UserPreferencesService"),
                method: "UpsertUserPreferences"
            )
        }
        /// Descriptors for all methods in the "teleport.userpreferences.v1.UserPreferencesService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetUserPreferences.descriptor,
            UpsertUserPreferences.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "teleport.userpreferences.v1.UserPreferencesService" service.
    internal static let teleport_userpreferences_v1_UserPreferencesService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "teleport.userpreferences.v1.UserPreferencesService")
}

// MARK: teleport.userpreferences.v1.UserPreferencesService (client)

extension Teleport_Userpreferences_V1_UserPreferencesService {
    /// Generated client protocol for the "teleport.userpreferences.v1.UserPreferencesService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UserPreferencesService is a service that stores user settings.
    internal protocol ClientProtocol: Sendable {
        /// Call the "GetUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetUserPreferences returns the user preferences for a given user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Userpreferences_V1_GetUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Userpreferences_V1_GetUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Userpreferences_V1_GetUserPreferencesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Userpreferences_V1_GetUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Userpreferences_V1_GetUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Userpreferences_V1_GetUserPreferencesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Userpreferences_V1_GetUserPreferencesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpsertUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertUserPreferences creates or updates user preferences for a given username.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Userpreferences_V1_UpsertUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Userpreferences_V1_UpsertUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func upsertUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Userpreferences_V1_UpsertUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Userpreferences_V1_UpsertUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "teleport.userpreferences.v1.UserPreferencesService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UserPreferencesService is a service that stores user settings.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetUserPreferences returns the user preferences for a given user.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Userpreferences_V1_GetUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Userpreferences_V1_GetUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `Teleport_Userpreferences_V1_GetUserPreferencesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Userpreferences_V1_GetUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Userpreferences_V1_GetUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Teleport_Userpreferences_V1_GetUserPreferencesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Userpreferences_V1_GetUserPreferencesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Userpreferences_V1_UserPreferencesService.Method.GetUserPreferences.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpsertUserPreferences" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpsertUserPreferences creates or updates user preferences for a given username.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Teleport_Userpreferences_V1_UpsertUserPreferencesRequest` message.
        ///   - serializer: A serializer for `Teleport_Userpreferences_V1_UpsertUserPreferencesRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func upsertUserPreferences<Result>(
            request: GRPCCore.ClientRequest<Teleport_Userpreferences_V1_UpsertUserPreferencesRequest>,
            serializer: some GRPCCore.MessageSerializer<Teleport_Userpreferences_V1_UpsertUserPreferencesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Teleport_Userpreferences_V1_UserPreferencesService.Method.UpsertUserPreferences.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Teleport_Userpreferences_V1_UserPreferencesService.ClientProtocol {
    /// Call the "GetUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetUserPreferences returns the user preferences for a given user.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Userpreferences_V1_GetUserPreferencesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUserPreferences<Result>(
        request: GRPCCore.ClientRequest<Teleport_Userpreferences_V1_GetUserPreferencesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Userpreferences_V1_GetUserPreferencesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUserPreferences(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Userpreferences_V1_GetUserPreferencesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Teleport_Userpreferences_V1_GetUserPreferencesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertUserPreferences creates or updates user preferences for a given username.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Teleport_Userpreferences_V1_UpsertUserPreferencesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertUserPreferences<Result>(
        request: GRPCCore.ClientRequest<Teleport_Userpreferences_V1_UpsertUserPreferencesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.upsertUserPreferences(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Teleport_Userpreferences_V1_UpsertUserPreferencesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Teleport_Userpreferences_V1_UserPreferencesService.ClientProtocol {
    /// Call the "GetUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetUserPreferences returns the user preferences for a given user.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUserPreferences<Result>(
        _ message: Teleport_Userpreferences_V1_GetUserPreferencesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Teleport_Userpreferences_V1_GetUserPreferencesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Userpreferences_V1_GetUserPreferencesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUserPreferences(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertUserPreferences" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpsertUserPreferences creates or updates user preferences for a given username.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func upsertUserPreferences<Result>(
        _ message: Teleport_Userpreferences_V1_UpsertUserPreferencesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Teleport_Userpreferences_V1_UpsertUserPreferencesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.upsertUserPreferences(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}