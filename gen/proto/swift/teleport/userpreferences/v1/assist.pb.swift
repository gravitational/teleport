// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/userpreferences/v1/assist.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AssistViewMode is the way the assistant is displayed.
enum Teleport_Userpreferences_V1_AssistViewMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unspecified // = 0

  /// DOCKED is the assistant is docked to the right hand side of the screen.
  case docked // = 1

  /// POPUP is the assistant is displayed as a popup.
  case popup // = 2

  /// POPUP_EXPANDED is the assistant is displayed as a popup and expanded.
  case popupExpanded // = 3

  /// POPUP_EXPANDED_SIDEBAR_VISIBLE is the assistant is displayed as a popup and expanded with the sidebar visible.
  case popupExpandedSidebarVisible // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .docked
    case 2: self = .popup
    case 3: self = .popupExpanded
    case 4: self = .popupExpandedSidebarVisible
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .docked: return 1
    case .popup: return 2
    case .popupExpanded: return 3
    case .popupExpandedSidebarVisible: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Teleport_Userpreferences_V1_AssistViewMode] = [
    .unspecified,
    .docked,
    .popup,
    .popupExpanded,
    .popupExpandedSidebarVisible,
  ]

}

/// AssistUserPreferences is the user preferences for Assist.
struct Teleport_Userpreferences_V1_AssistUserPreferences: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// preferredLogins is an array of the logins a user would prefer to use when running a command, ordered by preference.
  var preferredLogins: [String] = []

  /// viewMode is the way the assistant is displayed.
  var viewMode: Teleport_Userpreferences_V1_AssistViewMode = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.userpreferences.v1"

extension Teleport_Userpreferences_V1_AssistViewMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ASSIST_VIEW_MODE_UNSPECIFIED"),
    1: .same(proto: "ASSIST_VIEW_MODE_DOCKED"),
    2: .same(proto: "ASSIST_VIEW_MODE_POPUP"),
    3: .same(proto: "ASSIST_VIEW_MODE_POPUP_EXPANDED"),
    4: .same(proto: "ASSIST_VIEW_MODE_POPUP_EXPANDED_SIDEBAR_VISIBLE"),
  ]
}

extension Teleport_Userpreferences_V1_AssistUserPreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssistUserPreferences"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "preferred_logins"),
    2: .standard(proto: "view_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.preferredLogins) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.viewMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.preferredLogins.isEmpty {
      try visitor.visitRepeatedStringField(value: self.preferredLogins, fieldNumber: 1)
    }
    if self.viewMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.viewMode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Teleport_Userpreferences_V1_AssistUserPreferences, rhs: Teleport_Userpreferences_V1_AssistUserPreferences) -> Bool {
    if lhs.preferredLogins != rhs.preferredLogins {return false}
    if lhs.viewMode != rhs.viewMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
