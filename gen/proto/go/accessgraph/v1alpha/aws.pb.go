//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: accessgraph/v1alpha/aws.proto

package accessgraphv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UsersPermissionsBoundaryType is the type of the permissions boundary.
type UsersPermissionsBoundaryType int32

const (
	// USERS_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED is an unspecified permissions
	// boundary type.
	UsersPermissionsBoundaryType_USERS_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED UsersPermissionsBoundaryType = 0
	// USERS_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY is a
	// permissions boundary policy.
	UsersPermissionsBoundaryType_USERS_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY UsersPermissionsBoundaryType = 1
)

// Enum value maps for UsersPermissionsBoundaryType.
var (
	UsersPermissionsBoundaryType_name = map[int32]string{
		0: "USERS_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED",
		1: "USERS_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY",
	}
	UsersPermissionsBoundaryType_value = map[string]int32{
		"USERS_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED":                 0,
		"USERS_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY": 1,
	}
)

func (x UsersPermissionsBoundaryType) Enum() *UsersPermissionsBoundaryType {
	p := new(UsersPermissionsBoundaryType)
	*p = x
	return p
}

func (x UsersPermissionsBoundaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsersPermissionsBoundaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_accessgraph_v1alpha_aws_proto_enumTypes[0].Descriptor()
}

func (UsersPermissionsBoundaryType) Type() protoreflect.EnumType {
	return &file_accessgraph_v1alpha_aws_proto_enumTypes[0]
}

func (x UsersPermissionsBoundaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsersPermissionsBoundaryType.Descriptor instead.
func (UsersPermissionsBoundaryType) EnumDescriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{0}
}

// RolePermissionsBoundaryType is the type of the permissions boundary.
type RolePermissionsBoundaryType int32

const (
	// ROLE_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED is an unspecified permissions
	// boundary type.
	RolePermissionsBoundaryType_ROLE_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED RolePermissionsBoundaryType = 0
	// ROLE_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY is a
	// permissions boundary policy.
	RolePermissionsBoundaryType_ROLE_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY RolePermissionsBoundaryType = 1
)

// Enum value maps for RolePermissionsBoundaryType.
var (
	RolePermissionsBoundaryType_name = map[int32]string{
		0: "ROLE_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED",
		1: "ROLE_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY",
	}
	RolePermissionsBoundaryType_value = map[string]int32{
		"ROLE_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED":                 0,
		"ROLE_PERMISSIONS_BOUNDARY_TYPE_PERMISSIONS_BOUNDARY_POLICY": 1,
	}
)

func (x RolePermissionsBoundaryType) Enum() *RolePermissionsBoundaryType {
	p := new(RolePermissionsBoundaryType)
	*p = x
	return p
}

func (x RolePermissionsBoundaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RolePermissionsBoundaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_accessgraph_v1alpha_aws_proto_enumTypes[1].Descriptor()
}

func (RolePermissionsBoundaryType) Type() protoreflect.EnumType {
	return &file_accessgraph_v1alpha_aws_proto_enumTypes[1]
}

func (x RolePermissionsBoundaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RolePermissionsBoundaryType.Descriptor instead.
func (RolePermissionsBoundaryType) EnumDescriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{1}
}

// AWSResourceList is a list of AWS resources supported by the access graph.
type AWSResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*AWSResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *AWSResourceList) Reset() {
	*x = AWSResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceList) ProtoMessage() {}

func (x *AWSResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceList.ProtoReflect.Descriptor instead.
func (*AWSResourceList) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{0}
}

func (x *AWSResourceList) GetResources() []*AWSResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// AWSResource is a list of AWS resources supported by the access graph.
type AWSResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*AWSResource_User
	//	*AWSResource_Group
	//	*AWSResource_UserInlinePolicy
	//	*AWSResource_UserGroups
	//	*AWSResource_Instance
	//	*AWSResource_Policy
	//	*AWSResource_UserAttachedPolicies
	//	*AWSResource_GroupAttachedPolicies
	//	*AWSResource_GroupInlinePolicy
	//	*AWSResource_S3Bucket
	//	*AWSResource_Role
	//	*AWSResource_RoleInlinePolicy
	//	*AWSResource_RoleAttachedPolicies
	//	*AWSResource_InstanceProfile
	//	*AWSResource_EksCluster
	//	*AWSResource_EksClusterAccessEntry
	//	*AWSResource_EksClusterAssociatedPolicy
	//	*AWSResource_Rds
	//	*AWSResource_SamlProvider
	//	*AWSResource_OidcProvider
	Resource isAWSResource_Resource `protobuf_oneof:"resource"`
}

func (x *AWSResource) Reset() {
	*x = AWSResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResource) ProtoMessage() {}

func (x *AWSResource) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResource.ProtoReflect.Descriptor instead.
func (*AWSResource) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{1}
}

func (m *AWSResource) GetResource() isAWSResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *AWSResource) GetUser() *AWSUserV1 {
	if x, ok := x.GetResource().(*AWSResource_User); ok {
		return x.User
	}
	return nil
}

func (x *AWSResource) GetGroup() *AWSGroupV1 {
	if x, ok := x.GetResource().(*AWSResource_Group); ok {
		return x.Group
	}
	return nil
}

func (x *AWSResource) GetUserInlinePolicy() *AWSUserInlinePolicyV1 {
	if x, ok := x.GetResource().(*AWSResource_UserInlinePolicy); ok {
		return x.UserInlinePolicy
	}
	return nil
}

func (x *AWSResource) GetUserGroups() *AWSUserGroupsV1 {
	if x, ok := x.GetResource().(*AWSResource_UserGroups); ok {
		return x.UserGroups
	}
	return nil
}

func (x *AWSResource) GetInstance() *AWSInstanceV1 {
	if x, ok := x.GetResource().(*AWSResource_Instance); ok {
		return x.Instance
	}
	return nil
}

func (x *AWSResource) GetPolicy() *AWSPolicyV1 {
	if x, ok := x.GetResource().(*AWSResource_Policy); ok {
		return x.Policy
	}
	return nil
}

func (x *AWSResource) GetUserAttachedPolicies() *AWSUserAttachedPolicies {
	if x, ok := x.GetResource().(*AWSResource_UserAttachedPolicies); ok {
		return x.UserAttachedPolicies
	}
	return nil
}

func (x *AWSResource) GetGroupAttachedPolicies() *AWSGroupAttachedPolicies {
	if x, ok := x.GetResource().(*AWSResource_GroupAttachedPolicies); ok {
		return x.GroupAttachedPolicies
	}
	return nil
}

func (x *AWSResource) GetGroupInlinePolicy() *AWSGroupInlinePolicyV1 {
	if x, ok := x.GetResource().(*AWSResource_GroupInlinePolicy); ok {
		return x.GroupInlinePolicy
	}
	return nil
}

func (x *AWSResource) GetS3Bucket() *AWSS3BucketV1 {
	if x, ok := x.GetResource().(*AWSResource_S3Bucket); ok {
		return x.S3Bucket
	}
	return nil
}

func (x *AWSResource) GetRole() *AWSRoleV1 {
	if x, ok := x.GetResource().(*AWSResource_Role); ok {
		return x.Role
	}
	return nil
}

func (x *AWSResource) GetRoleInlinePolicy() *AWSRoleInlinePolicyV1 {
	if x, ok := x.GetResource().(*AWSResource_RoleInlinePolicy); ok {
		return x.RoleInlinePolicy
	}
	return nil
}

func (x *AWSResource) GetRoleAttachedPolicies() *AWSRoleAttachedPolicies {
	if x, ok := x.GetResource().(*AWSResource_RoleAttachedPolicies); ok {
		return x.RoleAttachedPolicies
	}
	return nil
}

func (x *AWSResource) GetInstanceProfile() *AWSInstanceProfileV1 {
	if x, ok := x.GetResource().(*AWSResource_InstanceProfile); ok {
		return x.InstanceProfile
	}
	return nil
}

func (x *AWSResource) GetEksCluster() *AWSEKSClusterV1 {
	if x, ok := x.GetResource().(*AWSResource_EksCluster); ok {
		return x.EksCluster
	}
	return nil
}

func (x *AWSResource) GetEksClusterAccessEntry() *AWSEKSClusterAccessEntryV1 {
	if x, ok := x.GetResource().(*AWSResource_EksClusterAccessEntry); ok {
		return x.EksClusterAccessEntry
	}
	return nil
}

func (x *AWSResource) GetEksClusterAssociatedPolicy() *AWSEKSAssociatedAccessPolicyV1 {
	if x, ok := x.GetResource().(*AWSResource_EksClusterAssociatedPolicy); ok {
		return x.EksClusterAssociatedPolicy
	}
	return nil
}

func (x *AWSResource) GetRds() *AWSRDSDatabaseV1 {
	if x, ok := x.GetResource().(*AWSResource_Rds); ok {
		return x.Rds
	}
	return nil
}

func (x *AWSResource) GetSamlProvider() *AWSSAMLProviderV1 {
	if x, ok := x.GetResource().(*AWSResource_SamlProvider); ok {
		return x.SamlProvider
	}
	return nil
}

func (x *AWSResource) GetOidcProvider() *AWSOIDCProviderV1 {
	if x, ok := x.GetResource().(*AWSResource_OidcProvider); ok {
		return x.OidcProvider
	}
	return nil
}

type isAWSResource_Resource interface {
	isAWSResource_Resource()
}

type AWSResource_User struct {
	// user is an AWS user.
	User *AWSUserV1 `protobuf:"bytes,1,opt,name=user,proto3,oneof"`
}

type AWSResource_Group struct {
	// group is an AWS group.
	Group *AWSGroupV1 `protobuf:"bytes,2,opt,name=group,proto3,oneof"`
}

type AWSResource_UserInlinePolicy struct {
	// user_inline_policy is a policy that is inlined to an AWS user.
	UserInlinePolicy *AWSUserInlinePolicyV1 `protobuf:"bytes,3,opt,name=user_inline_policy,json=userInlinePolicy,proto3,oneof"`
}

type AWSResource_UserGroups struct {
	// user_groups is a list of AWS groups that an AWS user belongs to.
	UserGroups *AWSUserGroupsV1 `protobuf:"bytes,4,opt,name=user_groups,json=userGroups,proto3,oneof"`
}

type AWSResource_Instance struct {
	// instance is an AWS instance.
	Instance *AWSInstanceV1 `protobuf:"bytes,5,opt,name=instance,proto3,oneof"`
}

type AWSResource_Policy struct {
	// policy is an AWS policy.
	Policy *AWSPolicyV1 `protobuf:"bytes,6,opt,name=policy,proto3,oneof"`
}

type AWSResource_UserAttachedPolicies struct {
	// user_attached_policies is a list of AWS policies that are attached to an
	// AWS user.
	UserAttachedPolicies *AWSUserAttachedPolicies `protobuf:"bytes,7,opt,name=user_attached_policies,json=userAttachedPolicies,proto3,oneof"`
}

type AWSResource_GroupAttachedPolicies struct {
	// group_attached_policies is a list of AWS policies that are attached to an
	// AWS group.
	GroupAttachedPolicies *AWSGroupAttachedPolicies `protobuf:"bytes,8,opt,name=group_attached_policies,json=groupAttachedPolicies,proto3,oneof"`
}

type AWSResource_GroupInlinePolicy struct {
	// group_inline_policy is a policy that is inlined to an AWS group.
	GroupInlinePolicy *AWSGroupInlinePolicyV1 `protobuf:"bytes,9,opt,name=group_inline_policy,json=groupInlinePolicy,proto3,oneof"`
}

type AWSResource_S3Bucket struct {
	// s3_bucket is an AWS S3 bucket.
	S3Bucket *AWSS3BucketV1 `protobuf:"bytes,10,opt,name=s3_bucket,json=s3Bucket,proto3,oneof"`
}

type AWSResource_Role struct {
	// role is an AWS role.
	Role *AWSRoleV1 `protobuf:"bytes,11,opt,name=role,proto3,oneof"`
}

type AWSResource_RoleInlinePolicy struct {
	// role_inline_policy is a policy that is inlined to an AWS role.
	RoleInlinePolicy *AWSRoleInlinePolicyV1 `protobuf:"bytes,12,opt,name=role_inline_policy,json=roleInlinePolicy,proto3,oneof"`
}

type AWSResource_RoleAttachedPolicies struct {
	// role_attached_policies is a list of AWS policies that are attached to an
	// AWS role.
	RoleAttachedPolicies *AWSRoleAttachedPolicies `protobuf:"bytes,13,opt,name=role_attached_policies,json=roleAttachedPolicies,proto3,oneof"`
}

type AWSResource_InstanceProfile struct {
	// instance_profile is an AWS instance profile.
	InstanceProfile *AWSInstanceProfileV1 `protobuf:"bytes,14,opt,name=instance_profile,json=instanceProfile,proto3,oneof"`
}

type AWSResource_EksCluster struct {
	// eks_cluster is an AWS EKS cluster.
	EksCluster *AWSEKSClusterV1 `protobuf:"bytes,15,opt,name=eks_cluster,json=eksCluster,proto3,oneof"`
}

type AWSResource_EksClusterAccessEntry struct {
	// eks_cluster_access_entry is an access entry for a cluster.
	EksClusterAccessEntry *AWSEKSClusterAccessEntryV1 `protobuf:"bytes,16,opt,name=eks_cluster_access_entry,json=eksClusterAccessEntry,proto3,oneof"`
}

type AWSResource_EksClusterAssociatedPolicy struct {
	// eks_cluster_associated_policy is an associated policy for a single cluster.
	EksClusterAssociatedPolicy *AWSEKSAssociatedAccessPolicyV1 `protobuf:"bytes,17,opt,name=eks_cluster_associated_policy,json=eksClusterAssociatedPolicy,proto3,oneof"`
}

type AWSResource_Rds struct {
	// rds is an AWS RDS database.
	Rds *AWSRDSDatabaseV1 `protobuf:"bytes,18,opt,name=rds,proto3,oneof"`
}

type AWSResource_SamlProvider struct {
	// saml_provider is an AWS IAM SAML Identity Provider
	SamlProvider *AWSSAMLProviderV1 `protobuf:"bytes,19,opt,name=saml_provider,json=samlProvider,proto3,oneof"`
}

type AWSResource_OidcProvider struct {
	// oidc_provider is an AWS IAM OpenID Connect Identity Provider
	OidcProvider *AWSOIDCProviderV1 `protobuf:"bytes,20,opt,name=oidc_provider,json=oidcProvider,proto3,oneof"`
}

func (*AWSResource_User) isAWSResource_Resource() {}

func (*AWSResource_Group) isAWSResource_Resource() {}

func (*AWSResource_UserInlinePolicy) isAWSResource_Resource() {}

func (*AWSResource_UserGroups) isAWSResource_Resource() {}

func (*AWSResource_Instance) isAWSResource_Resource() {}

func (*AWSResource_Policy) isAWSResource_Resource() {}

func (*AWSResource_UserAttachedPolicies) isAWSResource_Resource() {}

func (*AWSResource_GroupAttachedPolicies) isAWSResource_Resource() {}

func (*AWSResource_GroupInlinePolicy) isAWSResource_Resource() {}

func (*AWSResource_S3Bucket) isAWSResource_Resource() {}

func (*AWSResource_Role) isAWSResource_Resource() {}

func (*AWSResource_RoleInlinePolicy) isAWSResource_Resource() {}

func (*AWSResource_RoleAttachedPolicies) isAWSResource_Resource() {}

func (*AWSResource_InstanceProfile) isAWSResource_Resource() {}

func (*AWSResource_EksCluster) isAWSResource_Resource() {}

func (*AWSResource_EksClusterAccessEntry) isAWSResource_Resource() {}

func (*AWSResource_EksClusterAssociatedPolicy) isAWSResource_Resource() {}

func (*AWSResource_Rds) isAWSResource_Resource() {}

func (*AWSResource_SamlProvider) isAWSResource_Resource() {}

func (*AWSResource_OidcProvider) isAWSResource_Resource() {}

// AWSUserInlinePolicyV1 is a policy that is inlined to an AWS user.
type AWSUserInlinePolicyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy_name is the name of the policy.
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// policy_document is the JSON document that defines the policy.
	PolicyDocument []byte `protobuf:"bytes,3,opt,name=policy_document,json=policyDocument,proto3" json:"policy_document,omitempty"`
	// account_id is the ID of the AWS account that the user belongs to.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// user is the user who the policy is attached to.
	User *AWSUserV1 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AWSUserInlinePolicyV1) Reset() {
	*x = AWSUserInlinePolicyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSUserInlinePolicyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSUserInlinePolicyV1) ProtoMessage() {}

func (x *AWSUserInlinePolicyV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSUserInlinePolicyV1.ProtoReflect.Descriptor instead.
func (*AWSUserInlinePolicyV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{2}
}

func (x *AWSUserInlinePolicyV1) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *AWSUserInlinePolicyV1) GetPolicyDocument() []byte {
	if x != nil {
		return x.PolicyDocument
	}
	return nil
}

func (x *AWSUserInlinePolicyV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSUserInlinePolicyV1) GetUser() *AWSUserV1 {
	if x != nil {
		return x.User
	}
	return nil
}

// AWSPolicyV1 is an AWS policy.
type AWSPolicyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the ARN of the AWS policy.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// created_at is the time when the AWS policy was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// default_version_id is the ID of the default version of the policy.
	DefaultVersionId string `protobuf:"bytes,3,opt,name=default_version_id,json=defaultVersionId,proto3" json:"default_version_id,omitempty"`
	// description is the description of the policy.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// is_attachable indicates whether the policy can be attached to an AWS
	// resource.
	IsAttachable bool `protobuf:"varint,5,opt,name=is_attachable,json=isAttachable,proto3" json:"is_attachable,omitempty"`
	// path is the path of the policy.
	Path string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	// policy_id is the ID of the policy.
	PolicyId string `protobuf:"bytes,7,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// tags is the list of tags that are attached to the policy.
	Tags []*AWSTag `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// update_at is the time when the policy was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// account_id is the ID of the AWS account that the policy belongs to.
	AccountId string `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// policty_name is the name of the policy.
	PolicyName string `protobuf:"bytes,11,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// policy_document is the JSON document that defines the policy.
	PolicyDocument []byte `protobuf:"bytes,12,opt,name=policy_document,json=policyDocument,proto3" json:"policy_document,omitempty"`
}

func (x *AWSPolicyV1) Reset() {
	*x = AWSPolicyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSPolicyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSPolicyV1) ProtoMessage() {}

func (x *AWSPolicyV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSPolicyV1.ProtoReflect.Descriptor instead.
func (*AWSPolicyV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{3}
}

func (x *AWSPolicyV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSPolicyV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSPolicyV1) GetDefaultVersionId() string {
	if x != nil {
		return x.DefaultVersionId
	}
	return ""
}

func (x *AWSPolicyV1) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AWSPolicyV1) GetIsAttachable() bool {
	if x != nil {
		return x.IsAttachable
	}
	return false
}

func (x *AWSPolicyV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AWSPolicyV1) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *AWSPolicyV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSPolicyV1) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AWSPolicyV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSPolicyV1) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *AWSPolicyV1) GetPolicyDocument() []byte {
	if x != nil {
		return x.PolicyDocument
	}
	return nil
}

// AWSGroupV1 is a group of AWS users.
type AWSGroupV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the ARN of the AWS group.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// created_at is the time when the AWS group was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// group_id is the ID of the AWS group.
	GroupId string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// name is the name of the AWS group.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// path is the path of the AWS group.
	Path string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// account_id is the ID of the AWS account that the group belongs to.
	AccountId string `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSGroupV1) Reset() {
	*x = AWSGroupV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSGroupV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSGroupV1) ProtoMessage() {}

func (x *AWSGroupV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSGroupV1.ProtoReflect.Descriptor instead.
func (*AWSGroupV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{4}
}

func (x *AWSGroupV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSGroupV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSGroupV1) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AWSGroupV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSGroupV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AWSGroupV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSUserGroupsV1 is a list of AWS groups that an AWS user belongs to.
type AWSUserGroupsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the AWS user.
	User *AWSUserV1 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// groups is the list of AWS groups that the user belongs to.
	Groups []*AWSGroupV1 `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *AWSUserGroupsV1) Reset() {
	*x = AWSUserGroupsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSUserGroupsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSUserGroupsV1) ProtoMessage() {}

func (x *AWSUserGroupsV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSUserGroupsV1.ProtoReflect.Descriptor instead.
func (*AWSUserGroupsV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{5}
}

func (x *AWSUserGroupsV1) GetUser() *AWSUserV1 {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AWSUserGroupsV1) GetGroups() []*AWSGroupV1 {
	if x != nil {
		return x.Groups
	}
	return nil
}

// AWSUserV1 is an AWS user.
type AWSUserV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the ARN of the AWS user.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// created_at is the time when the AWS user was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// path is the path of the AWS user.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// user_id is the ID of the AWS user.
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// user_name is the name of the AWS user.
	UserName string `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// password_last_used is the time when the user last used their password.
	PasswordLastUsed *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=password_last_used,json=passwordLastUsed,proto3" json:"password_last_used,omitempty"`
	// permissions_boundary is the permissions boundary of the user.
	PermissionsBoundary *UsersPermissionsBoundaryV1 `protobuf:"bytes,7,opt,name=permissions_boundary,json=permissionsBoundary,proto3" json:"permissions_boundary,omitempty"`
	// tags is the list of tags that are attached to the user.
	Tags []*AWSTag `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// account_id is the ID of the AWS account that the user belongs to.
	AccountId string `protobuf:"bytes,9,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSUserV1) Reset() {
	*x = AWSUserV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSUserV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSUserV1) ProtoMessage() {}

func (x *AWSUserV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSUserV1.ProtoReflect.Descriptor instead.
func (*AWSUserV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{6}
}

func (x *AWSUserV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSUserV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSUserV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AWSUserV1) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AWSUserV1) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AWSUserV1) GetPasswordLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.PasswordLastUsed
	}
	return nil
}

func (x *AWSUserV1) GetPermissionsBoundary() *UsersPermissionsBoundaryV1 {
	if x != nil {
		return x.PermissionsBoundary
	}
	return nil
}

func (x *AWSUserV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSUserV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSTag is a tag that is attached to an AWS resource.
type AWSTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the key of the tag.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the value of the tag.
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AWSTag) Reset() {
	*x = AWSTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTag) ProtoMessage() {}

func (x *AWSTag) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTag.ProtoReflect.Descriptor instead.
func (*AWSTag) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{7}
}

func (x *AWSTag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AWSTag) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// UsersPermissionsBoundaryV1 is the permissions boundary of a user.
type UsersPermissionsBoundaryV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permissions_boundary_arn is the ARN of the permissions boundary.
	PermissionsBoundaryArn string `protobuf:"bytes,1,opt,name=permissions_boundary_arn,json=permissionsBoundaryArn,proto3" json:"permissions_boundary_arn,omitempty"`
	// permissions_boundary_type is the ARN of the permissions boundary.
	PermissionsBoundaryType UsersPermissionsBoundaryType `protobuf:"varint,2,opt,name=permissions_boundary_type,json=permissionsBoundaryType,proto3,enum=accessgraph.v1alpha.UsersPermissionsBoundaryType" json:"permissions_boundary_type,omitempty"`
}

func (x *UsersPermissionsBoundaryV1) Reset() {
	*x = UsersPermissionsBoundaryV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersPermissionsBoundaryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersPermissionsBoundaryV1) ProtoMessage() {}

func (x *UsersPermissionsBoundaryV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersPermissionsBoundaryV1.ProtoReflect.Descriptor instead.
func (*UsersPermissionsBoundaryV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{8}
}

func (x *UsersPermissionsBoundaryV1) GetPermissionsBoundaryArn() string {
	if x != nil {
		return x.PermissionsBoundaryArn
	}
	return ""
}

func (x *UsersPermissionsBoundaryV1) GetPermissionsBoundaryType() UsersPermissionsBoundaryType {
	if x != nil {
		return x.PermissionsBoundaryType
	}
	return UsersPermissionsBoundaryType_USERS_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED
}

// AWSInstanceV1 is an AWS instance.
type AWSInstanceV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance_id is the ID of the AWS instance.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// launch_time is the time when the instance was launched.
	LaunchTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=launch_time,json=launchTime,proto3" json:"launch_time,omitempty"`
	// region is the region of the AWS instance.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// account_id is the ID of the AWS account that the instance belongs to.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// tags is the list of tags that are attached to the instance.
	Tags []*AWSTag `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// public_dns_name is the public DNS name of the instance.
	PublicDnsName string `protobuf:"bytes,6,opt,name=public_dns_name,json=publicDnsName,proto3" json:"public_dns_name,omitempty"`
	// iam_instance_profile_arn is the ARN of the IAM instance profile that is
	// associated with the instance.
	IamInstanceProfileArn *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=iam_instance_profile_arn,json=iamInstanceProfileArn,proto3" json:"iam_instance_profile_arn,omitempty"`
	// launch_key_name is the name of the key pair that is used to launch the
	// instance.
	LaunchKeyName *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=launch_key_name,json=launchKeyName,proto3" json:"launch_key_name,omitempty"`
}

func (x *AWSInstanceV1) Reset() {
	*x = AWSInstanceV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSInstanceV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSInstanceV1) ProtoMessage() {}

func (x *AWSInstanceV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSInstanceV1.ProtoReflect.Descriptor instead.
func (*AWSInstanceV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{9}
}

func (x *AWSInstanceV1) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AWSInstanceV1) GetLaunchTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LaunchTime
	}
	return nil
}

func (x *AWSInstanceV1) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSInstanceV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSInstanceV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSInstanceV1) GetPublicDnsName() string {
	if x != nil {
		return x.PublicDnsName
	}
	return ""
}

func (x *AWSInstanceV1) GetIamInstanceProfileArn() *wrapperspb.StringValue {
	if x != nil {
		return x.IamInstanceProfileArn
	}
	return nil
}

func (x *AWSInstanceV1) GetLaunchKeyName() *wrapperspb.StringValue {
	if x != nil {
		return x.LaunchKeyName
	}
	return nil
}

// AWSUserAttachedPolicies is a list of AWS policies that are attached to an
// AWS user.
type AWSUserAttachedPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the AWS user.
	User *AWSUserV1 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// policies is the list of AWS policies that are attached to the user.
	Policies []*AttachedPolicyV1 `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
	// account_id is the ID of the AWS account that the user belongs to.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSUserAttachedPolicies) Reset() {
	*x = AWSUserAttachedPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSUserAttachedPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSUserAttachedPolicies) ProtoMessage() {}

func (x *AWSUserAttachedPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSUserAttachedPolicies.ProtoReflect.Descriptor instead.
func (*AWSUserAttachedPolicies) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{10}
}

func (x *AWSUserAttachedPolicies) GetUser() *AWSUserV1 {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AWSUserAttachedPolicies) GetPolicies() []*AttachedPolicyV1 {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *AWSUserAttachedPolicies) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AttachedPolicyV1 is a AWS policy identifier.
type AttachedPolicyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy_name is the name of the policy.
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// arn is the ARN of the policy.
	Arn string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
}

func (x *AttachedPolicyV1) Reset() {
	*x = AttachedPolicyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedPolicyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedPolicyV1) ProtoMessage() {}

func (x *AttachedPolicyV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedPolicyV1.ProtoReflect.Descriptor instead.
func (*AttachedPolicyV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{11}
}

func (x *AttachedPolicyV1) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *AttachedPolicyV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

// AWSGroupAttachedPolicies is a list of AWS policies that are attached to an
// AWS group.
type AWSGroupAttachedPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group is the AWS group.
	Group *AWSGroupV1 `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// policies is the list of AWS policies that are attached to the group.
	Policies []*AttachedPolicyV1 `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
	// account_id is the ID of the AWS account that the group belongs to.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSGroupAttachedPolicies) Reset() {
	*x = AWSGroupAttachedPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSGroupAttachedPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSGroupAttachedPolicies) ProtoMessage() {}

func (x *AWSGroupAttachedPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSGroupAttachedPolicies.ProtoReflect.Descriptor instead.
func (*AWSGroupAttachedPolicies) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{12}
}

func (x *AWSGroupAttachedPolicies) GetGroup() *AWSGroupV1 {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AWSGroupAttachedPolicies) GetPolicies() []*AttachedPolicyV1 {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *AWSGroupAttachedPolicies) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSGroupInlinePolicyV1 is a policy that is inlined to an AWS Group.
type AWSGroupInlinePolicyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy_name is the name of the policy.
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// group is the AWS group.
	Group *AWSGroupV1 `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// policy_document is the JSON document that defines the policy.
	PolicyDocument []byte `protobuf:"bytes,3,opt,name=policy_document,json=policyDocument,proto3" json:"policy_document,omitempty"`
	// account_id is the ID of the AWS account that the group belongs to.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSGroupInlinePolicyV1) Reset() {
	*x = AWSGroupInlinePolicyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSGroupInlinePolicyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSGroupInlinePolicyV1) ProtoMessage() {}

func (x *AWSGroupInlinePolicyV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSGroupInlinePolicyV1.ProtoReflect.Descriptor instead.
func (*AWSGroupInlinePolicyV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{13}
}

func (x *AWSGroupInlinePolicyV1) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *AWSGroupInlinePolicyV1) GetGroup() *AWSGroupV1 {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AWSGroupInlinePolicyV1) GetPolicyDocument() []byte {
	if x != nil {
		return x.PolicyDocument
	}
	return nil
}

func (x *AWSGroupInlinePolicyV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSS3BucketV1 is an AWS S3 bucket.
type AWSS3BucketV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the AWS S3 bucket.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// account_id is the ID of the AWS account that the S3 bucket belongs to.
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// policy_document is the JSON document that defines the policy.
	PolicyDocument []byte `protobuf:"bytes,3,opt,name=policy_document,json=policyDocument,proto3" json:"policy_document,omitempty"`
	// is_public indicates whether the S3 bucket is public.
	IsPublic bool `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// acl is the ACL of the S3 bucket.
	Acls []*AWSS3BucketACL `protobuf:"bytes,5,rep,name=acls,proto3" json:"acls,omitempty"`
}

func (x *AWSS3BucketV1) Reset() {
	*x = AWSS3BucketV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSS3BucketV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSS3BucketV1) ProtoMessage() {}

func (x *AWSS3BucketV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSS3BucketV1.ProtoReflect.Descriptor instead.
func (*AWSS3BucketV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{14}
}

func (x *AWSS3BucketV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSS3BucketV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSS3BucketV1) GetPolicyDocument() []byte {
	if x != nil {
		return x.PolicyDocument
	}
	return nil
}

func (x *AWSS3BucketV1) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *AWSS3BucketV1) GetAcls() []*AWSS3BucketACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

// AWSS3BucketACL is the ACL of an AWS S3 bucket.
type AWSS3BucketACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// grantee is the grantee of the ACL.
	Grantee *AWSS3BucketACLGrantee `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// permission is the permission of the ACL.
	Permission string `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *AWSS3BucketACL) Reset() {
	*x = AWSS3BucketACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSS3BucketACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSS3BucketACL) ProtoMessage() {}

func (x *AWSS3BucketACL) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSS3BucketACL.ProtoReflect.Descriptor instead.
func (*AWSS3BucketACL) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{15}
}

func (x *AWSS3BucketACL) GetGrantee() *AWSS3BucketACLGrantee {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *AWSS3BucketACL) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

// AWSS3BucketACLGrantee is the grantee of an ACL.
type AWSS3BucketACLGrantee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// display_name is the name of the grantee.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// id is the ID of the grantee.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// email_address is the email address of the grantee.
	EmailAddress string `protobuf:"bytes,3,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// type is the type of the grantee.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// uri is the URI of the grantee.
	Uri string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *AWSS3BucketACLGrantee) Reset() {
	*x = AWSS3BucketACLGrantee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSS3BucketACLGrantee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSS3BucketACLGrantee) ProtoMessage() {}

func (x *AWSS3BucketACLGrantee) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSS3BucketACLGrantee.ProtoReflect.Descriptor instead.
func (*AWSS3BucketACLGrantee) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{16}
}

func (x *AWSS3BucketACLGrantee) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AWSS3BucketACLGrantee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSS3BucketACLGrantee) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *AWSS3BucketACLGrantee) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSS3BucketACLGrantee) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// AWSRoleV1 is an AWS role.
type AWSRoleV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the ARN of the AWS role.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// assume_role_policy_document is the JSON document that defines the trust
	// policy for the role.
	AssumeRolePolicyDocument []byte `protobuf:"bytes,2,opt,name=assume_role_policy_document,json=assumeRolePolicyDocument,proto3" json:"assume_role_policy_document,omitempty"`
	// created_at is the time when the role was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// description is the description of the role.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// max_session_duration is the maximum session duration of the role.
	MaxSessionDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=max_session_duration,json=maxSessionDuration,proto3" json:"max_session_duration,omitempty"`
	// path is the path of the role.
	Path string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	// permissions_boundary is the permissions boundary of the role.
	PermissionsBoundary *RolePermissionsBoundaryV1 `protobuf:"bytes,7,opt,name=permissions_boundary,json=permissionsBoundary,proto3" json:"permissions_boundary,omitempty"`
	// role_id is the ID of the role.
	RoleId string `protobuf:"bytes,8,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// name is the name of the role.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// tags is the list of tags that are attached to the role.
	Tags []*AWSTag `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	// role_last_used is the last used information of the role.
	RoleLastUsed *RoleLastUsedV1 `protobuf:"bytes,11,opt,name=role_last_used,json=roleLastUsed,proto3" json:"role_last_used,omitempty"`
	// account_id is the ID of the AWS account that the role belongs to.
	AccountId string `protobuf:"bytes,12,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSRoleV1) Reset() {
	*x = AWSRoleV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRoleV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRoleV1) ProtoMessage() {}

func (x *AWSRoleV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRoleV1.ProtoReflect.Descriptor instead.
func (*AWSRoleV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{17}
}

func (x *AWSRoleV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSRoleV1) GetAssumeRolePolicyDocument() []byte {
	if x != nil {
		return x.AssumeRolePolicyDocument
	}
	return nil
}

func (x *AWSRoleV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSRoleV1) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AWSRoleV1) GetMaxSessionDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxSessionDuration
	}
	return nil
}

func (x *AWSRoleV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AWSRoleV1) GetPermissionsBoundary() *RolePermissionsBoundaryV1 {
	if x != nil {
		return x.PermissionsBoundary
	}
	return nil
}

func (x *AWSRoleV1) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *AWSRoleV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSRoleV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSRoleV1) GetRoleLastUsed() *RoleLastUsedV1 {
	if x != nil {
		return x.RoleLastUsed
	}
	return nil
}

func (x *AWSRoleV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// RolePermissionsBoundaryV1 is the permissions boundary of a role.
type RolePermissionsBoundaryV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permissions_boundary_arn is the ARN of the permissions boundary.
	PermissionsBoundaryArn string `protobuf:"bytes,1,opt,name=permissions_boundary_arn,json=permissionsBoundaryArn,proto3" json:"permissions_boundary_arn,omitempty"`
	// permissions_boundary_type is the ARN of the permissions boundary.
	PermissionsBoundaryType RolePermissionsBoundaryType `protobuf:"varint,2,opt,name=permissions_boundary_type,json=permissionsBoundaryType,proto3,enum=accessgraph.v1alpha.RolePermissionsBoundaryType" json:"permissions_boundary_type,omitempty"`
}

func (x *RolePermissionsBoundaryV1) Reset() {
	*x = RolePermissionsBoundaryV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePermissionsBoundaryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePermissionsBoundaryV1) ProtoMessage() {}

func (x *RolePermissionsBoundaryV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePermissionsBoundaryV1.ProtoReflect.Descriptor instead.
func (*RolePermissionsBoundaryV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{18}
}

func (x *RolePermissionsBoundaryV1) GetPermissionsBoundaryArn() string {
	if x != nil {
		return x.PermissionsBoundaryArn
	}
	return ""
}

func (x *RolePermissionsBoundaryV1) GetPermissionsBoundaryType() RolePermissionsBoundaryType {
	if x != nil {
		return x.PermissionsBoundaryType
	}
	return RolePermissionsBoundaryType_ROLE_PERMISSIONS_BOUNDARY_TYPE_UNSPECIFIED
}

// RoleLastUsedV1 is the last used information of a role.
type RoleLastUsedV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last_used_date is the date when the role was last used.
	LastUsedDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_used_date,json=lastUsedDate,proto3" json:"last_used_date,omitempty"`
	// region is the region where the role was last used.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *RoleLastUsedV1) Reset() {
	*x = RoleLastUsedV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleLastUsedV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleLastUsedV1) ProtoMessage() {}

func (x *RoleLastUsedV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleLastUsedV1.ProtoReflect.Descriptor instead.
func (*RoleLastUsedV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{19}
}

func (x *RoleLastUsedV1) GetLastUsedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsedDate
	}
	return nil
}

func (x *RoleLastUsedV1) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// AWSRoleInlinePolicyV1 is a policy that is inlined to an AWS Role.
type AWSRoleInlinePolicyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy_name is the name of the policy.
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// policy_document is the JSON document that defines the policy.
	PolicyDocument []byte `protobuf:"bytes,3,opt,name=policy_document,json=policyDocument,proto3" json:"policy_document,omitempty"`
	// account_id is the ID of the AWS account that the role belongs to.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// aws_role is the role name of the AWS role that the policy is attached to.
	AwsRole *AWSRoleV1 `protobuf:"bytes,5,opt,name=aws_role,json=awsRole,proto3" json:"aws_role,omitempty"`
}

func (x *AWSRoleInlinePolicyV1) Reset() {
	*x = AWSRoleInlinePolicyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRoleInlinePolicyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRoleInlinePolicyV1) ProtoMessage() {}

func (x *AWSRoleInlinePolicyV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRoleInlinePolicyV1.ProtoReflect.Descriptor instead.
func (*AWSRoleInlinePolicyV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{20}
}

func (x *AWSRoleInlinePolicyV1) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *AWSRoleInlinePolicyV1) GetPolicyDocument() []byte {
	if x != nil {
		return x.PolicyDocument
	}
	return nil
}

func (x *AWSRoleInlinePolicyV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSRoleInlinePolicyV1) GetAwsRole() *AWSRoleV1 {
	if x != nil {
		return x.AwsRole
	}
	return nil
}

// AWSRoleAttachedPolicies is a list of AWS policies that are attached to an
// AWS role.
type AWSRoleAttachedPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policies is the list of AWS policies that are attached to the role.
	Policies []*AttachedPolicyV1 `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
	// account_id is the ID of the AWS account that the role belongs to.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// aws_role is the AWS role.
	AwsRole *AWSRoleV1 `protobuf:"bytes,4,opt,name=aws_role,json=awsRole,proto3" json:"aws_role,omitempty"`
}

func (x *AWSRoleAttachedPolicies) Reset() {
	*x = AWSRoleAttachedPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRoleAttachedPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRoleAttachedPolicies) ProtoMessage() {}

func (x *AWSRoleAttachedPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRoleAttachedPolicies.ProtoReflect.Descriptor instead.
func (*AWSRoleAttachedPolicies) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{21}
}

func (x *AWSRoleAttachedPolicies) GetPolicies() []*AttachedPolicyV1 {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *AWSRoleAttachedPolicies) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSRoleAttachedPolicies) GetAwsRole() *AWSRoleV1 {
	if x != nil {
		return x.AwsRole
	}
	return nil
}

// AWSInstanceProfileV1 is an AWS instance profile.
type AWSInstanceProfileV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the ARN of the AWS instance profile.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// created_at is the time when the instance profile was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// instance_profile_id is the ID of the instance profile.
	InstanceProfileId string `protobuf:"bytes,3,opt,name=instance_profile_id,json=instanceProfileId,proto3" json:"instance_profile_id,omitempty"`
	// instance_profile_name is the name of the instance profile.
	InstanceProfileName string `protobuf:"bytes,4,opt,name=instance_profile_name,json=instanceProfileName,proto3" json:"instance_profile_name,omitempty"`
	// path is the path of the instance profile.
	Path string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// roles is the list of roles that are associated with the instance profile.
	Roles []*AWSRoleV1 `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles,omitempty"`
	// tags is the list of tags that are attached to the instance profile.
	Tags []*AWSTag `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// account_id is the ID of the AWS account that the instance profile belongs
	// to.
	AccountId string `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSInstanceProfileV1) Reset() {
	*x = AWSInstanceProfileV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSInstanceProfileV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSInstanceProfileV1) ProtoMessage() {}

func (x *AWSInstanceProfileV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSInstanceProfileV1.ProtoReflect.Descriptor instead.
func (*AWSInstanceProfileV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{22}
}

func (x *AWSInstanceProfileV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSInstanceProfileV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSInstanceProfileV1) GetInstanceProfileId() string {
	if x != nil {
		return x.InstanceProfileId
	}
	return ""
}

func (x *AWSInstanceProfileV1) GetInstanceProfileName() string {
	if x != nil {
		return x.InstanceProfileName
	}
	return ""
}

func (x *AWSInstanceProfileV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AWSInstanceProfileV1) GetRoles() []*AWSRoleV1 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AWSInstanceProfileV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSInstanceProfileV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSEKSClusterV1 represents an AWS EKS cluster.
type AWSEKSClusterV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// arn is the cluster arn
	Arn string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	// created_at is the time when the instance profile was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// status is the cluster status.
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// version is the Kubernetes version that the cluster runs.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// tags is the list of tags that are attached to the instance profile.
	Tags []*AWSTag `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// region is the region where the cluster is located.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// account_id is the ID of the AWS account that the instance profile belongs
	// to.
	AccountId string `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSEKSClusterV1) Reset() {
	*x = AWSEKSClusterV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSEKSClusterV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEKSClusterV1) ProtoMessage() {}

func (x *AWSEKSClusterV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEKSClusterV1.ProtoReflect.Descriptor instead.
func (*AWSEKSClusterV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{23}
}

func (x *AWSEKSClusterV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSEKSClusterV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSEKSClusterV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSEKSClusterV1) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AWSEKSClusterV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AWSEKSClusterV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSEKSClusterV1) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSEKSClusterV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSEKSClusterAccessEntriesV1 represents an EKS cluster Access Entry.
type AWSEKSClusterAccessEntryV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster is the EKS cluster.
	Cluster *AWSEKSClusterV1 `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// access_entry_arn is the ARN of the access entry.
	AccessEntryArn string `protobuf:"bytes,2,opt,name=access_entry_arn,json=accessEntryArn,proto3" json:"access_entry_arn,omitempty"`
	// created_at is the time when the instance profile was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// kubernetes_groups is the list of groups from which the principal will inherit its permissions.
	KubernetesGroups []string `protobuf:"bytes,4,rep,name=kubernetes_groups,json=kubernetesGroups,proto3" json:"kubernetes_groups,omitempty"`
	// created_at is the time when the instance profile was created.
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// principal is the ARN of the IAM principal for the access entry.
	PrincipalArn string `protobuf:"bytes,6,opt,name=principal_arn,json=principalArn,proto3" json:"principal_arn,omitempty"`
	// tags is the list of tags that are attached to the instance profile.
	Tags []*AWSTag `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// type represents the type of the access entry.
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// username is the name of the Kubernetes user.
	Username string `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty"`
	// account_id is the ID of the AWS account that the instance profile belongs
	// to.
	AccountId string `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSEKSClusterAccessEntryV1) Reset() {
	*x = AWSEKSClusterAccessEntryV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSEKSClusterAccessEntryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEKSClusterAccessEntryV1) ProtoMessage() {}

func (x *AWSEKSClusterAccessEntryV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEKSClusterAccessEntryV1.ProtoReflect.Descriptor instead.
func (*AWSEKSClusterAccessEntryV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{24}
}

func (x *AWSEKSClusterAccessEntryV1) GetCluster() *AWSEKSClusterV1 {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *AWSEKSClusterAccessEntryV1) GetAccessEntryArn() string {
	if x != nil {
		return x.AccessEntryArn
	}
	return ""
}

func (x *AWSEKSClusterAccessEntryV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSEKSClusterAccessEntryV1) GetKubernetesGroups() []string {
	if x != nil {
		return x.KubernetesGroups
	}
	return nil
}

func (x *AWSEKSClusterAccessEntryV1) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *AWSEKSClusterAccessEntryV1) GetPrincipalArn() string {
	if x != nil {
		return x.PrincipalArn
	}
	return ""
}

func (x *AWSEKSClusterAccessEntryV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSEKSClusterAccessEntryV1) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSEKSClusterAccessEntryV1) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AWSEKSClusterAccessEntryV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSEKSAssociatedAccessPolicyV1 identifies an access policy association.
type AWSEKSAssociatedAccessPolicyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster is the EKS cluster.
	Cluster *AWSEKSClusterV1 `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// principal_arn is the principal that the associated access policy insides.
	PrincipalArn string `protobuf:"bytes,2,opt,name=principal_arn,json=principalArn,proto3" json:"principal_arn,omitempty"`
	// scope restricts the access policy.
	Scope *AWSEKSAccessScopeV1 `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	// associated_at is the date and time the AccessPolicy was associated with an AccessEntry.
	AssociatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=associated_at,json=associatedAt,proto3" json:"associated_at,omitempty"`
	// modified_at is the last modification to the object.
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// policy_arn is the ARN of the AccessPolicy.
	// Managed by AWS.
	PolicyArn string `protobuf:"bytes,6,opt,name=policy_arn,json=policyArn,proto3" json:"policy_arn,omitempty"`
	// account_id is the ID of the AWS account that the instance profile belongs
	// to.
	AccountId string `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AWSEKSAssociatedAccessPolicyV1) Reset() {
	*x = AWSEKSAssociatedAccessPolicyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSEKSAssociatedAccessPolicyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEKSAssociatedAccessPolicyV1) ProtoMessage() {}

func (x *AWSEKSAssociatedAccessPolicyV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEKSAssociatedAccessPolicyV1.ProtoReflect.Descriptor instead.
func (*AWSEKSAssociatedAccessPolicyV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{25}
}

func (x *AWSEKSAssociatedAccessPolicyV1) GetCluster() *AWSEKSClusterV1 {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *AWSEKSAssociatedAccessPolicyV1) GetPrincipalArn() string {
	if x != nil {
		return x.PrincipalArn
	}
	return ""
}

func (x *AWSEKSAssociatedAccessPolicyV1) GetScope() *AWSEKSAccessScopeV1 {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *AWSEKSAssociatedAccessPolicyV1) GetAssociatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssociatedAt
	}
	return nil
}

func (x *AWSEKSAssociatedAccessPolicyV1) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *AWSEKSAssociatedAccessPolicyV1) GetPolicyArn() string {
	if x != nil {
		return x.PolicyArn
	}
	return ""
}

func (x *AWSEKSAssociatedAccessPolicyV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// AWSEKSAccessScope identifies the scope to which the AssociatedAccessPolicy applies.
type AWSEKSAccessScopeV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// namespaces is the list of namespaces to scope the policy into.
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// type identifies which scope type was configured.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AWSEKSAccessScopeV1) Reset() {
	*x = AWSEKSAccessScopeV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSEKSAccessScopeV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEKSAccessScopeV1) ProtoMessage() {}

func (x *AWSEKSAccessScopeV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEKSAccessScopeV1.ProtoReflect.Descriptor instead.
func (*AWSEKSAccessScopeV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{26}
}

func (x *AWSEKSAccessScopeV1) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *AWSEKSAccessScopeV1) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// AWSRDSDatabaseV1 defines the database details.
type AWSRDSDatabaseV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the instance ARN.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// status is the instance status.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// name is the instance name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// engine_details describes the database engine details.
	EngineDetails *AWSRDSEngineV1 `protobuf:"bytes,4,opt,name=engine_details,json=engineDetails,proto3" json:"engine_details,omitempty"`
	// created_at is the time when the db instance was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// tags is the list of tags that are attached to the instance profile.
	Tags []*AWSTag `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// region is the database region location
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// is_cluster indicates if the database is a cluster.
	IsCluster bool `protobuf:"varint,8,opt,name=is_cluster,json=isCluster,proto3" json:"is_cluster,omitempty"`
	// account_id is the ID of the AWS account that the instance profile belongs
	// to.
	AccountId string `protobuf:"bytes,9,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// resource_id is the RDS unique resource id.
	ResourceId string `protobuf:"bytes,10,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *AWSRDSDatabaseV1) Reset() {
	*x = AWSRDSDatabaseV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRDSDatabaseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRDSDatabaseV1) ProtoMessage() {}

func (x *AWSRDSDatabaseV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRDSDatabaseV1.ProtoReflect.Descriptor instead.
func (*AWSRDSDatabaseV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{27}
}

func (x *AWSRDSDatabaseV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSRDSDatabaseV1) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AWSRDSDatabaseV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSRDSDatabaseV1) GetEngineDetails() *AWSRDSEngineV1 {
	if x != nil {
		return x.EngineDetails
	}
	return nil
}

func (x *AWSRDSDatabaseV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSRDSDatabaseV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSRDSDatabaseV1) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSRDSDatabaseV1) GetIsCluster() bool {
	if x != nil {
		return x.IsCluster
	}
	return false
}

func (x *AWSRDSDatabaseV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSRDSDatabaseV1) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// AWSRDSEngineV1 defines the database engine details
type AWSRDSEngineV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// engine is the engine the database runs.
	Engine string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// version holds the version information.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *AWSRDSEngineV1) Reset() {
	*x = AWSRDSEngineV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRDSEngineV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRDSEngineV1) ProtoMessage() {}

func (x *AWSRDSEngineV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRDSEngineV1.ProtoReflect.Descriptor instead.
func (*AWSRDSEngineV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{28}
}

func (x *AWSRDSEngineV1) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *AWSRDSEngineV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// AWSSAMLProviderV1 defines the SAML identity provider details.
type AWSSAMLProviderV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the provider ARN.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// created_at is the time when the SAML provider was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// valid_until is the expiration date and time for the SAML provider.
	ValidUntil *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	// tags is the list of tags that are attached to the SAML provider.
	Tags []*AWSTag `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// account_id is the ID of the AWS account that the provider belongs to.
	AccountId string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// entity_id is the SAML entity ID for this provider.
	EntityId string `protobuf:"bytes,6,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// sso_urls is a list of single sign-on service URLs for this identity provider.
	SsoUrls []string `protobuf:"bytes,7,rep,name=sso_urls,json=ssoUrls,proto3" json:"sso_urls,omitempty"`
	// signing_certificates is a list of signing certificates for this identity provider.
	SigningCertificates []string `protobuf:"bytes,8,rep,name=signing_certificates,json=signingCertificates,proto3" json:"signing_certificates,omitempty"`
}

func (x *AWSSAMLProviderV1) Reset() {
	*x = AWSSAMLProviderV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSSAMLProviderV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSAMLProviderV1) ProtoMessage() {}

func (x *AWSSAMLProviderV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSAMLProviderV1.ProtoReflect.Descriptor instead.
func (*AWSSAMLProviderV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{29}
}

func (x *AWSSAMLProviderV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSSAMLProviderV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSSAMLProviderV1) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

func (x *AWSSAMLProviderV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSSAMLProviderV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSSAMLProviderV1) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *AWSSAMLProviderV1) GetSsoUrls() []string {
	if x != nil {
		return x.SsoUrls
	}
	return nil
}

func (x *AWSSAMLProviderV1) GetSigningCertificates() []string {
	if x != nil {
		return x.SigningCertificates
	}
	return nil
}

// AWSOIDCProviderV1 defines the OIDC identity provider details.
type AWSOIDCProviderV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arn is the provider ARN.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// created_at is the time when the OIDC provider was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// tags is the list of tags that are attached to the SAML provider.
	Tags []*AWSTag `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// account_id is the ID of the AWS account that the provider belongs to.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// client_ids is a list of client IDs (audiences) associated with this OIDC provider.
	ClientIds []string `protobuf:"bytes,5,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
	// thumbprints is a list of certificate thumbprints for this OIDC provider.
	Thumbprints []string `protobuf:"bytes,6,rep,name=thumbprints,proto3" json:"thumbprints,omitempty"`
	// url is the URL for this OIDC provider.
	Url string `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AWSOIDCProviderV1) Reset() {
	*x = AWSOIDCProviderV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSOIDCProviderV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSOIDCProviderV1) ProtoMessage() {}

func (x *AWSOIDCProviderV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_aws_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSOIDCProviderV1.ProtoReflect.Descriptor instead.
func (*AWSOIDCProviderV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_aws_proto_rawDescGZIP(), []int{30}
}

func (x *AWSOIDCProviderV1) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSOIDCProviderV1) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AWSOIDCProviderV1) GetTags() []*AWSTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AWSOIDCProviderV1) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSOIDCProviderV1) GetClientIds() []string {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

func (x *AWSOIDCProviderV1) GetThumbprints() []string {
	if x != nil {
		return x.Thumbprints
	}
	return nil
}

func (x *AWSOIDCProviderV1) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_accessgraph_v1alpha_aws_proto protoreflect.FileDescriptor

var file_accessgraph_v1alpha_aws_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0f, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xf4, 0x0c, 0x0a, 0x0b, 0x41, 0x57, 0x53,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5a, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x48,
	0x00, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x67, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x31, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x57, 0x53, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x31, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x10, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x64, 0x0a,
	0x16, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x14, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x65,
	0x6b, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6b, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x18, 0x65, 0x6b, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53,
	0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x15, 0x65, 0x6b, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x78, 0x0a, 0x1d, 0x65, 0x6b, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57,
	0x53, 0x45, 0x4b, 0x53, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x1a,
	0x65, 0x6b, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x03, 0x72, 0x64,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57,
	0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x03, 0x72, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x41, 0x4d, 0x4c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x6c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x57, 0x53, 0x4f, 0x49, 0x44, 0x43, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x69, 0x64, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xc4, 0x01, 0x0a, 0x15, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd5, 0x03, 0x0a, 0x0b, 0x41, 0x57, 0x53, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57,
	0x53, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbb,
	0x01, 0x0a, 0x0a, 0x41, 0x57, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x31, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0f,
	0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x31, 0x12,
	0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x31, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xa0, 0x03, 0x0a,
	0x09, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x14, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x31, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x4e, 0x0a, 0x06, 0x41, 0x57, 0x53, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x31, 0x12, 0x38,
	0x0a, 0x18, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x72, 0x6e, 0x12, 0x6d, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x0d, 0x41, 0x57, 0x53, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x44, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x69, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x61, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x61, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x44,
	0x0a, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x22, 0xb3, 0x01,
	0x0a, 0x18, 0x41, 0x57, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x57, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x31, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x41, 0x57, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x31, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc1,
	0x01, 0x0a, 0x0d, 0x41, 0x57, 0x53, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x31,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x63, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57,
	0x53, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x61, 0x63,
	0x6c, 0x73, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x43, 0x4c, 0x12, 0x44, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x53,
	0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x41,
	0x57, 0x53, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x22, 0xc5, 0x04, 0x0a, 0x09, 0x41, 0x57, 0x53, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x31,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x72, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x61, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x31, 0x52, 0x13, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x49, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x56, 0x31, 0x52, 0x0c, 0x72,
	0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x19, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x31, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41,
	0x72, 0x6e, 0x12, 0x6c, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x6a, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x56, 0x31, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a,
	0x15, 0x41, 0x57, 0x53, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x08, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x6f, 0x6c, 0x65, 0x56,
	0x31, 0x52, 0x07, 0x61, 0x77, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x17, 0x41, 0x57, 0x53, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x31, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53,
	0x52, 0x6f, 0x6c, 0x65, 0x56, 0x31, 0x52, 0x07, 0x61, 0x77, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x14,
	0x41, 0x57, 0x53, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x57, 0x53, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x31, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x8c, 0x02, 0x0a, 0x0f, 0x41, 0x57, 0x53, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd0,
	0x03, 0x0a, 0x1a, 0x41, 0x57, 0x53, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x31, 0x12, 0x3e, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x31, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x72,
	0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x81, 0x03, 0x0a, 0x1e, 0x41, 0x57, 0x53, 0x45, 0x4b, 0x53, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x56, 0x31, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x45,
	0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x31, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x72, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x57, 0x53, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x56, 0x31, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x45, 0x4b, 0x53, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x56, 0x31, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xff, 0x02, 0x0a, 0x10, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x31,
	0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x57, 0x53, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x42, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x56, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x02, 0x0a, 0x11, 0x41, 0x57, 0x53, 0x53, 0x41,
	0x4d, 0x4c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x83, 0x02, 0x0a, 0x11, 0x41, 0x57, 0x53, 0x4f, 0x49, 0x44, 0x43, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x2a, 0x90, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x55, 0x53, 0x45, 0x52,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x3b, 0x55, 0x53, 0x45,
	0x52, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52,
	0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x2a, 0x8d, 0x01, 0x0a, 0x1b, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x3a, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52,
	0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accessgraph_v1alpha_aws_proto_rawDescOnce sync.Once
	file_accessgraph_v1alpha_aws_proto_rawDescData = file_accessgraph_v1alpha_aws_proto_rawDesc
)

func file_accessgraph_v1alpha_aws_proto_rawDescGZIP() []byte {
	file_accessgraph_v1alpha_aws_proto_rawDescOnce.Do(func() {
		file_accessgraph_v1alpha_aws_proto_rawDescData = protoimpl.X.CompressGZIP(file_accessgraph_v1alpha_aws_proto_rawDescData)
	})
	return file_accessgraph_v1alpha_aws_proto_rawDescData
}

var file_accessgraph_v1alpha_aws_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_accessgraph_v1alpha_aws_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_accessgraph_v1alpha_aws_proto_goTypes = []any{
	(UsersPermissionsBoundaryType)(0),      // 0: accessgraph.v1alpha.UsersPermissionsBoundaryType
	(RolePermissionsBoundaryType)(0),       // 1: accessgraph.v1alpha.RolePermissionsBoundaryType
	(*AWSResourceList)(nil),                // 2: accessgraph.v1alpha.AWSResourceList
	(*AWSResource)(nil),                    // 3: accessgraph.v1alpha.AWSResource
	(*AWSUserInlinePolicyV1)(nil),          // 4: accessgraph.v1alpha.AWSUserInlinePolicyV1
	(*AWSPolicyV1)(nil),                    // 5: accessgraph.v1alpha.AWSPolicyV1
	(*AWSGroupV1)(nil),                     // 6: accessgraph.v1alpha.AWSGroupV1
	(*AWSUserGroupsV1)(nil),                // 7: accessgraph.v1alpha.AWSUserGroupsV1
	(*AWSUserV1)(nil),                      // 8: accessgraph.v1alpha.AWSUserV1
	(*AWSTag)(nil),                         // 9: accessgraph.v1alpha.AWSTag
	(*UsersPermissionsBoundaryV1)(nil),     // 10: accessgraph.v1alpha.UsersPermissionsBoundaryV1
	(*AWSInstanceV1)(nil),                  // 11: accessgraph.v1alpha.AWSInstanceV1
	(*AWSUserAttachedPolicies)(nil),        // 12: accessgraph.v1alpha.AWSUserAttachedPolicies
	(*AttachedPolicyV1)(nil),               // 13: accessgraph.v1alpha.AttachedPolicyV1
	(*AWSGroupAttachedPolicies)(nil),       // 14: accessgraph.v1alpha.AWSGroupAttachedPolicies
	(*AWSGroupInlinePolicyV1)(nil),         // 15: accessgraph.v1alpha.AWSGroupInlinePolicyV1
	(*AWSS3BucketV1)(nil),                  // 16: accessgraph.v1alpha.AWSS3BucketV1
	(*AWSS3BucketACL)(nil),                 // 17: accessgraph.v1alpha.AWSS3BucketACL
	(*AWSS3BucketACLGrantee)(nil),          // 18: accessgraph.v1alpha.AWSS3BucketACLGrantee
	(*AWSRoleV1)(nil),                      // 19: accessgraph.v1alpha.AWSRoleV1
	(*RolePermissionsBoundaryV1)(nil),      // 20: accessgraph.v1alpha.RolePermissionsBoundaryV1
	(*RoleLastUsedV1)(nil),                 // 21: accessgraph.v1alpha.RoleLastUsedV1
	(*AWSRoleInlinePolicyV1)(nil),          // 22: accessgraph.v1alpha.AWSRoleInlinePolicyV1
	(*AWSRoleAttachedPolicies)(nil),        // 23: accessgraph.v1alpha.AWSRoleAttachedPolicies
	(*AWSInstanceProfileV1)(nil),           // 24: accessgraph.v1alpha.AWSInstanceProfileV1
	(*AWSEKSClusterV1)(nil),                // 25: accessgraph.v1alpha.AWSEKSClusterV1
	(*AWSEKSClusterAccessEntryV1)(nil),     // 26: accessgraph.v1alpha.AWSEKSClusterAccessEntryV1
	(*AWSEKSAssociatedAccessPolicyV1)(nil), // 27: accessgraph.v1alpha.AWSEKSAssociatedAccessPolicyV1
	(*AWSEKSAccessScopeV1)(nil),            // 28: accessgraph.v1alpha.AWSEKSAccessScopeV1
	(*AWSRDSDatabaseV1)(nil),               // 29: accessgraph.v1alpha.AWSRDSDatabaseV1
	(*AWSRDSEngineV1)(nil),                 // 30: accessgraph.v1alpha.AWSRDSEngineV1
	(*AWSSAMLProviderV1)(nil),              // 31: accessgraph.v1alpha.AWSSAMLProviderV1
	(*AWSOIDCProviderV1)(nil),              // 32: accessgraph.v1alpha.AWSOIDCProviderV1
	(*timestamppb.Timestamp)(nil),          // 33: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),         // 34: google.protobuf.StringValue
	(*durationpb.Duration)(nil),            // 35: google.protobuf.Duration
}
var file_accessgraph_v1alpha_aws_proto_depIdxs = []int32{
	3,  // 0: accessgraph.v1alpha.AWSResourceList.resources:type_name -> accessgraph.v1alpha.AWSResource
	8,  // 1: accessgraph.v1alpha.AWSResource.user:type_name -> accessgraph.v1alpha.AWSUserV1
	6,  // 2: accessgraph.v1alpha.AWSResource.group:type_name -> accessgraph.v1alpha.AWSGroupV1
	4,  // 3: accessgraph.v1alpha.AWSResource.user_inline_policy:type_name -> accessgraph.v1alpha.AWSUserInlinePolicyV1
	7,  // 4: accessgraph.v1alpha.AWSResource.user_groups:type_name -> accessgraph.v1alpha.AWSUserGroupsV1
	11, // 5: accessgraph.v1alpha.AWSResource.instance:type_name -> accessgraph.v1alpha.AWSInstanceV1
	5,  // 6: accessgraph.v1alpha.AWSResource.policy:type_name -> accessgraph.v1alpha.AWSPolicyV1
	12, // 7: accessgraph.v1alpha.AWSResource.user_attached_policies:type_name -> accessgraph.v1alpha.AWSUserAttachedPolicies
	14, // 8: accessgraph.v1alpha.AWSResource.group_attached_policies:type_name -> accessgraph.v1alpha.AWSGroupAttachedPolicies
	15, // 9: accessgraph.v1alpha.AWSResource.group_inline_policy:type_name -> accessgraph.v1alpha.AWSGroupInlinePolicyV1
	16, // 10: accessgraph.v1alpha.AWSResource.s3_bucket:type_name -> accessgraph.v1alpha.AWSS3BucketV1
	19, // 11: accessgraph.v1alpha.AWSResource.role:type_name -> accessgraph.v1alpha.AWSRoleV1
	22, // 12: accessgraph.v1alpha.AWSResource.role_inline_policy:type_name -> accessgraph.v1alpha.AWSRoleInlinePolicyV1
	23, // 13: accessgraph.v1alpha.AWSResource.role_attached_policies:type_name -> accessgraph.v1alpha.AWSRoleAttachedPolicies
	24, // 14: accessgraph.v1alpha.AWSResource.instance_profile:type_name -> accessgraph.v1alpha.AWSInstanceProfileV1
	25, // 15: accessgraph.v1alpha.AWSResource.eks_cluster:type_name -> accessgraph.v1alpha.AWSEKSClusterV1
	26, // 16: accessgraph.v1alpha.AWSResource.eks_cluster_access_entry:type_name -> accessgraph.v1alpha.AWSEKSClusterAccessEntryV1
	27, // 17: accessgraph.v1alpha.AWSResource.eks_cluster_associated_policy:type_name -> accessgraph.v1alpha.AWSEKSAssociatedAccessPolicyV1
	29, // 18: accessgraph.v1alpha.AWSResource.rds:type_name -> accessgraph.v1alpha.AWSRDSDatabaseV1
	31, // 19: accessgraph.v1alpha.AWSResource.saml_provider:type_name -> accessgraph.v1alpha.AWSSAMLProviderV1
	32, // 20: accessgraph.v1alpha.AWSResource.oidc_provider:type_name -> accessgraph.v1alpha.AWSOIDCProviderV1
	8,  // 21: accessgraph.v1alpha.AWSUserInlinePolicyV1.user:type_name -> accessgraph.v1alpha.AWSUserV1
	33, // 22: accessgraph.v1alpha.AWSPolicyV1.created_at:type_name -> google.protobuf.Timestamp
	9,  // 23: accessgraph.v1alpha.AWSPolicyV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	33, // 24: accessgraph.v1alpha.AWSPolicyV1.updated_at:type_name -> google.protobuf.Timestamp
	33, // 25: accessgraph.v1alpha.AWSGroupV1.created_at:type_name -> google.protobuf.Timestamp
	8,  // 26: accessgraph.v1alpha.AWSUserGroupsV1.user:type_name -> accessgraph.v1alpha.AWSUserV1
	6,  // 27: accessgraph.v1alpha.AWSUserGroupsV1.groups:type_name -> accessgraph.v1alpha.AWSGroupV1
	33, // 28: accessgraph.v1alpha.AWSUserV1.created_at:type_name -> google.protobuf.Timestamp
	33, // 29: accessgraph.v1alpha.AWSUserV1.password_last_used:type_name -> google.protobuf.Timestamp
	10, // 30: accessgraph.v1alpha.AWSUserV1.permissions_boundary:type_name -> accessgraph.v1alpha.UsersPermissionsBoundaryV1
	9,  // 31: accessgraph.v1alpha.AWSUserV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	34, // 32: accessgraph.v1alpha.AWSTag.value:type_name -> google.protobuf.StringValue
	0,  // 33: accessgraph.v1alpha.UsersPermissionsBoundaryV1.permissions_boundary_type:type_name -> accessgraph.v1alpha.UsersPermissionsBoundaryType
	33, // 34: accessgraph.v1alpha.AWSInstanceV1.launch_time:type_name -> google.protobuf.Timestamp
	9,  // 35: accessgraph.v1alpha.AWSInstanceV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	34, // 36: accessgraph.v1alpha.AWSInstanceV1.iam_instance_profile_arn:type_name -> google.protobuf.StringValue
	34, // 37: accessgraph.v1alpha.AWSInstanceV1.launch_key_name:type_name -> google.protobuf.StringValue
	8,  // 38: accessgraph.v1alpha.AWSUserAttachedPolicies.user:type_name -> accessgraph.v1alpha.AWSUserV1
	13, // 39: accessgraph.v1alpha.AWSUserAttachedPolicies.policies:type_name -> accessgraph.v1alpha.AttachedPolicyV1
	6,  // 40: accessgraph.v1alpha.AWSGroupAttachedPolicies.group:type_name -> accessgraph.v1alpha.AWSGroupV1
	13, // 41: accessgraph.v1alpha.AWSGroupAttachedPolicies.policies:type_name -> accessgraph.v1alpha.AttachedPolicyV1
	6,  // 42: accessgraph.v1alpha.AWSGroupInlinePolicyV1.group:type_name -> accessgraph.v1alpha.AWSGroupV1
	17, // 43: accessgraph.v1alpha.AWSS3BucketV1.acls:type_name -> accessgraph.v1alpha.AWSS3BucketACL
	18, // 44: accessgraph.v1alpha.AWSS3BucketACL.grantee:type_name -> accessgraph.v1alpha.AWSS3BucketACLGrantee
	33, // 45: accessgraph.v1alpha.AWSRoleV1.created_at:type_name -> google.protobuf.Timestamp
	35, // 46: accessgraph.v1alpha.AWSRoleV1.max_session_duration:type_name -> google.protobuf.Duration
	20, // 47: accessgraph.v1alpha.AWSRoleV1.permissions_boundary:type_name -> accessgraph.v1alpha.RolePermissionsBoundaryV1
	9,  // 48: accessgraph.v1alpha.AWSRoleV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	21, // 49: accessgraph.v1alpha.AWSRoleV1.role_last_used:type_name -> accessgraph.v1alpha.RoleLastUsedV1
	1,  // 50: accessgraph.v1alpha.RolePermissionsBoundaryV1.permissions_boundary_type:type_name -> accessgraph.v1alpha.RolePermissionsBoundaryType
	33, // 51: accessgraph.v1alpha.RoleLastUsedV1.last_used_date:type_name -> google.protobuf.Timestamp
	19, // 52: accessgraph.v1alpha.AWSRoleInlinePolicyV1.aws_role:type_name -> accessgraph.v1alpha.AWSRoleV1
	13, // 53: accessgraph.v1alpha.AWSRoleAttachedPolicies.policies:type_name -> accessgraph.v1alpha.AttachedPolicyV1
	19, // 54: accessgraph.v1alpha.AWSRoleAttachedPolicies.aws_role:type_name -> accessgraph.v1alpha.AWSRoleV1
	33, // 55: accessgraph.v1alpha.AWSInstanceProfileV1.created_at:type_name -> google.protobuf.Timestamp
	19, // 56: accessgraph.v1alpha.AWSInstanceProfileV1.roles:type_name -> accessgraph.v1alpha.AWSRoleV1
	9,  // 57: accessgraph.v1alpha.AWSInstanceProfileV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	33, // 58: accessgraph.v1alpha.AWSEKSClusterV1.created_at:type_name -> google.protobuf.Timestamp
	9,  // 59: accessgraph.v1alpha.AWSEKSClusterV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	25, // 60: accessgraph.v1alpha.AWSEKSClusterAccessEntryV1.cluster:type_name -> accessgraph.v1alpha.AWSEKSClusterV1
	33, // 61: accessgraph.v1alpha.AWSEKSClusterAccessEntryV1.created_at:type_name -> google.protobuf.Timestamp
	33, // 62: accessgraph.v1alpha.AWSEKSClusterAccessEntryV1.modified_at:type_name -> google.protobuf.Timestamp
	9,  // 63: accessgraph.v1alpha.AWSEKSClusterAccessEntryV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	25, // 64: accessgraph.v1alpha.AWSEKSAssociatedAccessPolicyV1.cluster:type_name -> accessgraph.v1alpha.AWSEKSClusterV1
	28, // 65: accessgraph.v1alpha.AWSEKSAssociatedAccessPolicyV1.scope:type_name -> accessgraph.v1alpha.AWSEKSAccessScopeV1
	33, // 66: accessgraph.v1alpha.AWSEKSAssociatedAccessPolicyV1.associated_at:type_name -> google.protobuf.Timestamp
	33, // 67: accessgraph.v1alpha.AWSEKSAssociatedAccessPolicyV1.modified_at:type_name -> google.protobuf.Timestamp
	30, // 68: accessgraph.v1alpha.AWSRDSDatabaseV1.engine_details:type_name -> accessgraph.v1alpha.AWSRDSEngineV1
	33, // 69: accessgraph.v1alpha.AWSRDSDatabaseV1.created_at:type_name -> google.protobuf.Timestamp
	9,  // 70: accessgraph.v1alpha.AWSRDSDatabaseV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	33, // 71: accessgraph.v1alpha.AWSSAMLProviderV1.created_at:type_name -> google.protobuf.Timestamp
	33, // 72: accessgraph.v1alpha.AWSSAMLProviderV1.valid_until:type_name -> google.protobuf.Timestamp
	9,  // 73: accessgraph.v1alpha.AWSSAMLProviderV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	33, // 74: accessgraph.v1alpha.AWSOIDCProviderV1.created_at:type_name -> google.protobuf.Timestamp
	9,  // 75: accessgraph.v1alpha.AWSOIDCProviderV1.tags:type_name -> accessgraph.v1alpha.AWSTag
	76, // [76:76] is the sub-list for method output_type
	76, // [76:76] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_accessgraph_v1alpha_aws_proto_init() }
func file_accessgraph_v1alpha_aws_proto_init() {
	if File_accessgraph_v1alpha_aws_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accessgraph_v1alpha_aws_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AWSResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AWSResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AWSUserInlinePolicyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AWSPolicyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AWSGroupV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AWSUserGroupsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AWSUserV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AWSTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UsersPermissionsBoundaryV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AWSInstanceV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AWSUserAttachedPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AttachedPolicyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AWSGroupAttachedPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AWSGroupInlinePolicyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AWSS3BucketV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AWSS3BucketACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AWSS3BucketACLGrantee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AWSRoleV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RolePermissionsBoundaryV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RoleLastUsedV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AWSRoleInlinePolicyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*AWSRoleAttachedPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AWSInstanceProfileV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*AWSEKSClusterV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AWSEKSClusterAccessEntryV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AWSEKSAssociatedAccessPolicyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AWSEKSAccessScopeV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*AWSRDSDatabaseV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*AWSRDSEngineV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AWSSAMLProviderV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_aws_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AWSOIDCProviderV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_accessgraph_v1alpha_aws_proto_msgTypes[1].OneofWrappers = []any{
		(*AWSResource_User)(nil),
		(*AWSResource_Group)(nil),
		(*AWSResource_UserInlinePolicy)(nil),
		(*AWSResource_UserGroups)(nil),
		(*AWSResource_Instance)(nil),
		(*AWSResource_Policy)(nil),
		(*AWSResource_UserAttachedPolicies)(nil),
		(*AWSResource_GroupAttachedPolicies)(nil),
		(*AWSResource_GroupInlinePolicy)(nil),
		(*AWSResource_S3Bucket)(nil),
		(*AWSResource_Role)(nil),
		(*AWSResource_RoleInlinePolicy)(nil),
		(*AWSResource_RoleAttachedPolicies)(nil),
		(*AWSResource_InstanceProfile)(nil),
		(*AWSResource_EksCluster)(nil),
		(*AWSResource_EksClusterAccessEntry)(nil),
		(*AWSResource_EksClusterAssociatedPolicy)(nil),
		(*AWSResource_Rds)(nil),
		(*AWSResource_SamlProvider)(nil),
		(*AWSResource_OidcProvider)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accessgraph_v1alpha_aws_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accessgraph_v1alpha_aws_proto_goTypes,
		DependencyIndexes: file_accessgraph_v1alpha_aws_proto_depIdxs,
		EnumInfos:         file_accessgraph_v1alpha_aws_proto_enumTypes,
		MessageInfos:      file_accessgraph_v1alpha_aws_proto_msgTypes,
	}.Build()
	File_accessgraph_v1alpha_aws_proto = out.File
	file_accessgraph_v1alpha_aws_proto_rawDesc = nil
	file_accessgraph_v1alpha_aws_proto_goTypes = nil
	file_accessgraph_v1alpha_aws_proto_depIdxs = nil
}
