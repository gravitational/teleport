//
// Teleport
// Copyright (C) 2025  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: accessgraph/v1alpha/github.proto

package accessgraphv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GitHubAuditLogV1Cursor holds the necessary state for resuming GitHub audit log collection.
type GitHubAuditLogV1Cursor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// token is next cursor to use in subsequent requests.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// last_event_id is the last event id received from github.
	LastEventId string `protobuf:"bytes,2,opt,name=last_event_id,json=lastEventId,proto3" json:"last_event_id,omitempty"`
	// last_event_time is the time of the last event seen.
	LastEventTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_event_time,json=lastEventTime,proto3" json:"last_event_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitHubAuditLogV1Cursor) Reset() {
	*x = GitHubAuditLogV1Cursor{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitHubAuditLogV1Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubAuditLogV1Cursor) ProtoMessage() {}

func (x *GitHubAuditLogV1Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubAuditLogV1Cursor.ProtoReflect.Descriptor instead.
func (*GitHubAuditLogV1Cursor) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{0}
}

func (x *GitHubAuditLogV1Cursor) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GitHubAuditLogV1Cursor) GetLastEventId() string {
	if x != nil {
		return x.LastEventId
	}
	return ""
}

func (x *GitHubAuditLogV1Cursor) GetLastEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEventTime
	}
	return nil
}

// GitHubAuditLogV1 bundles a batch of GitHub audit log events and the client's current resume cursor.
type GitHubAuditLogV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of GitHub audit events, each as a flexible JSON-like structure.
	Events []*structpb.Struct `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// Client's current GitHubAuditLogV1Cursor state, sent with this batch for resumable collection.
	Cursor        *GitHubAuditLogV1Cursor `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitHubAuditLogV1) Reset() {
	*x = GitHubAuditLogV1{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitHubAuditLogV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubAuditLogV1) ProtoMessage() {}

func (x *GitHubAuditLogV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubAuditLogV1.ProtoReflect.Descriptor instead.
func (*GitHubAuditLogV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{1}
}

func (x *GitHubAuditLogV1) GetEvents() []*structpb.Struct {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GitHubAuditLogV1) GetCursor() *GitHubAuditLogV1Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

// GitHubConfigV1 specifies configuration settings for GitHub audit log exports,
// including the desired start date for log collection.
type GitHubConfigV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The desired start date for exporting GitHub audit logs.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The Github Organization name.
	Organization  string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitHubConfigV1) Reset() {
	*x = GitHubConfigV1{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitHubConfigV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubConfigV1) ProtoMessage() {}

func (x *GitHubConfigV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubConfigV1.ProtoReflect.Descriptor instead.
func (*GitHubConfigV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{2}
}

func (x *GitHubConfigV1) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GitHubConfigV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// GithubTokenV1 holds information about a GitHub access token,
// such as its ID, owner, permissions, and expiration date.
type GithubTokenV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id is the token id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the token alias.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the token owner
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// expires is the token expiration time.
	Expires *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires,proto3" json:"expires,omitempty"`
	// permissions are the token permissions.
	Permissions []*GithubTokenV1Permission `protobuf:"bytes,5,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// The GitHub organization context for this permission, ex.: "gravitational".
	Organization  string `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubTokenV1) Reset() {
	*x = GithubTokenV1{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubTokenV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubTokenV1) ProtoMessage() {}

func (x *GithubTokenV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubTokenV1.ProtoReflect.Descriptor instead.
func (*GithubTokenV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{3}
}

func (x *GithubTokenV1) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GithubTokenV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GithubTokenV1) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GithubTokenV1) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *GithubTokenV1) GetPermissions() []*GithubTokenV1Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GithubTokenV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// GithubTokenV1Permission describes a single permission for a GitHub token,
// including its domain, verb, object, and organization.
type GithubTokenV1Permission struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The area or category the permission applies to, ex.: "repo", "issues", "actions_secrets".
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The action allowed by the permission, ex.: "read", "write", "admin".
	Verb string `protobuf:"bytes,2,opt,name=verb,proto3" json:"verb,omitempty"`
	// The specific resource or target of the action, ex.: "my-webapp", "*", "dependabot_secrets".
	Object string `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	// The GitHub organization context for this permission, ex.: "gravitational".
	Organization  string `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubTokenV1Permission) Reset() {
	*x = GithubTokenV1Permission{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubTokenV1Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubTokenV1Permission) ProtoMessage() {}

func (x *GithubTokenV1Permission) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubTokenV1Permission.ProtoReflect.Descriptor instead.
func (*GithubTokenV1Permission) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{4}
}

func (x *GithubTokenV1Permission) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GithubTokenV1Permission) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *GithubTokenV1Permission) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *GithubTokenV1Permission) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// GithubRoleAssignmentV1 holds information about a user's assignment to a role in a GitHub organization.
type GithubRoleAssignmentV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GitHub role ID.
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// True if the user has the 'owner' (administrator) privileges in the organization.
	Owner bool `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The GitHub username of the user assigned to the role, ex.: "octocat".
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// The name of the GitHub organization where the role assignment is made, ex.: "gravitational".
	Organization  string `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubRoleAssignmentV1) Reset() {
	*x = GithubRoleAssignmentV1{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubRoleAssignmentV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRoleAssignmentV1) ProtoMessage() {}

func (x *GithubRoleAssignmentV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRoleAssignmentV1.ProtoReflect.Descriptor instead.
func (*GithubRoleAssignmentV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{5}
}

func (x *GithubRoleAssignmentV1) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *GithubRoleAssignmentV1) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *GithubRoleAssignmentV1) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GithubRoleAssignmentV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// GithubRoleV1 represents a custom role defined within a GitHub organization.
type GithubRoleV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GitHub role ID.
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The human-readable name of the custom role, ex.: "Triage Lead", "Security Auditor".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The GitHub organization where this custom role is defined, ex.: "gravitational".
	Organization  string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubRoleV1) Reset() {
	*x = GithubRoleV1{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubRoleV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRoleV1) ProtoMessage() {}

func (x *GithubRoleV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRoleV1.ProtoReflect.Descriptor instead.
func (*GithubRoleV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{6}
}

func (x *GithubRoleV1) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *GithubRoleV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GithubRoleV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// GithubRepositoryV1 represents a GitHub repository, including its name,
// associated collaborators, and the organization it belongs to.
type GithubRepositoryV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the repository, ex.: "my-awesome-app", "project-x".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A list of GitHub usernames who are collaborators on this repository, ex.: ["octocat", "mona-lisa"].
	Collaborators []string `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	// The GitHub organization that owns or contains this repository, ex.: "gravitational".
	Organization  string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubRepositoryV1) Reset() {
	*x = GithubRepositoryV1{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubRepositoryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRepositoryV1) ProtoMessage() {}

func (x *GithubRepositoryV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRepositoryV1.ProtoReflect.Descriptor instead.
func (*GithubRepositoryV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{7}
}

func (x *GithubRepositoryV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GithubRepositoryV1) GetCollaborators() []string {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *GithubRepositoryV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// GithubSync is an empty message that signals a synchronization point,
// ex.: indicating the end of an initial full data sync from the client.
type GithubSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubSync) Reset() {
	*x = GithubSync{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubSync) ProtoMessage() {}

func (x *GithubSync) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubSync.ProtoReflect.Descriptor instead.
func (*GithubSync) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{8}
}

// GithubResourceList contains a list of GitHub resources,
// used for sending multiple resources in a single operation (ex.: batch upsert or delete).
type GithubResourceList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resources     []*GithubResource      `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubResourceList) Reset() {
	*x = GithubResourceList{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubResourceList) ProtoMessage() {}

func (x *GithubResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubResourceList.ProtoReflect.Descriptor instead.
func (*GithubResourceList) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{9}
}

func (x *GithubResourceList) GetResources() []*GithubResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// GithubResource acts as a container that holds one specific type of GitHub resource,
// such as a token, role assignment, role, or repository, using a 'oneof'.
type GithubResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Holds the actual specific GitHub resource data. Only one of these fields can be set.
	//
	// Types that are valid to be assigned to Resource:
	//
	//	*GithubResource_Token
	//	*GithubResource_RoleAssignment
	//	*GithubResource_Role
	//	*GithubResource_Repository
	Resource      isGithubResource_Resource `protobuf_oneof:"resource"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubResource) Reset() {
	*x = GithubResource{}
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubResource) ProtoMessage() {}

func (x *GithubResource) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_github_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubResource.ProtoReflect.Descriptor instead.
func (*GithubResource) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_github_proto_rawDescGZIP(), []int{10}
}

func (x *GithubResource) GetResource() isGithubResource_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *GithubResource) GetToken() *GithubTokenV1 {
	if x != nil {
		if x, ok := x.Resource.(*GithubResource_Token); ok {
			return x.Token
		}
	}
	return nil
}

func (x *GithubResource) GetRoleAssignment() *GithubRoleAssignmentV1 {
	if x != nil {
		if x, ok := x.Resource.(*GithubResource_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

func (x *GithubResource) GetRole() *GithubRoleV1 {
	if x != nil {
		if x, ok := x.Resource.(*GithubResource_Role); ok {
			return x.Role
		}
	}
	return nil
}

func (x *GithubResource) GetRepository() *GithubRepositoryV1 {
	if x != nil {
		if x, ok := x.Resource.(*GithubResource_Repository); ok {
			return x.Repository
		}
	}
	return nil
}

type isGithubResource_Resource interface {
	isGithubResource_Resource()
}

type GithubResource_Token struct {
	// A GitHub authentication token.
	Token *GithubTokenV1 `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}

type GithubResource_RoleAssignment struct {
	// An assignment of a GitHub role to a user.
	RoleAssignment *GithubRoleAssignmentV1 `protobuf:"bytes,2,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

type GithubResource_Role struct {
	// A custom-defined GitHub role.
	Role *GithubRoleV1 `protobuf:"bytes,3,opt,name=role,proto3,oneof"`
}

type GithubResource_Repository struct {
	// A GitHub repository.
	Repository *GithubRepositoryV1 `protobuf:"bytes,4,opt,name=repository,proto3,oneof"`
}

func (*GithubResource_Token) isGithubResource_Resource() {}

func (*GithubResource_RoleAssignment) isGithubResource_Resource() {}

func (*GithubResource_Role) isGithubResource_Resource() {}

func (*GithubResource_Repository) isGithubResource_Resource() {}

var File_accessgraph_v1alpha_github_proto protoreflect.FileDescriptor

const file_accessgraph_v1alpha_github_proto_rawDesc = "" +
	"\n" +
	" accessgraph/v1alpha/github.proto\x12\x13accessgraph.v1alpha\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x96\x01\n" +
	"\x16GitHubAuditLogV1Cursor\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\"\n" +
	"\rlast_event_id\x18\x02 \x01(\tR\vlastEventId\x12B\n" +
	"\x0flast_event_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\rlastEventTime\"\x88\x01\n" +
	"\x10GitHubAuditLogV1\x12/\n" +
	"\x06events\x18\x01 \x03(\v2\x17.google.protobuf.StructR\x06events\x12C\n" +
	"\x06cursor\x18\x02 \x01(\v2+.accessgraph.v1alpha.GitHubAuditLogV1CursorR\x06cursor\"o\n" +
	"\x0eGitHubConfigV1\x129\n" +
	"\n" +
	"start_date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartDate\x12\"\n" +
	"\forganization\x18\x02 \x01(\tR\forganization\"\xf3\x01\n" +
	"\rGithubTokenV1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\tR\x05owner\x124\n" +
	"\aexpires\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aexpires\x12N\n" +
	"\vpermissions\x18\x05 \x03(\v2,.accessgraph.v1alpha.GithubTokenV1PermissionR\vpermissions\x12\"\n" +
	"\forganization\x18\x06 \x01(\tR\forganization\"\x81\x01\n" +
	"\x17GithubTokenV1Permission\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x12\n" +
	"\x04verb\x18\x02 \x01(\tR\x04verb\x12\x16\n" +
	"\x06object\x18\x03 \x01(\tR\x06object\x12\"\n" +
	"\forganization\x18\x04 \x01(\tR\forganization\"\x7f\n" +
	"\x16GithubRoleAssignmentV1\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\x03R\x06roleId\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\bR\x05owner\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\"\n" +
	"\forganization\x18\x04 \x01(\tR\forganization\"_\n" +
	"\fGithubRoleV1\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\x03R\x06roleId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\"\n" +
	"\forganization\x18\x03 \x01(\tR\forganization\"r\n" +
	"\x12GithubRepositoryV1\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12$\n" +
	"\rcollaborators\x18\x02 \x03(\tR\rcollaborators\x12\"\n" +
	"\forganization\x18\x03 \x01(\tR\forganization\"\f\n" +
	"\n" +
	"GithubSync\"W\n" +
	"\x12GithubResourceList\x12A\n" +
	"\tresources\x18\x01 \x03(\v2#.accessgraph.v1alpha.GithubResourceR\tresources\"\xb4\x02\n" +
	"\x0eGithubResource\x12:\n" +
	"\x05token\x18\x01 \x01(\v2\".accessgraph.v1alpha.GithubTokenV1H\x00R\x05token\x12V\n" +
	"\x0frole_assignment\x18\x02 \x01(\v2+.accessgraph.v1alpha.GithubRoleAssignmentV1H\x00R\x0eroleAssignment\x127\n" +
	"\x04role\x18\x03 \x01(\v2!.accessgraph.v1alpha.GithubRoleV1H\x00R\x04role\x12I\n" +
	"\n" +
	"repository\x18\x04 \x01(\v2'.accessgraph.v1alpha.GithubRepositoryV1H\x00R\n" +
	"repositoryB\n" +
	"\n" +
	"\bresourceBWZUgithub.com/gravitational/teleport/gen/proto/go/accessgraph/v1alpha;accessgraphv1alphab\x06proto3"

var (
	file_accessgraph_v1alpha_github_proto_rawDescOnce sync.Once
	file_accessgraph_v1alpha_github_proto_rawDescData []byte
)

func file_accessgraph_v1alpha_github_proto_rawDescGZIP() []byte {
	file_accessgraph_v1alpha_github_proto_rawDescOnce.Do(func() {
		file_accessgraph_v1alpha_github_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_github_proto_rawDesc), len(file_accessgraph_v1alpha_github_proto_rawDesc)))
	})
	return file_accessgraph_v1alpha_github_proto_rawDescData
}

var file_accessgraph_v1alpha_github_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_accessgraph_v1alpha_github_proto_goTypes = []any{
	(*GitHubAuditLogV1Cursor)(nil),  // 0: accessgraph.v1alpha.GitHubAuditLogV1Cursor
	(*GitHubAuditLogV1)(nil),        // 1: accessgraph.v1alpha.GitHubAuditLogV1
	(*GitHubConfigV1)(nil),          // 2: accessgraph.v1alpha.GitHubConfigV1
	(*GithubTokenV1)(nil),           // 3: accessgraph.v1alpha.GithubTokenV1
	(*GithubTokenV1Permission)(nil), // 4: accessgraph.v1alpha.GithubTokenV1Permission
	(*GithubRoleAssignmentV1)(nil),  // 5: accessgraph.v1alpha.GithubRoleAssignmentV1
	(*GithubRoleV1)(nil),            // 6: accessgraph.v1alpha.GithubRoleV1
	(*GithubRepositoryV1)(nil),      // 7: accessgraph.v1alpha.GithubRepositoryV1
	(*GithubSync)(nil),              // 8: accessgraph.v1alpha.GithubSync
	(*GithubResourceList)(nil),      // 9: accessgraph.v1alpha.GithubResourceList
	(*GithubResource)(nil),          // 10: accessgraph.v1alpha.GithubResource
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
	(*structpb.Struct)(nil),         // 12: google.protobuf.Struct
}
var file_accessgraph_v1alpha_github_proto_depIdxs = []int32{
	11, // 0: accessgraph.v1alpha.GitHubAuditLogV1Cursor.last_event_time:type_name -> google.protobuf.Timestamp
	12, // 1: accessgraph.v1alpha.GitHubAuditLogV1.events:type_name -> google.protobuf.Struct
	0,  // 2: accessgraph.v1alpha.GitHubAuditLogV1.cursor:type_name -> accessgraph.v1alpha.GitHubAuditLogV1Cursor
	11, // 3: accessgraph.v1alpha.GitHubConfigV1.start_date:type_name -> google.protobuf.Timestamp
	11, // 4: accessgraph.v1alpha.GithubTokenV1.expires:type_name -> google.protobuf.Timestamp
	4,  // 5: accessgraph.v1alpha.GithubTokenV1.permissions:type_name -> accessgraph.v1alpha.GithubTokenV1Permission
	10, // 6: accessgraph.v1alpha.GithubResourceList.resources:type_name -> accessgraph.v1alpha.GithubResource
	3,  // 7: accessgraph.v1alpha.GithubResource.token:type_name -> accessgraph.v1alpha.GithubTokenV1
	5,  // 8: accessgraph.v1alpha.GithubResource.role_assignment:type_name -> accessgraph.v1alpha.GithubRoleAssignmentV1
	6,  // 9: accessgraph.v1alpha.GithubResource.role:type_name -> accessgraph.v1alpha.GithubRoleV1
	7,  // 10: accessgraph.v1alpha.GithubResource.repository:type_name -> accessgraph.v1alpha.GithubRepositoryV1
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_accessgraph_v1alpha_github_proto_init() }
func file_accessgraph_v1alpha_github_proto_init() {
	if File_accessgraph_v1alpha_github_proto != nil {
		return
	}
	file_accessgraph_v1alpha_github_proto_msgTypes[10].OneofWrappers = []any{
		(*GithubResource_Token)(nil),
		(*GithubResource_RoleAssignment)(nil),
		(*GithubResource_Role)(nil),
		(*GithubResource_Repository)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_github_proto_rawDesc), len(file_accessgraph_v1alpha_github_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accessgraph_v1alpha_github_proto_goTypes,
		DependencyIndexes: file_accessgraph_v1alpha_github_proto_depIdxs,
		MessageInfos:      file_accessgraph_v1alpha_github_proto_msgTypes,
	}.Build()
	File_accessgraph_v1alpha_github_proto = out.File
	file_accessgraph_v1alpha_github_proto_goTypes = nil
	file_accessgraph_v1alpha_github_proto_depIdxs = nil
}
