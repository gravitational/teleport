//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: accessgraph/v1alpha/graph.proto

package accessgraphv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Node is a node in the access graph.
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the unique ID of the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Kind is the kind of the node, ex: "user", "user_group", "resource", etc.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// SubKind is the subkind of the node, ex: "ssh", "db", "k8s", etc.
	SubKind string `protobuf:"bytes,3,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// Name is the name of the node.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Labels is a set of labels for the resource.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Hostname is the hostname of the node.
	Hostname string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Properties is a set of properties for the resource.
	Properties    map[string]string `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_accessgraph_v1alpha_graph_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_graph_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_graph_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Node) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Node) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Node) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Edge is an edge in the access graph.
type Edge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// from is the ID of the node the edge is from.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the ID of the node the edge is to.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// edge_type is the type of the edge, e.g. "member_of", "belongs_to", etc.
	EdgeType string `protobuf:"bytes,3,opt,name=edge_type,json=edgeType,proto3" json:"edge_type,omitempty"`
	// Properties is a set of properties for the edges.
	Properties    map[string]string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Edge) Reset() {
	*x = Edge{}
	mi := &file_accessgraph_v1alpha_graph_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_graph_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_graph_proto_rawDescGZIP(), []int{1}
}

func (x *Edge) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Edge) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Edge) GetEdgeType() string {
	if x != nil {
		return x.EdgeType
	}
	return ""
}

func (x *Edge) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

var File_accessgraph_v1alpha_graph_proto protoreflect.FileDescriptor

const file_accessgraph_v1alpha_graph_proto_rawDesc = "" +
	"\n" +
	"\x1faccessgraph/v1alpha/graph.proto\x12\x13accessgraph.v1alpha\"\xf9\x02\n" +
	"\x04Node\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04kind\x18\x02 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x03 \x01(\tR\asubKind\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12=\n" +
	"\x06labels\x18\x05 \x03(\v2%.accessgraph.v1alpha.Node.LabelsEntryR\x06labels\x12\x1a\n" +
	"\bhostname\x18\x06 \x01(\tR\bhostname\x12I\n" +
	"\n" +
	"properties\x18\a \x03(\v2).accessgraph.v1alpha.Node.PropertiesEntryR\n" +
	"properties\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd1\x01\n" +
	"\x04Edge\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\tR\x02to\x12\x1b\n" +
	"\tedge_type\x18\x03 \x01(\tR\bedgeType\x12I\n" +
	"\n" +
	"properties\x18\x04 \x03(\v2).accessgraph.v1alpha.Edge.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01BWZUgithub.com/gravitational/teleport/gen/proto/go/accessgraph/v1alpha;accessgraphv1alphab\x06proto3"

var (
	file_accessgraph_v1alpha_graph_proto_rawDescOnce sync.Once
	file_accessgraph_v1alpha_graph_proto_rawDescData []byte
)

func file_accessgraph_v1alpha_graph_proto_rawDescGZIP() []byte {
	file_accessgraph_v1alpha_graph_proto_rawDescOnce.Do(func() {
		file_accessgraph_v1alpha_graph_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_graph_proto_rawDesc), len(file_accessgraph_v1alpha_graph_proto_rawDesc)))
	})
	return file_accessgraph_v1alpha_graph_proto_rawDescData
}

var file_accessgraph_v1alpha_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_accessgraph_v1alpha_graph_proto_goTypes = []any{
	(*Node)(nil), // 0: accessgraph.v1alpha.Node
	(*Edge)(nil), // 1: accessgraph.v1alpha.Edge
	nil,          // 2: accessgraph.v1alpha.Node.LabelsEntry
	nil,          // 3: accessgraph.v1alpha.Node.PropertiesEntry
	nil,          // 4: accessgraph.v1alpha.Edge.PropertiesEntry
}
var file_accessgraph_v1alpha_graph_proto_depIdxs = []int32{
	2, // 0: accessgraph.v1alpha.Node.labels:type_name -> accessgraph.v1alpha.Node.LabelsEntry
	3, // 1: accessgraph.v1alpha.Node.properties:type_name -> accessgraph.v1alpha.Node.PropertiesEntry
	4, // 2: accessgraph.v1alpha.Edge.properties:type_name -> accessgraph.v1alpha.Edge.PropertiesEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_accessgraph_v1alpha_graph_proto_init() }
func file_accessgraph_v1alpha_graph_proto_init() {
	if File_accessgraph_v1alpha_graph_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_graph_proto_rawDesc), len(file_accessgraph_v1alpha_graph_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accessgraph_v1alpha_graph_proto_goTypes,
		DependencyIndexes: file_accessgraph_v1alpha_graph_proto_depIdxs,
		MessageInfos:      file_accessgraph_v1alpha_graph_proto_msgTypes,
	}.Build()
	File_accessgraph_v1alpha_graph_proto = out.File
	file_accessgraph_v1alpha_graph_proto_goTypes = nil
	file_accessgraph_v1alpha_graph_proto_depIdxs = nil
}
