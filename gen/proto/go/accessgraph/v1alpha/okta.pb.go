//
// Teleport
// Copyright (C) 2025  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: accessgraph/v1alpha/okta.proto

package accessgraphv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OktaEventV1 holds the data for a single audit event that happened in an Okta organization.
type OktaEventV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The user or application that did the action of the event, ex.: "user_id_123", "OktaMobile".
	Identity *OktaIdentityV1 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// The network place (like an IP address) where the event started.
	Location *OktaLocationV1 `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// The specific type of event that happened, ex.: "user.session.start", "user.lifecycle.create".
	EventType string `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// The time when Okta saved or showed the event.
	Published *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=published,proto3" json:"published,omitempty"`
	// The result of the event, ex.: "SUCCESS", "FAILURE", "ALLOWED", "DENIED".
	Result string `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	// A list of one or more items (like users or applications) that this event's action changed or affected.
	Targets []*OktaTargetV1 `protobuf:"bytes,6,rep,name=targets,proto3" json:"targets,omitempty"`
	// Information about the client app or system part that began the event.
	Origin string `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	// The actual unstructured, homgeneous event data.
	EventData     *structpb.Struct `protobuf:"bytes,8,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaEventV1) Reset() {
	*x = OktaEventV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaEventV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaEventV1) ProtoMessage() {}

func (x *OktaEventV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaEventV1.ProtoReflect.Descriptor instead.
func (*OktaEventV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{0}
}

func (x *OktaEventV1) GetIdentity() *OktaIdentityV1 {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *OktaEventV1) GetLocation() *OktaLocationV1 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *OktaEventV1) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *OktaEventV1) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *OktaEventV1) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *OktaEventV1) GetTargets() []*OktaTargetV1 {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *OktaEventV1) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *OktaEventV1) GetEventData() *structpb.Struct {
	if x != nil {
		return x.EventData
	}
	return nil
}

// OktaIdentityV1 holds details about an identity (ex.: a user or an application)
// that is part of an Okta event.
type OktaIdentityV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique ID of this identity, ex.: "00u1a2b3c4d5e6f7g8h9".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The display name or human-readable name of the identity, ex.: "John Doe", "Okta Admin Console".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The kind or type of identity, ex.: "USER", "APP", "CLIENT", "SYSTEM".
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// An API token ID or session identifier associated with the identity, if applicable to the event.
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// The user agent string of the client software used by this identity, ex.: "Mozilla/5.0 (...) Chrome/...".
	UserAgent     string `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaIdentityV1) Reset() {
	*x = OktaIdentityV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaIdentityV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaIdentityV1) ProtoMessage() {}

func (x *OktaIdentityV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaIdentityV1.ProtoReflect.Descriptor instead.
func (*OktaIdentityV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{1}
}

func (x *OktaIdentityV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OktaIdentityV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OktaIdentityV1) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *OktaIdentityV1) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OktaIdentityV1) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

// OktaLocationV1 holds network location information, like an IP address,
// related to an Okta event.
type OktaLocationV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The IP address (IPv4 or IPv6) from which the event originated, ex.: "198.51.100.5", "2001:db8::a:b:c:d".
	Ip            string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaLocationV1) Reset() {
	*x = OktaLocationV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaLocationV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaLocationV1) ProtoMessage() {}

func (x *OktaLocationV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaLocationV1.ProtoReflect.Descriptor instead.
func (*OktaLocationV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{2}
}

func (x *OktaLocationV1) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// OktaTargetV1 describes a resource or entity (ex.: a user, an application, or a group)
// that was a target of an action in an Okta event.
type OktaTargetV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of this target, ex.: "00u1a2b3c4d5e6f7g8h9" (for a user), "appId123".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The human-readable name or display name of the target, ex.: "John Doe", "Okta HR App", "Contractors Group".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The kind or type of the target, ex.: "User", "AppInstance", "Group", "Policy".
	Kind          string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaTargetV1) Reset() {
	*x = OktaTargetV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaTargetV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaTargetV1) ProtoMessage() {}

func (x *OktaTargetV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaTargetV1.ProtoReflect.Descriptor instead.
func (*OktaTargetV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{3}
}

func (x *OktaTargetV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OktaTargetV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OktaTargetV1) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// OktaAuditLogV1Cursor holds the necessary state for resuming Okta audit log collection.
type OktaAuditLogV1Cursor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The pagination token or cursor provided by Okta to fetch the next set of audit events.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The ID of the last Okta audit event that was successfully processed or seen.
	LastEventId string `protobuf:"bytes,2,opt,name=last_event_id,json=lastEventId,proto3" json:"last_event_id,omitempty"`
	// The timestamp of the last Okta audit event that was successfully processed or seen.
	LastEventTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_event_time,json=lastEventTime,proto3" json:"last_event_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaAuditLogV1Cursor) Reset() {
	*x = OktaAuditLogV1Cursor{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaAuditLogV1Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaAuditLogV1Cursor) ProtoMessage() {}

func (x *OktaAuditLogV1Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaAuditLogV1Cursor.ProtoReflect.Descriptor instead.
func (*OktaAuditLogV1Cursor) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{4}
}

func (x *OktaAuditLogV1Cursor) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OktaAuditLogV1Cursor) GetLastEventId() string {
	if x != nil {
		return x.LastEventId
	}
	return ""
}

func (x *OktaAuditLogV1Cursor) GetLastEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEventTime
	}
	return nil
}

// OktaAuditLogV1 bundles a batch of Okta audit log events and the client's current resume cursor.
type OktaAuditLogV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of Okta audit log events in this batch.
	Events []*OktaEventV1 `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// The client's current cursor information, sent with this batch of events to allow for resumable log collection.
	Cursor        *OktaAuditLogV1Cursor `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaAuditLogV1) Reset() {
	*x = OktaAuditLogV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaAuditLogV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaAuditLogV1) ProtoMessage() {}

func (x *OktaAuditLogV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaAuditLogV1.ProtoReflect.Descriptor instead.
func (*OktaAuditLogV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{5}
}

func (x *OktaAuditLogV1) GetEvents() []*OktaEventV1 {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *OktaAuditLogV1) GetCursor() *OktaAuditLogV1Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

// OktaConfigV1 specifies configuration settings for Okta audit log exports.
type OktaConfigV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The desired start date from which to begin exporting Okta audit logs.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// organization is the Okta organization name.
	Organization  string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaConfigV1) Reset() {
	*x = OktaConfigV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaConfigV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaConfigV1) ProtoMessage() {}

func (x *OktaConfigV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaConfigV1.ProtoReflect.Descriptor instead.
func (*OktaConfigV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{6}
}

func (x *OktaConfigV1) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *OktaConfigV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// OktaTokenV1 holds information about an Okta token (ex.: an API token),
// such as its ID, owner, and lifecycle dates (created, updated, expires).
type OktaTokenV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the Okta token, ex.: "00AbcDefG1hIjKlMnOpQ".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human-readable name or label given to the Okta token, ex.: "Reporting API Key".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The ID or username of the Okta user or client application that owns this token, ex.: "john.doe@example.com", "00u123abc456".
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The timestamp when this Okta token expires. This may not be set if the token does not expire.
	Expires *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires,proto3" json:"expires,omitempty"`
	// The Okta organization (ex.: "mycompany.okta.com" or an org ID) this token is associated with.
	Organization string `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
	// The timestamp when this Okta token was created.
	Created *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty"`
	// The timestamp when this Okta token was last updated.
	Updated       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaTokenV1) Reset() {
	*x = OktaTokenV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaTokenV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaTokenV1) ProtoMessage() {}

func (x *OktaTokenV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaTokenV1.ProtoReflect.Descriptor instead.
func (*OktaTokenV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{7}
}

func (x *OktaTokenV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OktaTokenV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OktaTokenV1) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *OktaTokenV1) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *OktaTokenV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *OktaTokenV1) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *OktaTokenV1) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

// OktaRoleAssignmentV1 links an Okta user to a specific role within an Okta organization.
type OktaRoleAssignmentV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique ID of the Okta role being assigned, ex.: "ORG_ADMIN", "API_ACCESS_MANAGEMENT_ADMIN", "00r1a2b3c4d5e6f7g8h9".
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The unique ID of the Okta user who is being assigned the role, ex.: "00u1a2b3c4d5e6f7g8h9".
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Note: Field number 2 appears to be skipped in this definition.
	// The Okta organization (ex.: "mycompany.okta.com" or an org ID) where this role assignment applies.
	Organization  string `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaRoleAssignmentV1) Reset() {
	*x = OktaRoleAssignmentV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaRoleAssignmentV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaRoleAssignmentV1) ProtoMessage() {}

func (x *OktaRoleAssignmentV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaRoleAssignmentV1.ProtoReflect.Descriptor instead.
func (*OktaRoleAssignmentV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{8}
}

func (x *OktaRoleAssignmentV1) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *OktaRoleAssignmentV1) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OktaRoleAssignmentV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// OktaRoleV1 represents a role (ex.: an administrator role or a custom-defined role)
// within an Okta organization.
type OktaRoleV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the Okta role, ex.: "ORG_ADMIN", "API_ACCESS_MANAGEMENT_ADMIN", "00rCustomRole123xyz".
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The specific type or classification of the Okta role, ex.: "SUPER_ADMIN", "APP_ADMIN", "CUSTOM_ROLE_TYPE_A".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The Okta organization (ex.: "mycompany.okta.com" or an org ID) where this role is defined.
	Organization  string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaRoleV1) Reset() {
	*x = OktaRoleV1{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaRoleV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaRoleV1) ProtoMessage() {}

func (x *OktaRoleV1) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaRoleV1.ProtoReflect.Descriptor instead.
func (*OktaRoleV1) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{9}
}

func (x *OktaRoleV1) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *OktaRoleV1) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OktaRoleV1) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

// OktaSync is an empty message that signals a synchronization point
// in an Okta data stream, ex.: indicating the end of an initial full data sync by the client.
type OktaSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaSync) Reset() {
	*x = OktaSync{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaSync) ProtoMessage() {}

func (x *OktaSync) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaSync.ProtoReflect.Descriptor instead.
func (*OktaSync) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{10}
}

// OktaResourceList contains a list of Okta resources,
// used for sending multiple resources in a single operation (ex.: batch upsert or delete).
type OktaResourceList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resources     []*OktaResource        `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaResourceList) Reset() {
	*x = OktaResourceList{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaResourceList) ProtoMessage() {}

func (x *OktaResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaResourceList.ProtoReflect.Descriptor instead.
func (*OktaResourceList) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{11}
}

func (x *OktaResourceList) GetResources() []*OktaResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// OktaResource acts as a container that holds one specific type of Okta resource,
// such as a token, a role assignment, or a role definition, using a 'oneof'.
type OktaResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Resource:
	//
	//	*OktaResource_Token
	//	*OktaResource_RoleAssignment
	//	*OktaResource_Role
	Resource      isOktaResource_Resource `protobuf_oneof:"resource"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaResource) Reset() {
	*x = OktaResource{}
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaResource) ProtoMessage() {}

func (x *OktaResource) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_okta_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaResource.ProtoReflect.Descriptor instead.
func (*OktaResource) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_okta_proto_rawDescGZIP(), []int{12}
}

func (x *OktaResource) GetResource() isOktaResource_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *OktaResource) GetToken() *OktaTokenV1 {
	if x != nil {
		if x, ok := x.Resource.(*OktaResource_Token); ok {
			return x.Token
		}
	}
	return nil
}

func (x *OktaResource) GetRoleAssignment() *OktaRoleAssignmentV1 {
	if x != nil {
		if x, ok := x.Resource.(*OktaResource_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

func (x *OktaResource) GetRole() *OktaRoleV1 {
	if x != nil {
		if x, ok := x.Resource.(*OktaResource_Role); ok {
			return x.Role
		}
	}
	return nil
}

type isOktaResource_Resource interface {
	isOktaResource_Resource()
}

type OktaResource_Token struct {
	// An Okta token, like an API token.
	Token *OktaTokenV1 `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}

type OktaResource_RoleAssignment struct {
	// An assignment of an Okta role to a user.
	RoleAssignment *OktaRoleAssignmentV1 `protobuf:"bytes,2,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

type OktaResource_Role struct {
	// An Okta role definition.
	Role *OktaRoleV1 `protobuf:"bytes,3,opt,name=role,proto3,oneof"`
}

func (*OktaResource_Token) isOktaResource_Resource() {}

func (*OktaResource_RoleAssignment) isOktaResource_Resource() {}

func (*OktaResource_Role) isOktaResource_Resource() {}

var File_accessgraph_v1alpha_okta_proto protoreflect.FileDescriptor

const file_accessgraph_v1alpha_okta_proto_rawDesc = "" +
	"\n" +
	"\x1eaccessgraph/v1alpha/okta.proto\x12\x13accessgraph.v1alpha\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8d\x03\n" +
	"\vOktaEventV1\x12?\n" +
	"\bidentity\x18\x01 \x01(\v2#.accessgraph.v1alpha.OktaIdentityV1R\bidentity\x12?\n" +
	"\blocation\x18\x02 \x01(\v2#.accessgraph.v1alpha.OktaLocationV1R\blocation\x12\x1d\n" +
	"\n" +
	"event_type\x18\x03 \x01(\tR\teventType\x128\n" +
	"\tpublished\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tpublished\x12\x16\n" +
	"\x06result\x18\x05 \x01(\tR\x06result\x12;\n" +
	"\atargets\x18\x06 \x03(\v2!.accessgraph.v1alpha.OktaTargetV1R\atargets\x12\x16\n" +
	"\x06origin\x18\a \x01(\tR\x06origin\x126\n" +
	"\n" +
	"event_data\x18\b \x01(\v2\x17.google.protobuf.StructR\teventData\"}\n" +
	"\x0eOktaIdentityV1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04kind\x18\x03 \x01(\tR\x04kind\x12\x14\n" +
	"\x05token\x18\x04 \x01(\tR\x05token\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x05 \x01(\tR\tuserAgent\" \n" +
	"\x0eOktaLocationV1\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\"F\n" +
	"\fOktaTargetV1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04kind\x18\x03 \x01(\tR\x04kind\"\x94\x01\n" +
	"\x14OktaAuditLogV1Cursor\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\"\n" +
	"\rlast_event_id\x18\x02 \x01(\tR\vlastEventId\x12B\n" +
	"\x0flast_event_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\rlastEventTime\"\x8d\x01\n" +
	"\x0eOktaAuditLogV1\x128\n" +
	"\x06events\x18\x01 \x03(\v2 .accessgraph.v1alpha.OktaEventV1R\x06events\x12A\n" +
	"\x06cursor\x18\x02 \x01(\v2).accessgraph.v1alpha.OktaAuditLogV1CursorR\x06cursor\"m\n" +
	"\fOktaConfigV1\x129\n" +
	"\n" +
	"start_date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartDate\x12\"\n" +
	"\forganization\x18\x02 \x01(\tR\forganization\"\x8d\x02\n" +
	"\vOktaTokenV1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\tR\x05owner\x124\n" +
	"\aexpires\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aexpires\x12\"\n" +
	"\forganization\x18\x06 \x01(\tR\forganization\x124\n" +
	"\acreated\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\acreated\x124\n" +
	"\aupdated\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\aupdated\"l\n" +
	"\x14OktaRoleAssignmentV1\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\tR\x06roleId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\"\n" +
	"\forganization\x18\x04 \x01(\tR\forganization\"]\n" +
	"\n" +
	"OktaRoleV1\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\tR\x06roleId\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\"\n" +
	"\forganization\x18\x03 \x01(\tR\forganization\"\n" +
	"\n" +
	"\bOktaSync\"S\n" +
	"\x10OktaResourceList\x12?\n" +
	"\tresources\x18\x01 \x03(\v2!.accessgraph.v1alpha.OktaResourceR\tresources\"\xe1\x01\n" +
	"\fOktaResource\x128\n" +
	"\x05token\x18\x01 \x01(\v2 .accessgraph.v1alpha.OktaTokenV1H\x00R\x05token\x12T\n" +
	"\x0frole_assignment\x18\x02 \x01(\v2).accessgraph.v1alpha.OktaRoleAssignmentV1H\x00R\x0eroleAssignment\x125\n" +
	"\x04role\x18\x03 \x01(\v2\x1f.accessgraph.v1alpha.OktaRoleV1H\x00R\x04roleB\n" +
	"\n" +
	"\bresourceBWZUgithub.com/gravitational/teleport/gen/proto/go/accessgraph/v1alpha;accessgraphv1alphab\x06proto3"

var (
	file_accessgraph_v1alpha_okta_proto_rawDescOnce sync.Once
	file_accessgraph_v1alpha_okta_proto_rawDescData []byte
)

func file_accessgraph_v1alpha_okta_proto_rawDescGZIP() []byte {
	file_accessgraph_v1alpha_okta_proto_rawDescOnce.Do(func() {
		file_accessgraph_v1alpha_okta_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_okta_proto_rawDesc), len(file_accessgraph_v1alpha_okta_proto_rawDesc)))
	})
	return file_accessgraph_v1alpha_okta_proto_rawDescData
}

var file_accessgraph_v1alpha_okta_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_accessgraph_v1alpha_okta_proto_goTypes = []any{
	(*OktaEventV1)(nil),           // 0: accessgraph.v1alpha.OktaEventV1
	(*OktaIdentityV1)(nil),        // 1: accessgraph.v1alpha.OktaIdentityV1
	(*OktaLocationV1)(nil),        // 2: accessgraph.v1alpha.OktaLocationV1
	(*OktaTargetV1)(nil),          // 3: accessgraph.v1alpha.OktaTargetV1
	(*OktaAuditLogV1Cursor)(nil),  // 4: accessgraph.v1alpha.OktaAuditLogV1Cursor
	(*OktaAuditLogV1)(nil),        // 5: accessgraph.v1alpha.OktaAuditLogV1
	(*OktaConfigV1)(nil),          // 6: accessgraph.v1alpha.OktaConfigV1
	(*OktaTokenV1)(nil),           // 7: accessgraph.v1alpha.OktaTokenV1
	(*OktaRoleAssignmentV1)(nil),  // 8: accessgraph.v1alpha.OktaRoleAssignmentV1
	(*OktaRoleV1)(nil),            // 9: accessgraph.v1alpha.OktaRoleV1
	(*OktaSync)(nil),              // 10: accessgraph.v1alpha.OktaSync
	(*OktaResourceList)(nil),      // 11: accessgraph.v1alpha.OktaResourceList
	(*OktaResource)(nil),          // 12: accessgraph.v1alpha.OktaResource
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 14: google.protobuf.Struct
}
var file_accessgraph_v1alpha_okta_proto_depIdxs = []int32{
	1,  // 0: accessgraph.v1alpha.OktaEventV1.identity:type_name -> accessgraph.v1alpha.OktaIdentityV1
	2,  // 1: accessgraph.v1alpha.OktaEventV1.location:type_name -> accessgraph.v1alpha.OktaLocationV1
	13, // 2: accessgraph.v1alpha.OktaEventV1.published:type_name -> google.protobuf.Timestamp
	3,  // 3: accessgraph.v1alpha.OktaEventV1.targets:type_name -> accessgraph.v1alpha.OktaTargetV1
	14, // 4: accessgraph.v1alpha.OktaEventV1.event_data:type_name -> google.protobuf.Struct
	13, // 5: accessgraph.v1alpha.OktaAuditLogV1Cursor.last_event_time:type_name -> google.protobuf.Timestamp
	0,  // 6: accessgraph.v1alpha.OktaAuditLogV1.events:type_name -> accessgraph.v1alpha.OktaEventV1
	4,  // 7: accessgraph.v1alpha.OktaAuditLogV1.cursor:type_name -> accessgraph.v1alpha.OktaAuditLogV1Cursor
	13, // 8: accessgraph.v1alpha.OktaConfigV1.start_date:type_name -> google.protobuf.Timestamp
	13, // 9: accessgraph.v1alpha.OktaTokenV1.expires:type_name -> google.protobuf.Timestamp
	13, // 10: accessgraph.v1alpha.OktaTokenV1.created:type_name -> google.protobuf.Timestamp
	13, // 11: accessgraph.v1alpha.OktaTokenV1.updated:type_name -> google.protobuf.Timestamp
	12, // 12: accessgraph.v1alpha.OktaResourceList.resources:type_name -> accessgraph.v1alpha.OktaResource
	7,  // 13: accessgraph.v1alpha.OktaResource.token:type_name -> accessgraph.v1alpha.OktaTokenV1
	8,  // 14: accessgraph.v1alpha.OktaResource.role_assignment:type_name -> accessgraph.v1alpha.OktaRoleAssignmentV1
	9,  // 15: accessgraph.v1alpha.OktaResource.role:type_name -> accessgraph.v1alpha.OktaRoleV1
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_accessgraph_v1alpha_okta_proto_init() }
func file_accessgraph_v1alpha_okta_proto_init() {
	if File_accessgraph_v1alpha_okta_proto != nil {
		return
	}
	file_accessgraph_v1alpha_okta_proto_msgTypes[12].OneofWrappers = []any{
		(*OktaResource_Token)(nil),
		(*OktaResource_RoleAssignment)(nil),
		(*OktaResource_Role)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_okta_proto_rawDesc), len(file_accessgraph_v1alpha_okta_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accessgraph_v1alpha_okta_proto_goTypes,
		DependencyIndexes: file_accessgraph_v1alpha_okta_proto_depIdxs,
		MessageInfos:      file_accessgraph_v1alpha_okta_proto_msgTypes,
	}.Build()
	File_accessgraph_v1alpha_okta_proto = out.File
	file_accessgraph_v1alpha_okta_proto_goTypes = nil
	file_accessgraph_v1alpha_okta_proto_depIdxs = nil
}
