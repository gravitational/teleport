//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: accessgraph/v1alpha/access_graph_service.proto

package accessgraphv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryRequest is a request to query the access graph.
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// query is a SQL query.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{0}
}

func (x *QueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// QueryResponse is a response to a query.
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nodes is a list of nodes returned by the query. The response may contain only nodes.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// edges is a list of edges returned by the query.
	Edges []*Edge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{1}
}

func (x *QueryResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *QueryResponse) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

// GetFileRequest is a request to get a file.
type GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filepath is a path to the file.
	Filepath string `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetFileRequest) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

// GetFileResponse is a response to a file request.
type GetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data is a raw file content.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// EventsStreamRequest is a request to send commands to the access graph.
// This command is used to sync the access graph with the Teleport database state.
type EventsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operation contains the desired operation
	//
	// Types that are assignable to Operation:
	//
	//	*EventsStreamRequest_Sync
	//	*EventsStreamRequest_Upsert
	//	*EventsStreamRequest_Delete
	//	*EventsStreamRequest_AccessListsMembers
	//	*EventsStreamRequest_ExcludeAccessListMembers
	Operation isEventsStreamRequest_Operation `protobuf_oneof:"operation"`
}

func (x *EventsStreamRequest) Reset() {
	*x = EventsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamRequest) ProtoMessage() {}

func (x *EventsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamRequest.ProtoReflect.Descriptor instead.
func (*EventsStreamRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{4}
}

func (m *EventsStreamRequest) GetOperation() isEventsStreamRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *EventsStreamRequest) GetSync() *SyncOperation {
	if x, ok := x.GetOperation().(*EventsStreamRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *EventsStreamRequest) GetUpsert() *ResourceList {
	if x, ok := x.GetOperation().(*EventsStreamRequest_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (x *EventsStreamRequest) GetDelete() *ResourceHeaderList {
	if x, ok := x.GetOperation().(*EventsStreamRequest_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *EventsStreamRequest) GetAccessListsMembers() *AccessListsMembers {
	if x, ok := x.GetOperation().(*EventsStreamRequest_AccessListsMembers); ok {
		return x.AccessListsMembers
	}
	return nil
}

func (x *EventsStreamRequest) GetExcludeAccessListMembers() *ExcludeAccessListsMembers {
	if x, ok := x.GetOperation().(*EventsStreamRequest_ExcludeAccessListMembers); ok {
		return x.ExcludeAccessListMembers
	}
	return nil
}

type isEventsStreamRequest_Operation interface {
	isEventsStreamRequest_Operation()
}

type EventsStreamRequest_Sync struct {
	// sync is a command to sync the access graph with the Teleport database state.
	// it's issued once Teleport finishes syncing all resources with the database.
	Sync *SyncOperation `protobuf:"bytes,1,opt,name=sync,proto3,oneof"`
}

type EventsStreamRequest_Upsert struct {
	// upsert is a command to put a resource into the access graph or update it.
	Upsert *ResourceList `protobuf:"bytes,2,opt,name=upsert,proto3,oneof"`
}

type EventsStreamRequest_Delete struct {
	// delete is a command to delete a resource from the access graph when it's deleted from Teleport.
	Delete *ResourceHeaderList `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

type EventsStreamRequest_AccessListsMembers struct {
	// access_lists_members is a command to upsert access lists members.
	// It's issued when a user is added to an access list or when their membership is updated.
	// It's also issued when a user membership expires but the user remains in the access list.
	// In that case, the state of the user reflects the expiration reason.
	AccessListsMembers *AccessListsMembers `protobuf:"bytes,4,opt,name=access_lists_members,json=accessListsMembers,proto3,oneof"`
}

type EventsStreamRequest_ExcludeAccessListMembers struct {
	// exclude_access_list_members is a command to exclude access lists members
	// when they are manually removed from the access list.
	// If their membership remains but it's expired, they are not excluded
	// from the access list but they don't receive any access - in that case,
	// the request is [access_lists_members].
	ExcludeAccessListMembers *ExcludeAccessListsMembers `protobuf:"bytes,5,opt,name=exclude_access_list_members,json=excludeAccessListMembers,proto3,oneof"`
}

func (*EventsStreamRequest_Sync) isEventsStreamRequest_Operation() {}

func (*EventsStreamRequest_Upsert) isEventsStreamRequest_Operation() {}

func (*EventsStreamRequest_Delete) isEventsStreamRequest_Operation() {}

func (*EventsStreamRequest_AccessListsMembers) isEventsStreamRequest_Operation() {}

func (*EventsStreamRequest_ExcludeAccessListMembers) isEventsStreamRequest_Operation() {}

// EventsStreamV2Request is a request to send commands to the access graph.
// This command is used to sync the access graph with the Teleport database state.
type EventsStreamV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operation contains the desired operation
	//
	// Types that are assignable to Operation:
	//
	//	*EventsStreamV2Request_Sync
	//	*EventsStreamV2Request_Upsert
	//	*EventsStreamV2Request_Delete
	//	*EventsStreamV2Request_AccessListsMembers
	//	*EventsStreamV2Request_ExcludeAccessListMembers
	Operation isEventsStreamV2Request_Operation `protobuf_oneof:"operation"`
}

func (x *EventsStreamV2Request) Reset() {
	*x = EventsStreamV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamV2Request) ProtoMessage() {}

func (x *EventsStreamV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamV2Request.ProtoReflect.Descriptor instead.
func (*EventsStreamV2Request) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{5}
}

func (m *EventsStreamV2Request) GetOperation() isEventsStreamV2Request_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *EventsStreamV2Request) GetSync() *SyncOperation {
	if x, ok := x.GetOperation().(*EventsStreamV2Request_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *EventsStreamV2Request) GetUpsert() *ResourceList {
	if x, ok := x.GetOperation().(*EventsStreamV2Request_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (x *EventsStreamV2Request) GetDelete() *ResourceHeaderList {
	if x, ok := x.GetOperation().(*EventsStreamV2Request_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *EventsStreamV2Request) GetAccessListsMembers() *AccessListsMembers {
	if x, ok := x.GetOperation().(*EventsStreamV2Request_AccessListsMembers); ok {
		return x.AccessListsMembers
	}
	return nil
}

func (x *EventsStreamV2Request) GetExcludeAccessListMembers() *ExcludeAccessListsMembers {
	if x, ok := x.GetOperation().(*EventsStreamV2Request_ExcludeAccessListMembers); ok {
		return x.ExcludeAccessListMembers
	}
	return nil
}

type isEventsStreamV2Request_Operation interface {
	isEventsStreamV2Request_Operation()
}

type EventsStreamV2Request_Sync struct {
	// sync is a command to sync the access graph with the Teleport database state.
	// it's issued once Teleport finishes syncing all resources with the database.
	Sync *SyncOperation `protobuf:"bytes,1,opt,name=sync,proto3,oneof"`
}

type EventsStreamV2Request_Upsert struct {
	// upsert is a command to put a resource into the access graph or update it.
	Upsert *ResourceList `protobuf:"bytes,2,opt,name=upsert,proto3,oneof"`
}

type EventsStreamV2Request_Delete struct {
	// delete is a command to delete a resource from the access graph when it's deleted from Teleport.
	Delete *ResourceHeaderList `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

type EventsStreamV2Request_AccessListsMembers struct {
	// access_lists_members is a command to upsert access lists members.
	// It's issued when a user is added to an access list or when their membership is updated.
	// It's also issued when a user membership expires but the user remains in the access list.
	// In that case, the state of the user reflects the expiration reason.
	AccessListsMembers *AccessListsMembers `protobuf:"bytes,4,opt,name=access_lists_members,json=accessListsMembers,proto3,oneof"`
}

type EventsStreamV2Request_ExcludeAccessListMembers struct {
	// exclude_access_list_members is a command to exclude access lists members
	// when they are manually removed from the access list.
	// If their membership remains but it's expired, they are not excluded
	// from the access list but they don't receive any access - in that case,
	// the request is [access_lists_members].
	ExcludeAccessListMembers *ExcludeAccessListsMembers `protobuf:"bytes,5,opt,name=exclude_access_list_members,json=excludeAccessListMembers,proto3,oneof"`
}

func (*EventsStreamV2Request_Sync) isEventsStreamV2Request_Operation() {}

func (*EventsStreamV2Request_Upsert) isEventsStreamV2Request_Operation() {}

func (*EventsStreamV2Request_Delete) isEventsStreamV2Request_Operation() {}

func (*EventsStreamV2Request_AccessListsMembers) isEventsStreamV2Request_Operation() {}

func (*EventsStreamV2Request_ExcludeAccessListMembers) isEventsStreamV2Request_Operation() {}

// SyncOperation is a command that Teleport sends to the access graph service
// at the end of the sync process.
type SyncOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncOperation) Reset() {
	*x = SyncOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOperation) ProtoMessage() {}

func (x *SyncOperation) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOperation.ProtoReflect.Descriptor instead.
func (*SyncOperation) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{6}
}

// EventsStreamResponse is the response from EventsStream.
type EventsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventsStreamResponse) Reset() {
	*x = EventsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamResponse) ProtoMessage() {}

func (x *EventsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamResponse.ProtoReflect.Descriptor instead.
func (*EventsStreamResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{7}
}

// EventsStreamV2Response is the response from EventsStreamV2.
type EventsStreamV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action is a action that should be performed by Teleport on behalf of the access graph service.
	//
	// Types that are assignable to Action:
	//
	//	*EventsStreamV2Response_Event
	Action isEventsStreamV2Response_Action `protobuf_oneof:"action"`
}

func (x *EventsStreamV2Response) Reset() {
	*x = EventsStreamV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsStreamV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsStreamV2Response) ProtoMessage() {}

func (x *EventsStreamV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsStreamV2Response.ProtoReflect.Descriptor instead.
func (*EventsStreamV2Response) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{8}
}

func (m *EventsStreamV2Response) GetAction() isEventsStreamV2Response_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *EventsStreamV2Response) GetEvent() *AuditEvent {
	if x, ok := x.GetAction().(*EventsStreamV2Response_Event); ok {
		return x.Event
	}
	return nil
}

type isEventsStreamV2Response_Action interface {
	isEventsStreamV2Response_Action()
}

type EventsStreamV2Response_Event struct {
	// event is a audit event that should be logged by Teleport.
	Event *AuditEvent `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

func (*EventsStreamV2Response_Event) isEventsStreamV2Response_Action() {}

// AuditEvent is an event that should be logged by Teleport.
type AuditEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*AuditEvent_AccessPathChanged
	Event isAuditEvent_Event `protobuf_oneof:"event"`
}

func (x *AuditEvent) Reset() {
	*x = AuditEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent) ProtoMessage() {}

func (x *AuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent.ProtoReflect.Descriptor instead.
func (*AuditEvent) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{9}
}

func (m *AuditEvent) GetEvent() isAuditEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *AuditEvent) GetAccessPathChanged() *AccessPathChanged {
	if x, ok := x.GetEvent().(*AuditEvent_AccessPathChanged); ok {
		return x.AccessPathChanged
	}
	return nil
}

type isAuditEvent_Event interface {
	isAuditEvent_Event()
}

type AuditEvent_AccessPathChanged struct {
	// access_path_changed is an event that should be logged when the access path changes.
	AccessPathChanged *AccessPathChanged `protobuf:"bytes,1,opt,name=access_path_changed,json=accessPathChanged,proto3,oneof"`
}

func (*AuditEvent_AccessPathChanged) isAuditEvent_Event() {}

// RegisterRequest is the request for Register.
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostCaPem []byte `protobuf:"bytes,1,opt,name=host_ca_pem,json=hostCaPem,proto3" json:"host_ca_pem,omitempty"`
	// ClusterName is the self-submitted name of the Teleport cluster (usually a FQDN).
	// This may not uniquely identify the cluster, and is only used to make identification easier for debugging purposes.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterRequest) GetHostCaPem() []byte {
	if x != nil {
		return x.HostCaPem
	}
	return nil
}

func (x *RegisterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

// RegisterResponse is the response for Register.
type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{11}
}

// ReplaceCAsRequest is the request for ReplaceCAs.
type ReplaceCAsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostCaPem [][]byte `protobuf:"bytes,1,rep,name=host_ca_pem,json=hostCaPem,proto3" json:"host_ca_pem,omitempty"`
}

func (x *ReplaceCAsRequest) Reset() {
	*x = ReplaceCAsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceCAsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceCAsRequest) ProtoMessage() {}

func (x *ReplaceCAsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceCAsRequest.ProtoReflect.Descriptor instead.
func (*ReplaceCAsRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{12}
}

func (x *ReplaceCAsRequest) GetHostCaPem() [][]byte {
	if x != nil {
		return x.HostCaPem
	}
	return nil
}

// ReplaceCAsResponse is the response for ReplaceCAs.
type ReplaceCAsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplaceCAsResponse) Reset() {
	*x = ReplaceCAsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceCAsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceCAsResponse) ProtoMessage() {}

func (x *ReplaceCAsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceCAsResponse.ProtoReflect.Descriptor instead.
func (*ReplaceCAsResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{13}
}

// AWSEventsStreamRequest is a request to send commands to the AWS importer.
// This command is used to sync the access graph with the AWS database state.
type AWSEventsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operation contains the desired operation
	//
	// Types that are assignable to Operation:
	//
	//	*AWSEventsStreamRequest_Sync
	//	*AWSEventsStreamRequest_Upsert
	//	*AWSEventsStreamRequest_Delete
	Operation isAWSEventsStreamRequest_Operation `protobuf_oneof:"operation"`
}

func (x *AWSEventsStreamRequest) Reset() {
	*x = AWSEventsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSEventsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEventsStreamRequest) ProtoMessage() {}

func (x *AWSEventsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEventsStreamRequest.ProtoReflect.Descriptor instead.
func (*AWSEventsStreamRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{14}
}

func (m *AWSEventsStreamRequest) GetOperation() isAWSEventsStreamRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *AWSEventsStreamRequest) GetSync() *AWSSyncOperation {
	if x, ok := x.GetOperation().(*AWSEventsStreamRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *AWSEventsStreamRequest) GetUpsert() *AWSResourceList {
	if x, ok := x.GetOperation().(*AWSEventsStreamRequest_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (x *AWSEventsStreamRequest) GetDelete() *AWSResourceList {
	if x, ok := x.GetOperation().(*AWSEventsStreamRequest_Delete); ok {
		return x.Delete
	}
	return nil
}

type isAWSEventsStreamRequest_Operation interface {
	isAWSEventsStreamRequest_Operation()
}

type AWSEventsStreamRequest_Sync struct {
	// sync is a command to sync the access graph with the Teleport database state.
	// it's issued once Teleport finishes syncing all resources with the database.
	Sync *AWSSyncOperation `protobuf:"bytes,1,opt,name=sync,proto3,oneof"`
}

type AWSEventsStreamRequest_Upsert struct {
	// upsert is a command to put a resource into the access graph or update it.
	Upsert *AWSResourceList `protobuf:"bytes,2,opt,name=upsert,proto3,oneof"`
}

type AWSEventsStreamRequest_Delete struct {
	// delete is a command to delete a resource from the access graph when it's deleted from Teleport.
	Delete *AWSResourceList `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*AWSEventsStreamRequest_Sync) isAWSEventsStreamRequest_Operation() {}

func (*AWSEventsStreamRequest_Upsert) isAWSEventsStreamRequest_Operation() {}

func (*AWSEventsStreamRequest_Delete) isAWSEventsStreamRequest_Operation() {}

// AWSSyncOperation is a command that Teleport sends to the access graph service
// at the end of the sync process.
type AWSSyncOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AWSSyncOperation) Reset() {
	*x = AWSSyncOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSSyncOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSyncOperation) ProtoMessage() {}

func (x *AWSSyncOperation) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSyncOperation.ProtoReflect.Descriptor instead.
func (*AWSSyncOperation) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{15}
}

// AWSEventsStreamResponse is the response from AWSEventsStream.
type AWSEventsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AWSEventsStreamResponse) Reset() {
	*x = AWSEventsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSEventsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEventsStreamResponse) ProtoMessage() {}

func (x *AWSEventsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEventsStreamResponse.ProtoReflect.Descriptor instead.
func (*AWSEventsStreamResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{16}
}

// GitlabEventsStreamRequest is a request to send commands to the Gitlab importer.
type GitlabEventsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operation contains the desired operation
	//
	// Types that are assignable to Operation:
	//
	//	*GitlabEventsStreamRequest_Sync
	//	*GitlabEventsStreamRequest_Upsert
	//	*GitlabEventsStreamRequest_Delete
	Operation isGitlabEventsStreamRequest_Operation `protobuf_oneof:"operation"`
}

func (x *GitlabEventsStreamRequest) Reset() {
	*x = GitlabEventsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabEventsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabEventsStreamRequest) ProtoMessage() {}

func (x *GitlabEventsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabEventsStreamRequest.ProtoReflect.Descriptor instead.
func (*GitlabEventsStreamRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{17}
}

func (m *GitlabEventsStreamRequest) GetOperation() isGitlabEventsStreamRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *GitlabEventsStreamRequest) GetSync() *GitlabSyncOperation {
	if x, ok := x.GetOperation().(*GitlabEventsStreamRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *GitlabEventsStreamRequest) GetUpsert() *GitlabResourceList {
	if x, ok := x.GetOperation().(*GitlabEventsStreamRequest_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (x *GitlabEventsStreamRequest) GetDelete() *GitlabResourceList {
	if x, ok := x.GetOperation().(*GitlabEventsStreamRequest_Delete); ok {
		return x.Delete
	}
	return nil
}

type isGitlabEventsStreamRequest_Operation interface {
	isGitlabEventsStreamRequest_Operation()
}

type GitlabEventsStreamRequest_Sync struct {
	// sync is a command to sync the access graph with the Teleport database state.
	// it's issued once Teleport finishes syncing all resources with the database.
	Sync *GitlabSyncOperation `protobuf:"bytes,1,opt,name=sync,proto3,oneof"`
}

type GitlabEventsStreamRequest_Upsert struct {
	// upsert is a command to put a resource into the access graph or update it.
	Upsert *GitlabResourceList `protobuf:"bytes,2,opt,name=upsert,proto3,oneof"`
}

type GitlabEventsStreamRequest_Delete struct {
	// delete is a command to delete a resource from the access graph when it's deleted from Teleport.
	Delete *GitlabResourceList `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*GitlabEventsStreamRequest_Sync) isGitlabEventsStreamRequest_Operation() {}

func (*GitlabEventsStreamRequest_Upsert) isGitlabEventsStreamRequest_Operation() {}

func (*GitlabEventsStreamRequest_Delete) isGitlabEventsStreamRequest_Operation() {}

// GitlabEventsStreamResponse is the response from GitlabEventsStream.
type GitlabEventsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitlabEventsStreamResponse) Reset() {
	*x = GitlabEventsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabEventsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabEventsStreamResponse) ProtoMessage() {}

func (x *GitlabEventsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabEventsStreamResponse.ProtoReflect.Descriptor instead.
func (*GitlabEventsStreamResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{18}
}

// EntraEventsStreamRequest is a request to send commands to the Gitlab importer.
type EntraEventsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operation contains the desired operation
	//
	// Types that are assignable to Operation:
	//
	//	*EntraEventsStreamRequest_Sync
	//	*EntraEventsStreamRequest_Upsert
	//	*EntraEventsStreamRequest_Delete
	Operation isEntraEventsStreamRequest_Operation `protobuf_oneof:"operation"`
}

func (x *EntraEventsStreamRequest) Reset() {
	*x = EntraEventsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntraEventsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntraEventsStreamRequest) ProtoMessage() {}

func (x *EntraEventsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntraEventsStreamRequest.ProtoReflect.Descriptor instead.
func (*EntraEventsStreamRequest) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{19}
}

func (m *EntraEventsStreamRequest) GetOperation() isEntraEventsStreamRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *EntraEventsStreamRequest) GetSync() *EntraSyncOperation {
	if x, ok := x.GetOperation().(*EntraEventsStreamRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *EntraEventsStreamRequest) GetUpsert() *EntraResourceList {
	if x, ok := x.GetOperation().(*EntraEventsStreamRequest_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (x *EntraEventsStreamRequest) GetDelete() *EntraResourceList {
	if x, ok := x.GetOperation().(*EntraEventsStreamRequest_Delete); ok {
		return x.Delete
	}
	return nil
}

type isEntraEventsStreamRequest_Operation interface {
	isEntraEventsStreamRequest_Operation()
}

type EntraEventsStreamRequest_Sync struct {
	// sync is a command to sync the access graph with the Teleport database state.
	// it's issued once Teleport finishes syncing all resources with the database.
	Sync *EntraSyncOperation `protobuf:"bytes,1,opt,name=sync,proto3,oneof"`
}

type EntraEventsStreamRequest_Upsert struct {
	// upsert is a command to put a resource into the access graph or update it.
	Upsert *EntraResourceList `protobuf:"bytes,2,opt,name=upsert,proto3,oneof"`
}

type EntraEventsStreamRequest_Delete struct {
	// delete is a command to delete a resource from the access graph when it's deleted from Teleport.
	Delete *EntraResourceList `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*EntraEventsStreamRequest_Sync) isEntraEventsStreamRequest_Operation() {}

func (*EntraEventsStreamRequest_Upsert) isEntraEventsStreamRequest_Operation() {}

func (*EntraEventsStreamRequest_Delete) isEntraEventsStreamRequest_Operation() {}

// EntraEventsStreamResponse is the response from GitlabEventsStream.
type EntraEventsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntraEventsStreamResponse) Reset() {
	*x = EntraEventsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntraEventsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntraEventsStreamResponse) ProtoMessage() {}

func (x *EntraEventsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntraEventsStreamResponse.ProtoReflect.Descriptor instead.
func (*EntraEventsStreamResponse) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP(), []int{20}
}

var File_accessgraph_v1alpha_access_graph_service_proto protoreflect.FileDescriptor

var file_accessgraph_v1alpha_access_graph_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x77, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x24, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x71, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x03,
	0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12,
	0x3b, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x5b, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a, 0x1b,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x03, 0x0a, 0x15, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x3b,
	0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x5b,
	0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a, 0x1b, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x79, 0x6e,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5b, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x6f, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x54, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x5f, 0x70,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x50, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x41, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x50, 0x65, 0x6d, 0x22,
	0x14, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x41, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x41, 0x57, 0x53, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x3e, 0x0a,
	0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x3e, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x57,
	0x53, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x19,
	0x0a, 0x17, 0x41, 0x57, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x19, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xab, 0x07, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x28, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x6d, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x32, 0x12, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x41, 0x73, 0x12, 0x26, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x41, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x41, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x0f, 0x41, 0x57, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x57, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x79, 0x0a,
	0x12, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_accessgraph_v1alpha_access_graph_service_proto_rawDescOnce sync.Once
	file_accessgraph_v1alpha_access_graph_service_proto_rawDescData = file_accessgraph_v1alpha_access_graph_service_proto_rawDesc
)

func file_accessgraph_v1alpha_access_graph_service_proto_rawDescGZIP() []byte {
	file_accessgraph_v1alpha_access_graph_service_proto_rawDescOnce.Do(func() {
		file_accessgraph_v1alpha_access_graph_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_accessgraph_v1alpha_access_graph_service_proto_rawDescData)
	})
	return file_accessgraph_v1alpha_access_graph_service_proto_rawDescData
}

var file_accessgraph_v1alpha_access_graph_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_accessgraph_v1alpha_access_graph_service_proto_goTypes = []interface{}{
	(*QueryRequest)(nil),               // 0: accessgraph.v1alpha.QueryRequest
	(*QueryResponse)(nil),              // 1: accessgraph.v1alpha.QueryResponse
	(*GetFileRequest)(nil),             // 2: accessgraph.v1alpha.GetFileRequest
	(*GetFileResponse)(nil),            // 3: accessgraph.v1alpha.GetFileResponse
	(*EventsStreamRequest)(nil),        // 4: accessgraph.v1alpha.EventsStreamRequest
	(*EventsStreamV2Request)(nil),      // 5: accessgraph.v1alpha.EventsStreamV2Request
	(*SyncOperation)(nil),              // 6: accessgraph.v1alpha.SyncOperation
	(*EventsStreamResponse)(nil),       // 7: accessgraph.v1alpha.EventsStreamResponse
	(*EventsStreamV2Response)(nil),     // 8: accessgraph.v1alpha.EventsStreamV2Response
	(*AuditEvent)(nil),                 // 9: accessgraph.v1alpha.AuditEvent
	(*RegisterRequest)(nil),            // 10: accessgraph.v1alpha.RegisterRequest
	(*RegisterResponse)(nil),           // 11: accessgraph.v1alpha.RegisterResponse
	(*ReplaceCAsRequest)(nil),          // 12: accessgraph.v1alpha.ReplaceCAsRequest
	(*ReplaceCAsResponse)(nil),         // 13: accessgraph.v1alpha.ReplaceCAsResponse
	(*AWSEventsStreamRequest)(nil),     // 14: accessgraph.v1alpha.AWSEventsStreamRequest
	(*AWSSyncOperation)(nil),           // 15: accessgraph.v1alpha.AWSSyncOperation
	(*AWSEventsStreamResponse)(nil),    // 16: accessgraph.v1alpha.AWSEventsStreamResponse
	(*GitlabEventsStreamRequest)(nil),  // 17: accessgraph.v1alpha.GitlabEventsStreamRequest
	(*GitlabEventsStreamResponse)(nil), // 18: accessgraph.v1alpha.GitlabEventsStreamResponse
	(*EntraEventsStreamRequest)(nil),   // 19: accessgraph.v1alpha.EntraEventsStreamRequest
	(*EntraEventsStreamResponse)(nil),  // 20: accessgraph.v1alpha.EntraEventsStreamResponse
	(*Node)(nil),                       // 21: accessgraph.v1alpha.Node
	(*Edge)(nil),                       // 22: accessgraph.v1alpha.Edge
	(*ResourceList)(nil),               // 23: accessgraph.v1alpha.ResourceList
	(*ResourceHeaderList)(nil),         // 24: accessgraph.v1alpha.ResourceHeaderList
	(*AccessListsMembers)(nil),         // 25: accessgraph.v1alpha.AccessListsMembers
	(*ExcludeAccessListsMembers)(nil),  // 26: accessgraph.v1alpha.ExcludeAccessListsMembers
	(*AccessPathChanged)(nil),          // 27: accessgraph.v1alpha.AccessPathChanged
	(*AWSResourceList)(nil),            // 28: accessgraph.v1alpha.AWSResourceList
	(*GitlabSyncOperation)(nil),        // 29: accessgraph.v1alpha.GitlabSyncOperation
	(*GitlabResourceList)(nil),         // 30: accessgraph.v1alpha.GitlabResourceList
	(*EntraSyncOperation)(nil),         // 31: accessgraph.v1alpha.EntraSyncOperation
	(*EntraResourceList)(nil),          // 32: accessgraph.v1alpha.EntraResourceList
}
var file_accessgraph_v1alpha_access_graph_service_proto_depIdxs = []int32{
	21, // 0: accessgraph.v1alpha.QueryResponse.nodes:type_name -> accessgraph.v1alpha.Node
	22, // 1: accessgraph.v1alpha.QueryResponse.edges:type_name -> accessgraph.v1alpha.Edge
	6,  // 2: accessgraph.v1alpha.EventsStreamRequest.sync:type_name -> accessgraph.v1alpha.SyncOperation
	23, // 3: accessgraph.v1alpha.EventsStreamRequest.upsert:type_name -> accessgraph.v1alpha.ResourceList
	24, // 4: accessgraph.v1alpha.EventsStreamRequest.delete:type_name -> accessgraph.v1alpha.ResourceHeaderList
	25, // 5: accessgraph.v1alpha.EventsStreamRequest.access_lists_members:type_name -> accessgraph.v1alpha.AccessListsMembers
	26, // 6: accessgraph.v1alpha.EventsStreamRequest.exclude_access_list_members:type_name -> accessgraph.v1alpha.ExcludeAccessListsMembers
	6,  // 7: accessgraph.v1alpha.EventsStreamV2Request.sync:type_name -> accessgraph.v1alpha.SyncOperation
	23, // 8: accessgraph.v1alpha.EventsStreamV2Request.upsert:type_name -> accessgraph.v1alpha.ResourceList
	24, // 9: accessgraph.v1alpha.EventsStreamV2Request.delete:type_name -> accessgraph.v1alpha.ResourceHeaderList
	25, // 10: accessgraph.v1alpha.EventsStreamV2Request.access_lists_members:type_name -> accessgraph.v1alpha.AccessListsMembers
	26, // 11: accessgraph.v1alpha.EventsStreamV2Request.exclude_access_list_members:type_name -> accessgraph.v1alpha.ExcludeAccessListsMembers
	9,  // 12: accessgraph.v1alpha.EventsStreamV2Response.event:type_name -> accessgraph.v1alpha.AuditEvent
	27, // 13: accessgraph.v1alpha.AuditEvent.access_path_changed:type_name -> accessgraph.v1alpha.AccessPathChanged
	15, // 14: accessgraph.v1alpha.AWSEventsStreamRequest.sync:type_name -> accessgraph.v1alpha.AWSSyncOperation
	28, // 15: accessgraph.v1alpha.AWSEventsStreamRequest.upsert:type_name -> accessgraph.v1alpha.AWSResourceList
	28, // 16: accessgraph.v1alpha.AWSEventsStreamRequest.delete:type_name -> accessgraph.v1alpha.AWSResourceList
	29, // 17: accessgraph.v1alpha.GitlabEventsStreamRequest.sync:type_name -> accessgraph.v1alpha.GitlabSyncOperation
	30, // 18: accessgraph.v1alpha.GitlabEventsStreamRequest.upsert:type_name -> accessgraph.v1alpha.GitlabResourceList
	30, // 19: accessgraph.v1alpha.GitlabEventsStreamRequest.delete:type_name -> accessgraph.v1alpha.GitlabResourceList
	31, // 20: accessgraph.v1alpha.EntraEventsStreamRequest.sync:type_name -> accessgraph.v1alpha.EntraSyncOperation
	32, // 21: accessgraph.v1alpha.EntraEventsStreamRequest.upsert:type_name -> accessgraph.v1alpha.EntraResourceList
	32, // 22: accessgraph.v1alpha.EntraEventsStreamRequest.delete:type_name -> accessgraph.v1alpha.EntraResourceList
	0,  // 23: accessgraph.v1alpha.AccessGraphService.Query:input_type -> accessgraph.v1alpha.QueryRequest
	2,  // 24: accessgraph.v1alpha.AccessGraphService.GetFile:input_type -> accessgraph.v1alpha.GetFileRequest
	4,  // 25: accessgraph.v1alpha.AccessGraphService.EventsStream:input_type -> accessgraph.v1alpha.EventsStreamRequest
	5,  // 26: accessgraph.v1alpha.AccessGraphService.EventsStreamV2:input_type -> accessgraph.v1alpha.EventsStreamV2Request
	10, // 27: accessgraph.v1alpha.AccessGraphService.Register:input_type -> accessgraph.v1alpha.RegisterRequest
	12, // 28: accessgraph.v1alpha.AccessGraphService.ReplaceCAs:input_type -> accessgraph.v1alpha.ReplaceCAsRequest
	14, // 29: accessgraph.v1alpha.AccessGraphService.AWSEventsStream:input_type -> accessgraph.v1alpha.AWSEventsStreamRequest
	17, // 30: accessgraph.v1alpha.AccessGraphService.GitlabEventsStream:input_type -> accessgraph.v1alpha.GitlabEventsStreamRequest
	19, // 31: accessgraph.v1alpha.AccessGraphService.EntraEventsStream:input_type -> accessgraph.v1alpha.EntraEventsStreamRequest
	1,  // 32: accessgraph.v1alpha.AccessGraphService.Query:output_type -> accessgraph.v1alpha.QueryResponse
	3,  // 33: accessgraph.v1alpha.AccessGraphService.GetFile:output_type -> accessgraph.v1alpha.GetFileResponse
	7,  // 34: accessgraph.v1alpha.AccessGraphService.EventsStream:output_type -> accessgraph.v1alpha.EventsStreamResponse
	8,  // 35: accessgraph.v1alpha.AccessGraphService.EventsStreamV2:output_type -> accessgraph.v1alpha.EventsStreamV2Response
	11, // 36: accessgraph.v1alpha.AccessGraphService.Register:output_type -> accessgraph.v1alpha.RegisterResponse
	13, // 37: accessgraph.v1alpha.AccessGraphService.ReplaceCAs:output_type -> accessgraph.v1alpha.ReplaceCAsResponse
	16, // 38: accessgraph.v1alpha.AccessGraphService.AWSEventsStream:output_type -> accessgraph.v1alpha.AWSEventsStreamResponse
	18, // 39: accessgraph.v1alpha.AccessGraphService.GitlabEventsStream:output_type -> accessgraph.v1alpha.GitlabEventsStreamResponse
	20, // 40: accessgraph.v1alpha.AccessGraphService.EntraEventsStream:output_type -> accessgraph.v1alpha.EntraEventsStreamResponse
	32, // [32:41] is the sub-list for method output_type
	23, // [23:32] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_accessgraph_v1alpha_access_graph_service_proto_init() }
func file_accessgraph_v1alpha_access_graph_service_proto_init() {
	if File_accessgraph_v1alpha_access_graph_service_proto != nil {
		return
	}
	file_accessgraph_v1alpha_aws_proto_init()
	file_accessgraph_v1alpha_entra_proto_init()
	file_accessgraph_v1alpha_events_proto_init()
	file_accessgraph_v1alpha_gitlab_proto_init()
	file_accessgraph_v1alpha_graph_proto_init()
	file_accessgraph_v1alpha_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsStreamV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceCAsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceCAsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSEventsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSSyncOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSEventsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabEventsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabEventsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntraEventsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntraEventsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EventsStreamRequest_Sync)(nil),
		(*EventsStreamRequest_Upsert)(nil),
		(*EventsStreamRequest_Delete)(nil),
		(*EventsStreamRequest_AccessListsMembers)(nil),
		(*EventsStreamRequest_ExcludeAccessListMembers)(nil),
	}
	file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*EventsStreamV2Request_Sync)(nil),
		(*EventsStreamV2Request_Upsert)(nil),
		(*EventsStreamV2Request_Delete)(nil),
		(*EventsStreamV2Request_AccessListsMembers)(nil),
		(*EventsStreamV2Request_ExcludeAccessListMembers)(nil),
	}
	file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*EventsStreamV2Response_Event)(nil),
	}
	file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*AuditEvent_AccessPathChanged)(nil),
	}
	file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*AWSEventsStreamRequest_Sync)(nil),
		(*AWSEventsStreamRequest_Upsert)(nil),
		(*AWSEventsStreamRequest_Delete)(nil),
	}
	file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GitlabEventsStreamRequest_Sync)(nil),
		(*GitlabEventsStreamRequest_Upsert)(nil),
		(*GitlabEventsStreamRequest_Delete)(nil),
	}
	file_accessgraph_v1alpha_access_graph_service_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*EntraEventsStreamRequest_Sync)(nil),
		(*EntraEventsStreamRequest_Upsert)(nil),
		(*EntraEventsStreamRequest_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accessgraph_v1alpha_access_graph_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_accessgraph_v1alpha_access_graph_service_proto_goTypes,
		DependencyIndexes: file_accessgraph_v1alpha_access_graph_service_proto_depIdxs,
		MessageInfos:      file_accessgraph_v1alpha_access_graph_service_proto_msgTypes,
	}.Build()
	File_accessgraph_v1alpha_access_graph_service_proto = out.File
	file_accessgraph_v1alpha_access_graph_service_proto_rawDesc = nil
	file_accessgraph_v1alpha_access_graph_service_proto_goTypes = nil
	file_accessgraph_v1alpha_access_graph_service_proto_depIdxs = nil
}
