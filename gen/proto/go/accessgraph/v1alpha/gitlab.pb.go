//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: accessgraph/v1alpha/gitlab.proto

package accessgraphv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccessLevelType defines the access level a user has
// to a project or Gitlab group.
type AccessLevelType int32

const (
	// ACCESS_LEVEL_TYPE_UNSPECIFIED is an unspecified permissions.
	AccessLevelType_ACCESS_LEVEL_TYPE_UNSPECIFIED AccessLevelType = 0
	// ACCESS_LEVEL_TYPE_NO_PERMISSIONS represents no permissions.
	AccessLevelType_ACCESS_LEVEL_TYPE_NO_PERMISSIONS AccessLevelType = 1
	// ACCESS_LEVEL_TYPE_MINIMAL represents "minimal" permissions to a project/group.
	AccessLevelType_ACCESS_LEVEL_TYPE_MINIMAL AccessLevelType = 2
	// ACCESS_LEVEL_TYPE_GUEST represents "guest" permissions to a project/group.
	AccessLevelType_ACCESS_LEVEL_TYPE_GUEST AccessLevelType = 3
	// ACCESS_LEVEL_TYPE_REPORTER represents "reporter" permissions to a project/group.
	AccessLevelType_ACCESS_LEVEL_TYPE_REPORTER AccessLevelType = 4
	// ACCESS_LEVEL_TYPE_DEVELOPER represents "developer" permissions to a project/group.
	AccessLevelType_ACCESS_LEVEL_TYPE_DEVELOPER AccessLevelType = 5
	// ACCESS_LEVEL_TYPE_MAINTAINER represents "master" permissions to a project/group.
	AccessLevelType_ACCESS_LEVEL_TYPE_MAINTAINER AccessLevelType = 6
	// ACCESS_LEVEL_TYPE_OWNER represents "owner" permissions to a project/group.
	AccessLevelType_ACCESS_LEVEL_TYPE_OWNER AccessLevelType = 7
)

// Enum value maps for AccessLevelType.
var (
	AccessLevelType_name = map[int32]string{
		0: "ACCESS_LEVEL_TYPE_UNSPECIFIED",
		1: "ACCESS_LEVEL_TYPE_NO_PERMISSIONS",
		2: "ACCESS_LEVEL_TYPE_MINIMAL",
		3: "ACCESS_LEVEL_TYPE_GUEST",
		4: "ACCESS_LEVEL_TYPE_REPORTER",
		5: "ACCESS_LEVEL_TYPE_DEVELOPER",
		6: "ACCESS_LEVEL_TYPE_MAINTAINER",
		7: "ACCESS_LEVEL_TYPE_OWNER",
	}
	AccessLevelType_value = map[string]int32{
		"ACCESS_LEVEL_TYPE_UNSPECIFIED":    0,
		"ACCESS_LEVEL_TYPE_NO_PERMISSIONS": 1,
		"ACCESS_LEVEL_TYPE_MINIMAL":        2,
		"ACCESS_LEVEL_TYPE_GUEST":          3,
		"ACCESS_LEVEL_TYPE_REPORTER":       4,
		"ACCESS_LEVEL_TYPE_DEVELOPER":      5,
		"ACCESS_LEVEL_TYPE_MAINTAINER":     6,
		"ACCESS_LEVEL_TYPE_OWNER":          7,
	}
)

func (x AccessLevelType) Enum() *AccessLevelType {
	p := new(AccessLevelType)
	*p = x
	return p
}

func (x AccessLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_accessgraph_v1alpha_gitlab_proto_enumTypes[0].Descriptor()
}

func (AccessLevelType) Type() protoreflect.EnumType {
	return &file_accessgraph_v1alpha_gitlab_proto_enumTypes[0]
}

func (x AccessLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLevelType.Descriptor instead.
func (AccessLevelType) EnumDescriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{0}
}

// GitlabSyncOperation is a request to sync Gitlab resources
type GitlabSyncOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabSyncOperation) Reset() {
	*x = GitlabSyncOperation{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabSyncOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabSyncOperation) ProtoMessage() {}

func (x *GitlabSyncOperation) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabSyncOperation.ProtoReflect.Descriptor instead.
func (*GitlabSyncOperation) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{0}
}

// GitlabResourceList is a request that contains resources to be sync.
type GitlabResourceList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// resources is a list of gitlab resources to sync.
	Resources     []*GitlabResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabResourceList) Reset() {
	*x = GitlabResourceList{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabResourceList) ProtoMessage() {}

func (x *GitlabResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabResourceList.ProtoReflect.Descriptor instead.
func (*GitlabResourceList) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{1}
}

func (x *GitlabResourceList) GetResources() []*GitlabResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// GitlabResource represents a Gitlab resource
type GitlabResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Resource:
	//
	//	*GitlabResource_Group
	//	*GitlabResource_Project
	//	*GitlabResource_ProjectMember
	//	*GitlabResource_GroupMember
	//	*GitlabResource_User
	Resource      isGitlabResource_Resource `protobuf_oneof:"resource"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabResource) Reset() {
	*x = GitlabResource{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabResource) ProtoMessage() {}

func (x *GitlabResource) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabResource.ProtoReflect.Descriptor instead.
func (*GitlabResource) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{2}
}

func (x *GitlabResource) GetResource() isGitlabResource_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *GitlabResource) GetGroup() *GitlabGroup {
	if x != nil {
		if x, ok := x.Resource.(*GitlabResource_Group); ok {
			return x.Group
		}
	}
	return nil
}

func (x *GitlabResource) GetProject() *GitlabProject {
	if x != nil {
		if x, ok := x.Resource.(*GitlabResource_Project); ok {
			return x.Project
		}
	}
	return nil
}

func (x *GitlabResource) GetProjectMember() *GitlabProjectMember {
	if x != nil {
		if x, ok := x.Resource.(*GitlabResource_ProjectMember); ok {
			return x.ProjectMember
		}
	}
	return nil
}

func (x *GitlabResource) GetGroupMember() *GitlabGroupMember {
	if x != nil {
		if x, ok := x.Resource.(*GitlabResource_GroupMember); ok {
			return x.GroupMember
		}
	}
	return nil
}

func (x *GitlabResource) GetUser() *GitlabUser {
	if x != nil {
		if x, ok := x.Resource.(*GitlabResource_User); ok {
			return x.User
		}
	}
	return nil
}

type isGitlabResource_Resource interface {
	isGitlabResource_Resource()
}

type GitlabResource_Group struct {
	// group represents a gitlab group or subgroup in an organization.
	Group *GitlabGroup `protobuf:"bytes,1,opt,name=group,proto3,oneof"`
}

type GitlabResource_Project struct {
	// project represents a gitlab repository.
	Project *GitlabProject `protobuf:"bytes,2,opt,name=project,proto3,oneof"`
}

type GitlabResource_ProjectMember struct {
	// project_member represents a user with certain access levels to a project.
	ProjectMember *GitlabProjectMember `protobuf:"bytes,3,opt,name=project_member,json=projectMember,proto3,oneof"`
}

type GitlabResource_GroupMember struct {
	// group_member represents a user with certain access levels to a group and all subgroups/projects within.
	GroupMember *GitlabGroupMember `protobuf:"bytes,4,opt,name=group_member,json=groupMember,proto3,oneof"`
}

type GitlabResource_User struct {
	// user represents a gitlab user.
	User *GitlabUser `protobuf:"bytes,5,opt,name=user,proto3,oneof"`
}

func (*GitlabResource_Group) isGitlabResource_Resource() {}

func (*GitlabResource_Project) isGitlabResource_Resource() {}

func (*GitlabResource_ProjectMember) isGitlabResource_Resource() {}

func (*GitlabResource_GroupMember) isGitlabResource_Resource() {}

func (*GitlabResource_User) isGitlabResource_Resource() {}

// GitlabGroup represents a Gitlab group
type GitlabGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the group name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// path is the universal identifier for the group location.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// full_name is the group full name.
	FullName string `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// description is the group description.
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabGroup) Reset() {
	*x = GitlabGroup{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabGroup) ProtoMessage() {}

func (x *GitlabGroup) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabGroup.ProtoReflect.Descriptor instead.
func (*GitlabGroup) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{3}
}

func (x *GitlabGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitlabGroup) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GitlabGroup) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GitlabGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// GitlabProject represents a Gitlab project
type GitlabProject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the repository name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// path is the universal identifier for the project location.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// description is the project description.
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabProject) Reset() {
	*x = GitlabProject{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabProject) ProtoMessage() {}

func (x *GitlabProject) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabProject.ProtoReflect.Descriptor instead.
func (*GitlabProject) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{4}
}

func (x *GitlabProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitlabProject) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GitlabProject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// GitlabProjectMember represents a Gitlab project member
type GitlabProjectMember struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// username is the username of the user.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// access_level defines the permissions the user has to the project.
	AccessLevel AccessLevelType `protobuf:"varint,2,opt,name=access_level,json=accessLevel,proto3,enum=accessgraph.v1alpha.AccessLevelType" json:"access_level,omitempty"`
	// project identifies the project that the user is member of.
	Project       *GitlabProject `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabProjectMember) Reset() {
	*x = GitlabProjectMember{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabProjectMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabProjectMember) ProtoMessage() {}

func (x *GitlabProjectMember) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabProjectMember.ProtoReflect.Descriptor instead.
func (*GitlabProjectMember) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{5}
}

func (x *GitlabProjectMember) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitlabProjectMember) GetAccessLevel() AccessLevelType {
	if x != nil {
		return x.AccessLevel
	}
	return AccessLevelType_ACCESS_LEVEL_TYPE_UNSPECIFIED
}

func (x *GitlabProjectMember) GetProject() *GitlabProject {
	if x != nil {
		return x.Project
	}
	return nil
}

// GitlabGroupMember represents a Gitlab group member
type GitlabGroupMember struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// username is the username of the user.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// access_level defines the permissions the user has to the group and all projects within.
	AccessLevel AccessLevelType `protobuf:"varint,2,opt,name=access_level,json=accessLevel,proto3,enum=accessgraph.v1alpha.AccessLevelType" json:"access_level,omitempty"`
	// project identifies the project that the user is member of.
	Group         *GitlabGroup `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabGroupMember) Reset() {
	*x = GitlabGroupMember{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabGroupMember) ProtoMessage() {}

func (x *GitlabGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabGroupMember.ProtoReflect.Descriptor instead.
func (*GitlabGroupMember) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{6}
}

func (x *GitlabGroupMember) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitlabGroupMember) GetAccessLevel() AccessLevelType {
	if x != nil {
		return x.AccessLevel
	}
	return AccessLevelType_ACCESS_LEVEL_TYPE_UNSPECIFIED
}

func (x *GitlabGroupMember) GetGroup() *GitlabGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// GitlabGroupMember represents a Gitlab user.
type GitlabUser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// username is the username of the user.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// email is the user's email.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// name is the user's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// is_admin indicates if a user is admin.
	IsAdmin bool `protobuf:"varint,4,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	// organization is the user's organization.
	Organization string `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	// last_sign_in_at identifies the last sign in date.
	LastSignInAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_sign_in_at,json=lastSignInAt,proto3" json:"last_sign_in_at,omitempty"`
	// can_create_group identifies if the user can create groups.
	CanCreateGroup bool `protobuf:"varint,7,opt,name=can_create_group,json=canCreateGroup,proto3" json:"can_create_group,omitempty"`
	// can_create_project identifies if the user can create projects.
	CanCreateProject bool `protobuf:"varint,8,opt,name=can_create_project,json=canCreateProject,proto3" json:"can_create_project,omitempty"`
	// two_factor_enabled identifies if the user has two factor authentication enabled.
	TwoFactorEnabled bool `protobuf:"varint,9,opt,name=two_factor_enabled,json=twoFactorEnabled,proto3" json:"two_factor_enabled,omitempty"`
	// identities represents the identity source for the user.
	Identities    []*GitlabUserIdentity `protobuf:"bytes,10,rep,name=identities,proto3" json:"identities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabUser) Reset() {
	*x = GitlabUser{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabUser) ProtoMessage() {}

func (x *GitlabUser) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabUser.ProtoReflect.Descriptor instead.
func (*GitlabUser) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{7}
}

func (x *GitlabUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitlabUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GitlabUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitlabUser) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *GitlabUser) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *GitlabUser) GetLastSignInAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSignInAt
	}
	return nil
}

func (x *GitlabUser) GetCanCreateGroup() bool {
	if x != nil {
		return x.CanCreateGroup
	}
	return false
}

func (x *GitlabUser) GetCanCreateProject() bool {
	if x != nil {
		return x.CanCreateProject
	}
	return false
}

func (x *GitlabUser) GetTwoFactorEnabled() bool {
	if x != nil {
		return x.TwoFactorEnabled
	}
	return false
}

func (x *GitlabUser) GetIdentities() []*GitlabUserIdentity {
	if x != nil {
		return x.Identities
	}
	return nil
}

// GitlabUserIdentity identifies the external identity of the user.
type GitlabUserIdentity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// provider identifies the identity provider.
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// extern_uid identifies the external uid of the identity.
	ExternUid     string `protobuf:"bytes,2,opt,name=extern_uid,json=externUid,proto3" json:"extern_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabUserIdentity) Reset() {
	*x = GitlabUserIdentity{}
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabUserIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabUserIdentity) ProtoMessage() {}

func (x *GitlabUserIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_accessgraph_v1alpha_gitlab_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabUserIdentity.ProtoReflect.Descriptor instead.
func (*GitlabUserIdentity) Descriptor() ([]byte, []int) {
	return file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP(), []int{8}
}

func (x *GitlabUserIdentity) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GitlabUserIdentity) GetExternUid() string {
	if x != nil {
		return x.ExternUid
	}
	return ""
}

var File_accessgraph_v1alpha_gitlab_proto protoreflect.FileDescriptor

const file_accessgraph_v1alpha_gitlab_proto_rawDesc = "" +
	"\n" +
	" accessgraph/v1alpha/gitlab.proto\x12\x13accessgraph.v1alpha\x1a\x1fgoogle/protobuf/timestamp.proto\"\x15\n" +
	"\x13GitlabSyncOperation\"W\n" +
	"\x12GitlabResourceList\x12A\n" +
	"\tresources\x18\x01 \x03(\v2#.accessgraph.v1alpha.GitlabResourceR\tresources\"\xed\x02\n" +
	"\x0eGitlabResource\x128\n" +
	"\x05group\x18\x01 \x01(\v2 .accessgraph.v1alpha.GitlabGroupH\x00R\x05group\x12>\n" +
	"\aproject\x18\x02 \x01(\v2\".accessgraph.v1alpha.GitlabProjectH\x00R\aproject\x12Q\n" +
	"\x0eproject_member\x18\x03 \x01(\v2(.accessgraph.v1alpha.GitlabProjectMemberH\x00R\rprojectMember\x12K\n" +
	"\fgroup_member\x18\x04 \x01(\v2&.accessgraph.v1alpha.GitlabGroupMemberH\x00R\vgroupMember\x125\n" +
	"\x04user\x18\x05 \x01(\v2\x1f.accessgraph.v1alpha.GitlabUserH\x00R\x04userB\n" +
	"\n" +
	"\bresource\"t\n" +
	"\vGitlabGroup\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x1b\n" +
	"\tfull_name\x18\x03 \x01(\tR\bfullName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\"Y\n" +
	"\rGitlabProject\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"\xb8\x01\n" +
	"\x13GitlabProjectMember\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12G\n" +
	"\faccess_level\x18\x02 \x01(\x0e2$.accessgraph.v1alpha.AccessLevelTypeR\vaccessLevel\x12<\n" +
	"\aproject\x18\x03 \x01(\v2\".accessgraph.v1alpha.GitlabProjectR\aproject\"\xb0\x01\n" +
	"\x11GitlabGroupMember\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12G\n" +
	"\faccess_level\x18\x02 \x01(\x0e2$.accessgraph.v1alpha.AccessLevelTypeR\vaccessLevel\x126\n" +
	"\x05group\x18\x03 \x01(\v2 .accessgraph.v1alpha.GitlabGroupR\x05group\"\xa3\x03\n" +
	"\n" +
	"GitlabUser\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x19\n" +
	"\bis_admin\x18\x04 \x01(\bR\aisAdmin\x12\"\n" +
	"\forganization\x18\x05 \x01(\tR\forganization\x12A\n" +
	"\x0flast_sign_in_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\flastSignInAt\x12(\n" +
	"\x10can_create_group\x18\a \x01(\bR\x0ecanCreateGroup\x12,\n" +
	"\x12can_create_project\x18\b \x01(\bR\x10canCreateProject\x12,\n" +
	"\x12two_factor_enabled\x18\t \x01(\bR\x10twoFactorEnabled\x12G\n" +
	"\n" +
	"identities\x18\n" +
	" \x03(\v2'.accessgraph.v1alpha.GitlabUserIdentityR\n" +
	"identities\"O\n" +
	"\x12GitlabUserIdentity\x12\x1a\n" +
	"\bprovider\x18\x01 \x01(\tR\bprovider\x12\x1d\n" +
	"\n" +
	"extern_uid\x18\x02 \x01(\tR\texternUid*\x96\x02\n" +
	"\x0fAccessLevelType\x12!\n" +
	"\x1dACCESS_LEVEL_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" ACCESS_LEVEL_TYPE_NO_PERMISSIONS\x10\x01\x12\x1d\n" +
	"\x19ACCESS_LEVEL_TYPE_MINIMAL\x10\x02\x12\x1b\n" +
	"\x17ACCESS_LEVEL_TYPE_GUEST\x10\x03\x12\x1e\n" +
	"\x1aACCESS_LEVEL_TYPE_REPORTER\x10\x04\x12\x1f\n" +
	"\x1bACCESS_LEVEL_TYPE_DEVELOPER\x10\x05\x12 \n" +
	"\x1cACCESS_LEVEL_TYPE_MAINTAINER\x10\x06\x12\x1b\n" +
	"\x17ACCESS_LEVEL_TYPE_OWNER\x10\aBWZUgithub.com/gravitational/teleport/gen/proto/go/accessgraph/v1alpha;accessgraphv1alphab\x06proto3"

var (
	file_accessgraph_v1alpha_gitlab_proto_rawDescOnce sync.Once
	file_accessgraph_v1alpha_gitlab_proto_rawDescData []byte
)

func file_accessgraph_v1alpha_gitlab_proto_rawDescGZIP() []byte {
	file_accessgraph_v1alpha_gitlab_proto_rawDescOnce.Do(func() {
		file_accessgraph_v1alpha_gitlab_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_gitlab_proto_rawDesc), len(file_accessgraph_v1alpha_gitlab_proto_rawDesc)))
	})
	return file_accessgraph_v1alpha_gitlab_proto_rawDescData
}

var file_accessgraph_v1alpha_gitlab_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_accessgraph_v1alpha_gitlab_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_accessgraph_v1alpha_gitlab_proto_goTypes = []any{
	(AccessLevelType)(0),          // 0: accessgraph.v1alpha.AccessLevelType
	(*GitlabSyncOperation)(nil),   // 1: accessgraph.v1alpha.GitlabSyncOperation
	(*GitlabResourceList)(nil),    // 2: accessgraph.v1alpha.GitlabResourceList
	(*GitlabResource)(nil),        // 3: accessgraph.v1alpha.GitlabResource
	(*GitlabGroup)(nil),           // 4: accessgraph.v1alpha.GitlabGroup
	(*GitlabProject)(nil),         // 5: accessgraph.v1alpha.GitlabProject
	(*GitlabProjectMember)(nil),   // 6: accessgraph.v1alpha.GitlabProjectMember
	(*GitlabGroupMember)(nil),     // 7: accessgraph.v1alpha.GitlabGroupMember
	(*GitlabUser)(nil),            // 8: accessgraph.v1alpha.GitlabUser
	(*GitlabUserIdentity)(nil),    // 9: accessgraph.v1alpha.GitlabUserIdentity
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_accessgraph_v1alpha_gitlab_proto_depIdxs = []int32{
	3,  // 0: accessgraph.v1alpha.GitlabResourceList.resources:type_name -> accessgraph.v1alpha.GitlabResource
	4,  // 1: accessgraph.v1alpha.GitlabResource.group:type_name -> accessgraph.v1alpha.GitlabGroup
	5,  // 2: accessgraph.v1alpha.GitlabResource.project:type_name -> accessgraph.v1alpha.GitlabProject
	6,  // 3: accessgraph.v1alpha.GitlabResource.project_member:type_name -> accessgraph.v1alpha.GitlabProjectMember
	7,  // 4: accessgraph.v1alpha.GitlabResource.group_member:type_name -> accessgraph.v1alpha.GitlabGroupMember
	8,  // 5: accessgraph.v1alpha.GitlabResource.user:type_name -> accessgraph.v1alpha.GitlabUser
	0,  // 6: accessgraph.v1alpha.GitlabProjectMember.access_level:type_name -> accessgraph.v1alpha.AccessLevelType
	5,  // 7: accessgraph.v1alpha.GitlabProjectMember.project:type_name -> accessgraph.v1alpha.GitlabProject
	0,  // 8: accessgraph.v1alpha.GitlabGroupMember.access_level:type_name -> accessgraph.v1alpha.AccessLevelType
	4,  // 9: accessgraph.v1alpha.GitlabGroupMember.group:type_name -> accessgraph.v1alpha.GitlabGroup
	10, // 10: accessgraph.v1alpha.GitlabUser.last_sign_in_at:type_name -> google.protobuf.Timestamp
	9,  // 11: accessgraph.v1alpha.GitlabUser.identities:type_name -> accessgraph.v1alpha.GitlabUserIdentity
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_accessgraph_v1alpha_gitlab_proto_init() }
func file_accessgraph_v1alpha_gitlab_proto_init() {
	if File_accessgraph_v1alpha_gitlab_proto != nil {
		return
	}
	file_accessgraph_v1alpha_gitlab_proto_msgTypes[2].OneofWrappers = []any{
		(*GitlabResource_Group)(nil),
		(*GitlabResource_Project)(nil),
		(*GitlabResource_ProjectMember)(nil),
		(*GitlabResource_GroupMember)(nil),
		(*GitlabResource_User)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_accessgraph_v1alpha_gitlab_proto_rawDesc), len(file_accessgraph_v1alpha_gitlab_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accessgraph_v1alpha_gitlab_proto_goTypes,
		DependencyIndexes: file_accessgraph_v1alpha_gitlab_proto_depIdxs,
		EnumInfos:         file_accessgraph_v1alpha_gitlab_proto_enumTypes,
		MessageInfos:      file_accessgraph_v1alpha_gitlab_proto_msgTypes,
	}.Build()
	File_accessgraph_v1alpha_gitlab_proto = out.File
	file_accessgraph_v1alpha_gitlab_proto_goTypes = nil
	file_accessgraph_v1alpha_gitlab_proto_depIdxs = nil
}
