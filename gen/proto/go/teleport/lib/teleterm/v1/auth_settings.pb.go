//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/lib/teleterm/v1/auth_settings.proto

package teletermv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClientVersionStatus describes the compatibility status of the client version when compared
// against the version of the server.
type ClientVersionStatus int32

const (
	ClientVersionStatus_CLIENT_VERSION_STATUS_COMPAT_UNSPECIFIED ClientVersionStatus = 0
	// CLIENT_VERSION_STATUS_OK means that the client is on the same major version as the server or at
	// most one major version behind.
	// For example, the server is on v17.1.0 and the client is on v16.0.4.
	ClientVersionStatus_CLIENT_VERSION_STATUS_OK ClientVersionStatus = 1
	// CLIENT_VERSION_STATUS_TOO_OLD means that the client is at least two major versions behind the
	// server.
	// For example, the server is on v19.3.2 and the client is on v17.4.1.
	ClientVersionStatus_CLIENT_VERSION_STATUS_TOO_OLD ClientVersionStatus = 2
	// CLIENT_VERSION_STATUS_TOO_NEW means that the client is at least one major version ahead of the
	// server.
	// For example, the server is on v18.2.1 and the client is on v19.0.0.
	ClientVersionStatus_CLIENT_VERSION_STATUS_TOO_NEW ClientVersionStatus = 3
)

// Enum value maps for ClientVersionStatus.
var (
	ClientVersionStatus_name = map[int32]string{
		0: "CLIENT_VERSION_STATUS_COMPAT_UNSPECIFIED",
		1: "CLIENT_VERSION_STATUS_OK",
		2: "CLIENT_VERSION_STATUS_TOO_OLD",
		3: "CLIENT_VERSION_STATUS_TOO_NEW",
	}
	ClientVersionStatus_value = map[string]int32{
		"CLIENT_VERSION_STATUS_COMPAT_UNSPECIFIED": 0,
		"CLIENT_VERSION_STATUS_OK":                 1,
		"CLIENT_VERSION_STATUS_TOO_OLD":            2,
		"CLIENT_VERSION_STATUS_TOO_NEW":            3,
	}
)

func (x ClientVersionStatus) Enum() *ClientVersionStatus {
	p := new(ClientVersionStatus)
	*p = x
	return p
}

func (x ClientVersionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientVersionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_teleterm_v1_auth_settings_proto_enumTypes[0].Descriptor()
}

func (ClientVersionStatus) Type() protoreflect.EnumType {
	return &file_teleport_lib_teleterm_v1_auth_settings_proto_enumTypes[0]
}

func (x ClientVersionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientVersionStatus.Descriptor instead.
func (ClientVersionStatus) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescGZIP(), []int{0}
}

// AuthSettings contains the form of authentication the auth server supports.
type AuthSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// local_auth_enabled is a flag that enables local authentication
	LocalAuthEnabled bool `protobuf:"varint,1,opt,name=local_auth_enabled,json=localAuthEnabled,proto3" json:"local_auth_enabled,omitempty"`
	// auth_providers contains a list of auth providers
	AuthProviders []*AuthProvider `protobuf:"bytes,4,rep,name=auth_providers,json=authProviders,proto3" json:"auth_providers,omitempty"`
	// has_message_of_the_day is a flag indicating that the cluster has MOTD
	// banner text that must be retrieved, displayed and acknowledged by
	// the user.
	HasMessageOfTheDay bool `protobuf:"varint,5,opt,name=has_message_of_the_day,json=hasMessageOfTheDay,proto3" json:"has_message_of_the_day,omitempty"`
	// auth_type is the authentication type e.g. "local", "github", "saml", "oidc"
	AuthType string `protobuf:"bytes,6,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	// allow_passwordless is true if passwordless logins are allowed.
	AllowPasswordless bool `protobuf:"varint,7,opt,name=allow_passwordless,json=allowPasswordless,proto3" json:"allow_passwordless,omitempty"`
	// local_connector_name is the name of the local connector.
	LocalConnectorName string `protobuf:"bytes,8,opt,name=local_connector_name,json=localConnectorName,proto3" json:"local_connector_name,omitempty"`
	// client_version_status describes the compatibility status of the client version when compared
	// against the version of the server.
	ClientVersionStatus ClientVersionStatus `protobuf:"varint,9,opt,name=client_version_status,json=clientVersionStatus,proto3,enum=teleport.lib.teleterm.v1.ClientVersionStatus" json:"client_version_status,omitempty"`
	Versions            *Versions           `protobuf:"bytes,10,opt,name=versions,proto3" json:"versions,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AuthSettings) Reset() {
	*x = AuthSettings{}
	mi := &file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSettings) ProtoMessage() {}

func (x *AuthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSettings.ProtoReflect.Descriptor instead.
func (*AuthSettings) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescGZIP(), []int{0}
}

func (x *AuthSettings) GetLocalAuthEnabled() bool {
	if x != nil {
		return x.LocalAuthEnabled
	}
	return false
}

func (x *AuthSettings) GetAuthProviders() []*AuthProvider {
	if x != nil {
		return x.AuthProviders
	}
	return nil
}

func (x *AuthSettings) GetHasMessageOfTheDay() bool {
	if x != nil {
		return x.HasMessageOfTheDay
	}
	return false
}

func (x *AuthSettings) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *AuthSettings) GetAllowPasswordless() bool {
	if x != nil {
		return x.AllowPasswordless
	}
	return false
}

func (x *AuthSettings) GetLocalConnectorName() string {
	if x != nil {
		return x.LocalConnectorName
	}
	return ""
}

func (x *AuthSettings) GetClientVersionStatus() ClientVersionStatus {
	if x != nil {
		return x.ClientVersionStatus
	}
	return ClientVersionStatus_CLIENT_VERSION_STATUS_COMPAT_UNSPECIFIED
}

func (x *AuthSettings) GetVersions() *Versions {
	if x != nil {
		return x.Versions
	}
	return nil
}

// AuthProvider describes a way of authentication that is supported by the server. Auth provider is
// referred to as "auth connector" on the backend.
type AuthProvider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the auth provider type (github|oidc|etc)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name is the internal name of the connector.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Display is the display name for the connector.
	DisplayName   string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthProvider) Reset() {
	*x = AuthProvider{}
	mi := &file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthProvider) ProtoMessage() {}

func (x *AuthProvider) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthProvider.ProtoReflect.Descriptor instead.
func (*AuthProvider) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescGZIP(), []int{1}
}

func (x *AuthProvider) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuthProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthProvider) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Versions contains versions of different components that can be used to show the client
// incompatibility warning. This way Connect can show the warning before the cluster is added to the
// app.
type Versions struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	MinClient string                 `protobuf:"bytes,1,opt,name=min_client,json=minClient,proto3" json:"min_client,omitempty"`
	// client is the version of tsh. Included for convenience, in theory the Electron app knows this
	// without asking tsh.
	Client        string `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	Server        string `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Versions) Reset() {
	*x = Versions{}
	mi := &file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Versions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Versions) ProtoMessage() {}

func (x *Versions) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Versions.ProtoReflect.Descriptor instead.
func (*Versions) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescGZIP(), []int{2}
}

func (x *Versions) GetMinClient() string {
	if x != nil {
		return x.MinClient
	}
	return ""
}

func (x *Versions) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *Versions) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

var File_teleport_lib_teleterm_v1_auth_settings_proto protoreflect.FileDescriptor

const file_teleport_lib_teleterm_v1_auth_settings_proto_rawDesc = "" +
	"\n" +
	",teleport/lib/teleterm/v1/auth_settings.proto\x12\x18teleport.lib.teleterm.v1\"\x8a\x04\n" +
	"\fAuthSettings\x12,\n" +
	"\x12local_auth_enabled\x18\x01 \x01(\bR\x10localAuthEnabled\x12M\n" +
	"\x0eauth_providers\x18\x04 \x03(\v2&.teleport.lib.teleterm.v1.AuthProviderR\rauthProviders\x122\n" +
	"\x16has_message_of_the_day\x18\x05 \x01(\bR\x12hasMessageOfTheDay\x12\x1b\n" +
	"\tauth_type\x18\x06 \x01(\tR\bauthType\x12-\n" +
	"\x12allow_passwordless\x18\a \x01(\bR\x11allowPasswordless\x120\n" +
	"\x14local_connector_name\x18\b \x01(\tR\x12localConnectorName\x12a\n" +
	"\x15client_version_status\x18\t \x01(\x0e2-.teleport.lib.teleterm.v1.ClientVersionStatusR\x13clientVersionStatus\x12>\n" +
	"\bversions\x18\n" +
	" \x01(\v2\".teleport.lib.teleterm.v1.VersionsR\bversionsJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04R\rsecond_factorR\rpreferred_mfa\"Y\n" +
	"\fAuthProvider\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\"Y\n" +
	"\bVersions\x12\x1d\n" +
	"\n" +
	"min_client\x18\x01 \x01(\tR\tminClient\x12\x16\n" +
	"\x06client\x18\x02 \x01(\tR\x06client\x12\x16\n" +
	"\x06server\x18\x03 \x01(\tR\x06server*\xa7\x01\n" +
	"\x13ClientVersionStatus\x12,\n" +
	"(CLIENT_VERSION_STATUS_COMPAT_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CLIENT_VERSION_STATUS_OK\x10\x01\x12!\n" +
	"\x1dCLIENT_VERSION_STATUS_TOO_OLD\x10\x02\x12!\n" +
	"\x1dCLIENT_VERSION_STATUS_TOO_NEW\x10\x03BTZRgithub.com/gravitational/teleport/gen/proto/go/teleport/lib/teleterm/v1;teletermv1b\x06proto3"

var (
	file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescOnce sync.Once
	file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescData []byte
)

func file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescGZIP() []byte {
	file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescOnce.Do(func() {
		file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_v1_auth_settings_proto_rawDesc), len(file_teleport_lib_teleterm_v1_auth_settings_proto_rawDesc)))
	})
	return file_teleport_lib_teleterm_v1_auth_settings_proto_rawDescData
}

var file_teleport_lib_teleterm_v1_auth_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_teleport_lib_teleterm_v1_auth_settings_proto_goTypes = []any{
	(ClientVersionStatus)(0), // 0: teleport.lib.teleterm.v1.ClientVersionStatus
	(*AuthSettings)(nil),     // 1: teleport.lib.teleterm.v1.AuthSettings
	(*AuthProvider)(nil),     // 2: teleport.lib.teleterm.v1.AuthProvider
	(*Versions)(nil),         // 3: teleport.lib.teleterm.v1.Versions
}
var file_teleport_lib_teleterm_v1_auth_settings_proto_depIdxs = []int32{
	2, // 0: teleport.lib.teleterm.v1.AuthSettings.auth_providers:type_name -> teleport.lib.teleterm.v1.AuthProvider
	0, // 1: teleport.lib.teleterm.v1.AuthSettings.client_version_status:type_name -> teleport.lib.teleterm.v1.ClientVersionStatus
	3, // 2: teleport.lib.teleterm.v1.AuthSettings.versions:type_name -> teleport.lib.teleterm.v1.Versions
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_teleport_lib_teleterm_v1_auth_settings_proto_init() }
func file_teleport_lib_teleterm_v1_auth_settings_proto_init() {
	if File_teleport_lib_teleterm_v1_auth_settings_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_v1_auth_settings_proto_rawDesc), len(file_teleport_lib_teleterm_v1_auth_settings_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_lib_teleterm_v1_auth_settings_proto_goTypes,
		DependencyIndexes: file_teleport_lib_teleterm_v1_auth_settings_proto_depIdxs,
		EnumInfos:         file_teleport_lib_teleterm_v1_auth_settings_proto_enumTypes,
		MessageInfos:      file_teleport_lib_teleterm_v1_auth_settings_proto_msgTypes,
	}.Build()
	File_teleport_lib_teleterm_v1_auth_settings_proto = out.File
	file_teleport_lib_teleterm_v1_auth_settings_proto_goTypes = nil
	file_teleport_lib_teleterm_v1_auth_settings_proto_depIdxs = nil
}
