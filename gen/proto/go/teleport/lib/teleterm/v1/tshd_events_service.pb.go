//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/lib/teleterm/v1/tshd_events_service.proto

package teletermv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for Relogin.
type ReloginRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RootClusterUri string                 `protobuf:"bytes,1,opt,name=root_cluster_uri,json=rootClusterUri,proto3" json:"root_cluster_uri,omitempty"`
	// Types that are valid to be assigned to Reason:
	//
	//	*ReloginRequest_GatewayCertExpired
	//	*ReloginRequest_VnetCertExpired
	Reason        isReloginRequest_Reason `protobuf_oneof:"reason"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloginRequest) Reset() {
	*x = ReloginRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloginRequest) ProtoMessage() {}

func (x *ReloginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloginRequest.ProtoReflect.Descriptor instead.
func (*ReloginRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{0}
}

func (x *ReloginRequest) GetRootClusterUri() string {
	if x != nil {
		return x.RootClusterUri
	}
	return ""
}

func (x *ReloginRequest) GetReason() isReloginRequest_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *ReloginRequest) GetGatewayCertExpired() *GatewayCertExpired {
	if x != nil {
		if x, ok := x.Reason.(*ReloginRequest_GatewayCertExpired); ok {
			return x.GatewayCertExpired
		}
	}
	return nil
}

func (x *ReloginRequest) GetVnetCertExpired() *VnetCertExpired {
	if x != nil {
		if x, ok := x.Reason.(*ReloginRequest_VnetCertExpired); ok {
			return x.VnetCertExpired
		}
	}
	return nil
}

type isReloginRequest_Reason interface {
	isReloginRequest_Reason()
}

type ReloginRequest_GatewayCertExpired struct {
	GatewayCertExpired *GatewayCertExpired `protobuf:"bytes,2,opt,name=gateway_cert_expired,json=gatewayCertExpired,proto3,oneof"`
}

type ReloginRequest_VnetCertExpired struct {
	VnetCertExpired *VnetCertExpired `protobuf:"bytes,3,opt,name=vnet_cert_expired,json=vnetCertExpired,proto3,oneof"`
}

func (*ReloginRequest_GatewayCertExpired) isReloginRequest_Reason() {}

func (*ReloginRequest_VnetCertExpired) isReloginRequest_Reason() {}

// GatewayCertExpired is given as the reason when a database client attempts to make a connection
// through the gateway, the gateway middleware notices that the db cert has expired and tries to
// connect to the cluster to reissue the cert, but fails because the user cert has expired as well.
//
// At that point in order to let the connection through, tshd needs the Electron app to refresh the
// user cert by asking the user to log in again.
type GatewayCertExpired struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GatewayUri    string                 `protobuf:"bytes,1,opt,name=gateway_uri,json=gatewayUri,proto3" json:"gateway_uri,omitempty"`
	TargetUri     string                 `protobuf:"bytes,2,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayCertExpired) Reset() {
	*x = GatewayCertExpired{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayCertExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayCertExpired) ProtoMessage() {}

func (x *GatewayCertExpired) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayCertExpired.ProtoReflect.Descriptor instead.
func (*GatewayCertExpired) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayCertExpired) GetGatewayUri() string {
	if x != nil {
		return x.GatewayUri
	}
	return ""
}

func (x *GatewayCertExpired) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

// VnetCertExpired describes which app the user was trying to reach with an expired cert.
type VnetCertExpired struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// target_uri for now points solely at apps, but it's not called app_uri to make it future-proof.
	TargetUri string `protobuf:"bytes,1,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	// route_to_app is the metadata associated with the app that the user was trying to reach.
	RouteToApp    *RouteToApp `protobuf:"bytes,3,opt,name=route_to_app,json=routeToApp,proto3" json:"route_to_app,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VnetCertExpired) Reset() {
	*x = VnetCertExpired{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VnetCertExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VnetCertExpired) ProtoMessage() {}

func (x *VnetCertExpired) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VnetCertExpired.ProtoReflect.Descriptor instead.
func (*VnetCertExpired) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{2}
}

func (x *VnetCertExpired) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

func (x *VnetCertExpired) GetRouteToApp() *RouteToApp {
	if x != nil {
		return x.RouteToApp
	}
	return nil
}

// Response for Relogin.
type ReloginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReloginResponse) Reset() {
	*x = ReloginResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloginResponse) ProtoMessage() {}

func (x *ReloginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloginResponse.ProtoReflect.Descriptor instead.
func (*ReloginResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{3}
}

// SendNotificationRequest includes details behind a notification.
//
// Rather than including arbitrary text strings, SendNotificationRequest should contain minimal
// details. The Electron app can then consume and format them as needed, without having to change
// what is sent over the wire.
type SendNotificationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Subject:
	//
	//	*SendNotificationRequest_CannotProxyGatewayConnection
	//	*SendNotificationRequest_CannotProxyVnetConnection
	Subject       isSendNotificationRequest_Subject `protobuf_oneof:"subject"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendNotificationRequest) Reset() {
	*x = SendNotificationRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNotificationRequest) ProtoMessage() {}

func (x *SendNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNotificationRequest.ProtoReflect.Descriptor instead.
func (*SendNotificationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{4}
}

func (x *SendNotificationRequest) GetSubject() isSendNotificationRequest_Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *SendNotificationRequest) GetCannotProxyGatewayConnection() *CannotProxyGatewayConnection {
	if x != nil {
		if x, ok := x.Subject.(*SendNotificationRequest_CannotProxyGatewayConnection); ok {
			return x.CannotProxyGatewayConnection
		}
	}
	return nil
}

func (x *SendNotificationRequest) GetCannotProxyVnetConnection() *CannotProxyVnetConnection {
	if x != nil {
		if x, ok := x.Subject.(*SendNotificationRequest_CannotProxyVnetConnection); ok {
			return x.CannotProxyVnetConnection
		}
	}
	return nil
}

type isSendNotificationRequest_Subject interface {
	isSendNotificationRequest_Subject()
}

type SendNotificationRequest_CannotProxyGatewayConnection struct {
	CannotProxyGatewayConnection *CannotProxyGatewayConnection `protobuf:"bytes,1,opt,name=cannot_proxy_gateway_connection,json=cannotProxyGatewayConnection,proto3,oneof"`
}

type SendNotificationRequest_CannotProxyVnetConnection struct {
	CannotProxyVnetConnection *CannotProxyVnetConnection `protobuf:"bytes,2,opt,name=cannot_proxy_vnet_connection,json=cannotProxyVnetConnection,proto3,oneof"`
}

func (*SendNotificationRequest_CannotProxyGatewayConnection) isSendNotificationRequest_Subject() {}

func (*SendNotificationRequest_CannotProxyVnetConnection) isSendNotificationRequest_Subject() {}

// CannotProxyGatewayConnection is the subject when the middleware used by the gateway encounters an
// unrecoverable error and cannot let the connection through. The middleware code is executed within
// a separate goroutine so if the error wasn't passed to the Electron app, it would have been
// visible only in the logs.
type CannotProxyGatewayConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GatewayUri    string                 `protobuf:"bytes,1,opt,name=gateway_uri,json=gatewayUri,proto3" json:"gateway_uri,omitempty"`
	TargetUri     string                 `protobuf:"bytes,2,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CannotProxyGatewayConnection) Reset() {
	*x = CannotProxyGatewayConnection{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CannotProxyGatewayConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CannotProxyGatewayConnection) ProtoMessage() {}

func (x *CannotProxyGatewayConnection) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CannotProxyGatewayConnection.ProtoReflect.Descriptor instead.
func (*CannotProxyGatewayConnection) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{5}
}

func (x *CannotProxyGatewayConnection) GetGatewayUri() string {
	if x != nil {
		return x.GatewayUri
	}
	return ""
}

func (x *CannotProxyGatewayConnection) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

func (x *CannotProxyGatewayConnection) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// CannotProxyVnetConnection describes which app couldn't have been proxied through VNet and why.
type CannotProxyVnetConnection struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	TargetUri string                 `protobuf:"bytes,1,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	// route_to_app is the metadata associated with the app that the user was trying to reach.
	RouteToApp *RouteToApp `protobuf:"bytes,4,opt,name=route_to_app,json=routeToApp,proto3" json:"route_to_app,omitempty"`
	// Types that are valid to be assigned to Reason:
	//
	//	*CannotProxyVnetConnection_CertReissueError
	//	*CannotProxyVnetConnection_InvalidLocalPort
	Reason        isCannotProxyVnetConnection_Reason `protobuf_oneof:"reason"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CannotProxyVnetConnection) Reset() {
	*x = CannotProxyVnetConnection{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CannotProxyVnetConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CannotProxyVnetConnection) ProtoMessage() {}

func (x *CannotProxyVnetConnection) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CannotProxyVnetConnection.ProtoReflect.Descriptor instead.
func (*CannotProxyVnetConnection) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{6}
}

func (x *CannotProxyVnetConnection) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

func (x *CannotProxyVnetConnection) GetRouteToApp() *RouteToApp {
	if x != nil {
		return x.RouteToApp
	}
	return nil
}

func (x *CannotProxyVnetConnection) GetReason() isCannotProxyVnetConnection_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *CannotProxyVnetConnection) GetCertReissueError() *CertReissueError {
	if x != nil {
		if x, ok := x.Reason.(*CannotProxyVnetConnection_CertReissueError); ok {
			return x.CertReissueError
		}
	}
	return nil
}

func (x *CannotProxyVnetConnection) GetInvalidLocalPort() *InvalidLocalPort {
	if x != nil {
		if x, ok := x.Reason.(*CannotProxyVnetConnection_InvalidLocalPort); ok {
			return x.InvalidLocalPort
		}
	}
	return nil
}

type isCannotProxyVnetConnection_Reason interface {
	isCannotProxyVnetConnection_Reason()
}

type CannotProxyVnetConnection_CertReissueError struct {
	CertReissueError *CertReissueError `protobuf:"bytes,5,opt,name=cert_reissue_error,json=certReissueError,proto3,oneof"`
}

type CannotProxyVnetConnection_InvalidLocalPort struct {
	InvalidLocalPort *InvalidLocalPort `protobuf:"bytes,6,opt,name=invalid_local_port,json=invalidLocalPort,proto3,oneof"`
}

func (*CannotProxyVnetConnection_CertReissueError) isCannotProxyVnetConnection_Reason() {}

func (*CannotProxyVnetConnection_InvalidLocalPort) isCannotProxyVnetConnection_Reason() {}

// CertReissueError is sent as reason in CannotProxyVnetConnection when VNet wasn't able to reissue
// a cert for a local proxy.
type CertReissueError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertReissueError) Reset() {
	*x = CertReissueError{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertReissueError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertReissueError) ProtoMessage() {}

func (x *CertReissueError) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertReissueError.ProtoReflect.Descriptor instead.
func (*CertReissueError) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{7}
}

func (x *CertReissueError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// InvalidLocalPort is sent as reason in CannotProxyVnetConnection when VNet refused a connection
// because its local port did not match any TCP ports in the spec of the app. The port is included
// in route_to_app as target_port.
type InvalidLocalPort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// tcp_ports represents valid port ranges for the app. Sent only if there's less than 10 port
	// ranges to keep the UI clean and to limit how much data is sent on each failed attempt.
	TcpPorts      []*PortRange `protobuf:"bytes,1,rep,name=tcp_ports,json=tcpPorts,proto3" json:"tcp_ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidLocalPort) Reset() {
	*x = InvalidLocalPort{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidLocalPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidLocalPort) ProtoMessage() {}

func (x *InvalidLocalPort) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidLocalPort.ProtoReflect.Descriptor instead.
func (*InvalidLocalPort) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{8}
}

func (x *InvalidLocalPort) GetTcpPorts() []*PortRange {
	if x != nil {
		return x.TcpPorts
	}
	return nil
}

// Response for SendNotification.
type SendNotificationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendNotificationResponse) Reset() {
	*x = SendNotificationResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNotificationResponse) ProtoMessage() {}

func (x *SendNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNotificationResponse.ProtoReflect.Descriptor instead.
func (*SendNotificationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{9}
}

// Request for SendPendingHeadlessAuthentication.
type SendPendingHeadlessAuthenticationRequest struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	RootClusterUri                 string                 `protobuf:"bytes,1,opt,name=root_cluster_uri,json=rootClusterUri,proto3" json:"root_cluster_uri,omitempty"`
	HeadlessAuthenticationId       string                 `protobuf:"bytes,2,opt,name=headless_authentication_id,json=headlessAuthenticationId,proto3" json:"headless_authentication_id,omitempty"`
	HeadlessAuthenticationClientIp string                 `protobuf:"bytes,3,opt,name=headless_authentication_client_ip,json=headlessAuthenticationClientIp,proto3" json:"headless_authentication_client_ip,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *SendPendingHeadlessAuthenticationRequest) Reset() {
	*x = SendPendingHeadlessAuthenticationRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPendingHeadlessAuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPendingHeadlessAuthenticationRequest) ProtoMessage() {}

func (x *SendPendingHeadlessAuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPendingHeadlessAuthenticationRequest.ProtoReflect.Descriptor instead.
func (*SendPendingHeadlessAuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{10}
}

func (x *SendPendingHeadlessAuthenticationRequest) GetRootClusterUri() string {
	if x != nil {
		return x.RootClusterUri
	}
	return ""
}

func (x *SendPendingHeadlessAuthenticationRequest) GetHeadlessAuthenticationId() string {
	if x != nil {
		return x.HeadlessAuthenticationId
	}
	return ""
}

func (x *SendPendingHeadlessAuthenticationRequest) GetHeadlessAuthenticationClientIp() string {
	if x != nil {
		return x.HeadlessAuthenticationClientIp
	}
	return ""
}

// Response for SendPendingHeadlessAuthentication.
type SendPendingHeadlessAuthenticationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendPendingHeadlessAuthenticationResponse) Reset() {
	*x = SendPendingHeadlessAuthenticationResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPendingHeadlessAuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPendingHeadlessAuthenticationResponse) ProtoMessage() {}

func (x *SendPendingHeadlessAuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPendingHeadlessAuthenticationResponse.ProtoReflect.Descriptor instead.
func (*SendPendingHeadlessAuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{11}
}

// Request for PromptMFA.
type PromptMFARequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Reason     string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Totp       bool                   `protobuf:"varint,3,opt,name=totp,proto3" json:"totp,omitempty"`
	Webauthn   bool                   `protobuf:"varint,4,opt,name=webauthn,proto3" json:"webauthn,omitempty"`
	ClusterUri string                 `protobuf:"bytes,5,opt,name=cluster_uri,json=clusterUri,proto3" json:"cluster_uri,omitempty"`
	Sso        *SSOChallenge          `protobuf:"bytes,6,opt,name=sso,proto3" json:"sso,omitempty"`
	// We may handle MFA options differently based on whether or not per-session
	// MFA is required. For example, we invalidate TOTP as an option during
	// per-session MFA but we may still need to know that the user has TOTP
	// configured as an option.
	PerSessionMfa bool `protobuf:"varint,7,opt,name=per_session_mfa,json=perSessionMfa,proto3" json:"per_session_mfa,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromptMFARequest) Reset() {
	*x = PromptMFARequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptMFARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptMFARequest) ProtoMessage() {}

func (x *PromptMFARequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptMFARequest.ProtoReflect.Descriptor instead.
func (*PromptMFARequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{12}
}

func (x *PromptMFARequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PromptMFARequest) GetTotp() bool {
	if x != nil {
		return x.Totp
	}
	return false
}

func (x *PromptMFARequest) GetWebauthn() bool {
	if x != nil {
		return x.Webauthn
	}
	return false
}

func (x *PromptMFARequest) GetClusterUri() string {
	if x != nil {
		return x.ClusterUri
	}
	return ""
}

func (x *PromptMFARequest) GetSso() *SSOChallenge {
	if x != nil {
		return x.Sso
	}
	return nil
}

func (x *PromptMFARequest) GetPerSessionMfa() bool {
	if x != nil {
		return x.PerSessionMfa
	}
	return false
}

// SSOChallenge contains SSO challenge details.
type SSOChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectorId   string                 `protobuf:"bytes,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	ConnectorType string                 `protobuf:"bytes,2,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	DisplayName   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	RedirectUrl   string                 `protobuf:"bytes,4,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSOChallenge) Reset() {
	*x = SSOChallenge{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSOChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSOChallenge) ProtoMessage() {}

func (x *SSOChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSOChallenge.ProtoReflect.Descriptor instead.
func (*SSOChallenge) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{13}
}

func (x *SSOChallenge) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *SSOChallenge) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

func (x *SSOChallenge) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SSOChallenge) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

// Response for PromptMFA.
type PromptMFAResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotpCode      string                 `protobuf:"bytes,1,opt,name=totp_code,json=totpCode,proto3" json:"totp_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromptMFAResponse) Reset() {
	*x = PromptMFAResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptMFAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptMFAResponse) ProtoMessage() {}

func (x *PromptMFAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptMFAResponse.ProtoReflect.Descriptor instead.
func (*PromptMFAResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{14}
}

func (x *PromptMFAResponse) GetTotpCode() string {
	if x != nil {
		return x.TotpCode
	}
	return ""
}

// Request for PromptHardwareKeyPIN.
type PromptHardwareKeyPINRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RootClusterUri string                 `protobuf:"bytes,1,opt,name=root_cluster_uri,json=rootClusterUri,proto3" json:"root_cluster_uri,omitempty"`
	// Specifies if a PIN is optional, allowing the user to set it up if left empty.
	PinOptional   bool `protobuf:"varint,2,opt,name=pin_optional,json=pinOptional,proto3" json:"pin_optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromptHardwareKeyPINRequest) Reset() {
	*x = PromptHardwareKeyPINRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptHardwareKeyPINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptHardwareKeyPINRequest) ProtoMessage() {}

func (x *PromptHardwareKeyPINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptHardwareKeyPINRequest.ProtoReflect.Descriptor instead.
func (*PromptHardwareKeyPINRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{15}
}

func (x *PromptHardwareKeyPINRequest) GetRootClusterUri() string {
	if x != nil {
		return x.RootClusterUri
	}
	return ""
}

func (x *PromptHardwareKeyPINRequest) GetPinOptional() bool {
	if x != nil {
		return x.PinOptional
	}
	return false
}

// Response for PromptHardwareKeyPIN.
type PromptHardwareKeyPINResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// pin as inputted by the user in the Electron app.
	Pin           string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromptHardwareKeyPINResponse) Reset() {
	*x = PromptHardwareKeyPINResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptHardwareKeyPINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptHardwareKeyPINResponse) ProtoMessage() {}

func (x *PromptHardwareKeyPINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptHardwareKeyPINResponse.ProtoReflect.Descriptor instead.
func (*PromptHardwareKeyPINResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{16}
}

func (x *PromptHardwareKeyPINResponse) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

// Request for PromptHardwareKeyTouchRequest.
type PromptHardwareKeyTouchRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RootClusterUri string                 `protobuf:"bytes,1,opt,name=root_cluster_uri,json=rootClusterUri,proto3" json:"root_cluster_uri,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PromptHardwareKeyTouchRequest) Reset() {
	*x = PromptHardwareKeyTouchRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptHardwareKeyTouchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptHardwareKeyTouchRequest) ProtoMessage() {}

func (x *PromptHardwareKeyTouchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptHardwareKeyTouchRequest.ProtoReflect.Descriptor instead.
func (*PromptHardwareKeyTouchRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{17}
}

func (x *PromptHardwareKeyTouchRequest) GetRootClusterUri() string {
	if x != nil {
		return x.RootClusterUri
	}
	return ""
}

// Response for PromptHardwareKeyTouch.
type PromptHardwareKeyTouchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromptHardwareKeyTouchResponse) Reset() {
	*x = PromptHardwareKeyTouchResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptHardwareKeyTouchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptHardwareKeyTouchResponse) ProtoMessage() {}

func (x *PromptHardwareKeyTouchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptHardwareKeyTouchResponse.ProtoReflect.Descriptor instead.
func (*PromptHardwareKeyTouchResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{18}
}

// Response for PromptHardwareKeyPINChange.
type PromptHardwareKeyPINChangeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RootClusterUri string                 `protobuf:"bytes,1,opt,name=root_cluster_uri,json=rootClusterUri,proto3" json:"root_cluster_uri,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PromptHardwareKeyPINChangeRequest) Reset() {
	*x = PromptHardwareKeyPINChangeRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptHardwareKeyPINChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptHardwareKeyPINChangeRequest) ProtoMessage() {}

func (x *PromptHardwareKeyPINChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptHardwareKeyPINChangeRequest.ProtoReflect.Descriptor instead.
func (*PromptHardwareKeyPINChangeRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{19}
}

func (x *PromptHardwareKeyPINChangeRequest) GetRootClusterUri() string {
	if x != nil {
		return x.RootClusterUri
	}
	return ""
}

// Response for PromptHardwareKeyPINChange.
type PromptHardwareKeyPINChangeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// New pin set by the user.
	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	// PUK is needed to change the PIN.
	// This is a new PUK if it has not been changed from the default PUK.
	Puk string `protobuf:"bytes,2,opt,name=puk,proto3" json:"puk,omitempty"`
	// puk_changed is true if the user changed the default PUK.
	PukChanged    bool `protobuf:"varint,3,opt,name=puk_changed,json=pukChanged,proto3" json:"puk_changed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromptHardwareKeyPINChangeResponse) Reset() {
	*x = PromptHardwareKeyPINChangeResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptHardwareKeyPINChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptHardwareKeyPINChangeResponse) ProtoMessage() {}

func (x *PromptHardwareKeyPINChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptHardwareKeyPINChangeResponse.ProtoReflect.Descriptor instead.
func (*PromptHardwareKeyPINChangeResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{20}
}

func (x *PromptHardwareKeyPINChangeResponse) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *PromptHardwareKeyPINChangeResponse) GetPuk() string {
	if x != nil {
		return x.Puk
	}
	return ""
}

func (x *PromptHardwareKeyPINChangeResponse) GetPukChanged() bool {
	if x != nil {
		return x.PukChanged
	}
	return false
}

// Request for ConfirmHardwareKeySlotOverwrite.
type ConfirmHardwareKeySlotOverwriteRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RootClusterUri string                 `protobuf:"bytes,1,opt,name=root_cluster_uri,json=rootClusterUri,proto3" json:"root_cluster_uri,omitempty"`
	// Message to display in the prompt.
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmHardwareKeySlotOverwriteRequest) Reset() {
	*x = ConfirmHardwareKeySlotOverwriteRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmHardwareKeySlotOverwriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmHardwareKeySlotOverwriteRequest) ProtoMessage() {}

func (x *ConfirmHardwareKeySlotOverwriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmHardwareKeySlotOverwriteRequest.ProtoReflect.Descriptor instead.
func (*ConfirmHardwareKeySlotOverwriteRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{21}
}

func (x *ConfirmHardwareKeySlotOverwriteRequest) GetRootClusterUri() string {
	if x != nil {
		return x.RootClusterUri
	}
	return ""
}

func (x *ConfirmHardwareKeySlotOverwriteRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Response for ConfirmHardwareKeySlotOverwrite.
type ConfirmHardwareKeySlotOverwriteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, the slot will be overridden.
	Confirmed     bool `protobuf:"varint,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmHardwareKeySlotOverwriteResponse) Reset() {
	*x = ConfirmHardwareKeySlotOverwriteResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmHardwareKeySlotOverwriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmHardwareKeySlotOverwriteResponse) ProtoMessage() {}

func (x *ConfirmHardwareKeySlotOverwriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmHardwareKeySlotOverwriteResponse.ProtoReflect.Descriptor instead.
func (*ConfirmHardwareKeySlotOverwriteResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{22}
}

func (x *ConfirmHardwareKeySlotOverwriteResponse) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

// Request for GetUsageReportingSettings.
type GetUsageReportingSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUsageReportingSettingsRequest) Reset() {
	*x = GetUsageReportingSettingsRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsageReportingSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsageReportingSettingsRequest) ProtoMessage() {}

func (x *GetUsageReportingSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsageReportingSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetUsageReportingSettingsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{23}
}

// Response for GetUsageReportingSettings.
type GetUsageReportingSettingsResponse struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	UsageReportingSettings *UsageReportingSettings `protobuf:"bytes,1,opt,name=usage_reporting_settings,json=usageReportingSettings,proto3" json:"usage_reporting_settings,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetUsageReportingSettingsResponse) Reset() {
	*x = GetUsageReportingSettingsResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsageReportingSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsageReportingSettingsResponse) ProtoMessage() {}

func (x *GetUsageReportingSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsageReportingSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetUsageReportingSettingsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetUsageReportingSettingsResponse) GetUsageReportingSettings() *UsageReportingSettings {
	if x != nil {
		return x.UsageReportingSettings
	}
	return nil
}

// UsageReportingSettings contains information about usage reporting as understood by the Electron
// app.
type UsageReportingSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsageReportingSettings) Reset() {
	*x = UsageReportingSettings{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageReportingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageReportingSettings) ProtoMessage() {}

func (x *UsageReportingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageReportingSettings.ProtoReflect.Descriptor instead.
func (*UsageReportingSettings) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{25}
}

func (x *UsageReportingSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Request for ReportUnexpectedVnetShutdown.
type ReportUnexpectedVnetShutdownRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error is the error message with which VNet was shut down. Technically it can be empty, so
	// consumers should account for that.
	Error         string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportUnexpectedVnetShutdownRequest) Reset() {
	*x = ReportUnexpectedVnetShutdownRequest{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportUnexpectedVnetShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUnexpectedVnetShutdownRequest) ProtoMessage() {}

func (x *ReportUnexpectedVnetShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUnexpectedVnetShutdownRequest.ProtoReflect.Descriptor instead.
func (*ReportUnexpectedVnetShutdownRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{26}
}

func (x *ReportUnexpectedVnetShutdownRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Response for ReportUnexpectedVnetShutdown.
type ReportUnexpectedVnetShutdownResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportUnexpectedVnetShutdownResponse) Reset() {
	*x = ReportUnexpectedVnetShutdownResponse{}
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportUnexpectedVnetShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUnexpectedVnetShutdownResponse) ProtoMessage() {}

func (x *ReportUnexpectedVnetShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUnexpectedVnetShutdownResponse.ProtoReflect.Descriptor instead.
func (*ReportUnexpectedVnetShutdownResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP(), []int{27}
}

var File_teleport_lib_teleterm_v1_tshd_events_service_proto protoreflect.FileDescriptor

const file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDesc = "" +
	"\n" +
	"2teleport/lib/teleterm/v1/tshd_events_service.proto\x12\x18teleport.lib.teleterm.v1\x1a\"teleport/lib/teleterm/v1/app.proto\"\xff\x01\n" +
	"\x0eReloginRequest\x12(\n" +
	"\x10root_cluster_uri\x18\x01 \x01(\tR\x0erootClusterUri\x12`\n" +
	"\x14gateway_cert_expired\x18\x02 \x01(\v2,.teleport.lib.teleterm.v1.GatewayCertExpiredH\x00R\x12gatewayCertExpired\x12W\n" +
	"\x11vnet_cert_expired\x18\x03 \x01(\v2).teleport.lib.teleterm.v1.VnetCertExpiredH\x00R\x0fvnetCertExpiredB\b\n" +
	"\x06reason\"T\n" +
	"\x12GatewayCertExpired\x12\x1f\n" +
	"\vgateway_uri\x18\x01 \x01(\tR\n" +
	"gatewayUri\x12\x1d\n" +
	"\n" +
	"target_uri\x18\x02 \x01(\tR\ttargetUri\"\x8b\x01\n" +
	"\x0fVnetCertExpired\x12\x1d\n" +
	"\n" +
	"target_uri\x18\x01 \x01(\tR\ttargetUri\x12F\n" +
	"\froute_to_app\x18\x03 \x01(\v2$.teleport.lib.teleterm.v1.RouteToAppR\n" +
	"routeToAppJ\x04\b\x02\x10\x03R\vpublic_addr\"\x11\n" +
	"\x0fReloginResponse\"\x9d\x02\n" +
	"\x17SendNotificationRequest\x12\x7f\n" +
	"\x1fcannot_proxy_gateway_connection\x18\x01 \x01(\v26.teleport.lib.teleterm.v1.CannotProxyGatewayConnectionH\x00R\x1ccannotProxyGatewayConnection\x12v\n" +
	"\x1ccannot_proxy_vnet_connection\x18\x02 \x01(\v23.teleport.lib.teleterm.v1.CannotProxyVnetConnectionH\x00R\x19cannotProxyVnetConnectionB\t\n" +
	"\asubject\"t\n" +
	"\x1cCannotProxyGatewayConnection\x12\x1f\n" +
	"\vgateway_uri\x18\x01 \x01(\tR\n" +
	"gatewayUri\x12\x1d\n" +
	"\n" +
	"target_uri\x18\x02 \x01(\tR\ttargetUri\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\xe4\x02\n" +
	"\x19CannotProxyVnetConnection\x12\x1d\n" +
	"\n" +
	"target_uri\x18\x01 \x01(\tR\ttargetUri\x12F\n" +
	"\froute_to_app\x18\x04 \x01(\v2$.teleport.lib.teleterm.v1.RouteToAppR\n" +
	"routeToApp\x12Z\n" +
	"\x12cert_reissue_error\x18\x05 \x01(\v2*.teleport.lib.teleterm.v1.CertReissueErrorH\x00R\x10certReissueError\x12Z\n" +
	"\x12invalid_local_port\x18\x06 \x01(\v2*.teleport.lib.teleterm.v1.InvalidLocalPortH\x00R\x10invalidLocalPortB\b\n" +
	"\x06reasonJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04R\x05errorR\vpublic_addr\"(\n" +
	"\x10CertReissueError\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\"T\n" +
	"\x10InvalidLocalPort\x12@\n" +
	"\ttcp_ports\x18\x01 \x03(\v2#.teleport.lib.teleterm.v1.PortRangeR\btcpPorts\"\x1a\n" +
	"\x18SendNotificationResponse\"\xdd\x01\n" +
	"(SendPendingHeadlessAuthenticationRequest\x12(\n" +
	"\x10root_cluster_uri\x18\x01 \x01(\tR\x0erootClusterUri\x12<\n" +
	"\x1aheadless_authentication_id\x18\x02 \x01(\tR\x18headlessAuthenticationId\x12I\n" +
	"!headless_authentication_client_ip\x18\x03 \x01(\tR\x1eheadlessAuthenticationClientIp\"+\n" +
	")SendPendingHeadlessAuthenticationResponse\"\xf5\x01\n" +
	"\x10PromptMFARequest\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x12\n" +
	"\x04totp\x18\x03 \x01(\bR\x04totp\x12\x1a\n" +
	"\bwebauthn\x18\x04 \x01(\bR\bwebauthn\x12\x1f\n" +
	"\vcluster_uri\x18\x05 \x01(\tR\n" +
	"clusterUri\x128\n" +
	"\x03sso\x18\x06 \x01(\v2&.teleport.lib.teleterm.v1.SSOChallengeR\x03sso\x12&\n" +
	"\x0fper_session_mfa\x18\a \x01(\bR\rperSessionMfaJ\x04\b\x01\x10\x02R\x10root_cluster_uri\"\x9e\x01\n" +
	"\fSSOChallenge\x12!\n" +
	"\fconnector_id\x18\x01 \x01(\tR\vconnectorId\x12%\n" +
	"\x0econnector_type\x18\x02 \x01(\tR\rconnectorType\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12!\n" +
	"\fredirect_url\x18\x04 \x01(\tR\vredirectUrl\"0\n" +
	"\x11PromptMFAResponse\x12\x1b\n" +
	"\ttotp_code\x18\x01 \x01(\tR\btotpCode\"j\n" +
	"\x1bPromptHardwareKeyPINRequest\x12(\n" +
	"\x10root_cluster_uri\x18\x01 \x01(\tR\x0erootClusterUri\x12!\n" +
	"\fpin_optional\x18\x02 \x01(\bR\vpinOptional\"0\n" +
	"\x1cPromptHardwareKeyPINResponse\x12\x10\n" +
	"\x03pin\x18\x01 \x01(\tR\x03pin\"I\n" +
	"\x1dPromptHardwareKeyTouchRequest\x12(\n" +
	"\x10root_cluster_uri\x18\x01 \x01(\tR\x0erootClusterUri\" \n" +
	"\x1ePromptHardwareKeyTouchResponse\"M\n" +
	"!PromptHardwareKeyPINChangeRequest\x12(\n" +
	"\x10root_cluster_uri\x18\x01 \x01(\tR\x0erootClusterUri\"i\n" +
	"\"PromptHardwareKeyPINChangeResponse\x12\x10\n" +
	"\x03pin\x18\x01 \x01(\tR\x03pin\x12\x10\n" +
	"\x03puk\x18\x02 \x01(\tR\x03puk\x12\x1f\n" +
	"\vpuk_changed\x18\x03 \x01(\bR\n" +
	"pukChanged\"l\n" +
	"&ConfirmHardwareKeySlotOverwriteRequest\x12(\n" +
	"\x10root_cluster_uri\x18\x01 \x01(\tR\x0erootClusterUri\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"G\n" +
	"'ConfirmHardwareKeySlotOverwriteResponse\x12\x1c\n" +
	"\tconfirmed\x18\x01 \x01(\bR\tconfirmed\"\"\n" +
	" GetUsageReportingSettingsRequest\"\x8f\x01\n" +
	"!GetUsageReportingSettingsResponse\x12j\n" +
	"\x18usage_reporting_settings\x18\x01 \x01(\v20.teleport.lib.teleterm.v1.UsageReportingSettingsR\x16usageReportingSettings\"2\n" +
	"\x16UsageReportingSettings\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\";\n" +
	"#ReportUnexpectedVnetShutdownRequest\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\"&\n" +
	"$ReportUnexpectedVnetShutdownResponse2\x93\v\n" +
	"\x11TshdEventsService\x12^\n" +
	"\aRelogin\x12(.teleport.lib.teleterm.v1.ReloginRequest\x1a).teleport.lib.teleterm.v1.ReloginResponse\x12y\n" +
	"\x10SendNotification\x121.teleport.lib.teleterm.v1.SendNotificationRequest\x1a2.teleport.lib.teleterm.v1.SendNotificationResponse\x12\xac\x01\n" +
	"!SendPendingHeadlessAuthentication\x12B.teleport.lib.teleterm.v1.SendPendingHeadlessAuthenticationRequest\x1aC.teleport.lib.teleterm.v1.SendPendingHeadlessAuthenticationResponse\x12d\n" +
	"\tPromptMFA\x12*.teleport.lib.teleterm.v1.PromptMFARequest\x1a+.teleport.lib.teleterm.v1.PromptMFAResponse\x12\x85\x01\n" +
	"\x14PromptHardwareKeyPIN\x125.teleport.lib.teleterm.v1.PromptHardwareKeyPINRequest\x1a6.teleport.lib.teleterm.v1.PromptHardwareKeyPINResponse\x12\x8b\x01\n" +
	"\x16PromptHardwareKeyTouch\x127.teleport.lib.teleterm.v1.PromptHardwareKeyTouchRequest\x1a8.teleport.lib.teleterm.v1.PromptHardwareKeyTouchResponse\x12\x97\x01\n" +
	"\x1aPromptHardwareKeyPINChange\x12;.teleport.lib.teleterm.v1.PromptHardwareKeyPINChangeRequest\x1a<.teleport.lib.teleterm.v1.PromptHardwareKeyPINChangeResponse\x12\xa6\x01\n" +
	"\x1fConfirmHardwareKeySlotOverwrite\x12@.teleport.lib.teleterm.v1.ConfirmHardwareKeySlotOverwriteRequest\x1aA.teleport.lib.teleterm.v1.ConfirmHardwareKeySlotOverwriteResponse\x12\x94\x01\n" +
	"\x19GetUsageReportingSettings\x12:.teleport.lib.teleterm.v1.GetUsageReportingSettingsRequest\x1a;.teleport.lib.teleterm.v1.GetUsageReportingSettingsResponse\x12\x9d\x01\n" +
	"\x1cReportUnexpectedVnetShutdown\x12=.teleport.lib.teleterm.v1.ReportUnexpectedVnetShutdownRequest\x1a>.teleport.lib.teleterm.v1.ReportUnexpectedVnetShutdownResponseBTZRgithub.com/gravitational/teleport/gen/proto/go/teleport/lib/teleterm/v1;teletermv1b\x06proto3"

var (
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescOnce sync.Once
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescData []byte
)

func file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescGZIP() []byte {
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescOnce.Do(func() {
		file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDesc), len(file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDesc)))
	})
	return file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDescData
}

var file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_teleport_lib_teleterm_v1_tshd_events_service_proto_goTypes = []any{
	(*ReloginRequest)(nil),                            // 0: teleport.lib.teleterm.v1.ReloginRequest
	(*GatewayCertExpired)(nil),                        // 1: teleport.lib.teleterm.v1.GatewayCertExpired
	(*VnetCertExpired)(nil),                           // 2: teleport.lib.teleterm.v1.VnetCertExpired
	(*ReloginResponse)(nil),                           // 3: teleport.lib.teleterm.v1.ReloginResponse
	(*SendNotificationRequest)(nil),                   // 4: teleport.lib.teleterm.v1.SendNotificationRequest
	(*CannotProxyGatewayConnection)(nil),              // 5: teleport.lib.teleterm.v1.CannotProxyGatewayConnection
	(*CannotProxyVnetConnection)(nil),                 // 6: teleport.lib.teleterm.v1.CannotProxyVnetConnection
	(*CertReissueError)(nil),                          // 7: teleport.lib.teleterm.v1.CertReissueError
	(*InvalidLocalPort)(nil),                          // 8: teleport.lib.teleterm.v1.InvalidLocalPort
	(*SendNotificationResponse)(nil),                  // 9: teleport.lib.teleterm.v1.SendNotificationResponse
	(*SendPendingHeadlessAuthenticationRequest)(nil),  // 10: teleport.lib.teleterm.v1.SendPendingHeadlessAuthenticationRequest
	(*SendPendingHeadlessAuthenticationResponse)(nil), // 11: teleport.lib.teleterm.v1.SendPendingHeadlessAuthenticationResponse
	(*PromptMFARequest)(nil),                          // 12: teleport.lib.teleterm.v1.PromptMFARequest
	(*SSOChallenge)(nil),                              // 13: teleport.lib.teleterm.v1.SSOChallenge
	(*PromptMFAResponse)(nil),                         // 14: teleport.lib.teleterm.v1.PromptMFAResponse
	(*PromptHardwareKeyPINRequest)(nil),               // 15: teleport.lib.teleterm.v1.PromptHardwareKeyPINRequest
	(*PromptHardwareKeyPINResponse)(nil),              // 16: teleport.lib.teleterm.v1.PromptHardwareKeyPINResponse
	(*PromptHardwareKeyTouchRequest)(nil),             // 17: teleport.lib.teleterm.v1.PromptHardwareKeyTouchRequest
	(*PromptHardwareKeyTouchResponse)(nil),            // 18: teleport.lib.teleterm.v1.PromptHardwareKeyTouchResponse
	(*PromptHardwareKeyPINChangeRequest)(nil),         // 19: teleport.lib.teleterm.v1.PromptHardwareKeyPINChangeRequest
	(*PromptHardwareKeyPINChangeResponse)(nil),        // 20: teleport.lib.teleterm.v1.PromptHardwareKeyPINChangeResponse
	(*ConfirmHardwareKeySlotOverwriteRequest)(nil),    // 21: teleport.lib.teleterm.v1.ConfirmHardwareKeySlotOverwriteRequest
	(*ConfirmHardwareKeySlotOverwriteResponse)(nil),   // 22: teleport.lib.teleterm.v1.ConfirmHardwareKeySlotOverwriteResponse
	(*GetUsageReportingSettingsRequest)(nil),          // 23: teleport.lib.teleterm.v1.GetUsageReportingSettingsRequest
	(*GetUsageReportingSettingsResponse)(nil),         // 24: teleport.lib.teleterm.v1.GetUsageReportingSettingsResponse
	(*UsageReportingSettings)(nil),                    // 25: teleport.lib.teleterm.v1.UsageReportingSettings
	(*ReportUnexpectedVnetShutdownRequest)(nil),       // 26: teleport.lib.teleterm.v1.ReportUnexpectedVnetShutdownRequest
	(*ReportUnexpectedVnetShutdownResponse)(nil),      // 27: teleport.lib.teleterm.v1.ReportUnexpectedVnetShutdownResponse
	(*RouteToApp)(nil),                                // 28: teleport.lib.teleterm.v1.RouteToApp
	(*PortRange)(nil),                                 // 29: teleport.lib.teleterm.v1.PortRange
}
var file_teleport_lib_teleterm_v1_tshd_events_service_proto_depIdxs = []int32{
	1,  // 0: teleport.lib.teleterm.v1.ReloginRequest.gateway_cert_expired:type_name -> teleport.lib.teleterm.v1.GatewayCertExpired
	2,  // 1: teleport.lib.teleterm.v1.ReloginRequest.vnet_cert_expired:type_name -> teleport.lib.teleterm.v1.VnetCertExpired
	28, // 2: teleport.lib.teleterm.v1.VnetCertExpired.route_to_app:type_name -> teleport.lib.teleterm.v1.RouteToApp
	5,  // 3: teleport.lib.teleterm.v1.SendNotificationRequest.cannot_proxy_gateway_connection:type_name -> teleport.lib.teleterm.v1.CannotProxyGatewayConnection
	6,  // 4: teleport.lib.teleterm.v1.SendNotificationRequest.cannot_proxy_vnet_connection:type_name -> teleport.lib.teleterm.v1.CannotProxyVnetConnection
	28, // 5: teleport.lib.teleterm.v1.CannotProxyVnetConnection.route_to_app:type_name -> teleport.lib.teleterm.v1.RouteToApp
	7,  // 6: teleport.lib.teleterm.v1.CannotProxyVnetConnection.cert_reissue_error:type_name -> teleport.lib.teleterm.v1.CertReissueError
	8,  // 7: teleport.lib.teleterm.v1.CannotProxyVnetConnection.invalid_local_port:type_name -> teleport.lib.teleterm.v1.InvalidLocalPort
	29, // 8: teleport.lib.teleterm.v1.InvalidLocalPort.tcp_ports:type_name -> teleport.lib.teleterm.v1.PortRange
	13, // 9: teleport.lib.teleterm.v1.PromptMFARequest.sso:type_name -> teleport.lib.teleterm.v1.SSOChallenge
	25, // 10: teleport.lib.teleterm.v1.GetUsageReportingSettingsResponse.usage_reporting_settings:type_name -> teleport.lib.teleterm.v1.UsageReportingSettings
	0,  // 11: teleport.lib.teleterm.v1.TshdEventsService.Relogin:input_type -> teleport.lib.teleterm.v1.ReloginRequest
	4,  // 12: teleport.lib.teleterm.v1.TshdEventsService.SendNotification:input_type -> teleport.lib.teleterm.v1.SendNotificationRequest
	10, // 13: teleport.lib.teleterm.v1.TshdEventsService.SendPendingHeadlessAuthentication:input_type -> teleport.lib.teleterm.v1.SendPendingHeadlessAuthenticationRequest
	12, // 14: teleport.lib.teleterm.v1.TshdEventsService.PromptMFA:input_type -> teleport.lib.teleterm.v1.PromptMFARequest
	15, // 15: teleport.lib.teleterm.v1.TshdEventsService.PromptHardwareKeyPIN:input_type -> teleport.lib.teleterm.v1.PromptHardwareKeyPINRequest
	17, // 16: teleport.lib.teleterm.v1.TshdEventsService.PromptHardwareKeyTouch:input_type -> teleport.lib.teleterm.v1.PromptHardwareKeyTouchRequest
	19, // 17: teleport.lib.teleterm.v1.TshdEventsService.PromptHardwareKeyPINChange:input_type -> teleport.lib.teleterm.v1.PromptHardwareKeyPINChangeRequest
	21, // 18: teleport.lib.teleterm.v1.TshdEventsService.ConfirmHardwareKeySlotOverwrite:input_type -> teleport.lib.teleterm.v1.ConfirmHardwareKeySlotOverwriteRequest
	23, // 19: teleport.lib.teleterm.v1.TshdEventsService.GetUsageReportingSettings:input_type -> teleport.lib.teleterm.v1.GetUsageReportingSettingsRequest
	26, // 20: teleport.lib.teleterm.v1.TshdEventsService.ReportUnexpectedVnetShutdown:input_type -> teleport.lib.teleterm.v1.ReportUnexpectedVnetShutdownRequest
	3,  // 21: teleport.lib.teleterm.v1.TshdEventsService.Relogin:output_type -> teleport.lib.teleterm.v1.ReloginResponse
	9,  // 22: teleport.lib.teleterm.v1.TshdEventsService.SendNotification:output_type -> teleport.lib.teleterm.v1.SendNotificationResponse
	11, // 23: teleport.lib.teleterm.v1.TshdEventsService.SendPendingHeadlessAuthentication:output_type -> teleport.lib.teleterm.v1.SendPendingHeadlessAuthenticationResponse
	14, // 24: teleport.lib.teleterm.v1.TshdEventsService.PromptMFA:output_type -> teleport.lib.teleterm.v1.PromptMFAResponse
	16, // 25: teleport.lib.teleterm.v1.TshdEventsService.PromptHardwareKeyPIN:output_type -> teleport.lib.teleterm.v1.PromptHardwareKeyPINResponse
	18, // 26: teleport.lib.teleterm.v1.TshdEventsService.PromptHardwareKeyTouch:output_type -> teleport.lib.teleterm.v1.PromptHardwareKeyTouchResponse
	20, // 27: teleport.lib.teleterm.v1.TshdEventsService.PromptHardwareKeyPINChange:output_type -> teleport.lib.teleterm.v1.PromptHardwareKeyPINChangeResponse
	22, // 28: teleport.lib.teleterm.v1.TshdEventsService.ConfirmHardwareKeySlotOverwrite:output_type -> teleport.lib.teleterm.v1.ConfirmHardwareKeySlotOverwriteResponse
	24, // 29: teleport.lib.teleterm.v1.TshdEventsService.GetUsageReportingSettings:output_type -> teleport.lib.teleterm.v1.GetUsageReportingSettingsResponse
	27, // 30: teleport.lib.teleterm.v1.TshdEventsService.ReportUnexpectedVnetShutdown:output_type -> teleport.lib.teleterm.v1.ReportUnexpectedVnetShutdownResponse
	21, // [21:31] is the sub-list for method output_type
	11, // [11:21] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_teleport_lib_teleterm_v1_tshd_events_service_proto_init() }
func file_teleport_lib_teleterm_v1_tshd_events_service_proto_init() {
	if File_teleport_lib_teleterm_v1_tshd_events_service_proto != nil {
		return
	}
	file_teleport_lib_teleterm_v1_app_proto_init()
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[0].OneofWrappers = []any{
		(*ReloginRequest_GatewayCertExpired)(nil),
		(*ReloginRequest_VnetCertExpired)(nil),
	}
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[4].OneofWrappers = []any{
		(*SendNotificationRequest_CannotProxyGatewayConnection)(nil),
		(*SendNotificationRequest_CannotProxyVnetConnection)(nil),
	}
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes[6].OneofWrappers = []any{
		(*CannotProxyVnetConnection_CertReissueError)(nil),
		(*CannotProxyVnetConnection_InvalidLocalPort)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDesc), len(file_teleport_lib_teleterm_v1_tshd_events_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_lib_teleterm_v1_tshd_events_service_proto_goTypes,
		DependencyIndexes: file_teleport_lib_teleterm_v1_tshd_events_service_proto_depIdxs,
		MessageInfos:      file_teleport_lib_teleterm_v1_tshd_events_service_proto_msgTypes,
	}.Build()
	File_teleport_lib_teleterm_v1_tshd_events_service_proto = out.File
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_goTypes = nil
	file_teleport_lib_teleterm_v1_tshd_events_service_proto_depIdxs = nil
}
