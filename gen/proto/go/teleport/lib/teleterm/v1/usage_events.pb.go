//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/lib/teleterm/v1/usage_events.proto

package teletermv1

import (
	v1alpha "github.com/gravitational/teleport/gen/proto/go/prehog/v1alpha"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportUsageEventRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	AuthClusterId string                             `protobuf:"bytes,1,opt,name=auth_cluster_id,json=authClusterId,proto3" json:"auth_cluster_id,omitempty"`
	PrehogReq     *v1alpha.SubmitConnectEventRequest `protobuf:"bytes,2,opt,name=prehog_req,json=prehogReq,proto3" json:"prehog_req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportUsageEventRequest) Reset() {
	*x = ReportUsageEventRequest{}
	mi := &file_teleport_lib_teleterm_v1_usage_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportUsageEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUsageEventRequest) ProtoMessage() {}

func (x *ReportUsageEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_v1_usage_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUsageEventRequest.ProtoReflect.Descriptor instead.
func (*ReportUsageEventRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_v1_usage_events_proto_rawDescGZIP(), []int{0}
}

func (x *ReportUsageEventRequest) GetAuthClusterId() string {
	if x != nil {
		return x.AuthClusterId
	}
	return ""
}

func (x *ReportUsageEventRequest) GetPrehogReq() *v1alpha.SubmitConnectEventRequest {
	if x != nil {
		return x.PrehogReq
	}
	return nil
}

var File_teleport_lib_teleterm_v1_usage_events_proto protoreflect.FileDescriptor

const file_teleport_lib_teleterm_v1_usage_events_proto_rawDesc = "" +
	"\n" +
	"+teleport/lib/teleterm/v1/usage_events.proto\x12\x18teleport.lib.teleterm.v1\x1a\x1cprehog/v1alpha/connect.proto\"\x8b\x01\n" +
	"\x17ReportUsageEventRequest\x12&\n" +
	"\x0fauth_cluster_id\x18\x01 \x01(\tR\rauthClusterId\x12H\n" +
	"\n" +
	"prehog_req\x18\x02 \x01(\v2).prehog.v1alpha.SubmitConnectEventRequestR\tprehogReqBTZRgithub.com/gravitational/teleport/gen/proto/go/teleport/lib/teleterm/v1;teletermv1b\x06proto3"

var (
	file_teleport_lib_teleterm_v1_usage_events_proto_rawDescOnce sync.Once
	file_teleport_lib_teleterm_v1_usage_events_proto_rawDescData []byte
)

func file_teleport_lib_teleterm_v1_usage_events_proto_rawDescGZIP() []byte {
	file_teleport_lib_teleterm_v1_usage_events_proto_rawDescOnce.Do(func() {
		file_teleport_lib_teleterm_v1_usage_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_v1_usage_events_proto_rawDesc), len(file_teleport_lib_teleterm_v1_usage_events_proto_rawDesc)))
	})
	return file_teleport_lib_teleterm_v1_usage_events_proto_rawDescData
}

var file_teleport_lib_teleterm_v1_usage_events_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teleport_lib_teleterm_v1_usage_events_proto_goTypes = []any{
	(*ReportUsageEventRequest)(nil),           // 0: teleport.lib.teleterm.v1.ReportUsageEventRequest
	(*v1alpha.SubmitConnectEventRequest)(nil), // 1: prehog.v1alpha.SubmitConnectEventRequest
}
var file_teleport_lib_teleterm_v1_usage_events_proto_depIdxs = []int32{
	1, // 0: teleport.lib.teleterm.v1.ReportUsageEventRequest.prehog_req:type_name -> prehog.v1alpha.SubmitConnectEventRequest
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_teleport_lib_teleterm_v1_usage_events_proto_init() }
func file_teleport_lib_teleterm_v1_usage_events_proto_init() {
	if File_teleport_lib_teleterm_v1_usage_events_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_v1_usage_events_proto_rawDesc), len(file_teleport_lib_teleterm_v1_usage_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_lib_teleterm_v1_usage_events_proto_goTypes,
		DependencyIndexes: file_teleport_lib_teleterm_v1_usage_events_proto_depIdxs,
		MessageInfos:      file_teleport_lib_teleterm_v1_usage_events_proto_msgTypes,
	}.Build()
	File_teleport_lib_teleterm_v1_usage_events_proto = out.File
	file_teleport_lib_teleterm_v1_usage_events_proto_goTypes = nil
	file_teleport_lib_teleterm_v1_usage_events_proto_depIdxs = nil
}
