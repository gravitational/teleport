//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/lib/teleterm/v1/tshd_events_service.proto

package teletermv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TshdEventsService_Relogin_FullMethodName                           = "/teleport.lib.teleterm.v1.TshdEventsService/Relogin"
	TshdEventsService_SendNotification_FullMethodName                  = "/teleport.lib.teleterm.v1.TshdEventsService/SendNotification"
	TshdEventsService_SendPendingHeadlessAuthentication_FullMethodName = "/teleport.lib.teleterm.v1.TshdEventsService/SendPendingHeadlessAuthentication"
	TshdEventsService_PromptMFA_FullMethodName                         = "/teleport.lib.teleterm.v1.TshdEventsService/PromptMFA"
	TshdEventsService_PromptHardwareKeyPIN_FullMethodName              = "/teleport.lib.teleterm.v1.TshdEventsService/PromptHardwareKeyPIN"
	TshdEventsService_PromptHardwareKeyTouch_FullMethodName            = "/teleport.lib.teleterm.v1.TshdEventsService/PromptHardwareKeyTouch"
	TshdEventsService_PromptHardwareKeyPINChange_FullMethodName        = "/teleport.lib.teleterm.v1.TshdEventsService/PromptHardwareKeyPINChange"
	TshdEventsService_ConfirmHardwareKeySlotOverwrite_FullMethodName   = "/teleport.lib.teleterm.v1.TshdEventsService/ConfirmHardwareKeySlotOverwrite"
	TshdEventsService_GetUsageReportingSettings_FullMethodName         = "/teleport.lib.teleterm.v1.TshdEventsService/GetUsageReportingSettings"
	TshdEventsService_ReportUnexpectedVnetShutdown_FullMethodName      = "/teleport.lib.teleterm.v1.TshdEventsService/ReportUnexpectedVnetShutdown"
)

// TshdEventsServiceClient is the client API for TshdEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TshdEventsService is served by the Electron app. The tsh daemon calls this service to notify the
// app about actions that happen outside of the app itself.
type TshdEventsServiceClient interface {
	// Relogin makes the Electron app display a login modal for the specific root cluster. The request
	// returns a response after the relogin procedure has been successfully finished.
	Relogin(ctx context.Context, in *ReloginRequest, opts ...grpc.CallOption) (*ReloginResponse, error)
	// SendNotification causes the Electron app to display a notification in the UI. The request
	// accepts a specific message rather than a generic string so that the Electron is in control as
	// to what message is displayed and how exactly it looks.
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	// SendPendingHeadlessAuthentication notifies the Electron app of a pending headless authentication,
	// which it can use to initiate headless authentication resolution in the UI.
	SendPendingHeadlessAuthentication(ctx context.Context, in *SendPendingHeadlessAuthenticationRequest, opts ...grpc.CallOption) (*SendPendingHeadlessAuthenticationResponse, error)
	// PromptMFA notifies the Electron app that the daemon wants to prompt for MFA.
	// If TOTP is supported, the Electron app can return a totp code to complete the ceremony.
	// If Webauthn or SSO are supported, tsh daemon waits for the Electron App to choose
	// an option in the response before prompting for either.
	//
	// In order for the WebAuthn and SSO prompts to be reflected in the Electron App, the
	// Electron app can display a waiting screen and listen for the tsh daemon to send a
	// notification to close the screen.
	PromptMFA(ctx context.Context, in *PromptMFARequest, opts ...grpc.CallOption) (*PromptMFAResponse, error)
	// PromptHardwareKeyPIN notifies the Electron app that the daemon is waiting for the user to
	// provide the hardware key PIN.
	PromptHardwareKeyPIN(ctx context.Context, in *PromptHardwareKeyPINRequest, opts ...grpc.CallOption) (*PromptHardwareKeyPINResponse, error)
	// PromptHardwareKeyTouch notifies the Electron app that the daemon is waiting for the user to touch the hardware key.
	// When the daemon detects the touch, it cancels the prompt.
	PromptHardwareKeyTouch(ctx context.Context, in *PromptHardwareKeyTouchRequest, opts ...grpc.CallOption) (*PromptHardwareKeyTouchResponse, error)
	// PromptHardwareKeyPINChange notifies the Electron app that the daemon is waiting for the user to
	// change the hardware key PIN.
	PromptHardwareKeyPINChange(ctx context.Context, in *PromptHardwareKeyPINChangeRequest, opts ...grpc.CallOption) (*PromptHardwareKeyPINChangeResponse, error)
	// ConfirmHardwareKeySlotOverwrite displays a dialog prompting the user to confirm whether
	// the slot's private key and certificate should be overwritten.
	ConfirmHardwareKeySlotOverwrite(ctx context.Context, in *ConfirmHardwareKeySlotOverwriteRequest, opts ...grpc.CallOption) (*ConfirmHardwareKeySlotOverwriteResponse, error)
	// GetUsageReportingSettings returns the current state of usage reporting.
	// At the moment, the user cannot toggle usage reporting on and off without shutting down the app,
	// with the only exception being the first start of the app when they're prompted about telemetry.
	// Hence why this is an RPC and not information passed over argv to tsh daemon.
	GetUsageReportingSettings(ctx context.Context, in *GetUsageReportingSettingsRequest, opts ...grpc.CallOption) (*GetUsageReportingSettingsResponse, error)
	// ReportUnexpectedVnetShutdown is sent by tsh daemon when VNet exits outside of the
	// request-response cycle of Start and Stop RPCs of VnetService. The Electron app is then able to
	// update the state of VNet in the UI.
	ReportUnexpectedVnetShutdown(ctx context.Context, in *ReportUnexpectedVnetShutdownRequest, opts ...grpc.CallOption) (*ReportUnexpectedVnetShutdownResponse, error)
}

type tshdEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTshdEventsServiceClient(cc grpc.ClientConnInterface) TshdEventsServiceClient {
	return &tshdEventsServiceClient{cc}
}

func (c *tshdEventsServiceClient) Relogin(ctx context.Context, in *ReloginRequest, opts ...grpc.CallOption) (*ReloginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloginResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_Relogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) SendPendingHeadlessAuthentication(ctx context.Context, in *SendPendingHeadlessAuthenticationRequest, opts ...grpc.CallOption) (*SendPendingHeadlessAuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPendingHeadlessAuthenticationResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_SendPendingHeadlessAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) PromptMFA(ctx context.Context, in *PromptMFARequest, opts ...grpc.CallOption) (*PromptMFAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptMFAResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_PromptMFA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) PromptHardwareKeyPIN(ctx context.Context, in *PromptHardwareKeyPINRequest, opts ...grpc.CallOption) (*PromptHardwareKeyPINResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptHardwareKeyPINResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_PromptHardwareKeyPIN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) PromptHardwareKeyTouch(ctx context.Context, in *PromptHardwareKeyTouchRequest, opts ...grpc.CallOption) (*PromptHardwareKeyTouchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptHardwareKeyTouchResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_PromptHardwareKeyTouch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) PromptHardwareKeyPINChange(ctx context.Context, in *PromptHardwareKeyPINChangeRequest, opts ...grpc.CallOption) (*PromptHardwareKeyPINChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptHardwareKeyPINChangeResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_PromptHardwareKeyPINChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) ConfirmHardwareKeySlotOverwrite(ctx context.Context, in *ConfirmHardwareKeySlotOverwriteRequest, opts ...grpc.CallOption) (*ConfirmHardwareKeySlotOverwriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmHardwareKeySlotOverwriteResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_ConfirmHardwareKeySlotOverwrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) GetUsageReportingSettings(ctx context.Context, in *GetUsageReportingSettingsRequest, opts ...grpc.CallOption) (*GetUsageReportingSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsageReportingSettingsResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_GetUsageReportingSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tshdEventsServiceClient) ReportUnexpectedVnetShutdown(ctx context.Context, in *ReportUnexpectedVnetShutdownRequest, opts ...grpc.CallOption) (*ReportUnexpectedVnetShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportUnexpectedVnetShutdownResponse)
	err := c.cc.Invoke(ctx, TshdEventsService_ReportUnexpectedVnetShutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TshdEventsServiceServer is the server API for TshdEventsService service.
// All implementations must embed UnimplementedTshdEventsServiceServer
// for forward compatibility.
//
// TshdEventsService is served by the Electron app. The tsh daemon calls this service to notify the
// app about actions that happen outside of the app itself.
type TshdEventsServiceServer interface {
	// Relogin makes the Electron app display a login modal for the specific root cluster. The request
	// returns a response after the relogin procedure has been successfully finished.
	Relogin(context.Context, *ReloginRequest) (*ReloginResponse, error)
	// SendNotification causes the Electron app to display a notification in the UI. The request
	// accepts a specific message rather than a generic string so that the Electron is in control as
	// to what message is displayed and how exactly it looks.
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	// SendPendingHeadlessAuthentication notifies the Electron app of a pending headless authentication,
	// which it can use to initiate headless authentication resolution in the UI.
	SendPendingHeadlessAuthentication(context.Context, *SendPendingHeadlessAuthenticationRequest) (*SendPendingHeadlessAuthenticationResponse, error)
	// PromptMFA notifies the Electron app that the daemon wants to prompt for MFA.
	// If TOTP is supported, the Electron app can return a totp code to complete the ceremony.
	// If Webauthn or SSO are supported, tsh daemon waits for the Electron App to choose
	// an option in the response before prompting for either.
	//
	// In order for the WebAuthn and SSO prompts to be reflected in the Electron App, the
	// Electron app can display a waiting screen and listen for the tsh daemon to send a
	// notification to close the screen.
	PromptMFA(context.Context, *PromptMFARequest) (*PromptMFAResponse, error)
	// PromptHardwareKeyPIN notifies the Electron app that the daemon is waiting for the user to
	// provide the hardware key PIN.
	PromptHardwareKeyPIN(context.Context, *PromptHardwareKeyPINRequest) (*PromptHardwareKeyPINResponse, error)
	// PromptHardwareKeyTouch notifies the Electron app that the daemon is waiting for the user to touch the hardware key.
	// When the daemon detects the touch, it cancels the prompt.
	PromptHardwareKeyTouch(context.Context, *PromptHardwareKeyTouchRequest) (*PromptHardwareKeyTouchResponse, error)
	// PromptHardwareKeyPINChange notifies the Electron app that the daemon is waiting for the user to
	// change the hardware key PIN.
	PromptHardwareKeyPINChange(context.Context, *PromptHardwareKeyPINChangeRequest) (*PromptHardwareKeyPINChangeResponse, error)
	// ConfirmHardwareKeySlotOverwrite displays a dialog prompting the user to confirm whether
	// the slot's private key and certificate should be overwritten.
	ConfirmHardwareKeySlotOverwrite(context.Context, *ConfirmHardwareKeySlotOverwriteRequest) (*ConfirmHardwareKeySlotOverwriteResponse, error)
	// GetUsageReportingSettings returns the current state of usage reporting.
	// At the moment, the user cannot toggle usage reporting on and off without shutting down the app,
	// with the only exception being the first start of the app when they're prompted about telemetry.
	// Hence why this is an RPC and not information passed over argv to tsh daemon.
	GetUsageReportingSettings(context.Context, *GetUsageReportingSettingsRequest) (*GetUsageReportingSettingsResponse, error)
	// ReportUnexpectedVnetShutdown is sent by tsh daemon when VNet exits outside of the
	// request-response cycle of Start and Stop RPCs of VnetService. The Electron app is then able to
	// update the state of VNet in the UI.
	ReportUnexpectedVnetShutdown(context.Context, *ReportUnexpectedVnetShutdownRequest) (*ReportUnexpectedVnetShutdownResponse, error)
	mustEmbedUnimplementedTshdEventsServiceServer()
}

// UnimplementedTshdEventsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTshdEventsServiceServer struct{}

func (UnimplementedTshdEventsServiceServer) Relogin(context.Context, *ReloginRequest) (*ReloginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relogin not implemented")
}
func (UnimplementedTshdEventsServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedTshdEventsServiceServer) SendPendingHeadlessAuthentication(context.Context, *SendPendingHeadlessAuthenticationRequest) (*SendPendingHeadlessAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPendingHeadlessAuthentication not implemented")
}
func (UnimplementedTshdEventsServiceServer) PromptMFA(context.Context, *PromptMFARequest) (*PromptMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptMFA not implemented")
}
func (UnimplementedTshdEventsServiceServer) PromptHardwareKeyPIN(context.Context, *PromptHardwareKeyPINRequest) (*PromptHardwareKeyPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptHardwareKeyPIN not implemented")
}
func (UnimplementedTshdEventsServiceServer) PromptHardwareKeyTouch(context.Context, *PromptHardwareKeyTouchRequest) (*PromptHardwareKeyTouchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptHardwareKeyTouch not implemented")
}
func (UnimplementedTshdEventsServiceServer) PromptHardwareKeyPINChange(context.Context, *PromptHardwareKeyPINChangeRequest) (*PromptHardwareKeyPINChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptHardwareKeyPINChange not implemented")
}
func (UnimplementedTshdEventsServiceServer) ConfirmHardwareKeySlotOverwrite(context.Context, *ConfirmHardwareKeySlotOverwriteRequest) (*ConfirmHardwareKeySlotOverwriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmHardwareKeySlotOverwrite not implemented")
}
func (UnimplementedTshdEventsServiceServer) GetUsageReportingSettings(context.Context, *GetUsageReportingSettingsRequest) (*GetUsageReportingSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageReportingSettings not implemented")
}
func (UnimplementedTshdEventsServiceServer) ReportUnexpectedVnetShutdown(context.Context, *ReportUnexpectedVnetShutdownRequest) (*ReportUnexpectedVnetShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUnexpectedVnetShutdown not implemented")
}
func (UnimplementedTshdEventsServiceServer) mustEmbedUnimplementedTshdEventsServiceServer() {}
func (UnimplementedTshdEventsServiceServer) testEmbeddedByValue()                           {}

// UnsafeTshdEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TshdEventsServiceServer will
// result in compilation errors.
type UnsafeTshdEventsServiceServer interface {
	mustEmbedUnimplementedTshdEventsServiceServer()
}

func RegisterTshdEventsServiceServer(s grpc.ServiceRegistrar, srv TshdEventsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTshdEventsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TshdEventsService_ServiceDesc, srv)
}

func _TshdEventsService_Relogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).Relogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_Relogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).Relogin(ctx, req.(*ReloginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_SendPendingHeadlessAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPendingHeadlessAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).SendPendingHeadlessAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_SendPendingHeadlessAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).SendPendingHeadlessAuthentication(ctx, req.(*SendPendingHeadlessAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_PromptMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).PromptMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_PromptMFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).PromptMFA(ctx, req.(*PromptMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_PromptHardwareKeyPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptHardwareKeyPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).PromptHardwareKeyPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_PromptHardwareKeyPIN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).PromptHardwareKeyPIN(ctx, req.(*PromptHardwareKeyPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_PromptHardwareKeyTouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptHardwareKeyTouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).PromptHardwareKeyTouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_PromptHardwareKeyTouch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).PromptHardwareKeyTouch(ctx, req.(*PromptHardwareKeyTouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_PromptHardwareKeyPINChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptHardwareKeyPINChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).PromptHardwareKeyPINChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_PromptHardwareKeyPINChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).PromptHardwareKeyPINChange(ctx, req.(*PromptHardwareKeyPINChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_ConfirmHardwareKeySlotOverwrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmHardwareKeySlotOverwriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).ConfirmHardwareKeySlotOverwrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_ConfirmHardwareKeySlotOverwrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).ConfirmHardwareKeySlotOverwrite(ctx, req.(*ConfirmHardwareKeySlotOverwriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_GetUsageReportingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageReportingSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).GetUsageReportingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_GetUsageReportingSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).GetUsageReportingSettings(ctx, req.(*GetUsageReportingSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TshdEventsService_ReportUnexpectedVnetShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUnexpectedVnetShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TshdEventsServiceServer).ReportUnexpectedVnetShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TshdEventsService_ReportUnexpectedVnetShutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TshdEventsServiceServer).ReportUnexpectedVnetShutdown(ctx, req.(*ReportUnexpectedVnetShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TshdEventsService_ServiceDesc is the grpc.ServiceDesc for TshdEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TshdEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.lib.teleterm.v1.TshdEventsService",
	HandlerType: (*TshdEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Relogin",
			Handler:    _TshdEventsService_Relogin_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _TshdEventsService_SendNotification_Handler,
		},
		{
			MethodName: "SendPendingHeadlessAuthentication",
			Handler:    _TshdEventsService_SendPendingHeadlessAuthentication_Handler,
		},
		{
			MethodName: "PromptMFA",
			Handler:    _TshdEventsService_PromptMFA_Handler,
		},
		{
			MethodName: "PromptHardwareKeyPIN",
			Handler:    _TshdEventsService_PromptHardwareKeyPIN_Handler,
		},
		{
			MethodName: "PromptHardwareKeyTouch",
			Handler:    _TshdEventsService_PromptHardwareKeyTouch_Handler,
		},
		{
			MethodName: "PromptHardwareKeyPINChange",
			Handler:    _TshdEventsService_PromptHardwareKeyPINChange_Handler,
		},
		{
			MethodName: "ConfirmHardwareKeySlotOverwrite",
			Handler:    _TshdEventsService_ConfirmHardwareKeySlotOverwrite_Handler,
		},
		{
			MethodName: "GetUsageReportingSettings",
			Handler:    _TshdEventsService_GetUsageReportingSettings_Handler,
		},
		{
			MethodName: "ReportUnexpectedVnetShutdown",
			Handler:    _TshdEventsService_ReportUnexpectedVnetShutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/lib/teleterm/v1/tshd_events_service.proto",
}
