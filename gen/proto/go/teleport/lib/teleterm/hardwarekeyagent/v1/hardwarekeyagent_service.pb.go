// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: teleport/lib/teleterm/hardwarekeyagent/v1/hardwarekeyagent_service.proto

package hardwarekeyagentv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/attestation/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PIVSlot is a specific PIV slot on a hardware key.
type PIVSlot int32

const (
	// PIV slot not specified.
	PIVSlot_PIV_SLOT_UNSPECIFIED PIVSlot = 0
	// PIV slot 9a. This is the default slot for pin_policy=never, touch_policy=never.
	PIVSlot_PIV_SLOT_9A PIVSlot = 1
	// PIV slot 9c. This is the default slot for pin_policy=never, touch_policy=cached.
	PIVSlot_PIV_SLOT_9C PIVSlot = 2
	// PIV slot 9d. This is the default slot for pin_policy=once, touch_policy=cached.
	PIVSlot_PIV_SLOT_9D PIVSlot = 3
	// PIV slot 9e. This is the default slot for pin_policy=once, touch_policy=never.
	PIVSlot_PIV_SLOT_9E PIVSlot = 4
)

// Enum value maps for PIVSlot.
var (
	PIVSlot_name = map[int32]string{
		0: "PIV_SLOT_UNSPECIFIED",
		1: "PIV_SLOT_9A",
		2: "PIV_SLOT_9C",
		3: "PIV_SLOT_9D",
		4: "PIV_SLOT_9E",
	}
	PIVSlot_value = map[string]int32{
		"PIV_SLOT_UNSPECIFIED": 0,
		"PIV_SLOT_9A":          1,
		"PIV_SLOT_9C":          2,
		"PIV_SLOT_9D":          3,
		"PIV_SLOT_9E":          4,
	}
)

func (x PIVSlot) Enum() *PIVSlot {
	p := new(PIVSlot)
	*p = x
	return p
}

func (x PIVSlot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PIVSlot) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[0].Descriptor()
}

func (PIVSlot) Type() protoreflect.EnumType {
	return &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[0]
}

func (x PIVSlot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PIVSlot.Descriptor instead.
func (PIVSlot) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{0}
}

// HashName is the name of a specific hashing algorithm.
// These values match the Go [crypto] standard library.
type HashName int32

const (
	HashName_HASH_NAME_UNSPECIFIED HashName = 0
	HashName_HASH_NAME_SHA256      HashName = 1
	HashName_HASH_NAME_SHA512      HashName = 2
)

// Enum value maps for HashName.
var (
	HashName_name = map[int32]string{
		0: "HASH_NAME_UNSPECIFIED",
		1: "HASH_NAME_SHA256",
		2: "HASH_NAME_SHA512",
	}
	HashName_value = map[string]int32{
		"HASH_NAME_UNSPECIFIED": 0,
		"HASH_NAME_SHA256":      1,
		"HASH_NAME_SHA512":      2,
	}
)

func (x HashName) Enum() *HashName {
	p := new(HashName)
	*p = x
	return p
}

func (x HashName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashName) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[1].Descriptor()
}

func (HashName) Type() protoreflect.EnumType {
	return &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[1]
}

func (x HashName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashName.Descriptor instead.
func (HashName) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{1}
}

// SaltLengthAuto is the length of the salt added to the digest before a signature.
type SaltLengthAuto int32

const (
	SaltLengthAuto_SALT_LENGTH_AUTO_UNSPECIFIED SaltLengthAuto = 0
	// Use the maximum salt length for a given public key size and hash function size.
	SaltLengthAuto_SALT_LENGTH_AUTO_MAX SaltLengthAuto = 1
	// Use a salt equal in length to the chosen hash used.
	SaltLengthAuto_SALT_LENGTH_AUTO_HASH_LENGTH SaltLengthAuto = 2
)

// Enum value maps for SaltLengthAuto.
var (
	SaltLengthAuto_name = map[int32]string{
		0: "SALT_LENGTH_AUTO_UNSPECIFIED",
		1: "SALT_LENGTH_AUTO_MAX",
		2: "SALT_LENGTH_AUTO_HASH_LENGTH",
	}
	SaltLengthAuto_value = map[string]int32{
		"SALT_LENGTH_AUTO_UNSPECIFIED": 0,
		"SALT_LENGTH_AUTO_MAX":         1,
		"SALT_LENGTH_AUTO_HASH_LENGTH": 2,
	}
)

func (x SaltLengthAuto) Enum() *SaltLengthAuto {
	p := new(SaltLengthAuto)
	*p = x
	return p
}

func (x SaltLengthAuto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaltLengthAuto) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[2].Descriptor()
}

func (SaltLengthAuto) Type() protoreflect.EnumType {
	return &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[2]
}

func (x SaltLengthAuto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SaltLengthAuto.Descriptor instead.
func (SaltLengthAuto) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{2}
}

// SignRequest is a request to perform a signature with a specific hardware private key.
type SignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// KeyRef references a specific hardware private key.
	KeyRef *KeyRef `protobuf:"bytes,1,opt,name=key_ref,json=keyRef,proto3" json:"key_ref,omitempty"`
	// PublicKeyDer is a public key encoded in PKIX, ASN.1 DER form.
	// This is provided to verify that the hardware private key has not
	// been swapped out against the public key expected by the client.
	PublicKeyDer []byte `protobuf:"bytes,2,opt,name=public_key_der,json=publicKeyDer,proto3" json:"public_key_der,omitempty"`
	// Digest is a hashed message to sign.
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// HashName is the name of the hash used to generate the digest.
	HashName HashName `protobuf:"varint,4,opt,name=hash_name,json=hashName,proto3,enum=teleport.lib.teleterm.hardwarekeyagent.v1.HashName" json:"hash_name,omitempty"`
	// SaltLength determines the length of the salt added to the digest before a signature.
	// Only required for PSS signatures.
	//
	// Types that are valid to be assigned to SaltLength:
	//
	//	*SignRequest_Length
	//	*SignRequest_Auto
	SaltLength    isSignRequest_SaltLength `protobuf_oneof:"salt_length"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{0}
}

func (x *SignRequest) GetKeyRef() *KeyRef {
	if x != nil {
		return x.KeyRef
	}
	return nil
}

func (x *SignRequest) GetPublicKeyDer() []byte {
	if x != nil {
		return x.PublicKeyDer
	}
	return nil
}

func (x *SignRequest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SignRequest) GetHashName() HashName {
	if x != nil {
		return x.HashName
	}
	return HashName_HASH_NAME_UNSPECIFIED
}

func (x *SignRequest) GetSaltLength() isSignRequest_SaltLength {
	if x != nil {
		return x.SaltLength
	}
	return nil
}

func (x *SignRequest) GetLength() uint32 {
	if x != nil {
		if x, ok := x.SaltLength.(*SignRequest_Length); ok {
			return x.Length
		}
	}
	return 0
}

func (x *SignRequest) GetAuto() SaltLengthAuto {
	if x != nil {
		if x, ok := x.SaltLength.(*SignRequest_Auto); ok {
			return x.Auto
		}
	}
	return SaltLengthAuto_SALT_LENGTH_AUTO_UNSPECIFIED
}

type isSignRequest_SaltLength interface {
	isSignRequest_SaltLength()
}

type SignRequest_Length struct {
	// Length specifies an exact salt length to use.
	Length uint32 `protobuf:"varint,5,opt,name=length,proto3,oneof"`
}

type SignRequest_Auto struct {
	// Auto specifies how the signing process should automatically pick a salt length
	// based on the hash length and key length.
	Auto SaltLengthAuto `protobuf:"varint,6,opt,name=auto,proto3,enum=teleport.lib.teleterm.hardwarekeyagent.v1.SaltLengthAuto,oneof"`
}

func (*SignRequest_Length) isSignRequest_SaltLength() {}

func (*SignRequest_Auto) isSignRequest_SaltLength() {}

// Signature is a private key signature.
type Signature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For an RSA key, signature should be either a PKCS #1 v1.5 or PSS signature,
	// depending on the hash and salt chosen. For an (EC)DSA key, it should be a
	// DER-serialised, ASN.1 signature structure.
	Signature     []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{1}
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// KeyRef references a specific hardware private key.
type KeyRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SerialNumber is the serial number of the hardware key.
	SerialNumber uint32 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// PivSlot is a specific PIV slot on the hardware key.
	PivSlot       PIVSlot `protobuf:"varint,2,opt,name=piv_slot,json=pivSlot,proto3,enum=teleport.lib.teleterm.hardwarekeyagent.v1.PIVSlot" json:"piv_slot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyRef) Reset() {
	*x = KeyRef{}
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRef) ProtoMessage() {}

func (x *KeyRef) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRef.ProtoReflect.Descriptor instead.
func (*KeyRef) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{2}
}

func (x *KeyRef) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *KeyRef) GetPivSlot() PIVSlot {
	if x != nil {
		return x.PivSlot
	}
	return PIVSlot_PIV_SLOT_UNSPECIFIED
}

// GetAttestationRequest is a response to GetAttestation
type GetAttestationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// KeyRef references a specific hardware private key.
	KeyRef        *KeyRef `protobuf:"bytes,1,opt,name=key_ref,json=keyRef,proto3" json:"key_ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttestationRequest) Reset() {
	*x = GetAttestationRequest{}
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttestationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttestationRequest) ProtoMessage() {}

func (x *GetAttestationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttestationRequest.ProtoReflect.Descriptor instead.
func (*GetAttestationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetAttestationRequest) GetKeyRef() *KeyRef {
	if x != nil {
		return x.KeyRef
	}
	return nil
}

// GetAttestationResponse is a response to GetAttestationResponse.
type GetAttestationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AttestationStatement is a hardware key attestation statement corresponding
	// to a hardware private key.
	AttestationStatement *v1.AttestationStatement `protobuf:"bytes,1,opt,name=attestation_statement,json=attestationStatement,proto3" json:"attestation_statement,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetAttestationResponse) Reset() {
	*x = GetAttestationResponse{}
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttestationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttestationResponse) ProtoMessage() {}

func (x *GetAttestationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttestationResponse.ProtoReflect.Descriptor instead.
func (*GetAttestationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetAttestationResponse) GetAttestationStatement() *v1.AttestationStatement {
	if x != nil {
		return x.AttestationStatement
	}
	return nil
}

var File_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto protoreflect.FileDescriptor

var file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc = string([]byte{
	0x0a, 0x48, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe3, 0x02, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6c, 0x69, 0x62,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65,
	0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x6c, 0x69, 0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x61, 0x6c, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x41, 0x75, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x74, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x7c, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x08, 0x70, 0x69, 0x76, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x49, 0x56, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x07, 0x70, 0x69, 0x76, 0x53, 0x6c, 0x6f, 0x74, 0x22,
	0x63, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6b, 0x65,
	0x79, 0x52, 0x65, 0x66, 0x22, 0x7c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x15, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2a, 0x67, 0x0a, 0x07, 0x50, 0x49, 0x56, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x49, 0x56, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x56, 0x5f, 0x53,
	0x4c, 0x4f, 0x54, 0x5f, 0x39, 0x41, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x56, 0x5f,
	0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x39, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x56,
	0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x39, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49,
	0x56, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x39, 0x45, 0x10, 0x04, 0x2a, 0x51, 0x0a, 0x08, 0x48,
	0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x02, 0x2a, 0x6e,
	0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x41, 0x75, 0x74, 0x6f,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x4c, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x41, 0x4c, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x41, 0x4c, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x02, 0x32, 0xab,
	0x02, 0x0a, 0x17, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x04, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x36, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x2e,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x6d, 0x5a, 0x6b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6b, 0x65, 0x79,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x6b, 0x65, 0x79, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescOnce sync.Once
	file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescData []byte
)

func file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP() []byte {
	file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescOnce.Do(func() {
		file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc), len(file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc)))
	})
	return file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescData
}

var file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_goTypes = []any{
	(PIVSlot)(0),                    // 0: teleport.lib.teleterm.hardwarekeyagent.v1.PIVSlot
	(HashName)(0),                   // 1: teleport.lib.teleterm.hardwarekeyagent.v1.HashName
	(SaltLengthAuto)(0),             // 2: teleport.lib.teleterm.hardwarekeyagent.v1.SaltLengthAuto
	(*SignRequest)(nil),             // 3: teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest
	(*Signature)(nil),               // 4: teleport.lib.teleterm.hardwarekeyagent.v1.Signature
	(*KeyRef)(nil),                  // 5: teleport.lib.teleterm.hardwarekeyagent.v1.KeyRef
	(*GetAttestationRequest)(nil),   // 6: teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationRequest
	(*GetAttestationResponse)(nil),  // 7: teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationResponse
	(*v1.AttestationStatement)(nil), // 8: teleport.attestation.v1.AttestationStatement
}
var file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_depIdxs = []int32{
	5, // 0: teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest.key_ref:type_name -> teleport.lib.teleterm.hardwarekeyagent.v1.KeyRef
	1, // 1: teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest.hash_name:type_name -> teleport.lib.teleterm.hardwarekeyagent.v1.HashName
	2, // 2: teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest.auto:type_name -> teleport.lib.teleterm.hardwarekeyagent.v1.SaltLengthAuto
	0, // 3: teleport.lib.teleterm.hardwarekeyagent.v1.KeyRef.piv_slot:type_name -> teleport.lib.teleterm.hardwarekeyagent.v1.PIVSlot
	5, // 4: teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationRequest.key_ref:type_name -> teleport.lib.teleterm.hardwarekeyagent.v1.KeyRef
	8, // 5: teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationResponse.attestation_statement:type_name -> teleport.attestation.v1.AttestationStatement
	3, // 6: teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService.Sign:input_type -> teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest
	6, // 7: teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService.GetAttestation:input_type -> teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationRequest
	4, // 8: teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService.Sign:output_type -> teleport.lib.teleterm.hardwarekeyagent.v1.Signature
	7, // 9: teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService.GetAttestation:output_type -> teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_init() }
func file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_init() {
	if File_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto != nil {
		return
	}
	file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[0].OneofWrappers = []any{
		(*SignRequest_Length)(nil),
		(*SignRequest_Auto)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc), len(file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_goTypes,
		DependencyIndexes: file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_depIdxs,
		EnumInfos:         file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes,
		MessageInfos:      file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes,
	}.Build()
	File_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto = out.File
	file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_goTypes = nil
	file_teleport_lib_teleterm_hardwarekeyagent_v1_hardwarekeyagent_service_proto_depIdxs = nil
}
