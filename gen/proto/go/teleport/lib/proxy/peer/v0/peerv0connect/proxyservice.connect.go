// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: teleport/lib/proxy/peer/v0/proxyservice.proto

package peerv0connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v0 "github.com/gravitational/teleport/gen/proto/go/teleport/lib/proxy/peer/v0"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProxyServiceName is the fully-qualified name of the ProxyService service.
	ProxyServiceName = "proto.ProxyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProxyServiceDialNodeProcedure is the fully-qualified name of the ProxyService's DialNode RPC.
	ProxyServiceDialNodeProcedure = "/proto.ProxyService/DialNode"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	proxyServiceServiceDescriptor        = v0.File_teleport_lib_proxy_peer_v0_proxyservice_proto.Services().ByName("ProxyService")
	proxyServiceDialNodeMethodDescriptor = proxyServiceServiceDescriptor.Methods().ByName("DialNode")
)

// ProxyServiceClient is a client for the proto.ProxyService service.
type ProxyServiceClient interface {
	// DialNode opens a bidrectional stream to the requested node.
	DialNode(context.Context) *connect.BidiStreamForClient[v0.DialNodeRequest, v0.DialNodeResponse]
}

// NewProxyServiceClient constructs a client for the proto.ProxyService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProxyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &proxyServiceClient{
		dialNode: connect.NewClient[v0.DialNodeRequest, v0.DialNodeResponse](
			httpClient,
			baseURL+ProxyServiceDialNodeProcedure,
			connect.WithSchema(proxyServiceDialNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// proxyServiceClient implements ProxyServiceClient.
type proxyServiceClient struct {
	dialNode *connect.Client[v0.DialNodeRequest, v0.DialNodeResponse]
}

// DialNode calls proto.ProxyService.DialNode.
func (c *proxyServiceClient) DialNode(ctx context.Context) *connect.BidiStreamForClient[v0.DialNodeRequest, v0.DialNodeResponse] {
	return c.dialNode.CallBidiStream(ctx)
}

// ProxyServiceHandler is an implementation of the proto.ProxyService service.
type ProxyServiceHandler interface {
	// DialNode opens a bidrectional stream to the requested node.
	DialNode(context.Context, *connect.BidiStream[v0.DialNodeRequest, v0.DialNodeResponse]) error
}

// NewProxyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxyServiceHandler(svc ProxyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	proxyServiceDialNodeHandler := connect.NewBidiStreamHandler(
		ProxyServiceDialNodeProcedure,
		svc.DialNode,
		connect.WithSchema(proxyServiceDialNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.ProxyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProxyServiceDialNodeProcedure:
			proxyServiceDialNodeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProxyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxyServiceHandler struct{}

func (UnimplementedProxyServiceHandler) DialNode(context.Context, *connect.BidiStream[v0.DialNodeRequest, v0.DialNodeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.ProxyService.DialNode is not implemented"))
}
