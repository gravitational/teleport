// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/lib/vnet/diag/v1/diag.proto

package diagv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CheckAttemptStatus describes whether CheckAttempt finished successfully. This is different from
// CheckReportStatus, which describes whether a successful attempt at running a check has found any
// issues. See the comment for CheckAttempt for an example.
type CheckAttemptStatus int32

const (
	CheckAttemptStatus_CHECK_ATTEMPT_STATUS_UNSPECIFIED CheckAttemptStatus = 0
	// CHECK_ATTEMPT_STATUS_OK indicates that the check ran successfully.
	CheckAttemptStatus_CHECK_ATTEMPT_STATUS_OK CheckAttemptStatus = 1
	// CHECK_ATTEMPT_STATUS_ERROR indicates that the check failed to run.
	CheckAttemptStatus_CHECK_ATTEMPT_STATUS_ERROR CheckAttemptStatus = 2
)

// Enum value maps for CheckAttemptStatus.
var (
	CheckAttemptStatus_name = map[int32]string{
		0: "CHECK_ATTEMPT_STATUS_UNSPECIFIED",
		1: "CHECK_ATTEMPT_STATUS_OK",
		2: "CHECK_ATTEMPT_STATUS_ERROR",
	}
	CheckAttemptStatus_value = map[string]int32{
		"CHECK_ATTEMPT_STATUS_UNSPECIFIED": 0,
		"CHECK_ATTEMPT_STATUS_OK":          1,
		"CHECK_ATTEMPT_STATUS_ERROR":       2,
	}
)

func (x CheckAttemptStatus) Enum() *CheckAttemptStatus {
	p := new(CheckAttemptStatus)
	*p = x
	return p
}

func (x CheckAttemptStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckAttemptStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes[0].Descriptor()
}

func (CheckAttemptStatus) Type() protoreflect.EnumType {
	return &file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes[0]
}

func (x CheckAttemptStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckAttemptStatus.Descriptor instead.
func (CheckAttemptStatus) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{0}
}

// CheckReportStatus describes the outcome of a successful attempt at running a check.
type CheckReportStatus int32

const (
	CheckReportStatus_CHECK_REPORT_STATUS_UNSPECIFIED CheckReportStatus = 0
	// CHECK_REPORT_STATUS_OK indicates that the check has not found any issues.
	CheckReportStatus_CHECK_REPORT_STATUS_OK CheckReportStatus = 1
	// CHECK_REPORT_STATUS_ISSUES_FOUND indicates that the check has found at least one issue.
	CheckReportStatus_CHECK_REPORT_STATUS_ISSUES_FOUND CheckReportStatus = 2
)

// Enum value maps for CheckReportStatus.
var (
	CheckReportStatus_name = map[int32]string{
		0: "CHECK_REPORT_STATUS_UNSPECIFIED",
		1: "CHECK_REPORT_STATUS_OK",
		2: "CHECK_REPORT_STATUS_ISSUES_FOUND",
	}
	CheckReportStatus_value = map[string]int32{
		"CHECK_REPORT_STATUS_UNSPECIFIED":  0,
		"CHECK_REPORT_STATUS_OK":           1,
		"CHECK_REPORT_STATUS_ISSUES_FOUND": 2,
	}
)

func (x CheckReportStatus) Enum() *CheckReportStatus {
	p := new(CheckReportStatus)
	*p = x
	return p
}

func (x CheckReportStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckReportStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes[1].Descriptor()
}

func (CheckReportStatus) Type() protoreflect.EnumType {
	return &file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes[1]
}

func (x CheckReportStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckReportStatus.Descriptor instead.
func (CheckReportStatus) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{1}
}

// CommandAttemptStatus describes the status of CommandAttempt.
type CommandAttemptStatus int32

const (
	CommandAttemptStatus_COMMAND_ATTEMPT_STATUS_UNSPECIFIED CommandAttemptStatus = 0
	CommandAttemptStatus_COMMAND_ATTEMPT_STATUS_OK          CommandAttemptStatus = 1
	CommandAttemptStatus_COMMAND_ATTEMPT_STATUS_ERROR       CommandAttemptStatus = 2
)

// Enum value maps for CommandAttemptStatus.
var (
	CommandAttemptStatus_name = map[int32]string{
		0: "COMMAND_ATTEMPT_STATUS_UNSPECIFIED",
		1: "COMMAND_ATTEMPT_STATUS_OK",
		2: "COMMAND_ATTEMPT_STATUS_ERROR",
	}
	CommandAttemptStatus_value = map[string]int32{
		"COMMAND_ATTEMPT_STATUS_UNSPECIFIED": 0,
		"COMMAND_ATTEMPT_STATUS_OK":          1,
		"COMMAND_ATTEMPT_STATUS_ERROR":       2,
	}
)

func (x CommandAttemptStatus) Enum() *CommandAttemptStatus {
	p := new(CommandAttemptStatus)
	*p = x
	return p
}

func (x CommandAttemptStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandAttemptStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes[2].Descriptor()
}

func (CommandAttemptStatus) Type() protoreflect.EnumType {
	return &file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes[2]
}

func (x CommandAttemptStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandAttemptStatus.Descriptor instead.
func (CommandAttemptStatus) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{2}
}

// Report represents the attempts at running individual checks. It also includes general information
// about the network stack managed by VNet. It assumes that each individual check as well as getting
// info about the network stack can fail.
type Report struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// created_at is the UTC timestamp at which the report was generated.
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	NetworkStackAttempt *NetworkStackAttempt   `protobuf:"bytes,2,opt,name=network_stack_attempt,json=networkStackAttempt,proto3" json:"network_stack_attempt,omitempty"`
	Checks              []*CheckAttempt        `protobuf:"bytes,3,rep,name=checks,proto3" json:"checks,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Report) Reset() {
	*x = Report{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Report) GetNetworkStackAttempt() *NetworkStackAttempt {
	if x != nil {
		return x.NetworkStackAttempt
	}
	return nil
}

func (x *Report) GetChecks() []*CheckAttempt {
	if x != nil {
		return x.Checks
	}
	return nil
}

// NetworkStackAttempt represents the attempt at getting information about the network stack managed
// by VNet.
type NetworkStackAttempt struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status CheckAttemptStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=teleport.lib.vnet.diag.v1.CheckAttemptStatus" json:"status,omitempty"`
	// error is present if status is CHECK_ATTEMPT_STATUS_ERROR.
	Error         string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	NetworkStack  *NetworkStack `protobuf:"bytes,3,opt,name=network_stack,json=networkStack,proto3" json:"network_stack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkStackAttempt) Reset() {
	*x = NetworkStackAttempt{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkStackAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStackAttempt) ProtoMessage() {}

func (x *NetworkStackAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStackAttempt.ProtoReflect.Descriptor instead.
func (*NetworkStackAttempt) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkStackAttempt) GetStatus() CheckAttemptStatus {
	if x != nil {
		return x.Status
	}
	return CheckAttemptStatus_CHECK_ATTEMPT_STATUS_UNSPECIFIED
}

func (x *NetworkStackAttempt) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *NetworkStackAttempt) GetNetworkStack() *NetworkStack {
	if x != nil {
		return x.NetworkStack
	}
	return nil
}

// NetworkStack describes the network stack managed by VNet.
type NetworkStack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// interface_name is the name of the interface set up and used by VNet.
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// ipv4_cidr_ranges are all the possible ranges under which VNet is going to assign IPv4 addresses
	// for apps. The first IP of the first range is used for the TUN device.
	// Each root cluster can specify its own CIDR range to be used for apps within that profile.
	Ipv4CidrRanges []string `protobuf:"bytes,2,rep,name=ipv4_cidr_ranges,json=ipv4CidrRanges,proto3" json:"ipv4_cidr_ranges,omitempty"`
	// ipv6_prefix is the IPv6 prefix under which VNet creates IPv6 addresses for apps and its DNS
	// server.
	Ipv6Prefix string `protobuf:"bytes,3,opt,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
	// dns_zones lists domains for which DNS queries are supposed to be captured by VNet.
	DnsZones      []string `protobuf:"bytes,4,rep,name=dns_zones,json=dnsZones,proto3" json:"dns_zones,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkStack) Reset() {
	*x = NetworkStack{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStack) ProtoMessage() {}

func (x *NetworkStack) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStack.ProtoReflect.Descriptor instead.
func (*NetworkStack) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkStack) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkStack) GetIpv4CidrRanges() []string {
	if x != nil {
		return x.Ipv4CidrRanges
	}
	return nil
}

func (x *NetworkStack) GetIpv6Prefix() string {
	if x != nil {
		return x.Ipv6Prefix
	}
	return ""
}

func (x *NetworkStack) GetDnsZones() []string {
	if x != nil {
		return x.DnsZones
	}
	return nil
}

// CheckAttempt describes the attempt at running a particular diagnostic check. If it succeeds
// (status is CHECK_ATTEMPT_STATUS_OK), check_report can be inspected to see if the check has found
// any issues.
//
// For example, a check that inspects network routes can succeed (CHECK_ATTEMPT_STATUS_OK) and it
// might or might not find conflicting routes (CHECK_REPORT_STATUS_ISSUES_FOUND or
// CHECK_REPORT_STATUS_OK). But it can also fail to run (CHECK_ATTEMPT_STATUS_ERROR) because the
// syscall to list routes has failed.
type CheckAttempt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status represents the status of an attempt at running a particular diagnostic check. This is
	// not the same as the status of CheckReport.
	Status CheckAttemptStatus `protobuf:"varint,1,opt,name=status,proto3,enum=teleport.lib.vnet.diag.v1.CheckAttemptStatus" json:"status,omitempty"`
	// error is present if the check failed to run (status is CHECK_ATTEMPT_STATUS_ERROR).
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// check_report is the output of a particular check.
	//
	// If check failed to run (status is CHECK_ATTEMPT_STATUS_ERROR), the report oneof in check_report
	// is set to a specific member while the member itself is empty. This means that a particular
	// CheckAttempt can be distinguished from other attempts describing other checks even if the check
	// failed to run.
	CheckReport *CheckReport `protobuf:"bytes,3,opt,name=check_report,json=checkReport,proto3" json:"check_report,omitempty"`
	// commands are the outputs from additional diagnostic commands executed by the diagnostic
	// check. They are meant to help inspect the general state of the OS related to the given check.
	// Unless a callsite specifically requests commands to be skipped, commands are present even if
	// status is CHECK_ATTEMPT_STATUS_ERROR, as they are useful even if the check failed.
	Commands      []*CommandAttempt `protobuf:"bytes,4,rep,name=commands,proto3" json:"commands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckAttempt) Reset() {
	*x = CheckAttempt{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAttempt) ProtoMessage() {}

func (x *CheckAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAttempt.ProtoReflect.Descriptor instead.
func (*CheckAttempt) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{3}
}

func (x *CheckAttempt) GetStatus() CheckAttemptStatus {
	if x != nil {
		return x.Status
	}
	return CheckAttemptStatus_CHECK_ATTEMPT_STATUS_UNSPECIFIED
}

func (x *CheckAttempt) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CheckAttempt) GetCheckReport() *CheckReport {
	if x != nil {
		return x.CheckReport
	}
	return nil
}

func (x *CheckAttempt) GetCommands() []*CommandAttempt {
	if x != nil {
		return x.Commands
	}
	return nil
}

// CheckReport is the output of a successful attempt at running a particular check.
type CheckReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status indicates if the check has found any issues. This is so that a callsite operating on
	// a CheckReport can understand the outcome of the check without having to understand the
	// semantics of the output included under report.
	Status CheckReportStatus `protobuf:"varint,1,opt,name=status,proto3,enum=teleport.lib.vnet.diag.v1.CheckReportStatus" json:"status,omitempty"`
	// Types that are valid to be assigned to Report:
	//
	//	*CheckReport_RouteConflictReport
	Report        isCheckReport_Report `protobuf_oneof:"report"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckReport) Reset() {
	*x = CheckReport{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckReport) ProtoMessage() {}

func (x *CheckReport) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckReport.ProtoReflect.Descriptor instead.
func (*CheckReport) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{4}
}

func (x *CheckReport) GetStatus() CheckReportStatus {
	if x != nil {
		return x.Status
	}
	return CheckReportStatus_CHECK_REPORT_STATUS_UNSPECIFIED
}

func (x *CheckReport) GetReport() isCheckReport_Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *CheckReport) GetRouteConflictReport() *RouteConflictReport {
	if x != nil {
		if x, ok := x.Report.(*CheckReport_RouteConflictReport); ok {
			return x.RouteConflictReport
		}
	}
	return nil
}

type isCheckReport_Report interface {
	isCheckReport_Report()
}

type CheckReport_RouteConflictReport struct {
	// route_conflict reports whether there are routes that might conflict with routes set up by
	// VNet.
	RouteConflictReport *RouteConflictReport `protobuf:"bytes,2,opt,name=route_conflict_report,json=routeConflictReport,proto3,oneof"`
}

func (*CheckReport_RouteConflictReport) isCheckReport_Report() {}

// CommandAttempt describes the attempt at running a particular command associated with a diagnostic
// check.
type CommandAttempt struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status CommandAttemptStatus   `protobuf:"varint,1,opt,name=status,proto3,enum=teleport.lib.vnet.diag.v1.CommandAttemptStatus" json:"status,omitempty"`
	// error is present if status is COMMAND_ATTEMPT_STATUS_ERROR.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// command shows which command was executed along with its arguments, e.g., "netstat -rn -f inet".
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// output is stdout from the command if status is COMMAND_ATTEMPT_STATUS_OK.
	Output        string `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandAttempt) Reset() {
	*x = CommandAttempt{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAttempt) ProtoMessage() {}

func (x *CommandAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAttempt.ProtoReflect.Descriptor instead.
func (*CommandAttempt) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{5}
}

func (x *CommandAttempt) GetStatus() CommandAttemptStatus {
	if x != nil {
		return x.Status
	}
	return CommandAttemptStatus_COMMAND_ATTEMPT_STATUS_UNSPECIFIED
}

func (x *CommandAttempt) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CommandAttempt) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandAttempt) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// RouteConflictReport describes conflicting routes found by RouteConflictDiag.
type RouteConflictReport struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RouteConflicts []*RouteConflict       `protobuf:"bytes,1,rep,name=route_conflicts,json=routeConflicts,proto3" json:"route_conflicts,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RouteConflictReport) Reset() {
	*x = RouteConflictReport{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteConflictReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConflictReport) ProtoMessage() {}

func (x *RouteConflictReport) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConflictReport.ProtoReflect.Descriptor instead.
func (*RouteConflictReport) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{6}
}

func (x *RouteConflictReport) GetRouteConflicts() []*RouteConflict {
	if x != nil {
		return x.RouteConflicts
	}
	return nil
}

// RouteConflict describes a conflict between a route set up by a 3rd-party app where the
// destination overlaps with a destination in a route set up by VNet.
type RouteConflict struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// dest is the destination of the conflicting route.
	Dest string `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	// vnet_dest is the destination of a VNet route that Dest overlaps with.
	VnetDest string `protobuf:"bytes,2,opt,name=vnet_dest,json=vnetDest,proto3" json:"vnet_dest,omitempty"`
	// interface_name is the name of the interface the route uses, e.g. "utun4".
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// interface_app may contain the name of the application responsible for setting up the interface.
	// At the moment, the only source of this information is NetworkExtension description included in
	// the output of `ifconfig -v <interface name>`. Not all VPN applications use this framework, so
	// it's likely to be empty.
	InterfaceApp  string `protobuf:"bytes,4,opt,name=interface_app,json=interfaceApp,proto3" json:"interface_app,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteConflict) Reset() {
	*x = RouteConflict{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConflict) ProtoMessage() {}

func (x *RouteConflict) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConflict.ProtoReflect.Descriptor instead.
func (*RouteConflict) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{7}
}

func (x *RouteConflict) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *RouteConflict) GetVnetDest() string {
	if x != nil {
		return x.VnetDest
	}
	return ""
}

func (x *RouteConflict) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *RouteConflict) GetInterfaceApp() string {
	if x != nil {
		return x.InterfaceApp
	}
	return ""
}

var File_teleport_lib_vnet_diag_v1_diag_proto protoreflect.FileDescriptor

const file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc = "" +
	"\n" +
	"$teleport/lib/vnet/diag/v1/diag.proto\x12\x19teleport.lib.vnet.diag.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xe8\x01\n" +
	"\x06Report\x129\n" +
	"\n" +
	"created_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12b\n" +
	"\x15network_stack_attempt\x18\x02 \x01(\v2..teleport.lib.vnet.diag.v1.NetworkStackAttemptR\x13networkStackAttempt\x12?\n" +
	"\x06checks\x18\x03 \x03(\v2'.teleport.lib.vnet.diag.v1.CheckAttemptR\x06checks\"\xc0\x01\n" +
	"\x13NetworkStackAttempt\x12E\n" +
	"\x06status\x18\x01 \x01(\x0e2-.teleport.lib.vnet.diag.v1.CheckAttemptStatusR\x06status\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12L\n" +
	"\rnetwork_stack\x18\x03 \x01(\v2'.teleport.lib.vnet.diag.v1.NetworkStackR\fnetworkStack\"\x9d\x01\n" +
	"\fNetworkStack\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12(\n" +
	"\x10ipv4_cidr_ranges\x18\x02 \x03(\tR\x0eipv4CidrRanges\x12\x1f\n" +
	"\vipv6_prefix\x18\x03 \x01(\tR\n" +
	"ipv6Prefix\x12\x1b\n" +
	"\tdns_zones\x18\x04 \x03(\tR\bdnsZones\"\xfd\x01\n" +
	"\fCheckAttempt\x12E\n" +
	"\x06status\x18\x01 \x01(\x0e2-.teleport.lib.vnet.diag.v1.CheckAttemptStatusR\x06status\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12I\n" +
	"\fcheck_report\x18\x03 \x01(\v2&.teleport.lib.vnet.diag.v1.CheckReportR\vcheckReport\x12E\n" +
	"\bcommands\x18\x04 \x03(\v2).teleport.lib.vnet.diag.v1.CommandAttemptR\bcommands\"\xc3\x01\n" +
	"\vCheckReport\x12D\n" +
	"\x06status\x18\x01 \x01(\x0e2,.teleport.lib.vnet.diag.v1.CheckReportStatusR\x06status\x12d\n" +
	"\x15route_conflict_report\x18\x02 \x01(\v2..teleport.lib.vnet.diag.v1.RouteConflictReportH\x00R\x13routeConflictReportB\b\n" +
	"\x06report\"\xa1\x01\n" +
	"\x0eCommandAttempt\x12G\n" +
	"\x06status\x18\x01 \x01(\x0e2/.teleport.lib.vnet.diag.v1.CommandAttemptStatusR\x06status\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x18\n" +
	"\acommand\x18\x03 \x01(\tR\acommand\x12\x16\n" +
	"\x06output\x18\x04 \x01(\tR\x06output\"h\n" +
	"\x13RouteConflictReport\x12Q\n" +
	"\x0froute_conflicts\x18\x01 \x03(\v2(.teleport.lib.vnet.diag.v1.RouteConflictR\x0erouteConflicts\"\x8c\x01\n" +
	"\rRouteConflict\x12\x12\n" +
	"\x04dest\x18\x01 \x01(\tR\x04dest\x12\x1b\n" +
	"\tvnet_dest\x18\x02 \x01(\tR\bvnetDest\x12%\n" +
	"\x0einterface_name\x18\x03 \x01(\tR\rinterfaceName\x12#\n" +
	"\rinterface_app\x18\x04 \x01(\tR\finterfaceApp*w\n" +
	"\x12CheckAttemptStatus\x12$\n" +
	" CHECK_ATTEMPT_STATUS_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CHECK_ATTEMPT_STATUS_OK\x10\x01\x12\x1e\n" +
	"\x1aCHECK_ATTEMPT_STATUS_ERROR\x10\x02*z\n" +
	"\x11CheckReportStatus\x12#\n" +
	"\x1fCHECK_REPORT_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CHECK_REPORT_STATUS_OK\x10\x01\x12$\n" +
	" CHECK_REPORT_STATUS_ISSUES_FOUND\x10\x02*\x7f\n" +
	"\x14CommandAttemptStatus\x12&\n" +
	"\"COMMAND_ATTEMPT_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19COMMAND_ATTEMPT_STATUS_OK\x10\x01\x12 \n" +
	"\x1cCOMMAND_ATTEMPT_STATUS_ERROR\x10\x02BQZOgithub.com/gravitational/teleport/gen/proto/go/teleport/lib/vnet/diag/v1;diagv1b\x06proto3"

var (
	file_teleport_lib_vnet_diag_v1_diag_proto_rawDescOnce sync.Once
	file_teleport_lib_vnet_diag_v1_diag_proto_rawDescData []byte
)

func file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP() []byte {
	file_teleport_lib_vnet_diag_v1_diag_proto_rawDescOnce.Do(func() {
		file_teleport_lib_vnet_diag_v1_diag_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc), len(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc)))
	})
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescData
}

var file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_teleport_lib_vnet_diag_v1_diag_proto_goTypes = []any{
	(CheckAttemptStatus)(0),       // 0: teleport.lib.vnet.diag.v1.CheckAttemptStatus
	(CheckReportStatus)(0),        // 1: teleport.lib.vnet.diag.v1.CheckReportStatus
	(CommandAttemptStatus)(0),     // 2: teleport.lib.vnet.diag.v1.CommandAttemptStatus
	(*Report)(nil),                // 3: teleport.lib.vnet.diag.v1.Report
	(*NetworkStackAttempt)(nil),   // 4: teleport.lib.vnet.diag.v1.NetworkStackAttempt
	(*NetworkStack)(nil),          // 5: teleport.lib.vnet.diag.v1.NetworkStack
	(*CheckAttempt)(nil),          // 6: teleport.lib.vnet.diag.v1.CheckAttempt
	(*CheckReport)(nil),           // 7: teleport.lib.vnet.diag.v1.CheckReport
	(*CommandAttempt)(nil),        // 8: teleport.lib.vnet.diag.v1.CommandAttempt
	(*RouteConflictReport)(nil),   // 9: teleport.lib.vnet.diag.v1.RouteConflictReport
	(*RouteConflict)(nil),         // 10: teleport.lib.vnet.diag.v1.RouteConflict
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_teleport_lib_vnet_diag_v1_diag_proto_depIdxs = []int32{
	11, // 0: teleport.lib.vnet.diag.v1.Report.created_at:type_name -> google.protobuf.Timestamp
	4,  // 1: teleport.lib.vnet.diag.v1.Report.network_stack_attempt:type_name -> teleport.lib.vnet.diag.v1.NetworkStackAttempt
	6,  // 2: teleport.lib.vnet.diag.v1.Report.checks:type_name -> teleport.lib.vnet.diag.v1.CheckAttempt
	0,  // 3: teleport.lib.vnet.diag.v1.NetworkStackAttempt.status:type_name -> teleport.lib.vnet.diag.v1.CheckAttemptStatus
	5,  // 4: teleport.lib.vnet.diag.v1.NetworkStackAttempt.network_stack:type_name -> teleport.lib.vnet.diag.v1.NetworkStack
	0,  // 5: teleport.lib.vnet.diag.v1.CheckAttempt.status:type_name -> teleport.lib.vnet.diag.v1.CheckAttemptStatus
	7,  // 6: teleport.lib.vnet.diag.v1.CheckAttempt.check_report:type_name -> teleport.lib.vnet.diag.v1.CheckReport
	8,  // 7: teleport.lib.vnet.diag.v1.CheckAttempt.commands:type_name -> teleport.lib.vnet.diag.v1.CommandAttempt
	1,  // 8: teleport.lib.vnet.diag.v1.CheckReport.status:type_name -> teleport.lib.vnet.diag.v1.CheckReportStatus
	9,  // 9: teleport.lib.vnet.diag.v1.CheckReport.route_conflict_report:type_name -> teleport.lib.vnet.diag.v1.RouteConflictReport
	2,  // 10: teleport.lib.vnet.diag.v1.CommandAttempt.status:type_name -> teleport.lib.vnet.diag.v1.CommandAttemptStatus
	10, // 11: teleport.lib.vnet.diag.v1.RouteConflictReport.route_conflicts:type_name -> teleport.lib.vnet.diag.v1.RouteConflict
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_teleport_lib_vnet_diag_v1_diag_proto_init() }
func file_teleport_lib_vnet_diag_v1_diag_proto_init() {
	if File_teleport_lib_vnet_diag_v1_diag_proto != nil {
		return
	}
	file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[4].OneofWrappers = []any{
		(*CheckReport_RouteConflictReport)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc), len(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_lib_vnet_diag_v1_diag_proto_goTypes,
		DependencyIndexes: file_teleport_lib_vnet_diag_v1_diag_proto_depIdxs,
		EnumInfos:         file_teleport_lib_vnet_diag_v1_diag_proto_enumTypes,
		MessageInfos:      file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes,
	}.Build()
	File_teleport_lib_vnet_diag_v1_diag_proto = out.File
	file_teleport_lib_vnet_diag_v1_diag_proto_goTypes = nil
	file_teleport_lib_vnet_diag_v1_diag_proto_depIdxs = nil
}
