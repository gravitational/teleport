// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: teleport/lib/vnet/diag/v1/diag.proto

package diagv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RouteConflict describes a conflict between a route set up by a 3rd-party app where the
// destination overlaps with a destination in a route set up by VNet.
type RouteConflict struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// dest is the destination of the conflicting route.
	Dest string `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	// vnet_dest is the destination of a VNet route that Dest overlaps with.
	VnetDest string `protobuf:"bytes,2,opt,name=vnet_dest,json=vnetDest,proto3" json:"vnet_dest,omitempty"`
	// interface_name is the name of the interface the route uses, e.g. "utun4".
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// interface_app may contain the name of the application responsible for setting up the interface.
	// At the moment, the only source of this information is NetworkExtension description included in
	// the output of `ifconfig -v <interface name>`. Not all VPN applications use this framework, so
	// it's likely to be empty.
	InterfaceApp  string `protobuf:"bytes,4,opt,name=interface_app,json=interfaceApp,proto3" json:"interface_app,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteConflict) Reset() {
	*x = RouteConflict{}
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConflict) ProtoMessage() {}

func (x *RouteConflict) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConflict.ProtoReflect.Descriptor instead.
func (*RouteConflict) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP(), []int{0}
}

func (x *RouteConflict) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *RouteConflict) GetVnetDest() string {
	if x != nil {
		return x.VnetDest
	}
	return ""
}

func (x *RouteConflict) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *RouteConflict) GetInterfaceApp() string {
	if x != nil {
		return x.InterfaceApp
	}
	return ""
}

var File_teleport_lib_vnet_diag_v1_diag_proto protoreflect.FileDescriptor

var file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc = string([]byte{
	0x0a, 0x24, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x76,
	0x6e, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x6e, 0x65, 0x74, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x2e, 0x76,
	0x31, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6e, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6e, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x70, 0x70,
	0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x2f,
	0x76, 0x6e, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69, 0x61,
	0x67, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_teleport_lib_vnet_diag_v1_diag_proto_rawDescOnce sync.Once
	file_teleport_lib_vnet_diag_v1_diag_proto_rawDescData []byte
)

func file_teleport_lib_vnet_diag_v1_diag_proto_rawDescGZIP() []byte {
	file_teleport_lib_vnet_diag_v1_diag_proto_rawDescOnce.Do(func() {
		file_teleport_lib_vnet_diag_v1_diag_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc), len(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc)))
	})
	return file_teleport_lib_vnet_diag_v1_diag_proto_rawDescData
}

var file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teleport_lib_vnet_diag_v1_diag_proto_goTypes = []any{
	(*RouteConflict)(nil), // 0: teleport.lib.vnet.diag.v1.RouteConflict
}
var file_teleport_lib_vnet_diag_v1_diag_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_teleport_lib_vnet_diag_v1_diag_proto_init() }
func file_teleport_lib_vnet_diag_v1_diag_proto_init() {
	if File_teleport_lib_vnet_diag_v1_diag_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc), len(file_teleport_lib_vnet_diag_v1_diag_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_lib_vnet_diag_v1_diag_proto_goTypes,
		DependencyIndexes: file_teleport_lib_vnet_diag_v1_diag_proto_depIdxs,
		MessageInfos:      file_teleport_lib_vnet_diag_v1_diag_proto_msgTypes,
	}.Build()
	File_teleport_lib_vnet_diag_v1_diag_proto = out.File
	file_teleport_lib_vnet_diag_v1_diag_proto_goTypes = nil
	file_teleport_lib_vnet_diag_v1_diag_proto_depIdxs = nil
}
