// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/lib/vnet/v1/client_application_service.proto

package vnetv1

import (
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Hash specifies a cryptographic hash function.
type Hash int32

const (
	Hash_HASH_UNSPECIFIED Hash = 0
	// HASH_NONE is used for Ed25519 signatures, which do no pre-hash.
	// Currently app access always uses ECDSA or RSA signatures, except for some
	// tests that use Ed25519. This is unlikely to be used in product code unless
	// and until that changes.
	Hash_HASH_NONE Hash = 1
	// HASH_SHA256 is used with ECDSA P-256 and RSA 2048 signatures.
	Hash_HASH_SHA256 Hash = 2
)

// Enum value maps for Hash.
var (
	Hash_name = map[int32]string{
		0: "HASH_UNSPECIFIED",
		1: "HASH_NONE",
		2: "HASH_SHA256",
	}
	Hash_value = map[string]int32{
		"HASH_UNSPECIFIED": 0,
		"HASH_NONE":        1,
		"HASH_SHA256":      2,
	}
)

func (x Hash) Enum() *Hash {
	p := new(Hash)
	*p = x
	return p
}

func (x Hash) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hash) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_lib_vnet_v1_client_application_service_proto_enumTypes[0].Descriptor()
}

func (Hash) Type() protoreflect.EnumType {
	return &file_teleport_lib_vnet_v1_client_application_service_proto_enumTypes[0]
}

func (x Hash) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hash.Descriptor instead.
func (Hash) EnumDescriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{0}
}

// AuthenticateProcessRequest is a request for AuthenticateProcess.
type AuthenticateProcessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version is the admin process version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// PipePath is the path to a named pipe used for process authentication on
	// Windows. The client application must dial the pipe
	PipePath      string `protobuf:"bytes,2,opt,name=pipe_path,json=pipePath,proto3" json:"pipe_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateProcessRequest) Reset() {
	*x = AuthenticateProcessRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateProcessRequest) ProtoMessage() {}

func (x *AuthenticateProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateProcessRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateProcessRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticateProcessRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AuthenticateProcessRequest) GetPipePath() string {
	if x != nil {
		return x.PipePath
	}
	return ""
}

// AuthenticateProcessResponse is a response for AuthenticateProcess.
type AuthenticateProcessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version is the client application version.
	Version       string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateProcessResponse) Reset() {
	*x = AuthenticateProcessResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateProcessResponse) ProtoMessage() {}

func (x *AuthenticateProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateProcessResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateProcessResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticateProcessResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ReportNetworkStackInfoRequest is a request to report network stack
// information to the client application.
type ReportNetworkStackInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NetworkStackInfo holds network stack information.
	NetworkStackInfo *NetworkStackInfo `protobuf:"bytes,1,opt,name=network_stack_info,json=networkStackInfo,proto3" json:"network_stack_info,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReportNetworkStackInfoRequest) Reset() {
	*x = ReportNetworkStackInfoRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportNetworkStackInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNetworkStackInfoRequest) ProtoMessage() {}

func (x *ReportNetworkStackInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNetworkStackInfoRequest.ProtoReflect.Descriptor instead.
func (*ReportNetworkStackInfoRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReportNetworkStackInfoRequest) GetNetworkStackInfo() *NetworkStackInfo {
	if x != nil {
		return x.NetworkStackInfo
	}
	return nil
}

// NetworkStackInfo holds static information about the VNet networking stack.
type NetworkStackInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// InterfaceName is the name of the TUN interface used by VNet.
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Ipv6Prefix the the IPv5 prefix under which VNet assigns IPv6 addresses.
	Ipv6Prefix    string `protobuf:"bytes,2,opt,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkStackInfo) Reset() {
	*x = NetworkStackInfo{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkStackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStackInfo) ProtoMessage() {}

func (x *NetworkStackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStackInfo.ProtoReflect.Descriptor instead.
func (*NetworkStackInfo) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkStackInfo) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkStackInfo) GetIpv6Prefix() string {
	if x != nil {
		return x.Ipv6Prefix
	}
	return ""
}

// ReportNetworkStackInfoResponse is currently empty.
type ReportNetworkStackInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportNetworkStackInfoResponse) Reset() {
	*x = ReportNetworkStackInfoResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportNetworkStackInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNetworkStackInfoResponse) ProtoMessage() {}

func (x *ReportNetworkStackInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNetworkStackInfoResponse.ProtoReflect.Descriptor instead.
func (*ReportNetworkStackInfoResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{4}
}

// PingRequest is a request for the Ping rpc.
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{5}
}

// PingResponse is a response for the Ping rpc.
type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{6}
}

// ResolveFQDNRequest is a request for ResolveFQDN.
type ResolveFQDNRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fqdn is the fully-qualified domain name queried.
	Fqdn          string `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveFQDNRequest) Reset() {
	*x = ResolveFQDNRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveFQDNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFQDNRequest) ProtoMessage() {}

func (x *ResolveFQDNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFQDNRequest.ProtoReflect.Descriptor instead.
func (*ResolveFQDNRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{7}
}

func (x *ResolveFQDNRequest) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

// ResolveFQDNReponse is a response for ResolveFQDN.
type ResolveFQDNResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Match:
	//
	//	*ResolveFQDNResponse_MatchedTcpApp
	//	*ResolveFQDNResponse_MatchedWebApp
	//	*ResolveFQDNResponse_MatchedCluster
	Match         isResolveFQDNResponse_Match `protobuf_oneof:"match"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveFQDNResponse) Reset() {
	*x = ResolveFQDNResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveFQDNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFQDNResponse) ProtoMessage() {}

func (x *ResolveFQDNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFQDNResponse.ProtoReflect.Descriptor instead.
func (*ResolveFQDNResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{8}
}

func (x *ResolveFQDNResponse) GetMatch() isResolveFQDNResponse_Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ResolveFQDNResponse) GetMatchedTcpApp() *MatchedTCPApp {
	if x != nil {
		if x, ok := x.Match.(*ResolveFQDNResponse_MatchedTcpApp); ok {
			return x.MatchedTcpApp
		}
	}
	return nil
}

func (x *ResolveFQDNResponse) GetMatchedWebApp() *MatchedWebApp {
	if x != nil {
		if x, ok := x.Match.(*ResolveFQDNResponse_MatchedWebApp); ok {
			return x.MatchedWebApp
		}
	}
	return nil
}

func (x *ResolveFQDNResponse) GetMatchedCluster() *MatchedCluster {
	if x != nil {
		if x, ok := x.Match.(*ResolveFQDNResponse_MatchedCluster); ok {
			return x.MatchedCluster
		}
	}
	return nil
}

type isResolveFQDNResponse_Match interface {
	isResolveFQDNResponse_Match()
}

type ResolveFQDNResponse_MatchedTcpApp struct {
	// MatchedTcpApp will be set when the query matched a TCP app.
	MatchedTcpApp *MatchedTCPApp `protobuf:"bytes,1,opt,name=matched_tcp_app,json=matchedTcpApp,proto3,oneof"`
}

type ResolveFQDNResponse_MatchedWebApp struct {
	// MatchedWebApp will be set when the query matched a web app.
	MatchedWebApp *MatchedWebApp `protobuf:"bytes,2,opt,name=matched_web_app,json=matchedWebApp,proto3,oneof"`
}

type ResolveFQDNResponse_MatchedCluster struct {
	// MatchedCluster will be set when the query did not match any app, but did
	// match a subdomain of a proxy address. VNet will resolve the DNS query to
	// a handler that may later resolve the FQDN to an app or SSH server.
	MatchedCluster *MatchedCluster `protobuf:"bytes,3,opt,name=matched_cluster,json=matchedCluster,proto3,oneof"`
}

func (*ResolveFQDNResponse_MatchedTcpApp) isResolveFQDNResponse_Match() {}

func (*ResolveFQDNResponse_MatchedWebApp) isResolveFQDNResponse_Match() {}

func (*ResolveFQDNResponse_MatchedCluster) isResolveFQDNResponse_Match() {}

// MatchedTCPApp holds info about a TCP app that matched a query.
type MatchedTCPApp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AppInfo holds all necessary info for making connections to the resolved app.
	AppInfo       *AppInfo `protobuf:"bytes,1,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchedTCPApp) Reset() {
	*x = MatchedTCPApp{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedTCPApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedTCPApp) ProtoMessage() {}

func (x *MatchedTCPApp) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedTCPApp.ProtoReflect.Descriptor instead.
func (*MatchedTCPApp) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{9}
}

func (x *MatchedTCPApp) GetAppInfo() *AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

// MatchedTCPApp is a placeholder to signify that the query matched a web app.
type MatchedWebApp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchedWebApp) Reset() {
	*x = MatchedWebApp{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedWebApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedWebApp) ProtoMessage() {}

func (x *MatchedWebApp) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedWebApp.ProtoReflect.Descriptor instead.
func (*MatchedWebApp) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{10}
}

// MatchedCluster holds info about a cluster that a query matched.
type MatchedCluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ipv4CidrRange is the CIDR range from which an IPv4 address should be assigned
	// based on this cluster's vnet_config.
	Ipv4CidrRange string `protobuf:"bytes,1,opt,name=ipv4_cidr_range,json=ipv4CidrRange,proto3" json:"ipv4_cidr_range,omitempty"`
	// WebProxyAddr is the web proxy address of the root cluster that matched the
	// query.
	WebProxyAddr string `protobuf:"bytes,2,opt,name=web_proxy_addr,json=webProxyAddr,proto3" json:"web_proxy_addr,omitempty"`
	// Profile is the profile the matched cluster was found in.
	Profile string `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	// RootCluster will always be set to the name of the root cluster that matched
	// the query.
	RootCluster string `protobuf:"bytes,4,opt,name=root_cluster,json=rootCluster,proto3" json:"root_cluster,omitempty"`
	// LeafCluster will be set only when the query matched a leaf cluster of
	// RootCluster, or else it will be empty.
	LeafCluster   string `protobuf:"bytes,5,opt,name=leaf_cluster,json=leafCluster,proto3" json:"leaf_cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchedCluster) Reset() {
	*x = MatchedCluster{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedCluster) ProtoMessage() {}

func (x *MatchedCluster) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedCluster.ProtoReflect.Descriptor instead.
func (*MatchedCluster) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{11}
}

func (x *MatchedCluster) GetIpv4CidrRange() string {
	if x != nil {
		return x.Ipv4CidrRange
	}
	return ""
}

func (x *MatchedCluster) GetWebProxyAddr() string {
	if x != nil {
		return x.WebProxyAddr
	}
	return ""
}

func (x *MatchedCluster) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *MatchedCluster) GetRootCluster() string {
	if x != nil {
		return x.RootCluster
	}
	return ""
}

func (x *MatchedCluster) GetLeafCluster() string {
	if x != nil {
		return x.LeafCluster
	}
	return ""
}

// AppInfo holds all necessary info for making connections to VNet TCP apps.
type AppInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AppKey uniquely identifies a TCP app (and optionally a port for multi-port
	// TCP apps).
	AppKey *AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// Cluster is the name of the cluster in which the app is found.
	// Iff the app is in a leaf cluster, this will match app_key.leaf_cluster.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// App is the app spec.
	App *types.AppV3 `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	// Ipv4CidrRange is the CIDR range from which an IPv4 address should be
	// assigned to the app.
	Ipv4CidrRange string `protobuf:"bytes,4,opt,name=ipv4_cidr_range,json=ipv4CidrRange,proto3" json:"ipv4_cidr_range,omitempty"`
	// DialOptions holds options that should be used when dialing the root cluster
	// of the app.
	DialOptions   *DialOptions `protobuf:"bytes,5,opt,name=dial_options,json=dialOptions,proto3" json:"dial_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{12}
}

func (x *AppInfo) GetAppKey() *AppKey {
	if x != nil {
		return x.AppKey
	}
	return nil
}

func (x *AppInfo) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AppInfo) GetApp() *types.AppV3 {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *AppInfo) GetIpv4CidrRange() string {
	if x != nil {
		return x.Ipv4CidrRange
	}
	return ""
}

func (x *AppInfo) GetDialOptions() *DialOptions {
	if x != nil {
		return x.DialOptions
	}
	return nil
}

// AppKey uniquely identifies a TCP app in a specific profile and cluster.
type AppKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Profile is the profile in which the app is found.
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// LeafCluster is the leaf cluster in which the app is found. If empty, the
	// app is in the root cluster for the profile.
	LeafCluster string `protobuf:"bytes,2,opt,name=leaf_cluster,json=leafCluster,proto3" json:"leaf_cluster,omitempty"`
	// Name is the name of the app.
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppKey) Reset() {
	*x = AppKey{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppKey) ProtoMessage() {}

func (x *AppKey) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppKey.ProtoReflect.Descriptor instead.
func (*AppKey) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{13}
}

func (x *AppKey) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *AppKey) GetLeafCluster() string {
	if x != nil {
		return x.LeafCluster
	}
	return ""
}

func (x *AppKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DialOptions holds ALPN dial options for dialing apps.
type DialOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// WebProxyAddr is the address to dial.
	WebProxyAddr string `protobuf:"bytes,1,opt,name=web_proxy_addr,json=webProxyAddr,proto3" json:"web_proxy_addr,omitempty"`
	// AlpnConnUpgradeRequired specifies if ALPN connection upgrade is required.
	AlpnConnUpgradeRequired bool `protobuf:"varint,2,opt,name=alpn_conn_upgrade_required,json=alpnConnUpgradeRequired,proto3" json:"alpn_conn_upgrade_required,omitempty"`
	// Sni is a ServerName value set for upstream TLS connection.
	Sni string `protobuf:"bytes,3,opt,name=sni,proto3" json:"sni,omitempty"`
	// InsecureSkipVerify turns off verification for x509 upstream ALPN proxy service certificate.
	InsecureSkipVerify bool `protobuf:"varint,4,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	// RootClusterCaCertPool is the host CA TLS certificate pool for the root
	// cluster. It is a PEM-encoded X509 certificate pool. It should be used when
	// dialing the proxy and AlpnConnUpgradeRequired is true or when dialing the
	// transport service.
	RootClusterCaCertPool []byte `protobuf:"bytes,5,opt,name=root_cluster_ca_cert_pool,json=rootClusterCaCertPool,proto3" json:"root_cluster_ca_cert_pool,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DialOptions) Reset() {
	*x = DialOptions{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialOptions) ProtoMessage() {}

func (x *DialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialOptions.ProtoReflect.Descriptor instead.
func (*DialOptions) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{14}
}

func (x *DialOptions) GetWebProxyAddr() string {
	if x != nil {
		return x.WebProxyAddr
	}
	return ""
}

func (x *DialOptions) GetAlpnConnUpgradeRequired() bool {
	if x != nil {
		return x.AlpnConnUpgradeRequired
	}
	return false
}

func (x *DialOptions) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

func (x *DialOptions) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *DialOptions) GetRootClusterCaCertPool() []byte {
	if x != nil {
		return x.RootClusterCaCertPool
	}
	return nil
}

// ReissueAppCertRequest is a request for ReissueAppCert.
type ReissueAppCertRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AppInfo contains info about the app, every ReissueAppCertRequest must
	// include an app_info as returned from ResolveFQDN.
	AppInfo *AppInfo `protobuf:"bytes,1,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	// TargetPort is the TCP port to issue the cert for.
	TargetPort    uint32 `protobuf:"varint,2,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReissueAppCertRequest) Reset() {
	*x = ReissueAppCertRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReissueAppCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReissueAppCertRequest) ProtoMessage() {}

func (x *ReissueAppCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReissueAppCertRequest.ProtoReflect.Descriptor instead.
func (*ReissueAppCertRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{15}
}

func (x *ReissueAppCertRequest) GetAppInfo() *AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *ReissueAppCertRequest) GetTargetPort() uint32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

// ReissueAppCertResponse is a response for ReissueAppCert.
type ReissueAppCertResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cert is the issued app certificate in x509 DER format.
	Cert          []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReissueAppCertResponse) Reset() {
	*x = ReissueAppCertResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReissueAppCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReissueAppCertResponse) ProtoMessage() {}

func (x *ReissueAppCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReissueAppCertResponse.ProtoReflect.Descriptor instead.
func (*ReissueAppCertResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{16}
}

func (x *ReissueAppCertResponse) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

// SignForAppRequest is a request to sign data with a private key that the
// server has cached for the (app_key, target_port) pair. The (app_key,
// target_port) pair here must match a previous successful call to
// ReissueAppCert. The private key used for the signature will match the subject
// public key of the issued x509 certificate.
type SignForAppRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AppKey uniquely identifies a TCP app, it must match the key of an app from
	// a previous successful call to ReissueAppCert.
	AppKey *AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// TargetPort identifies the TCP port of the app, it must match the
	// TargetPort of a previous successful call to ReissueAppCert for an app
	// matching AppKey.
	TargetPort uint32 `protobuf:"varint,2,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
	// Sign holds signature request details.
	Sign          *SignRequest `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignForAppRequest) Reset() {
	*x = SignForAppRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignForAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignForAppRequest) ProtoMessage() {}

func (x *SignForAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignForAppRequest.ProtoReflect.Descriptor instead.
func (*SignForAppRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{17}
}

func (x *SignForAppRequest) GetAppKey() *AppKey {
	if x != nil {
		return x.AppKey
	}
	return nil
}

func (x *SignForAppRequest) GetTargetPort() uint32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *SignForAppRequest) GetSign() *SignRequest {
	if x != nil {
		return x.Sign
	}
	return nil
}

// SignRequest holds signature request details.
type SignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Digest is the bytes to sign.
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// Hash is the hash function used to compute digest.
	Hash Hash `protobuf:"varint,2,opt,name=hash,proto3,enum=teleport.lib.vnet.v1.Hash" json:"hash,omitempty"`
	// PssSaltLength specifies the length of the salt added to the digest before a
	// signature. Only used and required for RSA PSS signatures.
	PssSaltLength *int32 `protobuf:"varint,3,opt,name=pss_salt_length,json=pssSaltLength,proto3,oneof" json:"pss_salt_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{18}
}

func (x *SignRequest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SignRequest) GetHash() Hash {
	if x != nil {
		return x.Hash
	}
	return Hash_HASH_UNSPECIFIED
}

func (x *SignRequest) GetPssSaltLength() int32 {
	if x != nil && x.PssSaltLength != nil {
		return *x.PssSaltLength
	}
	return 0
}

// SignForAppResponse is a response for SignForApp.
type SignForAppResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signature is the signature.
	Signature     []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignForAppResponse) Reset() {
	*x = SignForAppResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignForAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignForAppResponse) ProtoMessage() {}

func (x *SignForAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignForAppResponse.ProtoReflect.Descriptor instead.
func (*SignForAppResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{19}
}

func (x *SignForAppResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// OnNewConnectionRequest is a request for OnNewConnection.
type OnNewConnectionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AppKey identifies the app the connection is being made for.
	AppKey        *AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnNewConnectionRequest) Reset() {
	*x = OnNewConnectionRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnNewConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNewConnectionRequest) ProtoMessage() {}

func (x *OnNewConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNewConnectionRequest.ProtoReflect.Descriptor instead.
func (*OnNewConnectionRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{20}
}

func (x *OnNewConnectionRequest) GetAppKey() *AppKey {
	if x != nil {
		return x.AppKey
	}
	return nil
}

// OnNewConnectionRequest is a response for OnNewConnection.
type OnNewConnectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnNewConnectionResponse) Reset() {
	*x = OnNewConnectionResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnNewConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNewConnectionResponse) ProtoMessage() {}

func (x *OnNewConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNewConnectionResponse.ProtoReflect.Descriptor instead.
func (*OnNewConnectionResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{21}
}

// OnInvalidLocalPortRequest is a request for OnInvalidLocalPort.
type OnInvalidLocalPortRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AppInfo identifies the app the request was made for. AppInfo is used
	// instaed of AppKey so that the application spec is included, which includes
	// the TCP port ranges allowed for the app, which are ultimately included in
	// the user error message.
	AppInfo *AppInfo `protobuf:"bytes,1,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
	// TargetPort is the invalid port the request was made for.
	TargetPort    uint32 `protobuf:"varint,2,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnInvalidLocalPortRequest) Reset() {
	*x = OnInvalidLocalPortRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnInvalidLocalPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnInvalidLocalPortRequest) ProtoMessage() {}

func (x *OnInvalidLocalPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnInvalidLocalPortRequest.ProtoReflect.Descriptor instead.
func (*OnInvalidLocalPortRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{22}
}

func (x *OnInvalidLocalPortRequest) GetAppInfo() *AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *OnInvalidLocalPortRequest) GetTargetPort() uint32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

// OnInvalidLocalPortResponse is a response for OnInvalidLocalPort.
type OnInvalidLocalPortResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnInvalidLocalPortResponse) Reset() {
	*x = OnInvalidLocalPortResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnInvalidLocalPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnInvalidLocalPortResponse) ProtoMessage() {}

func (x *OnInvalidLocalPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnInvalidLocalPortResponse.ProtoReflect.Descriptor instead.
func (*OnInvalidLocalPortResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{23}
}

// GetTargetOSConfigurationRequest is a request for the target host OS configuration.
type GetTargetOSConfigurationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTargetOSConfigurationRequest) Reset() {
	*x = GetTargetOSConfigurationRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTargetOSConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetOSConfigurationRequest) ProtoMessage() {}

func (x *GetTargetOSConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetOSConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetTargetOSConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{24}
}

// GetTargetOSConfigurationResponse is a response including the target host OS configuration.
type GetTargetOSConfigurationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TargetOsConfiguration holds target configuration values for the host OS.
	TargetOsConfiguration *TargetOSConfiguration `protobuf:"bytes,1,opt,name=target_os_configuration,json=targetOsConfiguration,proto3" json:"target_os_configuration,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetTargetOSConfigurationResponse) Reset() {
	*x = GetTargetOSConfigurationResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTargetOSConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetOSConfigurationResponse) ProtoMessage() {}

func (x *GetTargetOSConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetOSConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetTargetOSConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetTargetOSConfigurationResponse) GetTargetOsConfiguration() *TargetOSConfiguration {
	if x != nil {
		return x.TargetOsConfiguration
	}
	return nil
}

// TargetOSConfiguration holds desired OS configuration parameters that need to
// be fetched from the client application.
type TargetOSConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DnsZones is a list of all DNS zones that VNet should handle queries for. This
	// should include the public hostname of every cluster the user is logged in
	// to, and all configured custom DNS zones from all clusters.
	DnsZones []string `protobuf:"bytes,1,rep,name=dns_zones,json=dnsZones,proto3" json:"dns_zones,omitempty"`
	// Ipv4CidrRanges is a list of IPv4 CIDR ranges that VNet addresses may be
	// assigned from, these ranges should all be routed to the VNet TUN interface.
	// This should include the custom range configured for each cluster the user
	// is logged in to, and if any cluster does not configure a custom range it
	// should also include the default range.
	Ipv4CidrRanges []string `protobuf:"bytes,2,rep,name=ipv4_cidr_ranges,json=ipv4CidrRanges,proto3" json:"ipv4_cidr_ranges,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TargetOSConfiguration) Reset() {
	*x = TargetOSConfiguration{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetOSConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetOSConfiguration) ProtoMessage() {}

func (x *TargetOSConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetOSConfiguration.ProtoReflect.Descriptor instead.
func (*TargetOSConfiguration) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{26}
}

func (x *TargetOSConfiguration) GetDnsZones() []string {
	if x != nil {
		return x.DnsZones
	}
	return nil
}

func (x *TargetOSConfiguration) GetIpv4CidrRanges() []string {
	if x != nil {
		return x.Ipv4CidrRanges
	}
	return nil
}

// UserTLSCertRequest is a request for UserTLSCert.
type UserTLSCertRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Profile is the profile to retrieve the certificate for.
	Profile       string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTLSCertRequest) Reset() {
	*x = UserTLSCertRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTLSCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTLSCertRequest) ProtoMessage() {}

func (x *UserTLSCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTLSCertRequest.ProtoReflect.Descriptor instead.
func (*UserTLSCertRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{27}
}

func (x *UserTLSCertRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

// UserTLSCertResponse is a response for UserTLSCert.
type UserTLSCertResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cert is the user TLS certificate in X.509 ASN.1 DER format.
	Cert []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// DialOptions holds options that should be used when dialing the root cluster
	// proxy.
	DialOptions   *DialOptions `protobuf:"bytes,2,opt,name=dial_options,json=dialOptions,proto3" json:"dial_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTLSCertResponse) Reset() {
	*x = UserTLSCertResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTLSCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTLSCertResponse) ProtoMessage() {}

func (x *UserTLSCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTLSCertResponse.ProtoReflect.Descriptor instead.
func (*UserTLSCertResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{28}
}

func (x *UserTLSCertResponse) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *UserTLSCertResponse) GetDialOptions() *DialOptions {
	if x != nil {
		return x.DialOptions
	}
	return nil
}

// SignForUserTLSRequest is a request for SignForUserTLS.
type SignForUserTLSRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Profile is the user profile to sign for.
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// Sign holds signature request details.
	Sign          *SignRequest `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignForUserTLSRequest) Reset() {
	*x = SignForUserTLSRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignForUserTLSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignForUserTLSRequest) ProtoMessage() {}

func (x *SignForUserTLSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignForUserTLSRequest.ProtoReflect.Descriptor instead.
func (*SignForUserTLSRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{29}
}

func (x *SignForUserTLSRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *SignForUserTLSRequest) GetSign() *SignRequest {
	if x != nil {
		return x.Sign
	}
	return nil
}

// SignForUserTLSResponse is a response for SignForUserTLS.
type SignForUserTLSResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signature is the signature.
	Signature     []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignForUserTLSResponse) Reset() {
	*x = SignForUserTLSResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignForUserTLSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignForUserTLSResponse) ProtoMessage() {}

func (x *SignForUserTLSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignForUserTLSResponse.ProtoReflect.Descriptor instead.
func (*SignForUserTLSResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{30}
}

func (x *SignForUserTLSResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// SessionSSHConfigRequest is a request for SessionSSHConfig.
type SessionSSHConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Profile is the profile in which the SSH server is found.
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// RootCluster is the cluster in which the SSH server is found.
	RootCluster string `protobuf:"bytes,2,opt,name=root_cluster,json=rootCluster,proto3" json:"root_cluster,omitempty"`
	// LeafCluster is the leaf cluster in which the SSH server is found.
	// If empty, the SSH server is in the root cluster.
	LeafCluster string `protobuf:"bytes,3,opt,name=leaf_cluster,json=leafCluster,proto3" json:"leaf_cluster,omitempty"`
	// Address is the address of the SSH server.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// User is the SSH user the session is for.
	User          string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionSSHConfigRequest) Reset() {
	*x = SessionSSHConfigRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionSSHConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSSHConfigRequest) ProtoMessage() {}

func (x *SessionSSHConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSSHConfigRequest.ProtoReflect.Descriptor instead.
func (*SessionSSHConfigRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{31}
}

func (x *SessionSSHConfigRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *SessionSSHConfigRequest) GetRootCluster() string {
	if x != nil {
		return x.RootCluster
	}
	return ""
}

func (x *SessionSSHConfigRequest) GetLeafCluster() string {
	if x != nil {
		return x.LeafCluster
	}
	return ""
}

func (x *SessionSSHConfigRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SessionSSHConfigRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// SessionSSHConfigResponse is a response for SessionSSHConfig.
type SessionSSHConfigResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SessionId is an opaque identifier for the session, it should be passed to
	// SignForSSHSession to issue signatures with the private key associated with
	// the session.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Cert is the session SSH certificate in SSH wire format.
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	// TrustedCas is a list of trusted SSH certificate authorities in SSH wire
	// format.
	TrustedCas    [][]byte `protobuf:"bytes,3,rep,name=trusted_cas,json=trustedCas,proto3" json:"trusted_cas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionSSHConfigResponse) Reset() {
	*x = SessionSSHConfigResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionSSHConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSSHConfigResponse) ProtoMessage() {}

func (x *SessionSSHConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSSHConfigResponse.ProtoReflect.Descriptor instead.
func (*SessionSSHConfigResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{32}
}

func (x *SessionSSHConfigResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionSSHConfigResponse) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *SessionSSHConfigResponse) GetTrustedCas() [][]byte {
	if x != nil {
		return x.TrustedCas
	}
	return nil
}

// SignForSSHSessionRequest is a request for SignForSSHSession.
type SignForSSHSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SessionId is an opaque identifier for the session returned from a previous
	// call to SessionSSHConfig.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Sign holds signature request details.
	Sign          *SignRequest `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignForSSHSessionRequest) Reset() {
	*x = SignForSSHSessionRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignForSSHSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignForSSHSessionRequest) ProtoMessage() {}

func (x *SignForSSHSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignForSSHSessionRequest.ProtoReflect.Descriptor instead.
func (*SignForSSHSessionRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{33}
}

func (x *SignForSSHSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SignForSSHSessionRequest) GetSign() *SignRequest {
	if x != nil {
		return x.Sign
	}
	return nil
}

// SignForSSHSessionResponse is a response for SignForSSHSession.
type SignForSSHSessionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signature is the signature.
	Signature     []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignForSSHSessionResponse) Reset() {
	*x = SignForSSHSessionResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignForSSHSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignForSSHSessionResponse) ProtoMessage() {}

func (x *SignForSSHSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignForSSHSessionResponse.ProtoReflect.Descriptor instead.
func (*SignForSSHSessionResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{34}
}

func (x *SignForSSHSessionResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// ExchangeSSHKeysRequest is a request to exchange SSH keys for VNet SSH.
type ExchangeSSHKeysRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HostPublicKey is the host key that should be trusted by clients connecting
	// to VNet SSH addresses. It is encoded in OpenSSH wire format.
	HostPublicKey []byte `protobuf:"bytes,1,opt,name=host_public_key,json=hostPublicKey,proto3" json:"host_public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeSSHKeysRequest) Reset() {
	*x = ExchangeSSHKeysRequest{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeSSHKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSSHKeysRequest) ProtoMessage() {}

func (x *ExchangeSSHKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSSHKeysRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSSHKeysRequest) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{35}
}

func (x *ExchangeSSHKeysRequest) GetHostPublicKey() []byte {
	if x != nil {
		return x.HostPublicKey
	}
	return nil
}

// ExchangeSSHKeysResponse is a response for ExchangeSSHKeys.
type ExchangeSSHKeysResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserPublicKey is the user key that should be trusted by VNet for incoming
	// connections from SSH clients. It is encoded in OpenSSH wire format.
	UserPublicKey []byte `protobuf:"bytes,1,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeSSHKeysResponse) Reset() {
	*x = ExchangeSSHKeysResponse{}
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeSSHKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSSHKeysResponse) ProtoMessage() {}

func (x *ExchangeSSHKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSSHKeysResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSSHKeysResponse) Descriptor() ([]byte, []int) {
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP(), []int{36}
}

func (x *ExchangeSSHKeysResponse) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

var File_teleport_lib_vnet_v1_client_application_service_proto protoreflect.FileDescriptor

const file_teleport_lib_vnet_v1_client_application_service_proto_rawDesc = "" +
	"\n" +
	"5teleport/lib/vnet/v1/client_application_service.proto\x12\x14teleport.lib.vnet.v1\x1a!teleport/legacy/types/types.proto\"S\n" +
	"\x1aAuthenticateProcessRequest\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1b\n" +
	"\tpipe_path\x18\x02 \x01(\tR\bpipePath\"7\n" +
	"\x1bAuthenticateProcessResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"u\n" +
	"\x1dReportNetworkStackInfoRequest\x12T\n" +
	"\x12network_stack_info\x18\x01 \x01(\v2&.teleport.lib.vnet.v1.NetworkStackInfoR\x10networkStackInfo\"Z\n" +
	"\x10NetworkStackInfo\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12\x1f\n" +
	"\vipv6_prefix\x18\x02 \x01(\tR\n" +
	"ipv6Prefix\" \n" +
	"\x1eReportNetworkStackInfoResponse\"\r\n" +
	"\vPingRequest\"\x0e\n" +
	"\fPingResponse\"(\n" +
	"\x12ResolveFQDNRequest\x12\x12\n" +
	"\x04fqdn\x18\x01 \x01(\tR\x04fqdn\"\x8d\x02\n" +
	"\x13ResolveFQDNResponse\x12M\n" +
	"\x0fmatched_tcp_app\x18\x01 \x01(\v2#.teleport.lib.vnet.v1.MatchedTCPAppH\x00R\rmatchedTcpApp\x12M\n" +
	"\x0fmatched_web_app\x18\x02 \x01(\v2#.teleport.lib.vnet.v1.MatchedWebAppH\x00R\rmatchedWebApp\x12O\n" +
	"\x0fmatched_cluster\x18\x03 \x01(\v2$.teleport.lib.vnet.v1.MatchedClusterH\x00R\x0ematchedClusterB\a\n" +
	"\x05match\"I\n" +
	"\rMatchedTCPApp\x128\n" +
	"\bapp_info\x18\x01 \x01(\v2\x1d.teleport.lib.vnet.v1.AppInfoR\aappInfo\"\x0f\n" +
	"\rMatchedWebApp\"\xbe\x01\n" +
	"\x0eMatchedCluster\x12&\n" +
	"\x0fipv4_cidr_range\x18\x01 \x01(\tR\ripv4CidrRange\x12$\n" +
	"\x0eweb_proxy_addr\x18\x02 \x01(\tR\fwebProxyAddr\x12\x18\n" +
	"\aprofile\x18\x03 \x01(\tR\aprofile\x12!\n" +
	"\froot_cluster\x18\x04 \x01(\tR\vrootCluster\x12!\n" +
	"\fleaf_cluster\x18\x05 \x01(\tR\vleafCluster\"\xe8\x01\n" +
	"\aAppInfo\x125\n" +
	"\aapp_key\x18\x01 \x01(\v2\x1c.teleport.lib.vnet.v1.AppKeyR\x06appKey\x12\x18\n" +
	"\acluster\x18\x02 \x01(\tR\acluster\x12\x1e\n" +
	"\x03app\x18\x03 \x01(\v2\f.types.AppV3R\x03app\x12&\n" +
	"\x0fipv4_cidr_range\x18\x04 \x01(\tR\ripv4CidrRange\x12D\n" +
	"\fdial_options\x18\x05 \x01(\v2!.teleport.lib.vnet.v1.DialOptionsR\vdialOptions\"Y\n" +
	"\x06AppKey\x12\x18\n" +
	"\aprofile\x18\x01 \x01(\tR\aprofile\x12!\n" +
	"\fleaf_cluster\x18\x02 \x01(\tR\vleafCluster\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\"\xee\x01\n" +
	"\vDialOptions\x12$\n" +
	"\x0eweb_proxy_addr\x18\x01 \x01(\tR\fwebProxyAddr\x12;\n" +
	"\x1aalpn_conn_upgrade_required\x18\x02 \x01(\bR\x17alpnConnUpgradeRequired\x12\x10\n" +
	"\x03sni\x18\x03 \x01(\tR\x03sni\x120\n" +
	"\x14insecure_skip_verify\x18\x04 \x01(\bR\x12insecureSkipVerify\x128\n" +
	"\x19root_cluster_ca_cert_pool\x18\x05 \x01(\fR\x15rootClusterCaCertPool\"r\n" +
	"\x15ReissueAppCertRequest\x128\n" +
	"\bapp_info\x18\x01 \x01(\v2\x1d.teleport.lib.vnet.v1.AppInfoR\aappInfo\x12\x1f\n" +
	"\vtarget_port\x18\x02 \x01(\rR\n" +
	"targetPort\",\n" +
	"\x16ReissueAppCertResponse\x12\x12\n" +
	"\x04cert\x18\x01 \x01(\fR\x04cert\"\xd3\x01\n" +
	"\x11SignForAppRequest\x125\n" +
	"\aapp_key\x18\x01 \x01(\v2\x1c.teleport.lib.vnet.v1.AppKeyR\x06appKey\x12\x1f\n" +
	"\vtarget_port\x18\x02 \x01(\rR\n" +
	"targetPort\x125\n" +
	"\x04sign\x18\x06 \x01(\v2!.teleport.lib.vnet.v1.SignRequestR\x04signJ\x04\b\x03\x10\x04J\x04\b\x04\x10\x05J\x04\b\x05\x10\x06R\x06digestR\x04hashR\x0fpss_salt_length\"\x96\x01\n" +
	"\vSignRequest\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\fR\x06digest\x12.\n" +
	"\x04hash\x18\x02 \x01(\x0e2\x1a.teleport.lib.vnet.v1.HashR\x04hash\x12+\n" +
	"\x0fpss_salt_length\x18\x03 \x01(\x05H\x00R\rpssSaltLength\x88\x01\x01B\x12\n" +
	"\x10_pss_salt_length\"2\n" +
	"\x12SignForAppResponse\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\fR\tsignature\"O\n" +
	"\x16OnNewConnectionRequest\x125\n" +
	"\aapp_key\x18\x01 \x01(\v2\x1c.teleport.lib.vnet.v1.AppKeyR\x06appKey\"\x19\n" +
	"\x17OnNewConnectionResponse\"v\n" +
	"\x19OnInvalidLocalPortRequest\x128\n" +
	"\bapp_info\x18\x01 \x01(\v2\x1d.teleport.lib.vnet.v1.AppInfoR\aappInfo\x12\x1f\n" +
	"\vtarget_port\x18\x02 \x01(\rR\n" +
	"targetPort\"\x1c\n" +
	"\x1aOnInvalidLocalPortResponse\"!\n" +
	"\x1fGetTargetOSConfigurationRequest\"\x87\x01\n" +
	" GetTargetOSConfigurationResponse\x12c\n" +
	"\x17target_os_configuration\x18\x01 \x01(\v2+.teleport.lib.vnet.v1.TargetOSConfigurationR\x15targetOsConfiguration\"^\n" +
	"\x15TargetOSConfiguration\x12\x1b\n" +
	"\tdns_zones\x18\x01 \x03(\tR\bdnsZones\x12(\n" +
	"\x10ipv4_cidr_ranges\x18\x02 \x03(\tR\x0eipv4CidrRanges\".\n" +
	"\x12UserTLSCertRequest\x12\x18\n" +
	"\aprofile\x18\x01 \x01(\tR\aprofile\"o\n" +
	"\x13UserTLSCertResponse\x12\x12\n" +
	"\x04cert\x18\x01 \x01(\fR\x04cert\x12D\n" +
	"\fdial_options\x18\x02 \x01(\v2!.teleport.lib.vnet.v1.DialOptionsR\vdialOptions\"h\n" +
	"\x15SignForUserTLSRequest\x12\x18\n" +
	"\aprofile\x18\x01 \x01(\tR\aprofile\x125\n" +
	"\x04sign\x18\x02 \x01(\v2!.teleport.lib.vnet.v1.SignRequestR\x04sign\"6\n" +
	"\x16SignForUserTLSResponse\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\fR\tsignature\"\xa7\x01\n" +
	"\x17SessionSSHConfigRequest\x12\x18\n" +
	"\aprofile\x18\x01 \x01(\tR\aprofile\x12!\n" +
	"\froot_cluster\x18\x02 \x01(\tR\vrootCluster\x12!\n" +
	"\fleaf_cluster\x18\x03 \x01(\tR\vleafCluster\x12\x18\n" +
	"\aaddress\x18\x04 \x01(\tR\aaddress\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\"n\n" +
	"\x18SessionSSHConfigResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x12\n" +
	"\x04cert\x18\x02 \x01(\fR\x04cert\x12\x1f\n" +
	"\vtrusted_cas\x18\x03 \x03(\fR\n" +
	"trustedCas\"p\n" +
	"\x18SignForSSHSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x125\n" +
	"\x04sign\x18\x02 \x01(\v2!.teleport.lib.vnet.v1.SignRequestR\x04sign\"9\n" +
	"\x19SignForSSHSessionResponse\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\fR\tsignature\"@\n" +
	"\x16ExchangeSSHKeysRequest\x12&\n" +
	"\x0fhost_public_key\x18\x01 \x01(\fR\rhostPublicKey\"A\n" +
	"\x17ExchangeSSHKeysResponse\x12&\n" +
	"\x0fuser_public_key\x18\x01 \x01(\fR\ruserPublicKey*<\n" +
	"\x04Hash\x12\x14\n" +
	"\x10HASH_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tHASH_NONE\x10\x01\x12\x0f\n" +
	"\vHASH_SHA256\x10\x022\xbc\f\n" +
	"\x18ClientApplicationService\x12z\n" +
	"\x13AuthenticateProcess\x120.teleport.lib.vnet.v1.AuthenticateProcessRequest\x1a1.teleport.lib.vnet.v1.AuthenticateProcessResponse\x12\x83\x01\n" +
	"\x16ReportNetworkStackInfo\x123.teleport.lib.vnet.v1.ReportNetworkStackInfoRequest\x1a4.teleport.lib.vnet.v1.ReportNetworkStackInfoResponse\x12M\n" +
	"\x04Ping\x12!.teleport.lib.vnet.v1.PingRequest\x1a\".teleport.lib.vnet.v1.PingResponse\x12b\n" +
	"\vResolveFQDN\x12(.teleport.lib.vnet.v1.ResolveFQDNRequest\x1a).teleport.lib.vnet.v1.ResolveFQDNResponse\x12k\n" +
	"\x0eReissueAppCert\x12+.teleport.lib.vnet.v1.ReissueAppCertRequest\x1a,.teleport.lib.vnet.v1.ReissueAppCertResponse\x12_\n" +
	"\n" +
	"SignForApp\x12'.teleport.lib.vnet.v1.SignForAppRequest\x1a(.teleport.lib.vnet.v1.SignForAppResponse\x12n\n" +
	"\x0fOnNewConnection\x12,.teleport.lib.vnet.v1.OnNewConnectionRequest\x1a-.teleport.lib.vnet.v1.OnNewConnectionResponse\x12w\n" +
	"\x12OnInvalidLocalPort\x12/.teleport.lib.vnet.v1.OnInvalidLocalPortRequest\x1a0.teleport.lib.vnet.v1.OnInvalidLocalPortResponse\x12\x89\x01\n" +
	"\x18GetTargetOSConfiguration\x125.teleport.lib.vnet.v1.GetTargetOSConfigurationRequest\x1a6.teleport.lib.vnet.v1.GetTargetOSConfigurationResponse\x12b\n" +
	"\vUserTLSCert\x12(.teleport.lib.vnet.v1.UserTLSCertRequest\x1a).teleport.lib.vnet.v1.UserTLSCertResponse\x12k\n" +
	"\x0eSignForUserTLS\x12+.teleport.lib.vnet.v1.SignForUserTLSRequest\x1a,.teleport.lib.vnet.v1.SignForUserTLSResponse\x12q\n" +
	"\x10SessionSSHConfig\x12-.teleport.lib.vnet.v1.SessionSSHConfigRequest\x1a..teleport.lib.vnet.v1.SessionSSHConfigResponse\x12t\n" +
	"\x11SignForSSHSession\x12..teleport.lib.vnet.v1.SignForSSHSessionRequest\x1a/.teleport.lib.vnet.v1.SignForSSHSessionResponse\x12n\n" +
	"\x0fExchangeSSHKeys\x12,.teleport.lib.vnet.v1.ExchangeSSHKeysRequest\x1a-.teleport.lib.vnet.v1.ExchangeSSHKeysResponseBLZJgithub.com/gravitational/teleport/gen/proto/go/teleport/lib/vnet/v1;vnetv1b\x06proto3"

var (
	file_teleport_lib_vnet_v1_client_application_service_proto_rawDescOnce sync.Once
	file_teleport_lib_vnet_v1_client_application_service_proto_rawDescData []byte
)

func file_teleport_lib_vnet_v1_client_application_service_proto_rawDescGZIP() []byte {
	file_teleport_lib_vnet_v1_client_application_service_proto_rawDescOnce.Do(func() {
		file_teleport_lib_vnet_v1_client_application_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_lib_vnet_v1_client_application_service_proto_rawDesc), len(file_teleport_lib_vnet_v1_client_application_service_proto_rawDesc)))
	})
	return file_teleport_lib_vnet_v1_client_application_service_proto_rawDescData
}

var file_teleport_lib_vnet_v1_client_application_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_teleport_lib_vnet_v1_client_application_service_proto_goTypes = []any{
	(Hash)(0),                                // 0: teleport.lib.vnet.v1.Hash
	(*AuthenticateProcessRequest)(nil),       // 1: teleport.lib.vnet.v1.AuthenticateProcessRequest
	(*AuthenticateProcessResponse)(nil),      // 2: teleport.lib.vnet.v1.AuthenticateProcessResponse
	(*ReportNetworkStackInfoRequest)(nil),    // 3: teleport.lib.vnet.v1.ReportNetworkStackInfoRequest
	(*NetworkStackInfo)(nil),                 // 4: teleport.lib.vnet.v1.NetworkStackInfo
	(*ReportNetworkStackInfoResponse)(nil),   // 5: teleport.lib.vnet.v1.ReportNetworkStackInfoResponse
	(*PingRequest)(nil),                      // 6: teleport.lib.vnet.v1.PingRequest
	(*PingResponse)(nil),                     // 7: teleport.lib.vnet.v1.PingResponse
	(*ResolveFQDNRequest)(nil),               // 8: teleport.lib.vnet.v1.ResolveFQDNRequest
	(*ResolveFQDNResponse)(nil),              // 9: teleport.lib.vnet.v1.ResolveFQDNResponse
	(*MatchedTCPApp)(nil),                    // 10: teleport.lib.vnet.v1.MatchedTCPApp
	(*MatchedWebApp)(nil),                    // 11: teleport.lib.vnet.v1.MatchedWebApp
	(*MatchedCluster)(nil),                   // 12: teleport.lib.vnet.v1.MatchedCluster
	(*AppInfo)(nil),                          // 13: teleport.lib.vnet.v1.AppInfo
	(*AppKey)(nil),                           // 14: teleport.lib.vnet.v1.AppKey
	(*DialOptions)(nil),                      // 15: teleport.lib.vnet.v1.DialOptions
	(*ReissueAppCertRequest)(nil),            // 16: teleport.lib.vnet.v1.ReissueAppCertRequest
	(*ReissueAppCertResponse)(nil),           // 17: teleport.lib.vnet.v1.ReissueAppCertResponse
	(*SignForAppRequest)(nil),                // 18: teleport.lib.vnet.v1.SignForAppRequest
	(*SignRequest)(nil),                      // 19: teleport.lib.vnet.v1.SignRequest
	(*SignForAppResponse)(nil),               // 20: teleport.lib.vnet.v1.SignForAppResponse
	(*OnNewConnectionRequest)(nil),           // 21: teleport.lib.vnet.v1.OnNewConnectionRequest
	(*OnNewConnectionResponse)(nil),          // 22: teleport.lib.vnet.v1.OnNewConnectionResponse
	(*OnInvalidLocalPortRequest)(nil),        // 23: teleport.lib.vnet.v1.OnInvalidLocalPortRequest
	(*OnInvalidLocalPortResponse)(nil),       // 24: teleport.lib.vnet.v1.OnInvalidLocalPortResponse
	(*GetTargetOSConfigurationRequest)(nil),  // 25: teleport.lib.vnet.v1.GetTargetOSConfigurationRequest
	(*GetTargetOSConfigurationResponse)(nil), // 26: teleport.lib.vnet.v1.GetTargetOSConfigurationResponse
	(*TargetOSConfiguration)(nil),            // 27: teleport.lib.vnet.v1.TargetOSConfiguration
	(*UserTLSCertRequest)(nil),               // 28: teleport.lib.vnet.v1.UserTLSCertRequest
	(*UserTLSCertResponse)(nil),              // 29: teleport.lib.vnet.v1.UserTLSCertResponse
	(*SignForUserTLSRequest)(nil),            // 30: teleport.lib.vnet.v1.SignForUserTLSRequest
	(*SignForUserTLSResponse)(nil),           // 31: teleport.lib.vnet.v1.SignForUserTLSResponse
	(*SessionSSHConfigRequest)(nil),          // 32: teleport.lib.vnet.v1.SessionSSHConfigRequest
	(*SessionSSHConfigResponse)(nil),         // 33: teleport.lib.vnet.v1.SessionSSHConfigResponse
	(*SignForSSHSessionRequest)(nil),         // 34: teleport.lib.vnet.v1.SignForSSHSessionRequest
	(*SignForSSHSessionResponse)(nil),        // 35: teleport.lib.vnet.v1.SignForSSHSessionResponse
	(*ExchangeSSHKeysRequest)(nil),           // 36: teleport.lib.vnet.v1.ExchangeSSHKeysRequest
	(*ExchangeSSHKeysResponse)(nil),          // 37: teleport.lib.vnet.v1.ExchangeSSHKeysResponse
	(*types.AppV3)(nil),                      // 38: types.AppV3
}
var file_teleport_lib_vnet_v1_client_application_service_proto_depIdxs = []int32{
	4,  // 0: teleport.lib.vnet.v1.ReportNetworkStackInfoRequest.network_stack_info:type_name -> teleport.lib.vnet.v1.NetworkStackInfo
	10, // 1: teleport.lib.vnet.v1.ResolveFQDNResponse.matched_tcp_app:type_name -> teleport.lib.vnet.v1.MatchedTCPApp
	11, // 2: teleport.lib.vnet.v1.ResolveFQDNResponse.matched_web_app:type_name -> teleport.lib.vnet.v1.MatchedWebApp
	12, // 3: teleport.lib.vnet.v1.ResolveFQDNResponse.matched_cluster:type_name -> teleport.lib.vnet.v1.MatchedCluster
	13, // 4: teleport.lib.vnet.v1.MatchedTCPApp.app_info:type_name -> teleport.lib.vnet.v1.AppInfo
	14, // 5: teleport.lib.vnet.v1.AppInfo.app_key:type_name -> teleport.lib.vnet.v1.AppKey
	38, // 6: teleport.lib.vnet.v1.AppInfo.app:type_name -> types.AppV3
	15, // 7: teleport.lib.vnet.v1.AppInfo.dial_options:type_name -> teleport.lib.vnet.v1.DialOptions
	13, // 8: teleport.lib.vnet.v1.ReissueAppCertRequest.app_info:type_name -> teleport.lib.vnet.v1.AppInfo
	14, // 9: teleport.lib.vnet.v1.SignForAppRequest.app_key:type_name -> teleport.lib.vnet.v1.AppKey
	19, // 10: teleport.lib.vnet.v1.SignForAppRequest.sign:type_name -> teleport.lib.vnet.v1.SignRequest
	0,  // 11: teleport.lib.vnet.v1.SignRequest.hash:type_name -> teleport.lib.vnet.v1.Hash
	14, // 12: teleport.lib.vnet.v1.OnNewConnectionRequest.app_key:type_name -> teleport.lib.vnet.v1.AppKey
	13, // 13: teleport.lib.vnet.v1.OnInvalidLocalPortRequest.app_info:type_name -> teleport.lib.vnet.v1.AppInfo
	27, // 14: teleport.lib.vnet.v1.GetTargetOSConfigurationResponse.target_os_configuration:type_name -> teleport.lib.vnet.v1.TargetOSConfiguration
	15, // 15: teleport.lib.vnet.v1.UserTLSCertResponse.dial_options:type_name -> teleport.lib.vnet.v1.DialOptions
	19, // 16: teleport.lib.vnet.v1.SignForUserTLSRequest.sign:type_name -> teleport.lib.vnet.v1.SignRequest
	19, // 17: teleport.lib.vnet.v1.SignForSSHSessionRequest.sign:type_name -> teleport.lib.vnet.v1.SignRequest
	1,  // 18: teleport.lib.vnet.v1.ClientApplicationService.AuthenticateProcess:input_type -> teleport.lib.vnet.v1.AuthenticateProcessRequest
	3,  // 19: teleport.lib.vnet.v1.ClientApplicationService.ReportNetworkStackInfo:input_type -> teleport.lib.vnet.v1.ReportNetworkStackInfoRequest
	6,  // 20: teleport.lib.vnet.v1.ClientApplicationService.Ping:input_type -> teleport.lib.vnet.v1.PingRequest
	8,  // 21: teleport.lib.vnet.v1.ClientApplicationService.ResolveFQDN:input_type -> teleport.lib.vnet.v1.ResolveFQDNRequest
	16, // 22: teleport.lib.vnet.v1.ClientApplicationService.ReissueAppCert:input_type -> teleport.lib.vnet.v1.ReissueAppCertRequest
	18, // 23: teleport.lib.vnet.v1.ClientApplicationService.SignForApp:input_type -> teleport.lib.vnet.v1.SignForAppRequest
	21, // 24: teleport.lib.vnet.v1.ClientApplicationService.OnNewConnection:input_type -> teleport.lib.vnet.v1.OnNewConnectionRequest
	23, // 25: teleport.lib.vnet.v1.ClientApplicationService.OnInvalidLocalPort:input_type -> teleport.lib.vnet.v1.OnInvalidLocalPortRequest
	25, // 26: teleport.lib.vnet.v1.ClientApplicationService.GetTargetOSConfiguration:input_type -> teleport.lib.vnet.v1.GetTargetOSConfigurationRequest
	28, // 27: teleport.lib.vnet.v1.ClientApplicationService.UserTLSCert:input_type -> teleport.lib.vnet.v1.UserTLSCertRequest
	30, // 28: teleport.lib.vnet.v1.ClientApplicationService.SignForUserTLS:input_type -> teleport.lib.vnet.v1.SignForUserTLSRequest
	32, // 29: teleport.lib.vnet.v1.ClientApplicationService.SessionSSHConfig:input_type -> teleport.lib.vnet.v1.SessionSSHConfigRequest
	34, // 30: teleport.lib.vnet.v1.ClientApplicationService.SignForSSHSession:input_type -> teleport.lib.vnet.v1.SignForSSHSessionRequest
	36, // 31: teleport.lib.vnet.v1.ClientApplicationService.ExchangeSSHKeys:input_type -> teleport.lib.vnet.v1.ExchangeSSHKeysRequest
	2,  // 32: teleport.lib.vnet.v1.ClientApplicationService.AuthenticateProcess:output_type -> teleport.lib.vnet.v1.AuthenticateProcessResponse
	5,  // 33: teleport.lib.vnet.v1.ClientApplicationService.ReportNetworkStackInfo:output_type -> teleport.lib.vnet.v1.ReportNetworkStackInfoResponse
	7,  // 34: teleport.lib.vnet.v1.ClientApplicationService.Ping:output_type -> teleport.lib.vnet.v1.PingResponse
	9,  // 35: teleport.lib.vnet.v1.ClientApplicationService.ResolveFQDN:output_type -> teleport.lib.vnet.v1.ResolveFQDNResponse
	17, // 36: teleport.lib.vnet.v1.ClientApplicationService.ReissueAppCert:output_type -> teleport.lib.vnet.v1.ReissueAppCertResponse
	20, // 37: teleport.lib.vnet.v1.ClientApplicationService.SignForApp:output_type -> teleport.lib.vnet.v1.SignForAppResponse
	22, // 38: teleport.lib.vnet.v1.ClientApplicationService.OnNewConnection:output_type -> teleport.lib.vnet.v1.OnNewConnectionResponse
	24, // 39: teleport.lib.vnet.v1.ClientApplicationService.OnInvalidLocalPort:output_type -> teleport.lib.vnet.v1.OnInvalidLocalPortResponse
	26, // 40: teleport.lib.vnet.v1.ClientApplicationService.GetTargetOSConfiguration:output_type -> teleport.lib.vnet.v1.GetTargetOSConfigurationResponse
	29, // 41: teleport.lib.vnet.v1.ClientApplicationService.UserTLSCert:output_type -> teleport.lib.vnet.v1.UserTLSCertResponse
	31, // 42: teleport.lib.vnet.v1.ClientApplicationService.SignForUserTLS:output_type -> teleport.lib.vnet.v1.SignForUserTLSResponse
	33, // 43: teleport.lib.vnet.v1.ClientApplicationService.SessionSSHConfig:output_type -> teleport.lib.vnet.v1.SessionSSHConfigResponse
	35, // 44: teleport.lib.vnet.v1.ClientApplicationService.SignForSSHSession:output_type -> teleport.lib.vnet.v1.SignForSSHSessionResponse
	37, // 45: teleport.lib.vnet.v1.ClientApplicationService.ExchangeSSHKeys:output_type -> teleport.lib.vnet.v1.ExchangeSSHKeysResponse
	32, // [32:46] is the sub-list for method output_type
	18, // [18:32] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_teleport_lib_vnet_v1_client_application_service_proto_init() }
func file_teleport_lib_vnet_v1_client_application_service_proto_init() {
	if File_teleport_lib_vnet_v1_client_application_service_proto != nil {
		return
	}
	file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[8].OneofWrappers = []any{
		(*ResolveFQDNResponse_MatchedTcpApp)(nil),
		(*ResolveFQDNResponse_MatchedWebApp)(nil),
		(*ResolveFQDNResponse_MatchedCluster)(nil),
	}
	file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_lib_vnet_v1_client_application_service_proto_rawDesc), len(file_teleport_lib_vnet_v1_client_application_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_lib_vnet_v1_client_application_service_proto_goTypes,
		DependencyIndexes: file_teleport_lib_vnet_v1_client_application_service_proto_depIdxs,
		EnumInfos:         file_teleport_lib_vnet_v1_client_application_service_proto_enumTypes,
		MessageInfos:      file_teleport_lib_vnet_v1_client_application_service_proto_msgTypes,
	}.Build()
	File_teleport_lib_vnet_v1_client_application_service_proto = out.File
	file_teleport_lib_vnet_v1_client_application_service_proto_goTypes = nil
	file_teleport_lib_vnet_v1_client_application_service_proto_depIdxs = nil
}
