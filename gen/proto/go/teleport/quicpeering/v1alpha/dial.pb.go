// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/quicpeering/v1alpha/dial.proto

package quicpeeringv1alpha

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sent from a proxy to a peer proxy in a fresh QUIC stream to dial a Teleport
// resource through a QUIC proxy peering connection. The message is sent in
// protobuf binary format, prefixed by its length encoded as a little endian
// 32-bit unsigned integer.
type DialRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target agent for the connection attempt; should be "<host id>.<cluster name>".
	TargetHostId string `protobuf:"bytes,1,opt,name=target_host_id,json=targetHostId,proto3" json:"target_host_id,omitempty"`
	// The type of the connection as defined by api/types.TunnelType ("node",
	// "app", "kube"...).
	ConnectionType string `protobuf:"bytes,2,opt,name=connection_type,json=connectionType,proto3" json:"connection_type,omitempty"`
	// The source of the connection, the network address of the user for whom the
	// connection is being tunneled, as seen from the proxy sending the request.
	Source *Addr `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// The destination of the connection, used as a weak hint and as something to
	// put in the "local address" of the connection object handled by the agent.
	Destination *Addr `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	// The time of the client, must be provided and within 5 minutes of the local
	// server time for 0-RTT requests.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A random id for each dial request, must be provided and unique among dial
	// requests recently received by the server.
	Nonce uint64 `protobuf:"fixed64,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The ping flag should be set if the request is actually for a reachability
	// and authentication check. If set, all other fields are functionally
	// ignored, although nonce and timestamp should still be set so they can be
	// logged.
	Ping          bool `protobuf:"varint,7,opt,name=ping,proto3" json:"ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DialRequest) Reset() {
	*x = DialRequest{}
	mi := &file_teleport_quicpeering_v1alpha_dial_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialRequest) ProtoMessage() {}

func (x *DialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_quicpeering_v1alpha_dial_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialRequest.ProtoReflect.Descriptor instead.
func (*DialRequest) Descriptor() ([]byte, []int) {
	return file_teleport_quicpeering_v1alpha_dial_proto_rawDescGZIP(), []int{0}
}

func (x *DialRequest) GetTargetHostId() string {
	if x != nil {
		return x.TargetHostId
	}
	return ""
}

func (x *DialRequest) GetConnectionType() string {
	if x != nil {
		return x.ConnectionType
	}
	return ""
}

func (x *DialRequest) GetSource() *Addr {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DialRequest) GetDestination() *Addr {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *DialRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DialRequest) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *DialRequest) GetPing() bool {
	if x != nil {
		return x.Ping
	}
	return false
}

// A stringy Go net.Addr. Can be converted to and from a lib/utils.NetAddr.
type Addr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Likely always "tcp".
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// Depending on the network, likely "<ip address>:<port>".
	Addr          string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Addr) Reset() {
	*x = Addr{}
	mi := &file_teleport_quicpeering_v1alpha_dial_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_quicpeering_v1alpha_dial_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_teleport_quicpeering_v1alpha_dial_proto_rawDescGZIP(), []int{1}
}

func (x *Addr) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Addr) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

// Sent from the server to the client as a response to a DialRequest. The
// message is likewise sent in protobuf binary format, prefixed by its length
// encoded as a little endian uint32.
type DialResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The success or failure of the dial. If the dial is successful, the stream
	// will continue with the data of the connection.
	Status        *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DialResponse) Reset() {
	*x = DialResponse{}
	mi := &file_teleport_quicpeering_v1alpha_dial_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialResponse) ProtoMessage() {}

func (x *DialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_quicpeering_v1alpha_dial_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialResponse.ProtoReflect.Descriptor instead.
func (*DialResponse) Descriptor() ([]byte, []int) {
	return file_teleport_quicpeering_v1alpha_dial_proto_rawDescGZIP(), []int{2}
}

func (x *DialResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_teleport_quicpeering_v1alpha_dial_proto protoreflect.FileDescriptor

const file_teleport_quicpeering_v1alpha_dial_proto_rawDesc = "" +
	"\n" +
	"'teleport/quicpeering/v1alpha/dial.proto\x12\x1cteleport.quicpeering.v1alpha\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17google/rpc/status.proto\"\xc2\x02\n" +
	"\vDialRequest\x12$\n" +
	"\x0etarget_host_id\x18\x01 \x01(\tR\ftargetHostId\x12'\n" +
	"\x0fconnection_type\x18\x02 \x01(\tR\x0econnectionType\x12:\n" +
	"\x06source\x18\x03 \x01(\v2\".teleport.quicpeering.v1alpha.AddrR\x06source\x12D\n" +
	"\vdestination\x18\x04 \x01(\v2\".teleport.quicpeering.v1alpha.AddrR\vdestination\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x14\n" +
	"\x05nonce\x18\x06 \x01(\x06R\x05nonce\x12\x12\n" +
	"\x04ping\x18\a \x01(\bR\x04ping\"4\n" +
	"\x04Addr\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\":\n" +
	"\fDialResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.google.rpc.StatusR\x06statusB`Z^github.com/gravitational/teleport/gen/proto/go/teleport/quicpeering/v1alpha;quicpeeringv1alphab\x06proto3"

var (
	file_teleport_quicpeering_v1alpha_dial_proto_rawDescOnce sync.Once
	file_teleport_quicpeering_v1alpha_dial_proto_rawDescData []byte
)

func file_teleport_quicpeering_v1alpha_dial_proto_rawDescGZIP() []byte {
	file_teleport_quicpeering_v1alpha_dial_proto_rawDescOnce.Do(func() {
		file_teleport_quicpeering_v1alpha_dial_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_quicpeering_v1alpha_dial_proto_rawDesc), len(file_teleport_quicpeering_v1alpha_dial_proto_rawDesc)))
	})
	return file_teleport_quicpeering_v1alpha_dial_proto_rawDescData
}

var file_teleport_quicpeering_v1alpha_dial_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_teleport_quicpeering_v1alpha_dial_proto_goTypes = []any{
	(*DialRequest)(nil),           // 0: teleport.quicpeering.v1alpha.DialRequest
	(*Addr)(nil),                  // 1: teleport.quicpeering.v1alpha.Addr
	(*DialResponse)(nil),          // 2: teleport.quicpeering.v1alpha.DialResponse
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*status.Status)(nil),         // 4: google.rpc.Status
}
var file_teleport_quicpeering_v1alpha_dial_proto_depIdxs = []int32{
	1, // 0: teleport.quicpeering.v1alpha.DialRequest.source:type_name -> teleport.quicpeering.v1alpha.Addr
	1, // 1: teleport.quicpeering.v1alpha.DialRequest.destination:type_name -> teleport.quicpeering.v1alpha.Addr
	3, // 2: teleport.quicpeering.v1alpha.DialRequest.timestamp:type_name -> google.protobuf.Timestamp
	4, // 3: teleport.quicpeering.v1alpha.DialResponse.status:type_name -> google.rpc.Status
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_teleport_quicpeering_v1alpha_dial_proto_init() }
func file_teleport_quicpeering_v1alpha_dial_proto_init() {
	if File_teleport_quicpeering_v1alpha_dial_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_quicpeering_v1alpha_dial_proto_rawDesc), len(file_teleport_quicpeering_v1alpha_dial_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_quicpeering_v1alpha_dial_proto_goTypes,
		DependencyIndexes: file_teleport_quicpeering_v1alpha_dial_proto_depIdxs,
		MessageInfos:      file_teleport_quicpeering_v1alpha_dial_proto_msgTypes,
	}.Build()
	File_teleport_quicpeering_v1alpha_dial_proto = out.File
	file_teleport_quicpeering_v1alpha_dial_proto_goTypes = nil
	file_teleport_quicpeering_v1alpha_dial_proto_depIdxs = nil
}
