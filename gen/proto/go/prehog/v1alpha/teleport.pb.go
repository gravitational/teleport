//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: prehog/v1alpha/teleport.proto

package prehogv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// the kind of a "resource" as intended by ResourceHeartbeatEvent
// Keep in sync with prehog/v1/teleport.proto
type ResourceKind int32

const (
	ResourceKind_RESOURCE_KIND_UNSPECIFIED ResourceKind = 0
	// PostHog property value: "node"
	ResourceKind_RESOURCE_KIND_NODE ResourceKind = 1
	// PostHog property value: "app_server"
	ResourceKind_RESOURCE_KIND_APP_SERVER ResourceKind = 2
	// PostHog property value: "kube_server"
	ResourceKind_RESOURCE_KIND_KUBE_SERVER ResourceKind = 3
	// PostHog property value: "db_server"
	ResourceKind_RESOURCE_KIND_DB_SERVER ResourceKind = 4
	// PostHog property value: "windows_desktop"
	ResourceKind_RESOURCE_KIND_WINDOWS_DESKTOP ResourceKind = 5
	// ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
	// empty or "teleport"); not used in keepalives
	//
	// PostHog property value: "node.openssh"
	ResourceKind_RESOURCE_KIND_NODE_OPENSSH ResourceKind = 6
	// ServerV3 ("node") heartbeat with a subkind of "openssh-ec2-ice".
	// Nodes that map EC2 instances and are accessed using EC2 Instance Connect Endpoint.
	// Not used in keepalives.
	// This is the SubKind SubKindOpenSSHEICENode in teleport repo.
	//
	// PostHog property value: "node.openssh_ec2_ice"
	ResourceKind_RESOURCE_KIND_NODE_OPENSSH_EICE ResourceKind = 7
)

// Enum value maps for ResourceKind.
var (
	ResourceKind_name = map[int32]string{
		0: "RESOURCE_KIND_UNSPECIFIED",
		1: "RESOURCE_KIND_NODE",
		2: "RESOURCE_KIND_APP_SERVER",
		3: "RESOURCE_KIND_KUBE_SERVER",
		4: "RESOURCE_KIND_DB_SERVER",
		5: "RESOURCE_KIND_WINDOWS_DESKTOP",
		6: "RESOURCE_KIND_NODE_OPENSSH",
		7: "RESOURCE_KIND_NODE_OPENSSH_EICE",
	}
	ResourceKind_value = map[string]int32{
		"RESOURCE_KIND_UNSPECIFIED":       0,
		"RESOURCE_KIND_NODE":              1,
		"RESOURCE_KIND_APP_SERVER":        2,
		"RESOURCE_KIND_KUBE_SERVER":       3,
		"RESOURCE_KIND_DB_SERVER":         4,
		"RESOURCE_KIND_WINDOWS_DESKTOP":   5,
		"RESOURCE_KIND_NODE_OPENSSH":      6,
		"RESOURCE_KIND_NODE_OPENSSH_EICE": 7,
	}
)

func (x ResourceKind) Enum() *ResourceKind {
	p := new(ResourceKind)
	*p = x
	return p
}

func (x ResourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[0].Descriptor()
}

func (ResourceKind) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[0]
}

func (x ResourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceKind.Descriptor instead.
func (ResourceKind) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{0}
}

// The kind of user a given username refers to. Usernames should always refer to
// a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
// bot users.
type UserKind int32

const (
	// Indicates a legacy cluster emitting events without a defined user kind.
	// Note that users (from PostHog's perspective) can be identified via future
	// events if the cluster is upgraded to specify this field.
	//
	// PostHog property value: ""
	UserKind_USER_KIND_UNSPECIFIED UserKind = 0
	// Indicates the user associated with this event is human, either created
	// locally or via SSO.
	//
	// PostHog property value: "human"
	UserKind_USER_KIND_HUMAN UserKind = 1
	// Indicates the user associated with this event is a Machine ID bot user.
	//
	// PostHog property value: "bot"
	UserKind_USER_KIND_BOT UserKind = 2
)

// Enum value maps for UserKind.
var (
	UserKind_name = map[int32]string{
		0: "USER_KIND_UNSPECIFIED",
		1: "USER_KIND_HUMAN",
		2: "USER_KIND_BOT",
	}
	UserKind_value = map[string]int32{
		"USER_KIND_UNSPECIFIED": 0,
		"USER_KIND_HUMAN":       1,
		"USER_KIND_BOT":         2,
	}
)

func (x UserKind) Enum() *UserKind {
	p := new(UserKind)
	*p = x
	return p
}

func (x UserKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserKind) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[1].Descriptor()
}

func (UserKind) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[1]
}

func (x UserKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserKind.Descriptor instead.
func (UserKind) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{1}
}

// DiscoverResource represents a resource type.
type DiscoverResource int32

const (
	DiscoverResource_DISCOVER_RESOURCE_UNSPECIFIED                           DiscoverResource = 0
	DiscoverResource_DISCOVER_RESOURCE_SERVER                                DiscoverResource = 1
	DiscoverResource_DISCOVER_RESOURCE_KUBERNETES                            DiscoverResource = 2
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED         DiscoverResource = 3
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED            DiscoverResource = 4
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED          DiscoverResource = 5
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS                 DiscoverResource = 6
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MYSQL_RDS                    DiscoverResource = 7
	DiscoverResource_DISCOVER_RESOURCE_APPLICATION_HTTP                      DiscoverResource = 8
	DiscoverResource_DISCOVER_RESOURCE_APPLICATION_TCP                       DiscoverResource = 9
	DiscoverResource_DISCOVER_RESOURCE_WINDOWS_DESKTOP                       DiscoverResource = 10
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS                DiscoverResource = 11
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT            DiscoverResource = 12
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED        DiscoverResource = 13
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED            DiscoverResource = 14
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP                 DiscoverResource = 15
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MYSQL_GCP                    DiscoverResource = 16
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP                DiscoverResource = 17
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS DiscoverResource = 18
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE               DiscoverResource = 19
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_DYNAMODB                     DiscoverResource = 20
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES          DiscoverResource = 21
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED        DiscoverResource = 22 // Cassandra & ScyllaDb
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED    DiscoverResource = 23
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE            DiscoverResource = 24 // Elasticache & MemoryDb
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB               DiscoverResource = 25
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE            DiscoverResource = 26
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED    DiscoverResource = 27
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE                  DiscoverResource = 28
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE              DiscoverResource = 29
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT          DiscoverResource = 30
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED      DiscoverResource = 31
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS                DiscoverResource = 32
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SNOWFLAKE                    DiscoverResource = 33
	DiscoverResource_DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY                DiscoverResource = 34
	DiscoverResource_DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY        DiscoverResource = 35
	DiscoverResource_DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION     DiscoverResource = 36
	DiscoverResource_DISCOVER_RESOURCE_SAML_APPLICATION                      DiscoverResource = 37
	DiscoverResource_DISCOVER_RESOURCE_EC2_INSTANCE                          DiscoverResource = 38
	DiscoverResource_DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD            DiscoverResource = 39
	DiscoverResource_DISCOVER_RESOURCE_KUBERNETES_EKS                        DiscoverResource = 40
	DiscoverResource_DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE               DiscoverResource = 41
)

// Enum value maps for DiscoverResource.
var (
	DiscoverResource_name = map[int32]string{
		0:  "DISCOVER_RESOURCE_UNSPECIFIED",
		1:  "DISCOVER_RESOURCE_SERVER",
		2:  "DISCOVER_RESOURCE_KUBERNETES",
		3:  "DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED",
		4:  "DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED",
		5:  "DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED",
		6:  "DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS",
		7:  "DISCOVER_RESOURCE_DATABASE_MYSQL_RDS",
		8:  "DISCOVER_RESOURCE_APPLICATION_HTTP",
		9:  "DISCOVER_RESOURCE_APPLICATION_TCP",
		10: "DISCOVER_RESOURCE_WINDOWS_DESKTOP",
		11: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS",
		12: "DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT",
		13: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED",
		14: "DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED",
		15: "DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP",
		16: "DISCOVER_RESOURCE_DATABASE_MYSQL_GCP",
		17: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP",
		18: "DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS",
		19: "DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE",
		20: "DISCOVER_RESOURCE_DATABASE_DYNAMODB",
		21: "DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES",
		22: "DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED",
		23: "DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED",
		24: "DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE",
		25: "DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB",
		26: "DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE",
		27: "DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED",
		28: "DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE",
		29: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE",
		30: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT",
		31: "DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED",
		32: "DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS",
		33: "DISCOVER_RESOURCE_DATABASE_SNOWFLAKE",
		34: "DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY",
		35: "DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY",
		36: "DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION",
		37: "DISCOVER_RESOURCE_SAML_APPLICATION",
		38: "DISCOVER_RESOURCE_EC2_INSTANCE",
		39: "DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD",
		40: "DISCOVER_RESOURCE_KUBERNETES_EKS",
		41: "DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE",
	}
	DiscoverResource_value = map[string]int32{
		"DISCOVER_RESOURCE_UNSPECIFIED":                           0,
		"DISCOVER_RESOURCE_SERVER":                                1,
		"DISCOVER_RESOURCE_KUBERNETES":                            2,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED":         3,
		"DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED":            4,
		"DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED":          5,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS":                 6,
		"DISCOVER_RESOURCE_DATABASE_MYSQL_RDS":                    7,
		"DISCOVER_RESOURCE_APPLICATION_HTTP":                      8,
		"DISCOVER_RESOURCE_APPLICATION_TCP":                       9,
		"DISCOVER_RESOURCE_WINDOWS_DESKTOP":                       10,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS":                11,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT":            12,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED":        13,
		"DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED":            14,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP":                 15,
		"DISCOVER_RESOURCE_DATABASE_MYSQL_GCP":                    16,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP":                17,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS": 18,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE":               19,
		"DISCOVER_RESOURCE_DATABASE_DYNAMODB":                     20,
		"DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES":          21,
		"DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED":        22,
		"DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED":    23,
		"DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE":            24,
		"DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB":               25,
		"DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE":            26,
		"DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED":    27,
		"DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE":                  28,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE":              29,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT":          30,
		"DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED":      31,
		"DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS":                32,
		"DISCOVER_RESOURCE_DATABASE_SNOWFLAKE":                    33,
		"DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY":                34,
		"DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY":        35,
		"DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION":     36,
		"DISCOVER_RESOURCE_SAML_APPLICATION":                      37,
		"DISCOVER_RESOURCE_EC2_INSTANCE":                          38,
		"DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD":            39,
		"DISCOVER_RESOURCE_KUBERNETES_EKS":                        40,
		"DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE":               41,
	}
)

func (x DiscoverResource) Enum() *DiscoverResource {
	p := new(DiscoverResource)
	*p = x
	return p
}

func (x DiscoverResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverResource) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[2].Descriptor()
}

func (DiscoverResource) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[2]
}

func (x DiscoverResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverResource.Descriptor instead.
func (DiscoverResource) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{2}
}

// DiscoverStatus represents a Discover Step outcome.
type DiscoverStatus int32

const (
	DiscoverStatus_DISCOVER_STATUS_UNSPECIFIED DiscoverStatus = 0
	// The user tried to complete the action and it succeeded.
	DiscoverStatus_DISCOVER_STATUS_SUCCESS DiscoverStatus = 1
	// The system skipped the step.
	// For example:
	// When setting up a Database and there's already a Database Service proxying the DB.
	// In this case the Database Agent installation is skipped.
	DiscoverStatus_DISCOVER_STATUS_SKIPPED DiscoverStatus = 2
	// The user tried to complete the action and it failed.
	DiscoverStatus_DISCOVER_STATUS_ERROR DiscoverStatus = 3
	// The user did not complete the action and left the wizard.
	DiscoverStatus_DISCOVER_STATUS_ABORTED DiscoverStatus = 4
)

// Enum value maps for DiscoverStatus.
var (
	DiscoverStatus_name = map[int32]string{
		0: "DISCOVER_STATUS_UNSPECIFIED",
		1: "DISCOVER_STATUS_SUCCESS",
		2: "DISCOVER_STATUS_SKIPPED",
		3: "DISCOVER_STATUS_ERROR",
		4: "DISCOVER_STATUS_ABORTED",
	}
	DiscoverStatus_value = map[string]int32{
		"DISCOVER_STATUS_UNSPECIFIED": 0,
		"DISCOVER_STATUS_SUCCESS":     1,
		"DISCOVER_STATUS_SKIPPED":     2,
		"DISCOVER_STATUS_ERROR":       3,
		"DISCOVER_STATUS_ABORTED":     4,
	}
)

func (x DiscoverStatus) Enum() *DiscoverStatus {
	p := new(DiscoverStatus)
	*p = x
	return p
}

func (x DiscoverStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[3].Descriptor()
}

func (DiscoverStatus) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[3]
}

func (x DiscoverStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverStatus.Descriptor instead.
func (DiscoverStatus) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{3}
}

// CTA represents teleport web UI's call to action buttons
type CTA int32

const (
	CTA_CTA_UNSPECIFIED            CTA = 0
	CTA_CTA_AUTH_CONNECTOR         CTA = 1
	CTA_CTA_ACTIVE_SESSIONS        CTA = 2
	CTA_CTA_ACCESS_REQUESTS        CTA = 3
	CTA_CTA_PREMIUM_SUPPORT        CTA = 4
	CTA_CTA_TRUSTED_DEVICES        CTA = 5
	CTA_CTA_UPGRADE_BANNER         CTA = 6
	CTA_CTA_BILLING_SUMMARY        CTA = 7
	CTA_CTA_ACCESS_LIST            CTA = 8
	CTA_CTA_ACCESS_MONITORING      CTA = 9
	CTA_CTA_EXTERNAL_AUDIT_STORAGE CTA = 10
	CTA_CTA_OKTA_USER_SYNC         CTA = 11
	CTA_CTA_ENTRA_ID               CTA = 12
)

// Enum value maps for CTA.
var (
	CTA_name = map[int32]string{
		0:  "CTA_UNSPECIFIED",
		1:  "CTA_AUTH_CONNECTOR",
		2:  "CTA_ACTIVE_SESSIONS",
		3:  "CTA_ACCESS_REQUESTS",
		4:  "CTA_PREMIUM_SUPPORT",
		5:  "CTA_TRUSTED_DEVICES",
		6:  "CTA_UPGRADE_BANNER",
		7:  "CTA_BILLING_SUMMARY",
		8:  "CTA_ACCESS_LIST",
		9:  "CTA_ACCESS_MONITORING",
		10: "CTA_EXTERNAL_AUDIT_STORAGE",
		11: "CTA_OKTA_USER_SYNC",
		12: "CTA_ENTRA_ID",
	}
	CTA_value = map[string]int32{
		"CTA_UNSPECIFIED":            0,
		"CTA_AUTH_CONNECTOR":         1,
		"CTA_ACTIVE_SESSIONS":        2,
		"CTA_ACCESS_REQUESTS":        3,
		"CTA_PREMIUM_SUPPORT":        4,
		"CTA_TRUSTED_DEVICES":        5,
		"CTA_UPGRADE_BANNER":         6,
		"CTA_BILLING_SUMMARY":        7,
		"CTA_ACCESS_LIST":            8,
		"CTA_ACCESS_MONITORING":      9,
		"CTA_EXTERNAL_AUDIT_STORAGE": 10,
		"CTA_OKTA_USER_SYNC":         11,
		"CTA_ENTRA_ID":               12,
	}
)

func (x CTA) Enum() *CTA {
	p := new(CTA)
	*p = x
	return p
}

func (x CTA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CTA) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[4].Descriptor()
}

func (CTA) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[4]
}

func (x CTA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CTA.Descriptor instead.
func (CTA) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{4}
}

// IntegrationEnrollKind represents the types of integration that
// can be enrolled.
type IntegrationEnrollKind int32

const (
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_UNSPECIFIED               IntegrationEnrollKind = 0
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_SLACK                     IntegrationEnrollKind = 1
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_AWS_OIDC                  IntegrationEnrollKind = 2
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_PAGERDUTY                 IntegrationEnrollKind = 3
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_EMAIL                     IntegrationEnrollKind = 4
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_JIRA                      IntegrationEnrollKind = 5
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_DISCORD                   IntegrationEnrollKind = 6
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MATTERMOST                IntegrationEnrollKind = 7
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MS_TEAMS                  IntegrationEnrollKind = 8
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_OPSGENIE                  IntegrationEnrollKind = 9
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_OKTA                      IntegrationEnrollKind = 10
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_JAMF                      IntegrationEnrollKind = 11
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID                IntegrationEnrollKind = 12
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS IntegrationEnrollKind = 13
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI       IntegrationEnrollKind = 14
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB         IntegrationEnrollKind = 15
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS        IntegrationEnrollKind = 16
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE        IntegrationEnrollKind = 17
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_AWS            IntegrationEnrollKind = 18
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_GCP            IntegrationEnrollKind = 19
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_AZURE          IntegrationEnrollKind = 20
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_SPACELIFT      IntegrationEnrollKind = 21
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_MACHINE_ID_KUBERNETES     IntegrationEnrollKind = 22
	IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_ENTRA_ID                  IntegrationEnrollKind = 23
)

// Enum value maps for IntegrationEnrollKind.
var (
	IntegrationEnrollKind_name = map[int32]string{
		0:  "INTEGRATION_ENROLL_KIND_UNSPECIFIED",
		1:  "INTEGRATION_ENROLL_KIND_SLACK",
		2:  "INTEGRATION_ENROLL_KIND_AWS_OIDC",
		3:  "INTEGRATION_ENROLL_KIND_PAGERDUTY",
		4:  "INTEGRATION_ENROLL_KIND_EMAIL",
		5:  "INTEGRATION_ENROLL_KIND_JIRA",
		6:  "INTEGRATION_ENROLL_KIND_DISCORD",
		7:  "INTEGRATION_ENROLL_KIND_MATTERMOST",
		8:  "INTEGRATION_ENROLL_KIND_MS_TEAMS",
		9:  "INTEGRATION_ENROLL_KIND_OPSGENIE",
		10: "INTEGRATION_ENROLL_KIND_OKTA",
		11: "INTEGRATION_ENROLL_KIND_JAMF",
		12: "INTEGRATION_ENROLL_KIND_MACHINE_ID",
		13: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS",
		14: "INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI",
		15: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB",
		16: "INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS",
		17: "INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE",
		18: "INTEGRATION_ENROLL_KIND_MACHINE_ID_AWS",
		19: "INTEGRATION_ENROLL_KIND_MACHINE_ID_GCP",
		20: "INTEGRATION_ENROLL_KIND_MACHINE_ID_AZURE",
		21: "INTEGRATION_ENROLL_KIND_MACHINE_ID_SPACELIFT",
		22: "INTEGRATION_ENROLL_KIND_MACHINE_ID_KUBERNETES",
		23: "INTEGRATION_ENROLL_KIND_ENTRA_ID",
	}
	IntegrationEnrollKind_value = map[string]int32{
		"INTEGRATION_ENROLL_KIND_UNSPECIFIED":               0,
		"INTEGRATION_ENROLL_KIND_SLACK":                     1,
		"INTEGRATION_ENROLL_KIND_AWS_OIDC":                  2,
		"INTEGRATION_ENROLL_KIND_PAGERDUTY":                 3,
		"INTEGRATION_ENROLL_KIND_EMAIL":                     4,
		"INTEGRATION_ENROLL_KIND_JIRA":                      5,
		"INTEGRATION_ENROLL_KIND_DISCORD":                   6,
		"INTEGRATION_ENROLL_KIND_MATTERMOST":                7,
		"INTEGRATION_ENROLL_KIND_MS_TEAMS":                  8,
		"INTEGRATION_ENROLL_KIND_OPSGENIE":                  9,
		"INTEGRATION_ENROLL_KIND_OKTA":                      10,
		"INTEGRATION_ENROLL_KIND_JAMF":                      11,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID":                12,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS": 13,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI":       14,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB":         15,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS":        16,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE":        17,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_AWS":            18,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_GCP":            19,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_AZURE":          20,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_SPACELIFT":      21,
		"INTEGRATION_ENROLL_KIND_MACHINE_ID_KUBERNETES":     22,
		"INTEGRATION_ENROLL_KIND_ENTRA_ID":                  23,
	}
)

func (x IntegrationEnrollKind) Enum() *IntegrationEnrollKind {
	p := new(IntegrationEnrollKind)
	*p = x
	return p
}

func (x IntegrationEnrollKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrationEnrollKind) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[5].Descriptor()
}

func (IntegrationEnrollKind) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[5]
}

func (x IntegrationEnrollKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrationEnrollKind.Descriptor instead.
func (IntegrationEnrollKind) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{5}
}

// EditorChangeStatus is the possible value of an EditorChangeEvent event status
type EditorChangeStatus int32

const (
	EditorChangeStatus_EDITOR_CHANGE_STATUS_UNSPECIFIED EditorChangeStatus = 0
	// Status when the editor role is granted
	EditorChangeStatus_EDITOR_CHANGE_STATUS_ROLE_GRANTED EditorChangeStatus = 1
	// Status when the editor role is removed
	EditorChangeStatus_EDITOR_CHANGE_STATUS_ROLE_REMOVED EditorChangeStatus = 2
)

// Enum value maps for EditorChangeStatus.
var (
	EditorChangeStatus_name = map[int32]string{
		0: "EDITOR_CHANGE_STATUS_UNSPECIFIED",
		1: "EDITOR_CHANGE_STATUS_ROLE_GRANTED",
		2: "EDITOR_CHANGE_STATUS_ROLE_REMOVED",
	}
	EditorChangeStatus_value = map[string]int32{
		"EDITOR_CHANGE_STATUS_UNSPECIFIED":  0,
		"EDITOR_CHANGE_STATUS_ROLE_GRANTED": 1,
		"EDITOR_CHANGE_STATUS_ROLE_REMOVED": 2,
	}
)

func (x EditorChangeStatus) Enum() *EditorChangeStatus {
	p := new(EditorChangeStatus)
	*p = x
	return p
}

func (x EditorChangeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditorChangeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[6].Descriptor()
}

func (EditorChangeStatus) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[6]
}

func (x EditorChangeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditorChangeStatus.Descriptor instead.
func (EditorChangeStatus) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{6}
}

// Feature is name of Teleport feature
type Feature int32

const (
	Feature_FEATURE_UNSPECIFIED     Feature = 0
	Feature_FEATURE_TRUSTED_DEVICES Feature = 1
)

// Enum value maps for Feature.
var (
	Feature_name = map[int32]string{
		0: "FEATURE_UNSPECIFIED",
		1: "FEATURE_TRUSTED_DEVICES",
	}
	Feature_value = map[string]int32{
		"FEATURE_UNSPECIFIED":     0,
		"FEATURE_TRUSTED_DEVICES": 1,
	}
)

func (x Feature) Enum() *Feature {
	p := new(Feature)
	*p = x
	return p
}

func (x Feature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Feature) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[7].Descriptor()
}

func (Feature) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[7]
}

func (x Feature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Feature.Descriptor instead.
func (Feature) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{7}
}

// FeatureRecommendationStatus is feature recommendation status.
type FeatureRecommendationStatus int32

const (
	FeatureRecommendationStatus_FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED FeatureRecommendationStatus = 0
	// FEATURE_RECOMMENDATION_STATUS_NOTIFIED is emitted when a feature is recommended (notified in UI) to user.
	FeatureRecommendationStatus_FEATURE_RECOMMENDATION_STATUS_NOTIFIED FeatureRecommendationStatus = 1
	// FEATURE_RECOMMENDATION_STATUS_DONE is emitted when user completes the desired CTA.
	FeatureRecommendationStatus_FEATURE_RECOMMENDATION_STATUS_DONE FeatureRecommendationStatus = 2
)

// Enum value maps for FeatureRecommendationStatus.
var (
	FeatureRecommendationStatus_name = map[int32]string{
		0: "FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED",
		1: "FEATURE_RECOMMENDATION_STATUS_NOTIFIED",
		2: "FEATURE_RECOMMENDATION_STATUS_DONE",
	}
	FeatureRecommendationStatus_value = map[string]int32{
		"FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED": 0,
		"FEATURE_RECOMMENDATION_STATUS_NOTIFIED":    1,
		"FEATURE_RECOMMENDATION_STATUS_DONE":        2,
	}
)

func (x FeatureRecommendationStatus) Enum() *FeatureRecommendationStatus {
	p := new(FeatureRecommendationStatus)
	*p = x
	return p
}

func (x FeatureRecommendationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureRecommendationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[8].Descriptor()
}

func (FeatureRecommendationStatus) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[8]
}

func (x FeatureRecommendationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureRecommendationStatus.Descriptor instead.
func (FeatureRecommendationStatus) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{8}
}

// LicenseLimit indicates event type that triggered LicenseLimitEvent.
type LicenseLimit int32

const (
	LicenseLimit_LICENSE_LIMIT_UNSPECIFIED LicenseLimit = 0
	// LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF is emitted if license does not
	// allow Jamf integration (e.g. Team Plan)
	LicenseLimit_LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF LicenseLimit = 1
	// LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE is emitted when allowed enrolled device
	// limit is reached
	LicenseLimit_LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE LicenseLimit = 2
)

// Enum value maps for LicenseLimit.
var (
	LicenseLimit_name = map[int32]string{
		0: "LICENSE_LIMIT_UNSPECIFIED",
		1: "LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF",
		2: "LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE",
	}
	LicenseLimit_value = map[string]int32{
		"LICENSE_LIMIT_UNSPECIFIED":             0,
		"LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF":  1,
		"LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE": 2,
	}
)

func (x LicenseLimit) Enum() *LicenseLimit {
	p := new(LicenseLimit)
	*p = x
	return p
}

func (x LicenseLimit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseLimit) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[9].Descriptor()
}

func (LicenseLimit) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[9]
}

func (x LicenseLimit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseLimit.Descriptor instead.
func (LicenseLimit) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{9}
}

// DeployMethod describes the method used to deploy a service.
type UIDiscoverDeployServiceEvent_DeployMethod int32

const (
	// DEPLOY_METHOD_UNSPECIFIED means there was an existing service
	// so deploying step got skipped.
	UIDiscoverDeployServiceEvent_DEPLOY_METHOD_UNSPECIFIED UIDiscoverDeployServiceEvent_DeployMethod = 0
	// DEPLOY_METHOD_AUTO means Teleport deployed a service for the user.
	UIDiscoverDeployServiceEvent_DEPLOY_METHOD_AUTO UIDiscoverDeployServiceEvent_DeployMethod = 1
	// DEPLOY_METHOD_MANUAL means a user deployed a service by themselves.
	UIDiscoverDeployServiceEvent_DEPLOY_METHOD_MANUAL UIDiscoverDeployServiceEvent_DeployMethod = 2
)

// Enum value maps for UIDiscoverDeployServiceEvent_DeployMethod.
var (
	UIDiscoverDeployServiceEvent_DeployMethod_name = map[int32]string{
		0: "DEPLOY_METHOD_UNSPECIFIED",
		1: "DEPLOY_METHOD_AUTO",
		2: "DEPLOY_METHOD_MANUAL",
	}
	UIDiscoverDeployServiceEvent_DeployMethod_value = map[string]int32{
		"DEPLOY_METHOD_UNSPECIFIED": 0,
		"DEPLOY_METHOD_AUTO":        1,
		"DEPLOY_METHOD_MANUAL":      2,
	}
)

func (x UIDiscoverDeployServiceEvent_DeployMethod) Enum() *UIDiscoverDeployServiceEvent_DeployMethod {
	p := new(UIDiscoverDeployServiceEvent_DeployMethod)
	*p = x
	return p
}

func (x UIDiscoverDeployServiceEvent_DeployMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UIDiscoverDeployServiceEvent_DeployMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[10].Descriptor()
}

func (UIDiscoverDeployServiceEvent_DeployMethod) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[10]
}

func (x UIDiscoverDeployServiceEvent_DeployMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UIDiscoverDeployServiceEvent_DeployMethod.Descriptor instead.
func (UIDiscoverDeployServiceEvent_DeployMethod) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{29, 0}
}

// DeployType describes the type of deployment.
type UIDiscoverDeployServiceEvent_DeployType int32

const (
	// DEPLOY_METHOD_UNSPECIFIED means there was an existing service
	// so deploying step got skipped.
	UIDiscoverDeployServiceEvent_DEPLOY_TYPE_UNSPECIFIED UIDiscoverDeployServiceEvent_DeployType = 0
	// DEPLOY_TYPE_INSTALL_SCRIPT means service was deployed using an
	// install script.
	UIDiscoverDeployServiceEvent_DEPLOY_TYPE_INSTALL_SCRIPT UIDiscoverDeployServiceEvent_DeployType = 1
	// DEPLOY_TYPE_AMAZON_ECS means service was deployed using amazon's
	// elastic container service.
	UIDiscoverDeployServiceEvent_DEPLOY_TYPE_AMAZON_ECS UIDiscoverDeployServiceEvent_DeployType = 2
)

// Enum value maps for UIDiscoverDeployServiceEvent_DeployType.
var (
	UIDiscoverDeployServiceEvent_DeployType_name = map[int32]string{
		0: "DEPLOY_TYPE_UNSPECIFIED",
		1: "DEPLOY_TYPE_INSTALL_SCRIPT",
		2: "DEPLOY_TYPE_AMAZON_ECS",
	}
	UIDiscoverDeployServiceEvent_DeployType_value = map[string]int32{
		"DEPLOY_TYPE_UNSPECIFIED":    0,
		"DEPLOY_TYPE_INSTALL_SCRIPT": 1,
		"DEPLOY_TYPE_AMAZON_ECS":     2,
	}
)

func (x UIDiscoverDeployServiceEvent_DeployType) Enum() *UIDiscoverDeployServiceEvent_DeployType {
	p := new(UIDiscoverDeployServiceEvent_DeployType)
	*p = x
	return p
}

func (x UIDiscoverDeployServiceEvent_DeployType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UIDiscoverDeployServiceEvent_DeployType) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[11].Descriptor()
}

func (UIDiscoverDeployServiceEvent_DeployType) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[11]
}

func (x UIDiscoverDeployServiceEvent_DeployType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UIDiscoverDeployServiceEvent_DeployType.Descriptor instead.
func (UIDiscoverDeployServiceEvent_DeployType) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{29, 1}
}

// ConfigMethod describes how the discovery config is configured.
type UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod int32

const (
	// CONFIG_METHOD_UNSPECIFIED means config method unspecified/unset.
	UIDiscoverCreateDiscoveryConfigEvent_CONFIG_METHOD_UNSPECIFIED UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod = 0
	// CONFIG_METHOD_SSM means EC2 auto discovery configured with ssm.
	UIDiscoverCreateDiscoveryConfigEvent_CONFIG_METHOD_AWS_EC2_SSM UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod = 1
	// CONFIG_METHOD_SSM means auto discovery configured for EC2 using EICE.
	UIDiscoverCreateDiscoveryConfigEvent_CONFIG_METHOD_AWS_EC2_EICE UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod = 2
	// CONFIG_METHOD_SSM means auto discovery configured for RDS using ECS.
	UIDiscoverCreateDiscoveryConfigEvent_CONFIG_METHOD_AWS_RDS_ECS UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod = 3
	// CONFIG_METHOD_SSM means auto discovery configured for EKS.
	UIDiscoverCreateDiscoveryConfigEvent_CONFIG_METHOD_AWS_EKS UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod = 4
)

// Enum value maps for UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod.
var (
	UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod_name = map[int32]string{
		0: "CONFIG_METHOD_UNSPECIFIED",
		1: "CONFIG_METHOD_AWS_EC2_SSM",
		2: "CONFIG_METHOD_AWS_EC2_EICE",
		3: "CONFIG_METHOD_AWS_RDS_ECS",
		4: "CONFIG_METHOD_AWS_EKS",
	}
	UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod_value = map[string]int32{
		"CONFIG_METHOD_UNSPECIFIED":  0,
		"CONFIG_METHOD_AWS_EC2_SSM":  1,
		"CONFIG_METHOD_AWS_EC2_EICE": 2,
		"CONFIG_METHOD_AWS_RDS_ECS":  3,
		"CONFIG_METHOD_AWS_EKS":      4,
	}
)

func (x UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) Enum() *UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod {
	p := new(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod)
	*p = x
	return p
}

func (x UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[12].Descriptor()
}

func (UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[12]
}

func (x UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod.Descriptor instead.
func (UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{30, 0}
}

// a successful user login
//
// PostHog event: tp.user.login
type UserLoginEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
	// should always be a real user as bots and service accounts with long-term
	// credentials don't ever login
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// type of the auth connector used in the login, should be
	// "local"/"github"/"saml"/"oidc"
	//
	// PostHog property: tp.connector_type
	ConnectorType string `protobuf:"bytes,2,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	// anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
	// for logins where device trust is enabled
	//
	// PostHog property: tp.device_id
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// the required private key policy for this login.
	RequiredPrivateKeyPolicy string `protobuf:"bytes,4,opt,name=required_private_key_policy,json=requiredPrivateKeyPolicy,proto3" json:"required_private_key_policy,omitempty"`
}

func (x *UserLoginEvent) Reset() {
	*x = UserLoginEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginEvent) ProtoMessage() {}

func (x *UserLoginEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginEvent.ProtoReflect.Descriptor instead.
func (*UserLoginEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{0}
}

func (x *UserLoginEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserLoginEvent) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

func (x *UserLoginEvent) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UserLoginEvent) GetRequiredPrivateKeyPolicy() string {
	if x != nil {
		return x.RequiredPrivateKeyPolicy
	}
	return ""
}

// MFAAuthenticationEvent is emitted when a user performs MFA authentication.
type MFAAuthenticationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
	// should always be a real user as bots and service accounts with long-term
	// credentials don't ever login
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
	// for logins where device trust is enabled
	//
	// PostHog property: tp.device_id
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// device type is the type of MFA device used
	DeviceType string `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// the authorization scope the MFA authentication
	MfaChallengeScope string `protobuf:"bytes,4,opt,name=mfa_challenge_scope,json=mfaChallengeScope,proto3" json:"mfa_challenge_scope,omitempty"`
}

func (x *MFAAuthenticationEvent) Reset() {
	*x = MFAAuthenticationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MFAAuthenticationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MFAAuthenticationEvent) ProtoMessage() {}

func (x *MFAAuthenticationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MFAAuthenticationEvent.ProtoReflect.Descriptor instead.
func (*MFAAuthenticationEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{1}
}

func (x *MFAAuthenticationEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *MFAAuthenticationEvent) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *MFAAuthenticationEvent) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *MFAAuthenticationEvent) GetMfaChallengeScope() string {
	if x != nil {
		return x.MfaChallengeScope
	}
	return ""
}

type SSOCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github/saml/oidc
	ConnectorType string `protobuf:"bytes,1,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
}

func (x *SSOCreateEvent) Reset() {
	*x = SSOCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSOCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSOCreateEvent) ProtoMessage() {}

func (x *SSOCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSOCreateEvent.ProtoReflect.Descriptor instead.
func (*SSOCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{2}
}

func (x *SSOCreateEvent) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

// ResourceCreateEvent is emitted when a resource is created.
type ResourceCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource_type is the type of resource ("node", "node.openssh", "db", "k8s", "app").
	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// resource_origin is the origin of the resource ("cloud", "kubernetes").
	ResourceOrigin string `protobuf:"bytes,2,opt,name=resource_origin,json=resourceOrigin,proto3" json:"resource_origin,omitempty"`
	// cloud_provider is the cloud provider the resource came from ("AWS", "Azure", "GCP")
	// if resource_origin == "cloud".
	CloudProvider string `protobuf:"bytes,3,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	// database contains additional database information if resource_type == "db".
	Database *DiscoveredDatabaseMetadata `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *ResourceCreateEvent) Reset() {
	*x = ResourceCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCreateEvent) ProtoMessage() {}

func (x *ResourceCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCreateEvent.ProtoReflect.Descriptor instead.
func (*ResourceCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceCreateEvent) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ResourceCreateEvent) GetResourceOrigin() string {
	if x != nil {
		return x.ResourceOrigin
	}
	return ""
}

func (x *ResourceCreateEvent) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *ResourceCreateEvent) GetDatabase() *DiscoveredDatabaseMetadata {
	if x != nil {
		return x.Database
	}
	return nil
}

// DiscoveredDatabaseMetadata contains additional database information.
type DiscoveredDatabaseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// database type.
	DbType string `protobuf:"bytes,1,opt,name=db_type,json=dbType,proto3" json:"db_type,omitempty"`
	// database protocol.
	DbProtocol string `protobuf:"bytes,2,opt,name=db_protocol,json=dbProtocol,proto3" json:"db_protocol,omitempty"`
}

func (x *DiscoveredDatabaseMetadata) Reset() {
	*x = DiscoveredDatabaseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveredDatabaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveredDatabaseMetadata) ProtoMessage() {}

func (x *DiscoveredDatabaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveredDatabaseMetadata.ProtoReflect.Descriptor instead.
func (*DiscoveredDatabaseMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{4}
}

func (x *DiscoveredDatabaseMetadata) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *DiscoveredDatabaseMetadata) GetDbProtocol() string {
	if x != nil {
		return x.DbProtocol
	}
	return ""
}

// a heartbeat for a resource served by a Teleport instance outside of the
// control plane (i.e. not auth, not proxy)
//
// PostHog event: tp.resource.hb
type ResourceHeartbeatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized name of the resource, 32 bytes (HMAC-SHA-256); the name is the
	// host ID for nodes but the actual user-facing name for other resources, so
	// an app or a database served by multiple agents won't be counted multiple
	// times
	//
	// PreHog property: tp.resource_name (in base64)
	ResourceName []byte `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// kind of the resource (node, app, db)
	//
	// PostHog property: tp.resource_type (as a string, see ResourceKind)
	ResourceKind ResourceKind `protobuf:"varint,2,opt,name=resource_kind,json=resourceKind,proto3,enum=prehog.v1alpha.ResourceKind" json:"resource_kind,omitempty"`
	// true if the heartbeat has no expiration
	//
	// PostHog property: tp.is_static
	Static bool `protobuf:"varint,3,opt,name=static,proto3" json:"static,omitempty"`
}

func (x *ResourceHeartbeatEvent) Reset() {
	*x = ResourceHeartbeatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceHeartbeatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceHeartbeatEvent) ProtoMessage() {}

func (x *ResourceHeartbeatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceHeartbeatEvent.ProtoReflect.Descriptor instead.
func (*ResourceHeartbeatEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceHeartbeatEvent) GetResourceName() []byte {
	if x != nil {
		return x.ResourceName
	}
	return nil
}

func (x *ResourceHeartbeatEvent) GetResourceKind() ResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return ResourceKind_RESOURCE_KIND_UNSPECIFIED
}

func (x *ResourceHeartbeatEvent) GetStatic() bool {
	if x != nil {
		return x.Static
	}
	return false
}

// an event representing one of several audit events: session.start, port,
// app.session.start, db.session.start, windows.desktop.session.start; i.e. a
// SSH shell or port-forward, kubectl exec or kubectl port-forward, DB, App or
// Desktop connection
//
// an earlier encoding (as "tp.session.start") mixed SSH sessions and kubectl
// execs under a session type of "ssh"
//
// PostHog event: tp.session.start
type SessionStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// type of the session, should be "ssh"/"k8s"/"db"/"app"/"desktop" (matching
	// the values for api/types.SessionKind) or "app_tcp", "ssh_port_v2" or
	// "k8s_port" for TCP Application Access connections, SSH port forwards and
	// kubectl port-forward respectively; a type of "ssh_port" represents either a
	// SSH port forwarding connection or a kubectl port-forward (not used in new
	// events)
	//
	// PostHog property: tp.session_type
	SessionType string `protobuf:"bytes,2,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	// if session_type == "db" the database struct contains additional information
	// about database session.
	//
	// PostHog property: tp.database
	Database *SessionStartDatabaseMetadata `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// if session_type == "desktop" the desktop struct contains additional
	// information about the desktop session
	Desktop *SessionStartDesktopMetadata `protobuf:"bytes,4,opt,name=desktop,proto3" json:"desktop,omitempty"`
	// Indicates this event was generated by a Machine ID bot user.
	UserKind UserKind `protobuf:"varint,5,opt,name=user_kind,json=userKind,proto3,enum=prehog.v1alpha.UserKind" json:"user_kind,omitempty"`
}

func (x *SessionStartEvent) Reset() {
	*x = SessionStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStartEvent) ProtoMessage() {}

func (x *SessionStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStartEvent.ProtoReflect.Descriptor instead.
func (*SessionStartEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{6}
}

func (x *SessionStartEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SessionStartEvent) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

func (x *SessionStartEvent) GetDatabase() *SessionStartDatabaseMetadata {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *SessionStartEvent) GetDesktop() *SessionStartDesktopMetadata {
	if x != nil {
		return x.Desktop
	}
	return nil
}

func (x *SessionStartEvent) GetUserKind() UserKind {
	if x != nil {
		return x.UserKind
	}
	return UserKind_USER_KIND_UNSPECIFIED
}

// SessionStartDatabaseMetadata contains additional information about database session.
type SessionStartDatabaseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// database type.
	DbType string `protobuf:"bytes,1,opt,name=db_type,json=dbType,proto3" json:"db_type,omitempty"`
	// database protocol.
	DbProtocol string `protobuf:"bytes,2,opt,name=db_protocol,json=dbProtocol,proto3" json:"db_protocol,omitempty"`
	// database origin source.
	DbOrigin string `protobuf:"bytes,3,opt,name=db_origin,json=dbOrigin,proto3" json:"db_origin,omitempty"`
}

func (x *SessionStartDatabaseMetadata) Reset() {
	*x = SessionStartDatabaseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStartDatabaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStartDatabaseMetadata) ProtoMessage() {}

func (x *SessionStartDatabaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStartDatabaseMetadata.ProtoReflect.Descriptor instead.
func (*SessionStartDatabaseMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{7}
}

func (x *SessionStartDatabaseMetadata) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *SessionStartDatabaseMetadata) GetDbProtocol() string {
	if x != nil {
		return x.DbProtocol
	}
	return ""
}

func (x *SessionStartDatabaseMetadata) GetDbOrigin() string {
	if x != nil {
		return x.DbOrigin
	}
	return ""
}

// SessionStartDesktop Metadata contains additional information about
// a desktop session.
type SessionStartDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// desktop type ("ad" or "non-ad")
	DesktopType string `protobuf:"bytes,1,opt,name=desktop_type,json=desktopType,proto3" json:"desktop_type,omitempty"`
	// Indicates how the desktop was enrolled in Teleport
	// ("config-file" for statically defined hosts, or "dynamic" for
	// hosts discovered via LDAP).
	Origin string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	// If desktop type is "ad" this field contains the anonymized Active
	// Directory domain that the desktop belongs to.
	WindowsDomain string `protobuf:"bytes,3,opt,name=windows_domain,json=windowsDomain,proto3" json:"windows_domain,omitempty"`
	// If true, and desktop type is "non-ad" automatic user creation is
	// enabled for the session. (This does not mean that the user will
	// be created, as Teleport does not know whether the user already exists.)
	AllowUserCreation bool `protobuf:"varint,4,opt,name=allow_user_creation,json=allowUserCreation,proto3" json:"allow_user_creation,omitempty"`
}

func (x *SessionStartDesktopMetadata) Reset() {
	*x = SessionStartDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStartDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStartDesktopMetadata) ProtoMessage() {}

func (x *SessionStartDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStartDesktopMetadata.ProtoReflect.Descriptor instead.
func (*SessionStartDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{8}
}

func (x *SessionStartDesktopMetadata) GetDesktopType() string {
	if x != nil {
		return x.DesktopType
	}
	return ""
}

func (x *SessionStartDesktopMetadata) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *SessionStartDesktopMetadata) GetWindowsDomain() string {
	if x != nil {
		return x.WindowsDomain
	}
	return ""
}

func (x *SessionStartDesktopMetadata) GetAllowUserCreation() bool {
	if x != nil {
		return x.AllowUserCreation
	}
	return false
}

// the issuance of a user certificate from the user CA
//
// PostHog event: tp.certificate.issued
type UserCertificateIssuedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
	// can be the username of a bot user rather than of a regular user
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// the TTL of the issued certificate, typically 8 or 12 hours
	//
	// PostHog property: tp.ttl_minutes (in minutes, rounded up)
	Ttl *durationpb.Duration `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// If true, the certificate was requested by a bot (i.e. Machine ID) user.
	// PostHog property: tp.is_bot
	IsBot bool `protobuf:"varint,3,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	// If true, the certificate usage is restricted to database access.
	// PostHog property: tp.usage_database
	UsageDatabase bool `protobuf:"varint,4,opt,name=usage_database,json=usageDatabase,proto3" json:"usage_database,omitempty"`
	// If true, the certificate usage is restricted to app access.
	// PostHog property: tp.usage_app
	UsageApp bool `protobuf:"varint,5,opt,name=usage_app,json=usageApp,proto3" json:"usage_app,omitempty"`
	// If true, the certificate usage is restricted to Kubernetes access.
	// PostHog property: tp.usage_kubernetes
	UsageKubernetes bool `protobuf:"varint,6,opt,name=usage_kubernetes,json=usageKubernetes,proto3" json:"usage_kubernetes,omitempty"`
	// If true, the certificate usage is restricted to desktop access.
	// PostHog property: tp.usage_desktop
	UsageDesktop bool `protobuf:"varint,7,opt,name=usage_desktop,json=usageDesktop,proto3" json:"usage_desktop,omitempty"`
	// the private key policy associated with these user certificates.
	PrivateKeyPolicy string `protobuf:"bytes,8,opt,name=private_key_policy,json=privateKeyPolicy,proto3" json:"private_key_policy,omitempty"`
}

func (x *UserCertificateIssuedEvent) Reset() {
	*x = UserCertificateIssuedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCertificateIssuedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCertificateIssuedEvent) ProtoMessage() {}

func (x *UserCertificateIssuedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCertificateIssuedEvent.ProtoReflect.Descriptor instead.
func (*UserCertificateIssuedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{9}
}

func (x *UserCertificateIssuedEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserCertificateIssuedEvent) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *UserCertificateIssuedEvent) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageDatabase() bool {
	if x != nil {
		return x.UsageDatabase
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageApp() bool {
	if x != nil {
		return x.UsageApp
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageKubernetes() bool {
	if x != nil {
		return x.UsageKubernetes
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageDesktop() bool {
	if x != nil {
		return x.UsageDesktop
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetPrivateKeyPolicy() string {
	if x != nil {
		return x.PrivateKeyPolicy
	}
	return ""
}

// the issuance of a SPIFFE SVID
//
// PostHog event: tp.spiffe.svid.issued
type SPIFFESVIDIssuedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
	// can be the username of a bot user rather than of a regular user
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Indicates this event was generated by a Machine ID bot user.
	// PostHog property: tp.user_kind
	UserKind UserKind `protobuf:"varint,2,opt,name=user_kind,json=userKind,proto3,enum=prehog.v1alpha.UserKind" json:"user_kind,omitempty"`
	// anonymized SPIFFE ID, 32 bytes (HMAC-SHA-256) encoded in base64;
	//
	// PostHog property: tp.spiffe.id
	SpiffeId string `protobuf:"bytes,3,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Number of IP SANs included in the SVID
	// PostHog property: tp.spiffe.ip_sans_count
	IpSansCount int32 `protobuf:"varint,4,opt,name=ip_sans_count,json=ipSansCount,proto3" json:"ip_sans_count,omitempty"`
	// Number of DNS SANs included in the SVID
	// PostHog property: tp.spiffe.dns_sans_count
	DnsSansCount int32 `protobuf:"varint,5,opt,name=dns_sans_count,json=dnsSansCount,proto3" json:"dns_sans_count,omitempty"`
	// Type of SVID issued. `x509` or `jwt`
	// PostHog property: tp.spiffe.svid_type
	SvidType string `protobuf:"bytes,6,opt,name=svid_type,json=svidType,proto3" json:"svid_type,omitempty"`
}

func (x *SPIFFESVIDIssuedEvent) Reset() {
	*x = SPIFFESVIDIssuedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPIFFESVIDIssuedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFESVIDIssuedEvent) ProtoMessage() {}

func (x *SPIFFESVIDIssuedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFESVIDIssuedEvent.ProtoReflect.Descriptor instead.
func (*SPIFFESVIDIssuedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{10}
}

func (x *SPIFFESVIDIssuedEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SPIFFESVIDIssuedEvent) GetUserKind() UserKind {
	if x != nil {
		return x.UserKind
	}
	return UserKind_USER_KIND_UNSPECIFIED
}

func (x *SPIFFESVIDIssuedEvent) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *SPIFFESVIDIssuedEvent) GetIpSansCount() int32 {
	if x != nil {
		return x.IpSansCount
	}
	return 0
}

func (x *SPIFFESVIDIssuedEvent) GetDnsSansCount() int32 {
	if x != nil {
		return x.DnsSansCount
	}
	return 0
}

func (x *SPIFFESVIDIssuedEvent) GetSvidType() string {
	if x != nil {
		return x.SvidType
	}
	return ""
}

// UIBannerClickEvent is a usage event sent by the UI when the upgrade
// banner is clicked.
type UIBannerClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// cluster alert name
	Alert string `protobuf:"bytes,2,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *UIBannerClickEvent) Reset() {
	*x = UIBannerClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIBannerClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIBannerClickEvent) ProtoMessage() {}

func (x *UIBannerClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIBannerClickEvent.ProtoReflect.Descriptor instead.
func (*UIBannerClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{11}
}

func (x *UIBannerClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UIBannerClickEvent) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

// UIOnboardCompleteGoToDashboardClickEvent is a UI event sent when initial
// registration is complete.
type UIOnboardCompleteGoToDashboardClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardCompleteGoToDashboardClickEvent) Reset() {
	*x = UIOnboardCompleteGoToDashboardClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardCompleteGoToDashboardClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardCompleteGoToDashboardClickEvent) ProtoMessage() {}

func (x *UIOnboardCompleteGoToDashboardClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardCompleteGoToDashboardClickEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardCompleteGoToDashboardClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{12}
}

func (x *UIOnboardCompleteGoToDashboardClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIOnboardAddFirstResourceClickEvent is a UI event sent when a user clicks the
// "add first resource" button.
type UIOnboardAddFirstResourceClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardAddFirstResourceClickEvent) Reset() {
	*x = UIOnboardAddFirstResourceClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardAddFirstResourceClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardAddFirstResourceClickEvent) ProtoMessage() {}

func (x *UIOnboardAddFirstResourceClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardAddFirstResourceClickEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardAddFirstResourceClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{13}
}

func (x *UIOnboardAddFirstResourceClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIOnboardAddFirstResourceLaterClickEvent is a UI event sent when a user
// clicks the "add first resource later" button.
type UIOnboardAddFirstResourceLaterClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardAddFirstResourceLaterClickEvent) Reset() {
	*x = UIOnboardAddFirstResourceLaterClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardAddFirstResourceLaterClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardAddFirstResourceLaterClickEvent) ProtoMessage() {}

func (x *UIOnboardAddFirstResourceLaterClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardAddFirstResourceLaterClickEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardAddFirstResourceLaterClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{14}
}

func (x *UIOnboardAddFirstResourceLaterClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIOnboardSetCredentialSubmitEvent is a UI event sent during registration when
// users configure their credentials.
type UIOnboardSetCredentialSubmitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardSetCredentialSubmitEvent) Reset() {
	*x = UIOnboardSetCredentialSubmitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardSetCredentialSubmitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardSetCredentialSubmitEvent) ProtoMessage() {}

func (x *UIOnboardSetCredentialSubmitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardSetCredentialSubmitEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardSetCredentialSubmitEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{15}
}

func (x *UIOnboardSetCredentialSubmitEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIOnboardRegisterChallengeSubmitEvent is a UI event sent during registration
// when the MFA challenge is completed.
type UIOnboardRegisterChallengeSubmitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName  string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	MfaType   string `protobuf:"bytes,2,opt,name=mfa_type,json=mfaType,proto3" json:"mfa_type,omitempty"`
	LoginFlow string `protobuf:"bytes,3,opt,name=login_flow,json=loginFlow,proto3" json:"login_flow,omitempty"`
}

func (x *UIOnboardRegisterChallengeSubmitEvent) Reset() {
	*x = UIOnboardRegisterChallengeSubmitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardRegisterChallengeSubmitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardRegisterChallengeSubmitEvent) ProtoMessage() {}

func (x *UIOnboardRegisterChallengeSubmitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardRegisterChallengeSubmitEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardRegisterChallengeSubmitEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{16}
}

func (x *UIOnboardRegisterChallengeSubmitEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UIOnboardRegisterChallengeSubmitEvent) GetMfaType() string {
	if x != nil {
		return x.MfaType
	}
	return ""
}

func (x *UIOnboardRegisterChallengeSubmitEvent) GetLoginFlow() string {
	if x != nil {
		return x.LoginFlow
	}
	return ""
}

// UIOnboardQuestionnaireSubmitEvent is a UI event sent during registration when
// user submits their onboarding questionnaire.
type UIOnboardQuestionnaireSubmitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardQuestionnaireSubmitEvent) Reset() {
	*x = UIOnboardQuestionnaireSubmitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardQuestionnaireSubmitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardQuestionnaireSubmitEvent) ProtoMessage() {}

func (x *UIOnboardQuestionnaireSubmitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardQuestionnaireSubmitEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardQuestionnaireSubmitEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{17}
}

func (x *UIOnboardQuestionnaireSubmitEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIRecoveryCodesContinueClickEvent is a UI event sent during
// registration when the user configures cluster recovery codes.
type UIRecoveryCodesContinueClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIRecoveryCodesContinueClickEvent) Reset() {
	*x = UIRecoveryCodesContinueClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIRecoveryCodesContinueClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIRecoveryCodesContinueClickEvent) ProtoMessage() {}

func (x *UIRecoveryCodesContinueClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIRecoveryCodesContinueClickEvent.ProtoReflect.Descriptor instead.
func (*UIRecoveryCodesContinueClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{18}
}

func (x *UIRecoveryCodesContinueClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIRecoveryCodesCopyClickEvent is a UI event sent during
// registration when the user copies recovery codes.
type UIRecoveryCodesCopyClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIRecoveryCodesCopyClickEvent) Reset() {
	*x = UIRecoveryCodesCopyClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIRecoveryCodesCopyClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIRecoveryCodesCopyClickEvent) ProtoMessage() {}

func (x *UIRecoveryCodesCopyClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIRecoveryCodesCopyClickEvent.ProtoReflect.Descriptor instead.
func (*UIRecoveryCodesCopyClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{19}
}

func (x *UIRecoveryCodesCopyClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIRecoveryCodesPrintClickEvent is a UI event sent during
// registration when the user prints recovery codes.
type UIRecoveryCodesPrintClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIRecoveryCodesPrintClickEvent) Reset() {
	*x = UIRecoveryCodesPrintClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIRecoveryCodesPrintClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIRecoveryCodesPrintClickEvent) ProtoMessage() {}

func (x *UIRecoveryCodesPrintClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIRecoveryCodesPrintClickEvent.ProtoReflect.Descriptor instead.
func (*UIRecoveryCodesPrintClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{20}
}

func (x *UIRecoveryCodesPrintClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// DiscoverMetadata contains common metadata for Discover related events.
type DiscoverMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identifies Discover wizard "session". Will allow to correlate
	// events within the same Discover wizard run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// anonymized
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// SSO indicates whether the user is from an SSO provider.
	Sso bool `protobuf:"varint,3,opt,name=sso,proto3" json:"sso,omitempty"`
}

func (x *DiscoverMetadata) Reset() {
	*x = DiscoverMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverMetadata) ProtoMessage() {}

func (x *DiscoverMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverMetadata.ProtoReflect.Descriptor instead.
func (*DiscoverMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{21}
}

func (x *DiscoverMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiscoverMetadata) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DiscoverMetadata) GetSso() bool {
	if x != nil {
		return x.Sso
	}
	return false
}

// DiscoverResourceMetadata contains common metadata identifying resource type being added.
type DiscoverResourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource type that is being added.
	Resource DiscoverResource `protobuf:"varint,1,opt,name=resource,proto3,enum=prehog.v1alpha.DiscoverResource" json:"resource,omitempty"`
}

func (x *DiscoverResourceMetadata) Reset() {
	*x = DiscoverResourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverResourceMetadata) ProtoMessage() {}

func (x *DiscoverResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverResourceMetadata.ProtoReflect.Descriptor instead.
func (*DiscoverResourceMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{22}
}

func (x *DiscoverResourceMetadata) GetResource() DiscoverResource {
	if x != nil {
		return x.Resource
	}
	return DiscoverResource_DISCOVER_RESOURCE_UNSPECIFIED
}

// DiscoverStepStatus contains fields that track a particular step outcome,
// for example connection test failed or succeeded, or user aborted the step.
type DiscoverStepStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the step outcome.
	Status DiscoverStatus `protobuf:"varint,1,opt,name=status,proto3,enum=prehog.v1alpha.DiscoverStatus" json:"status,omitempty"`
	// Contains error details in case of Error Status.
	// We have to be careful to not include any identifyable infomation like server addresses here.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DiscoverStepStatus) Reset() {
	*x = DiscoverStepStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverStepStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverStepStatus) ProtoMessage() {}

func (x *DiscoverStepStatus) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverStepStatus.ProtoReflect.Descriptor instead.
func (*DiscoverStepStatus) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{23}
}

func (x *DiscoverStepStatus) GetStatus() DiscoverStatus {
	if x != nil {
		return x.Status
	}
	return DiscoverStatus_DISCOVER_STATUS_UNSPECIFIED
}

func (x *DiscoverStepStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// UIDiscoverStartedEvent is emitted when the wizard opens.
type UIDiscoverStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *DiscoverStepStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverStartedEvent) Reset() {
	*x = UIDiscoverStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverStartedEvent) ProtoMessage() {}

func (x *UIDiscoverStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverStartedEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverStartedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{24}
}

func (x *UIDiscoverStartedEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverStartedEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
// and proceeded to the next step.
type UIDiscoverResourceSelectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverResourceSelectionEvent) Reset() {
	*x = UIDiscoverResourceSelectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverResourceSelectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverResourceSelectionEvent) ProtoMessage() {}

func (x *UIDiscoverResourceSelectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverResourceSelectionEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverResourceSelectionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{25}
}

func (x *UIDiscoverResourceSelectionEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverResourceSelectionEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverResourceSelectionEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverIntegrationAWSOIDCConnectEvent is emitted when a user is finished with the step
// that asks user to setup aws integration or select from a list of existing
// aws integrations.
type UIDiscoverIntegrationAWSOIDCConnectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverIntegrationAWSOIDCConnectEvent) Reset() {
	*x = UIDiscoverIntegrationAWSOIDCConnectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverIntegrationAWSOIDCConnectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverIntegrationAWSOIDCConnectEvent) ProtoMessage() {}

func (x *UIDiscoverIntegrationAWSOIDCConnectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverIntegrationAWSOIDCConnectEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverIntegrationAWSOIDCConnectEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{26}
}

func (x *UIDiscoverIntegrationAWSOIDCConnectEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverIntegrationAWSOIDCConnectEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverIntegrationAWSOIDCConnectEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDatabaseRDSEnrollEvent is emitted when a user is finished with
// the step that asks user to select from a list of RDS databases.
type UIDiscoverDatabaseRDSEnrollEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata               *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource               *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status                 *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	SelectedResourcesCount int64                     `protobuf:"varint,4,opt,name=selected_resources_count,json=selectedResourcesCount,proto3" json:"selected_resources_count,omitempty"`
}

func (x *UIDiscoverDatabaseRDSEnrollEvent) Reset() {
	*x = UIDiscoverDatabaseRDSEnrollEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDatabaseRDSEnrollEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDatabaseRDSEnrollEvent) ProtoMessage() {}

func (x *UIDiscoverDatabaseRDSEnrollEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDatabaseRDSEnrollEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDatabaseRDSEnrollEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{27}
}

func (x *UIDiscoverDatabaseRDSEnrollEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDatabaseRDSEnrollEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDatabaseRDSEnrollEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UIDiscoverDatabaseRDSEnrollEvent) GetSelectedResourcesCount() int64 {
	if x != nil {
		return x.SelectedResourcesCount
	}
	return 0
}

// UIDiscoverKubeEKSEnrollEvent is emitted when a user is finished with
// the step that asks user to select from a list of EKS clusters.
type UIDiscoverKubeEKSEnrollEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverKubeEKSEnrollEvent) Reset() {
	*x = UIDiscoverKubeEKSEnrollEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverKubeEKSEnrollEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverKubeEKSEnrollEvent) ProtoMessage() {}

func (x *UIDiscoverKubeEKSEnrollEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverKubeEKSEnrollEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverKubeEKSEnrollEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{28}
}

func (x *UIDiscoverKubeEKSEnrollEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverKubeEKSEnrollEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverKubeEKSEnrollEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
// For SSH this is the Teleport 'install-node' script.
//
// For Kubernetes this is the teleport-agent helm chart installation.
//
// For Database Access this step is the installation of the teleport 'install-db' script.
// It can be skipped if the cluster already has a Database Service capable of proxying the database.
type UIDiscoverDeployServiceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata     *DiscoverMetadata                         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource     *DiscoverResourceMetadata                 `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status       *DiscoverStepStatus                       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	DeployMethod UIDiscoverDeployServiceEvent_DeployMethod `protobuf:"varint,4,opt,name=deploy_method,json=deployMethod,proto3,enum=prehog.v1alpha.UIDiscoverDeployServiceEvent_DeployMethod" json:"deploy_method,omitempty"`
	DeployType   UIDiscoverDeployServiceEvent_DeployType   `protobuf:"varint,5,opt,name=deploy_type,json=deployType,proto3,enum=prehog.v1alpha.UIDiscoverDeployServiceEvent_DeployType" json:"deploy_type,omitempty"`
}

func (x *UIDiscoverDeployServiceEvent) Reset() {
	*x = UIDiscoverDeployServiceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDeployServiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDeployServiceEvent) ProtoMessage() {}

func (x *UIDiscoverDeployServiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDeployServiceEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDeployServiceEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{29}
}

func (x *UIDiscoverDeployServiceEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDeployServiceEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDeployServiceEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UIDiscoverDeployServiceEvent) GetDeployMethod() UIDiscoverDeployServiceEvent_DeployMethod {
	if x != nil {
		return x.DeployMethod
	}
	return UIDiscoverDeployServiceEvent_DEPLOY_METHOD_UNSPECIFIED
}

func (x *UIDiscoverDeployServiceEvent) GetDeployType() UIDiscoverDeployServiceEvent_DeployType {
	if x != nil {
		return x.DeployType
	}
	return UIDiscoverDeployServiceEvent_DEPLOY_TYPE_UNSPECIFIED
}

// UIDiscoverCreateDiscoveryConfigEvent is emitted when a discovery config is successfully created.
type UIDiscoverCreateDiscoveryConfigEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata     *DiscoverMetadata                                 `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource     *DiscoverResourceMetadata                         `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status       *DiscoverStepStatus                               `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ConfigMethod UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod `protobuf:"varint,4,opt,name=config_method,json=configMethod,proto3,enum=prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod" json:"config_method,omitempty"`
}

func (x *UIDiscoverCreateDiscoveryConfigEvent) Reset() {
	*x = UIDiscoverCreateDiscoveryConfigEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverCreateDiscoveryConfigEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverCreateDiscoveryConfigEvent) ProtoMessage() {}

func (x *UIDiscoverCreateDiscoveryConfigEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverCreateDiscoveryConfigEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverCreateDiscoveryConfigEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{30}
}

func (x *UIDiscoverCreateDiscoveryConfigEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverCreateDiscoveryConfigEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverCreateDiscoveryConfigEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UIDiscoverCreateDiscoveryConfigEvent) GetConfigMethod() UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod {
	if x != nil {
		return x.ConfigMethod
	}
	return UIDiscoverCreateDiscoveryConfigEvent_CONFIG_METHOD_UNSPECIFIED
}

// UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
type UIDiscoverDatabaseRegisterEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDatabaseRegisterEvent) Reset() {
	*x = UIDiscoverDatabaseRegisterEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDatabaseRegisterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDatabaseRegisterEvent) ProtoMessage() {}

func (x *UIDiscoverDatabaseRegisterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDatabaseRegisterEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDatabaseRegisterEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{31}
}

func (x *UIDiscoverDatabaseRegisterEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDatabaseRegisterEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDatabaseRegisterEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
type UIDiscoverDatabaseConfigureMTLSEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) Reset() {
	*x = UIDiscoverDatabaseConfigureMTLSEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDatabaseConfigureMTLSEvent) ProtoMessage() {}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDatabaseConfigureMTLSEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDatabaseConfigureMTLSEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{32}
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
type UIDiscoverDesktopActiveDirectoryToolsInstallEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) Reset() {
	*x = UIDiscoverDesktopActiveDirectoryToolsInstallEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDesktopActiveDirectoryToolsInstallEvent) ProtoMessage() {}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDesktopActiveDirectoryToolsInstallEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDesktopActiveDirectoryToolsInstallEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{33}
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
type UIDiscoverDesktopActiveDirectoryConfigureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) Reset() {
	*x = UIDiscoverDesktopActiveDirectoryConfigureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDesktopActiveDirectoryConfigureEvent) ProtoMessage() {}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDesktopActiveDirectoryConfigureEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDesktopActiveDirectoryConfigureEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{34}
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
// resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
type UIDiscoverAutoDiscoveredResourcesEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource       *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status         *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ResourcesCount int64                     `protobuf:"varint,4,opt,name=resources_count,json=resourcesCount,proto3" json:"resources_count,omitempty"`
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) Reset() {
	*x = UIDiscoverAutoDiscoveredResourcesEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverAutoDiscoveredResourcesEvent) ProtoMessage() {}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverAutoDiscoveredResourcesEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverAutoDiscoveredResourcesEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{35}
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetResourcesCount() int64 {
	if x != nil {
		return x.ResourcesCount
	}
	return 0
}

// UIDiscoverEC2InstanceSelectionEvent is emitted when the user is finished with the step that asks the user to select an EC2 Instance to enroll.
type UIDiscoverEC2InstanceSelectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverEC2InstanceSelectionEvent) Reset() {
	*x = UIDiscoverEC2InstanceSelectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverEC2InstanceSelectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverEC2InstanceSelectionEvent) ProtoMessage() {}

func (x *UIDiscoverEC2InstanceSelectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverEC2InstanceSelectionEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverEC2InstanceSelectionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{36}
}

func (x *UIDiscoverEC2InstanceSelectionEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverEC2InstanceSelectionEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverEC2InstanceSelectionEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDeployEICEEvent is emitted when the user deploys an EC2 Instance Connect Endpoint.
type UIDiscoverDeployEICEEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDeployEICEEvent) Reset() {
	*x = UIDiscoverDeployEICEEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDeployEICEEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDeployEICEEvent) ProtoMessage() {}

func (x *UIDiscoverDeployEICEEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDeployEICEEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDeployEICEEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{37}
}

func (x *UIDiscoverDeployEICEEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDeployEICEEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDeployEICEEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverCreateNodeEvent is emitted when the node is created in Teleport.
type UIDiscoverCreateNodeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverCreateNodeEvent) Reset() {
	*x = UIDiscoverCreateNodeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverCreateNodeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverCreateNodeEvent) ProtoMessage() {}

func (x *UIDiscoverCreateNodeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverCreateNodeEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverCreateNodeEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{38}
}

func (x *UIDiscoverCreateNodeEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverCreateNodeEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverCreateNodeEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
type UIDiscoverDatabaseConfigureIAMPolicyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) Reset() {
	*x = UIDiscoverDatabaseConfigureIAMPolicyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDatabaseConfigureIAMPolicyEvent) ProtoMessage() {}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDatabaseConfigureIAMPolicyEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDatabaseConfigureIAMPolicyEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{39}
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
type UIDiscoverPrincipalsConfigureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverPrincipalsConfigureEvent) Reset() {
	*x = UIDiscoverPrincipalsConfigureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverPrincipalsConfigureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverPrincipalsConfigureEvent) ProtoMessage() {}

func (x *UIDiscoverPrincipalsConfigureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverPrincipalsConfigureEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverPrincipalsConfigureEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{40}
}

func (x *UIDiscoverPrincipalsConfigureEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverPrincipalsConfigureEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverPrincipalsConfigureEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
// when the user clicked tested connection to their resource.
type UIDiscoverTestConnectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverTestConnectionEvent) Reset() {
	*x = UIDiscoverTestConnectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverTestConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverTestConnectionEvent) ProtoMessage() {}

func (x *UIDiscoverTestConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverTestConnectionEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverTestConnectionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{41}
}

func (x *UIDiscoverTestConnectionEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverTestConnectionEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverTestConnectionEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
type UIDiscoverCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverCompletedEvent) Reset() {
	*x = UIDiscoverCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverCompletedEvent) ProtoMessage() {}

func (x *UIDiscoverCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverCompletedEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverCompletedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{42}
}

func (x *UIDiscoverCompletedEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverCompletedEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverCompletedEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// RoleCreateEvent is emitted when user creates a custom role.
type RoleCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// anonymized
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
}

func (x *RoleCreateEvent) Reset() {
	*x = RoleCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleCreateEvent) ProtoMessage() {}

func (x *RoleCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleCreateEvent.ProtoReflect.Descriptor instead.
func (*RoleCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{43}
}

func (x *RoleCreateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RoleCreateEvent) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

// BotCreateEvent is emitted when user creates a bot.
type BotCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is the anonymized name of the user who created the bot
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// anonymized
	BotUserName string `protobuf:"bytes,2,opt,name=bot_user_name,json=botUserName,proto3" json:"bot_user_name,omitempty"`
	// role_name is the anonymized name of the bot role that was created.
	RoleName string `protobuf:"bytes,3,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// role_count is the number of roles that the bot role can impersonate on
	// creation.
	RoleCount int64 `protobuf:"varint,4,opt,name=role_count,json=roleCount,proto3" json:"role_count,omitempty"`
	// join_method is the join method of the token associated with the bot on
	// creation.
	JoinMethod string `protobuf:"bytes,5,opt,name=join_method,json=joinMethod,proto3" json:"join_method,omitempty"`
	// bot_name is the anonymised name of the bot.
	BotName string `protobuf:"bytes,6,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (x *BotCreateEvent) Reset() {
	*x = BotCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotCreateEvent) ProtoMessage() {}

func (x *BotCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotCreateEvent.ProtoReflect.Descriptor instead.
func (*BotCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{44}
}

func (x *BotCreateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BotCreateEvent) GetBotUserName() string {
	if x != nil {
		return x.BotUserName
	}
	return ""
}

func (x *BotCreateEvent) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *BotCreateEvent) GetRoleCount() int64 {
	if x != nil {
		return x.RoleCount
	}
	return 0
}

func (x *BotCreateEvent) GetJoinMethod() string {
	if x != nil {
		return x.JoinMethod
	}
	return ""
}

func (x *BotCreateEvent) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

// BotJoinEvent is emitted when a bot joins a Teleport cluster.
type BotJoinEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bot_name is the anonymised name of the bot.
	BotName string `protobuf:"bytes,1,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
	// join_method is the join method of the token associated with the bot on
	// creation. This will be the string value of `api/types.JoinMethod`.
	JoinMethod string `protobuf:"bytes,2,opt,name=join_method,json=joinMethod,proto3" json:"join_method,omitempty"`
	// join_token_name is the anonymised name of the token used to join
	// the cluster.
	JoinTokenName string `protobuf:"bytes,3,opt,name=join_token_name,json=joinTokenName,proto3" json:"join_token_name,omitempty"`
	// user_name is the anonymised name of the Bot user.
	UserName string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *BotJoinEvent) Reset() {
	*x = BotJoinEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotJoinEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotJoinEvent) ProtoMessage() {}

func (x *BotJoinEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotJoinEvent.ProtoReflect.Descriptor instead.
func (*BotJoinEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{45}
}

func (x *BotJoinEvent) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

func (x *BotJoinEvent) GetJoinMethod() string {
	if x != nil {
		return x.JoinMethod
	}
	return ""
}

func (x *BotJoinEvent) GetJoinTokenName() string {
	if x != nil {
		return x.JoinTokenName
	}
	return ""
}

func (x *BotJoinEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UICreateNewRoleClickEvent is an event that can be triggered during custom role creation
type UICreateNewRoleClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleClickEvent) Reset() {
	*x = UICreateNewRoleClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{46}
}

func (x *UICreateNewRoleClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UICreateNewRoleSaveClickEvent is an event that can be triggered during custom role creation
type UICreateNewRoleSaveClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleSaveClickEvent) Reset() {
	*x = UICreateNewRoleSaveClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleSaveClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleSaveClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleSaveClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleSaveClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleSaveClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{47}
}

func (x *UICreateNewRoleSaveClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UICreateNewRoleCancelClickEvent is an event that can be triggered during custom role creation
type UICreateNewRoleCancelClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleCancelClickEvent) Reset() {
	*x = UICreateNewRoleCancelClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleCancelClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleCancelClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleCancelClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleCancelClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleCancelClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{48}
}

func (x *UICreateNewRoleCancelClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UICreateNewRoleViewDocumentationClickEvent is an event that can be triggered during custom role creation
type UICreateNewRoleViewDocumentationClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleViewDocumentationClickEvent) Reset() {
	*x = UICreateNewRoleViewDocumentationClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleViewDocumentationClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleViewDocumentationClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleViewDocumentationClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleViewDocumentationClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleViewDocumentationClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{49}
}

func (x *UICreateNewRoleViewDocumentationClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UICallToActionClickEvent is a click in a Teleport Web UI's CTA
type UICallToActionClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Cta      CTA    `protobuf:"varint,2,opt,name=cta,proto3,enum=prehog.v1alpha.CTA" json:"cta,omitempty"`
}

func (x *UICallToActionClickEvent) Reset() {
	*x = UICallToActionClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICallToActionClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICallToActionClickEvent) ProtoMessage() {}

func (x *UICallToActionClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICallToActionClickEvent.ProtoReflect.Descriptor instead.
func (*UICallToActionClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{50}
}

func (x *UICallToActionClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UICallToActionClickEvent) GetCta() CTA {
	if x != nil {
		return x.Cta
	}
	return CTA_CTA_UNSPECIFIED
}

// a request forwarded to a kube cluster's API server (other than exec and
// port-forward)
//
// PostHog event: tp.kube.request
type KubeRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Indicates the kind of user (e.g. bot or human), if known.
	UserKind UserKind `protobuf:"varint,2,opt,name=user_kind,json=userKind,proto3,enum=prehog.v1alpha.UserKind" json:"user_kind,omitempty"`
}

func (x *KubeRequestEvent) Reset() {
	*x = KubeRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeRequestEvent) ProtoMessage() {}

func (x *KubeRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeRequestEvent.ProtoReflect.Descriptor instead.
func (*KubeRequestEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{51}
}

func (x *KubeRequestEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *KubeRequestEvent) GetUserKind() UserKind {
	if x != nil {
		return x.UserKind
	}
	return UserKind_USER_KIND_UNSPECIFIED
}

// an sftp event, represents a single operation on a file
//
// PostHog event: tp.sftp
type SFTPEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// matching SFTPAction in teleport/api/types/events/events.proto
	Action int32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	// Indicates the kind of user (bot or human), if known.
	UserKind UserKind `protobuf:"varint,3,opt,name=user_kind,json=userKind,proto3,enum=prehog.v1alpha.UserKind" json:"user_kind,omitempty"`
}

func (x *SFTPEvent) Reset() {
	*x = SFTPEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFTPEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFTPEvent) ProtoMessage() {}

func (x *SFTPEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFTPEvent.ProtoReflect.Descriptor instead.
func (*SFTPEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{52}
}

func (x *SFTPEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SFTPEvent) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *SFTPEvent) GetUserKind() UserKind {
	if x != nil {
		return x.UserKind
	}
	return UserKind_USER_KIND_UNSPECIFIED
}

type AgentMetadataEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	HostId                string   `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Services              []string `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	Os                    string   `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion             string   `protobuf:"bytes,5,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	HostArchitecture      string   `protobuf:"bytes,6,opt,name=host_architecture,json=hostArchitecture,proto3" json:"host_architecture,omitempty"`
	GlibcVersion          string   `protobuf:"bytes,7,opt,name=glibc_version,json=glibcVersion,proto3" json:"glibc_version,omitempty"`
	InstallMethods        []string `protobuf:"bytes,8,rep,name=install_methods,json=installMethods,proto3" json:"install_methods,omitempty"`
	ContainerRuntime      string   `protobuf:"bytes,9,opt,name=container_runtime,json=containerRuntime,proto3" json:"container_runtime,omitempty"`
	ContainerOrchestrator string   `protobuf:"bytes,10,opt,name=container_orchestrator,json=containerOrchestrator,proto3" json:"container_orchestrator,omitempty"`
	CloudEnvironment      string   `protobuf:"bytes,11,opt,name=cloud_environment,json=cloudEnvironment,proto3" json:"cloud_environment,omitempty"`
	// external_upgrader is the name of the registered external upgrader. if non-empty, this field indicates
	// that the associated agent is enrolled in automatic upgrades.
	ExternalUpgrader string `protobuf:"bytes,12,opt,name=external_upgrader,json=externalUpgrader,proto3" json:"external_upgrader,omitempty"`
}

func (x *AgentMetadataEvent) Reset() {
	*x = AgentMetadataEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetadataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetadataEvent) ProtoMessage() {}

func (x *AgentMetadataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetadataEvent.ProtoReflect.Descriptor instead.
func (*AgentMetadataEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{53}
}

func (x *AgentMetadataEvent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentMetadataEvent) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *AgentMetadataEvent) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *AgentMetadataEvent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AgentMetadataEvent) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *AgentMetadataEvent) GetHostArchitecture() string {
	if x != nil {
		return x.HostArchitecture
	}
	return ""
}

func (x *AgentMetadataEvent) GetGlibcVersion() string {
	if x != nil {
		return x.GlibcVersion
	}
	return ""
}

func (x *AgentMetadataEvent) GetInstallMethods() []string {
	if x != nil {
		return x.InstallMethods
	}
	return nil
}

func (x *AgentMetadataEvent) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *AgentMetadataEvent) GetContainerOrchestrator() string {
	if x != nil {
		return x.ContainerOrchestrator
	}
	return ""
}

func (x *AgentMetadataEvent) GetCloudEnvironment() string {
	if x != nil {
		return x.CloudEnvironment
	}
	return ""
}

func (x *AgentMetadataEvent) GetExternalUpgrader() string {
	if x != nil {
		return x.ExternalUpgrader
	}
	return ""
}

// AssistCompletionEvent is an event that is emitted
// when a single completion occurs in the Teleport Assist,
// i.e. a user submits a prompt, and receives an answer from the Assist
type AssistCompletionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// ConversationId is the UUID that identifies a single Assist conversation
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// TotalTokens is the total amount of token used to satisfy this request
	TotalTokens int64 `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// PromptTokens is the amount of estimated tokens used by the prompt
	PromptTokens int64 `protobuf:"varint,4,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// CompletionTokens is the amount of tokens that the completion response consists of
	CompletionTokens int64 `protobuf:"varint,5,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
}

func (x *AssistCompletionEvent) Reset() {
	*x = AssistCompletionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistCompletionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistCompletionEvent) ProtoMessage() {}

func (x *AssistCompletionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistCompletionEvent.ProtoReflect.Descriptor instead.
func (*AssistCompletionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{54}
}

func (x *AssistCompletionEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AssistCompletionEvent) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *AssistCompletionEvent) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *AssistCompletionEvent) GetPromptTokens() int64 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *AssistCompletionEvent) GetCompletionTokens() int64 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

// AssistExecutionEvent is an event that is emitted when an Assist command
// execution is triggered by the user.
type AssistExecutionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserName is anonymized user name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// ConversationId is the UUID that identifies a single Assist conversation
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// NodeCount is the number of nodes the command was executed on
	NodeCount int64 `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// TotalTokens is the total amount of token used to generate the command summary
	TotalTokens int64 `protobuf:"varint,4,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
	PromptTokens int64 `protobuf:"varint,5,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// CompletionTokens is the amount of tokens that the summary completion response consists of
	CompletionTokens int64 `protobuf:"varint,6,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
}

func (x *AssistExecutionEvent) Reset() {
	*x = AssistExecutionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistExecutionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistExecutionEvent) ProtoMessage() {}

func (x *AssistExecutionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistExecutionEvent.ProtoReflect.Descriptor instead.
func (*AssistExecutionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{55}
}

func (x *AssistExecutionEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AssistExecutionEvent) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *AssistExecutionEvent) GetNodeCount() int64 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *AssistExecutionEvent) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *AssistExecutionEvent) GetPromptTokens() int64 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *AssistExecutionEvent) GetCompletionTokens() int64 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

// AssistNewConversationEvent is an event that is emitted for each new Assist
// conversation and contains the conversation category.
type AssistNewConversationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserName is anonymized user name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Category is the conversation category. This represents what kind of request
	// the user is asking Assist.
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *AssistNewConversationEvent) Reset() {
	*x = AssistNewConversationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistNewConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistNewConversationEvent) ProtoMessage() {}

func (x *AssistNewConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistNewConversationEvent.ProtoReflect.Descriptor instead.
func (*AssistNewConversationEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{56}
}

func (x *AssistNewConversationEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AssistNewConversationEvent) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// AssistAccessRequest is an event that is emitted when a user requests access
// to a resource via Assist.
type AssistAccessRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserName is anonymized user name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// ResourceType describes the type of resource the user is requesting access to, e.g. "node", "db", "k8s" or "role".
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// TotalTokens is the total amount of token used to generate the command summary
	TotalTokens int64 `protobuf:"varint,4,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
	PromptTokens int64 `protobuf:"varint,5,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// CompletionTokens is the amount of tokens that the summary completion response consists of
	CompletionTokens int64 `protobuf:"varint,6,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
}

func (x *AssistAccessRequestEvent) Reset() {
	*x = AssistAccessRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistAccessRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistAccessRequestEvent) ProtoMessage() {}

func (x *AssistAccessRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistAccessRequestEvent.ProtoReflect.Descriptor instead.
func (*AssistAccessRequestEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{57}
}

func (x *AssistAccessRequestEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AssistAccessRequestEvent) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AssistAccessRequestEvent) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *AssistAccessRequestEvent) GetPromptTokens() int64 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *AssistAccessRequestEvent) GetCompletionTokens() int64 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

// AssistAction is an event that is emitted when a user triggers an action (SSH command generation, output explain, etc.)
// via Assist.
type AssistActionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserName is anonymized user name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Action is the action that was triggered, e.g. "ssh-explain", "ssh-command-generate", etc.
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// TotalTokens is the total amount of token used to generate the command summary
	TotalTokens int64 `protobuf:"varint,4,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
	PromptTokens int64 `protobuf:"varint,5,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// CompletionTokens is the amount of tokens that the summary completion response consists of
	CompletionTokens int64 `protobuf:"varint,6,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
}

func (x *AssistActionEvent) Reset() {
	*x = AssistActionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistActionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistActionEvent) ProtoMessage() {}

func (x *AssistActionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistActionEvent.ProtoReflect.Descriptor instead.
func (*AssistActionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{58}
}

func (x *AssistActionEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AssistActionEvent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AssistActionEvent) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *AssistActionEvent) GetPromptTokens() int64 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *AssistActionEvent) GetCompletionTokens() int64 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

// AccessListMetadata contains common metadata for Access List related events.
type AccessListMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id uniquely identifies an Access List. Will allow correlation of events within an access list.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AccessListMetadata) Reset() {
	*x = AccessListMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListMetadata) ProtoMessage() {}

func (x *AccessListMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListMetadata.ProtoReflect.Descriptor instead.
func (*AccessListMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{59}
}

func (x *AccessListMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AccessListCreate is an event that is emitted when an access list is created.
type AccessListCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is the anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AccessListCreateEvent) Reset() {
	*x = AccessListCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListCreateEvent) ProtoMessage() {}

func (x *AccessListCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListCreateEvent.ProtoReflect.Descriptor instead.
func (*AccessListCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{60}
}

func (x *AccessListCreateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListCreateEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AccessListUpdate is an event that is emitted when an access list is updated.
type AccessListUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is the anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AccessListUpdateEvent) Reset() {
	*x = AccessListUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListUpdateEvent) ProtoMessage() {}

func (x *AccessListUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListUpdateEvent.ProtoReflect.Descriptor instead.
func (*AccessListUpdateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{61}
}

func (x *AccessListUpdateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListUpdateEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AccessListDelete is an event that is emitted when an access list is deleted.
type AccessListDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is the anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AccessListDeleteEvent) Reset() {
	*x = AccessListDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListDeleteEvent) ProtoMessage() {}

func (x *AccessListDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListDeleteEvent.ProtoReflect.Descriptor instead.
func (*AccessListDeleteEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{62}
}

func (x *AccessListDeleteEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListDeleteEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AccessListMemberCreate is an event that is emitted when a member is added to an access list.
type AccessListMemberCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is the anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AccessListMemberCreateEvent) Reset() {
	*x = AccessListMemberCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListMemberCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListMemberCreateEvent) ProtoMessage() {}

func (x *AccessListMemberCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListMemberCreateEvent.ProtoReflect.Descriptor instead.
func (*AccessListMemberCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{63}
}

func (x *AccessListMemberCreateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListMemberCreateEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AccessListMemberUpdate is an event that is emitted when a member is updated in an access list.
type AccessListMemberUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is the anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AccessListMemberUpdateEvent) Reset() {
	*x = AccessListMemberUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListMemberUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListMemberUpdateEvent) ProtoMessage() {}

func (x *AccessListMemberUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListMemberUpdateEvent.ProtoReflect.Descriptor instead.
func (*AccessListMemberUpdateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{64}
}

func (x *AccessListMemberUpdateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListMemberUpdateEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AccessListMemberDelete is an event that is emitted when a member is removed from an access list.
type AccessListMemberDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AccessListMemberDeleteEvent) Reset() {
	*x = AccessListMemberDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListMemberDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListMemberDeleteEvent) ProtoMessage() {}

func (x *AccessListMemberDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListMemberDeleteEvent.ProtoReflect.Descriptor instead.
func (*AccessListMemberDeleteEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{65}
}

func (x *AccessListMemberDeleteEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListMemberDeleteEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AccessListGrantsToUser is an event that is emitted when access list permissions are granted to a user
// on login.
type AccessListGrantsToUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is the anonymized user name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// count_roles_granted is the number of roles granted to a user.
	CountRolesGranted int32 `protobuf:"varint,2,opt,name=count_roles_granted,json=countRolesGranted,proto3" json:"count_roles_granted,omitempty"`
	// count_traits_granted is the number of traits granted to a user.
	CountTraitsGranted int32 `protobuf:"varint,3,opt,name=count_traits_granted,json=countTraitsGranted,proto3" json:"count_traits_granted,omitempty"`
}

func (x *AccessListGrantsToUserEvent) Reset() {
	*x = AccessListGrantsToUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListGrantsToUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListGrantsToUserEvent) ProtoMessage() {}

func (x *AccessListGrantsToUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListGrantsToUserEvent.ProtoReflect.Descriptor instead.
func (*AccessListGrantsToUserEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{66}
}

func (x *AccessListGrantsToUserEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListGrantsToUserEvent) GetCountRolesGranted() int32 {
	if x != nil {
		return x.CountRolesGranted
	}
	return 0
}

func (x *AccessListGrantsToUserEvent) GetCountTraitsGranted() int32 {
	if x != nil {
		return x.CountTraitsGranted
	}
	return 0
}

// AccessListReviewCreateEvent is an event that is emitted when an access list review is created.
type AccessListReviewCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// days_past_next_audit_date is how many days past the next audit date the review came in. Can be negative.
	DaysPastNextAuditDate int32 `protobuf:"varint,3,opt,name=days_past_next_audit_date,json=daysPastNextAuditDate,proto3" json:"days_past_next_audit_date,omitempty"`
	// membership_requirements_changed indicates that the membership requirements were changed.
	MembershipRequirementsChanged bool `protobuf:"varint,4,opt,name=membership_requirements_changed,json=membershipRequirementsChanged,proto3" json:"membership_requirements_changed,omitempty"`
	// review_frequency_changed indicates that the review frequency was changed.
	ReviewFrequencyChanged bool `protobuf:"varint,5,opt,name=review_frequency_changed,json=reviewFrequencyChanged,proto3" json:"review_frequency_changed,omitempty"`
	// review_day_of_month_changed indicates that the review day of month was changed.
	ReviewDayOfMonthChanged bool `protobuf:"varint,6,opt,name=review_day_of_month_changed,json=reviewDayOfMonthChanged,proto3" json:"review_day_of_month_changed,omitempty"`
	// number_of_removed_members is how many members were removed as part of this review.
	NumberOfRemovedMembers int32 `protobuf:"varint,7,opt,name=number_of_removed_members,json=numberOfRemovedMembers,proto3" json:"number_of_removed_members,omitempty"`
}

func (x *AccessListReviewCreateEvent) Reset() {
	*x = AccessListReviewCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListReviewCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListReviewCreateEvent) ProtoMessage() {}

func (x *AccessListReviewCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListReviewCreateEvent.ProtoReflect.Descriptor instead.
func (*AccessListReviewCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{67}
}

func (x *AccessListReviewCreateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListReviewCreateEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AccessListReviewCreateEvent) GetDaysPastNextAuditDate() int32 {
	if x != nil {
		return x.DaysPastNextAuditDate
	}
	return 0
}

func (x *AccessListReviewCreateEvent) GetMembershipRequirementsChanged() bool {
	if x != nil {
		return x.MembershipRequirementsChanged
	}
	return false
}

func (x *AccessListReviewCreateEvent) GetReviewFrequencyChanged() bool {
	if x != nil {
		return x.ReviewFrequencyChanged
	}
	return false
}

func (x *AccessListReviewCreateEvent) GetReviewDayOfMonthChanged() bool {
	if x != nil {
		return x.ReviewDayOfMonthChanged
	}
	return false
}

func (x *AccessListReviewCreateEvent) GetNumberOfRemovedMembers() int32 {
	if x != nil {
		return x.NumberOfRemovedMembers
	}
	return 0
}

// AccessListReviewDeleteEvent is an event that is emitted when an access list review is deleted.
type AccessListReviewDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_name is anonymized user name
	UserName string              `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Metadata *AccessListMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// access_list_review_id is the unique identifier for the access list review.
	AccessListReviewId string `protobuf:"bytes,3,opt,name=access_list_review_id,json=accessListReviewId,proto3" json:"access_list_review_id,omitempty"`
}

func (x *AccessListReviewDeleteEvent) Reset() {
	*x = AccessListReviewDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListReviewDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListReviewDeleteEvent) ProtoMessage() {}

func (x *AccessListReviewDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListReviewDeleteEvent.ProtoReflect.Descriptor instead.
func (*AccessListReviewDeleteEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{68}
}

func (x *AccessListReviewDeleteEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccessListReviewDeleteEvent) GetMetadata() *AccessListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AccessListReviewDeleteEvent) GetAccessListReviewId() string {
	if x != nil {
		return x.AccessListReviewId
	}
	return ""
}

// AccessListReviewComplianceEvent is an event that is emitted periodically to indicate how many access
// lists are past due for a review.
type AccessListReviewComplianceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total_access_lists is the total number of access lists known to Teleport.
	TotalAccessLists int32 `protobuf:"varint,1,opt,name=total_access_lists,json=totalAccessLists,proto3" json:"total_access_lists,omitempty"`
	// access_lists_need_review is the number of access lists that need a review.
	AccessListsNeedReview int32 `protobuf:"varint,2,opt,name=access_lists_need_review,json=accessListsNeedReview,proto3" json:"access_lists_need_review,omitempty"`
}

func (x *AccessListReviewComplianceEvent) Reset() {
	*x = AccessListReviewComplianceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListReviewComplianceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListReviewComplianceEvent) ProtoMessage() {}

func (x *AccessListReviewComplianceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListReviewComplianceEvent.ProtoReflect.Descriptor instead.
func (*AccessListReviewComplianceEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{69}
}

func (x *AccessListReviewComplianceEvent) GetTotalAccessLists() int32 {
	if x != nil {
		return x.TotalAccessLists
	}
	return 0
}

func (x *AccessListReviewComplianceEvent) GetAccessListsNeedReview() int32 {
	if x != nil {
		return x.AccessListsNeedReview
	}
	return 0
}

// IntegrationEnrollMetadata contains common metadata
// for Integration Enroll related events.
type IntegrationEnrollMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is used as a unique identifier to correlate events within the
	// same enroll wizard run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// kind identifies what type of integration the user clicked on to enroll.
	Kind IntegrationEnrollKind `protobuf:"varint,2,opt,name=kind,proto3,enum=prehog.v1alpha.IntegrationEnrollKind" json:"kind,omitempty"`
	// user_name is anonymized.
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *IntegrationEnrollMetadata) Reset() {
	*x = IntegrationEnrollMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationEnrollMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationEnrollMetadata) ProtoMessage() {}

func (x *IntegrationEnrollMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationEnrollMetadata.ProtoReflect.Descriptor instead.
func (*IntegrationEnrollMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{70}
}

func (x *IntegrationEnrollMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IntegrationEnrollMetadata) GetKind() IntegrationEnrollKind {
	if x != nil {
		return x.Kind
	}
	return IntegrationEnrollKind_INTEGRATION_ENROLL_KIND_UNSPECIFIED
}

func (x *IntegrationEnrollMetadata) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// UIIntegrationEnrollEvent is an event that is emitted when a user
// clicks on a integration to enroll.
type UIIntegrationEnrollStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *IntegrationEnrollMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UIIntegrationEnrollStartEvent) Reset() {
	*x = UIIntegrationEnrollStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIIntegrationEnrollStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIIntegrationEnrollStartEvent) ProtoMessage() {}

func (x *UIIntegrationEnrollStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIIntegrationEnrollStartEvent.ProtoReflect.Descriptor instead.
func (*UIIntegrationEnrollStartEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{71}
}

func (x *UIIntegrationEnrollStartEvent) GetMetadata() *IntegrationEnrollMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// UIIntegrationEnrollEvent is an event that is emitted when a user
// completed enrolling an integration.
type UIIntegrationEnrollCompleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *IntegrationEnrollMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UIIntegrationEnrollCompleteEvent) Reset() {
	*x = UIIntegrationEnrollCompleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIIntegrationEnrollCompleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIIntegrationEnrollCompleteEvent) ProtoMessage() {}

func (x *UIIntegrationEnrollCompleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIIntegrationEnrollCompleteEvent.ProtoReflect.Descriptor instead.
func (*UIIntegrationEnrollCompleteEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{72}
}

func (x *UIIntegrationEnrollCompleteEvent) GetMetadata() *IntegrationEnrollMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// EditorChangeEvent is an event that is emitted when a user role set changes resulting in
// a editor role being added on removed
type EditorChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized user name
	UserName string             `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Status   EditorChangeStatus `protobuf:"varint,2,opt,name=status,proto3,enum=prehog.v1alpha.EditorChangeStatus" json:"status,omitempty"`
}

func (x *EditorChangeEvent) Reset() {
	*x = EditorChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorChangeEvent) ProtoMessage() {}

func (x *EditorChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorChangeEvent.ProtoReflect.Descriptor instead.
func (*EditorChangeEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{73}
}

func (x *EditorChangeEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *EditorChangeEvent) GetStatus() EditorChangeStatus {
	if x != nil {
		return x.Status
	}
	return EditorChangeStatus_EDITOR_CHANGE_STATUS_UNSPECIFIED
}

// Device authentication event
type DeviceAuthenticateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.device_id
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// device OS type
	//
	// PostHog property: tp.device_os_type
	DeviceOsType string `protobuf:"bytes,3,opt,name=device_os_type,json=deviceOsType,proto3" json:"device_os_type,omitempty"`
}

func (x *DeviceAuthenticateEvent) Reset() {
	*x = DeviceAuthenticateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAuthenticateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAuthenticateEvent) ProtoMessage() {}

func (x *DeviceAuthenticateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAuthenticateEvent.ProtoReflect.Descriptor instead.
func (*DeviceAuthenticateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{74}
}

func (x *DeviceAuthenticateEvent) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceAuthenticateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DeviceAuthenticateEvent) GetDeviceOsType() string {
	if x != nil {
		return x.DeviceOsType
	}
	return ""
}

// Device Enrollment event
//
// PostHost event: tp.device.enroll
type DeviceEnrollEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.device_id
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// device OS type
	//
	// PostHog property: tp.device_os_type
	DeviceOsType string `protobuf:"bytes,3,opt,name=device_os_type,json=deviceOsType,proto3" json:"device_os_type,omitempty"`
	// device origin
	//
	// PostHog property: tp.device_origin
	DeviceOrigin string `protobuf:"bytes,4,opt,name=device_origin,json=deviceOrigin,proto3" json:"device_origin,omitempty"`
}

func (x *DeviceEnrollEvent) Reset() {
	*x = DeviceEnrollEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEnrollEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEnrollEvent) ProtoMessage() {}

func (x *DeviceEnrollEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEnrollEvent.ProtoReflect.Descriptor instead.
func (*DeviceEnrollEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{75}
}

func (x *DeviceEnrollEvent) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceEnrollEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DeviceEnrollEvent) GetDeviceOsType() string {
	if x != nil {
		return x.DeviceOsType
	}
	return ""
}

func (x *DeviceEnrollEvent) GetDeviceOrigin() string {
	if x != nil {
		return x.DeviceOrigin
	}
	return ""
}

// FeatureRecommendationEvent captures event emitted when a feature is recommended to user or
// when user completes the desired CTA for the feature.
//
// PostHost event: tp.ui.feature.recommendation
type FeatureRecommendationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// feature is name of the Teleport feature.
	//
	// PostHog property: tp.feature
	Feature Feature `protobuf:"varint,2,opt,name=feature,proto3,enum=prehog.v1alpha.Feature" json:"feature,omitempty"`
	// feature_recommendation_status records recommendation state, which can be 'NOTIFIED' (feature is recommended)
	// OR 'DONE' (user completes desired CTA)
	//
	// PostHost property: tp.feature_recommendation_status
	FeatureRecommendationStatus FeatureRecommendationStatus `protobuf:"varint,3,opt,name=feature_recommendation_status,json=featureRecommendationStatus,proto3,enum=prehog.v1alpha.FeatureRecommendationStatus" json:"feature_recommendation_status,omitempty"`
}

func (x *FeatureRecommendationEvent) Reset() {
	*x = FeatureRecommendationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureRecommendationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureRecommendationEvent) ProtoMessage() {}

func (x *FeatureRecommendationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureRecommendationEvent.ProtoReflect.Descriptor instead.
func (*FeatureRecommendationEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{76}
}

func (x *FeatureRecommendationEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *FeatureRecommendationEvent) GetFeature() Feature {
	if x != nil {
		return x.Feature
	}
	return Feature_FEATURE_UNSPECIFIED
}

func (x *FeatureRecommendationEvent) GetFeatureRecommendationStatus() FeatureRecommendationStatus {
	if x != nil {
		return x.FeatureRecommendationStatus
	}
	return FeatureRecommendationStatus_FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED
}

// LicenseLimitEvent is emitted when access to Teleport feature
// is denied based on license limits
//
// PostHost event: tp.license.limit
type LicenseLimitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PostHost property: tp.license_limit
	LicenseLimit LicenseLimit `protobuf:"varint,1,opt,name=license_limit,json=licenseLimit,proto3,enum=prehog.v1alpha.LicenseLimit" json:"license_limit,omitempty"`
}

func (x *LicenseLimitEvent) Reset() {
	*x = LicenseLimitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseLimitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseLimitEvent) ProtoMessage() {}

func (x *LicenseLimitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseLimitEvent.ProtoReflect.Descriptor instead.
func (*LicenseLimitEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{77}
}

func (x *LicenseLimitEvent) GetLicenseLimit() LicenseLimit {
	if x != nil {
		return x.LicenseLimit
	}
	return LicenseLimit_LICENSE_LIMIT_UNSPECIFIED
}

// DesktopDirectoryShareEvent is emitted when directory sharing is used
// in a Teleport desktop session.
type DesktopDirectoryShareEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized desktop addr, used to uniquely idenfity the desktop
	//
	// PostHog property: tp.desktop
	Desktop string `protobuf:"bytes,1,opt,name=desktop,proto3" json:"desktop,omitempty"`
	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// anonymized directory name
	//
	// PostHog property: tp.directory_name
	DirectoryName string `protobuf:"bytes,3,opt,name=directory_name,json=directoryName,proto3" json:"directory_name,omitempty"`
}

func (x *DesktopDirectoryShareEvent) Reset() {
	*x = DesktopDirectoryShareEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesktopDirectoryShareEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesktopDirectoryShareEvent) ProtoMessage() {}

func (x *DesktopDirectoryShareEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesktopDirectoryShareEvent.ProtoReflect.Descriptor instead.
func (*DesktopDirectoryShareEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{78}
}

func (x *DesktopDirectoryShareEvent) GetDesktop() string {
	if x != nil {
		return x.Desktop
	}
	return ""
}

func (x *DesktopDirectoryShareEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DesktopDirectoryShareEvent) GetDirectoryName() string {
	if x != nil {
		return x.DirectoryName
	}
	return ""
}

// DesktopClipboardEvent is emitted when data is transferred between a user's
// local clipboard and a remote Windows clipboard.
type DesktopClipboardEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized desktop addr, used to uniquely idenfity the desktop
	//
	// PostHog property: tp.desktop
	Desktop string `protobuf:"bytes,1,opt,name=desktop,proto3" json:"desktop,omitempty"`
	// anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
	//
	// PostHog property: tp.user_name
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *DesktopClipboardEvent) Reset() {
	*x = DesktopClipboardEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesktopClipboardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesktopClipboardEvent) ProtoMessage() {}

func (x *DesktopClipboardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesktopClipboardEvent.ProtoReflect.Descriptor instead.
func (*DesktopClipboardEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{79}
}

func (x *DesktopClipboardEvent) GetDesktop() string {
	if x != nil {
		return x.Desktop
	}
	return ""
}

func (x *DesktopClipboardEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// TAGExecuteQueryEvent is an event that is emitted
// when a single query is executed in the Teleport Access Graph.
// This event is emitted for both successful and failed queries. For
// successful queries, the total number of nodes and edges is reported.
type TAGExecuteQueryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// total_nodes is the total amount of nodes returned by the query.
	TotalNodes int64 `protobuf:"varint,2,opt,name=total_nodes,json=totalNodes,proto3" json:"total_nodes,omitempty"`
	// total_edges is the total amount of edges returned by the query.
	TotalEdges int64 `protobuf:"varint,3,opt,name=total_edges,json=totalEdges,proto3" json:"total_edges,omitempty"`
	// is_success is true if the query was successful and false it if failed.
	IsSuccess bool `protobuf:"varint,4,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *TAGExecuteQueryEvent) Reset() {
	*x = TAGExecuteQueryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAGExecuteQueryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAGExecuteQueryEvent) ProtoMessage() {}

func (x *TAGExecuteQueryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAGExecuteQueryEvent.ProtoReflect.Descriptor instead.
func (*TAGExecuteQueryEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{80}
}

func (x *TAGExecuteQueryEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TAGExecuteQueryEvent) GetTotalNodes() int64 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

func (x *TAGExecuteQueryEvent) GetTotalEdges() int64 {
	if x != nil {
		return x.TotalEdges
	}
	return 0
}

func (x *TAGExecuteQueryEvent) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

// ExternalAuditStorageAuthenticateEvent is emitted when the External Audit
// Storage feature authenticates to the customer AWS account via OIDC connector.
// The purpose is to have a regularly emitted event indicating that the External
// Audit Storage feature is still in use.
type ExternalAuditStorageAuthenticateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExternalAuditStorageAuthenticateEvent) Reset() {
	*x = ExternalAuditStorageAuthenticateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAuditStorageAuthenticateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAuditStorageAuthenticateEvent) ProtoMessage() {}

func (x *ExternalAuditStorageAuthenticateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAuditStorageAuthenticateEvent.ProtoReflect.Descriptor instead.
func (*ExternalAuditStorageAuthenticateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{81}
}

// SecurityReportGetResultEvent is emitted when the user requests a security report.
type SecurityReportGetResultEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// name is the name of the security report.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// days is the time range of the security reports in days.
	Days int32 `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *SecurityReportGetResultEvent) Reset() {
	*x = SecurityReportGetResultEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityReportGetResultEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityReportGetResultEvent) ProtoMessage() {}

func (x *SecurityReportGetResultEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityReportGetResultEvent.ProtoReflect.Descriptor instead.
func (*SecurityReportGetResultEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{82}
}

func (x *SecurityReportGetResultEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SecurityReportGetResultEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityReportGetResultEvent) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

// AuditQueryRunEvent is emitted when the user runs an audit query.
type AuditQueryRunEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// days is the time range of the query in days.
	Days int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
	// is_success is true if the query was successful false if execution failed.
	IsSuccess bool `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *AuditQueryRunEvent) Reset() {
	*x = AuditQueryRunEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditQueryRunEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditQueryRunEvent) ProtoMessage() {}

func (x *AuditQueryRunEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditQueryRunEvent.ProtoReflect.Descriptor instead.
func (*AuditQueryRunEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{83}
}

func (x *AuditQueryRunEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AuditQueryRunEvent) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *AuditQueryRunEvent) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

// DiscoveryFetchEvent is emitted when a DiscoveryService polls for new resources of a given type
type DiscoveryFetchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloud_provider is the cloud provider used to fetch resources
	// Eg, AWS, Azure, GCP, Kubernetes
	//
	// PostHog property: tp.cloud
	CloudProvider string `protobuf:"bytes,1,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	// resource_type is the type of resource that this fetch is polling.
	// It depends on the Cloud Provider (defined above).
	// Eg, rds, ec2, vm, aks, gce, app
	//
	// PostHog property: tp.resource_type
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
}

func (x *DiscoveryFetchEvent) Reset() {
	*x = DiscoveryFetchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryFetchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryFetchEvent) ProtoMessage() {}

func (x *DiscoveryFetchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryFetchEvent.ProtoReflect.Descriptor instead.
func (*DiscoveryFetchEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{84}
}

func (x *DiscoveryFetchEvent) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *DiscoveryFetchEvent) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// OktaAccessListSyncEvent is an event that is emitted after the Okta service synchronizes
// access lists from Okta.
type OktaAccessListSyncEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NumAppFilters is the number of application filters used for this sync.
	NumAppFilters int32 `protobuf:"varint,1,opt,name=num_app_filters,json=numAppFilters,proto3" json:"num_app_filters,omitempty"`
	// NumGroupFilters is the number of group filters used for this sync.
	NumGroupFilters int32 `protobuf:"varint,2,opt,name=num_group_filters,json=numGroupFilters,proto3" json:"num_group_filters,omitempty"`
	// NumApps is the number of apps that were synchronized from this sync event.
	NumApps int32 `protobuf:"varint,3,opt,name=num_apps,json=numApps,proto3" json:"num_apps,omitempty"`
	// NumGroups is the number of groups that were synchronized from this sync event.
	NumGroups int32 `protobuf:"varint,4,opt,name=num_groups,json=numGroups,proto3" json:"num_groups,omitempty"`
	// NumRoles are the number of roles that were created/updated.
	NumRoles int32 `protobuf:"varint,5,opt,name=num_roles,json=numRoles,proto3" json:"num_roles,omitempty"`
	// NumAccessLists are the number of access lists that were created/updated.
	NumAccessLists int32 `protobuf:"varint,6,opt,name=num_access_lists,json=numAccessLists,proto3" json:"num_access_lists,omitempty"`
	// NumAccessListMembers are the number of access list members that were created/updated.
	NumAccessListMembers int32 `protobuf:"varint,7,opt,name=num_access_list_members,json=numAccessListMembers,proto3" json:"num_access_list_members,omitempty"`
}

func (x *OktaAccessListSyncEvent) Reset() {
	*x = OktaAccessListSyncEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OktaAccessListSyncEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaAccessListSyncEvent) ProtoMessage() {}

func (x *OktaAccessListSyncEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaAccessListSyncEvent.ProtoReflect.Descriptor instead.
func (*OktaAccessListSyncEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{85}
}

func (x *OktaAccessListSyncEvent) GetNumAppFilters() int32 {
	if x != nil {
		return x.NumAppFilters
	}
	return 0
}

func (x *OktaAccessListSyncEvent) GetNumGroupFilters() int32 {
	if x != nil {
		return x.NumGroupFilters
	}
	return 0
}

func (x *OktaAccessListSyncEvent) GetNumApps() int32 {
	if x != nil {
		return x.NumApps
	}
	return 0
}

func (x *OktaAccessListSyncEvent) GetNumGroups() int32 {
	if x != nil {
		return x.NumGroups
	}
	return 0
}

func (x *OktaAccessListSyncEvent) GetNumRoles() int32 {
	if x != nil {
		return x.NumRoles
	}
	return 0
}

func (x *OktaAccessListSyncEvent) GetNumAccessLists() int32 {
	if x != nil {
		return x.NumAccessLists
	}
	return 0
}

func (x *OktaAccessListSyncEvent) GetNumAccessListMembers() int32 {
	if x != nil {
		return x.NumAccessListMembers
	}
	return 0
}

// DatabaseUserCreatedEvent is an event that is emitted after database service performs automatic user provisioning.
type DatabaseUserCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database metadata.
	Database *SessionStartDatabaseMetadata `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Teleport user name. Anonymized.
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Number of database roles.
	NumRoles int32 `protobuf:"varint,3,opt,name=num_roles,json=numRoles,proto3" json:"num_roles,omitempty"`
}

func (x *DatabaseUserCreatedEvent) Reset() {
	*x = DatabaseUserCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseUserCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseUserCreatedEvent) ProtoMessage() {}

func (x *DatabaseUserCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseUserCreatedEvent.ProtoReflect.Descriptor instead.
func (*DatabaseUserCreatedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{86}
}

func (x *DatabaseUserCreatedEvent) GetDatabase() *SessionStartDatabaseMetadata {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *DatabaseUserCreatedEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DatabaseUserCreatedEvent) GetNumRoles() int32 {
	if x != nil {
		return x.NumRoles
	}
	return 0
}

// DatabaseUserPermissionsUpdateEvent is an event that is emitted after database service updates the permissions for the database user.
type DatabaseUserPermissionsUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database metadata.
	Database *SessionStartDatabaseMetadata `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Teleport user name. Anonymized.
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// How many tables were affected.
	NumTables int32 `protobuf:"varint,3,opt,name=num_tables,json=numTables,proto3" json:"num_tables,omitempty"`
	// How many total table permissions were given to the user.
	// For example {SELECT,UPDATE} on ten tables gives a total of twenty.
	NumTablesPermissions int32 `protobuf:"varint,4,opt,name=num_tables_permissions,json=numTablesPermissions,proto3" json:"num_tables_permissions,omitempty"`
}

func (x *DatabaseUserPermissionsUpdateEvent) Reset() {
	*x = DatabaseUserPermissionsUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseUserPermissionsUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseUserPermissionsUpdateEvent) ProtoMessage() {}

func (x *DatabaseUserPermissionsUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseUserPermissionsUpdateEvent.ProtoReflect.Descriptor instead.
func (*DatabaseUserPermissionsUpdateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{87}
}

func (x *DatabaseUserPermissionsUpdateEvent) GetDatabase() *SessionStartDatabaseMetadata {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *DatabaseUserPermissionsUpdateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DatabaseUserPermissionsUpdateEvent) GetNumTables() int32 {
	if x != nil {
		return x.NumTables
	}
	return 0
}

func (x *DatabaseUserPermissionsUpdateEvent) GetNumTablesPermissions() int32 {
	if x != nil {
		return x.NumTablesPermissions
	}
	return 0
}

type SubmitEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized, 32 bytes (HMAC-SHA-256) encoded in base64
	//
	// PostHog property: tp.cluster_name (still in base64)
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// optional, will default to the ingest time if unset
	//
	// PostHog timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the event being submitted
	//
	// Types that are assignable to Event:
	//
	//	*SubmitEventRequest_UserLogin
	//	*SubmitEventRequest_SsoCreate
	//	*SubmitEventRequest_ResourceCreate
	//	*SubmitEventRequest_SessionStart
	//	*SubmitEventRequest_UiBannerClick
	//	*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick
	//	*SubmitEventRequest_UiOnboardAddFirstResourceClick
	//	*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick
	//	*SubmitEventRequest_UiOnboardSetCredentialSubmit
	//	*SubmitEventRequest_UiOnboardRegisterChallengeSubmit
	//	*SubmitEventRequest_UiRecoveryCodesContinueClick
	//	*SubmitEventRequest_UiRecoveryCodesCopyClick
	//	*SubmitEventRequest_UiRecoveryCodesPrintClick
	//	*SubmitEventRequest_UiDiscoverStartedEvent
	//	*SubmitEventRequest_UiDiscoverResourceSelectionEvent
	//	*SubmitEventRequest_UserCertificateIssuedEvent
	//	*SubmitEventRequest_SessionStartV2
	//	*SubmitEventRequest_UiDiscoverDeployServiceEvent
	//	*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent
	//	*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent
	//	*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent
	//	*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent
	//	*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent
	//	*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent
	//	*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent
	//	*SubmitEventRequest_UiDiscoverTestConnectionEvent
	//	*SubmitEventRequest_UiDiscoverCompletedEvent
	//	*SubmitEventRequest_RoleCreate
	//	*SubmitEventRequest_UiCreateNewRoleClick
	//	*SubmitEventRequest_UiCreateNewRoleSaveClick
	//	*SubmitEventRequest_UiCreateNewRoleCancelClick
	//	*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick
	//	*SubmitEventRequest_KubeRequest
	//	*SubmitEventRequest_Sftp
	//	*SubmitEventRequest_AgentMetadataEvent
	//	*SubmitEventRequest_ResourceHeartbeat
	//	*SubmitEventRequest_UiDiscoverIntegrationAwsOidcConnectEvent
	//	*SubmitEventRequest_UiDiscoverDatabaseRdsEnrollEvent
	//	*SubmitEventRequest_UiCallToActionClickEvent
	//	*SubmitEventRequest_AssistCompletion
	//	*SubmitEventRequest_UiIntegrationEnrollStartEvent
	//	*SubmitEventRequest_UiIntegrationEnrollCompleteEvent
	//	*SubmitEventRequest_EditorChangeEvent
	//	*SubmitEventRequest_BotCreate
	//	*SubmitEventRequest_UiOnboardQuestionnaireSubmit
	//	*SubmitEventRequest_BotJoin
	//	*SubmitEventRequest_AssistExecution
	//	*SubmitEventRequest_AssistNewConversation
	//	*SubmitEventRequest_DeviceAuthenticateEvent
	//	*SubmitEventRequest_FeatureRecommendationEvent
	//	*SubmitEventRequest_AssistAccessRequest
	//	*SubmitEventRequest_AssistAction
	//	*SubmitEventRequest_DeviceEnrollEvent
	//	*SubmitEventRequest_LicenseLimitEvent
	//	*SubmitEventRequest_AccessListCreate
	//	*SubmitEventRequest_AccessListUpdate
	//	*SubmitEventRequest_AccessListDelete
	//	*SubmitEventRequest_AccessListMemberCreate
	//	*SubmitEventRequest_AccessListMemberUpdate
	//	*SubmitEventRequest_AccessListMemberDelete
	//	*SubmitEventRequest_AccessListGrantsToUser
	//	*SubmitEventRequest_UiDiscoverEc2InstanceSelection
	//	*SubmitEventRequest_UiDiscoverDeployEice
	//	*SubmitEventRequest_UiDiscoverCreateNode
	//	*SubmitEventRequest_DesktopDirectoryShare
	//	*SubmitEventRequest_DesktopClipboardTransfer
	//	*SubmitEventRequest_TagExecuteQuery
	//	*SubmitEventRequest_ExternalAuditStorageAuthenticate
	//	*SubmitEventRequest_SecurityReportGetResult
	//	*SubmitEventRequest_AuditQueryRun
	//	*SubmitEventRequest_DiscoveryFetchEvent
	//	*SubmitEventRequest_AccessListReviewCreate
	//	*SubmitEventRequest_AccessListReviewDelete
	//	*SubmitEventRequest_AccessListReviewCompliance
	//	*SubmitEventRequest_MfaAuthenticationEvent
	//	*SubmitEventRequest_SpiffeSvidIssued
	//	*SubmitEventRequest_OktaAccessListSync
	//	*SubmitEventRequest_DatabaseUserCreated
	//	*SubmitEventRequest_DatabaseUserPermissionsUpdated
	//	*SubmitEventRequest_UiDiscoverCreateDiscoveryConfig
	//	*SubmitEventRequest_UiDiscoverKubeEksEnrollEvent
	Event isSubmitEventRequest_Event `protobuf_oneof:"event"`
}

func (x *SubmitEventRequest) Reset() {
	*x = SubmitEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventRequest) ProtoMessage() {}

func (x *SubmitEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventRequest.ProtoReflect.Descriptor instead.
func (*SubmitEventRequest) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{88}
}

func (x *SubmitEventRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SubmitEventRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *SubmitEventRequest) GetEvent() isSubmitEventRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SubmitEventRequest) GetUserLogin() *UserLoginEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UserLogin); ok {
		return x.UserLogin
	}
	return nil
}

func (x *SubmitEventRequest) GetSsoCreate() *SSOCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SsoCreate); ok {
		return x.SsoCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetResourceCreate() *ResourceCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_ResourceCreate); ok {
		return x.ResourceCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetSessionStart() *SessionStartEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SessionStart); ok {
		return x.SessionStart
	}
	return nil
}

func (x *SubmitEventRequest) GetUiBannerClick() *UIBannerClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiBannerClick); ok {
		return x.UiBannerClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardCompleteGoToDashboardClick() *UIOnboardCompleteGoToDashboardClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick); ok {
		return x.UiOnboardCompleteGoToDashboardClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardAddFirstResourceClick() *UIOnboardAddFirstResourceClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardAddFirstResourceClick); ok {
		return x.UiOnboardAddFirstResourceClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardAddFirstResourceLaterClick() *UIOnboardAddFirstResourceLaterClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick); ok {
		return x.UiOnboardAddFirstResourceLaterClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardSetCredentialSubmit() *UIOnboardSetCredentialSubmitEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardSetCredentialSubmit); ok {
		return x.UiOnboardSetCredentialSubmit
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardRegisterChallengeSubmit() *UIOnboardRegisterChallengeSubmitEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardRegisterChallengeSubmit); ok {
		return x.UiOnboardRegisterChallengeSubmit
	}
	return nil
}

func (x *SubmitEventRequest) GetUiRecoveryCodesContinueClick() *UIRecoveryCodesContinueClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiRecoveryCodesContinueClick); ok {
		return x.UiRecoveryCodesContinueClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiRecoveryCodesCopyClick() *UIRecoveryCodesCopyClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiRecoveryCodesCopyClick); ok {
		return x.UiRecoveryCodesCopyClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiRecoveryCodesPrintClick() *UIRecoveryCodesPrintClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiRecoveryCodesPrintClick); ok {
		return x.UiRecoveryCodesPrintClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverStartedEvent() *UIDiscoverStartedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverStartedEvent); ok {
		return x.UiDiscoverStartedEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverResourceSelectionEvent() *UIDiscoverResourceSelectionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverResourceSelectionEvent); ok {
		return x.UiDiscoverResourceSelectionEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUserCertificateIssuedEvent() *UserCertificateIssuedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UserCertificateIssuedEvent); ok {
		return x.UserCertificateIssuedEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetSessionStartV2() *SessionStartEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SessionStartV2); ok {
		return x.SessionStartV2
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDeployServiceEvent() *UIDiscoverDeployServiceEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDeployServiceEvent); ok {
		return x.UiDiscoverDeployServiceEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDatabaseRegisterEvent() *UIDiscoverDatabaseRegisterEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent); ok {
		return x.UiDiscoverDatabaseRegisterEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDatabaseConfigureMtlsEvent() *UIDiscoverDatabaseConfigureMTLSEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent); ok {
		return x.UiDiscoverDatabaseConfigureMtlsEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDesktopActiveDirectoryToolsInstallEvent() *UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent); ok {
		return x.UiDiscoverDesktopActiveDirectoryToolsInstallEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDesktopActiveDirectoryConfigureEvent() *UIDiscoverDesktopActiveDirectoryConfigureEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent); ok {
		return x.UiDiscoverDesktopActiveDirectoryConfigureEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverAutoDiscoveredResourcesEvent() *UIDiscoverAutoDiscoveredResourcesEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent); ok {
		return x.UiDiscoverAutoDiscoveredResourcesEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDatabaseConfigureIamPolicyEvent() *UIDiscoverDatabaseConfigureIAMPolicyEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent); ok {
		return x.UiDiscoverDatabaseConfigureIamPolicyEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverPrincipalsConfigureEvent() *UIDiscoverPrincipalsConfigureEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent); ok {
		return x.UiDiscoverPrincipalsConfigureEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverTestConnectionEvent() *UIDiscoverTestConnectionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverTestConnectionEvent); ok {
		return x.UiDiscoverTestConnectionEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverCompletedEvent() *UIDiscoverCompletedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverCompletedEvent); ok {
		return x.UiDiscoverCompletedEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetRoleCreate() *RoleCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_RoleCreate); ok {
		return x.RoleCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleClick() *UICreateNewRoleClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleClick); ok {
		return x.UiCreateNewRoleClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleSaveClick() *UICreateNewRoleSaveClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleSaveClick); ok {
		return x.UiCreateNewRoleSaveClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleCancelClick() *UICreateNewRoleCancelClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleCancelClick); ok {
		return x.UiCreateNewRoleCancelClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleViewDocumentationClick() *UICreateNewRoleViewDocumentationClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick); ok {
		return x.UiCreateNewRoleViewDocumentationClick
	}
	return nil
}

func (x *SubmitEventRequest) GetKubeRequest() *KubeRequestEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_KubeRequest); ok {
		return x.KubeRequest
	}
	return nil
}

func (x *SubmitEventRequest) GetSftp() *SFTPEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_Sftp); ok {
		return x.Sftp
	}
	return nil
}

func (x *SubmitEventRequest) GetAgentMetadataEvent() *AgentMetadataEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AgentMetadataEvent); ok {
		return x.AgentMetadataEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetResourceHeartbeat() *ResourceHeartbeatEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_ResourceHeartbeat); ok {
		return x.ResourceHeartbeat
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverIntegrationAwsOidcConnectEvent() *UIDiscoverIntegrationAWSOIDCConnectEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverIntegrationAwsOidcConnectEvent); ok {
		return x.UiDiscoverIntegrationAwsOidcConnectEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDatabaseRdsEnrollEvent() *UIDiscoverDatabaseRDSEnrollEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDatabaseRdsEnrollEvent); ok {
		return x.UiDiscoverDatabaseRdsEnrollEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCallToActionClickEvent() *UICallToActionClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCallToActionClickEvent); ok {
		return x.UiCallToActionClickEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetAssistCompletion() *AssistCompletionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AssistCompletion); ok {
		return x.AssistCompletion
	}
	return nil
}

func (x *SubmitEventRequest) GetUiIntegrationEnrollStartEvent() *UIIntegrationEnrollStartEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiIntegrationEnrollStartEvent); ok {
		return x.UiIntegrationEnrollStartEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiIntegrationEnrollCompleteEvent() *UIIntegrationEnrollCompleteEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiIntegrationEnrollCompleteEvent); ok {
		return x.UiIntegrationEnrollCompleteEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetEditorChangeEvent() *EditorChangeEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_EditorChangeEvent); ok {
		return x.EditorChangeEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetBotCreate() *BotCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_BotCreate); ok {
		return x.BotCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardQuestionnaireSubmit() *UIOnboardQuestionnaireSubmitEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardQuestionnaireSubmit); ok {
		return x.UiOnboardQuestionnaireSubmit
	}
	return nil
}

func (x *SubmitEventRequest) GetBotJoin() *BotJoinEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_BotJoin); ok {
		return x.BotJoin
	}
	return nil
}

func (x *SubmitEventRequest) GetAssistExecution() *AssistExecutionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AssistExecution); ok {
		return x.AssistExecution
	}
	return nil
}

func (x *SubmitEventRequest) GetAssistNewConversation() *AssistNewConversationEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AssistNewConversation); ok {
		return x.AssistNewConversation
	}
	return nil
}

func (x *SubmitEventRequest) GetDeviceAuthenticateEvent() *DeviceAuthenticateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_DeviceAuthenticateEvent); ok {
		return x.DeviceAuthenticateEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetFeatureRecommendationEvent() *FeatureRecommendationEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_FeatureRecommendationEvent); ok {
		return x.FeatureRecommendationEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetAssistAccessRequest() *AssistAccessRequestEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AssistAccessRequest); ok {
		return x.AssistAccessRequest
	}
	return nil
}

func (x *SubmitEventRequest) GetAssistAction() *AssistActionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AssistAction); ok {
		return x.AssistAction
	}
	return nil
}

func (x *SubmitEventRequest) GetDeviceEnrollEvent() *DeviceEnrollEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_DeviceEnrollEvent); ok {
		return x.DeviceEnrollEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetLicenseLimitEvent() *LicenseLimitEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_LicenseLimitEvent); ok {
		return x.LicenseLimitEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListCreate() *AccessListCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListCreate); ok {
		return x.AccessListCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListUpdate() *AccessListUpdateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListUpdate); ok {
		return x.AccessListUpdate
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListDelete() *AccessListDeleteEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListDelete); ok {
		return x.AccessListDelete
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListMemberCreate() *AccessListMemberCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListMemberCreate); ok {
		return x.AccessListMemberCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListMemberUpdate() *AccessListMemberUpdateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListMemberUpdate); ok {
		return x.AccessListMemberUpdate
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListMemberDelete() *AccessListMemberDeleteEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListMemberDelete); ok {
		return x.AccessListMemberDelete
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListGrantsToUser() *AccessListGrantsToUserEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListGrantsToUser); ok {
		return x.AccessListGrantsToUser
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverEc2InstanceSelection() *UIDiscoverEC2InstanceSelectionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverEc2InstanceSelection); ok {
		return x.UiDiscoverEc2InstanceSelection
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDeployEice() *UIDiscoverDeployEICEEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDeployEice); ok {
		return x.UiDiscoverDeployEice
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverCreateNode() *UIDiscoverCreateNodeEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverCreateNode); ok {
		return x.UiDiscoverCreateNode
	}
	return nil
}

func (x *SubmitEventRequest) GetDesktopDirectoryShare() *DesktopDirectoryShareEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_DesktopDirectoryShare); ok {
		return x.DesktopDirectoryShare
	}
	return nil
}

func (x *SubmitEventRequest) GetDesktopClipboardTransfer() *DesktopClipboardEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_DesktopClipboardTransfer); ok {
		return x.DesktopClipboardTransfer
	}
	return nil
}

func (x *SubmitEventRequest) GetTagExecuteQuery() *TAGExecuteQueryEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_TagExecuteQuery); ok {
		return x.TagExecuteQuery
	}
	return nil
}

func (x *SubmitEventRequest) GetExternalAuditStorageAuthenticate() *ExternalAuditStorageAuthenticateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_ExternalAuditStorageAuthenticate); ok {
		return x.ExternalAuditStorageAuthenticate
	}
	return nil
}

func (x *SubmitEventRequest) GetSecurityReportGetResult() *SecurityReportGetResultEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SecurityReportGetResult); ok {
		return x.SecurityReportGetResult
	}
	return nil
}

func (x *SubmitEventRequest) GetAuditQueryRun() *AuditQueryRunEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AuditQueryRun); ok {
		return x.AuditQueryRun
	}
	return nil
}

func (x *SubmitEventRequest) GetDiscoveryFetchEvent() *DiscoveryFetchEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_DiscoveryFetchEvent); ok {
		return x.DiscoveryFetchEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListReviewCreate() *AccessListReviewCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListReviewCreate); ok {
		return x.AccessListReviewCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListReviewDelete() *AccessListReviewDeleteEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListReviewDelete); ok {
		return x.AccessListReviewDelete
	}
	return nil
}

func (x *SubmitEventRequest) GetAccessListReviewCompliance() *AccessListReviewComplianceEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AccessListReviewCompliance); ok {
		return x.AccessListReviewCompliance
	}
	return nil
}

func (x *SubmitEventRequest) GetMfaAuthenticationEvent() *MFAAuthenticationEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_MfaAuthenticationEvent); ok {
		return x.MfaAuthenticationEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetSpiffeSvidIssued() *SPIFFESVIDIssuedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SpiffeSvidIssued); ok {
		return x.SpiffeSvidIssued
	}
	return nil
}

func (x *SubmitEventRequest) GetOktaAccessListSync() *OktaAccessListSyncEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_OktaAccessListSync); ok {
		return x.OktaAccessListSync
	}
	return nil
}

func (x *SubmitEventRequest) GetDatabaseUserCreated() *DatabaseUserCreatedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_DatabaseUserCreated); ok {
		return x.DatabaseUserCreated
	}
	return nil
}

func (x *SubmitEventRequest) GetDatabaseUserPermissionsUpdated() *DatabaseUserPermissionsUpdateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_DatabaseUserPermissionsUpdated); ok {
		return x.DatabaseUserPermissionsUpdated
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverCreateDiscoveryConfig() *UIDiscoverCreateDiscoveryConfigEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverCreateDiscoveryConfig); ok {
		return x.UiDiscoverCreateDiscoveryConfig
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverKubeEksEnrollEvent() *UIDiscoverKubeEKSEnrollEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverKubeEksEnrollEvent); ok {
		return x.UiDiscoverKubeEksEnrollEvent
	}
	return nil
}

type isSubmitEventRequest_Event interface {
	isSubmitEventRequest_Event()
}

type SubmitEventRequest_UserLogin struct {
	UserLogin *UserLoginEvent `protobuf:"bytes,3,opt,name=user_login,json=userLogin,proto3,oneof"`
}

type SubmitEventRequest_SsoCreate struct {
	SsoCreate *SSOCreateEvent `protobuf:"bytes,4,opt,name=sso_create,json=ssoCreate,proto3,oneof"`
}

type SubmitEventRequest_ResourceCreate struct {
	ResourceCreate *ResourceCreateEvent `protobuf:"bytes,5,opt,name=resource_create,json=resourceCreate,proto3,oneof"`
}

type SubmitEventRequest_SessionStart struct {
	// REMOVE IN V14: Use session_start_v2 instead
	SessionStart *SessionStartEvent `protobuf:"bytes,6,opt,name=session_start,json=sessionStart,proto3,oneof"`
}

type SubmitEventRequest_UiBannerClick struct {
	UiBannerClick *UIBannerClickEvent `protobuf:"bytes,7,opt,name=ui_banner_click,json=uiBannerClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardCompleteGoToDashboardClick struct {
	UiOnboardCompleteGoToDashboardClick *UIOnboardCompleteGoToDashboardClickEvent `protobuf:"bytes,9,opt,name=ui_onboard_complete_go_to_dashboard_click,json=uiOnboardCompleteGoToDashboardClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardAddFirstResourceClick struct {
	UiOnboardAddFirstResourceClick *UIOnboardAddFirstResourceClickEvent `protobuf:"bytes,10,opt,name=ui_onboard_add_first_resource_click,json=uiOnboardAddFirstResourceClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardAddFirstResourceLaterClick struct {
	UiOnboardAddFirstResourceLaterClick *UIOnboardAddFirstResourceLaterClickEvent `protobuf:"bytes,11,opt,name=ui_onboard_add_first_resource_later_click,json=uiOnboardAddFirstResourceLaterClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardSetCredentialSubmit struct {
	UiOnboardSetCredentialSubmit *UIOnboardSetCredentialSubmitEvent `protobuf:"bytes,12,opt,name=ui_onboard_set_credential_submit,json=uiOnboardSetCredentialSubmit,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardRegisterChallengeSubmit struct {
	UiOnboardRegisterChallengeSubmit *UIOnboardRegisterChallengeSubmitEvent `protobuf:"bytes,13,opt,name=ui_onboard_register_challenge_submit,json=uiOnboardRegisterChallengeSubmit,proto3,oneof"`
}

type SubmitEventRequest_UiRecoveryCodesContinueClick struct {
	UiRecoveryCodesContinueClick *UIRecoveryCodesContinueClickEvent `protobuf:"bytes,14,opt,name=ui_recovery_codes_continue_click,json=uiRecoveryCodesContinueClick,proto3,oneof"`
}

type SubmitEventRequest_UiRecoveryCodesCopyClick struct {
	UiRecoveryCodesCopyClick *UIRecoveryCodesCopyClickEvent `protobuf:"bytes,15,opt,name=ui_recovery_codes_copy_click,json=uiRecoveryCodesCopyClick,proto3,oneof"`
}

type SubmitEventRequest_UiRecoveryCodesPrintClick struct {
	UiRecoveryCodesPrintClick *UIRecoveryCodesPrintClickEvent `protobuf:"bytes,16,opt,name=ui_recovery_codes_print_click,json=uiRecoveryCodesPrintClick,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverStartedEvent struct {
	UiDiscoverStartedEvent *UIDiscoverStartedEvent `protobuf:"bytes,17,opt,name=ui_discover_started_event,json=uiDiscoverStartedEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverResourceSelectionEvent struct {
	UiDiscoverResourceSelectionEvent *UIDiscoverResourceSelectionEvent `protobuf:"bytes,18,opt,name=ui_discover_resource_selection_event,json=uiDiscoverResourceSelectionEvent,proto3,oneof"`
}

type SubmitEventRequest_UserCertificateIssuedEvent struct {
	UserCertificateIssuedEvent *UserCertificateIssuedEvent `protobuf:"bytes,19,opt,name=user_certificate_issued_event,json=userCertificateIssuedEvent,proto3,oneof"`
}

type SubmitEventRequest_SessionStartV2 struct {
	// Note: semantics of SessionStartEvent type values have changed to
	// differentiate SSH from Kubernetes exec sessions (as well as adding
	// db/app/desktop events). The structures are the same, however, so we don't
	// need a new message type.
	SessionStartV2 *SessionStartEvent `protobuf:"bytes,20,opt,name=session_start_v2,json=sessionStartV2,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDeployServiceEvent struct {
	UiDiscoverDeployServiceEvent *UIDiscoverDeployServiceEvent `protobuf:"bytes,21,opt,name=ui_discover_deploy_service_event,json=uiDiscoverDeployServiceEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDatabaseRegisterEvent struct {
	UiDiscoverDatabaseRegisterEvent *UIDiscoverDatabaseRegisterEvent `protobuf:"bytes,22,opt,name=ui_discover_database_register_event,json=uiDiscoverDatabaseRegisterEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent struct {
	UiDiscoverDatabaseConfigureMtlsEvent *UIDiscoverDatabaseConfigureMTLSEvent `protobuf:"bytes,23,opt,name=ui_discover_database_configure_mtls_event,json=uiDiscoverDatabaseConfigureMtlsEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent struct {
	UiDiscoverDesktopActiveDirectoryToolsInstallEvent *UIDiscoverDesktopActiveDirectoryToolsInstallEvent `protobuf:"bytes,24,opt,name=ui_discover_desktop_active_directory_tools_install_event,json=uiDiscoverDesktopActiveDirectoryToolsInstallEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent struct {
	UiDiscoverDesktopActiveDirectoryConfigureEvent *UIDiscoverDesktopActiveDirectoryConfigureEvent `protobuf:"bytes,25,opt,name=ui_discover_desktop_active_directory_configure_event,json=uiDiscoverDesktopActiveDirectoryConfigureEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent struct {
	UiDiscoverAutoDiscoveredResourcesEvent *UIDiscoverAutoDiscoveredResourcesEvent `protobuf:"bytes,26,opt,name=ui_discover_auto_discovered_resources_event,json=uiDiscoverAutoDiscoveredResourcesEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent struct {
	UiDiscoverDatabaseConfigureIamPolicyEvent *UIDiscoverDatabaseConfigureIAMPolicyEvent `protobuf:"bytes,27,opt,name=ui_discover_database_configure_iam_policy_event,json=uiDiscoverDatabaseConfigureIamPolicyEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent struct {
	UiDiscoverPrincipalsConfigureEvent *UIDiscoverPrincipalsConfigureEvent `protobuf:"bytes,28,opt,name=ui_discover_principals_configure_event,json=uiDiscoverPrincipalsConfigureEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverTestConnectionEvent struct {
	UiDiscoverTestConnectionEvent *UIDiscoverTestConnectionEvent `protobuf:"bytes,29,opt,name=ui_discover_test_connection_event,json=uiDiscoverTestConnectionEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverCompletedEvent struct {
	UiDiscoverCompletedEvent *UIDiscoverCompletedEvent `protobuf:"bytes,30,opt,name=ui_discover_completed_event,json=uiDiscoverCompletedEvent,proto3,oneof"`
}

type SubmitEventRequest_RoleCreate struct {
	RoleCreate *RoleCreateEvent `protobuf:"bytes,31,opt,name=role_create,json=roleCreate,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleClick struct {
	UiCreateNewRoleClick *UICreateNewRoleClickEvent `protobuf:"bytes,32,opt,name=ui_create_new_role_click,json=uiCreateNewRoleClick,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleSaveClick struct {
	UiCreateNewRoleSaveClick *UICreateNewRoleSaveClickEvent `protobuf:"bytes,33,opt,name=ui_create_new_role_save_click,json=uiCreateNewRoleSaveClick,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleCancelClick struct {
	UiCreateNewRoleCancelClick *UICreateNewRoleCancelClickEvent `protobuf:"bytes,34,opt,name=ui_create_new_role_cancel_click,json=uiCreateNewRoleCancelClick,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleViewDocumentationClick struct {
	UiCreateNewRoleViewDocumentationClick *UICreateNewRoleViewDocumentationClickEvent `protobuf:"bytes,35,opt,name=ui_create_new_role_view_documentation_click,json=uiCreateNewRoleViewDocumentationClick,proto3,oneof"`
}

type SubmitEventRequest_KubeRequest struct {
	KubeRequest *KubeRequestEvent `protobuf:"bytes,36,opt,name=kube_request,json=kubeRequest,proto3,oneof"`
}

type SubmitEventRequest_Sftp struct {
	Sftp *SFTPEvent `protobuf:"bytes,37,opt,name=sftp,proto3,oneof"`
}

type SubmitEventRequest_AgentMetadataEvent struct {
	AgentMetadataEvent *AgentMetadataEvent `protobuf:"bytes,38,opt,name=agent_metadata_event,json=agentMetadataEvent,proto3,oneof"`
}

type SubmitEventRequest_ResourceHeartbeat struct {
	ResourceHeartbeat *ResourceHeartbeatEvent `protobuf:"bytes,39,opt,name=resource_heartbeat,json=resourceHeartbeat,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverIntegrationAwsOidcConnectEvent struct {
	UiDiscoverIntegrationAwsOidcConnectEvent *UIDiscoverIntegrationAWSOIDCConnectEvent `protobuf:"bytes,40,opt,name=ui_discover_integration_aws_oidc_connect_event,json=uiDiscoverIntegrationAwsOidcConnectEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDatabaseRdsEnrollEvent struct {
	UiDiscoverDatabaseRdsEnrollEvent *UIDiscoverDatabaseRDSEnrollEvent `protobuf:"bytes,41,opt,name=ui_discover_database_rds_enroll_event,json=uiDiscoverDatabaseRdsEnrollEvent,proto3,oneof"`
}

type SubmitEventRequest_UiCallToActionClickEvent struct {
	UiCallToActionClickEvent *UICallToActionClickEvent `protobuf:"bytes,42,opt,name=ui_call_to_action_click_event,json=uiCallToActionClickEvent,proto3,oneof"`
}

type SubmitEventRequest_AssistCompletion struct {
	AssistCompletion *AssistCompletionEvent `protobuf:"bytes,43,opt,name=assist_completion,json=assistCompletion,proto3,oneof"`
}

type SubmitEventRequest_UiIntegrationEnrollStartEvent struct {
	UiIntegrationEnrollStartEvent *UIIntegrationEnrollStartEvent `protobuf:"bytes,44,opt,name=ui_integration_enroll_start_event,json=uiIntegrationEnrollStartEvent,proto3,oneof"`
}

type SubmitEventRequest_UiIntegrationEnrollCompleteEvent struct {
	UiIntegrationEnrollCompleteEvent *UIIntegrationEnrollCompleteEvent `protobuf:"bytes,45,opt,name=ui_integration_enroll_complete_event,json=uiIntegrationEnrollCompleteEvent,proto3,oneof"`
}

type SubmitEventRequest_EditorChangeEvent struct {
	EditorChangeEvent *EditorChangeEvent `protobuf:"bytes,46,opt,name=editor_change_event,json=editorChangeEvent,proto3,oneof"`
}

type SubmitEventRequest_BotCreate struct {
	BotCreate *BotCreateEvent `protobuf:"bytes,47,opt,name=bot_create,json=botCreate,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardQuestionnaireSubmit struct {
	UiOnboardQuestionnaireSubmit *UIOnboardQuestionnaireSubmitEvent `protobuf:"bytes,48,opt,name=ui_onboard_questionnaire_submit,json=uiOnboardQuestionnaireSubmit,proto3,oneof"`
}

type SubmitEventRequest_BotJoin struct {
	BotJoin *BotJoinEvent `protobuf:"bytes,49,opt,name=bot_join,json=botJoin,proto3,oneof"`
}

type SubmitEventRequest_AssistExecution struct {
	AssistExecution *AssistExecutionEvent `protobuf:"bytes,50,opt,name=assist_execution,json=assistExecution,proto3,oneof"`
}

type SubmitEventRequest_AssistNewConversation struct {
	AssistNewConversation *AssistNewConversationEvent `protobuf:"bytes,51,opt,name=assist_new_conversation,json=assistNewConversation,proto3,oneof"`
}

type SubmitEventRequest_DeviceAuthenticateEvent struct {
	DeviceAuthenticateEvent *DeviceAuthenticateEvent `protobuf:"bytes,52,opt,name=device_authenticate_event,json=deviceAuthenticateEvent,proto3,oneof"`
}

type SubmitEventRequest_FeatureRecommendationEvent struct {
	FeatureRecommendationEvent *FeatureRecommendationEvent `protobuf:"bytes,53,opt,name=feature_recommendation_event,json=featureRecommendationEvent,proto3,oneof"`
}

type SubmitEventRequest_AssistAccessRequest struct {
	AssistAccessRequest *AssistAccessRequestEvent `protobuf:"bytes,54,opt,name=assist_access_request,json=assistAccessRequest,proto3,oneof"`
}

type SubmitEventRequest_AssistAction struct {
	AssistAction *AssistActionEvent `protobuf:"bytes,55,opt,name=assist_action,json=assistAction,proto3,oneof"`
}

type SubmitEventRequest_DeviceEnrollEvent struct {
	DeviceEnrollEvent *DeviceEnrollEvent `protobuf:"bytes,56,opt,name=device_enroll_event,json=deviceEnrollEvent,proto3,oneof"`
}

type SubmitEventRequest_LicenseLimitEvent struct {
	LicenseLimitEvent *LicenseLimitEvent `protobuf:"bytes,57,opt,name=license_limit_event,json=licenseLimitEvent,proto3,oneof"`
}

type SubmitEventRequest_AccessListCreate struct {
	AccessListCreate *AccessListCreateEvent `protobuf:"bytes,58,opt,name=access_list_create,json=accessListCreate,proto3,oneof"`
}

type SubmitEventRequest_AccessListUpdate struct {
	AccessListUpdate *AccessListUpdateEvent `protobuf:"bytes,59,opt,name=access_list_update,json=accessListUpdate,proto3,oneof"`
}

type SubmitEventRequest_AccessListDelete struct {
	AccessListDelete *AccessListDeleteEvent `protobuf:"bytes,60,opt,name=access_list_delete,json=accessListDelete,proto3,oneof"`
}

type SubmitEventRequest_AccessListMemberCreate struct {
	AccessListMemberCreate *AccessListMemberCreateEvent `protobuf:"bytes,61,opt,name=access_list_member_create,json=accessListMemberCreate,proto3,oneof"`
}

type SubmitEventRequest_AccessListMemberUpdate struct {
	AccessListMemberUpdate *AccessListMemberUpdateEvent `protobuf:"bytes,62,opt,name=access_list_member_update,json=accessListMemberUpdate,proto3,oneof"`
}

type SubmitEventRequest_AccessListMemberDelete struct {
	AccessListMemberDelete *AccessListMemberDeleteEvent `protobuf:"bytes,63,opt,name=access_list_member_delete,json=accessListMemberDelete,proto3,oneof"`
}

type SubmitEventRequest_AccessListGrantsToUser struct {
	AccessListGrantsToUser *AccessListGrantsToUserEvent `protobuf:"bytes,64,opt,name=access_list_grants_to_user,json=accessListGrantsToUser,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverEc2InstanceSelection struct {
	UiDiscoverEc2InstanceSelection *UIDiscoverEC2InstanceSelectionEvent `protobuf:"bytes,65,opt,name=ui_discover_ec2_instance_selection,json=uiDiscoverEc2InstanceSelection,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDeployEice struct {
	UiDiscoverDeployEice *UIDiscoverDeployEICEEvent `protobuf:"bytes,66,opt,name=ui_discover_deploy_eice,json=uiDiscoverDeployEice,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverCreateNode struct {
	UiDiscoverCreateNode *UIDiscoverCreateNodeEvent `protobuf:"bytes,67,opt,name=ui_discover_create_node,json=uiDiscoverCreateNode,proto3,oneof"`
}

type SubmitEventRequest_DesktopDirectoryShare struct {
	DesktopDirectoryShare *DesktopDirectoryShareEvent `protobuf:"bytes,68,opt,name=desktop_directory_share,json=desktopDirectoryShare,proto3,oneof"`
}

type SubmitEventRequest_DesktopClipboardTransfer struct {
	DesktopClipboardTransfer *DesktopClipboardEvent `protobuf:"bytes,69,opt,name=desktop_clipboard_transfer,json=desktopClipboardTransfer,proto3,oneof"`
}

type SubmitEventRequest_TagExecuteQuery struct {
	TagExecuteQuery *TAGExecuteQueryEvent `protobuf:"bytes,70,opt,name=tag_execute_query,json=tagExecuteQuery,proto3,oneof"`
}

type SubmitEventRequest_ExternalAuditStorageAuthenticate struct {
	ExternalAuditStorageAuthenticate *ExternalAuditStorageAuthenticateEvent `protobuf:"bytes,71,opt,name=external_audit_storage_authenticate,json=externalAuditStorageAuthenticate,proto3,oneof"`
}

type SubmitEventRequest_SecurityReportGetResult struct {
	SecurityReportGetResult *SecurityReportGetResultEvent `protobuf:"bytes,72,opt,name=security_report_get_result,json=securityReportGetResult,proto3,oneof"`
}

type SubmitEventRequest_AuditQueryRun struct {
	AuditQueryRun *AuditQueryRunEvent `protobuf:"bytes,73,opt,name=audit_query_run,json=auditQueryRun,proto3,oneof"`
}

type SubmitEventRequest_DiscoveryFetchEvent struct {
	DiscoveryFetchEvent *DiscoveryFetchEvent `protobuf:"bytes,74,opt,name=discovery_fetch_event,json=discoveryFetchEvent,proto3,oneof"`
}

type SubmitEventRequest_AccessListReviewCreate struct {
	AccessListReviewCreate *AccessListReviewCreateEvent `protobuf:"bytes,75,opt,name=access_list_review_create,json=accessListReviewCreate,proto3,oneof"`
}

type SubmitEventRequest_AccessListReviewDelete struct {
	AccessListReviewDelete *AccessListReviewDeleteEvent `protobuf:"bytes,76,opt,name=access_list_review_delete,json=accessListReviewDelete,proto3,oneof"`
}

type SubmitEventRequest_AccessListReviewCompliance struct {
	AccessListReviewCompliance *AccessListReviewComplianceEvent `protobuf:"bytes,77,opt,name=access_list_review_compliance,json=accessListReviewCompliance,proto3,oneof"`
}

type SubmitEventRequest_MfaAuthenticationEvent struct {
	MfaAuthenticationEvent *MFAAuthenticationEvent `protobuf:"bytes,78,opt,name=mfa_authentication_event,json=mfaAuthenticationEvent,proto3,oneof"`
}

type SubmitEventRequest_SpiffeSvidIssued struct {
	SpiffeSvidIssued *SPIFFESVIDIssuedEvent `protobuf:"bytes,79,opt,name=spiffe_svid_issued,json=spiffeSvidIssued,proto3,oneof"`
}

type SubmitEventRequest_OktaAccessListSync struct {
	OktaAccessListSync *OktaAccessListSyncEvent `protobuf:"bytes,80,opt,name=okta_access_list_sync,json=oktaAccessListSync,proto3,oneof"`
}

type SubmitEventRequest_DatabaseUserCreated struct {
	DatabaseUserCreated *DatabaseUserCreatedEvent `protobuf:"bytes,81,opt,name=database_user_created,json=databaseUserCreated,proto3,oneof"`
}

type SubmitEventRequest_DatabaseUserPermissionsUpdated struct {
	DatabaseUserPermissionsUpdated *DatabaseUserPermissionsUpdateEvent `protobuf:"bytes,82,opt,name=database_user_permissions_updated,json=databaseUserPermissionsUpdated,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverCreateDiscoveryConfig struct {
	UiDiscoverCreateDiscoveryConfig *UIDiscoverCreateDiscoveryConfigEvent `protobuf:"bytes,83,opt,name=ui_discover_create_discovery_config,json=uiDiscoverCreateDiscoveryConfig,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverKubeEksEnrollEvent struct {
	UiDiscoverKubeEksEnrollEvent *UIDiscoverKubeEKSEnrollEvent `protobuf:"bytes,84,opt,name=ui_discover_kube_eks_enroll_event,json=uiDiscoverKubeEksEnrollEvent,proto3,oneof"`
}

func (*SubmitEventRequest_UserLogin) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SsoCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_ResourceCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SessionStart) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiBannerClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardAddFirstResourceClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardSetCredentialSubmit) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardRegisterChallengeSubmit) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiRecoveryCodesContinueClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiRecoveryCodesCopyClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiRecoveryCodesPrintClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverStartedEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverResourceSelectionEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UserCertificateIssuedEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SessionStartV2) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDeployServiceEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent) isSubmitEventRequest_Event() {
}

func (*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent) isSubmitEventRequest_Event() {
}

func (*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverTestConnectionEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverCompletedEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_RoleCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleSaveClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleCancelClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_KubeRequest) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_Sftp) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AgentMetadataEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_ResourceHeartbeat) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverIntegrationAwsOidcConnectEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDatabaseRdsEnrollEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCallToActionClickEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AssistCompletion) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiIntegrationEnrollStartEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiIntegrationEnrollCompleteEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_EditorChangeEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_BotCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardQuestionnaireSubmit) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_BotJoin) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AssistExecution) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AssistNewConversation) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_DeviceAuthenticateEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_FeatureRecommendationEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AssistAccessRequest) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AssistAction) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_DeviceEnrollEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_LicenseLimitEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListUpdate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListDelete) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListMemberCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListMemberUpdate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListMemberDelete) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListGrantsToUser) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverEc2InstanceSelection) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDeployEice) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverCreateNode) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_DesktopDirectoryShare) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_DesktopClipboardTransfer) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_TagExecuteQuery) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_ExternalAuditStorageAuthenticate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SecurityReportGetResult) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AuditQueryRun) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_DiscoveryFetchEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListReviewCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListReviewDelete) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AccessListReviewCompliance) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_MfaAuthenticationEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SpiffeSvidIssued) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_OktaAccessListSync) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_DatabaseUserCreated) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_DatabaseUserPermissionsUpdated) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverCreateDiscoveryConfig) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverKubeEksEnrollEvent) isSubmitEventRequest_Event() {}

type SubmitEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitEventResponse) Reset() {
	*x = SubmitEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventResponse) ProtoMessage() {}

func (x *SubmitEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventResponse.ProtoReflect.Descriptor instead.
func (*SubmitEventResponse) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{89}
}

type SubmitEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// individual events to be submitted in a batch, up to 500 at once
	Events []*SubmitEventRequest `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *SubmitEventsRequest) Reset() {
	*x = SubmitEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventsRequest) ProtoMessage() {}

func (x *SubmitEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventsRequest.ProtoReflect.Descriptor instead.
func (*SubmitEventsRequest) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{90}
}

func (x *SubmitEventsRequest) GetEvents() []*SubmitEventRequest {
	if x != nil {
		return x.Events
	}
	return nil
}

type SubmitEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitEventsResponse) Reset() {
	*x = SubmitEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventsResponse) ProtoMessage() {}

func (x *SubmitEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventsResponse.ProtoReflect.Descriptor instead.
func (*SubmitEventsResponse) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{91}
}

type HelloTeleportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HelloTeleportRequest) Reset() {
	*x = HelloTeleportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloTeleportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloTeleportRequest) ProtoMessage() {}

func (x *HelloTeleportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloTeleportRequest.ProtoReflect.Descriptor instead.
func (*HelloTeleportRequest) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{92}
}

type HelloTeleportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HelloTeleportResponse) Reset() {
	*x = HelloTeleportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloTeleportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloTeleportResponse) ProtoMessage() {}

func (x *HelloTeleportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloTeleportResponse.ProtoReflect.Descriptor instead.
func (*HelloTeleportResponse) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{93}
}

var File_prehog_v1alpha_teleport_proto protoreflect.FileDescriptor

var file_prehog_v1alpha_teleport_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x4d, 0x46, 0x41, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x66, 0x61,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x66, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x53, 0x53, 0x4f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22,
	0x98, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0x9b, 0x02, 0x0a, 0x11, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x48, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x12, 0x35, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x75, 0x0a, 0x1c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22,
	0xaf, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbf, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x70, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x53, 0x56,
	0x49, 0x44, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x73, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x70, 0x53, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x53,
	0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x76, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x49, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x47,
	0x0a, 0x28, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x6f, 0x54, 0x6f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x23, 0x55, 0x49, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x28, 0x55,
	0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x21, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x25, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x66, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x66, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x40, 0x0a, 0x21, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x21, 0x55, 0x49, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x1d, 0x55, 0x49,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x70,
	0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x1e, 0x55, 0x49, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x73, 0x6f, 0x22, 0x58, 0x0a, 0x18, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x55, 0x49, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe2, 0x01,
	0x0a, 0x20, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x28, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x57, 0x53, 0x4f,
	0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x9c, 0x02, 0x0a, 0x20, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x44, 0x53, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xde,
	0x01, 0x0a, 0x1c, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4b, 0x75, 0x62,
	0x65, 0x45, 0x4b, 0x53, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xe0, 0x04, 0x0a, 0x1c, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x5e, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x58, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x65, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x41, 0x5a, 0x4f, 0x4e, 0x5f, 0x45, 0x43, 0x53,
	0x10, 0x02, 0x22, 0xf7, 0x03, 0x0a, 0x24, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x45, 0x43, 0x32, 0x5f, 0x53, 0x53, 0x4d,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x45, 0x43, 0x32, 0x5f, 0x45, 0x49, 0x43, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x52, 0x44, 0x53, 0x5f, 0x45, 0x43, 0x53, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x45, 0x4b, 0x53, 0x10, 0x04, 0x22, 0xe1, 0x01, 0x0a,
	0x1f, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe6, 0x01, 0x0a, 0x24, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x4d, 0x54, 0x4c, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x31, 0x55, 0x49,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xf0, 0x01, 0x0a, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x26, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x23, 0x55, 0x49, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb,
	0x01, 0x0a, 0x19, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x45, 0x49, 0x43, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x01, 0x0a,
	0x19, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x29, 0x55,
	0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x22, 0x55, 0x49, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xdf, 0x01, 0x0a, 0x1d, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b,
	0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0e,
	0x42, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x74, 0x4a,
	0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x55, 0x49, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x1d, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3e, 0x0a, 0x1f, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x49, 0x0a, 0x2a, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x52, 0x6f, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x18,
	0x55, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x54, 0x41, 0x52, 0x03, 0x63, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x10,
	0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x22, 0x77, 0x0a, 0x09, 0x53, 0x46, 0x54, 0x50, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xcb, 0x03,
	0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68,
	0x6f, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x72, 0x22, 0xd2, 0x01, 0x0a, 0x15,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x22, 0xf0, 0x01, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x22, 0x55, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x18, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xbd,
	0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x24,
	0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x15, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x74, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x7a, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a,
	0x0a, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0xaf, 0x03, 0x0a, 0x1b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x70,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x61, 0x79, 0x73, 0x50,
	0x61, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x1b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x1d,
	0x55, 0x49, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x20, 0x55, 0x49, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x6c, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a,
	0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x6f, 0x0a, 0x1d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7a, 0x0a, 0x1a, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x54, 0x41, 0x47, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x27,
	0x0a, 0x25, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x1c, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0x64, 0x0a, 0x12,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x17, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x41,
	0x70, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xe0,
	0x01, 0x0a, 0x22, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x75, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xda, 0x45, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x73, 0x6f, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x53, 0x4f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x73,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x75, 0x69, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12,
	0x92, 0x01, 0x0a, 0x29, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x54, 0x6f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x23, 0x75, 0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x6f, 0x54, 0x6f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x75, 0x69, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x92, 0x01, 0x0a, 0x29, 0x75, 0x69,
	0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x23, 0x75, 0x69, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x7b,
	0x0a, 0x20, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x75,
	0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x24,
	0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x20, 0x75, 0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x7b, 0x0a, 0x20, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x12, 0x6f, 0x0a, 0x1c, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x75, 0x69, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x12, 0x72, 0x0a, 0x1d, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x75, 0x69,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x19, 0x75, 0x69, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a,
	0x24, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x20, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x6f, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x32, 0x12, 0x76, 0x0a, 0x20, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x69, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x23, 0x75, 0x69, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x75, 0x69, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x29, 0x75,
	0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x74,
	0x6c, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d, 0x54, 0x4c, 0x53, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x24, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x4d, 0x74, 0x6c, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xb8, 0x01, 0x0a,
	0x38, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x31, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xae, 0x01, 0x0a, 0x34, 0x75, 0x69, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x2e, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x2b, 0x75, 0x69, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x26, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x9f, 0x01, 0x0a, 0x2f, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x29, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x26, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x22, 0x75, 0x69, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a,
	0x21, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x75, 0x69, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x1b, 0x75, 0x69, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x75, 0x69, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x18, 0x75, 0x69, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x75, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x1d,
	0x75, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x52, 0x6f, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x75, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x76,
	0x0a, 0x1f, 0x75, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x75, 0x69, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x98, 0x01, 0x0a, 0x2b, 0x75, 0x69, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x25, 0x75, 0x69, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x12, 0x45, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x75, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x66, 0x74, 0x70,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x46, 0x54, 0x50, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x66, 0x74, 0x70, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x2e, 0x75,
	0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x57, 0x53, 0x4f, 0x49, 0x44,
	0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x28, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x25, 0x75, 0x69,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x44, 0x53,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20, 0x75,
	0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x64, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x6b, 0x0a, 0x1d, 0x75, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x75, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x11,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x21, 0x75, 0x69, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x49, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d,
	0x75, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01,
	0x0a, 0x24, 0x75, 0x69, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x20, 0x75, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x6f, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x75, 0x69, 0x5f, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x6f, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x51, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x6e, 0x0a, 0x1c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x5e, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x53,
	0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x19,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x45, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x17, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x65, 0x69, 0x63, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x49, 0x43, 0x45, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x14, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x75, 0x69, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x64, 0x0a,
	0x17, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x65, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x63,
	0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x11, 0x74, 0x61,
	0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x41, 0x47, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74,
	0x61, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x86,
	0x01, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x12, 0x59, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a,
	0x19, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x74, 0x0a, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x6d, 0x66, 0x61, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x46, 0x41, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x66, 0x61, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x73, 0x76, 0x69, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x53,
	0x56, 0x49, 0x44, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x53, 0x76, 0x69, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x12, 0x5c, 0x0a, 0x15, 0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x6b,
	0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x5e, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x7f, 0x0a, 0x21, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x21, 0x75, 0x69, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x65, 0x6b, 0x73,
	0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4b,
	0x75, 0x62, 0x65, 0x45, 0x4b, 0x53, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4b,
	0x75, 0x62, 0x65, 0x45, 0x6b, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x52, 0x1c, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x22, 0x15,
	0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0x87, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44, 0x45, 0x53,
	0x4b, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x53, 0x53, 0x48, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x53, 0x53, 0x48, 0x5f, 0x45, 0x49, 0x43, 0x45, 0x10, 0x07, 0x2a, 0x4d, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x4f, 0x54, 0x10, 0x02, 0x2a, 0xc0, 0x0f, 0x0a, 0x10, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x44, 0x42, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2b, 0x0a,
	0x27, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x47, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x44, 0x53, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x52,
	0x44, 0x53, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x43,
	0x50, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53,
	0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x44, 0x53, 0x10, 0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x5f,
	0x52, 0x45, 0x44, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x0e, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x0f, 0x12,
	0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x59,
	0x53, 0x51, 0x4c, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x11, 0x12, 0x3b, 0x0a, 0x37, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x52,
	0x45, 0x44, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x4c, 0x45,
	0x53, 0x53, 0x10, 0x12, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x5a, 0x55, 0x52,
	0x45, 0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x4f, 0x44, 0x42, 0x10, 0x14, 0x12, 0x32, 0x0a, 0x2e,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x53, 0x41,
	0x4e, 0x44, 0x52, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10, 0x15,
	0x12, 0x34, 0x0a, 0x30, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43,
	0x41, 0x53, 0x53, 0x41, 0x4e, 0x44, 0x52, 0x41, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x16, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x17,
	0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x53, 0x5f, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x10, 0x18, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x44, 0x42, 0x10,
	0x19, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x10, 0x1a, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51,
	0x4c, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x1c, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x1d, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x1e, 0x12, 0x36, 0x0a,
	0x32, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x43, 0x4b,
	0x52, 0x4f, 0x41, 0x43, 0x48, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x44, 0x42, 0x5f, 0x41, 0x54, 0x4c, 0x41,
	0x53, 0x10, 0x20, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x21, 0x12, 0x2c, 0x0a,
	0x28, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x22, 0x12, 0x34, 0x0a, 0x30, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x23, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x43, 0x32, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x26, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x5f,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x10, 0x27, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x55,
	0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x45, 0x4b, 0x53, 0x10, 0x28, 0x12, 0x2d,
	0x0a, 0x29, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x57, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x29, 0x2a, 0xa3, 0x01,
	0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0xc1, 0x02, 0x0a, 0x03, 0x43, 0x54, 0x41, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x54, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x54, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x54, 0x41, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x54,
	0x41, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x54, 0x41, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4e,
	0x45, 0x52, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x54, 0x41, 0x5f, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x54, 0x41, 0x5f, 0x4f, 0x4b, 0x54, 0x41, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x54, 0x41, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x41, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x2a, 0x82, 0x08, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e,
	0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52,
	0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x4f, 0x49, 0x44,
	0x43, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50,
	0x41, 0x47, 0x45, 0x52, 0x44, 0x55, 0x54, 0x59, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e,
	0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52,
	0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4a, 0x49, 0x52, 0x41, 0x10, 0x05, 0x12,
	0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x52, 0x44, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4d, 0x4f, 0x53, 0x54, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53,
	0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50,
	0x53, 0x47, 0x45, 0x4e, 0x49, 0x45, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x4b, 0x54, 0x41, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e,
	0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4a, 0x41, 0x4d, 0x46, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x0c, 0x12, 0x35, 0x0a, 0x31, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x43, 0x49, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4a, 0x45, 0x4e, 0x4b, 0x49, 0x4e, 0x53, 0x10, 0x10, 0x12, 0x2e, 0x0a, 0x2a, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x11, 0x12, 0x2a, 0x0a, 0x26, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x12, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x43,
	0x50, 0x10, 0x13, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d,
	0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10,
	0x14, 0x12, 0x30, 0x0a, 0x2c, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x4c, 0x49, 0x46,
	0x54, 0x10, 0x15, 0x12, 0x31, 0x0a, 0x2d, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d,
	0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x45, 0x53, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x49, 0x44, 0x10, 0x17, 0x2a, 0x88, 0x01, 0x0a,
	0x12, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x44, 0x49,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x01, 0x2a, 0xa0, 0x01, 0x0a, 0x1b, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x19,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4a,
	0x41, 0x4d, 0x46, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x52,
	0x55, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x32, 0xb4, 0x02, 0x0a, 0x18, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a,
	0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5b, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xc9, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0d,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x50,
	0x58, 0x58, 0xaa, 0x02, 0x0e, 0x50, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xca, 0x02, 0x0e, 0x50, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x1a, 0x50, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0f, 0x50, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prehog_v1alpha_teleport_proto_rawDescOnce sync.Once
	file_prehog_v1alpha_teleport_proto_rawDescData = file_prehog_v1alpha_teleport_proto_rawDesc
)

func file_prehog_v1alpha_teleport_proto_rawDescGZIP() []byte {
	file_prehog_v1alpha_teleport_proto_rawDescOnce.Do(func() {
		file_prehog_v1alpha_teleport_proto_rawDescData = protoimpl.X.CompressGZIP(file_prehog_v1alpha_teleport_proto_rawDescData)
	})
	return file_prehog_v1alpha_teleport_proto_rawDescData
}

var file_prehog_v1alpha_teleport_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_prehog_v1alpha_teleport_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_prehog_v1alpha_teleport_proto_goTypes = []any{
	(ResourceKind)(0),                // 0: prehog.v1alpha.ResourceKind
	(UserKind)(0),                    // 1: prehog.v1alpha.UserKind
	(DiscoverResource)(0),            // 2: prehog.v1alpha.DiscoverResource
	(DiscoverStatus)(0),              // 3: prehog.v1alpha.DiscoverStatus
	(CTA)(0),                         // 4: prehog.v1alpha.CTA
	(IntegrationEnrollKind)(0),       // 5: prehog.v1alpha.IntegrationEnrollKind
	(EditorChangeStatus)(0),          // 6: prehog.v1alpha.EditorChangeStatus
	(Feature)(0),                     // 7: prehog.v1alpha.Feature
	(FeatureRecommendationStatus)(0), // 8: prehog.v1alpha.FeatureRecommendationStatus
	(LicenseLimit)(0),                // 9: prehog.v1alpha.LicenseLimit
	(UIDiscoverDeployServiceEvent_DeployMethod)(0),            // 10: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod
	(UIDiscoverDeployServiceEvent_DeployType)(0),              // 11: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType
	(UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod)(0),    // 12: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod
	(*UserLoginEvent)(nil),                                    // 13: prehog.v1alpha.UserLoginEvent
	(*MFAAuthenticationEvent)(nil),                            // 14: prehog.v1alpha.MFAAuthenticationEvent
	(*SSOCreateEvent)(nil),                                    // 15: prehog.v1alpha.SSOCreateEvent
	(*ResourceCreateEvent)(nil),                               // 16: prehog.v1alpha.ResourceCreateEvent
	(*DiscoveredDatabaseMetadata)(nil),                        // 17: prehog.v1alpha.DiscoveredDatabaseMetadata
	(*ResourceHeartbeatEvent)(nil),                            // 18: prehog.v1alpha.ResourceHeartbeatEvent
	(*SessionStartEvent)(nil),                                 // 19: prehog.v1alpha.SessionStartEvent
	(*SessionStartDatabaseMetadata)(nil),                      // 20: prehog.v1alpha.SessionStartDatabaseMetadata
	(*SessionStartDesktopMetadata)(nil),                       // 21: prehog.v1alpha.SessionStartDesktopMetadata
	(*UserCertificateIssuedEvent)(nil),                        // 22: prehog.v1alpha.UserCertificateIssuedEvent
	(*SPIFFESVIDIssuedEvent)(nil),                             // 23: prehog.v1alpha.SPIFFESVIDIssuedEvent
	(*UIBannerClickEvent)(nil),                                // 24: prehog.v1alpha.UIBannerClickEvent
	(*UIOnboardCompleteGoToDashboardClickEvent)(nil),          // 25: prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
	(*UIOnboardAddFirstResourceClickEvent)(nil),               // 26: prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
	(*UIOnboardAddFirstResourceLaterClickEvent)(nil),          // 27: prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
	(*UIOnboardSetCredentialSubmitEvent)(nil),                 // 28: prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
	(*UIOnboardRegisterChallengeSubmitEvent)(nil),             // 29: prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
	(*UIOnboardQuestionnaireSubmitEvent)(nil),                 // 30: prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent
	(*UIRecoveryCodesContinueClickEvent)(nil),                 // 31: prehog.v1alpha.UIRecoveryCodesContinueClickEvent
	(*UIRecoveryCodesCopyClickEvent)(nil),                     // 32: prehog.v1alpha.UIRecoveryCodesCopyClickEvent
	(*UIRecoveryCodesPrintClickEvent)(nil),                    // 33: prehog.v1alpha.UIRecoveryCodesPrintClickEvent
	(*DiscoverMetadata)(nil),                                  // 34: prehog.v1alpha.DiscoverMetadata
	(*DiscoverResourceMetadata)(nil),                          // 35: prehog.v1alpha.DiscoverResourceMetadata
	(*DiscoverStepStatus)(nil),                                // 36: prehog.v1alpha.DiscoverStepStatus
	(*UIDiscoverStartedEvent)(nil),                            // 37: prehog.v1alpha.UIDiscoverStartedEvent
	(*UIDiscoverResourceSelectionEvent)(nil),                  // 38: prehog.v1alpha.UIDiscoverResourceSelectionEvent
	(*UIDiscoverIntegrationAWSOIDCConnectEvent)(nil),          // 39: prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent
	(*UIDiscoverDatabaseRDSEnrollEvent)(nil),                  // 40: prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent
	(*UIDiscoverKubeEKSEnrollEvent)(nil),                      // 41: prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent
	(*UIDiscoverDeployServiceEvent)(nil),                      // 42: prehog.v1alpha.UIDiscoverDeployServiceEvent
	(*UIDiscoverCreateDiscoveryConfigEvent)(nil),              // 43: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent
	(*UIDiscoverDatabaseRegisterEvent)(nil),                   // 44: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
	(*UIDiscoverDatabaseConfigureMTLSEvent)(nil),              // 45: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
	(*UIDiscoverDesktopActiveDirectoryToolsInstallEvent)(nil), // 46: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
	(*UIDiscoverDesktopActiveDirectoryConfigureEvent)(nil),    // 47: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
	(*UIDiscoverAutoDiscoveredResourcesEvent)(nil),            // 48: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
	(*UIDiscoverEC2InstanceSelectionEvent)(nil),               // 49: prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent
	(*UIDiscoverDeployEICEEvent)(nil),                         // 50: prehog.v1alpha.UIDiscoverDeployEICEEvent
	(*UIDiscoverCreateNodeEvent)(nil),                         // 51: prehog.v1alpha.UIDiscoverCreateNodeEvent
	(*UIDiscoverDatabaseConfigureIAMPolicyEvent)(nil),         // 52: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
	(*UIDiscoverPrincipalsConfigureEvent)(nil),                // 53: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
	(*UIDiscoverTestConnectionEvent)(nil),                     // 54: prehog.v1alpha.UIDiscoverTestConnectionEvent
	(*UIDiscoverCompletedEvent)(nil),                          // 55: prehog.v1alpha.UIDiscoverCompletedEvent
	(*RoleCreateEvent)(nil),                                   // 56: prehog.v1alpha.RoleCreateEvent
	(*BotCreateEvent)(nil),                                    // 57: prehog.v1alpha.BotCreateEvent
	(*BotJoinEvent)(nil),                                      // 58: prehog.v1alpha.BotJoinEvent
	(*UICreateNewRoleClickEvent)(nil),                         // 59: prehog.v1alpha.UICreateNewRoleClickEvent
	(*UICreateNewRoleSaveClickEvent)(nil),                     // 60: prehog.v1alpha.UICreateNewRoleSaveClickEvent
	(*UICreateNewRoleCancelClickEvent)(nil),                   // 61: prehog.v1alpha.UICreateNewRoleCancelClickEvent
	(*UICreateNewRoleViewDocumentationClickEvent)(nil),        // 62: prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
	(*UICallToActionClickEvent)(nil),                          // 63: prehog.v1alpha.UICallToActionClickEvent
	(*KubeRequestEvent)(nil),                                  // 64: prehog.v1alpha.KubeRequestEvent
	(*SFTPEvent)(nil),                                         // 65: prehog.v1alpha.SFTPEvent
	(*AgentMetadataEvent)(nil),                                // 66: prehog.v1alpha.AgentMetadataEvent
	(*AssistCompletionEvent)(nil),                             // 67: prehog.v1alpha.AssistCompletionEvent
	(*AssistExecutionEvent)(nil),                              // 68: prehog.v1alpha.AssistExecutionEvent
	(*AssistNewConversationEvent)(nil),                        // 69: prehog.v1alpha.AssistNewConversationEvent
	(*AssistAccessRequestEvent)(nil),                          // 70: prehog.v1alpha.AssistAccessRequestEvent
	(*AssistActionEvent)(nil),                                 // 71: prehog.v1alpha.AssistActionEvent
	(*AccessListMetadata)(nil),                                // 72: prehog.v1alpha.AccessListMetadata
	(*AccessListCreateEvent)(nil),                             // 73: prehog.v1alpha.AccessListCreateEvent
	(*AccessListUpdateEvent)(nil),                             // 74: prehog.v1alpha.AccessListUpdateEvent
	(*AccessListDeleteEvent)(nil),                             // 75: prehog.v1alpha.AccessListDeleteEvent
	(*AccessListMemberCreateEvent)(nil),                       // 76: prehog.v1alpha.AccessListMemberCreateEvent
	(*AccessListMemberUpdateEvent)(nil),                       // 77: prehog.v1alpha.AccessListMemberUpdateEvent
	(*AccessListMemberDeleteEvent)(nil),                       // 78: prehog.v1alpha.AccessListMemberDeleteEvent
	(*AccessListGrantsToUserEvent)(nil),                       // 79: prehog.v1alpha.AccessListGrantsToUserEvent
	(*AccessListReviewCreateEvent)(nil),                       // 80: prehog.v1alpha.AccessListReviewCreateEvent
	(*AccessListReviewDeleteEvent)(nil),                       // 81: prehog.v1alpha.AccessListReviewDeleteEvent
	(*AccessListReviewComplianceEvent)(nil),                   // 82: prehog.v1alpha.AccessListReviewComplianceEvent
	(*IntegrationEnrollMetadata)(nil),                         // 83: prehog.v1alpha.IntegrationEnrollMetadata
	(*UIIntegrationEnrollStartEvent)(nil),                     // 84: prehog.v1alpha.UIIntegrationEnrollStartEvent
	(*UIIntegrationEnrollCompleteEvent)(nil),                  // 85: prehog.v1alpha.UIIntegrationEnrollCompleteEvent
	(*EditorChangeEvent)(nil),                                 // 86: prehog.v1alpha.EditorChangeEvent
	(*DeviceAuthenticateEvent)(nil),                           // 87: prehog.v1alpha.DeviceAuthenticateEvent
	(*DeviceEnrollEvent)(nil),                                 // 88: prehog.v1alpha.DeviceEnrollEvent
	(*FeatureRecommendationEvent)(nil),                        // 89: prehog.v1alpha.FeatureRecommendationEvent
	(*LicenseLimitEvent)(nil),                                 // 90: prehog.v1alpha.LicenseLimitEvent
	(*DesktopDirectoryShareEvent)(nil),                        // 91: prehog.v1alpha.DesktopDirectoryShareEvent
	(*DesktopClipboardEvent)(nil),                             // 92: prehog.v1alpha.DesktopClipboardEvent
	(*TAGExecuteQueryEvent)(nil),                              // 93: prehog.v1alpha.TAGExecuteQueryEvent
	(*ExternalAuditStorageAuthenticateEvent)(nil),             // 94: prehog.v1alpha.ExternalAuditStorageAuthenticateEvent
	(*SecurityReportGetResultEvent)(nil),                      // 95: prehog.v1alpha.SecurityReportGetResultEvent
	(*AuditQueryRunEvent)(nil),                                // 96: prehog.v1alpha.AuditQueryRunEvent
	(*DiscoveryFetchEvent)(nil),                               // 97: prehog.v1alpha.DiscoveryFetchEvent
	(*OktaAccessListSyncEvent)(nil),                           // 98: prehog.v1alpha.OktaAccessListSyncEvent
	(*DatabaseUserCreatedEvent)(nil),                          // 99: prehog.v1alpha.DatabaseUserCreatedEvent
	(*DatabaseUserPermissionsUpdateEvent)(nil),                // 100: prehog.v1alpha.DatabaseUserPermissionsUpdateEvent
	(*SubmitEventRequest)(nil),                                // 101: prehog.v1alpha.SubmitEventRequest
	(*SubmitEventResponse)(nil),                               // 102: prehog.v1alpha.SubmitEventResponse
	(*SubmitEventsRequest)(nil),                               // 103: prehog.v1alpha.SubmitEventsRequest
	(*SubmitEventsResponse)(nil),                              // 104: prehog.v1alpha.SubmitEventsResponse
	(*HelloTeleportRequest)(nil),                              // 105: prehog.v1alpha.HelloTeleportRequest
	(*HelloTeleportResponse)(nil),                             // 106: prehog.v1alpha.HelloTeleportResponse
	(*durationpb.Duration)(nil),                               // 107: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                             // 108: google.protobuf.Timestamp
}
var file_prehog_v1alpha_teleport_proto_depIdxs = []int32{
	17,  // 0: prehog.v1alpha.ResourceCreateEvent.database:type_name -> prehog.v1alpha.DiscoveredDatabaseMetadata
	0,   // 1: prehog.v1alpha.ResourceHeartbeatEvent.resource_kind:type_name -> prehog.v1alpha.ResourceKind
	20,  // 2: prehog.v1alpha.SessionStartEvent.database:type_name -> prehog.v1alpha.SessionStartDatabaseMetadata
	21,  // 3: prehog.v1alpha.SessionStartEvent.desktop:type_name -> prehog.v1alpha.SessionStartDesktopMetadata
	1,   // 4: prehog.v1alpha.SessionStartEvent.user_kind:type_name -> prehog.v1alpha.UserKind
	107, // 5: prehog.v1alpha.UserCertificateIssuedEvent.ttl:type_name -> google.protobuf.Duration
	1,   // 6: prehog.v1alpha.SPIFFESVIDIssuedEvent.user_kind:type_name -> prehog.v1alpha.UserKind
	2,   // 7: prehog.v1alpha.DiscoverResourceMetadata.resource:type_name -> prehog.v1alpha.DiscoverResource
	3,   // 8: prehog.v1alpha.DiscoverStepStatus.status:type_name -> prehog.v1alpha.DiscoverStatus
	34,  // 9: prehog.v1alpha.UIDiscoverStartedEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	36,  // 10: prehog.v1alpha.UIDiscoverStartedEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 11: prehog.v1alpha.UIDiscoverResourceSelectionEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 12: prehog.v1alpha.UIDiscoverResourceSelectionEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 13: prehog.v1alpha.UIDiscoverResourceSelectionEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 14: prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 15: prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 16: prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 17: prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 18: prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 19: prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 20: prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 21: prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 22: prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 23: prehog.v1alpha.UIDiscoverDeployServiceEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 24: prehog.v1alpha.UIDiscoverDeployServiceEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 25: prehog.v1alpha.UIDiscoverDeployServiceEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	10,  // 26: prehog.v1alpha.UIDiscoverDeployServiceEvent.deploy_method:type_name -> prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod
	11,  // 27: prehog.v1alpha.UIDiscoverDeployServiceEvent.deploy_type:type_name -> prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType
	34,  // 28: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 29: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 30: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	12,  // 31: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.config_method:type_name -> prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod
	34,  // 32: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 33: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 34: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 35: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 36: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 37: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 38: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 39: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 40: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 41: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 42: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 43: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 44: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 45: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 46: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 47: prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 48: prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 49: prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 50: prehog.v1alpha.UIDiscoverDeployEICEEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 51: prehog.v1alpha.UIDiscoverDeployEICEEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 52: prehog.v1alpha.UIDiscoverDeployEICEEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 53: prehog.v1alpha.UIDiscoverCreateNodeEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 54: prehog.v1alpha.UIDiscoverCreateNodeEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 55: prehog.v1alpha.UIDiscoverCreateNodeEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 56: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 57: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 58: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 59: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 60: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 61: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 62: prehog.v1alpha.UIDiscoverTestConnectionEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 63: prehog.v1alpha.UIDiscoverTestConnectionEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 64: prehog.v1alpha.UIDiscoverTestConnectionEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	34,  // 65: prehog.v1alpha.UIDiscoverCompletedEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	35,  // 66: prehog.v1alpha.UIDiscoverCompletedEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	36,  // 67: prehog.v1alpha.UIDiscoverCompletedEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	4,   // 68: prehog.v1alpha.UICallToActionClickEvent.cta:type_name -> prehog.v1alpha.CTA
	1,   // 69: prehog.v1alpha.KubeRequestEvent.user_kind:type_name -> prehog.v1alpha.UserKind
	1,   // 70: prehog.v1alpha.SFTPEvent.user_kind:type_name -> prehog.v1alpha.UserKind
	72,  // 71: prehog.v1alpha.AccessListCreateEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	72,  // 72: prehog.v1alpha.AccessListUpdateEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	72,  // 73: prehog.v1alpha.AccessListDeleteEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	72,  // 74: prehog.v1alpha.AccessListMemberCreateEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	72,  // 75: prehog.v1alpha.AccessListMemberUpdateEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	72,  // 76: prehog.v1alpha.AccessListMemberDeleteEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	72,  // 77: prehog.v1alpha.AccessListReviewCreateEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	72,  // 78: prehog.v1alpha.AccessListReviewDeleteEvent.metadata:type_name -> prehog.v1alpha.AccessListMetadata
	5,   // 79: prehog.v1alpha.IntegrationEnrollMetadata.kind:type_name -> prehog.v1alpha.IntegrationEnrollKind
	83,  // 80: prehog.v1alpha.UIIntegrationEnrollStartEvent.metadata:type_name -> prehog.v1alpha.IntegrationEnrollMetadata
	83,  // 81: prehog.v1alpha.UIIntegrationEnrollCompleteEvent.metadata:type_name -> prehog.v1alpha.IntegrationEnrollMetadata
	6,   // 82: prehog.v1alpha.EditorChangeEvent.status:type_name -> prehog.v1alpha.EditorChangeStatus
	7,   // 83: prehog.v1alpha.FeatureRecommendationEvent.feature:type_name -> prehog.v1alpha.Feature
	8,   // 84: prehog.v1alpha.FeatureRecommendationEvent.feature_recommendation_status:type_name -> prehog.v1alpha.FeatureRecommendationStatus
	9,   // 85: prehog.v1alpha.LicenseLimitEvent.license_limit:type_name -> prehog.v1alpha.LicenseLimit
	20,  // 86: prehog.v1alpha.DatabaseUserCreatedEvent.database:type_name -> prehog.v1alpha.SessionStartDatabaseMetadata
	20,  // 87: prehog.v1alpha.DatabaseUserPermissionsUpdateEvent.database:type_name -> prehog.v1alpha.SessionStartDatabaseMetadata
	108, // 88: prehog.v1alpha.SubmitEventRequest.timestamp:type_name -> google.protobuf.Timestamp
	13,  // 89: prehog.v1alpha.SubmitEventRequest.user_login:type_name -> prehog.v1alpha.UserLoginEvent
	15,  // 90: prehog.v1alpha.SubmitEventRequest.sso_create:type_name -> prehog.v1alpha.SSOCreateEvent
	16,  // 91: prehog.v1alpha.SubmitEventRequest.resource_create:type_name -> prehog.v1alpha.ResourceCreateEvent
	19,  // 92: prehog.v1alpha.SubmitEventRequest.session_start:type_name -> prehog.v1alpha.SessionStartEvent
	24,  // 93: prehog.v1alpha.SubmitEventRequest.ui_banner_click:type_name -> prehog.v1alpha.UIBannerClickEvent
	25,  // 94: prehog.v1alpha.SubmitEventRequest.ui_onboard_complete_go_to_dashboard_click:type_name -> prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
	26,  // 95: prehog.v1alpha.SubmitEventRequest.ui_onboard_add_first_resource_click:type_name -> prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
	27,  // 96: prehog.v1alpha.SubmitEventRequest.ui_onboard_add_first_resource_later_click:type_name -> prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
	28,  // 97: prehog.v1alpha.SubmitEventRequest.ui_onboard_set_credential_submit:type_name -> prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
	29,  // 98: prehog.v1alpha.SubmitEventRequest.ui_onboard_register_challenge_submit:type_name -> prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
	31,  // 99: prehog.v1alpha.SubmitEventRequest.ui_recovery_codes_continue_click:type_name -> prehog.v1alpha.UIRecoveryCodesContinueClickEvent
	32,  // 100: prehog.v1alpha.SubmitEventRequest.ui_recovery_codes_copy_click:type_name -> prehog.v1alpha.UIRecoveryCodesCopyClickEvent
	33,  // 101: prehog.v1alpha.SubmitEventRequest.ui_recovery_codes_print_click:type_name -> prehog.v1alpha.UIRecoveryCodesPrintClickEvent
	37,  // 102: prehog.v1alpha.SubmitEventRequest.ui_discover_started_event:type_name -> prehog.v1alpha.UIDiscoverStartedEvent
	38,  // 103: prehog.v1alpha.SubmitEventRequest.ui_discover_resource_selection_event:type_name -> prehog.v1alpha.UIDiscoverResourceSelectionEvent
	22,  // 104: prehog.v1alpha.SubmitEventRequest.user_certificate_issued_event:type_name -> prehog.v1alpha.UserCertificateIssuedEvent
	19,  // 105: prehog.v1alpha.SubmitEventRequest.session_start_v2:type_name -> prehog.v1alpha.SessionStartEvent
	42,  // 106: prehog.v1alpha.SubmitEventRequest.ui_discover_deploy_service_event:type_name -> prehog.v1alpha.UIDiscoverDeployServiceEvent
	44,  // 107: prehog.v1alpha.SubmitEventRequest.ui_discover_database_register_event:type_name -> prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
	45,  // 108: prehog.v1alpha.SubmitEventRequest.ui_discover_database_configure_mtls_event:type_name -> prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
	46,  // 109: prehog.v1alpha.SubmitEventRequest.ui_discover_desktop_active_directory_tools_install_event:type_name -> prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
	47,  // 110: prehog.v1alpha.SubmitEventRequest.ui_discover_desktop_active_directory_configure_event:type_name -> prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
	48,  // 111: prehog.v1alpha.SubmitEventRequest.ui_discover_auto_discovered_resources_event:type_name -> prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
	52,  // 112: prehog.v1alpha.SubmitEventRequest.ui_discover_database_configure_iam_policy_event:type_name -> prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
	53,  // 113: prehog.v1alpha.SubmitEventRequest.ui_discover_principals_configure_event:type_name -> prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
	54,  // 114: prehog.v1alpha.SubmitEventRequest.ui_discover_test_connection_event:type_name -> prehog.v1alpha.UIDiscoverTestConnectionEvent
	55,  // 115: prehog.v1alpha.SubmitEventRequest.ui_discover_completed_event:type_name -> prehog.v1alpha.UIDiscoverCompletedEvent
	56,  // 116: prehog.v1alpha.SubmitEventRequest.role_create:type_name -> prehog.v1alpha.RoleCreateEvent
	59,  // 117: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_click:type_name -> prehog.v1alpha.UICreateNewRoleClickEvent
	60,  // 118: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_save_click:type_name -> prehog.v1alpha.UICreateNewRoleSaveClickEvent
	61,  // 119: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_cancel_click:type_name -> prehog.v1alpha.UICreateNewRoleCancelClickEvent
	62,  // 120: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_view_documentation_click:type_name -> prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
	64,  // 121: prehog.v1alpha.SubmitEventRequest.kube_request:type_name -> prehog.v1alpha.KubeRequestEvent
	65,  // 122: prehog.v1alpha.SubmitEventRequest.sftp:type_name -> prehog.v1alpha.SFTPEvent
	66,  // 123: prehog.v1alpha.SubmitEventRequest.agent_metadata_event:type_name -> prehog.v1alpha.AgentMetadataEvent
	18,  // 124: prehog.v1alpha.SubmitEventRequest.resource_heartbeat:type_name -> prehog.v1alpha.ResourceHeartbeatEvent
	39,  // 125: prehog.v1alpha.SubmitEventRequest.ui_discover_integration_aws_oidc_connect_event:type_name -> prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent
	40,  // 126: prehog.v1alpha.SubmitEventRequest.ui_discover_database_rds_enroll_event:type_name -> prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent
	63,  // 127: prehog.v1alpha.SubmitEventRequest.ui_call_to_action_click_event:type_name -> prehog.v1alpha.UICallToActionClickEvent
	67,  // 128: prehog.v1alpha.SubmitEventRequest.assist_completion:type_name -> prehog.v1alpha.AssistCompletionEvent
	84,  // 129: prehog.v1alpha.SubmitEventRequest.ui_integration_enroll_start_event:type_name -> prehog.v1alpha.UIIntegrationEnrollStartEvent
	85,  // 130: prehog.v1alpha.SubmitEventRequest.ui_integration_enroll_complete_event:type_name -> prehog.v1alpha.UIIntegrationEnrollCompleteEvent
	86,  // 131: prehog.v1alpha.SubmitEventRequest.editor_change_event:type_name -> prehog.v1alpha.EditorChangeEvent
	57,  // 132: prehog.v1alpha.SubmitEventRequest.bot_create:type_name -> prehog.v1alpha.BotCreateEvent
	30,  // 133: prehog.v1alpha.SubmitEventRequest.ui_onboard_questionnaire_submit:type_name -> prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent
	58,  // 134: prehog.v1alpha.SubmitEventRequest.bot_join:type_name -> prehog.v1alpha.BotJoinEvent
	68,  // 135: prehog.v1alpha.SubmitEventRequest.assist_execution:type_name -> prehog.v1alpha.AssistExecutionEvent
	69,  // 136: prehog.v1alpha.SubmitEventRequest.assist_new_conversation:type_name -> prehog.v1alpha.AssistNewConversationEvent
	87,  // 137: prehog.v1alpha.SubmitEventRequest.device_authenticate_event:type_name -> prehog.v1alpha.DeviceAuthenticateEvent
	89,  // 138: prehog.v1alpha.SubmitEventRequest.feature_recommendation_event:type_name -> prehog.v1alpha.FeatureRecommendationEvent
	70,  // 139: prehog.v1alpha.SubmitEventRequest.assist_access_request:type_name -> prehog.v1alpha.AssistAccessRequestEvent
	71,  // 140: prehog.v1alpha.SubmitEventRequest.assist_action:type_name -> prehog.v1alpha.AssistActionEvent
	88,  // 141: prehog.v1alpha.SubmitEventRequest.device_enroll_event:type_name -> prehog.v1alpha.DeviceEnrollEvent
	90,  // 142: prehog.v1alpha.SubmitEventRequest.license_limit_event:type_name -> prehog.v1alpha.LicenseLimitEvent
	73,  // 143: prehog.v1alpha.SubmitEventRequest.access_list_create:type_name -> prehog.v1alpha.AccessListCreateEvent
	74,  // 144: prehog.v1alpha.SubmitEventRequest.access_list_update:type_name -> prehog.v1alpha.AccessListUpdateEvent
	75,  // 145: prehog.v1alpha.SubmitEventRequest.access_list_delete:type_name -> prehog.v1alpha.AccessListDeleteEvent
	76,  // 146: prehog.v1alpha.SubmitEventRequest.access_list_member_create:type_name -> prehog.v1alpha.AccessListMemberCreateEvent
	77,  // 147: prehog.v1alpha.SubmitEventRequest.access_list_member_update:type_name -> prehog.v1alpha.AccessListMemberUpdateEvent
	78,  // 148: prehog.v1alpha.SubmitEventRequest.access_list_member_delete:type_name -> prehog.v1alpha.AccessListMemberDeleteEvent
	79,  // 149: prehog.v1alpha.SubmitEventRequest.access_list_grants_to_user:type_name -> prehog.v1alpha.AccessListGrantsToUserEvent
	49,  // 150: prehog.v1alpha.SubmitEventRequest.ui_discover_ec2_instance_selection:type_name -> prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent
	50,  // 151: prehog.v1alpha.SubmitEventRequest.ui_discover_deploy_eice:type_name -> prehog.v1alpha.UIDiscoverDeployEICEEvent
	51,  // 152: prehog.v1alpha.SubmitEventRequest.ui_discover_create_node:type_name -> prehog.v1alpha.UIDiscoverCreateNodeEvent
	91,  // 153: prehog.v1alpha.SubmitEventRequest.desktop_directory_share:type_name -> prehog.v1alpha.DesktopDirectoryShareEvent
	92,  // 154: prehog.v1alpha.SubmitEventRequest.desktop_clipboard_transfer:type_name -> prehog.v1alpha.DesktopClipboardEvent
	93,  // 155: prehog.v1alpha.SubmitEventRequest.tag_execute_query:type_name -> prehog.v1alpha.TAGExecuteQueryEvent
	94,  // 156: prehog.v1alpha.SubmitEventRequest.external_audit_storage_authenticate:type_name -> prehog.v1alpha.ExternalAuditStorageAuthenticateEvent
	95,  // 157: prehog.v1alpha.SubmitEventRequest.security_report_get_result:type_name -> prehog.v1alpha.SecurityReportGetResultEvent
	96,  // 158: prehog.v1alpha.SubmitEventRequest.audit_query_run:type_name -> prehog.v1alpha.AuditQueryRunEvent
	97,  // 159: prehog.v1alpha.SubmitEventRequest.discovery_fetch_event:type_name -> prehog.v1alpha.DiscoveryFetchEvent
	80,  // 160: prehog.v1alpha.SubmitEventRequest.access_list_review_create:type_name -> prehog.v1alpha.AccessListReviewCreateEvent
	81,  // 161: prehog.v1alpha.SubmitEventRequest.access_list_review_delete:type_name -> prehog.v1alpha.AccessListReviewDeleteEvent
	82,  // 162: prehog.v1alpha.SubmitEventRequest.access_list_review_compliance:type_name -> prehog.v1alpha.AccessListReviewComplianceEvent
	14,  // 163: prehog.v1alpha.SubmitEventRequest.mfa_authentication_event:type_name -> prehog.v1alpha.MFAAuthenticationEvent
	23,  // 164: prehog.v1alpha.SubmitEventRequest.spiffe_svid_issued:type_name -> prehog.v1alpha.SPIFFESVIDIssuedEvent
	98,  // 165: prehog.v1alpha.SubmitEventRequest.okta_access_list_sync:type_name -> prehog.v1alpha.OktaAccessListSyncEvent
	99,  // 166: prehog.v1alpha.SubmitEventRequest.database_user_created:type_name -> prehog.v1alpha.DatabaseUserCreatedEvent
	100, // 167: prehog.v1alpha.SubmitEventRequest.database_user_permissions_updated:type_name -> prehog.v1alpha.DatabaseUserPermissionsUpdateEvent
	43,  // 168: prehog.v1alpha.SubmitEventRequest.ui_discover_create_discovery_config:type_name -> prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent
	41,  // 169: prehog.v1alpha.SubmitEventRequest.ui_discover_kube_eks_enroll_event:type_name -> prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent
	101, // 170: prehog.v1alpha.SubmitEventsRequest.events:type_name -> prehog.v1alpha.SubmitEventRequest
	101, // 171: prehog.v1alpha.TeleportReportingService.SubmitEvent:input_type -> prehog.v1alpha.SubmitEventRequest
	103, // 172: prehog.v1alpha.TeleportReportingService.SubmitEvents:input_type -> prehog.v1alpha.SubmitEventsRequest
	105, // 173: prehog.v1alpha.TeleportReportingService.HelloTeleport:input_type -> prehog.v1alpha.HelloTeleportRequest
	102, // 174: prehog.v1alpha.TeleportReportingService.SubmitEvent:output_type -> prehog.v1alpha.SubmitEventResponse
	104, // 175: prehog.v1alpha.TeleportReportingService.SubmitEvents:output_type -> prehog.v1alpha.SubmitEventsResponse
	106, // 176: prehog.v1alpha.TeleportReportingService.HelloTeleport:output_type -> prehog.v1alpha.HelloTeleportResponse
	174, // [174:177] is the sub-list for method output_type
	171, // [171:174] is the sub-list for method input_type
	171, // [171:171] is the sub-list for extension type_name
	171, // [171:171] is the sub-list for extension extendee
	0,   // [0:171] is the sub-list for field type_name
}

func init() { file_prehog_v1alpha_teleport_proto_init() }
func file_prehog_v1alpha_teleport_proto_init() {
	if File_prehog_v1alpha_teleport_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prehog_v1alpha_teleport_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UserLoginEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MFAAuthenticationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SSOCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoveredDatabaseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceHeartbeatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SessionStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SessionStartDatabaseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SessionStartDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UserCertificateIssuedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SPIFFESVIDIssuedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UIBannerClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UIOnboardCompleteGoToDashboardClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UIOnboardAddFirstResourceClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UIOnboardAddFirstResourceLaterClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UIOnboardSetCredentialSubmitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UIOnboardRegisterChallengeSubmitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UIOnboardQuestionnaireSubmitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UIRecoveryCodesContinueClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UIRecoveryCodesCopyClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UIRecoveryCodesPrintClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverResourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoverStepStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverResourceSelectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverIntegrationAWSOIDCConnectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDatabaseRDSEnrollEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverKubeEKSEnrollEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDeployServiceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverCreateDiscoveryConfigEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDatabaseRegisterEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDatabaseConfigureMTLSEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDesktopActiveDirectoryToolsInstallEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDesktopActiveDirectoryConfigureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverAutoDiscoveredResourcesEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverEC2InstanceSelectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDeployEICEEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverCreateNodeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverDatabaseConfigureIAMPolicyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverPrincipalsConfigureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverTestConnectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*UIDiscoverCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*RoleCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*BotCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*BotJoinEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*UICreateNewRoleClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*UICreateNewRoleSaveClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*UICreateNewRoleCancelClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*UICreateNewRoleViewDocumentationClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*UICallToActionClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*KubeRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*SFTPEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*AgentMetadataEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*AssistCompletionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*AssistExecutionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*AssistNewConversationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*AssistAccessRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*AssistActionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListMemberCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListMemberUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListMemberDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListGrantsToUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListReviewCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListReviewDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*AccessListReviewComplianceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*IntegrationEnrollMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*UIIntegrationEnrollStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*UIIntegrationEnrollCompleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*EditorChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceAuthenticateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceEnrollEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureRecommendationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*LicenseLimitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*DesktopDirectoryShareEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*DesktopClipboardEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*TAGExecuteQueryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*ExternalAuditStorageAuthenticateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*SecurityReportGetResultEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*AuditQueryRunEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*DiscoveryFetchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*OktaAccessListSyncEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*DatabaseUserCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*DatabaseUserPermissionsUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*HelloTeleportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*HelloTeleportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prehog_v1alpha_teleport_proto_msgTypes[88].OneofWrappers = []any{
		(*SubmitEventRequest_UserLogin)(nil),
		(*SubmitEventRequest_SsoCreate)(nil),
		(*SubmitEventRequest_ResourceCreate)(nil),
		(*SubmitEventRequest_SessionStart)(nil),
		(*SubmitEventRequest_UiBannerClick)(nil),
		(*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick)(nil),
		(*SubmitEventRequest_UiOnboardAddFirstResourceClick)(nil),
		(*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick)(nil),
		(*SubmitEventRequest_UiOnboardSetCredentialSubmit)(nil),
		(*SubmitEventRequest_UiOnboardRegisterChallengeSubmit)(nil),
		(*SubmitEventRequest_UiRecoveryCodesContinueClick)(nil),
		(*SubmitEventRequest_UiRecoveryCodesCopyClick)(nil),
		(*SubmitEventRequest_UiRecoveryCodesPrintClick)(nil),
		(*SubmitEventRequest_UiDiscoverStartedEvent)(nil),
		(*SubmitEventRequest_UiDiscoverResourceSelectionEvent)(nil),
		(*SubmitEventRequest_UserCertificateIssuedEvent)(nil),
		(*SubmitEventRequest_SessionStartV2)(nil),
		(*SubmitEventRequest_UiDiscoverDeployServiceEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent)(nil),
		(*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent)(nil),
		(*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent)(nil),
		(*SubmitEventRequest_UiDiscoverTestConnectionEvent)(nil),
		(*SubmitEventRequest_UiDiscoverCompletedEvent)(nil),
		(*SubmitEventRequest_RoleCreate)(nil),
		(*SubmitEventRequest_UiCreateNewRoleClick)(nil),
		(*SubmitEventRequest_UiCreateNewRoleSaveClick)(nil),
		(*SubmitEventRequest_UiCreateNewRoleCancelClick)(nil),
		(*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick)(nil),
		(*SubmitEventRequest_KubeRequest)(nil),
		(*SubmitEventRequest_Sftp)(nil),
		(*SubmitEventRequest_AgentMetadataEvent)(nil),
		(*SubmitEventRequest_ResourceHeartbeat)(nil),
		(*SubmitEventRequest_UiDiscoverIntegrationAwsOidcConnectEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDatabaseRdsEnrollEvent)(nil),
		(*SubmitEventRequest_UiCallToActionClickEvent)(nil),
		(*SubmitEventRequest_AssistCompletion)(nil),
		(*SubmitEventRequest_UiIntegrationEnrollStartEvent)(nil),
		(*SubmitEventRequest_UiIntegrationEnrollCompleteEvent)(nil),
		(*SubmitEventRequest_EditorChangeEvent)(nil),
		(*SubmitEventRequest_BotCreate)(nil),
		(*SubmitEventRequest_UiOnboardQuestionnaireSubmit)(nil),
		(*SubmitEventRequest_BotJoin)(nil),
		(*SubmitEventRequest_AssistExecution)(nil),
		(*SubmitEventRequest_AssistNewConversation)(nil),
		(*SubmitEventRequest_DeviceAuthenticateEvent)(nil),
		(*SubmitEventRequest_FeatureRecommendationEvent)(nil),
		(*SubmitEventRequest_AssistAccessRequest)(nil),
		(*SubmitEventRequest_AssistAction)(nil),
		(*SubmitEventRequest_DeviceEnrollEvent)(nil),
		(*SubmitEventRequest_LicenseLimitEvent)(nil),
		(*SubmitEventRequest_AccessListCreate)(nil),
		(*SubmitEventRequest_AccessListUpdate)(nil),
		(*SubmitEventRequest_AccessListDelete)(nil),
		(*SubmitEventRequest_AccessListMemberCreate)(nil),
		(*SubmitEventRequest_AccessListMemberUpdate)(nil),
		(*SubmitEventRequest_AccessListMemberDelete)(nil),
		(*SubmitEventRequest_AccessListGrantsToUser)(nil),
		(*SubmitEventRequest_UiDiscoverEc2InstanceSelection)(nil),
		(*SubmitEventRequest_UiDiscoverDeployEice)(nil),
		(*SubmitEventRequest_UiDiscoverCreateNode)(nil),
		(*SubmitEventRequest_DesktopDirectoryShare)(nil),
		(*SubmitEventRequest_DesktopClipboardTransfer)(nil),
		(*SubmitEventRequest_TagExecuteQuery)(nil),
		(*SubmitEventRequest_ExternalAuditStorageAuthenticate)(nil),
		(*SubmitEventRequest_SecurityReportGetResult)(nil),
		(*SubmitEventRequest_AuditQueryRun)(nil),
		(*SubmitEventRequest_DiscoveryFetchEvent)(nil),
		(*SubmitEventRequest_AccessListReviewCreate)(nil),
		(*SubmitEventRequest_AccessListReviewDelete)(nil),
		(*SubmitEventRequest_AccessListReviewCompliance)(nil),
		(*SubmitEventRequest_MfaAuthenticationEvent)(nil),
		(*SubmitEventRequest_SpiffeSvidIssued)(nil),
		(*SubmitEventRequest_OktaAccessListSync)(nil),
		(*SubmitEventRequest_DatabaseUserCreated)(nil),
		(*SubmitEventRequest_DatabaseUserPermissionsUpdated)(nil),
		(*SubmitEventRequest_UiDiscoverCreateDiscoveryConfig)(nil),
		(*SubmitEventRequest_UiDiscoverKubeEksEnrollEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prehog_v1alpha_teleport_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prehog_v1alpha_teleport_proto_goTypes,
		DependencyIndexes: file_prehog_v1alpha_teleport_proto_depIdxs,
		EnumInfos:         file_prehog_v1alpha_teleport_proto_enumTypes,
		MessageInfos:      file_prehog_v1alpha_teleport_proto_msgTypes,
	}.Build()
	File_prehog_v1alpha_teleport_proto = out.File
	file_prehog_v1alpha_teleport_proto_rawDesc = nil
	file_prehog_v1alpha_teleport_proto_goTypes = nil
	file_prehog_v1alpha_teleport_proto_depIdxs = nil
}
