//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: prehog/v1/teleport.proto

package prehogv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gravitational/teleport/gen/proto/go/prehog/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TeleportReportingServiceName is the fully-qualified name of the TeleportReportingService service.
	TeleportReportingServiceName = "prehog.v1.TeleportReportingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeleportReportingServiceSubmitUsageReportsProcedure is the fully-qualified name of the
	// TeleportReportingService's SubmitUsageReports RPC.
	TeleportReportingServiceSubmitUsageReportsProcedure = "/prehog.v1.TeleportReportingService/SubmitUsageReports"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	teleportReportingServiceServiceDescriptor                  = v1.File_prehog_v1_teleport_proto.Services().ByName("TeleportReportingService")
	teleportReportingServiceSubmitUsageReportsMethodDescriptor = teleportReportingServiceServiceDescriptor.Methods().ByName("SubmitUsageReports")
)

// TeleportReportingServiceClient is a client for the prehog.v1.TeleportReportingService service.
type TeleportReportingServiceClient interface {
	// encodes and forwards usage reports to the PostHog event database; each
	// event is annotated with some properties that depend on the identity of the
	// caller:
	//   - tp.account_id (UUID in string form, can be empty if missing from the
	//     license)
	//   - tp.license_name (should always be a UUID)
	//   - tp.license_authority (name of the authority that signed the license file
	//     used for authentication)
	//   - tp.is_cloud (boolean)
	SubmitUsageReports(context.Context, *connect.Request[v1.SubmitUsageReportsRequest]) (*connect.Response[v1.SubmitUsageReportsResponse], error)
}

// NewTeleportReportingServiceClient constructs a client for the prehog.v1.TeleportReportingService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeleportReportingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeleportReportingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &teleportReportingServiceClient{
		submitUsageReports: connect.NewClient[v1.SubmitUsageReportsRequest, v1.SubmitUsageReportsResponse](
			httpClient,
			baseURL+TeleportReportingServiceSubmitUsageReportsProcedure,
			connect.WithSchema(teleportReportingServiceSubmitUsageReportsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// teleportReportingServiceClient implements TeleportReportingServiceClient.
type teleportReportingServiceClient struct {
	submitUsageReports *connect.Client[v1.SubmitUsageReportsRequest, v1.SubmitUsageReportsResponse]
}

// SubmitUsageReports calls prehog.v1.TeleportReportingService.SubmitUsageReports.
func (c *teleportReportingServiceClient) SubmitUsageReports(ctx context.Context, req *connect.Request[v1.SubmitUsageReportsRequest]) (*connect.Response[v1.SubmitUsageReportsResponse], error) {
	return c.submitUsageReports.CallUnary(ctx, req)
}

// TeleportReportingServiceHandler is an implementation of the prehog.v1.TeleportReportingService
// service.
type TeleportReportingServiceHandler interface {
	// encodes and forwards usage reports to the PostHog event database; each
	// event is annotated with some properties that depend on the identity of the
	// caller:
	//   - tp.account_id (UUID in string form, can be empty if missing from the
	//     license)
	//   - tp.license_name (should always be a UUID)
	//   - tp.license_authority (name of the authority that signed the license file
	//     used for authentication)
	//   - tp.is_cloud (boolean)
	SubmitUsageReports(context.Context, *connect.Request[v1.SubmitUsageReportsRequest]) (*connect.Response[v1.SubmitUsageReportsResponse], error)
}

// NewTeleportReportingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeleportReportingServiceHandler(svc TeleportReportingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teleportReportingServiceSubmitUsageReportsHandler := connect.NewUnaryHandler(
		TeleportReportingServiceSubmitUsageReportsProcedure,
		svc.SubmitUsageReports,
		connect.WithSchema(teleportReportingServiceSubmitUsageReportsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/prehog.v1.TeleportReportingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeleportReportingServiceSubmitUsageReportsProcedure:
			teleportReportingServiceSubmitUsageReportsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeleportReportingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTeleportReportingServiceHandler struct{}

func (UnimplementedTeleportReportingServiceHandler) SubmitUsageReports(context.Context, *connect.Request[v1.SubmitUsageReportsRequest]) (*connect.Response[v1.SubmitUsageReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("prehog.v1.TeleportReportingService.SubmitUsageReports is not implemented"))
}
