/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "prehog/v1alpha/tbot.proto" (package "prehog.v1alpha", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp_pb";
/**
 * TbotStartEvent is triggered whenever tbot starts, regardless of whether tbot
 * was able to successfully connect to or authenticate with a Teleport cluster.
 *
 * @generated from protobuf message prehog.v1alpha.TbotStartEvent
 */
export interface TbotStartEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.TbotStartEvent.RunMode run_mode = 1;
     */
    runMode: TbotStartEvent_RunMode;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
    /**
     * @generated from protobuf field: string join_type = 3;
     */
    joinType: string;
    /**
     * @generated from protobuf field: string helper = 4;
     */
    helper: string;
    /**
     * @generated from protobuf field: string helper_version = 5;
     */
    helperVersion: string;
    /**
     * @generated from protobuf field: int32 destinations_other = 6;
     */
    destinationsOther: number;
    /**
     * @generated from protobuf field: int32 destinations_database = 7;
     */
    destinationsDatabase: number;
    /**
     * @generated from protobuf field: int32 destinations_kubernetes = 8;
     */
    destinationsKubernetes: number;
    /**
     * @generated from protobuf field: int32 destinations_application = 9;
     */
    destinationsApplication: number;
}
/**
 * RunMode specifies whether or not tbot has been configured to run once
 * and output certificates, or continually renew certificates in the
 * background.
 *
 * @generated from protobuf enum prehog.v1alpha.TbotStartEvent.RunMode
 */
export enum TbotStartEvent_RunMode {
    /**
     * @generated from protobuf enum value: RUN_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RUN_MODE_ONE_SHOT = 1;
     */
    ONE_SHOT = 1,
    /**
     * @generated from protobuf enum value: RUN_MODE_DAEMON = 2;
     */
    DAEMON = 2
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitTbotEventRequest
 */
export interface SubmitTbotEventRequest {
    /**
     * uuid identifying that tbot session. This is future-proofing for if we
     * decide to add multiple events in future, and need to tie them together.
     *
     * @generated from protobuf field: string distinct_id = 1;
     */
    distinctId: string;
    /**
     * optional, will default to the ingest time if unset
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "start";
        /**
         * @generated from protobuf field: prehog.v1alpha.TbotStartEvent start = 3;
         */
        start: TbotStartEvent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitTbotEventResponse
 */
export interface SubmitTbotEventResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class TbotStartEvent$Type extends MessageType<TbotStartEvent> {
    constructor() {
        super("prehog.v1alpha.TbotStartEvent", [
            { no: 1, name: "run_mode", kind: "enum", T: () => ["prehog.v1alpha.TbotStartEvent.RunMode", TbotStartEvent_RunMode, "RUN_MODE_"] },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "join_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "helper", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "helper_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "destinations_other", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "destinations_database", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "destinations_kubernetes", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "destinations_application", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TbotStartEvent>): TbotStartEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.runMode = 0;
        message.version = "";
        message.joinType = "";
        message.helper = "";
        message.helperVersion = "";
        message.destinationsOther = 0;
        message.destinationsDatabase = 0;
        message.destinationsKubernetes = 0;
        message.destinationsApplication = 0;
        if (value !== undefined)
            reflectionMergePartial<TbotStartEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TbotStartEvent): TbotStartEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.TbotStartEvent.RunMode run_mode */ 1:
                    message.runMode = reader.int32();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                case /* string join_type */ 3:
                    message.joinType = reader.string();
                    break;
                case /* string helper */ 4:
                    message.helper = reader.string();
                    break;
                case /* string helper_version */ 5:
                    message.helperVersion = reader.string();
                    break;
                case /* int32 destinations_other */ 6:
                    message.destinationsOther = reader.int32();
                    break;
                case /* int32 destinations_database */ 7:
                    message.destinationsDatabase = reader.int32();
                    break;
                case /* int32 destinations_kubernetes */ 8:
                    message.destinationsKubernetes = reader.int32();
                    break;
                case /* int32 destinations_application */ 9:
                    message.destinationsApplication = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TbotStartEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.TbotStartEvent.RunMode run_mode = 1; */
        if (message.runMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.runMode);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        /* string join_type = 3; */
        if (message.joinType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.joinType);
        /* string helper = 4; */
        if (message.helper !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.helper);
        /* string helper_version = 5; */
        if (message.helperVersion !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.helperVersion);
        /* int32 destinations_other = 6; */
        if (message.destinationsOther !== 0)
            writer.tag(6, WireType.Varint).int32(message.destinationsOther);
        /* int32 destinations_database = 7; */
        if (message.destinationsDatabase !== 0)
            writer.tag(7, WireType.Varint).int32(message.destinationsDatabase);
        /* int32 destinations_kubernetes = 8; */
        if (message.destinationsKubernetes !== 0)
            writer.tag(8, WireType.Varint).int32(message.destinationsKubernetes);
        /* int32 destinations_application = 9; */
        if (message.destinationsApplication !== 0)
            writer.tag(9, WireType.Varint).int32(message.destinationsApplication);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.TbotStartEvent
 */
export const TbotStartEvent = new TbotStartEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitTbotEventRequest$Type extends MessageType<SubmitTbotEventRequest> {
    constructor() {
        super("prehog.v1alpha.SubmitTbotEventRequest", [
            { no: 1, name: "distinct_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 3, name: "start", kind: "message", oneof: "event", T: () => TbotStartEvent }
        ]);
    }
    create(value?: PartialMessage<SubmitTbotEventRequest>): SubmitTbotEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.distinctId = "";
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SubmitTbotEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitTbotEventRequest): SubmitTbotEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string distinct_id */ 1:
                    message.distinctId = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 2:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* prehog.v1alpha.TbotStartEvent start */ 3:
                    message.event = {
                        oneofKind: "start",
                        start: TbotStartEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).start)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitTbotEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string distinct_id = 1; */
        if (message.distinctId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.distinctId);
        /* google.protobuf.Timestamp timestamp = 2; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.TbotStartEvent start = 3; */
        if (message.event.oneofKind === "start")
            TbotStartEvent.internalBinaryWrite(message.event.start, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitTbotEventRequest
 */
export const SubmitTbotEventRequest = new SubmitTbotEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitTbotEventResponse$Type extends MessageType<SubmitTbotEventResponse> {
    constructor() {
        super("prehog.v1alpha.SubmitTbotEventResponse", []);
    }
    create(value?: PartialMessage<SubmitTbotEventResponse>): SubmitTbotEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitTbotEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitTbotEventResponse): SubmitTbotEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubmitTbotEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitTbotEventResponse
 */
export const SubmitTbotEventResponse = new SubmitTbotEventResponse$Type();
/**
 * @generated ServiceType for protobuf service prehog.v1alpha.TbotReportingService
 */
export const TbotReportingService = new ServiceType("prehog.v1alpha.TbotReportingService", [
    { name: "SubmitTbotEvent", options: {}, I: SubmitTbotEventRequest, O: SubmitTbotEventResponse }
]);
