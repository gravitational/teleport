/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "prehog/v1alpha/teleport.proto" (package "prehog.v1alpha", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { HelloTeleportResponse } from "./teleport_pb";
import { HelloTeleportRequest } from "./teleport_pb";
import { SubmitEventsResponse } from "./teleport_pb";
import { SubmitEventsRequest } from "./teleport_pb";
import { SubmitEventResponse } from "./teleport_pb";
import { SubmitEventRequest } from "./teleport_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service prehog.v1alpha.TeleportReportingService
 */
export interface ITeleportReportingService extends grpc.UntypedServiceImplementation {
    /**
     * equivalent to SubmitEvents with a single event, should be unused by now
     *
     * @deprecated
     * @generated from protobuf rpc: SubmitEvent(prehog.v1alpha.SubmitEventRequest) returns (prehog.v1alpha.SubmitEventResponse);
     */
    submitEvent: grpc.handleUnaryCall<SubmitEventRequest, SubmitEventResponse>;
    /**
     * encodes and forwards usage events to the PostHog event database; each
     * event is annotated with some properties that depend on the identity of the
     * caller:
     * - tp.account_id (UUID in string form, can be empty if missing from the
     *   license)
     * - tp.license_name (should always be a UUID)
     * - tp.license_authority (name of the authority that signed the license file
     *   used for authentication)
     * - tp.is_cloud (boolean)
     *
     * @generated from protobuf rpc: SubmitEvents(prehog.v1alpha.SubmitEventsRequest) returns (prehog.v1alpha.SubmitEventsResponse);
     */
    submitEvents: grpc.handleUnaryCall<SubmitEventsRequest, SubmitEventsResponse>;
    /**
     * @generated from protobuf rpc: HelloTeleport(prehog.v1alpha.HelloTeleportRequest) returns (prehog.v1alpha.HelloTeleportResponse);
     */
    helloTeleport: grpc.handleUnaryCall<HelloTeleportRequest, HelloTeleportResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service prehog.v1alpha.TeleportReportingService.
 *
 * Usage: Implement the interface ITeleportReportingService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: ITeleportReportingService = ...
 * server.addService(teleportReportingServiceDefinition, service);
 * ```
 */
export const teleportReportingServiceDefinition: grpc.ServiceDefinition<ITeleportReportingService> = {
    submitEvent: {
        path: "/prehog.v1alpha.TeleportReportingService/SubmitEvent",
        originalName: "SubmitEvent",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SubmitEventResponse.fromBinary(bytes),
        requestDeserialize: bytes => SubmitEventRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SubmitEventResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SubmitEventRequest.toBinary(value))
    },
    submitEvents: {
        path: "/prehog.v1alpha.TeleportReportingService/SubmitEvents",
        originalName: "SubmitEvents",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SubmitEventsResponse.fromBinary(bytes),
        requestDeserialize: bytes => SubmitEventsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SubmitEventsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SubmitEventsRequest.toBinary(value))
    },
    helloTeleport: {
        path: "/prehog.v1alpha.TeleportReportingService/HelloTeleport",
        originalName: "HelloTeleport",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => HelloTeleportResponse.fromBinary(bytes),
        requestDeserialize: bytes => HelloTeleportRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(HelloTeleportResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(HelloTeleportRequest.toBinary(value))
    }
};
