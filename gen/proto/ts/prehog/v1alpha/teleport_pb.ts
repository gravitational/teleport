/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "prehog/v1alpha/teleport.proto" (package "prehog.v1alpha", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp_pb";
import { Duration } from "../../google/protobuf/duration_pb";
/**
 * a successful user login
 *
 * PostHog event: tp.user.login
 *
 * @generated from protobuf message prehog.v1alpha.UserLoginEvent
 */
export interface UserLoginEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
     * should always be a real user as bots and service accounts with long-term
     * credentials don't ever login
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * type of the auth connector used in the login, should be
     * "local"/"github"/"saml"/"oidc"
     *
     * PostHog property: tp.connector_type
     *
     * @generated from protobuf field: string connector_type = 2;
     */
    connectorType: string;
    /**
     * anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
     * for logins where device trust is enabled
     *
     * PostHog property: tp.device_id
     *
     * @generated from protobuf field: string device_id = 3;
     */
    deviceId: string;
    /**
     * the required private key policy for this login.
     *
     * @generated from protobuf field: string required_private_key_policy = 4;
     */
    requiredPrivateKeyPolicy: string;
}
/**
 * MFAAuthenticationEvent is emitted when a user performs MFA authentication.
 *
 * @generated from protobuf message prehog.v1alpha.MFAAuthenticationEvent
 */
export interface MFAAuthenticationEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
     * should always be a real user as bots and service accounts with long-term
     * credentials don't ever login
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
     * for logins where device trust is enabled
     *
     * PostHog property: tp.device_id
     *
     * @generated from protobuf field: string device_id = 2;
     */
    deviceId: string;
    /**
     * device type is the type of MFA device used
     *
     * @generated from protobuf field: string device_type = 3;
     */
    deviceType: string;
    /**
     * the authorization scope the MFA authentication
     *
     * @generated from protobuf field: string mfa_challenge_scope = 4;
     */
    mfaChallengeScope: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.SSOCreateEvent
 */
export interface SSOCreateEvent {
    /**
     * github/saml/oidc
     *
     * @generated from protobuf field: string connector_type = 1;
     */
    connectorType: string;
}
/**
 * ResourceCreateEvent is emitted when a resource is created.
 *
 * @generated from protobuf message prehog.v1alpha.ResourceCreateEvent
 */
export interface ResourceCreateEvent {
    /**
     * resource_type is the type of resource ("node", "node.openssh", "db", "k8s", "app").
     *
     * @generated from protobuf field: string resource_type = 1;
     */
    resourceType: string;
    /**
     * resource_origin is the origin of the resource ("cloud", "kubernetes").
     *
     * @generated from protobuf field: string resource_origin = 2;
     */
    resourceOrigin: string;
    /**
     * cloud_provider is the cloud provider the resource came from ("AWS", "Azure", "GCP")
     * if resource_origin == "cloud".
     *
     * @generated from protobuf field: string cloud_provider = 3;
     */
    cloudProvider: string;
    /**
     * database contains additional database information if resource_type == "db".
     *
     * @generated from protobuf field: prehog.v1alpha.DiscoveredDatabaseMetadata database = 4;
     */
    database?: DiscoveredDatabaseMetadata;
}
/**
 * DiscoveredDatabaseMetadata contains additional database information.
 *
 * @generated from protobuf message prehog.v1alpha.DiscoveredDatabaseMetadata
 */
export interface DiscoveredDatabaseMetadata {
    /**
     * database type.
     *
     * @generated from protobuf field: string db_type = 1;
     */
    dbType: string;
    /**
     * database protocol.
     *
     * @generated from protobuf field: string db_protocol = 2;
     */
    dbProtocol: string;
}
/**
 * a heartbeat for a resource served by a Teleport instance outside of the
 * control plane (i.e. not auth, not proxy)
 *
 * PostHog event: tp.resource.hb
 *
 * @generated from protobuf message prehog.v1alpha.ResourceHeartbeatEvent
 */
export interface ResourceHeartbeatEvent {
    /**
     * anonymized name of the resource, 32 bytes (HMAC-SHA-256); the name is the
     * host ID for nodes but the actual user-facing name for other resources, so
     * an app or a database served by multiple agents won't be counted multiple
     * times
     *
     * PreHog property: tp.resource_name (in base64)
     *
     * @generated from protobuf field: bytes resource_name = 1;
     */
    resourceName: Uint8Array;
    /**
     * kind of the resource (node, app, db)
     *
     * PostHog property: tp.resource_type (as a string, see ResourceKind)
     *
     * @generated from protobuf field: prehog.v1alpha.ResourceKind resource_kind = 2;
     */
    resourceKind: ResourceKind;
    /**
     * true if the heartbeat has no expiration
     *
     * PostHog property: tp.is_static
     *
     * @generated from protobuf field: bool static = 3;
     */
    static: boolean;
}
/**
 * an event representing one of several audit events: session.start, port,
 * app.session.start, db.session.start, windows.desktop.session.start; i.e. a
 * SSH shell or port-forward, kubectl exec or kubectl port-forward, DB, App or
 * Desktop connection
 *
 * an earlier encoding (as "tp.session.start") mixed SSH sessions and kubectl
 * execs under a session type of "ssh"
 *
 * PostHog event: tp.session.start
 *
 * @generated from protobuf message prehog.v1alpha.SessionStartEvent
 */
export interface SessionStartEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * type of the session, should be "ssh"/"k8s"/"db"/"app"/"desktop" (matching
     * the values for api/types.SessionKind) or "app_tcp", "ssh_port_v2" or
     * "k8s_port" for TCP Application Access connections, SSH port forwards and
     * kubectl port-forward respectively; a type of "ssh_port" represents either a
     * SSH port forwarding connection or a kubectl port-forward (not used in new
     * events)
     *
     * PostHog property: tp.session_type
     *
     * @generated from protobuf field: string session_type = 2;
     */
    sessionType: string;
    /**
     * if session_type == "db" the database struct contains additional information
     * about database session.
     *
     * PostHog property: tp.database
     *
     * @generated from protobuf field: prehog.v1alpha.SessionStartDatabaseMetadata database = 3;
     */
    database?: SessionStartDatabaseMetadata;
    /**
     * if session_type == "desktop" the desktop struct contains additional
     * information about the desktop session
     *
     * @generated from protobuf field: prehog.v1alpha.SessionStartDesktopMetadata desktop = 4;
     */
    desktop?: SessionStartDesktopMetadata;
    /**
     * Indicates this event was generated by a Machine ID bot user.
     *
     * @generated from protobuf field: prehog.v1alpha.UserKind user_kind = 5;
     */
    userKind: UserKind;
}
/**
 * SessionStartDatabaseMetadata contains additional information about database session.
 *
 * @generated from protobuf message prehog.v1alpha.SessionStartDatabaseMetadata
 */
export interface SessionStartDatabaseMetadata {
    /**
     * database type.
     *
     * @generated from protobuf field: string db_type = 1;
     */
    dbType: string;
    /**
     * database protocol.
     *
     * @generated from protobuf field: string db_protocol = 2;
     */
    dbProtocol: string;
    /**
     * database origin source.
     *
     * @generated from protobuf field: string db_origin = 3;
     */
    dbOrigin: string;
}
/**
 * SessionStartDesktop Metadata contains additional information about
 * a desktop session.
 *
 * @generated from protobuf message prehog.v1alpha.SessionStartDesktopMetadata
 */
export interface SessionStartDesktopMetadata {
    /**
     * desktop type ("ad" or "non-ad")
     *
     * @generated from protobuf field: string desktop_type = 1;
     */
    desktopType: string;
    /**
     * Indicates how the desktop was enrolled in Teleport
     * ("config-file" for statically defined hosts, or "dynamic" for
     * hosts discovered via LDAP).
     *
     * @generated from protobuf field: string origin = 2;
     */
    origin: string;
    /**
     * If desktop type is "ad" this field contains the anonymized Active
     * Directory domain that the desktop belongs to.
     *
     * @generated from protobuf field: string windows_domain = 3;
     */
    windowsDomain: string;
    /**
     * If true, and desktop type is "non-ad" automatic user creation is
     * enabled for the session. (This does not mean that the user will
     * be created, as Teleport does not know whether the user already exists.)
     *
     * @generated from protobuf field: bool allow_user_creation = 4;
     */
    allowUserCreation: boolean;
}
/**
 * the issuance of a user certificate from the user CA
 *
 * PostHog event: tp.certificate.issued
 *
 * @generated from protobuf message prehog.v1alpha.UserCertificateIssuedEvent
 */
export interface UserCertificateIssuedEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
     * can be the username of a bot user rather than of a regular user
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * the TTL of the issued certificate, typically 8 or 12 hours
     *
     * PostHog property: tp.ttl_minutes (in minutes, rounded up)
     *
     * @generated from protobuf field: google.protobuf.Duration ttl = 2;
     */
    ttl?: Duration;
    /**
     * If true, the certificate was requested by a bot (i.e. Machine ID) user.
     * PostHog property: tp.is_bot
     *
     * @generated from protobuf field: bool is_bot = 3;
     */
    isBot: boolean;
    /**
     * If true, the certificate usage is restricted to database access.
     * PostHog property: tp.usage_database
     *
     * @generated from protobuf field: bool usage_database = 4;
     */
    usageDatabase: boolean;
    /**
     * If true, the certificate usage is restricted to app access.
     * PostHog property: tp.usage_app
     *
     * @generated from protobuf field: bool usage_app = 5;
     */
    usageApp: boolean;
    /**
     * If true, the certificate usage is restricted to Kubernetes access.
     * PostHog property: tp.usage_kubernetes
     *
     * @generated from protobuf field: bool usage_kubernetes = 6;
     */
    usageKubernetes: boolean;
    /**
     * If true, the certificate usage is restricted to desktop access.
     * PostHog property: tp.usage_desktop
     *
     * @generated from protobuf field: bool usage_desktop = 7;
     */
    usageDesktop: boolean;
    /**
     * the private key policy associated with these user certificates.
     *
     * @generated from protobuf field: string private_key_policy = 8;
     */
    privateKeyPolicy: string;
}
/**
 * the issuance of a SPIFFE SVID
 *
 * PostHog event: tp.spiffe.svid.issued
 *
 * @generated from protobuf message prehog.v1alpha.SPIFFESVIDIssuedEvent
 */
export interface SPIFFESVIDIssuedEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
     * can be the username of a bot user rather than of a regular user
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * Indicates this event was generated by a Machine ID bot user.
     * PostHog property: tp.user_kind
     *
     * @generated from protobuf field: prehog.v1alpha.UserKind user_kind = 2;
     */
    userKind: UserKind;
    /**
     * anonymized SPIFFE ID, 32 bytes (HMAC-SHA-256) encoded in base64;
     *
     * PostHog property: tp.spiffe.id
     *
     * @generated from protobuf field: string spiffe_id = 3;
     */
    spiffeId: string;
    /**
     * Number of IP SANs included in the SVID
     * PostHog property: tp.spiffe.ip_sans_count
     *
     * @generated from protobuf field: int32 ip_sans_count = 4;
     */
    ipSansCount: number;
    /**
     * Number of DNS SANs included in the SVID
     * PostHog property: tp.spiffe.dns_sans_count
     *
     * @generated from protobuf field: int32 dns_sans_count = 5;
     */
    dnsSansCount: number;
    /**
     * Type of SVID issued. `x509` or `jwt`
     * PostHog property: tp.spiffe.svid_type
     *
     * @generated from protobuf field: string svid_type = 6;
     */
    svidType: string;
}
/**
 * UIBannerClickEvent is a usage event sent by the UI when the upgrade
 * banner is clicked.
 *
 * @generated from protobuf message prehog.v1alpha.UIBannerClickEvent
 */
export interface UIBannerClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * cluster alert name
     *
     * @generated from protobuf field: string alert = 2;
     */
    alert: string;
}
/**
 * UIOnboardCompleteGoToDashboardClickEvent is a UI event sent when initial
 * registration is complete.
 *
 * @generated from protobuf message prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
 */
export interface UIOnboardCompleteGoToDashboardClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UIOnboardAddFirstResourceClickEvent is a UI event sent when a user clicks the
 * "add first resource" button.
 *
 * @generated from protobuf message prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
 */
export interface UIOnboardAddFirstResourceClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UIOnboardAddFirstResourceLaterClickEvent is a UI event sent when a user
 * clicks the "add first resource later" button.
 *
 * @generated from protobuf message prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
 */
export interface UIOnboardAddFirstResourceLaterClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UIOnboardSetCredentialSubmitEvent is a UI event sent during registration when
 * users configure their credentials.
 *
 * @generated from protobuf message prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
 */
export interface UIOnboardSetCredentialSubmitEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UIOnboardRegisterChallengeSubmitEvent is a UI event sent during registration
 * when the MFA challenge is completed.
 *
 * @generated from protobuf message prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
 */
export interface UIOnboardRegisterChallengeSubmitEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: string mfa_type = 2;
     */
    mfaType: string;
    /**
     * @generated from protobuf field: string login_flow = 3;
     */
    loginFlow: string;
}
/**
 * UIOnboardQuestionnaireSubmitEvent is a UI event sent during registration when
 * user submits their onboarding questionnaire.
 *
 * @generated from protobuf message prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent
 */
export interface UIOnboardQuestionnaireSubmitEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UIRecoveryCodesContinueClickEvent is a UI event sent during
 * registration when the user configures cluster recovery codes.
 *
 * @generated from protobuf message prehog.v1alpha.UIRecoveryCodesContinueClickEvent
 */
export interface UIRecoveryCodesContinueClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UIRecoveryCodesCopyClickEvent is a UI event sent during
 * registration when the user copies recovery codes.
 *
 * @generated from protobuf message prehog.v1alpha.UIRecoveryCodesCopyClickEvent
 */
export interface UIRecoveryCodesCopyClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UIRecoveryCodesPrintClickEvent is a UI event sent during
 * registration when the user prints recovery codes.
 *
 * @generated from protobuf message prehog.v1alpha.UIRecoveryCodesPrintClickEvent
 */
export interface UIRecoveryCodesPrintClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * DiscoverMetadata contains common metadata for Discover related events.
 *
 * @generated from protobuf message prehog.v1alpha.DiscoverMetadata
 */
export interface DiscoverMetadata {
    /**
     * Uniquely identifies Discover wizard "session". Will allow to correlate
     * events within the same Discover wizard run.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * SSO indicates whether the user is from an SSO provider.
     *
     * @generated from protobuf field: bool sso = 3;
     */
    sso: boolean;
}
/**
 * DiscoverResourceMetadata contains common metadata identifying resource type being added.
 *
 * @generated from protobuf message prehog.v1alpha.DiscoverResourceMetadata
 */
export interface DiscoverResourceMetadata {
    /**
     * Resource type that is being added.
     *
     * @generated from protobuf field: prehog.v1alpha.DiscoverResource resource = 1;
     */
    resource: DiscoverResource;
}
/**
 * DiscoverStepStatus contains fields that track a particular step outcome,
 * for example connection test failed or succeeded, or user aborted the step.
 *
 * @generated from protobuf message prehog.v1alpha.DiscoverStepStatus
 */
export interface DiscoverStepStatus {
    /**
     * Indicates the step outcome.
     *
     * @generated from protobuf field: prehog.v1alpha.DiscoverStatus status = 1;
     */
    status: DiscoverStatus;
    /**
     * Contains error details in case of Error Status.
     * We have to be careful to not include any identifyable infomation like server addresses here.
     *
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * UIDiscoverStartedEvent is emitted when the wizard opens.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverStartedEvent
 */
export interface UIDiscoverStartedEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 2;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
 * and proceeded to the next step.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverResourceSelectionEvent
 */
export interface UIDiscoverResourceSelectionEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverIntegrationAWSOIDCConnectEvent is emitted when a user is finished with the step
 * that asks user to setup aws integration or select from a list of existing
 * aws integrations.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent
 */
export interface UIDiscoverIntegrationAWSOIDCConnectEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverDatabaseRDSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of RDS databases.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent
 */
export interface UIDiscoverDatabaseRDSEnrollEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
    /**
     * @generated from protobuf field: int64 selected_resources_count = 4;
     */
    selectedResourcesCount: bigint;
}
/**
 * UIDiscoverKubeEKSEnrollEvent is emitted when a user is finished with
 * the step that asks user to select from a list of EKS clusters.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent
 */
export interface UIDiscoverKubeEKSEnrollEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
 * For SSH this is the Teleport 'install-node' script.
 *
 * For Kubernetes this is the teleport-agent helm chart installation.
 *
 * For Database Access this step is the installation of the teleport 'install-db' script.
 * It can be skipped if the cluster already has a Database Service capable of proxying the database.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDeployServiceEvent
 */
export interface UIDiscoverDeployServiceEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
    /**
     * @generated from protobuf field: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod deploy_method = 4;
     */
    deployMethod: UIDiscoverDeployServiceEvent_DeployMethod;
    /**
     * @generated from protobuf field: prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType deploy_type = 5;
     */
    deployType: UIDiscoverDeployServiceEvent_DeployType;
}
/**
 * DeployMethod describes the method used to deploy a service.
 *
 * @generated from protobuf enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod
 */
export enum UIDiscoverDeployServiceEvent_DeployMethod {
    /**
     * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
     * so deploying step got skipped.
     *
     * @generated from protobuf enum value: DEPLOY_METHOD_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * DEPLOY_METHOD_AUTO means Teleport deployed a service for the user.
     *
     * @generated from protobuf enum value: DEPLOY_METHOD_AUTO = 1;
     */
    AUTO = 1,
    /**
     * DEPLOY_METHOD_MANUAL means a user deployed a service by themselves.
     *
     * @generated from protobuf enum value: DEPLOY_METHOD_MANUAL = 2;
     */
    MANUAL = 2
}
/**
 * DeployType describes the type of deployment.
 *
 * @generated from protobuf enum prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType
 */
export enum UIDiscoverDeployServiceEvent_DeployType {
    /**
     * DEPLOY_METHOD_UNSPECIFIED means there was an existing service
     * so deploying step got skipped.
     *
     * @generated from protobuf enum value: DEPLOY_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * DEPLOY_TYPE_INSTALL_SCRIPT means service was deployed using an
     * install script.
     *
     * @generated from protobuf enum value: DEPLOY_TYPE_INSTALL_SCRIPT = 1;
     */
    INSTALL_SCRIPT = 1,
    /**
     * DEPLOY_TYPE_AMAZON_ECS means service was deployed using amazon's
     * elastic container service.
     *
     * @generated from protobuf enum value: DEPLOY_TYPE_AMAZON_ECS = 2;
     */
    AMAZON_ECS = 2
}
/**
 * UIDiscoverCreateDiscoveryConfigEvent is emitted when a discovery config is successfully created.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent
 */
export interface UIDiscoverCreateDiscoveryConfigEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
    /**
     * @generated from protobuf field: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod config_method = 4;
     */
    configMethod: UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod;
}
/**
 * ConfigMethod describes how the discovery config is configured.
 *
 * @generated from protobuf enum prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod
 */
export enum UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod {
    /**
     * CONFIG_METHOD_UNSPECIFIED means config method unspecified/unset.
     *
     * @generated from protobuf enum value: CONFIG_METHOD_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * CONFIG_METHOD_SSM means EC2 auto discovery configured with ssm.
     *
     * @generated from protobuf enum value: CONFIG_METHOD_AWS_EC2_SSM = 1;
     */
    AWS_EC2_SSM = 1,
    /**
     * CONFIG_METHOD_SSM means auto discovery configured for EC2 using EICE.
     *
     * @generated from protobuf enum value: CONFIG_METHOD_AWS_EC2_EICE = 2;
     */
    AWS_EC2_EICE = 2,
    /**
     * CONFIG_METHOD_SSM means auto discovery configured for RDS using ECS.
     *
     * @generated from protobuf enum value: CONFIG_METHOD_AWS_RDS_ECS = 3;
     */
    AWS_RDS_ECS = 3,
    /**
     * CONFIG_METHOD_SSM means auto discovery configured for EKS.
     *
     * @generated from protobuf enum value: CONFIG_METHOD_AWS_EKS = 4;
     */
    AWS_EKS = 4
}
/**
 * UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
 */
export interface UIDiscoverDatabaseRegisterEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
 */
export interface UIDiscoverDatabaseConfigureMTLSEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
 */
export interface UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
 */
export interface UIDiscoverDesktopActiveDirectoryConfigureEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
 * resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
 */
export interface UIDiscoverAutoDiscoveredResourcesEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
    /**
     * @generated from protobuf field: int64 resources_count = 4;
     */
    resourcesCount: bigint;
}
/**
 * UIDiscoverEC2InstanceSelectionEvent is emitted when the user is finished with the step that asks the user to select an EC2 Instance to enroll.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent
 */
export interface UIDiscoverEC2InstanceSelectionEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverDeployEICEEvent is emitted when the user deploys an EC2 Instance Connect Endpoint.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDeployEICEEvent
 */
export interface UIDiscoverDeployEICEEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverCreateNodeEvent is emitted when the node is created in Teleport.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverCreateNodeEvent
 */
export interface UIDiscoverCreateNodeEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
 */
export interface UIDiscoverDatabaseConfigureIAMPolicyEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
 */
export interface UIDiscoverPrincipalsConfigureEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
 * when the user clicked tested connection to their resource.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverTestConnectionEvent
 */
export interface UIDiscoverTestConnectionEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
 *
 * @generated from protobuf message prehog.v1alpha.UIDiscoverCompletedEvent
 */
export interface UIDiscoverCompletedEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverMetadata metadata = 1;
     */
    metadata?: DiscoverMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverResourceMetadata resource = 2;
     */
    resource?: DiscoverResourceMetadata;
    /**
     * @generated from protobuf field: prehog.v1alpha.DiscoverStepStatus status = 3;
     */
    status?: DiscoverStepStatus;
}
/**
 * RoleCreateEvent is emitted when user creates a custom role.
 *
 * @generated from protobuf message prehog.v1alpha.RoleCreateEvent
 */
export interface RoleCreateEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string role_name = 2;
     */
    roleName: string;
}
/**
 * BotCreateEvent is emitted when user creates a bot.
 *
 * @generated from protobuf message prehog.v1alpha.BotCreateEvent
 */
export interface BotCreateEvent {
    /**
     * user_name is the anonymized name of the user who created the bot
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string bot_user_name = 2;
     */
    botUserName: string;
    /**
     * role_name is the anonymized name of the bot role that was created.
     *
     * @generated from protobuf field: string role_name = 3;
     */
    roleName: string;
    /**
     * role_count is the number of roles that the bot role can impersonate on
     * creation.
     *
     * @generated from protobuf field: int64 role_count = 4;
     */
    roleCount: bigint;
    /**
     * join_method is the join method of the token associated with the bot on
     * creation.
     *
     * @generated from protobuf field: string join_method = 5;
     */
    joinMethod: string;
    /**
     * bot_name is the anonymised name of the bot.
     *
     * @generated from protobuf field: string bot_name = 6;
     */
    botName: string;
}
/**
 * BotJoinEvent is emitted when a bot joins a Teleport cluster.
 *
 * @generated from protobuf message prehog.v1alpha.BotJoinEvent
 */
export interface BotJoinEvent {
    /**
     * bot_name is the anonymised name of the bot.
     *
     * @generated from protobuf field: string bot_name = 1;
     */
    botName: string;
    /**
     * join_method is the join method of the token associated with the bot on
     * creation. This will be the string value of `api/types.JoinMethod`.
     *
     * @generated from protobuf field: string join_method = 2;
     */
    joinMethod: string;
    /**
     * join_token_name is the anonymised name of the token used to join
     * the cluster.
     *
     * @generated from protobuf field: string join_token_name = 3;
     */
    joinTokenName: string;
    /**
     * user_name is the anonymised name of the Bot user.
     *
     * @generated from protobuf field: string user_name = 4;
     */
    userName: string;
}
/**
 * UICreateNewRoleClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from protobuf message prehog.v1alpha.UICreateNewRoleClickEvent
 */
export interface UICreateNewRoleClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UICreateNewRoleSaveClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from protobuf message prehog.v1alpha.UICreateNewRoleSaveClickEvent
 */
export interface UICreateNewRoleSaveClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UICreateNewRoleCancelClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from protobuf message prehog.v1alpha.UICreateNewRoleCancelClickEvent
 */
export interface UICreateNewRoleCancelClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UICreateNewRoleViewDocumentationClickEvent is an event that can be triggered during custom role creation
 *
 * @generated from protobuf message prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
 */
export interface UICreateNewRoleViewDocumentationClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
}
/**
 * UICallToActionClickEvent is a click in a Teleport Web UI's CTA
 *
 * @generated from protobuf message prehog.v1alpha.UICallToActionClickEvent
 */
export interface UICallToActionClickEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.CTA cta = 2;
     */
    cta: CTA;
}
/**
 * a request forwarded to a kube cluster's API server (other than exec and
 * port-forward)
 *
 * PostHog event: tp.kube.request
 *
 * @generated from protobuf message prehog.v1alpha.KubeRequestEvent
 */
export interface KubeRequestEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * Indicates the kind of user (e.g. bot or human), if known.
     *
     * @generated from protobuf field: prehog.v1alpha.UserKind user_kind = 2;
     */
    userKind: UserKind;
}
/**
 * an sftp event, represents a single operation on a file
 *
 * PostHog event: tp.sftp
 *
 * @generated from protobuf message prehog.v1alpha.SFTPEvent
 */
export interface SFTPEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * matching SFTPAction in teleport/api/types/events/events.proto
     *
     * @generated from protobuf field: int32 action = 2;
     */
    action: number;
    /**
     * Indicates the kind of user (bot or human), if known.
     *
     * @generated from protobuf field: prehog.v1alpha.UserKind user_kind = 3;
     */
    userKind: UserKind;
}
/**
 * @generated from protobuf message prehog.v1alpha.AgentMetadataEvent
 */
export interface AgentMetadataEvent {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * @generated from protobuf field: string host_id = 2;
     */
    hostId: string;
    /**
     * @generated from protobuf field: repeated string services = 3;
     */
    services: string[];
    /**
     * @generated from protobuf field: string os = 4;
     */
    os: string;
    /**
     * @generated from protobuf field: string os_version = 5;
     */
    osVersion: string;
    /**
     * @generated from protobuf field: string host_architecture = 6;
     */
    hostArchitecture: string;
    /**
     * @generated from protobuf field: string glibc_version = 7;
     */
    glibcVersion: string;
    /**
     * @generated from protobuf field: repeated string install_methods = 8;
     */
    installMethods: string[];
    /**
     * @generated from protobuf field: string container_runtime = 9;
     */
    containerRuntime: string;
    /**
     * @generated from protobuf field: string container_orchestrator = 10;
     */
    containerOrchestrator: string;
    /**
     * @generated from protobuf field: string cloud_environment = 11;
     */
    cloudEnvironment: string;
    /**
     * external_upgrader is the name of the registered external upgrader. if non-empty, this field indicates
     * that the associated agent is enrolled in automatic upgrades.
     *
     * @generated from protobuf field: string external_upgrader = 12;
     */
    externalUpgrader: string;
}
/**
 * AssistCompletionEvent is an event that is emitted
 * when a single completion occurs in the Teleport Assist,
 * i.e. a user submits a prompt, and receives an answer from the Assist
 *
 * @generated from protobuf message prehog.v1alpha.AssistCompletionEvent
 */
export interface AssistCompletionEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * ConversationId is the UUID that identifies a single Assist conversation
     *
     * @generated from protobuf field: string conversation_id = 2;
     */
    conversationId: string;
    /**
     * TotalTokens is the total amount of token used to satisfy this request
     *
     * @generated from protobuf field: int64 total_tokens = 3;
     */
    totalTokens: bigint;
    /**
     * PromptTokens is the amount of estimated tokens used by the prompt
     *
     * @generated from protobuf field: int64 prompt_tokens = 4;
     */
    promptTokens: bigint;
    /**
     * CompletionTokens is the amount of tokens that the completion response consists of
     *
     * @generated from protobuf field: int64 completion_tokens = 5;
     */
    completionTokens: bigint;
}
/**
 * AssistExecutionEvent is an event that is emitted when an Assist command
 * execution is triggered by the user.
 *
 * @generated from protobuf message prehog.v1alpha.AssistExecutionEvent
 */
export interface AssistExecutionEvent {
    /**
     * UserName is anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * ConversationId is the UUID that identifies a single Assist conversation
     *
     * @generated from protobuf field: string conversation_id = 2;
     */
    conversationId: string;
    /**
     * NodeCount is the number of nodes the command was executed on
     *
     * @generated from protobuf field: int64 node_count = 3;
     */
    nodeCount: bigint;
    /**
     * TotalTokens is the total amount of token used to generate the command summary
     *
     * @generated from protobuf field: int64 total_tokens = 4;
     */
    totalTokens: bigint;
    /**
     * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
     *
     * @generated from protobuf field: int64 prompt_tokens = 5;
     */
    promptTokens: bigint;
    /**
     * CompletionTokens is the amount of tokens that the summary completion response consists of
     *
     * @generated from protobuf field: int64 completion_tokens = 6;
     */
    completionTokens: bigint;
}
/**
 * AssistNewConversationEvent is an event that is emitted for each new Assist
 * conversation and contains the conversation category.
 *
 * @generated from protobuf message prehog.v1alpha.AssistNewConversationEvent
 */
export interface AssistNewConversationEvent {
    /**
     * UserName is anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * Category is the conversation category. This represents what kind of request
     * the user is asking Assist.
     *
     * @generated from protobuf field: string category = 2;
     */
    category: string;
}
/**
 * AssistAccessRequest is an event that is emitted when a user requests access
 * to a resource via Assist.
 *
 * @generated from protobuf message prehog.v1alpha.AssistAccessRequestEvent
 */
export interface AssistAccessRequestEvent {
    /**
     * UserName is anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * ResourceType describes the type of resource the user is requesting access to, e.g. "node", "db", "k8s" or "role".
     *
     * @generated from protobuf field: string resource_type = 2;
     */
    resourceType: string;
    /**
     * TotalTokens is the total amount of token used to generate the command summary
     *
     * @generated from protobuf field: int64 total_tokens = 4;
     */
    totalTokens: bigint;
    /**
     * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
     *
     * @generated from protobuf field: int64 prompt_tokens = 5;
     */
    promptTokens: bigint;
    /**
     * CompletionTokens is the amount of tokens that the summary completion response consists of
     *
     * @generated from protobuf field: int64 completion_tokens = 6;
     */
    completionTokens: bigint;
}
/**
 * AssistAction is an event that is emitted when a user triggers an action (SSH command generation, output explain, etc.)
 * via Assist.
 *
 * @generated from protobuf message prehog.v1alpha.AssistActionEvent
 */
export interface AssistActionEvent {
    /**
     * UserName is anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * Action is the action that was triggered, e.g. "ssh-explain", "ssh-command-generate", etc.
     *
     * @generated from protobuf field: string action = 2;
     */
    action: string;
    /**
     * TotalTokens is the total amount of token used to generate the command summary
     *
     * @generated from protobuf field: int64 total_tokens = 4;
     */
    totalTokens: bigint;
    /**
     * PromptTokens is the amount of estimated tokens used by the prompt to generate the command summary
     *
     * @generated from protobuf field: int64 prompt_tokens = 5;
     */
    promptTokens: bigint;
    /**
     * CompletionTokens is the amount of tokens that the summary completion response consists of
     *
     * @generated from protobuf field: int64 completion_tokens = 6;
     */
    completionTokens: bigint;
}
/**
 * AccessListMetadata contains common metadata for Access List related events.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListMetadata
 */
export interface AccessListMetadata {
    /**
     * id uniquely identifies an Access List. Will allow correlation of events within an access list.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * AccessListCreate is an event that is emitted when an access list is created.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListCreateEvent
 */
export interface AccessListCreateEvent {
    /**
     * user_name is the anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
}
/**
 * AccessListUpdate is an event that is emitted when an access list is updated.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListUpdateEvent
 */
export interface AccessListUpdateEvent {
    /**
     * user_name is the anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
}
/**
 * AccessListDelete is an event that is emitted when an access list is deleted.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListDeleteEvent
 */
export interface AccessListDeleteEvent {
    /**
     * user_name is the anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
}
/**
 * AccessListMemberCreate is an event that is emitted when a member is added to an access list.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListMemberCreateEvent
 */
export interface AccessListMemberCreateEvent {
    /**
     * user_name is the anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
}
/**
 * AccessListMemberUpdate is an event that is emitted when a member is updated in an access list.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListMemberUpdateEvent
 */
export interface AccessListMemberUpdateEvent {
    /**
     * user_name is the anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
}
/**
 * AccessListMemberDelete is an event that is emitted when a member is removed from an access list.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListMemberDeleteEvent
 */
export interface AccessListMemberDeleteEvent {
    /**
     * user_name is anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
}
/**
 * AccessListGrantsToUser is an event that is emitted when access list permissions are granted to a user
 * on login.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListGrantsToUserEvent
 */
export interface AccessListGrantsToUserEvent {
    /**
     * user_name is the anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * count_roles_granted is the number of roles granted to a user.
     *
     * @generated from protobuf field: int32 count_roles_granted = 2;
     */
    countRolesGranted: number;
    /**
     * count_traits_granted is the number of traits granted to a user.
     *
     * @generated from protobuf field: int32 count_traits_granted = 3;
     */
    countTraitsGranted: number;
}
/**
 * AccessListReviewCreateEvent is an event that is emitted when an access list review is created.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListReviewCreateEvent
 */
export interface AccessListReviewCreateEvent {
    /**
     * user_name is anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
    /**
     * days_past_next_audit_date is how many days past the next audit date the review came in. Can be negative.
     *
     * @generated from protobuf field: int32 days_past_next_audit_date = 3;
     */
    daysPastNextAuditDate: number;
    /**
     * membership_requirements_changed indicates that the membership requirements were changed.
     *
     * @generated from protobuf field: bool membership_requirements_changed = 4;
     */
    membershipRequirementsChanged: boolean;
    /**
     * review_frequency_changed indicates that the review frequency was changed.
     *
     * @generated from protobuf field: bool review_frequency_changed = 5;
     */
    reviewFrequencyChanged: boolean;
    /**
     * review_day_of_month_changed indicates that the review day of month was changed.
     *
     * @generated from protobuf field: bool review_day_of_month_changed = 6;
     */
    reviewDayOfMonthChanged: boolean;
    /**
     * number_of_removed_members is how many members were removed as part of this review.
     *
     * @generated from protobuf field: int32 number_of_removed_members = 7;
     */
    numberOfRemovedMembers: number;
}
/**
 * AccessListReviewDeleteEvent is an event that is emitted when an access list review is deleted.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListReviewDeleteEvent
 */
export interface AccessListReviewDeleteEvent {
    /**
     * user_name is anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.AccessListMetadata metadata = 2;
     */
    metadata?: AccessListMetadata;
    /**
     * access_list_review_id is the unique identifier for the access list review.
     *
     * @generated from protobuf field: string access_list_review_id = 3;
     */
    accessListReviewId: string;
}
/**
 * AccessListReviewComplianceEvent is an event that is emitted periodically to indicate how many access
 * lists are past due for a review.
 *
 * @generated from protobuf message prehog.v1alpha.AccessListReviewComplianceEvent
 */
export interface AccessListReviewComplianceEvent {
    /**
     * total_access_lists is the total number of access lists known to Teleport.
     *
     * @generated from protobuf field: int32 total_access_lists = 1;
     */
    totalAccessLists: number;
    /**
     * access_lists_need_review is the number of access lists that need a review.
     *
     * @generated from protobuf field: int32 access_lists_need_review = 2;
     */
    accessListsNeedReview: number;
}
/**
 * IntegrationEnrollMetadata contains common metadata
 * for Integration Enroll related events.
 *
 * @generated from protobuf message prehog.v1alpha.IntegrationEnrollMetadata
 */
export interface IntegrationEnrollMetadata {
    /**
     * id is used as a unique identifier to correlate events within the
     * same enroll wizard run.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * kind identifies what type of integration the user clicked on to enroll.
     *
     * @generated from protobuf field: prehog.v1alpha.IntegrationEnrollKind kind = 2;
     */
    kind: IntegrationEnrollKind;
    /**
     * user_name is anonymized.
     *
     * @generated from protobuf field: string user_name = 3;
     */
    userName: string;
}
/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * clicks on a integration to enroll.
 *
 * @generated from protobuf message prehog.v1alpha.UIIntegrationEnrollStartEvent
 */
export interface UIIntegrationEnrollStartEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.IntegrationEnrollMetadata metadata = 1;
     */
    metadata?: IntegrationEnrollMetadata;
}
/**
 * UIIntegrationEnrollEvent is an event that is emitted when a user
 * completed enrolling an integration.
 *
 * @generated from protobuf message prehog.v1alpha.UIIntegrationEnrollCompleteEvent
 */
export interface UIIntegrationEnrollCompleteEvent {
    /**
     * @generated from protobuf field: prehog.v1alpha.IntegrationEnrollMetadata metadata = 1;
     */
    metadata?: IntegrationEnrollMetadata;
}
/**
 * EditorChangeEvent is an event that is emitted when a user role set changes resulting in
 * a editor role being added on removed
 *
 * @generated from protobuf message prehog.v1alpha.EditorChangeEvent
 */
export interface EditorChangeEvent {
    /**
     * anonymized user name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: prehog.v1alpha.EditorChangeStatus status = 2;
     */
    status: EditorChangeStatus;
}
/**
 * Device authentication event
 *
 * @generated from protobuf message prehog.v1alpha.DeviceAuthenticateEvent
 */
export interface DeviceAuthenticateEvent {
    /**
     * anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.device_id
     *
     * @generated from protobuf field: string device_id = 1;
     */
    deviceId: string;
    /**
     * anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * device OS type
     *
     * PostHog property: tp.device_os_type
     *
     * @generated from protobuf field: string device_os_type = 3;
     */
    deviceOsType: string;
}
/**
 * Device Enrollment event
 *
 * PostHost event: tp.device.enroll
 *
 * @generated from protobuf message prehog.v1alpha.DeviceEnrollEvent
 */
export interface DeviceEnrollEvent {
    /**
     * anonymized device ID, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.device_id
     *
     * @generated from protobuf field: string device_id = 1;
     */
    deviceId: string;
    /**
     * anonymized username, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * device OS type
     *
     * PostHog property: tp.device_os_type
     *
     * @generated from protobuf field: string device_os_type = 3;
     */
    deviceOsType: string;
    /**
     * device origin
     *
     * PostHog property: tp.device_origin
     *
     * @generated from protobuf field: string device_origin = 4;
     */
    deviceOrigin: string;
}
/**
 * FeatureRecommendationEvent captures event emitted when a feature is recommended to user or
 * when user completes the desired CTA for the feature.
 *
 * PostHost event: tp.ui.feature.recommendation
 *
 * @generated from protobuf message prehog.v1alpha.FeatureRecommendationEvent
 */
export interface FeatureRecommendationEvent {
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * feature is name of the Teleport feature.
     *
     * PostHog property: tp.feature
     *
     * @generated from protobuf field: prehog.v1alpha.Feature feature = 2;
     */
    feature: Feature;
    /**
     * feature_recommendation_status records recommendation state, which can be 'NOTIFIED' (feature is recommended)
     * OR 'DONE' (user completes desired CTA)
     *
     * PostHost property: tp.feature_recommendation_status
     *
     * @generated from protobuf field: prehog.v1alpha.FeatureRecommendationStatus feature_recommendation_status = 3;
     */
    featureRecommendationStatus: FeatureRecommendationStatus;
}
/**
 * LicenseLimitEvent is emitted when access to Teleport feature
 * is denied based on license limits
 *
 * PostHost event: tp.license.limit
 *
 * @generated from protobuf message prehog.v1alpha.LicenseLimitEvent
 */
export interface LicenseLimitEvent {
    /**
     * PostHost property: tp.license_limit
     *
     * @generated from protobuf field: prehog.v1alpha.LicenseLimit license_limit = 1;
     */
    licenseLimit: LicenseLimit;
}
/**
 * DesktopDirectoryShareEvent is emitted when directory sharing is used
 * in a Teleport desktop session.
 *
 * @generated from protobuf message prehog.v1alpha.DesktopDirectoryShareEvent
 */
export interface DesktopDirectoryShareEvent {
    /**
     * anonymized desktop addr, used to uniquely idenfity the desktop
     *
     * PostHog property: tp.desktop
     *
     * @generated from protobuf field: string desktop = 1;
     */
    desktop: string;
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * anonymized directory name
     *
     * PostHog property: tp.directory_name
     *
     * @generated from protobuf field: string directory_name = 3;
     */
    directoryName: string;
}
/**
 * DesktopClipboardEvent is emitted when data is transferred between a user's
 * local clipboard and a remote Windows clipboard.
 *
 * @generated from protobuf message prehog.v1alpha.DesktopClipboardEvent
 */
export interface DesktopClipboardEvent {
    /**
     * anonymized desktop addr, used to uniquely idenfity the desktop
     *
     * PostHog property: tp.desktop
     *
     * @generated from protobuf field: string desktop = 1;
     */
    desktop: string;
    /**
     * anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
     *
     * PostHog property: tp.user_name
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
}
/**
 * TAGExecuteQueryEvent is an event that is emitted
 * when a single query is executed in the Teleport Access Graph.
 * This event is emitted for both successful and failed queries. For
 * successful queries, the total number of nodes and edges is reported.
 *
 * @generated from protobuf message prehog.v1alpha.TAGExecuteQueryEvent
 */
export interface TAGExecuteQueryEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * total_nodes is the total amount of nodes returned by the query.
     *
     * @generated from protobuf field: int64 total_nodes = 2;
     */
    totalNodes: bigint;
    /**
     * total_edges is the total amount of edges returned by the query.
     *
     * @generated from protobuf field: int64 total_edges = 3;
     */
    totalEdges: bigint;
    /**
     * is_success is true if the query was successful and false it if failed.
     *
     * @generated from protobuf field: bool is_success = 4;
     */
    isSuccess: boolean;
}
/**
 * ExternalAuditStorageAuthenticateEvent is emitted when the External Audit
 * Storage feature authenticates to the customer AWS account via OIDC connector.
 * The purpose is to have a regularly emitted event indicating that the External
 * Audit Storage feature is still in use.
 *
 * @generated from protobuf message prehog.v1alpha.ExternalAuditStorageAuthenticateEvent
 */
export interface ExternalAuditStorageAuthenticateEvent {
}
/**
 * SecurityReportGetResultEvent is emitted when the user requests a security report.
 *
 * @generated from protobuf message prehog.v1alpha.SecurityReportGetResultEvent
 */
export interface SecurityReportGetResultEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * name is the name of the security report.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * days is the time range of the security reports in days.
     *
     * @generated from protobuf field: int32 days = 3;
     */
    days: number;
}
/**
 * AuditQueryRunEvent is emitted when the user runs an audit query.
 *
 * @generated from protobuf message prehog.v1alpha.AuditQueryRunEvent
 */
export interface AuditQueryRunEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 1;
     */
    userName: string;
    /**
     * days is the time range of the query in days.
     *
     * @generated from protobuf field: int32 days = 2;
     */
    days: number;
    /**
     * is_success is true if the query was successful false if execution failed.
     *
     * @generated from protobuf field: bool is_success = 3;
     */
    isSuccess: boolean;
}
/**
 * DiscoveryFetchEvent is emitted when a DiscoveryService polls for new resources of a given type
 *
 * @generated from protobuf message prehog.v1alpha.DiscoveryFetchEvent
 */
export interface DiscoveryFetchEvent {
    /**
     * cloud_provider is the cloud provider used to fetch resources
     * Eg, AWS, Azure, GCP, Kubernetes
     *
     * PostHog property: tp.cloud
     *
     * @generated from protobuf field: string cloud_provider = 1;
     */
    cloudProvider: string;
    /**
     * resource_type is the type of resource that this fetch is polling.
     * It depends on the Cloud Provider (defined above).
     * Eg, rds, ec2, vm, aks, gce, app
     *
     * PostHog property: tp.resource_type
     *
     * @generated from protobuf field: string resource_type = 2;
     */
    resourceType: string;
}
/**
 * OktaAccessListSyncEvent is an event that is emitted after the Okta service synchronizes
 * access lists from Okta.
 *
 * @generated from protobuf message prehog.v1alpha.OktaAccessListSyncEvent
 */
export interface OktaAccessListSyncEvent {
    /**
     * NumAppFilters is the number of application filters used for this sync.
     *
     * @generated from protobuf field: int32 num_app_filters = 1;
     */
    numAppFilters: number;
    /**
     * NumGroupFilters is the number of group filters used for this sync.
     *
     * @generated from protobuf field: int32 num_group_filters = 2;
     */
    numGroupFilters: number;
    /**
     * NumApps is the number of apps that were synchronized from this sync event.
     *
     * @generated from protobuf field: int32 num_apps = 3;
     */
    numApps: number;
    /**
     * NumGroups is the number of groups that were synchronized from this sync event.
     *
     * @generated from protobuf field: int32 num_groups = 4;
     */
    numGroups: number;
    /**
     * NumRoles are the number of roles that were created/updated.
     *
     * @generated from protobuf field: int32 num_roles = 5;
     */
    numRoles: number;
    /**
     * NumAccessLists are the number of access lists that were created/updated.
     *
     * @generated from protobuf field: int32 num_access_lists = 6;
     */
    numAccessLists: number;
    /**
     * NumAccessListMembers are the number of access list members that were created/updated.
     *
     * @generated from protobuf field: int32 num_access_list_members = 7;
     */
    numAccessListMembers: number;
}
/**
 * DatabaseUserCreatedEvent is an event that is emitted after database service performs automatic user provisioning.
 *
 * @generated from protobuf message prehog.v1alpha.DatabaseUserCreatedEvent
 */
export interface DatabaseUserCreatedEvent {
    /**
     * Database metadata.
     *
     * @generated from protobuf field: prehog.v1alpha.SessionStartDatabaseMetadata database = 1;
     */
    database?: SessionStartDatabaseMetadata;
    /**
     * Teleport user name. Anonymized.
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * Number of database roles.
     *
     * @generated from protobuf field: int32 num_roles = 3;
     */
    numRoles: number;
}
/**
 * DatabaseUserPermissionsUpdateEvent is an event that is emitted after database service updates the permissions for the database user.
 *
 * @generated from protobuf message prehog.v1alpha.DatabaseUserPermissionsUpdateEvent
 */
export interface DatabaseUserPermissionsUpdateEvent {
    /**
     * Database metadata.
     *
     * @generated from protobuf field: prehog.v1alpha.SessionStartDatabaseMetadata database = 1;
     */
    database?: SessionStartDatabaseMetadata;
    /**
     * Teleport user name. Anonymized.
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * How many tables were affected.
     *
     * @generated from protobuf field: int32 num_tables = 3;
     */
    numTables: number;
    /**
     * How many total table permissions were given to the user.
     * For example {SELECT,UPDATE} on ten tables gives a total of twenty.
     *
     * @generated from protobuf field: int32 num_tables_permissions = 4;
     */
    numTablesPermissions: number;
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitEventRequest
 */
export interface SubmitEventRequest {
    /**
     * anonymized, 32 bytes (HMAC-SHA-256) encoded in base64
     *
     * PostHog property: tp.cluster_name (still in base64)
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * optional, will default to the ingest time if unset
     *
     * PostHog timestamp
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "userLogin";
        /**
         * @generated from protobuf field: prehog.v1alpha.UserLoginEvent user_login = 3;
         */
        userLogin: UserLoginEvent;
    } | {
        oneofKind: "ssoCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.SSOCreateEvent sso_create = 4;
         */
        ssoCreate: SSOCreateEvent;
    } | {
        oneofKind: "resourceCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.ResourceCreateEvent resource_create = 5;
         */
        resourceCreate: ResourceCreateEvent;
    } | {
        oneofKind: "sessionStart";
        /**
         * REMOVE IN V14: Use session_start_v2 instead
         *
         * @generated from protobuf field: prehog.v1alpha.SessionStartEvent session_start = 6;
         */
        sessionStart: SessionStartEvent;
    } | {
        oneofKind: "uiBannerClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIBannerClickEvent ui_banner_click = 7;
         */
        uiBannerClick: UIBannerClickEvent;
    } | {
        oneofKind: "uiOnboardCompleteGoToDashboardClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 9;
         */
        uiOnboardCompleteGoToDashboardClick: UIOnboardCompleteGoToDashboardClickEvent;
    } | {
        oneofKind: "uiOnboardAddFirstResourceClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 10;
         */
        uiOnboardAddFirstResourceClick: UIOnboardAddFirstResourceClickEvent;
    } | {
        oneofKind: "uiOnboardAddFirstResourceLaterClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 11;
         */
        uiOnboardAddFirstResourceLaterClick: UIOnboardAddFirstResourceLaterClickEvent;
    } | {
        oneofKind: "uiOnboardSetCredentialSubmit";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 12;
         */
        uiOnboardSetCredentialSubmit: UIOnboardSetCredentialSubmitEvent;
    } | {
        oneofKind: "uiOnboardRegisterChallengeSubmit";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 13;
         */
        uiOnboardRegisterChallengeSubmit: UIOnboardRegisterChallengeSubmitEvent;
    } | {
        oneofKind: "uiRecoveryCodesContinueClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 14;
         */
        uiRecoveryCodesContinueClick: UIRecoveryCodesContinueClickEvent;
    } | {
        oneofKind: "uiRecoveryCodesCopyClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 15;
         */
        uiRecoveryCodesCopyClick: UIRecoveryCodesCopyClickEvent;
    } | {
        oneofKind: "uiRecoveryCodesPrintClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 16;
         */
        uiRecoveryCodesPrintClick: UIRecoveryCodesPrintClickEvent;
    } | {
        oneofKind: "uiDiscoverStartedEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverStartedEvent ui_discover_started_event = 17;
         */
        uiDiscoverStartedEvent: UIDiscoverStartedEvent;
    } | {
        oneofKind: "uiDiscoverResourceSelectionEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 18;
         */
        uiDiscoverResourceSelectionEvent: UIDiscoverResourceSelectionEvent;
    } | {
        oneofKind: "userCertificateIssuedEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UserCertificateIssuedEvent user_certificate_issued_event = 19;
         */
        userCertificateIssuedEvent: UserCertificateIssuedEvent;
    } | {
        oneofKind: "sessionStartV2";
        /**
         * Note: semantics of SessionStartEvent type values have changed to
         * differentiate SSH from Kubernetes exec sessions (as well as adding
         * db/app/desktop events). The structures are the same, however, so we don't
         * need a new message type.
         *
         * @generated from protobuf field: prehog.v1alpha.SessionStartEvent session_start_v2 = 20;
         */
        sessionStartV2: SessionStartEvent;
    } | {
        oneofKind: "uiDiscoverDeployServiceEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 21;
         */
        uiDiscoverDeployServiceEvent: UIDiscoverDeployServiceEvent;
    } | {
        oneofKind: "uiDiscoverDatabaseRegisterEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 22;
         */
        uiDiscoverDatabaseRegisterEvent: UIDiscoverDatabaseRegisterEvent;
    } | {
        oneofKind: "uiDiscoverDatabaseConfigureMtlsEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 23;
         */
        uiDiscoverDatabaseConfigureMtlsEvent: UIDiscoverDatabaseConfigureMTLSEvent;
    } | {
        oneofKind: "uiDiscoverDesktopActiveDirectoryToolsInstallEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 24;
         */
        uiDiscoverDesktopActiveDirectoryToolsInstallEvent: UIDiscoverDesktopActiveDirectoryToolsInstallEvent;
    } | {
        oneofKind: "uiDiscoverDesktopActiveDirectoryConfigureEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 25;
         */
        uiDiscoverDesktopActiveDirectoryConfigureEvent: UIDiscoverDesktopActiveDirectoryConfigureEvent;
    } | {
        oneofKind: "uiDiscoverAutoDiscoveredResourcesEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 26;
         */
        uiDiscoverAutoDiscoveredResourcesEvent: UIDiscoverAutoDiscoveredResourcesEvent;
    } | {
        oneofKind: "uiDiscoverDatabaseConfigureIamPolicyEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 27;
         */
        uiDiscoverDatabaseConfigureIamPolicyEvent: UIDiscoverDatabaseConfigureIAMPolicyEvent;
    } | {
        oneofKind: "uiDiscoverPrincipalsConfigureEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 28;
         */
        uiDiscoverPrincipalsConfigureEvent: UIDiscoverPrincipalsConfigureEvent;
    } | {
        oneofKind: "uiDiscoverTestConnectionEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 29;
         */
        uiDiscoverTestConnectionEvent: UIDiscoverTestConnectionEvent;
    } | {
        oneofKind: "uiDiscoverCompletedEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverCompletedEvent ui_discover_completed_event = 30;
         */
        uiDiscoverCompletedEvent: UIDiscoverCompletedEvent;
    } | {
        oneofKind: "roleCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.RoleCreateEvent role_create = 31;
         */
        roleCreate: RoleCreateEvent;
    } | {
        oneofKind: "uiCreateNewRoleClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UICreateNewRoleClickEvent ui_create_new_role_click = 32;
         */
        uiCreateNewRoleClick: UICreateNewRoleClickEvent;
    } | {
        oneofKind: "uiCreateNewRoleSaveClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 33;
         */
        uiCreateNewRoleSaveClick: UICreateNewRoleSaveClickEvent;
    } | {
        oneofKind: "uiCreateNewRoleCancelClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 34;
         */
        uiCreateNewRoleCancelClick: UICreateNewRoleCancelClickEvent;
    } | {
        oneofKind: "uiCreateNewRoleViewDocumentationClick";
        /**
         * @generated from protobuf field: prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 35;
         */
        uiCreateNewRoleViewDocumentationClick: UICreateNewRoleViewDocumentationClickEvent;
    } | {
        oneofKind: "kubeRequest";
        /**
         * @generated from protobuf field: prehog.v1alpha.KubeRequestEvent kube_request = 36;
         */
        kubeRequest: KubeRequestEvent;
    } | {
        oneofKind: "sftp";
        /**
         * @generated from protobuf field: prehog.v1alpha.SFTPEvent sftp = 37;
         */
        sftp: SFTPEvent;
    } | {
        oneofKind: "agentMetadataEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.AgentMetadataEvent agent_metadata_event = 38;
         */
        agentMetadataEvent: AgentMetadataEvent;
    } | {
        oneofKind: "resourceHeartbeat";
        /**
         * @generated from protobuf field: prehog.v1alpha.ResourceHeartbeatEvent resource_heartbeat = 39;
         */
        resourceHeartbeat: ResourceHeartbeatEvent;
    } | {
        oneofKind: "uiDiscoverIntegrationAwsOidcConnectEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event = 40;
         */
        uiDiscoverIntegrationAwsOidcConnectEvent: UIDiscoverIntegrationAWSOIDCConnectEvent;
    } | {
        oneofKind: "uiDiscoverDatabaseRdsEnrollEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event = 41;
         */
        uiDiscoverDatabaseRdsEnrollEvent: UIDiscoverDatabaseRDSEnrollEvent;
    } | {
        oneofKind: "uiCallToActionClickEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UICallToActionClickEvent ui_call_to_action_click_event = 42;
         */
        uiCallToActionClickEvent: UICallToActionClickEvent;
    } | {
        oneofKind: "assistCompletion";
        /**
         * @generated from protobuf field: prehog.v1alpha.AssistCompletionEvent assist_completion = 43;
         */
        assistCompletion: AssistCompletionEvent;
    } | {
        oneofKind: "uiIntegrationEnrollStartEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIIntegrationEnrollStartEvent ui_integration_enroll_start_event = 44;
         */
        uiIntegrationEnrollStartEvent: UIIntegrationEnrollStartEvent;
    } | {
        oneofKind: "uiIntegrationEnrollCompleteEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event = 45;
         */
        uiIntegrationEnrollCompleteEvent: UIIntegrationEnrollCompleteEvent;
    } | {
        oneofKind: "editorChangeEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.EditorChangeEvent editor_change_event = 46;
         */
        editorChangeEvent: EditorChangeEvent;
    } | {
        oneofKind: "botCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.BotCreateEvent bot_create = 47;
         */
        botCreate: BotCreateEvent;
    } | {
        oneofKind: "uiOnboardQuestionnaireSubmit";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit = 48;
         */
        uiOnboardQuestionnaireSubmit: UIOnboardQuestionnaireSubmitEvent;
    } | {
        oneofKind: "botJoin";
        /**
         * @generated from protobuf field: prehog.v1alpha.BotJoinEvent bot_join = 49;
         */
        botJoin: BotJoinEvent;
    } | {
        oneofKind: "assistExecution";
        /**
         * @generated from protobuf field: prehog.v1alpha.AssistExecutionEvent assist_execution = 50;
         */
        assistExecution: AssistExecutionEvent;
    } | {
        oneofKind: "assistNewConversation";
        /**
         * @generated from protobuf field: prehog.v1alpha.AssistNewConversationEvent assist_new_conversation = 51;
         */
        assistNewConversation: AssistNewConversationEvent;
    } | {
        oneofKind: "deviceAuthenticateEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.DeviceAuthenticateEvent device_authenticate_event = 52;
         */
        deviceAuthenticateEvent: DeviceAuthenticateEvent;
    } | {
        oneofKind: "featureRecommendationEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.FeatureRecommendationEvent feature_recommendation_event = 53;
         */
        featureRecommendationEvent: FeatureRecommendationEvent;
    } | {
        oneofKind: "assistAccessRequest";
        /**
         * @generated from protobuf field: prehog.v1alpha.AssistAccessRequestEvent assist_access_request = 54;
         */
        assistAccessRequest: AssistAccessRequestEvent;
    } | {
        oneofKind: "assistAction";
        /**
         * @generated from protobuf field: prehog.v1alpha.AssistActionEvent assist_action = 55;
         */
        assistAction: AssistActionEvent;
    } | {
        oneofKind: "deviceEnrollEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.DeviceEnrollEvent device_enroll_event = 56;
         */
        deviceEnrollEvent: DeviceEnrollEvent;
    } | {
        oneofKind: "licenseLimitEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.LicenseLimitEvent license_limit_event = 57;
         */
        licenseLimitEvent: LicenseLimitEvent;
    } | {
        oneofKind: "accessListCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListCreateEvent access_list_create = 58;
         */
        accessListCreate: AccessListCreateEvent;
    } | {
        oneofKind: "accessListUpdate";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListUpdateEvent access_list_update = 59;
         */
        accessListUpdate: AccessListUpdateEvent;
    } | {
        oneofKind: "accessListDelete";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListDeleteEvent access_list_delete = 60;
         */
        accessListDelete: AccessListDeleteEvent;
    } | {
        oneofKind: "accessListMemberCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListMemberCreateEvent access_list_member_create = 61;
         */
        accessListMemberCreate: AccessListMemberCreateEvent;
    } | {
        oneofKind: "accessListMemberUpdate";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListMemberUpdateEvent access_list_member_update = 62;
         */
        accessListMemberUpdate: AccessListMemberUpdateEvent;
    } | {
        oneofKind: "accessListMemberDelete";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListMemberDeleteEvent access_list_member_delete = 63;
         */
        accessListMemberDelete: AccessListMemberDeleteEvent;
    } | {
        oneofKind: "accessListGrantsToUser";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListGrantsToUserEvent access_list_grants_to_user = 64;
         */
        accessListGrantsToUser: AccessListGrantsToUserEvent;
    } | {
        oneofKind: "uiDiscoverEc2InstanceSelection";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent ui_discover_ec2_instance_selection = 65;
         */
        uiDiscoverEc2InstanceSelection: UIDiscoverEC2InstanceSelectionEvent;
    } | {
        oneofKind: "uiDiscoverDeployEice";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverDeployEICEEvent ui_discover_deploy_eice = 66;
         */
        uiDiscoverDeployEice: UIDiscoverDeployEICEEvent;
    } | {
        oneofKind: "uiDiscoverCreateNode";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverCreateNodeEvent ui_discover_create_node = 67;
         */
        uiDiscoverCreateNode: UIDiscoverCreateNodeEvent;
    } | {
        oneofKind: "desktopDirectoryShare";
        /**
         * @generated from protobuf field: prehog.v1alpha.DesktopDirectoryShareEvent desktop_directory_share = 68;
         */
        desktopDirectoryShare: DesktopDirectoryShareEvent;
    } | {
        oneofKind: "desktopClipboardTransfer";
        /**
         * @generated from protobuf field: prehog.v1alpha.DesktopClipboardEvent desktop_clipboard_transfer = 69;
         */
        desktopClipboardTransfer: DesktopClipboardEvent;
    } | {
        oneofKind: "tagExecuteQuery";
        /**
         * @generated from protobuf field: prehog.v1alpha.TAGExecuteQueryEvent tag_execute_query = 70;
         */
        tagExecuteQuery: TAGExecuteQueryEvent;
    } | {
        oneofKind: "externalAuditStorageAuthenticate";
        /**
         * @generated from protobuf field: prehog.v1alpha.ExternalAuditStorageAuthenticateEvent external_audit_storage_authenticate = 71;
         */
        externalAuditStorageAuthenticate: ExternalAuditStorageAuthenticateEvent;
    } | {
        oneofKind: "securityReportGetResult";
        /**
         * @generated from protobuf field: prehog.v1alpha.SecurityReportGetResultEvent security_report_get_result = 72;
         */
        securityReportGetResult: SecurityReportGetResultEvent;
    } | {
        oneofKind: "auditQueryRun";
        /**
         * @generated from protobuf field: prehog.v1alpha.AuditQueryRunEvent audit_query_run = 73;
         */
        auditQueryRun: AuditQueryRunEvent;
    } | {
        oneofKind: "discoveryFetchEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.DiscoveryFetchEvent discovery_fetch_event = 74;
         */
        discoveryFetchEvent: DiscoveryFetchEvent;
    } | {
        oneofKind: "accessListReviewCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListReviewCreateEvent access_list_review_create = 75;
         */
        accessListReviewCreate: AccessListReviewCreateEvent;
    } | {
        oneofKind: "accessListReviewDelete";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListReviewDeleteEvent access_list_review_delete = 76;
         */
        accessListReviewDelete: AccessListReviewDeleteEvent;
    } | {
        oneofKind: "accessListReviewCompliance";
        /**
         * @generated from protobuf field: prehog.v1alpha.AccessListReviewComplianceEvent access_list_review_compliance = 77;
         */
        accessListReviewCompliance: AccessListReviewComplianceEvent;
    } | {
        oneofKind: "mfaAuthenticationEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.MFAAuthenticationEvent mfa_authentication_event = 78;
         */
        mfaAuthenticationEvent: MFAAuthenticationEvent;
    } | {
        oneofKind: "spiffeSvidIssued";
        /**
         * @generated from protobuf field: prehog.v1alpha.SPIFFESVIDIssuedEvent spiffe_svid_issued = 79;
         */
        spiffeSvidIssued: SPIFFESVIDIssuedEvent;
    } | {
        oneofKind: "oktaAccessListSync";
        /**
         * @generated from protobuf field: prehog.v1alpha.OktaAccessListSyncEvent okta_access_list_sync = 80;
         */
        oktaAccessListSync: OktaAccessListSyncEvent;
    } | {
        oneofKind: "databaseUserCreated";
        /**
         * @generated from protobuf field: prehog.v1alpha.DatabaseUserCreatedEvent database_user_created = 81;
         */
        databaseUserCreated: DatabaseUserCreatedEvent;
    } | {
        oneofKind: "databaseUserPermissionsUpdated";
        /**
         * @generated from protobuf field: prehog.v1alpha.DatabaseUserPermissionsUpdateEvent database_user_permissions_updated = 82;
         */
        databaseUserPermissionsUpdated: DatabaseUserPermissionsUpdateEvent;
    } | {
        oneofKind: "uiDiscoverCreateDiscoveryConfig";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent ui_discover_create_discovery_config = 83;
         */
        uiDiscoverCreateDiscoveryConfig: UIDiscoverCreateDiscoveryConfigEvent;
    } | {
        oneofKind: "uiDiscoverKubeEksEnrollEvent";
        /**
         * @generated from protobuf field: prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent ui_discover_kube_eks_enroll_event = 84;
         */
        uiDiscoverKubeEksEnrollEvent: UIDiscoverKubeEKSEnrollEvent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitEventResponse
 */
export interface SubmitEventResponse {
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitEventsRequest
 */
export interface SubmitEventsRequest {
    /**
     * individual events to be submitted in a batch, up to 500 at once
     *
     * @generated from protobuf field: repeated prehog.v1alpha.SubmitEventRequest events = 1;
     */
    events: SubmitEventRequest[];
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitEventsResponse
 */
export interface SubmitEventsResponse {
}
/**
 * @generated from protobuf message prehog.v1alpha.HelloTeleportRequest
 */
export interface HelloTeleportRequest {
}
/**
 * @generated from protobuf message prehog.v1alpha.HelloTeleportResponse
 */
export interface HelloTeleportResponse {
}
/**
 * the kind of a "resource" as intended by ResourceHeartbeatEvent
 * Keep in sync with prehog/v1/teleport.proto
 *
 * @generated from protobuf enum prehog.v1alpha.ResourceKind
 */
export enum ResourceKind {
    /**
     * @generated from protobuf enum value: RESOURCE_KIND_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * PostHog property value: "node"
     *
     * @generated from protobuf enum value: RESOURCE_KIND_NODE = 1;
     */
    NODE = 1,
    /**
     * PostHog property value: "app_server"
     *
     * @generated from protobuf enum value: RESOURCE_KIND_APP_SERVER = 2;
     */
    APP_SERVER = 2,
    /**
     * PostHog property value: "kube_server"
     *
     * @generated from protobuf enum value: RESOURCE_KIND_KUBE_SERVER = 3;
     */
    KUBE_SERVER = 3,
    /**
     * PostHog property value: "db_server"
     *
     * @generated from protobuf enum value: RESOURCE_KIND_DB_SERVER = 4;
     */
    DB_SERVER = 4,
    /**
     * PostHog property value: "windows_desktop"
     *
     * @generated from protobuf enum value: RESOURCE_KIND_WINDOWS_DESKTOP = 5;
     */
    WINDOWS_DESKTOP = 5,
    /**
     * ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
     * empty or "teleport"); not used in keepalives
     *
     * PostHog property value: "node.openssh"
     *
     * @generated from protobuf enum value: RESOURCE_KIND_NODE_OPENSSH = 6;
     */
    NODE_OPENSSH = 6,
    /**
     * ServerV3 ("node") heartbeat with a subkind of "openssh-ec2-ice".
     * Nodes that map EC2 instances and are accessed using EC2 Instance Connect Endpoint.
     * Not used in keepalives.
     * This is the SubKind SubKindOpenSSHEICENode in teleport repo.
     *
     * PostHog property value: "node.openssh_ec2_ice"
     *
     * @generated from protobuf enum value: RESOURCE_KIND_NODE_OPENSSH_EICE = 7;
     */
    NODE_OPENSSH_EICE = 7
}
/**
 * The kind of user a given username refers to. Usernames should always refer to
 * a valid cluster user (even if temporary, e.g. SSO), but may be Machine ID
 * bot users.
 *
 * @generated from protobuf enum prehog.v1alpha.UserKind
 */
export enum UserKind {
    /**
     * Indicates a legacy cluster emitting events without a defined user kind.
     * Note that users (from PostHog's perspective) can be identified via future
     * events if the cluster is upgraded to specify this field.
     *
     * PostHog property value: ""
     *
     * @generated from protobuf enum value: USER_KIND_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Indicates the user associated with this event is human, either created
     * locally or via SSO.
     *
     * PostHog property value: "human"
     *
     * @generated from protobuf enum value: USER_KIND_HUMAN = 1;
     */
    HUMAN = 1,
    /**
     * Indicates the user associated with this event is a Machine ID bot user.
     *
     * PostHog property value: "bot"
     *
     * @generated from protobuf enum value: USER_KIND_BOT = 2;
     */
    BOT = 2
}
/**
 * DiscoverResource represents a resource type.
 *
 * @generated from protobuf enum prehog.v1alpha.DiscoverResource
 */
export enum DiscoverResource {
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_SERVER = 1;
     */
    SERVER = 1,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_KUBERNETES = 2;
     */
    KUBERNETES = 2,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
     */
    DATABASE_POSTGRES_SELF_HOSTED = 3,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
     */
    DATABASE_MYSQL_SELF_HOSTED = 4,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
     */
    DATABASE_MONGODB_SELF_HOSTED = 5,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
     */
    DATABASE_POSTGRES_RDS = 6,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
     */
    DATABASE_MYSQL_RDS = 7,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
     */
    APPLICATION_HTTP = 8,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_APPLICATION_TCP = 9;
     */
    APPLICATION_TCP = 9,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
     */
    WINDOWS_DESKTOP = 10,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS = 11;
     */
    DATABASE_SQLSERVER_RDS = 11,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT = 12;
     */
    DATABASE_POSTGRES_REDSHIFT = 12,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED = 13;
     */
    DATABASE_SQLSERVER_SELF_HOSTED = 13,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED = 14;
     */
    DATABASE_REDIS_SELF_HOSTED = 14,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP = 15;
     */
    DATABASE_POSTGRES_GCP = 15,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_GCP = 16;
     */
    DATABASE_MYSQL_GCP = 16,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP = 17;
     */
    DATABASE_SQLSERVER_GCP = 17,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18;
     */
    DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE = 19;
     */
    DATABASE_POSTGRES_AZURE = 19,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_DYNAMODB = 20;
     */
    DATABASE_DYNAMODB = 20,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES = 21;
     */
    DATABASE_CASSANDRA_KEYSPACES = 21,
    /**
     * Cassandra & ScyllaDb
     *
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED = 22;
     */
    DATABASE_CASSANDRA_SELF_HOSTED = 22,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED = 23;
     */
    DATABASE_ELASTICSEARCH_SELF_HOSTED = 23,
    /**
     * Elasticache & MemoryDb
     *
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE = 24;
     */
    DATABASE_REDIS_ELASTICACHE = 24,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB = 25;
     */
    DATABASE_REDIS_MEMORYDB = 25,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE = 26;
     */
    DATABASE_REDIS_AZURE_CACHE = 26,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27;
     */
    DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE = 28;
     */
    DATABASE_MYSQL_AZURE = 28,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE = 29;
     */
    DATABASE_SQLSERVER_AZURE = 29,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT = 30;
     */
    DATABASE_SQLSERVER_MICROSOFT = 30,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED = 31;
     */
    DATABASE_COCKROACHDB_SELF_HOSTED = 31,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS = 32;
     */
    DATABASE_MONGODB_ATLAS = 32,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DATABASE_SNOWFLAKE = 33;
     */
    DATABASE_SNOWFLAKE = 33,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY = 34;
     */
    DOC_DATABASE_RDS_PROXY = 34,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY = 35;
     */
    DOC_DATABASE_HIGH_AVAILABILITY = 35,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION = 36;
     */
    DOC_DATABASE_DYNAMIC_REGISTRATION = 36,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_SAML_APPLICATION = 37;
     */
    SAML_APPLICATION = 37,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_EC2_INSTANCE = 38;
     */
    EC2_INSTANCE = 38,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_DOC_WINDOWS_DESKTOP_NON_AD = 39;
     */
    DOC_WINDOWS_DESKTOP_NON_AD = 39,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_KUBERNETES_EKS = 40;
     */
    KUBERNETES_EKS = 40,
    /**
     * @generated from protobuf enum value: DISCOVER_RESOURCE_APPLICATION_AWS_CONSOLE = 41;
     */
    APPLICATION_AWS_CONSOLE = 41
}
/**
 * DiscoverStatus represents a Discover Step outcome.
 *
 * @generated from protobuf enum prehog.v1alpha.DiscoverStatus
 */
export enum DiscoverStatus {
    /**
     * @generated from protobuf enum value: DISCOVER_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The user tried to complete the action and it succeeded.
     *
     * @generated from protobuf enum value: DISCOVER_STATUS_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * The system skipped the step.
     * For example:
     * When setting up a Database and there's already a Database Service proxying the DB.
     * In this case the Database Agent installation is skipped.
     *
     * @generated from protobuf enum value: DISCOVER_STATUS_SKIPPED = 2;
     */
    SKIPPED = 2,
    /**
     * The user tried to complete the action and it failed.
     *
     * @generated from protobuf enum value: DISCOVER_STATUS_ERROR = 3;
     */
    ERROR = 3,
    /**
     * The user did not complete the action and left the wizard.
     *
     * @generated from protobuf enum value: DISCOVER_STATUS_ABORTED = 4;
     */
    ABORTED = 4
}
/**
 * CTA represents teleport web UI's call to action buttons
 *
 * @generated from protobuf enum prehog.v1alpha.CTA
 */
export enum CTA {
    /**
     * @generated from protobuf enum value: CTA_UNSPECIFIED = 0;
     */
    CTA_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CTA_AUTH_CONNECTOR = 1;
     */
    CTA_AUTH_CONNECTOR = 1,
    /**
     * @generated from protobuf enum value: CTA_ACTIVE_SESSIONS = 2;
     */
    CTA_ACTIVE_SESSIONS = 2,
    /**
     * @generated from protobuf enum value: CTA_ACCESS_REQUESTS = 3;
     */
    CTA_ACCESS_REQUESTS = 3,
    /**
     * @generated from protobuf enum value: CTA_PREMIUM_SUPPORT = 4;
     */
    CTA_PREMIUM_SUPPORT = 4,
    /**
     * @generated from protobuf enum value: CTA_TRUSTED_DEVICES = 5;
     */
    CTA_TRUSTED_DEVICES = 5,
    /**
     * @generated from protobuf enum value: CTA_UPGRADE_BANNER = 6;
     */
    CTA_UPGRADE_BANNER = 6,
    /**
     * @generated from protobuf enum value: CTA_BILLING_SUMMARY = 7;
     */
    CTA_BILLING_SUMMARY = 7,
    /**
     * @generated from protobuf enum value: CTA_ACCESS_LIST = 8;
     */
    CTA_ACCESS_LIST = 8,
    /**
     * @generated from protobuf enum value: CTA_ACCESS_MONITORING = 9;
     */
    CTA_ACCESS_MONITORING = 9,
    /**
     * @generated from protobuf enum value: CTA_EXTERNAL_AUDIT_STORAGE = 10;
     */
    CTA_EXTERNAL_AUDIT_STORAGE = 10,
    /**
     * @generated from protobuf enum value: CTA_OKTA_USER_SYNC = 11;
     */
    CTA_OKTA_USER_SYNC = 11,
    /**
     * @generated from protobuf enum value: CTA_ENTRA_ID = 12;
     */
    CTA_ENTRA_ID = 12
}
/**
 * IntegrationEnrollKind represents the types of integration that
 * can be enrolled.
 *
 * @generated from protobuf enum prehog.v1alpha.IntegrationEnrollKind
 */
export enum IntegrationEnrollKind {
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_SLACK = 1;
     */
    SLACK = 1,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_AWS_OIDC = 2;
     */
    AWS_OIDC = 2,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_PAGERDUTY = 3;
     */
    PAGERDUTY = 3,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_EMAIL = 4;
     */
    EMAIL = 4,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_JIRA = 5;
     */
    JIRA = 5,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_DISCORD = 6;
     */
    DISCORD = 6,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MATTERMOST = 7;
     */
    MATTERMOST = 7,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MS_TEAMS = 8;
     */
    MS_TEAMS = 8,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_OPSGENIE = 9;
     */
    OPSGENIE = 9,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_OKTA = 10;
     */
    OKTA = 10,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_JAMF = 11;
     */
    JAMF = 11,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID = 12;
     */
    MACHINE_ID = 12,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITHUB_ACTIONS = 13;
     */
    MACHINE_ID_GITHUB_ACTIONS = 13,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_CIRCLECI = 14;
     */
    MACHINE_ID_CIRCLECI = 14,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GITLAB = 15;
     */
    MACHINE_ID_GITLAB = 15,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_JENKINS = 16;
     */
    MACHINE_ID_JENKINS = 16,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_ANSIBLE = 17;
     */
    MACHINE_ID_ANSIBLE = 17,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_AWS = 18;
     */
    MACHINE_ID_AWS = 18,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_GCP = 19;
     */
    MACHINE_ID_GCP = 19,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_AZURE = 20;
     */
    MACHINE_ID_AZURE = 20,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_SPACELIFT = 21;
     */
    MACHINE_ID_SPACELIFT = 21,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_MACHINE_ID_KUBERNETES = 22;
     */
    MACHINE_ID_KUBERNETES = 22,
    /**
     * @generated from protobuf enum value: INTEGRATION_ENROLL_KIND_ENTRA_ID = 23;
     */
    ENTRA_ID = 23
}
/**
 * EditorChangeStatus is the possible value of an EditorChangeEvent event status
 *
 * @generated from protobuf enum prehog.v1alpha.EditorChangeStatus
 */
export enum EditorChangeStatus {
    /**
     * @generated from protobuf enum value: EDITOR_CHANGE_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Status when the editor role is granted
     *
     * @generated from protobuf enum value: EDITOR_CHANGE_STATUS_ROLE_GRANTED = 1;
     */
    ROLE_GRANTED = 1,
    /**
     * Status when the editor role is removed
     *
     * @generated from protobuf enum value: EDITOR_CHANGE_STATUS_ROLE_REMOVED = 2;
     */
    ROLE_REMOVED = 2
}
/**
 * Feature is name of Teleport feature
 *
 * @generated from protobuf enum prehog.v1alpha.Feature
 */
export enum Feature {
    /**
     * @generated from protobuf enum value: FEATURE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: FEATURE_TRUSTED_DEVICES = 1;
     */
    TRUSTED_DEVICES = 1
}
/**
 * FeatureRecommendationStatus is feature recommendation status.
 *
 * @generated from protobuf enum prehog.v1alpha.FeatureRecommendationStatus
 */
export enum FeatureRecommendationStatus {
    /**
     * @generated from protobuf enum value: FEATURE_RECOMMENDATION_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * FEATURE_RECOMMENDATION_STATUS_NOTIFIED is emitted when a feature is recommended (notified in UI) to user.
     *
     * @generated from protobuf enum value: FEATURE_RECOMMENDATION_STATUS_NOTIFIED = 1;
     */
    NOTIFIED = 1,
    /**
     * FEATURE_RECOMMENDATION_STATUS_DONE is emitted when user completes the desired CTA.
     *
     * @generated from protobuf enum value: FEATURE_RECOMMENDATION_STATUS_DONE = 2;
     */
    DONE = 2
}
/**
 * LicenseLimit indicates event type that triggered LicenseLimitEvent.
 *
 * @generated from protobuf enum prehog.v1alpha.LicenseLimit
 */
export enum LicenseLimit {
    /**
     * @generated from protobuf enum value: LICENSE_LIMIT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF is emitted if license does not
     * allow Jamf integration (e.g. Team Plan)
     *
     * @generated from protobuf enum value: LICENSE_LIMIT_DEVICE_TRUST_TEAM_JAMF = 1;
     */
    DEVICE_TRUST_TEAM_JAMF = 1,
    /**
     * LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE is emitted when allowed enrolled device
     * limit is reached
     *
     * @generated from protobuf enum value: LICENSE_LIMIT_DEVICE_TRUST_TEAM_USAGE = 2;
     */
    DEVICE_TRUST_TEAM_USAGE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class UserLoginEvent$Type extends MessageType<UserLoginEvent> {
    constructor() {
        super("prehog.v1alpha.UserLoginEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "connector_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "required_private_key_policy", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserLoginEvent>): UserLoginEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.connectorType = "";
        message.deviceId = "";
        message.requiredPrivateKeyPolicy = "";
        if (value !== undefined)
            reflectionMergePartial<UserLoginEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserLoginEvent): UserLoginEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string connector_type */ 2:
                    message.connectorType = reader.string();
                    break;
                case /* string device_id */ 3:
                    message.deviceId = reader.string();
                    break;
                case /* string required_private_key_policy */ 4:
                    message.requiredPrivateKeyPolicy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserLoginEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string connector_type = 2; */
        if (message.connectorType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.connectorType);
        /* string device_id = 3; */
        if (message.deviceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceId);
        /* string required_private_key_policy = 4; */
        if (message.requiredPrivateKeyPolicy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.requiredPrivateKeyPolicy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UserLoginEvent
 */
export const UserLoginEvent = new UserLoginEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MFAAuthenticationEvent$Type extends MessageType<MFAAuthenticationEvent> {
    constructor() {
        super("prehog.v1alpha.MFAAuthenticationEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "device_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mfa_challenge_scope", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MFAAuthenticationEvent>): MFAAuthenticationEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.deviceId = "";
        message.deviceType = "";
        message.mfaChallengeScope = "";
        if (value !== undefined)
            reflectionMergePartial<MFAAuthenticationEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MFAAuthenticationEvent): MFAAuthenticationEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string device_id */ 2:
                    message.deviceId = reader.string();
                    break;
                case /* string device_type */ 3:
                    message.deviceType = reader.string();
                    break;
                case /* string mfa_challenge_scope */ 4:
                    message.mfaChallengeScope = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MFAAuthenticationEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string device_id = 2; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* string device_type = 3; */
        if (message.deviceType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceType);
        /* string mfa_challenge_scope = 4; */
        if (message.mfaChallengeScope !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.mfaChallengeScope);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.MFAAuthenticationEvent
 */
export const MFAAuthenticationEvent = new MFAAuthenticationEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SSOCreateEvent$Type extends MessageType<SSOCreateEvent> {
    constructor() {
        super("prehog.v1alpha.SSOCreateEvent", [
            { no: 1, name: "connector_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SSOCreateEvent>): SSOCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.connectorType = "";
        if (value !== undefined)
            reflectionMergePartial<SSOCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SSOCreateEvent): SSOCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connector_type */ 1:
                    message.connectorType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SSOCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string connector_type = 1; */
        if (message.connectorType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connectorType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SSOCreateEvent
 */
export const SSOCreateEvent = new SSOCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceCreateEvent$Type extends MessageType<ResourceCreateEvent> {
    constructor() {
        super("prehog.v1alpha.ResourceCreateEvent", [
            { no: 1, name: "resource_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resource_origin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cloud_provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "database", kind: "message", T: () => DiscoveredDatabaseMetadata }
        ]);
    }
    create(value?: PartialMessage<ResourceCreateEvent>): ResourceCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceType = "";
        message.resourceOrigin = "";
        message.cloudProvider = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceCreateEvent): ResourceCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_type */ 1:
                    message.resourceType = reader.string();
                    break;
                case /* string resource_origin */ 2:
                    message.resourceOrigin = reader.string();
                    break;
                case /* string cloud_provider */ 3:
                    message.cloudProvider = reader.string();
                    break;
                case /* prehog.v1alpha.DiscoveredDatabaseMetadata database */ 4:
                    message.database = DiscoveredDatabaseMetadata.internalBinaryRead(reader, reader.uint32(), options, message.database);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string resource_type = 1; */
        if (message.resourceType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.resourceType);
        /* string resource_origin = 2; */
        if (message.resourceOrigin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resourceOrigin);
        /* string cloud_provider = 3; */
        if (message.cloudProvider !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cloudProvider);
        /* prehog.v1alpha.DiscoveredDatabaseMetadata database = 4; */
        if (message.database)
            DiscoveredDatabaseMetadata.internalBinaryWrite(message.database, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ResourceCreateEvent
 */
export const ResourceCreateEvent = new ResourceCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoveredDatabaseMetadata$Type extends MessageType<DiscoveredDatabaseMetadata> {
    constructor() {
        super("prehog.v1alpha.DiscoveredDatabaseMetadata", [
            { no: 1, name: "db_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "db_protocol", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiscoveredDatabaseMetadata>): DiscoveredDatabaseMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dbType = "";
        message.dbProtocol = "";
        if (value !== undefined)
            reflectionMergePartial<DiscoveredDatabaseMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoveredDatabaseMetadata): DiscoveredDatabaseMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string db_type */ 1:
                    message.dbType = reader.string();
                    break;
                case /* string db_protocol */ 2:
                    message.dbProtocol = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoveredDatabaseMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string db_type = 1; */
        if (message.dbType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dbType);
        /* string db_protocol = 2; */
        if (message.dbProtocol !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dbProtocol);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DiscoveredDatabaseMetadata
 */
export const DiscoveredDatabaseMetadata = new DiscoveredDatabaseMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceHeartbeatEvent$Type extends MessageType<ResourceHeartbeatEvent> {
    constructor() {
        super("prehog.v1alpha.ResourceHeartbeatEvent", [
            { no: 1, name: "resource_name", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "resource_kind", kind: "enum", T: () => ["prehog.v1alpha.ResourceKind", ResourceKind, "RESOURCE_KIND_"] },
            { no: 3, name: "static", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceHeartbeatEvent>): ResourceHeartbeatEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceName = new Uint8Array(0);
        message.resourceKind = 0;
        message.static = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceHeartbeatEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceHeartbeatEvent): ResourceHeartbeatEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes resource_name */ 1:
                    message.resourceName = reader.bytes();
                    break;
                case /* prehog.v1alpha.ResourceKind resource_kind */ 2:
                    message.resourceKind = reader.int32();
                    break;
                case /* bool static */ 3:
                    message.static = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceHeartbeatEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes resource_name = 1; */
        if (message.resourceName.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.resourceName);
        /* prehog.v1alpha.ResourceKind resource_kind = 2; */
        if (message.resourceKind !== 0)
            writer.tag(2, WireType.Varint).int32(message.resourceKind);
        /* bool static = 3; */
        if (message.static !== false)
            writer.tag(3, WireType.Varint).bool(message.static);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ResourceHeartbeatEvent
 */
export const ResourceHeartbeatEvent = new ResourceHeartbeatEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionStartEvent$Type extends MessageType<SessionStartEvent> {
    constructor() {
        super("prehog.v1alpha.SessionStartEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "database", kind: "message", T: () => SessionStartDatabaseMetadata },
            { no: 4, name: "desktop", kind: "message", T: () => SessionStartDesktopMetadata },
            { no: 5, name: "user_kind", kind: "enum", T: () => ["prehog.v1alpha.UserKind", UserKind, "USER_KIND_"] }
        ]);
    }
    create(value?: PartialMessage<SessionStartEvent>): SessionStartEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.sessionType = "";
        message.userKind = 0;
        if (value !== undefined)
            reflectionMergePartial<SessionStartEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionStartEvent): SessionStartEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string session_type */ 2:
                    message.sessionType = reader.string();
                    break;
                case /* prehog.v1alpha.SessionStartDatabaseMetadata database */ 3:
                    message.database = SessionStartDatabaseMetadata.internalBinaryRead(reader, reader.uint32(), options, message.database);
                    break;
                case /* prehog.v1alpha.SessionStartDesktopMetadata desktop */ 4:
                    message.desktop = SessionStartDesktopMetadata.internalBinaryRead(reader, reader.uint32(), options, message.desktop);
                    break;
                case /* prehog.v1alpha.UserKind user_kind */ 5:
                    message.userKind = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionStartEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string session_type = 2; */
        if (message.sessionType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionType);
        /* prehog.v1alpha.SessionStartDatabaseMetadata database = 3; */
        if (message.database)
            SessionStartDatabaseMetadata.internalBinaryWrite(message.database, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.SessionStartDesktopMetadata desktop = 4; */
        if (message.desktop)
            SessionStartDesktopMetadata.internalBinaryWrite(message.desktop, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UserKind user_kind = 5; */
        if (message.userKind !== 0)
            writer.tag(5, WireType.Varint).int32(message.userKind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SessionStartEvent
 */
export const SessionStartEvent = new SessionStartEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionStartDatabaseMetadata$Type extends MessageType<SessionStartDatabaseMetadata> {
    constructor() {
        super("prehog.v1alpha.SessionStartDatabaseMetadata", [
            { no: 1, name: "db_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "db_protocol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "db_origin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionStartDatabaseMetadata>): SessionStartDatabaseMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dbType = "";
        message.dbProtocol = "";
        message.dbOrigin = "";
        if (value !== undefined)
            reflectionMergePartial<SessionStartDatabaseMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionStartDatabaseMetadata): SessionStartDatabaseMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string db_type */ 1:
                    message.dbType = reader.string();
                    break;
                case /* string db_protocol */ 2:
                    message.dbProtocol = reader.string();
                    break;
                case /* string db_origin */ 3:
                    message.dbOrigin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionStartDatabaseMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string db_type = 1; */
        if (message.dbType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dbType);
        /* string db_protocol = 2; */
        if (message.dbProtocol !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dbProtocol);
        /* string db_origin = 3; */
        if (message.dbOrigin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dbOrigin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SessionStartDatabaseMetadata
 */
export const SessionStartDatabaseMetadata = new SessionStartDatabaseMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionStartDesktopMetadata$Type extends MessageType<SessionStartDesktopMetadata> {
    constructor() {
        super("prehog.v1alpha.SessionStartDesktopMetadata", [
            { no: 1, name: "desktop_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "origin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "windows_domain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "allow_user_creation", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SessionStartDesktopMetadata>): SessionStartDesktopMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.desktopType = "";
        message.origin = "";
        message.windowsDomain = "";
        message.allowUserCreation = false;
        if (value !== undefined)
            reflectionMergePartial<SessionStartDesktopMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionStartDesktopMetadata): SessionStartDesktopMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string desktop_type */ 1:
                    message.desktopType = reader.string();
                    break;
                case /* string origin */ 2:
                    message.origin = reader.string();
                    break;
                case /* string windows_domain */ 3:
                    message.windowsDomain = reader.string();
                    break;
                case /* bool allow_user_creation */ 4:
                    message.allowUserCreation = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionStartDesktopMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string desktop_type = 1; */
        if (message.desktopType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.desktopType);
        /* string origin = 2; */
        if (message.origin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.origin);
        /* string windows_domain = 3; */
        if (message.windowsDomain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.windowsDomain);
        /* bool allow_user_creation = 4; */
        if (message.allowUserCreation !== false)
            writer.tag(4, WireType.Varint).bool(message.allowUserCreation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SessionStartDesktopMetadata
 */
export const SessionStartDesktopMetadata = new SessionStartDesktopMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserCertificateIssuedEvent$Type extends MessageType<UserCertificateIssuedEvent> {
    constructor() {
        super("prehog.v1alpha.UserCertificateIssuedEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ttl", kind: "message", T: () => Duration },
            { no: 3, name: "is_bot", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "usage_database", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "usage_app", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "usage_kubernetes", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "usage_desktop", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "private_key_policy", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserCertificateIssuedEvent>): UserCertificateIssuedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.isBot = false;
        message.usageDatabase = false;
        message.usageApp = false;
        message.usageKubernetes = false;
        message.usageDesktop = false;
        message.privateKeyPolicy = "";
        if (value !== undefined)
            reflectionMergePartial<UserCertificateIssuedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserCertificateIssuedEvent): UserCertificateIssuedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* google.protobuf.Duration ttl */ 2:
                    message.ttl = Duration.internalBinaryRead(reader, reader.uint32(), options, message.ttl);
                    break;
                case /* bool is_bot */ 3:
                    message.isBot = reader.bool();
                    break;
                case /* bool usage_database */ 4:
                    message.usageDatabase = reader.bool();
                    break;
                case /* bool usage_app */ 5:
                    message.usageApp = reader.bool();
                    break;
                case /* bool usage_kubernetes */ 6:
                    message.usageKubernetes = reader.bool();
                    break;
                case /* bool usage_desktop */ 7:
                    message.usageDesktop = reader.bool();
                    break;
                case /* string private_key_policy */ 8:
                    message.privateKeyPolicy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserCertificateIssuedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* google.protobuf.Duration ttl = 2; */
        if (message.ttl)
            Duration.internalBinaryWrite(message.ttl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool is_bot = 3; */
        if (message.isBot !== false)
            writer.tag(3, WireType.Varint).bool(message.isBot);
        /* bool usage_database = 4; */
        if (message.usageDatabase !== false)
            writer.tag(4, WireType.Varint).bool(message.usageDatabase);
        /* bool usage_app = 5; */
        if (message.usageApp !== false)
            writer.tag(5, WireType.Varint).bool(message.usageApp);
        /* bool usage_kubernetes = 6; */
        if (message.usageKubernetes !== false)
            writer.tag(6, WireType.Varint).bool(message.usageKubernetes);
        /* bool usage_desktop = 7; */
        if (message.usageDesktop !== false)
            writer.tag(7, WireType.Varint).bool(message.usageDesktop);
        /* string private_key_policy = 8; */
        if (message.privateKeyPolicy !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.privateKeyPolicy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UserCertificateIssuedEvent
 */
export const UserCertificateIssuedEvent = new UserCertificateIssuedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SPIFFESVIDIssuedEvent$Type extends MessageType<SPIFFESVIDIssuedEvent> {
    constructor() {
        super("prehog.v1alpha.SPIFFESVIDIssuedEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_kind", kind: "enum", T: () => ["prehog.v1alpha.UserKind", UserKind, "USER_KIND_"] },
            { no: 3, name: "spiffe_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ip_sans_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "dns_sans_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "svid_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SPIFFESVIDIssuedEvent>): SPIFFESVIDIssuedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.userKind = 0;
        message.spiffeId = "";
        message.ipSansCount = 0;
        message.dnsSansCount = 0;
        message.svidType = "";
        if (value !== undefined)
            reflectionMergePartial<SPIFFESVIDIssuedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SPIFFESVIDIssuedEvent): SPIFFESVIDIssuedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.UserKind user_kind */ 2:
                    message.userKind = reader.int32();
                    break;
                case /* string spiffe_id */ 3:
                    message.spiffeId = reader.string();
                    break;
                case /* int32 ip_sans_count */ 4:
                    message.ipSansCount = reader.int32();
                    break;
                case /* int32 dns_sans_count */ 5:
                    message.dnsSansCount = reader.int32();
                    break;
                case /* string svid_type */ 6:
                    message.svidType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SPIFFESVIDIssuedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.UserKind user_kind = 2; */
        if (message.userKind !== 0)
            writer.tag(2, WireType.Varint).int32(message.userKind);
        /* string spiffe_id = 3; */
        if (message.spiffeId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.spiffeId);
        /* int32 ip_sans_count = 4; */
        if (message.ipSansCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.ipSansCount);
        /* int32 dns_sans_count = 5; */
        if (message.dnsSansCount !== 0)
            writer.tag(5, WireType.Varint).int32(message.dnsSansCount);
        /* string svid_type = 6; */
        if (message.svidType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.svidType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SPIFFESVIDIssuedEvent
 */
export const SPIFFESVIDIssuedEvent = new SPIFFESVIDIssuedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIBannerClickEvent$Type extends MessageType<UIBannerClickEvent> {
    constructor() {
        super("prehog.v1alpha.UIBannerClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alert", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIBannerClickEvent>): UIBannerClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.alert = "";
        if (value !== undefined)
            reflectionMergePartial<UIBannerClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIBannerClickEvent): UIBannerClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string alert */ 2:
                    message.alert = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIBannerClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string alert = 2; */
        if (message.alert !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.alert);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIBannerClickEvent
 */
export const UIBannerClickEvent = new UIBannerClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIOnboardCompleteGoToDashboardClickEvent$Type extends MessageType<UIOnboardCompleteGoToDashboardClickEvent> {
    constructor() {
        super("prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIOnboardCompleteGoToDashboardClickEvent>): UIOnboardCompleteGoToDashboardClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIOnboardCompleteGoToDashboardClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIOnboardCompleteGoToDashboardClickEvent): UIOnboardCompleteGoToDashboardClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIOnboardCompleteGoToDashboardClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
 */
export const UIOnboardCompleteGoToDashboardClickEvent = new UIOnboardCompleteGoToDashboardClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIOnboardAddFirstResourceClickEvent$Type extends MessageType<UIOnboardAddFirstResourceClickEvent> {
    constructor() {
        super("prehog.v1alpha.UIOnboardAddFirstResourceClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIOnboardAddFirstResourceClickEvent>): UIOnboardAddFirstResourceClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIOnboardAddFirstResourceClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIOnboardAddFirstResourceClickEvent): UIOnboardAddFirstResourceClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIOnboardAddFirstResourceClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
 */
export const UIOnboardAddFirstResourceClickEvent = new UIOnboardAddFirstResourceClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIOnboardAddFirstResourceLaterClickEvent$Type extends MessageType<UIOnboardAddFirstResourceLaterClickEvent> {
    constructor() {
        super("prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIOnboardAddFirstResourceLaterClickEvent>): UIOnboardAddFirstResourceLaterClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIOnboardAddFirstResourceLaterClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIOnboardAddFirstResourceLaterClickEvent): UIOnboardAddFirstResourceLaterClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIOnboardAddFirstResourceLaterClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
 */
export const UIOnboardAddFirstResourceLaterClickEvent = new UIOnboardAddFirstResourceLaterClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIOnboardSetCredentialSubmitEvent$Type extends MessageType<UIOnboardSetCredentialSubmitEvent> {
    constructor() {
        super("prehog.v1alpha.UIOnboardSetCredentialSubmitEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIOnboardSetCredentialSubmitEvent>): UIOnboardSetCredentialSubmitEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIOnboardSetCredentialSubmitEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIOnboardSetCredentialSubmitEvent): UIOnboardSetCredentialSubmitEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIOnboardSetCredentialSubmitEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
 */
export const UIOnboardSetCredentialSubmitEvent = new UIOnboardSetCredentialSubmitEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIOnboardRegisterChallengeSubmitEvent$Type extends MessageType<UIOnboardRegisterChallengeSubmitEvent> {
    constructor() {
        super("prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mfa_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "login_flow", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIOnboardRegisterChallengeSubmitEvent>): UIOnboardRegisterChallengeSubmitEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.mfaType = "";
        message.loginFlow = "";
        if (value !== undefined)
            reflectionMergePartial<UIOnboardRegisterChallengeSubmitEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIOnboardRegisterChallengeSubmitEvent): UIOnboardRegisterChallengeSubmitEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string mfa_type */ 2:
                    message.mfaType = reader.string();
                    break;
                case /* string login_flow */ 3:
                    message.loginFlow = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIOnboardRegisterChallengeSubmitEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string mfa_type = 2; */
        if (message.mfaType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mfaType);
        /* string login_flow = 3; */
        if (message.loginFlow !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loginFlow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
 */
export const UIOnboardRegisterChallengeSubmitEvent = new UIOnboardRegisterChallengeSubmitEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIOnboardQuestionnaireSubmitEvent$Type extends MessageType<UIOnboardQuestionnaireSubmitEvent> {
    constructor() {
        super("prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIOnboardQuestionnaireSubmitEvent>): UIOnboardQuestionnaireSubmitEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIOnboardQuestionnaireSubmitEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIOnboardQuestionnaireSubmitEvent): UIOnboardQuestionnaireSubmitEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIOnboardQuestionnaireSubmitEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent
 */
export const UIOnboardQuestionnaireSubmitEvent = new UIOnboardQuestionnaireSubmitEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIRecoveryCodesContinueClickEvent$Type extends MessageType<UIRecoveryCodesContinueClickEvent> {
    constructor() {
        super("prehog.v1alpha.UIRecoveryCodesContinueClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIRecoveryCodesContinueClickEvent>): UIRecoveryCodesContinueClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIRecoveryCodesContinueClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIRecoveryCodesContinueClickEvent): UIRecoveryCodesContinueClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIRecoveryCodesContinueClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIRecoveryCodesContinueClickEvent
 */
export const UIRecoveryCodesContinueClickEvent = new UIRecoveryCodesContinueClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIRecoveryCodesCopyClickEvent$Type extends MessageType<UIRecoveryCodesCopyClickEvent> {
    constructor() {
        super("prehog.v1alpha.UIRecoveryCodesCopyClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIRecoveryCodesCopyClickEvent>): UIRecoveryCodesCopyClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIRecoveryCodesCopyClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIRecoveryCodesCopyClickEvent): UIRecoveryCodesCopyClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIRecoveryCodesCopyClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIRecoveryCodesCopyClickEvent
 */
export const UIRecoveryCodesCopyClickEvent = new UIRecoveryCodesCopyClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIRecoveryCodesPrintClickEvent$Type extends MessageType<UIRecoveryCodesPrintClickEvent> {
    constructor() {
        super("prehog.v1alpha.UIRecoveryCodesPrintClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIRecoveryCodesPrintClickEvent>): UIRecoveryCodesPrintClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UIRecoveryCodesPrintClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIRecoveryCodesPrintClickEvent): UIRecoveryCodesPrintClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIRecoveryCodesPrintClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIRecoveryCodesPrintClickEvent
 */
export const UIRecoveryCodesPrintClickEvent = new UIRecoveryCodesPrintClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoverMetadata$Type extends MessageType<DiscoverMetadata> {
    constructor() {
        super("prehog.v1alpha.DiscoverMetadata", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sso", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DiscoverMetadata>): DiscoverMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.userName = "";
        message.sso = false;
        if (value !== undefined)
            reflectionMergePartial<DiscoverMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoverMetadata): DiscoverMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* bool sso */ 3:
                    message.sso = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoverMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* bool sso = 3; */
        if (message.sso !== false)
            writer.tag(3, WireType.Varint).bool(message.sso);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DiscoverMetadata
 */
export const DiscoverMetadata = new DiscoverMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoverResourceMetadata$Type extends MessageType<DiscoverResourceMetadata> {
    constructor() {
        super("prehog.v1alpha.DiscoverResourceMetadata", [
            { no: 1, name: "resource", kind: "enum", T: () => ["prehog.v1alpha.DiscoverResource", DiscoverResource, "DISCOVER_RESOURCE_"] }
        ]);
    }
    create(value?: PartialMessage<DiscoverResourceMetadata>): DiscoverResourceMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resource = 0;
        if (value !== undefined)
            reflectionMergePartial<DiscoverResourceMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoverResourceMetadata): DiscoverResourceMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverResource resource */ 1:
                    message.resource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoverResourceMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverResource resource = 1; */
        if (message.resource !== 0)
            writer.tag(1, WireType.Varint).int32(message.resource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DiscoverResourceMetadata
 */
export const DiscoverResourceMetadata = new DiscoverResourceMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoverStepStatus$Type extends MessageType<DiscoverStepStatus> {
    constructor() {
        super("prehog.v1alpha.DiscoverStepStatus", [
            { no: 1, name: "status", kind: "enum", T: () => ["prehog.v1alpha.DiscoverStatus", DiscoverStatus, "DISCOVER_STATUS_"] },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiscoverStepStatus>): DiscoverStepStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<DiscoverStepStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoverStepStatus): DiscoverStepStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverStatus status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoverStepStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DiscoverStepStatus
 */
export const DiscoverStepStatus = new DiscoverStepStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverStartedEvent$Type extends MessageType<UIDiscoverStartedEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverStartedEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverStartedEvent>): UIDiscoverStartedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverStartedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverStartedEvent): UIDiscoverStartedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 2:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverStartedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 2; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverStartedEvent
 */
export const UIDiscoverStartedEvent = new UIDiscoverStartedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverResourceSelectionEvent$Type extends MessageType<UIDiscoverResourceSelectionEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverResourceSelectionEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverResourceSelectionEvent>): UIDiscoverResourceSelectionEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverResourceSelectionEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverResourceSelectionEvent): UIDiscoverResourceSelectionEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverResourceSelectionEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverResourceSelectionEvent
 */
export const UIDiscoverResourceSelectionEvent = new UIDiscoverResourceSelectionEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverIntegrationAWSOIDCConnectEvent$Type extends MessageType<UIDiscoverIntegrationAWSOIDCConnectEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverIntegrationAWSOIDCConnectEvent>): UIDiscoverIntegrationAWSOIDCConnectEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverIntegrationAWSOIDCConnectEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverIntegrationAWSOIDCConnectEvent): UIDiscoverIntegrationAWSOIDCConnectEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverIntegrationAWSOIDCConnectEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent
 */
export const UIDiscoverIntegrationAWSOIDCConnectEvent = new UIDiscoverIntegrationAWSOIDCConnectEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDatabaseRDSEnrollEvent$Type extends MessageType<UIDiscoverDatabaseRDSEnrollEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus },
            { no: 4, name: "selected_resources_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDatabaseRDSEnrollEvent>): UIDiscoverDatabaseRDSEnrollEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.selectedResourcesCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDatabaseRDSEnrollEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDatabaseRDSEnrollEvent): UIDiscoverDatabaseRDSEnrollEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* int64 selected_resources_count */ 4:
                    message.selectedResourcesCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDatabaseRDSEnrollEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 selected_resources_count = 4; */
        if (message.selectedResourcesCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.selectedResourcesCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent
 */
export const UIDiscoverDatabaseRDSEnrollEvent = new UIDiscoverDatabaseRDSEnrollEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverKubeEKSEnrollEvent$Type extends MessageType<UIDiscoverKubeEKSEnrollEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverKubeEKSEnrollEvent>): UIDiscoverKubeEKSEnrollEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverKubeEKSEnrollEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverKubeEKSEnrollEvent): UIDiscoverKubeEKSEnrollEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverKubeEKSEnrollEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent
 */
export const UIDiscoverKubeEKSEnrollEvent = new UIDiscoverKubeEKSEnrollEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDeployServiceEvent$Type extends MessageType<UIDiscoverDeployServiceEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDeployServiceEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus },
            { no: 4, name: "deploy_method", kind: "enum", T: () => ["prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod", UIDiscoverDeployServiceEvent_DeployMethod, "DEPLOY_METHOD_"] },
            { no: 5, name: "deploy_type", kind: "enum", T: () => ["prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType", UIDiscoverDeployServiceEvent_DeployType, "DEPLOY_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDeployServiceEvent>): UIDiscoverDeployServiceEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deployMethod = 0;
        message.deployType = 0;
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDeployServiceEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDeployServiceEvent): UIDiscoverDeployServiceEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod deploy_method */ 4:
                    message.deployMethod = reader.int32();
                    break;
                case /* prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType deploy_type */ 5:
                    message.deployType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDeployServiceEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployMethod deploy_method = 4; */
        if (message.deployMethod !== 0)
            writer.tag(4, WireType.Varint).int32(message.deployMethod);
        /* prehog.v1alpha.UIDiscoverDeployServiceEvent.DeployType deploy_type = 5; */
        if (message.deployType !== 0)
            writer.tag(5, WireType.Varint).int32(message.deployType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDeployServiceEvent
 */
export const UIDiscoverDeployServiceEvent = new UIDiscoverDeployServiceEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverCreateDiscoveryConfigEvent$Type extends MessageType<UIDiscoverCreateDiscoveryConfigEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus },
            { no: 4, name: "config_method", kind: "enum", T: () => ["prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod", UIDiscoverCreateDiscoveryConfigEvent_ConfigMethod, "CONFIG_METHOD_"] }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverCreateDiscoveryConfigEvent>): UIDiscoverCreateDiscoveryConfigEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.configMethod = 0;
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverCreateDiscoveryConfigEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverCreateDiscoveryConfigEvent): UIDiscoverCreateDiscoveryConfigEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod config_method */ 4:
                    message.configMethod = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverCreateDiscoveryConfigEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent.ConfigMethod config_method = 4; */
        if (message.configMethod !== 0)
            writer.tag(4, WireType.Varint).int32(message.configMethod);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent
 */
export const UIDiscoverCreateDiscoveryConfigEvent = new UIDiscoverCreateDiscoveryConfigEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDatabaseRegisterEvent$Type extends MessageType<UIDiscoverDatabaseRegisterEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDatabaseRegisterEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDatabaseRegisterEvent>): UIDiscoverDatabaseRegisterEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDatabaseRegisterEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDatabaseRegisterEvent): UIDiscoverDatabaseRegisterEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDatabaseRegisterEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
 */
export const UIDiscoverDatabaseRegisterEvent = new UIDiscoverDatabaseRegisterEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDatabaseConfigureMTLSEvent$Type extends MessageType<UIDiscoverDatabaseConfigureMTLSEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDatabaseConfigureMTLSEvent>): UIDiscoverDatabaseConfigureMTLSEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDatabaseConfigureMTLSEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDatabaseConfigureMTLSEvent): UIDiscoverDatabaseConfigureMTLSEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDatabaseConfigureMTLSEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
 */
export const UIDiscoverDatabaseConfigureMTLSEvent = new UIDiscoverDatabaseConfigureMTLSEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDesktopActiveDirectoryToolsInstallEvent$Type extends MessageType<UIDiscoverDesktopActiveDirectoryToolsInstallEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDesktopActiveDirectoryToolsInstallEvent>): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDesktopActiveDirectoryToolsInstallEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDesktopActiveDirectoryToolsInstallEvent): UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDesktopActiveDirectoryToolsInstallEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
 */
export const UIDiscoverDesktopActiveDirectoryToolsInstallEvent = new UIDiscoverDesktopActiveDirectoryToolsInstallEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDesktopActiveDirectoryConfigureEvent$Type extends MessageType<UIDiscoverDesktopActiveDirectoryConfigureEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDesktopActiveDirectoryConfigureEvent>): UIDiscoverDesktopActiveDirectoryConfigureEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDesktopActiveDirectoryConfigureEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDesktopActiveDirectoryConfigureEvent): UIDiscoverDesktopActiveDirectoryConfigureEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDesktopActiveDirectoryConfigureEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
 */
export const UIDiscoverDesktopActiveDirectoryConfigureEvent = new UIDiscoverDesktopActiveDirectoryConfigureEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverAutoDiscoveredResourcesEvent$Type extends MessageType<UIDiscoverAutoDiscoveredResourcesEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus },
            { no: 4, name: "resources_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverAutoDiscoveredResourcesEvent>): UIDiscoverAutoDiscoveredResourcesEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourcesCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverAutoDiscoveredResourcesEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverAutoDiscoveredResourcesEvent): UIDiscoverAutoDiscoveredResourcesEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* int64 resources_count */ 4:
                    message.resourcesCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverAutoDiscoveredResourcesEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 resources_count = 4; */
        if (message.resourcesCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.resourcesCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
 */
export const UIDiscoverAutoDiscoveredResourcesEvent = new UIDiscoverAutoDiscoveredResourcesEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverEC2InstanceSelectionEvent$Type extends MessageType<UIDiscoverEC2InstanceSelectionEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverEC2InstanceSelectionEvent>): UIDiscoverEC2InstanceSelectionEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverEC2InstanceSelectionEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverEC2InstanceSelectionEvent): UIDiscoverEC2InstanceSelectionEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverEC2InstanceSelectionEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent
 */
export const UIDiscoverEC2InstanceSelectionEvent = new UIDiscoverEC2InstanceSelectionEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDeployEICEEvent$Type extends MessageType<UIDiscoverDeployEICEEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDeployEICEEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDeployEICEEvent>): UIDiscoverDeployEICEEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDeployEICEEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDeployEICEEvent): UIDiscoverDeployEICEEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDeployEICEEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDeployEICEEvent
 */
export const UIDiscoverDeployEICEEvent = new UIDiscoverDeployEICEEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverCreateNodeEvent$Type extends MessageType<UIDiscoverCreateNodeEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverCreateNodeEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverCreateNodeEvent>): UIDiscoverCreateNodeEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverCreateNodeEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverCreateNodeEvent): UIDiscoverCreateNodeEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverCreateNodeEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverCreateNodeEvent
 */
export const UIDiscoverCreateNodeEvent = new UIDiscoverCreateNodeEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverDatabaseConfigureIAMPolicyEvent$Type extends MessageType<UIDiscoverDatabaseConfigureIAMPolicyEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverDatabaseConfigureIAMPolicyEvent>): UIDiscoverDatabaseConfigureIAMPolicyEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverDatabaseConfigureIAMPolicyEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverDatabaseConfigureIAMPolicyEvent): UIDiscoverDatabaseConfigureIAMPolicyEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverDatabaseConfigureIAMPolicyEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
 */
export const UIDiscoverDatabaseConfigureIAMPolicyEvent = new UIDiscoverDatabaseConfigureIAMPolicyEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverPrincipalsConfigureEvent$Type extends MessageType<UIDiscoverPrincipalsConfigureEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverPrincipalsConfigureEvent>): UIDiscoverPrincipalsConfigureEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverPrincipalsConfigureEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverPrincipalsConfigureEvent): UIDiscoverPrincipalsConfigureEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverPrincipalsConfigureEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
 */
export const UIDiscoverPrincipalsConfigureEvent = new UIDiscoverPrincipalsConfigureEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverTestConnectionEvent$Type extends MessageType<UIDiscoverTestConnectionEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverTestConnectionEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverTestConnectionEvent>): UIDiscoverTestConnectionEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverTestConnectionEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverTestConnectionEvent): UIDiscoverTestConnectionEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverTestConnectionEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverTestConnectionEvent
 */
export const UIDiscoverTestConnectionEvent = new UIDiscoverTestConnectionEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIDiscoverCompletedEvent$Type extends MessageType<UIDiscoverCompletedEvent> {
    constructor() {
        super("prehog.v1alpha.UIDiscoverCompletedEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => DiscoverMetadata },
            { no: 2, name: "resource", kind: "message", T: () => DiscoverResourceMetadata },
            { no: 3, name: "status", kind: "message", T: () => DiscoverStepStatus }
        ]);
    }
    create(value?: PartialMessage<UIDiscoverCompletedEvent>): UIDiscoverCompletedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIDiscoverCompletedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDiscoverCompletedEvent): UIDiscoverCompletedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.DiscoverMetadata metadata */ 1:
                    message.metadata = DiscoverMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* prehog.v1alpha.DiscoverResourceMetadata resource */ 2:
                    message.resource = DiscoverResourceMetadata.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* prehog.v1alpha.DiscoverStepStatus status */ 3:
                    message.status = DiscoverStepStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIDiscoverCompletedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.DiscoverMetadata metadata = 1; */
        if (message.metadata)
            DiscoverMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverResourceMetadata resource = 2; */
        if (message.resource)
            DiscoverResourceMetadata.internalBinaryWrite(message.resource, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoverStepStatus status = 3; */
        if (message.status)
            DiscoverStepStatus.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIDiscoverCompletedEvent
 */
export const UIDiscoverCompletedEvent = new UIDiscoverCompletedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleCreateEvent$Type extends MessageType<RoleCreateEvent> {
    constructor() {
        super("prehog.v1alpha.RoleCreateEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoleCreateEvent>): RoleCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.roleName = "";
        if (value !== undefined)
            reflectionMergePartial<RoleCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleCreateEvent): RoleCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string role_name */ 2:
                    message.roleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string role_name = 2; */
        if (message.roleName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.RoleCreateEvent
 */
export const RoleCreateEvent = new RoleCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BotCreateEvent$Type extends MessageType<BotCreateEvent> {
    constructor() {
        super("prehog.v1alpha.BotCreateEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bot_user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "role_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "join_method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bot_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BotCreateEvent>): BotCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.botUserName = "";
        message.roleName = "";
        message.roleCount = 0n;
        message.joinMethod = "";
        message.botName = "";
        if (value !== undefined)
            reflectionMergePartial<BotCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BotCreateEvent): BotCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string bot_user_name */ 2:
                    message.botUserName = reader.string();
                    break;
                case /* string role_name */ 3:
                    message.roleName = reader.string();
                    break;
                case /* int64 role_count */ 4:
                    message.roleCount = reader.int64().toBigInt();
                    break;
                case /* string join_method */ 5:
                    message.joinMethod = reader.string();
                    break;
                case /* string bot_name */ 6:
                    message.botName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BotCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string bot_user_name = 2; */
        if (message.botUserName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.botUserName);
        /* string role_name = 3; */
        if (message.roleName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.roleName);
        /* int64 role_count = 4; */
        if (message.roleCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.roleCount);
        /* string join_method = 5; */
        if (message.joinMethod !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.joinMethod);
        /* string bot_name = 6; */
        if (message.botName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.botName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.BotCreateEvent
 */
export const BotCreateEvent = new BotCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BotJoinEvent$Type extends MessageType<BotJoinEvent> {
    constructor() {
        super("prehog.v1alpha.BotJoinEvent", [
            { no: 1, name: "bot_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "join_method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "join_token_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BotJoinEvent>): BotJoinEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.botName = "";
        message.joinMethod = "";
        message.joinTokenName = "";
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<BotJoinEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BotJoinEvent): BotJoinEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bot_name */ 1:
                    message.botName = reader.string();
                    break;
                case /* string join_method */ 2:
                    message.joinMethod = reader.string();
                    break;
                case /* string join_token_name */ 3:
                    message.joinTokenName = reader.string();
                    break;
                case /* string user_name */ 4:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BotJoinEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bot_name = 1; */
        if (message.botName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botName);
        /* string join_method = 2; */
        if (message.joinMethod !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.joinMethod);
        /* string join_token_name = 3; */
        if (message.joinTokenName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.joinTokenName);
        /* string user_name = 4; */
        if (message.userName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.BotJoinEvent
 */
export const BotJoinEvent = new BotJoinEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UICreateNewRoleClickEvent$Type extends MessageType<UICreateNewRoleClickEvent> {
    constructor() {
        super("prehog.v1alpha.UICreateNewRoleClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UICreateNewRoleClickEvent>): UICreateNewRoleClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UICreateNewRoleClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UICreateNewRoleClickEvent): UICreateNewRoleClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UICreateNewRoleClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UICreateNewRoleClickEvent
 */
export const UICreateNewRoleClickEvent = new UICreateNewRoleClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UICreateNewRoleSaveClickEvent$Type extends MessageType<UICreateNewRoleSaveClickEvent> {
    constructor() {
        super("prehog.v1alpha.UICreateNewRoleSaveClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UICreateNewRoleSaveClickEvent>): UICreateNewRoleSaveClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UICreateNewRoleSaveClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UICreateNewRoleSaveClickEvent): UICreateNewRoleSaveClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UICreateNewRoleSaveClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UICreateNewRoleSaveClickEvent
 */
export const UICreateNewRoleSaveClickEvent = new UICreateNewRoleSaveClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UICreateNewRoleCancelClickEvent$Type extends MessageType<UICreateNewRoleCancelClickEvent> {
    constructor() {
        super("prehog.v1alpha.UICreateNewRoleCancelClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UICreateNewRoleCancelClickEvent>): UICreateNewRoleCancelClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UICreateNewRoleCancelClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UICreateNewRoleCancelClickEvent): UICreateNewRoleCancelClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UICreateNewRoleCancelClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UICreateNewRoleCancelClickEvent
 */
export const UICreateNewRoleCancelClickEvent = new UICreateNewRoleCancelClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UICreateNewRoleViewDocumentationClickEvent$Type extends MessageType<UICreateNewRoleViewDocumentationClickEvent> {
    constructor() {
        super("prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UICreateNewRoleViewDocumentationClickEvent>): UICreateNewRoleViewDocumentationClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<UICreateNewRoleViewDocumentationClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UICreateNewRoleViewDocumentationClickEvent): UICreateNewRoleViewDocumentationClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UICreateNewRoleViewDocumentationClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
 */
export const UICreateNewRoleViewDocumentationClickEvent = new UICreateNewRoleViewDocumentationClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UICallToActionClickEvent$Type extends MessageType<UICallToActionClickEvent> {
    constructor() {
        super("prehog.v1alpha.UICallToActionClickEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cta", kind: "enum", T: () => ["prehog.v1alpha.CTA", CTA] }
        ]);
    }
    create(value?: PartialMessage<UICallToActionClickEvent>): UICallToActionClickEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.cta = 0;
        if (value !== undefined)
            reflectionMergePartial<UICallToActionClickEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UICallToActionClickEvent): UICallToActionClickEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.CTA cta */ 2:
                    message.cta = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UICallToActionClickEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.CTA cta = 2; */
        if (message.cta !== 0)
            writer.tag(2, WireType.Varint).int32(message.cta);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UICallToActionClickEvent
 */
export const UICallToActionClickEvent = new UICallToActionClickEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KubeRequestEvent$Type extends MessageType<KubeRequestEvent> {
    constructor() {
        super("prehog.v1alpha.KubeRequestEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_kind", kind: "enum", T: () => ["prehog.v1alpha.UserKind", UserKind, "USER_KIND_"] }
        ]);
    }
    create(value?: PartialMessage<KubeRequestEvent>): KubeRequestEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.userKind = 0;
        if (value !== undefined)
            reflectionMergePartial<KubeRequestEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KubeRequestEvent): KubeRequestEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.UserKind user_kind */ 2:
                    message.userKind = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KubeRequestEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.UserKind user_kind = 2; */
        if (message.userKind !== 0)
            writer.tag(2, WireType.Varint).int32(message.userKind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.KubeRequestEvent
 */
export const KubeRequestEvent = new KubeRequestEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SFTPEvent$Type extends MessageType<SFTPEvent> {
    constructor() {
        super("prehog.v1alpha.SFTPEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "user_kind", kind: "enum", T: () => ["prehog.v1alpha.UserKind", UserKind, "USER_KIND_"] }
        ]);
    }
    create(value?: PartialMessage<SFTPEvent>): SFTPEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.action = 0;
        message.userKind = 0;
        if (value !== undefined)
            reflectionMergePartial<SFTPEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SFTPEvent): SFTPEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* int32 action */ 2:
                    message.action = reader.int32();
                    break;
                case /* prehog.v1alpha.UserKind user_kind */ 3:
                    message.userKind = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SFTPEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* int32 action = 2; */
        if (message.action !== 0)
            writer.tag(2, WireType.Varint).int32(message.action);
        /* prehog.v1alpha.UserKind user_kind = 3; */
        if (message.userKind !== 0)
            writer.tag(3, WireType.Varint).int32(message.userKind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SFTPEvent
 */
export const SFTPEvent = new SFTPEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AgentMetadataEvent$Type extends MessageType<AgentMetadataEvent> {
    constructor() {
        super("prehog.v1alpha.AgentMetadataEvent", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "host_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "services", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "os", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "os_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "host_architecture", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "glibc_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "install_methods", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "container_runtime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "container_orchestrator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "cloud_environment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "external_upgrader", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AgentMetadataEvent>): AgentMetadataEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.hostId = "";
        message.services = [];
        message.os = "";
        message.osVersion = "";
        message.hostArchitecture = "";
        message.glibcVersion = "";
        message.installMethods = [];
        message.containerRuntime = "";
        message.containerOrchestrator = "";
        message.cloudEnvironment = "";
        message.externalUpgrader = "";
        if (value !== undefined)
            reflectionMergePartial<AgentMetadataEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgentMetadataEvent): AgentMetadataEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string host_id */ 2:
                    message.hostId = reader.string();
                    break;
                case /* repeated string services */ 3:
                    message.services.push(reader.string());
                    break;
                case /* string os */ 4:
                    message.os = reader.string();
                    break;
                case /* string os_version */ 5:
                    message.osVersion = reader.string();
                    break;
                case /* string host_architecture */ 6:
                    message.hostArchitecture = reader.string();
                    break;
                case /* string glibc_version */ 7:
                    message.glibcVersion = reader.string();
                    break;
                case /* repeated string install_methods */ 8:
                    message.installMethods.push(reader.string());
                    break;
                case /* string container_runtime */ 9:
                    message.containerRuntime = reader.string();
                    break;
                case /* string container_orchestrator */ 10:
                    message.containerOrchestrator = reader.string();
                    break;
                case /* string cloud_environment */ 11:
                    message.cloudEnvironment = reader.string();
                    break;
                case /* string external_upgrader */ 12:
                    message.externalUpgrader = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgentMetadataEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string host_id = 2; */
        if (message.hostId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hostId);
        /* repeated string services = 3; */
        for (let i = 0; i < message.services.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.services[i]);
        /* string os = 4; */
        if (message.os !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.os);
        /* string os_version = 5; */
        if (message.osVersion !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.osVersion);
        /* string host_architecture = 6; */
        if (message.hostArchitecture !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.hostArchitecture);
        /* string glibc_version = 7; */
        if (message.glibcVersion !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.glibcVersion);
        /* repeated string install_methods = 8; */
        for (let i = 0; i < message.installMethods.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.installMethods[i]);
        /* string container_runtime = 9; */
        if (message.containerRuntime !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.containerRuntime);
        /* string container_orchestrator = 10; */
        if (message.containerOrchestrator !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.containerOrchestrator);
        /* string cloud_environment = 11; */
        if (message.cloudEnvironment !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.cloudEnvironment);
        /* string external_upgrader = 12; */
        if (message.externalUpgrader !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.externalUpgrader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AgentMetadataEvent
 */
export const AgentMetadataEvent = new AgentMetadataEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssistCompletionEvent$Type extends MessageType<AssistCompletionEvent> {
    constructor() {
        super("prehog.v1alpha.AssistCompletionEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "conversation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "prompt_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "completion_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AssistCompletionEvent>): AssistCompletionEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.conversationId = "";
        message.totalTokens = 0n;
        message.promptTokens = 0n;
        message.completionTokens = 0n;
        if (value !== undefined)
            reflectionMergePartial<AssistCompletionEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssistCompletionEvent): AssistCompletionEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string conversation_id */ 2:
                    message.conversationId = reader.string();
                    break;
                case /* int64 total_tokens */ 3:
                    message.totalTokens = reader.int64().toBigInt();
                    break;
                case /* int64 prompt_tokens */ 4:
                    message.promptTokens = reader.int64().toBigInt();
                    break;
                case /* int64 completion_tokens */ 5:
                    message.completionTokens = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssistCompletionEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string conversation_id = 2; */
        if (message.conversationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.conversationId);
        /* int64 total_tokens = 3; */
        if (message.totalTokens !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalTokens);
        /* int64 prompt_tokens = 4; */
        if (message.promptTokens !== 0n)
            writer.tag(4, WireType.Varint).int64(message.promptTokens);
        /* int64 completion_tokens = 5; */
        if (message.completionTokens !== 0n)
            writer.tag(5, WireType.Varint).int64(message.completionTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AssistCompletionEvent
 */
export const AssistCompletionEvent = new AssistCompletionEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssistExecutionEvent$Type extends MessageType<AssistExecutionEvent> {
    constructor() {
        super("prehog.v1alpha.AssistExecutionEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "conversation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "node_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "total_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "prompt_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "completion_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AssistExecutionEvent>): AssistExecutionEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.conversationId = "";
        message.nodeCount = 0n;
        message.totalTokens = 0n;
        message.promptTokens = 0n;
        message.completionTokens = 0n;
        if (value !== undefined)
            reflectionMergePartial<AssistExecutionEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssistExecutionEvent): AssistExecutionEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string conversation_id */ 2:
                    message.conversationId = reader.string();
                    break;
                case /* int64 node_count */ 3:
                    message.nodeCount = reader.int64().toBigInt();
                    break;
                case /* int64 total_tokens */ 4:
                    message.totalTokens = reader.int64().toBigInt();
                    break;
                case /* int64 prompt_tokens */ 5:
                    message.promptTokens = reader.int64().toBigInt();
                    break;
                case /* int64 completion_tokens */ 6:
                    message.completionTokens = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssistExecutionEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string conversation_id = 2; */
        if (message.conversationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.conversationId);
        /* int64 node_count = 3; */
        if (message.nodeCount !== 0n)
            writer.tag(3, WireType.Varint).int64(message.nodeCount);
        /* int64 total_tokens = 4; */
        if (message.totalTokens !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalTokens);
        /* int64 prompt_tokens = 5; */
        if (message.promptTokens !== 0n)
            writer.tag(5, WireType.Varint).int64(message.promptTokens);
        /* int64 completion_tokens = 6; */
        if (message.completionTokens !== 0n)
            writer.tag(6, WireType.Varint).int64(message.completionTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AssistExecutionEvent
 */
export const AssistExecutionEvent = new AssistExecutionEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssistNewConversationEvent$Type extends MessageType<AssistNewConversationEvent> {
    constructor() {
        super("prehog.v1alpha.AssistNewConversationEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AssistNewConversationEvent>): AssistNewConversationEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.category = "";
        if (value !== undefined)
            reflectionMergePartial<AssistNewConversationEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssistNewConversationEvent): AssistNewConversationEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string category */ 2:
                    message.category = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssistNewConversationEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string category = 2; */
        if (message.category !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.category);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AssistNewConversationEvent
 */
export const AssistNewConversationEvent = new AssistNewConversationEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssistAccessRequestEvent$Type extends MessageType<AssistAccessRequestEvent> {
    constructor() {
        super("prehog.v1alpha.AssistAccessRequestEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resource_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "total_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "prompt_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "completion_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AssistAccessRequestEvent>): AssistAccessRequestEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.resourceType = "";
        message.totalTokens = 0n;
        message.promptTokens = 0n;
        message.completionTokens = 0n;
        if (value !== undefined)
            reflectionMergePartial<AssistAccessRequestEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssistAccessRequestEvent): AssistAccessRequestEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string resource_type */ 2:
                    message.resourceType = reader.string();
                    break;
                case /* int64 total_tokens */ 4:
                    message.totalTokens = reader.int64().toBigInt();
                    break;
                case /* int64 prompt_tokens */ 5:
                    message.promptTokens = reader.int64().toBigInt();
                    break;
                case /* int64 completion_tokens */ 6:
                    message.completionTokens = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssistAccessRequestEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string resource_type = 2; */
        if (message.resourceType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resourceType);
        /* int64 total_tokens = 4; */
        if (message.totalTokens !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalTokens);
        /* int64 prompt_tokens = 5; */
        if (message.promptTokens !== 0n)
            writer.tag(5, WireType.Varint).int64(message.promptTokens);
        /* int64 completion_tokens = 6; */
        if (message.completionTokens !== 0n)
            writer.tag(6, WireType.Varint).int64(message.completionTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AssistAccessRequestEvent
 */
export const AssistAccessRequestEvent = new AssistAccessRequestEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssistActionEvent$Type extends MessageType<AssistActionEvent> {
    constructor() {
        super("prehog.v1alpha.AssistActionEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "total_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "prompt_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "completion_tokens", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AssistActionEvent>): AssistActionEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.action = "";
        message.totalTokens = 0n;
        message.promptTokens = 0n;
        message.completionTokens = 0n;
        if (value !== undefined)
            reflectionMergePartial<AssistActionEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssistActionEvent): AssistActionEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string action */ 2:
                    message.action = reader.string();
                    break;
                case /* int64 total_tokens */ 4:
                    message.totalTokens = reader.int64().toBigInt();
                    break;
                case /* int64 prompt_tokens */ 5:
                    message.promptTokens = reader.int64().toBigInt();
                    break;
                case /* int64 completion_tokens */ 6:
                    message.completionTokens = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssistActionEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string action = 2; */
        if (message.action !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.action);
        /* int64 total_tokens = 4; */
        if (message.totalTokens !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalTokens);
        /* int64 prompt_tokens = 5; */
        if (message.promptTokens !== 0n)
            writer.tag(5, WireType.Varint).int64(message.promptTokens);
        /* int64 completion_tokens = 6; */
        if (message.completionTokens !== 0n)
            writer.tag(6, WireType.Varint).int64(message.completionTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AssistActionEvent
 */
export const AssistActionEvent = new AssistActionEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListMetadata$Type extends MessageType<AccessListMetadata> {
    constructor() {
        super("prehog.v1alpha.AccessListMetadata", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AccessListMetadata>): AccessListMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListMetadata): AccessListMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListMetadata
 */
export const AccessListMetadata = new AccessListMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListCreateEvent$Type extends MessageType<AccessListCreateEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListCreateEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata }
        ]);
    }
    create(value?: PartialMessage<AccessListCreateEvent>): AccessListCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListCreateEvent): AccessListCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListCreateEvent
 */
export const AccessListCreateEvent = new AccessListCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListUpdateEvent$Type extends MessageType<AccessListUpdateEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListUpdateEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata }
        ]);
    }
    create(value?: PartialMessage<AccessListUpdateEvent>): AccessListUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListUpdateEvent): AccessListUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListUpdateEvent
 */
export const AccessListUpdateEvent = new AccessListUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListDeleteEvent$Type extends MessageType<AccessListDeleteEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListDeleteEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata }
        ]);
    }
    create(value?: PartialMessage<AccessListDeleteEvent>): AccessListDeleteEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListDeleteEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListDeleteEvent): AccessListDeleteEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListDeleteEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListDeleteEvent
 */
export const AccessListDeleteEvent = new AccessListDeleteEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListMemberCreateEvent$Type extends MessageType<AccessListMemberCreateEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListMemberCreateEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata }
        ]);
    }
    create(value?: PartialMessage<AccessListMemberCreateEvent>): AccessListMemberCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListMemberCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListMemberCreateEvent): AccessListMemberCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListMemberCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListMemberCreateEvent
 */
export const AccessListMemberCreateEvent = new AccessListMemberCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListMemberUpdateEvent$Type extends MessageType<AccessListMemberUpdateEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListMemberUpdateEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata }
        ]);
    }
    create(value?: PartialMessage<AccessListMemberUpdateEvent>): AccessListMemberUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListMemberUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListMemberUpdateEvent): AccessListMemberUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListMemberUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListMemberUpdateEvent
 */
export const AccessListMemberUpdateEvent = new AccessListMemberUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListMemberDeleteEvent$Type extends MessageType<AccessListMemberDeleteEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListMemberDeleteEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata }
        ]);
    }
    create(value?: PartialMessage<AccessListMemberDeleteEvent>): AccessListMemberDeleteEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListMemberDeleteEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListMemberDeleteEvent): AccessListMemberDeleteEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListMemberDeleteEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListMemberDeleteEvent
 */
export const AccessListMemberDeleteEvent = new AccessListMemberDeleteEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListGrantsToUserEvent$Type extends MessageType<AccessListGrantsToUserEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListGrantsToUserEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "count_roles_granted", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "count_traits_granted", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AccessListGrantsToUserEvent>): AccessListGrantsToUserEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.countRolesGranted = 0;
        message.countTraitsGranted = 0;
        if (value !== undefined)
            reflectionMergePartial<AccessListGrantsToUserEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListGrantsToUserEvent): AccessListGrantsToUserEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* int32 count_roles_granted */ 2:
                    message.countRolesGranted = reader.int32();
                    break;
                case /* int32 count_traits_granted */ 3:
                    message.countTraitsGranted = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListGrantsToUserEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* int32 count_roles_granted = 2; */
        if (message.countRolesGranted !== 0)
            writer.tag(2, WireType.Varint).int32(message.countRolesGranted);
        /* int32 count_traits_granted = 3; */
        if (message.countTraitsGranted !== 0)
            writer.tag(3, WireType.Varint).int32(message.countTraitsGranted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListGrantsToUserEvent
 */
export const AccessListGrantsToUserEvent = new AccessListGrantsToUserEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListReviewCreateEvent$Type extends MessageType<AccessListReviewCreateEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListReviewCreateEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata },
            { no: 3, name: "days_past_next_audit_date", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "membership_requirements_changed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "review_frequency_changed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "review_day_of_month_changed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "number_of_removed_members", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AccessListReviewCreateEvent>): AccessListReviewCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.daysPastNextAuditDate = 0;
        message.membershipRequirementsChanged = false;
        message.reviewFrequencyChanged = false;
        message.reviewDayOfMonthChanged = false;
        message.numberOfRemovedMembers = 0;
        if (value !== undefined)
            reflectionMergePartial<AccessListReviewCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListReviewCreateEvent): AccessListReviewCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* int32 days_past_next_audit_date */ 3:
                    message.daysPastNextAuditDate = reader.int32();
                    break;
                case /* bool membership_requirements_changed */ 4:
                    message.membershipRequirementsChanged = reader.bool();
                    break;
                case /* bool review_frequency_changed */ 5:
                    message.reviewFrequencyChanged = reader.bool();
                    break;
                case /* bool review_day_of_month_changed */ 6:
                    message.reviewDayOfMonthChanged = reader.bool();
                    break;
                case /* int32 number_of_removed_members */ 7:
                    message.numberOfRemovedMembers = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListReviewCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 days_past_next_audit_date = 3; */
        if (message.daysPastNextAuditDate !== 0)
            writer.tag(3, WireType.Varint).int32(message.daysPastNextAuditDate);
        /* bool membership_requirements_changed = 4; */
        if (message.membershipRequirementsChanged !== false)
            writer.tag(4, WireType.Varint).bool(message.membershipRequirementsChanged);
        /* bool review_frequency_changed = 5; */
        if (message.reviewFrequencyChanged !== false)
            writer.tag(5, WireType.Varint).bool(message.reviewFrequencyChanged);
        /* bool review_day_of_month_changed = 6; */
        if (message.reviewDayOfMonthChanged !== false)
            writer.tag(6, WireType.Varint).bool(message.reviewDayOfMonthChanged);
        /* int32 number_of_removed_members = 7; */
        if (message.numberOfRemovedMembers !== 0)
            writer.tag(7, WireType.Varint).int32(message.numberOfRemovedMembers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListReviewCreateEvent
 */
export const AccessListReviewCreateEvent = new AccessListReviewCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListReviewDeleteEvent$Type extends MessageType<AccessListReviewDeleteEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListReviewDeleteEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "message", T: () => AccessListMetadata },
            { no: 3, name: "access_list_review_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AccessListReviewDeleteEvent>): AccessListReviewDeleteEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.accessListReviewId = "";
        if (value !== undefined)
            reflectionMergePartial<AccessListReviewDeleteEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListReviewDeleteEvent): AccessListReviewDeleteEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.AccessListMetadata metadata */ 2:
                    message.metadata = AccessListMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string access_list_review_id */ 3:
                    message.accessListReviewId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListReviewDeleteEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.AccessListMetadata metadata = 2; */
        if (message.metadata)
            AccessListMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string access_list_review_id = 3; */
        if (message.accessListReviewId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.accessListReviewId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListReviewDeleteEvent
 */
export const AccessListReviewDeleteEvent = new AccessListReviewDeleteEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessListReviewComplianceEvent$Type extends MessageType<AccessListReviewComplianceEvent> {
    constructor() {
        super("prehog.v1alpha.AccessListReviewComplianceEvent", [
            { no: 1, name: "total_access_lists", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "access_lists_need_review", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AccessListReviewComplianceEvent>): AccessListReviewComplianceEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalAccessLists = 0;
        message.accessListsNeedReview = 0;
        if (value !== undefined)
            reflectionMergePartial<AccessListReviewComplianceEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessListReviewComplianceEvent): AccessListReviewComplianceEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 total_access_lists */ 1:
                    message.totalAccessLists = reader.int32();
                    break;
                case /* int32 access_lists_need_review */ 2:
                    message.accessListsNeedReview = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessListReviewComplianceEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 total_access_lists = 1; */
        if (message.totalAccessLists !== 0)
            writer.tag(1, WireType.Varint).int32(message.totalAccessLists);
        /* int32 access_lists_need_review = 2; */
        if (message.accessListsNeedReview !== 0)
            writer.tag(2, WireType.Varint).int32(message.accessListsNeedReview);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AccessListReviewComplianceEvent
 */
export const AccessListReviewComplianceEvent = new AccessListReviewComplianceEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntegrationEnrollMetadata$Type extends MessageType<IntegrationEnrollMetadata> {
    constructor() {
        super("prehog.v1alpha.IntegrationEnrollMetadata", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind", kind: "enum", T: () => ["prehog.v1alpha.IntegrationEnrollKind", IntegrationEnrollKind, "INTEGRATION_ENROLL_KIND_"] },
            { no: 3, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntegrationEnrollMetadata>): IntegrationEnrollMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.kind = 0;
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<IntegrationEnrollMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntegrationEnrollMetadata): IntegrationEnrollMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* prehog.v1alpha.IntegrationEnrollKind kind */ 2:
                    message.kind = reader.int32();
                    break;
                case /* string user_name */ 3:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntegrationEnrollMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* prehog.v1alpha.IntegrationEnrollKind kind = 2; */
        if (message.kind !== 0)
            writer.tag(2, WireType.Varint).int32(message.kind);
        /* string user_name = 3; */
        if (message.userName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.IntegrationEnrollMetadata
 */
export const IntegrationEnrollMetadata = new IntegrationEnrollMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIIntegrationEnrollStartEvent$Type extends MessageType<UIIntegrationEnrollStartEvent> {
    constructor() {
        super("prehog.v1alpha.UIIntegrationEnrollStartEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => IntegrationEnrollMetadata }
        ]);
    }
    create(value?: PartialMessage<UIIntegrationEnrollStartEvent>): UIIntegrationEnrollStartEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIIntegrationEnrollStartEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIIntegrationEnrollStartEvent): UIIntegrationEnrollStartEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.IntegrationEnrollMetadata metadata */ 1:
                    message.metadata = IntegrationEnrollMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIIntegrationEnrollStartEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.IntegrationEnrollMetadata metadata = 1; */
        if (message.metadata)
            IntegrationEnrollMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIIntegrationEnrollStartEvent
 */
export const UIIntegrationEnrollStartEvent = new UIIntegrationEnrollStartEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIIntegrationEnrollCompleteEvent$Type extends MessageType<UIIntegrationEnrollCompleteEvent> {
    constructor() {
        super("prehog.v1alpha.UIIntegrationEnrollCompleteEvent", [
            { no: 1, name: "metadata", kind: "message", T: () => IntegrationEnrollMetadata }
        ]);
    }
    create(value?: PartialMessage<UIIntegrationEnrollCompleteEvent>): UIIntegrationEnrollCompleteEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIIntegrationEnrollCompleteEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIIntegrationEnrollCompleteEvent): UIIntegrationEnrollCompleteEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.IntegrationEnrollMetadata metadata */ 1:
                    message.metadata = IntegrationEnrollMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIIntegrationEnrollCompleteEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.IntegrationEnrollMetadata metadata = 1; */
        if (message.metadata)
            IntegrationEnrollMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.UIIntegrationEnrollCompleteEvent
 */
export const UIIntegrationEnrollCompleteEvent = new UIIntegrationEnrollCompleteEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditorChangeEvent$Type extends MessageType<EditorChangeEvent> {
    constructor() {
        super("prehog.v1alpha.EditorChangeEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["prehog.v1alpha.EditorChangeStatus", EditorChangeStatus, "EDITOR_CHANGE_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<EditorChangeEvent>): EditorChangeEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<EditorChangeEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditorChangeEvent): EditorChangeEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.EditorChangeStatus status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditorChangeEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.EditorChangeStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.EditorChangeEvent
 */
export const EditorChangeEvent = new EditorChangeEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceAuthenticateEvent$Type extends MessageType<DeviceAuthenticateEvent> {
    constructor() {
        super("prehog.v1alpha.DeviceAuthenticateEvent", [
            { no: 1, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "device_os_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceAuthenticateEvent>): DeviceAuthenticateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceId = "";
        message.userName = "";
        message.deviceOsType = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceAuthenticateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceAuthenticateEvent): DeviceAuthenticateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_id */ 1:
                    message.deviceId = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string device_os_type */ 3:
                    message.deviceOsType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceAuthenticateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_id = 1; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string device_os_type = 3; */
        if (message.deviceOsType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceOsType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DeviceAuthenticateEvent
 */
export const DeviceAuthenticateEvent = new DeviceAuthenticateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceEnrollEvent$Type extends MessageType<DeviceEnrollEvent> {
    constructor() {
        super("prehog.v1alpha.DeviceEnrollEvent", [
            { no: 1, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "device_os_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "device_origin", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceEnrollEvent>): DeviceEnrollEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceId = "";
        message.userName = "";
        message.deviceOsType = "";
        message.deviceOrigin = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceEnrollEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceEnrollEvent): DeviceEnrollEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_id */ 1:
                    message.deviceId = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string device_os_type */ 3:
                    message.deviceOsType = reader.string();
                    break;
                case /* string device_origin */ 4:
                    message.deviceOrigin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceEnrollEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_id = 1; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string device_os_type = 3; */
        if (message.deviceOsType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceOsType);
        /* string device_origin = 4; */
        if (message.deviceOrigin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deviceOrigin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DeviceEnrollEvent
 */
export const DeviceEnrollEvent = new DeviceEnrollEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeatureRecommendationEvent$Type extends MessageType<FeatureRecommendationEvent> {
    constructor() {
        super("prehog.v1alpha.FeatureRecommendationEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "feature", kind: "enum", T: () => ["prehog.v1alpha.Feature", Feature, "FEATURE_"] },
            { no: 3, name: "feature_recommendation_status", kind: "enum", T: () => ["prehog.v1alpha.FeatureRecommendationStatus", FeatureRecommendationStatus, "FEATURE_RECOMMENDATION_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<FeatureRecommendationEvent>): FeatureRecommendationEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.feature = 0;
        message.featureRecommendationStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<FeatureRecommendationEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeatureRecommendationEvent): FeatureRecommendationEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* prehog.v1alpha.Feature feature */ 2:
                    message.feature = reader.int32();
                    break;
                case /* prehog.v1alpha.FeatureRecommendationStatus feature_recommendation_status */ 3:
                    message.featureRecommendationStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeatureRecommendationEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* prehog.v1alpha.Feature feature = 2; */
        if (message.feature !== 0)
            writer.tag(2, WireType.Varint).int32(message.feature);
        /* prehog.v1alpha.FeatureRecommendationStatus feature_recommendation_status = 3; */
        if (message.featureRecommendationStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.featureRecommendationStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.FeatureRecommendationEvent
 */
export const FeatureRecommendationEvent = new FeatureRecommendationEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LicenseLimitEvent$Type extends MessageType<LicenseLimitEvent> {
    constructor() {
        super("prehog.v1alpha.LicenseLimitEvent", [
            { no: 1, name: "license_limit", kind: "enum", T: () => ["prehog.v1alpha.LicenseLimit", LicenseLimit, "LICENSE_LIMIT_"] }
        ]);
    }
    create(value?: PartialMessage<LicenseLimitEvent>): LicenseLimitEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.licenseLimit = 0;
        if (value !== undefined)
            reflectionMergePartial<LicenseLimitEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LicenseLimitEvent): LicenseLimitEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.LicenseLimit license_limit */ 1:
                    message.licenseLimit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LicenseLimitEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.LicenseLimit license_limit = 1; */
        if (message.licenseLimit !== 0)
            writer.tag(1, WireType.Varint).int32(message.licenseLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.LicenseLimitEvent
 */
export const LicenseLimitEvent = new LicenseLimitEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DesktopDirectoryShareEvent$Type extends MessageType<DesktopDirectoryShareEvent> {
    constructor() {
        super("prehog.v1alpha.DesktopDirectoryShareEvent", [
            { no: 1, name: "desktop", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "directory_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DesktopDirectoryShareEvent>): DesktopDirectoryShareEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.desktop = "";
        message.userName = "";
        message.directoryName = "";
        if (value !== undefined)
            reflectionMergePartial<DesktopDirectoryShareEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DesktopDirectoryShareEvent): DesktopDirectoryShareEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string desktop */ 1:
                    message.desktop = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string directory_name */ 3:
                    message.directoryName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DesktopDirectoryShareEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string desktop = 1; */
        if (message.desktop !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.desktop);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string directory_name = 3; */
        if (message.directoryName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.directoryName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DesktopDirectoryShareEvent
 */
export const DesktopDirectoryShareEvent = new DesktopDirectoryShareEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DesktopClipboardEvent$Type extends MessageType<DesktopClipboardEvent> {
    constructor() {
        super("prehog.v1alpha.DesktopClipboardEvent", [
            { no: 1, name: "desktop", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DesktopClipboardEvent>): DesktopClipboardEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.desktop = "";
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<DesktopClipboardEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DesktopClipboardEvent): DesktopClipboardEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string desktop */ 1:
                    message.desktop = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DesktopClipboardEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string desktop = 1; */
        if (message.desktop !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.desktop);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DesktopClipboardEvent
 */
export const DesktopClipboardEvent = new DesktopClipboardEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TAGExecuteQueryEvent$Type extends MessageType<TAGExecuteQueryEvent> {
    constructor() {
        super("prehog.v1alpha.TAGExecuteQueryEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total_nodes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "total_edges", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "is_success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TAGExecuteQueryEvent>): TAGExecuteQueryEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.totalNodes = 0n;
        message.totalEdges = 0n;
        message.isSuccess = false;
        if (value !== undefined)
            reflectionMergePartial<TAGExecuteQueryEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TAGExecuteQueryEvent): TAGExecuteQueryEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* int64 total_nodes */ 2:
                    message.totalNodes = reader.int64().toBigInt();
                    break;
                case /* int64 total_edges */ 3:
                    message.totalEdges = reader.int64().toBigInt();
                    break;
                case /* bool is_success */ 4:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TAGExecuteQueryEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* int64 total_nodes = 2; */
        if (message.totalNodes !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalNodes);
        /* int64 total_edges = 3; */
        if (message.totalEdges !== 0n)
            writer.tag(3, WireType.Varint).int64(message.totalEdges);
        /* bool is_success = 4; */
        if (message.isSuccess !== false)
            writer.tag(4, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.TAGExecuteQueryEvent
 */
export const TAGExecuteQueryEvent = new TAGExecuteQueryEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExternalAuditStorageAuthenticateEvent$Type extends MessageType<ExternalAuditStorageAuthenticateEvent> {
    constructor() {
        super("prehog.v1alpha.ExternalAuditStorageAuthenticateEvent", []);
    }
    create(value?: PartialMessage<ExternalAuditStorageAuthenticateEvent>): ExternalAuditStorageAuthenticateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExternalAuditStorageAuthenticateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExternalAuditStorageAuthenticateEvent): ExternalAuditStorageAuthenticateEvent {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExternalAuditStorageAuthenticateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ExternalAuditStorageAuthenticateEvent
 */
export const ExternalAuditStorageAuthenticateEvent = new ExternalAuditStorageAuthenticateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SecurityReportGetResultEvent$Type extends MessageType<SecurityReportGetResultEvent> {
    constructor() {
        super("prehog.v1alpha.SecurityReportGetResultEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "days", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SecurityReportGetResultEvent>): SecurityReportGetResultEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.name = "";
        message.days = 0;
        if (value !== undefined)
            reflectionMergePartial<SecurityReportGetResultEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SecurityReportGetResultEvent): SecurityReportGetResultEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 days */ 3:
                    message.days = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SecurityReportGetResultEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 days = 3; */
        if (message.days !== 0)
            writer.tag(3, WireType.Varint).int32(message.days);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SecurityReportGetResultEvent
 */
export const SecurityReportGetResultEvent = new SecurityReportGetResultEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuditQueryRunEvent$Type extends MessageType<AuditQueryRunEvent> {
    constructor() {
        super("prehog.v1alpha.AuditQueryRunEvent", [
            { no: 1, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "days", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "is_success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AuditQueryRunEvent>): AuditQueryRunEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.days = 0;
        message.isSuccess = false;
        if (value !== undefined)
            reflectionMergePartial<AuditQueryRunEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuditQueryRunEvent): AuditQueryRunEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_name */ 1:
                    message.userName = reader.string();
                    break;
                case /* int32 days */ 2:
                    message.days = reader.int32();
                    break;
                case /* bool is_success */ 3:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuditQueryRunEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_name = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* int32 days = 2; */
        if (message.days !== 0)
            writer.tag(2, WireType.Varint).int32(message.days);
        /* bool is_success = 3; */
        if (message.isSuccess !== false)
            writer.tag(3, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.AuditQueryRunEvent
 */
export const AuditQueryRunEvent = new AuditQueryRunEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoveryFetchEvent$Type extends MessageType<DiscoveryFetchEvent> {
    constructor() {
        super("prehog.v1alpha.DiscoveryFetchEvent", [
            { no: 1, name: "cloud_provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resource_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiscoveryFetchEvent>): DiscoveryFetchEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cloudProvider = "";
        message.resourceType = "";
        if (value !== undefined)
            reflectionMergePartial<DiscoveryFetchEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoveryFetchEvent): DiscoveryFetchEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cloud_provider */ 1:
                    message.cloudProvider = reader.string();
                    break;
                case /* string resource_type */ 2:
                    message.resourceType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoveryFetchEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cloud_provider = 1; */
        if (message.cloudProvider !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cloudProvider);
        /* string resource_type = 2; */
        if (message.resourceType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resourceType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DiscoveryFetchEvent
 */
export const DiscoveryFetchEvent = new DiscoveryFetchEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OktaAccessListSyncEvent$Type extends MessageType<OktaAccessListSyncEvent> {
    constructor() {
        super("prehog.v1alpha.OktaAccessListSyncEvent", [
            { no: 1, name: "num_app_filters", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "num_group_filters", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "num_apps", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "num_groups", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "num_roles", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "num_access_lists", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "num_access_list_members", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OktaAccessListSyncEvent>): OktaAccessListSyncEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numAppFilters = 0;
        message.numGroupFilters = 0;
        message.numApps = 0;
        message.numGroups = 0;
        message.numRoles = 0;
        message.numAccessLists = 0;
        message.numAccessListMembers = 0;
        if (value !== undefined)
            reflectionMergePartial<OktaAccessListSyncEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OktaAccessListSyncEvent): OktaAccessListSyncEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 num_app_filters */ 1:
                    message.numAppFilters = reader.int32();
                    break;
                case /* int32 num_group_filters */ 2:
                    message.numGroupFilters = reader.int32();
                    break;
                case /* int32 num_apps */ 3:
                    message.numApps = reader.int32();
                    break;
                case /* int32 num_groups */ 4:
                    message.numGroups = reader.int32();
                    break;
                case /* int32 num_roles */ 5:
                    message.numRoles = reader.int32();
                    break;
                case /* int32 num_access_lists */ 6:
                    message.numAccessLists = reader.int32();
                    break;
                case /* int32 num_access_list_members */ 7:
                    message.numAccessListMembers = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OktaAccessListSyncEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 num_app_filters = 1; */
        if (message.numAppFilters !== 0)
            writer.tag(1, WireType.Varint).int32(message.numAppFilters);
        /* int32 num_group_filters = 2; */
        if (message.numGroupFilters !== 0)
            writer.tag(2, WireType.Varint).int32(message.numGroupFilters);
        /* int32 num_apps = 3; */
        if (message.numApps !== 0)
            writer.tag(3, WireType.Varint).int32(message.numApps);
        /* int32 num_groups = 4; */
        if (message.numGroups !== 0)
            writer.tag(4, WireType.Varint).int32(message.numGroups);
        /* int32 num_roles = 5; */
        if (message.numRoles !== 0)
            writer.tag(5, WireType.Varint).int32(message.numRoles);
        /* int32 num_access_lists = 6; */
        if (message.numAccessLists !== 0)
            writer.tag(6, WireType.Varint).int32(message.numAccessLists);
        /* int32 num_access_list_members = 7; */
        if (message.numAccessListMembers !== 0)
            writer.tag(7, WireType.Varint).int32(message.numAccessListMembers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.OktaAccessListSyncEvent
 */
export const OktaAccessListSyncEvent = new OktaAccessListSyncEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DatabaseUserCreatedEvent$Type extends MessageType<DatabaseUserCreatedEvent> {
    constructor() {
        super("prehog.v1alpha.DatabaseUserCreatedEvent", [
            { no: 1, name: "database", kind: "message", T: () => SessionStartDatabaseMetadata },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "num_roles", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DatabaseUserCreatedEvent>): DatabaseUserCreatedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.numRoles = 0;
        if (value !== undefined)
            reflectionMergePartial<DatabaseUserCreatedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatabaseUserCreatedEvent): DatabaseUserCreatedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.SessionStartDatabaseMetadata database */ 1:
                    message.database = SessionStartDatabaseMetadata.internalBinaryRead(reader, reader.uint32(), options, message.database);
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int32 num_roles */ 3:
                    message.numRoles = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DatabaseUserCreatedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.SessionStartDatabaseMetadata database = 1; */
        if (message.database)
            SessionStartDatabaseMetadata.internalBinaryWrite(message.database, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int32 num_roles = 3; */
        if (message.numRoles !== 0)
            writer.tag(3, WireType.Varint).int32(message.numRoles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DatabaseUserCreatedEvent
 */
export const DatabaseUserCreatedEvent = new DatabaseUserCreatedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DatabaseUserPermissionsUpdateEvent$Type extends MessageType<DatabaseUserPermissionsUpdateEvent> {
    constructor() {
        super("prehog.v1alpha.DatabaseUserPermissionsUpdateEvent", [
            { no: 1, name: "database", kind: "message", T: () => SessionStartDatabaseMetadata },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "num_tables", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "num_tables_permissions", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DatabaseUserPermissionsUpdateEvent>): DatabaseUserPermissionsUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.numTables = 0;
        message.numTablesPermissions = 0;
        if (value !== undefined)
            reflectionMergePartial<DatabaseUserPermissionsUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatabaseUserPermissionsUpdateEvent): DatabaseUserPermissionsUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prehog.v1alpha.SessionStartDatabaseMetadata database */ 1:
                    message.database = SessionStartDatabaseMetadata.internalBinaryRead(reader, reader.uint32(), options, message.database);
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* int32 num_tables */ 3:
                    message.numTables = reader.int32();
                    break;
                case /* int32 num_tables_permissions */ 4:
                    message.numTablesPermissions = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DatabaseUserPermissionsUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prehog.v1alpha.SessionStartDatabaseMetadata database = 1; */
        if (message.database)
            SessionStartDatabaseMetadata.internalBinaryWrite(message.database, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* int32 num_tables = 3; */
        if (message.numTables !== 0)
            writer.tag(3, WireType.Varint).int32(message.numTables);
        /* int32 num_tables_permissions = 4; */
        if (message.numTablesPermissions !== 0)
            writer.tag(4, WireType.Varint).int32(message.numTablesPermissions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.DatabaseUserPermissionsUpdateEvent
 */
export const DatabaseUserPermissionsUpdateEvent = new DatabaseUserPermissionsUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitEventRequest$Type extends MessageType<SubmitEventRequest> {
    constructor() {
        super("prehog.v1alpha.SubmitEventRequest", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 3, name: "user_login", kind: "message", oneof: "event", T: () => UserLoginEvent },
            { no: 4, name: "sso_create", kind: "message", oneof: "event", T: () => SSOCreateEvent },
            { no: 5, name: "resource_create", kind: "message", oneof: "event", T: () => ResourceCreateEvent },
            { no: 6, name: "session_start", kind: "message", oneof: "event", T: () => SessionStartEvent },
            { no: 7, name: "ui_banner_click", kind: "message", oneof: "event", T: () => UIBannerClickEvent },
            { no: 9, name: "ui_onboard_complete_go_to_dashboard_click", kind: "message", oneof: "event", T: () => UIOnboardCompleteGoToDashboardClickEvent },
            { no: 10, name: "ui_onboard_add_first_resource_click", kind: "message", oneof: "event", T: () => UIOnboardAddFirstResourceClickEvent },
            { no: 11, name: "ui_onboard_add_first_resource_later_click", kind: "message", oneof: "event", T: () => UIOnboardAddFirstResourceLaterClickEvent },
            { no: 12, name: "ui_onboard_set_credential_submit", kind: "message", oneof: "event", T: () => UIOnboardSetCredentialSubmitEvent },
            { no: 13, name: "ui_onboard_register_challenge_submit", kind: "message", oneof: "event", T: () => UIOnboardRegisterChallengeSubmitEvent },
            { no: 14, name: "ui_recovery_codes_continue_click", kind: "message", oneof: "event", T: () => UIRecoveryCodesContinueClickEvent },
            { no: 15, name: "ui_recovery_codes_copy_click", kind: "message", oneof: "event", T: () => UIRecoveryCodesCopyClickEvent },
            { no: 16, name: "ui_recovery_codes_print_click", kind: "message", oneof: "event", T: () => UIRecoveryCodesPrintClickEvent },
            { no: 17, name: "ui_discover_started_event", kind: "message", oneof: "event", T: () => UIDiscoverStartedEvent },
            { no: 18, name: "ui_discover_resource_selection_event", kind: "message", oneof: "event", T: () => UIDiscoverResourceSelectionEvent },
            { no: 19, name: "user_certificate_issued_event", kind: "message", oneof: "event", T: () => UserCertificateIssuedEvent },
            { no: 20, name: "session_start_v2", kind: "message", oneof: "event", T: () => SessionStartEvent },
            { no: 21, name: "ui_discover_deploy_service_event", kind: "message", oneof: "event", T: () => UIDiscoverDeployServiceEvent },
            { no: 22, name: "ui_discover_database_register_event", kind: "message", oneof: "event", T: () => UIDiscoverDatabaseRegisterEvent },
            { no: 23, name: "ui_discover_database_configure_mtls_event", kind: "message", oneof: "event", T: () => UIDiscoverDatabaseConfigureMTLSEvent },
            { no: 24, name: "ui_discover_desktop_active_directory_tools_install_event", kind: "message", oneof: "event", T: () => UIDiscoverDesktopActiveDirectoryToolsInstallEvent },
            { no: 25, name: "ui_discover_desktop_active_directory_configure_event", kind: "message", oneof: "event", T: () => UIDiscoverDesktopActiveDirectoryConfigureEvent },
            { no: 26, name: "ui_discover_auto_discovered_resources_event", kind: "message", oneof: "event", T: () => UIDiscoverAutoDiscoveredResourcesEvent },
            { no: 27, name: "ui_discover_database_configure_iam_policy_event", kind: "message", oneof: "event", T: () => UIDiscoverDatabaseConfigureIAMPolicyEvent },
            { no: 28, name: "ui_discover_principals_configure_event", kind: "message", oneof: "event", T: () => UIDiscoverPrincipalsConfigureEvent },
            { no: 29, name: "ui_discover_test_connection_event", kind: "message", oneof: "event", T: () => UIDiscoverTestConnectionEvent },
            { no: 30, name: "ui_discover_completed_event", kind: "message", oneof: "event", T: () => UIDiscoverCompletedEvent },
            { no: 31, name: "role_create", kind: "message", oneof: "event", T: () => RoleCreateEvent },
            { no: 32, name: "ui_create_new_role_click", kind: "message", oneof: "event", T: () => UICreateNewRoleClickEvent },
            { no: 33, name: "ui_create_new_role_save_click", kind: "message", oneof: "event", T: () => UICreateNewRoleSaveClickEvent },
            { no: 34, name: "ui_create_new_role_cancel_click", kind: "message", oneof: "event", T: () => UICreateNewRoleCancelClickEvent },
            { no: 35, name: "ui_create_new_role_view_documentation_click", kind: "message", oneof: "event", T: () => UICreateNewRoleViewDocumentationClickEvent },
            { no: 36, name: "kube_request", kind: "message", oneof: "event", T: () => KubeRequestEvent },
            { no: 37, name: "sftp", kind: "message", oneof: "event", T: () => SFTPEvent },
            { no: 38, name: "agent_metadata_event", kind: "message", oneof: "event", T: () => AgentMetadataEvent },
            { no: 39, name: "resource_heartbeat", kind: "message", oneof: "event", T: () => ResourceHeartbeatEvent },
            { no: 40, name: "ui_discover_integration_aws_oidc_connect_event", kind: "message", oneof: "event", T: () => UIDiscoverIntegrationAWSOIDCConnectEvent },
            { no: 41, name: "ui_discover_database_rds_enroll_event", kind: "message", oneof: "event", T: () => UIDiscoverDatabaseRDSEnrollEvent },
            { no: 42, name: "ui_call_to_action_click_event", kind: "message", oneof: "event", T: () => UICallToActionClickEvent },
            { no: 43, name: "assist_completion", kind: "message", oneof: "event", T: () => AssistCompletionEvent },
            { no: 44, name: "ui_integration_enroll_start_event", kind: "message", oneof: "event", T: () => UIIntegrationEnrollStartEvent },
            { no: 45, name: "ui_integration_enroll_complete_event", kind: "message", oneof: "event", T: () => UIIntegrationEnrollCompleteEvent },
            { no: 46, name: "editor_change_event", kind: "message", oneof: "event", T: () => EditorChangeEvent },
            { no: 47, name: "bot_create", kind: "message", oneof: "event", T: () => BotCreateEvent },
            { no: 48, name: "ui_onboard_questionnaire_submit", kind: "message", oneof: "event", T: () => UIOnboardQuestionnaireSubmitEvent },
            { no: 49, name: "bot_join", kind: "message", oneof: "event", T: () => BotJoinEvent },
            { no: 50, name: "assist_execution", kind: "message", oneof: "event", T: () => AssistExecutionEvent },
            { no: 51, name: "assist_new_conversation", kind: "message", oneof: "event", T: () => AssistNewConversationEvent },
            { no: 52, name: "device_authenticate_event", kind: "message", oneof: "event", T: () => DeviceAuthenticateEvent },
            { no: 53, name: "feature_recommendation_event", kind: "message", oneof: "event", T: () => FeatureRecommendationEvent },
            { no: 54, name: "assist_access_request", kind: "message", oneof: "event", T: () => AssistAccessRequestEvent },
            { no: 55, name: "assist_action", kind: "message", oneof: "event", T: () => AssistActionEvent },
            { no: 56, name: "device_enroll_event", kind: "message", oneof: "event", T: () => DeviceEnrollEvent },
            { no: 57, name: "license_limit_event", kind: "message", oneof: "event", T: () => LicenseLimitEvent },
            { no: 58, name: "access_list_create", kind: "message", oneof: "event", T: () => AccessListCreateEvent },
            { no: 59, name: "access_list_update", kind: "message", oneof: "event", T: () => AccessListUpdateEvent },
            { no: 60, name: "access_list_delete", kind: "message", oneof: "event", T: () => AccessListDeleteEvent },
            { no: 61, name: "access_list_member_create", kind: "message", oneof: "event", T: () => AccessListMemberCreateEvent },
            { no: 62, name: "access_list_member_update", kind: "message", oneof: "event", T: () => AccessListMemberUpdateEvent },
            { no: 63, name: "access_list_member_delete", kind: "message", oneof: "event", T: () => AccessListMemberDeleteEvent },
            { no: 64, name: "access_list_grants_to_user", kind: "message", oneof: "event", T: () => AccessListGrantsToUserEvent },
            { no: 65, name: "ui_discover_ec2_instance_selection", kind: "message", oneof: "event", T: () => UIDiscoverEC2InstanceSelectionEvent },
            { no: 66, name: "ui_discover_deploy_eice", kind: "message", oneof: "event", T: () => UIDiscoverDeployEICEEvent },
            { no: 67, name: "ui_discover_create_node", kind: "message", oneof: "event", T: () => UIDiscoverCreateNodeEvent },
            { no: 68, name: "desktop_directory_share", kind: "message", oneof: "event", T: () => DesktopDirectoryShareEvent },
            { no: 69, name: "desktop_clipboard_transfer", kind: "message", oneof: "event", T: () => DesktopClipboardEvent },
            { no: 70, name: "tag_execute_query", kind: "message", oneof: "event", T: () => TAGExecuteQueryEvent },
            { no: 71, name: "external_audit_storage_authenticate", kind: "message", oneof: "event", T: () => ExternalAuditStorageAuthenticateEvent },
            { no: 72, name: "security_report_get_result", kind: "message", oneof: "event", T: () => SecurityReportGetResultEvent },
            { no: 73, name: "audit_query_run", kind: "message", oneof: "event", T: () => AuditQueryRunEvent },
            { no: 74, name: "discovery_fetch_event", kind: "message", oneof: "event", T: () => DiscoveryFetchEvent },
            { no: 75, name: "access_list_review_create", kind: "message", oneof: "event", T: () => AccessListReviewCreateEvent },
            { no: 76, name: "access_list_review_delete", kind: "message", oneof: "event", T: () => AccessListReviewDeleteEvent },
            { no: 77, name: "access_list_review_compliance", kind: "message", oneof: "event", T: () => AccessListReviewComplianceEvent },
            { no: 78, name: "mfa_authentication_event", kind: "message", oneof: "event", T: () => MFAAuthenticationEvent },
            { no: 79, name: "spiffe_svid_issued", kind: "message", oneof: "event", T: () => SPIFFESVIDIssuedEvent },
            { no: 80, name: "okta_access_list_sync", kind: "message", oneof: "event", T: () => OktaAccessListSyncEvent },
            { no: 81, name: "database_user_created", kind: "message", oneof: "event", T: () => DatabaseUserCreatedEvent },
            { no: 82, name: "database_user_permissions_updated", kind: "message", oneof: "event", T: () => DatabaseUserPermissionsUpdateEvent },
            { no: 83, name: "ui_discover_create_discovery_config", kind: "message", oneof: "event", T: () => UIDiscoverCreateDiscoveryConfigEvent },
            { no: 84, name: "ui_discover_kube_eks_enroll_event", kind: "message", oneof: "event", T: () => UIDiscoverKubeEKSEnrollEvent }
        ]);
    }
    create(value?: PartialMessage<SubmitEventRequest>): SubmitEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SubmitEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitEventRequest): SubmitEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 2:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* prehog.v1alpha.UserLoginEvent user_login */ 3:
                    message.event = {
                        oneofKind: "userLogin",
                        userLogin: UserLoginEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).userLogin)
                    };
                    break;
                case /* prehog.v1alpha.SSOCreateEvent sso_create */ 4:
                    message.event = {
                        oneofKind: "ssoCreate",
                        ssoCreate: SSOCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).ssoCreate)
                    };
                    break;
                case /* prehog.v1alpha.ResourceCreateEvent resource_create */ 5:
                    message.event = {
                        oneofKind: "resourceCreate",
                        resourceCreate: ResourceCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).resourceCreate)
                    };
                    break;
                case /* prehog.v1alpha.SessionStartEvent session_start */ 6:
                    message.event = {
                        oneofKind: "sessionStart",
                        sessionStart: SessionStartEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).sessionStart)
                    };
                    break;
                case /* prehog.v1alpha.UIBannerClickEvent ui_banner_click */ 7:
                    message.event = {
                        oneofKind: "uiBannerClick",
                        uiBannerClick: UIBannerClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiBannerClick)
                    };
                    break;
                case /* prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click */ 9:
                    message.event = {
                        oneofKind: "uiOnboardCompleteGoToDashboardClick",
                        uiOnboardCompleteGoToDashboardClick: UIOnboardCompleteGoToDashboardClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiOnboardCompleteGoToDashboardClick)
                    };
                    break;
                case /* prehog.v1alpha.UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click */ 10:
                    message.event = {
                        oneofKind: "uiOnboardAddFirstResourceClick",
                        uiOnboardAddFirstResourceClick: UIOnboardAddFirstResourceClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiOnboardAddFirstResourceClick)
                    };
                    break;
                case /* prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click */ 11:
                    message.event = {
                        oneofKind: "uiOnboardAddFirstResourceLaterClick",
                        uiOnboardAddFirstResourceLaterClick: UIOnboardAddFirstResourceLaterClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiOnboardAddFirstResourceLaterClick)
                    };
                    break;
                case /* prehog.v1alpha.UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit */ 12:
                    message.event = {
                        oneofKind: "uiOnboardSetCredentialSubmit",
                        uiOnboardSetCredentialSubmit: UIOnboardSetCredentialSubmitEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiOnboardSetCredentialSubmit)
                    };
                    break;
                case /* prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit */ 13:
                    message.event = {
                        oneofKind: "uiOnboardRegisterChallengeSubmit",
                        uiOnboardRegisterChallengeSubmit: UIOnboardRegisterChallengeSubmitEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiOnboardRegisterChallengeSubmit)
                    };
                    break;
                case /* prehog.v1alpha.UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click */ 14:
                    message.event = {
                        oneofKind: "uiRecoveryCodesContinueClick",
                        uiRecoveryCodesContinueClick: UIRecoveryCodesContinueClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiRecoveryCodesContinueClick)
                    };
                    break;
                case /* prehog.v1alpha.UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click */ 15:
                    message.event = {
                        oneofKind: "uiRecoveryCodesCopyClick",
                        uiRecoveryCodesCopyClick: UIRecoveryCodesCopyClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiRecoveryCodesCopyClick)
                    };
                    break;
                case /* prehog.v1alpha.UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click */ 16:
                    message.event = {
                        oneofKind: "uiRecoveryCodesPrintClick",
                        uiRecoveryCodesPrintClick: UIRecoveryCodesPrintClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiRecoveryCodesPrintClick)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverStartedEvent ui_discover_started_event */ 17:
                    message.event = {
                        oneofKind: "uiDiscoverStartedEvent",
                        uiDiscoverStartedEvent: UIDiscoverStartedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverStartedEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event */ 18:
                    message.event = {
                        oneofKind: "uiDiscoverResourceSelectionEvent",
                        uiDiscoverResourceSelectionEvent: UIDiscoverResourceSelectionEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverResourceSelectionEvent)
                    };
                    break;
                case /* prehog.v1alpha.UserCertificateIssuedEvent user_certificate_issued_event */ 19:
                    message.event = {
                        oneofKind: "userCertificateIssuedEvent",
                        userCertificateIssuedEvent: UserCertificateIssuedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).userCertificateIssuedEvent)
                    };
                    break;
                case /* prehog.v1alpha.SessionStartEvent session_start_v2 */ 20:
                    message.event = {
                        oneofKind: "sessionStartV2",
                        sessionStartV2: SessionStartEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).sessionStartV2)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDeployServiceEvent ui_discover_deploy_service_event */ 21:
                    message.event = {
                        oneofKind: "uiDiscoverDeployServiceEvent",
                        uiDiscoverDeployServiceEvent: UIDiscoverDeployServiceEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDeployServiceEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event */ 22:
                    message.event = {
                        oneofKind: "uiDiscoverDatabaseRegisterEvent",
                        uiDiscoverDatabaseRegisterEvent: UIDiscoverDatabaseRegisterEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDatabaseRegisterEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event */ 23:
                    message.event = {
                        oneofKind: "uiDiscoverDatabaseConfigureMtlsEvent",
                        uiDiscoverDatabaseConfigureMtlsEvent: UIDiscoverDatabaseConfigureMTLSEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDatabaseConfigureMtlsEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event */ 24:
                    message.event = {
                        oneofKind: "uiDiscoverDesktopActiveDirectoryToolsInstallEvent",
                        uiDiscoverDesktopActiveDirectoryToolsInstallEvent: UIDiscoverDesktopActiveDirectoryToolsInstallEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDesktopActiveDirectoryToolsInstallEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event */ 25:
                    message.event = {
                        oneofKind: "uiDiscoverDesktopActiveDirectoryConfigureEvent",
                        uiDiscoverDesktopActiveDirectoryConfigureEvent: UIDiscoverDesktopActiveDirectoryConfigureEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDesktopActiveDirectoryConfigureEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event */ 26:
                    message.event = {
                        oneofKind: "uiDiscoverAutoDiscoveredResourcesEvent",
                        uiDiscoverAutoDiscoveredResourcesEvent: UIDiscoverAutoDiscoveredResourcesEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverAutoDiscoveredResourcesEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event */ 27:
                    message.event = {
                        oneofKind: "uiDiscoverDatabaseConfigureIamPolicyEvent",
                        uiDiscoverDatabaseConfigureIamPolicyEvent: UIDiscoverDatabaseConfigureIAMPolicyEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDatabaseConfigureIamPolicyEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event */ 28:
                    message.event = {
                        oneofKind: "uiDiscoverPrincipalsConfigureEvent",
                        uiDiscoverPrincipalsConfigureEvent: UIDiscoverPrincipalsConfigureEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverPrincipalsConfigureEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverTestConnectionEvent ui_discover_test_connection_event */ 29:
                    message.event = {
                        oneofKind: "uiDiscoverTestConnectionEvent",
                        uiDiscoverTestConnectionEvent: UIDiscoverTestConnectionEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverTestConnectionEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverCompletedEvent ui_discover_completed_event */ 30:
                    message.event = {
                        oneofKind: "uiDiscoverCompletedEvent",
                        uiDiscoverCompletedEvent: UIDiscoverCompletedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverCompletedEvent)
                    };
                    break;
                case /* prehog.v1alpha.RoleCreateEvent role_create */ 31:
                    message.event = {
                        oneofKind: "roleCreate",
                        roleCreate: RoleCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).roleCreate)
                    };
                    break;
                case /* prehog.v1alpha.UICreateNewRoleClickEvent ui_create_new_role_click */ 32:
                    message.event = {
                        oneofKind: "uiCreateNewRoleClick",
                        uiCreateNewRoleClick: UICreateNewRoleClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiCreateNewRoleClick)
                    };
                    break;
                case /* prehog.v1alpha.UICreateNewRoleSaveClickEvent ui_create_new_role_save_click */ 33:
                    message.event = {
                        oneofKind: "uiCreateNewRoleSaveClick",
                        uiCreateNewRoleSaveClick: UICreateNewRoleSaveClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiCreateNewRoleSaveClick)
                    };
                    break;
                case /* prehog.v1alpha.UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click */ 34:
                    message.event = {
                        oneofKind: "uiCreateNewRoleCancelClick",
                        uiCreateNewRoleCancelClick: UICreateNewRoleCancelClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiCreateNewRoleCancelClick)
                    };
                    break;
                case /* prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click */ 35:
                    message.event = {
                        oneofKind: "uiCreateNewRoleViewDocumentationClick",
                        uiCreateNewRoleViewDocumentationClick: UICreateNewRoleViewDocumentationClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiCreateNewRoleViewDocumentationClick)
                    };
                    break;
                case /* prehog.v1alpha.KubeRequestEvent kube_request */ 36:
                    message.event = {
                        oneofKind: "kubeRequest",
                        kubeRequest: KubeRequestEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).kubeRequest)
                    };
                    break;
                case /* prehog.v1alpha.SFTPEvent sftp */ 37:
                    message.event = {
                        oneofKind: "sftp",
                        sftp: SFTPEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).sftp)
                    };
                    break;
                case /* prehog.v1alpha.AgentMetadataEvent agent_metadata_event */ 38:
                    message.event = {
                        oneofKind: "agentMetadataEvent",
                        agentMetadataEvent: AgentMetadataEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).agentMetadataEvent)
                    };
                    break;
                case /* prehog.v1alpha.ResourceHeartbeatEvent resource_heartbeat */ 39:
                    message.event = {
                        oneofKind: "resourceHeartbeat",
                        resourceHeartbeat: ResourceHeartbeatEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).resourceHeartbeat)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event */ 40:
                    message.event = {
                        oneofKind: "uiDiscoverIntegrationAwsOidcConnectEvent",
                        uiDiscoverIntegrationAwsOidcConnectEvent: UIDiscoverIntegrationAWSOIDCConnectEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverIntegrationAwsOidcConnectEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event */ 41:
                    message.event = {
                        oneofKind: "uiDiscoverDatabaseRdsEnrollEvent",
                        uiDiscoverDatabaseRdsEnrollEvent: UIDiscoverDatabaseRDSEnrollEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDatabaseRdsEnrollEvent)
                    };
                    break;
                case /* prehog.v1alpha.UICallToActionClickEvent ui_call_to_action_click_event */ 42:
                    message.event = {
                        oneofKind: "uiCallToActionClickEvent",
                        uiCallToActionClickEvent: UICallToActionClickEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiCallToActionClickEvent)
                    };
                    break;
                case /* prehog.v1alpha.AssistCompletionEvent assist_completion */ 43:
                    message.event = {
                        oneofKind: "assistCompletion",
                        assistCompletion: AssistCompletionEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).assistCompletion)
                    };
                    break;
                case /* prehog.v1alpha.UIIntegrationEnrollStartEvent ui_integration_enroll_start_event */ 44:
                    message.event = {
                        oneofKind: "uiIntegrationEnrollStartEvent",
                        uiIntegrationEnrollStartEvent: UIIntegrationEnrollStartEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiIntegrationEnrollStartEvent)
                    };
                    break;
                case /* prehog.v1alpha.UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event */ 45:
                    message.event = {
                        oneofKind: "uiIntegrationEnrollCompleteEvent",
                        uiIntegrationEnrollCompleteEvent: UIIntegrationEnrollCompleteEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiIntegrationEnrollCompleteEvent)
                    };
                    break;
                case /* prehog.v1alpha.EditorChangeEvent editor_change_event */ 46:
                    message.event = {
                        oneofKind: "editorChangeEvent",
                        editorChangeEvent: EditorChangeEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).editorChangeEvent)
                    };
                    break;
                case /* prehog.v1alpha.BotCreateEvent bot_create */ 47:
                    message.event = {
                        oneofKind: "botCreate",
                        botCreate: BotCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).botCreate)
                    };
                    break;
                case /* prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit */ 48:
                    message.event = {
                        oneofKind: "uiOnboardQuestionnaireSubmit",
                        uiOnboardQuestionnaireSubmit: UIOnboardQuestionnaireSubmitEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiOnboardQuestionnaireSubmit)
                    };
                    break;
                case /* prehog.v1alpha.BotJoinEvent bot_join */ 49:
                    message.event = {
                        oneofKind: "botJoin",
                        botJoin: BotJoinEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).botJoin)
                    };
                    break;
                case /* prehog.v1alpha.AssistExecutionEvent assist_execution */ 50:
                    message.event = {
                        oneofKind: "assistExecution",
                        assistExecution: AssistExecutionEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).assistExecution)
                    };
                    break;
                case /* prehog.v1alpha.AssistNewConversationEvent assist_new_conversation */ 51:
                    message.event = {
                        oneofKind: "assistNewConversation",
                        assistNewConversation: AssistNewConversationEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).assistNewConversation)
                    };
                    break;
                case /* prehog.v1alpha.DeviceAuthenticateEvent device_authenticate_event */ 52:
                    message.event = {
                        oneofKind: "deviceAuthenticateEvent",
                        deviceAuthenticateEvent: DeviceAuthenticateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).deviceAuthenticateEvent)
                    };
                    break;
                case /* prehog.v1alpha.FeatureRecommendationEvent feature_recommendation_event */ 53:
                    message.event = {
                        oneofKind: "featureRecommendationEvent",
                        featureRecommendationEvent: FeatureRecommendationEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).featureRecommendationEvent)
                    };
                    break;
                case /* prehog.v1alpha.AssistAccessRequestEvent assist_access_request */ 54:
                    message.event = {
                        oneofKind: "assistAccessRequest",
                        assistAccessRequest: AssistAccessRequestEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).assistAccessRequest)
                    };
                    break;
                case /* prehog.v1alpha.AssistActionEvent assist_action */ 55:
                    message.event = {
                        oneofKind: "assistAction",
                        assistAction: AssistActionEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).assistAction)
                    };
                    break;
                case /* prehog.v1alpha.DeviceEnrollEvent device_enroll_event */ 56:
                    message.event = {
                        oneofKind: "deviceEnrollEvent",
                        deviceEnrollEvent: DeviceEnrollEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).deviceEnrollEvent)
                    };
                    break;
                case /* prehog.v1alpha.LicenseLimitEvent license_limit_event */ 57:
                    message.event = {
                        oneofKind: "licenseLimitEvent",
                        licenseLimitEvent: LicenseLimitEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).licenseLimitEvent)
                    };
                    break;
                case /* prehog.v1alpha.AccessListCreateEvent access_list_create */ 58:
                    message.event = {
                        oneofKind: "accessListCreate",
                        accessListCreate: AccessListCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListCreate)
                    };
                    break;
                case /* prehog.v1alpha.AccessListUpdateEvent access_list_update */ 59:
                    message.event = {
                        oneofKind: "accessListUpdate",
                        accessListUpdate: AccessListUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListUpdate)
                    };
                    break;
                case /* prehog.v1alpha.AccessListDeleteEvent access_list_delete */ 60:
                    message.event = {
                        oneofKind: "accessListDelete",
                        accessListDelete: AccessListDeleteEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListDelete)
                    };
                    break;
                case /* prehog.v1alpha.AccessListMemberCreateEvent access_list_member_create */ 61:
                    message.event = {
                        oneofKind: "accessListMemberCreate",
                        accessListMemberCreate: AccessListMemberCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListMemberCreate)
                    };
                    break;
                case /* prehog.v1alpha.AccessListMemberUpdateEvent access_list_member_update */ 62:
                    message.event = {
                        oneofKind: "accessListMemberUpdate",
                        accessListMemberUpdate: AccessListMemberUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListMemberUpdate)
                    };
                    break;
                case /* prehog.v1alpha.AccessListMemberDeleteEvent access_list_member_delete */ 63:
                    message.event = {
                        oneofKind: "accessListMemberDelete",
                        accessListMemberDelete: AccessListMemberDeleteEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListMemberDelete)
                    };
                    break;
                case /* prehog.v1alpha.AccessListGrantsToUserEvent access_list_grants_to_user */ 64:
                    message.event = {
                        oneofKind: "accessListGrantsToUser",
                        accessListGrantsToUser: AccessListGrantsToUserEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListGrantsToUser)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent ui_discover_ec2_instance_selection */ 65:
                    message.event = {
                        oneofKind: "uiDiscoverEc2InstanceSelection",
                        uiDiscoverEc2InstanceSelection: UIDiscoverEC2InstanceSelectionEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverEc2InstanceSelection)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverDeployEICEEvent ui_discover_deploy_eice */ 66:
                    message.event = {
                        oneofKind: "uiDiscoverDeployEice",
                        uiDiscoverDeployEice: UIDiscoverDeployEICEEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverDeployEice)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverCreateNodeEvent ui_discover_create_node */ 67:
                    message.event = {
                        oneofKind: "uiDiscoverCreateNode",
                        uiDiscoverCreateNode: UIDiscoverCreateNodeEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverCreateNode)
                    };
                    break;
                case /* prehog.v1alpha.DesktopDirectoryShareEvent desktop_directory_share */ 68:
                    message.event = {
                        oneofKind: "desktopDirectoryShare",
                        desktopDirectoryShare: DesktopDirectoryShareEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).desktopDirectoryShare)
                    };
                    break;
                case /* prehog.v1alpha.DesktopClipboardEvent desktop_clipboard_transfer */ 69:
                    message.event = {
                        oneofKind: "desktopClipboardTransfer",
                        desktopClipboardTransfer: DesktopClipboardEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).desktopClipboardTransfer)
                    };
                    break;
                case /* prehog.v1alpha.TAGExecuteQueryEvent tag_execute_query */ 70:
                    message.event = {
                        oneofKind: "tagExecuteQuery",
                        tagExecuteQuery: TAGExecuteQueryEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).tagExecuteQuery)
                    };
                    break;
                case /* prehog.v1alpha.ExternalAuditStorageAuthenticateEvent external_audit_storage_authenticate */ 71:
                    message.event = {
                        oneofKind: "externalAuditStorageAuthenticate",
                        externalAuditStorageAuthenticate: ExternalAuditStorageAuthenticateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).externalAuditStorageAuthenticate)
                    };
                    break;
                case /* prehog.v1alpha.SecurityReportGetResultEvent security_report_get_result */ 72:
                    message.event = {
                        oneofKind: "securityReportGetResult",
                        securityReportGetResult: SecurityReportGetResultEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).securityReportGetResult)
                    };
                    break;
                case /* prehog.v1alpha.AuditQueryRunEvent audit_query_run */ 73:
                    message.event = {
                        oneofKind: "auditQueryRun",
                        auditQueryRun: AuditQueryRunEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).auditQueryRun)
                    };
                    break;
                case /* prehog.v1alpha.DiscoveryFetchEvent discovery_fetch_event */ 74:
                    message.event = {
                        oneofKind: "discoveryFetchEvent",
                        discoveryFetchEvent: DiscoveryFetchEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).discoveryFetchEvent)
                    };
                    break;
                case /* prehog.v1alpha.AccessListReviewCreateEvent access_list_review_create */ 75:
                    message.event = {
                        oneofKind: "accessListReviewCreate",
                        accessListReviewCreate: AccessListReviewCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListReviewCreate)
                    };
                    break;
                case /* prehog.v1alpha.AccessListReviewDeleteEvent access_list_review_delete */ 76:
                    message.event = {
                        oneofKind: "accessListReviewDelete",
                        accessListReviewDelete: AccessListReviewDeleteEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListReviewDelete)
                    };
                    break;
                case /* prehog.v1alpha.AccessListReviewComplianceEvent access_list_review_compliance */ 77:
                    message.event = {
                        oneofKind: "accessListReviewCompliance",
                        accessListReviewCompliance: AccessListReviewComplianceEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessListReviewCompliance)
                    };
                    break;
                case /* prehog.v1alpha.MFAAuthenticationEvent mfa_authentication_event */ 78:
                    message.event = {
                        oneofKind: "mfaAuthenticationEvent",
                        mfaAuthenticationEvent: MFAAuthenticationEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).mfaAuthenticationEvent)
                    };
                    break;
                case /* prehog.v1alpha.SPIFFESVIDIssuedEvent spiffe_svid_issued */ 79:
                    message.event = {
                        oneofKind: "spiffeSvidIssued",
                        spiffeSvidIssued: SPIFFESVIDIssuedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).spiffeSvidIssued)
                    };
                    break;
                case /* prehog.v1alpha.OktaAccessListSyncEvent okta_access_list_sync */ 80:
                    message.event = {
                        oneofKind: "oktaAccessListSync",
                        oktaAccessListSync: OktaAccessListSyncEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).oktaAccessListSync)
                    };
                    break;
                case /* prehog.v1alpha.DatabaseUserCreatedEvent database_user_created */ 81:
                    message.event = {
                        oneofKind: "databaseUserCreated",
                        databaseUserCreated: DatabaseUserCreatedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).databaseUserCreated)
                    };
                    break;
                case /* prehog.v1alpha.DatabaseUserPermissionsUpdateEvent database_user_permissions_updated */ 82:
                    message.event = {
                        oneofKind: "databaseUserPermissionsUpdated",
                        databaseUserPermissionsUpdated: DatabaseUserPermissionsUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).databaseUserPermissionsUpdated)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent ui_discover_create_discovery_config */ 83:
                    message.event = {
                        oneofKind: "uiDiscoverCreateDiscoveryConfig",
                        uiDiscoverCreateDiscoveryConfig: UIDiscoverCreateDiscoveryConfigEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverCreateDiscoveryConfig)
                    };
                    break;
                case /* prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent ui_discover_kube_eks_enroll_event */ 84:
                    message.event = {
                        oneofKind: "uiDiscoverKubeEksEnrollEvent",
                        uiDiscoverKubeEksEnrollEvent: UIDiscoverKubeEKSEnrollEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).uiDiscoverKubeEksEnrollEvent)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* google.protobuf.Timestamp timestamp = 2; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UserLoginEvent user_login = 3; */
        if (message.event.oneofKind === "userLogin")
            UserLoginEvent.internalBinaryWrite(message.event.userLogin, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.SSOCreateEvent sso_create = 4; */
        if (message.event.oneofKind === "ssoCreate")
            SSOCreateEvent.internalBinaryWrite(message.event.ssoCreate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ResourceCreateEvent resource_create = 5; */
        if (message.event.oneofKind === "resourceCreate")
            ResourceCreateEvent.internalBinaryWrite(message.event.resourceCreate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.SessionStartEvent session_start = 6; */
        if (message.event.oneofKind === "sessionStart")
            SessionStartEvent.internalBinaryWrite(message.event.sessionStart, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIBannerClickEvent ui_banner_click = 7; */
        if (message.event.oneofKind === "uiBannerClick")
            UIBannerClickEvent.internalBinaryWrite(message.event.uiBannerClick, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 9; */
        if (message.event.oneofKind === "uiOnboardCompleteGoToDashboardClick")
            UIOnboardCompleteGoToDashboardClickEvent.internalBinaryWrite(message.event.uiOnboardCompleteGoToDashboardClick, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 10; */
        if (message.event.oneofKind === "uiOnboardAddFirstResourceClick")
            UIOnboardAddFirstResourceClickEvent.internalBinaryWrite(message.event.uiOnboardAddFirstResourceClick, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 11; */
        if (message.event.oneofKind === "uiOnboardAddFirstResourceLaterClick")
            UIOnboardAddFirstResourceLaterClickEvent.internalBinaryWrite(message.event.uiOnboardAddFirstResourceLaterClick, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 12; */
        if (message.event.oneofKind === "uiOnboardSetCredentialSubmit")
            UIOnboardSetCredentialSubmitEvent.internalBinaryWrite(message.event.uiOnboardSetCredentialSubmit, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 13; */
        if (message.event.oneofKind === "uiOnboardRegisterChallengeSubmit")
            UIOnboardRegisterChallengeSubmitEvent.internalBinaryWrite(message.event.uiOnboardRegisterChallengeSubmit, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 14; */
        if (message.event.oneofKind === "uiRecoveryCodesContinueClick")
            UIRecoveryCodesContinueClickEvent.internalBinaryWrite(message.event.uiRecoveryCodesContinueClick, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 15; */
        if (message.event.oneofKind === "uiRecoveryCodesCopyClick")
            UIRecoveryCodesCopyClickEvent.internalBinaryWrite(message.event.uiRecoveryCodesCopyClick, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 16; */
        if (message.event.oneofKind === "uiRecoveryCodesPrintClick")
            UIRecoveryCodesPrintClickEvent.internalBinaryWrite(message.event.uiRecoveryCodesPrintClick, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverStartedEvent ui_discover_started_event = 17; */
        if (message.event.oneofKind === "uiDiscoverStartedEvent")
            UIDiscoverStartedEvent.internalBinaryWrite(message.event.uiDiscoverStartedEvent, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 18; */
        if (message.event.oneofKind === "uiDiscoverResourceSelectionEvent")
            UIDiscoverResourceSelectionEvent.internalBinaryWrite(message.event.uiDiscoverResourceSelectionEvent, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UserCertificateIssuedEvent user_certificate_issued_event = 19; */
        if (message.event.oneofKind === "userCertificateIssuedEvent")
            UserCertificateIssuedEvent.internalBinaryWrite(message.event.userCertificateIssuedEvent, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.SessionStartEvent session_start_v2 = 20; */
        if (message.event.oneofKind === "sessionStartV2")
            SessionStartEvent.internalBinaryWrite(message.event.sessionStartV2, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 21; */
        if (message.event.oneofKind === "uiDiscoverDeployServiceEvent")
            UIDiscoverDeployServiceEvent.internalBinaryWrite(message.event.uiDiscoverDeployServiceEvent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 22; */
        if (message.event.oneofKind === "uiDiscoverDatabaseRegisterEvent")
            UIDiscoverDatabaseRegisterEvent.internalBinaryWrite(message.event.uiDiscoverDatabaseRegisterEvent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 23; */
        if (message.event.oneofKind === "uiDiscoverDatabaseConfigureMtlsEvent")
            UIDiscoverDatabaseConfigureMTLSEvent.internalBinaryWrite(message.event.uiDiscoverDatabaseConfigureMtlsEvent, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 24; */
        if (message.event.oneofKind === "uiDiscoverDesktopActiveDirectoryToolsInstallEvent")
            UIDiscoverDesktopActiveDirectoryToolsInstallEvent.internalBinaryWrite(message.event.uiDiscoverDesktopActiveDirectoryToolsInstallEvent, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 25; */
        if (message.event.oneofKind === "uiDiscoverDesktopActiveDirectoryConfigureEvent")
            UIDiscoverDesktopActiveDirectoryConfigureEvent.internalBinaryWrite(message.event.uiDiscoverDesktopActiveDirectoryConfigureEvent, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 26; */
        if (message.event.oneofKind === "uiDiscoverAutoDiscoveredResourcesEvent")
            UIDiscoverAutoDiscoveredResourcesEvent.internalBinaryWrite(message.event.uiDiscoverAutoDiscoveredResourcesEvent, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 27; */
        if (message.event.oneofKind === "uiDiscoverDatabaseConfigureIamPolicyEvent")
            UIDiscoverDatabaseConfigureIAMPolicyEvent.internalBinaryWrite(message.event.uiDiscoverDatabaseConfigureIamPolicyEvent, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 28; */
        if (message.event.oneofKind === "uiDiscoverPrincipalsConfigureEvent")
            UIDiscoverPrincipalsConfigureEvent.internalBinaryWrite(message.event.uiDiscoverPrincipalsConfigureEvent, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 29; */
        if (message.event.oneofKind === "uiDiscoverTestConnectionEvent")
            UIDiscoverTestConnectionEvent.internalBinaryWrite(message.event.uiDiscoverTestConnectionEvent, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverCompletedEvent ui_discover_completed_event = 30; */
        if (message.event.oneofKind === "uiDiscoverCompletedEvent")
            UIDiscoverCompletedEvent.internalBinaryWrite(message.event.uiDiscoverCompletedEvent, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.RoleCreateEvent role_create = 31; */
        if (message.event.oneofKind === "roleCreate")
            RoleCreateEvent.internalBinaryWrite(message.event.roleCreate, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UICreateNewRoleClickEvent ui_create_new_role_click = 32; */
        if (message.event.oneofKind === "uiCreateNewRoleClick")
            UICreateNewRoleClickEvent.internalBinaryWrite(message.event.uiCreateNewRoleClick, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 33; */
        if (message.event.oneofKind === "uiCreateNewRoleSaveClick")
            UICreateNewRoleSaveClickEvent.internalBinaryWrite(message.event.uiCreateNewRoleSaveClick, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 34; */
        if (message.event.oneofKind === "uiCreateNewRoleCancelClick")
            UICreateNewRoleCancelClickEvent.internalBinaryWrite(message.event.uiCreateNewRoleCancelClick, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 35; */
        if (message.event.oneofKind === "uiCreateNewRoleViewDocumentationClick")
            UICreateNewRoleViewDocumentationClickEvent.internalBinaryWrite(message.event.uiCreateNewRoleViewDocumentationClick, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.KubeRequestEvent kube_request = 36; */
        if (message.event.oneofKind === "kubeRequest")
            KubeRequestEvent.internalBinaryWrite(message.event.kubeRequest, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.SFTPEvent sftp = 37; */
        if (message.event.oneofKind === "sftp")
            SFTPEvent.internalBinaryWrite(message.event.sftp, writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AgentMetadataEvent agent_metadata_event = 38; */
        if (message.event.oneofKind === "agentMetadataEvent")
            AgentMetadataEvent.internalBinaryWrite(message.event.agentMetadataEvent, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ResourceHeartbeatEvent resource_heartbeat = 39; */
        if (message.event.oneofKind === "resourceHeartbeat")
            ResourceHeartbeatEvent.internalBinaryWrite(message.event.resourceHeartbeat, writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event = 40; */
        if (message.event.oneofKind === "uiDiscoverIntegrationAwsOidcConnectEvent")
            UIDiscoverIntegrationAWSOIDCConnectEvent.internalBinaryWrite(message.event.uiDiscoverIntegrationAwsOidcConnectEvent, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event = 41; */
        if (message.event.oneofKind === "uiDiscoverDatabaseRdsEnrollEvent")
            UIDiscoverDatabaseRDSEnrollEvent.internalBinaryWrite(message.event.uiDiscoverDatabaseRdsEnrollEvent, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UICallToActionClickEvent ui_call_to_action_click_event = 42; */
        if (message.event.oneofKind === "uiCallToActionClickEvent")
            UICallToActionClickEvent.internalBinaryWrite(message.event.uiCallToActionClickEvent, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AssistCompletionEvent assist_completion = 43; */
        if (message.event.oneofKind === "assistCompletion")
            AssistCompletionEvent.internalBinaryWrite(message.event.assistCompletion, writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIIntegrationEnrollStartEvent ui_integration_enroll_start_event = 44; */
        if (message.event.oneofKind === "uiIntegrationEnrollStartEvent")
            UIIntegrationEnrollStartEvent.internalBinaryWrite(message.event.uiIntegrationEnrollStartEvent, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event = 45; */
        if (message.event.oneofKind === "uiIntegrationEnrollCompleteEvent")
            UIIntegrationEnrollCompleteEvent.internalBinaryWrite(message.event.uiIntegrationEnrollCompleteEvent, writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.EditorChangeEvent editor_change_event = 46; */
        if (message.event.oneofKind === "editorChangeEvent")
            EditorChangeEvent.internalBinaryWrite(message.event.editorChangeEvent, writer.tag(46, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.BotCreateEvent bot_create = 47; */
        if (message.event.oneofKind === "botCreate")
            BotCreateEvent.internalBinaryWrite(message.event.botCreate, writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit = 48; */
        if (message.event.oneofKind === "uiOnboardQuestionnaireSubmit")
            UIOnboardQuestionnaireSubmitEvent.internalBinaryWrite(message.event.uiOnboardQuestionnaireSubmit, writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.BotJoinEvent bot_join = 49; */
        if (message.event.oneofKind === "botJoin")
            BotJoinEvent.internalBinaryWrite(message.event.botJoin, writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AssistExecutionEvent assist_execution = 50; */
        if (message.event.oneofKind === "assistExecution")
            AssistExecutionEvent.internalBinaryWrite(message.event.assistExecution, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AssistNewConversationEvent assist_new_conversation = 51; */
        if (message.event.oneofKind === "assistNewConversation")
            AssistNewConversationEvent.internalBinaryWrite(message.event.assistNewConversation, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DeviceAuthenticateEvent device_authenticate_event = 52; */
        if (message.event.oneofKind === "deviceAuthenticateEvent")
            DeviceAuthenticateEvent.internalBinaryWrite(message.event.deviceAuthenticateEvent, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.FeatureRecommendationEvent feature_recommendation_event = 53; */
        if (message.event.oneofKind === "featureRecommendationEvent")
            FeatureRecommendationEvent.internalBinaryWrite(message.event.featureRecommendationEvent, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AssistAccessRequestEvent assist_access_request = 54; */
        if (message.event.oneofKind === "assistAccessRequest")
            AssistAccessRequestEvent.internalBinaryWrite(message.event.assistAccessRequest, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AssistActionEvent assist_action = 55; */
        if (message.event.oneofKind === "assistAction")
            AssistActionEvent.internalBinaryWrite(message.event.assistAction, writer.tag(55, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DeviceEnrollEvent device_enroll_event = 56; */
        if (message.event.oneofKind === "deviceEnrollEvent")
            DeviceEnrollEvent.internalBinaryWrite(message.event.deviceEnrollEvent, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.LicenseLimitEvent license_limit_event = 57; */
        if (message.event.oneofKind === "licenseLimitEvent")
            LicenseLimitEvent.internalBinaryWrite(message.event.licenseLimitEvent, writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListCreateEvent access_list_create = 58; */
        if (message.event.oneofKind === "accessListCreate")
            AccessListCreateEvent.internalBinaryWrite(message.event.accessListCreate, writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListUpdateEvent access_list_update = 59; */
        if (message.event.oneofKind === "accessListUpdate")
            AccessListUpdateEvent.internalBinaryWrite(message.event.accessListUpdate, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListDeleteEvent access_list_delete = 60; */
        if (message.event.oneofKind === "accessListDelete")
            AccessListDeleteEvent.internalBinaryWrite(message.event.accessListDelete, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListMemberCreateEvent access_list_member_create = 61; */
        if (message.event.oneofKind === "accessListMemberCreate")
            AccessListMemberCreateEvent.internalBinaryWrite(message.event.accessListMemberCreate, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListMemberUpdateEvent access_list_member_update = 62; */
        if (message.event.oneofKind === "accessListMemberUpdate")
            AccessListMemberUpdateEvent.internalBinaryWrite(message.event.accessListMemberUpdate, writer.tag(62, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListMemberDeleteEvent access_list_member_delete = 63; */
        if (message.event.oneofKind === "accessListMemberDelete")
            AccessListMemberDeleteEvent.internalBinaryWrite(message.event.accessListMemberDelete, writer.tag(63, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListGrantsToUserEvent access_list_grants_to_user = 64; */
        if (message.event.oneofKind === "accessListGrantsToUser")
            AccessListGrantsToUserEvent.internalBinaryWrite(message.event.accessListGrantsToUser, writer.tag(64, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverEC2InstanceSelectionEvent ui_discover_ec2_instance_selection = 65; */
        if (message.event.oneofKind === "uiDiscoverEc2InstanceSelection")
            UIDiscoverEC2InstanceSelectionEvent.internalBinaryWrite(message.event.uiDiscoverEc2InstanceSelection, writer.tag(65, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverDeployEICEEvent ui_discover_deploy_eice = 66; */
        if (message.event.oneofKind === "uiDiscoverDeployEice")
            UIDiscoverDeployEICEEvent.internalBinaryWrite(message.event.uiDiscoverDeployEice, writer.tag(66, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverCreateNodeEvent ui_discover_create_node = 67; */
        if (message.event.oneofKind === "uiDiscoverCreateNode")
            UIDiscoverCreateNodeEvent.internalBinaryWrite(message.event.uiDiscoverCreateNode, writer.tag(67, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DesktopDirectoryShareEvent desktop_directory_share = 68; */
        if (message.event.oneofKind === "desktopDirectoryShare")
            DesktopDirectoryShareEvent.internalBinaryWrite(message.event.desktopDirectoryShare, writer.tag(68, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DesktopClipboardEvent desktop_clipboard_transfer = 69; */
        if (message.event.oneofKind === "desktopClipboardTransfer")
            DesktopClipboardEvent.internalBinaryWrite(message.event.desktopClipboardTransfer, writer.tag(69, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.TAGExecuteQueryEvent tag_execute_query = 70; */
        if (message.event.oneofKind === "tagExecuteQuery")
            TAGExecuteQueryEvent.internalBinaryWrite(message.event.tagExecuteQuery, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ExternalAuditStorageAuthenticateEvent external_audit_storage_authenticate = 71; */
        if (message.event.oneofKind === "externalAuditStorageAuthenticate")
            ExternalAuditStorageAuthenticateEvent.internalBinaryWrite(message.event.externalAuditStorageAuthenticate, writer.tag(71, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.SecurityReportGetResultEvent security_report_get_result = 72; */
        if (message.event.oneofKind === "securityReportGetResult")
            SecurityReportGetResultEvent.internalBinaryWrite(message.event.securityReportGetResult, writer.tag(72, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AuditQueryRunEvent audit_query_run = 73; */
        if (message.event.oneofKind === "auditQueryRun")
            AuditQueryRunEvent.internalBinaryWrite(message.event.auditQueryRun, writer.tag(73, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DiscoveryFetchEvent discovery_fetch_event = 74; */
        if (message.event.oneofKind === "discoveryFetchEvent")
            DiscoveryFetchEvent.internalBinaryWrite(message.event.discoveryFetchEvent, writer.tag(74, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListReviewCreateEvent access_list_review_create = 75; */
        if (message.event.oneofKind === "accessListReviewCreate")
            AccessListReviewCreateEvent.internalBinaryWrite(message.event.accessListReviewCreate, writer.tag(75, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListReviewDeleteEvent access_list_review_delete = 76; */
        if (message.event.oneofKind === "accessListReviewDelete")
            AccessListReviewDeleteEvent.internalBinaryWrite(message.event.accessListReviewDelete, writer.tag(76, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.AccessListReviewComplianceEvent access_list_review_compliance = 77; */
        if (message.event.oneofKind === "accessListReviewCompliance")
            AccessListReviewComplianceEvent.internalBinaryWrite(message.event.accessListReviewCompliance, writer.tag(77, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.MFAAuthenticationEvent mfa_authentication_event = 78; */
        if (message.event.oneofKind === "mfaAuthenticationEvent")
            MFAAuthenticationEvent.internalBinaryWrite(message.event.mfaAuthenticationEvent, writer.tag(78, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.SPIFFESVIDIssuedEvent spiffe_svid_issued = 79; */
        if (message.event.oneofKind === "spiffeSvidIssued")
            SPIFFESVIDIssuedEvent.internalBinaryWrite(message.event.spiffeSvidIssued, writer.tag(79, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.OktaAccessListSyncEvent okta_access_list_sync = 80; */
        if (message.event.oneofKind === "oktaAccessListSync")
            OktaAccessListSyncEvent.internalBinaryWrite(message.event.oktaAccessListSync, writer.tag(80, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DatabaseUserCreatedEvent database_user_created = 81; */
        if (message.event.oneofKind === "databaseUserCreated")
            DatabaseUserCreatedEvent.internalBinaryWrite(message.event.databaseUserCreated, writer.tag(81, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.DatabaseUserPermissionsUpdateEvent database_user_permissions_updated = 82; */
        if (message.event.oneofKind === "databaseUserPermissionsUpdated")
            DatabaseUserPermissionsUpdateEvent.internalBinaryWrite(message.event.databaseUserPermissionsUpdated, writer.tag(82, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverCreateDiscoveryConfigEvent ui_discover_create_discovery_config = 83; */
        if (message.event.oneofKind === "uiDiscoverCreateDiscoveryConfig")
            UIDiscoverCreateDiscoveryConfigEvent.internalBinaryWrite(message.event.uiDiscoverCreateDiscoveryConfig, writer.tag(83, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.UIDiscoverKubeEKSEnrollEvent ui_discover_kube_eks_enroll_event = 84; */
        if (message.event.oneofKind === "uiDiscoverKubeEksEnrollEvent")
            UIDiscoverKubeEKSEnrollEvent.internalBinaryWrite(message.event.uiDiscoverKubeEksEnrollEvent, writer.tag(84, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitEventRequest
 */
export const SubmitEventRequest = new SubmitEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitEventResponse$Type extends MessageType<SubmitEventResponse> {
    constructor() {
        super("prehog.v1alpha.SubmitEventResponse", []);
    }
    create(value?: PartialMessage<SubmitEventResponse>): SubmitEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitEventResponse): SubmitEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubmitEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitEventResponse
 */
export const SubmitEventResponse = new SubmitEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitEventsRequest$Type extends MessageType<SubmitEventsRequest> {
    constructor() {
        super("prehog.v1alpha.SubmitEventsRequest", [
            { no: 1, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SubmitEventRequest }
        ]);
    }
    create(value?: PartialMessage<SubmitEventsRequest>): SubmitEventsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.events = [];
        if (value !== undefined)
            reflectionMergePartial<SubmitEventsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitEventsRequest): SubmitEventsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated prehog.v1alpha.SubmitEventRequest events */ 1:
                    message.events.push(SubmitEventRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitEventsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated prehog.v1alpha.SubmitEventRequest events = 1; */
        for (let i = 0; i < message.events.length; i++)
            SubmitEventRequest.internalBinaryWrite(message.events[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitEventsRequest
 */
export const SubmitEventsRequest = new SubmitEventsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitEventsResponse$Type extends MessageType<SubmitEventsResponse> {
    constructor() {
        super("prehog.v1alpha.SubmitEventsResponse", []);
    }
    create(value?: PartialMessage<SubmitEventsResponse>): SubmitEventsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitEventsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitEventsResponse): SubmitEventsResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubmitEventsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitEventsResponse
 */
export const SubmitEventsResponse = new SubmitEventsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloTeleportRequest$Type extends MessageType<HelloTeleportRequest> {
    constructor() {
        super("prehog.v1alpha.HelloTeleportRequest", []);
    }
    create(value?: PartialMessage<HelloTeleportRequest>): HelloTeleportRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HelloTeleportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloTeleportRequest): HelloTeleportRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HelloTeleportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.HelloTeleportRequest
 */
export const HelloTeleportRequest = new HelloTeleportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloTeleportResponse$Type extends MessageType<HelloTeleportResponse> {
    constructor() {
        super("prehog.v1alpha.HelloTeleportResponse", []);
    }
    create(value?: PartialMessage<HelloTeleportResponse>): HelloTeleportResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HelloTeleportResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloTeleportResponse): HelloTeleportResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HelloTeleportResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.HelloTeleportResponse
 */
export const HelloTeleportResponse = new HelloTeleportResponse$Type();
/**
 * @generated ServiceType for protobuf service prehog.v1alpha.TeleportReportingService
 */
export const TeleportReportingService = new ServiceType("prehog.v1alpha.TeleportReportingService", [
    { name: "SubmitEvent", options: {}, I: SubmitEventRequest, O: SubmitEventResponse },
    { name: "SubmitEvents", options: {}, I: SubmitEventsRequest, O: SubmitEventsResponse },
    { name: "HelloTeleport", options: {}, I: HelloTeleportRequest, O: HelloTeleportResponse }
]);
