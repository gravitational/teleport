/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "prehog/v1alpha/connect.proto" (package "prehog.v1alpha", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message prehog.v1alpha.ConnectClusterLoginEvent
 */
export interface ConnectClusterLoginEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * local/github/saml/oidc/passwordless
     *
     * @generated from protobuf field: string connector_type = 3;
     */
    connectorType: string;
    /**
     * @generated from protobuf field: string arch = 4;
     */
    arch: string;
    /**
     * @generated from protobuf field: string os = 5;
     */
    os: string;
    /**
     * @generated from protobuf field: string os_version = 6;
     */
    osVersion: string;
    /**
     * @generated from protobuf field: string app_version = 7;
     */
    appVersion: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectProtocolUseEvent
 */
export interface ConnectProtocolUseEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * one of ssh/db/kube
     *
     * @generated from protobuf field: string protocol = 3;
     */
    protocol: string;
    /**
     * origin denotes which part of Connect UI was used to access a resource.
     * One of resource_table/search_bar/connection_list/reopened_session/vnet (optional for backwards
     * compatibility).
     *
     * @generated from protobuf field: string origin = 4;
     */
    origin: string;
    /**
     * access_through describes whether a resource was accessed by speaking to the proxy service
     * directly, through a local proxy or through VNet.
     * One of proxy_service/local_proxy/vnet (optional for backwards compatibility).
     *
     * @generated from protobuf field: string access_through = 5;
     */
    accessThrough: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectAccessRequestCreateEvent
 */
export interface ConnectAccessRequestCreateEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * one of role/resource
     *
     * @generated from protobuf field: string kind = 3;
     */
    kind: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectAccessRequestReviewEvent
 */
export interface ConnectAccessRequestReviewEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent
 */
export interface ConnectAccessRequestAssumeRoleEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectFileTransferRunEvent
 */
export interface ConnectFileTransferRunEvent {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: bool is_upload = 3;
     */
    isUpload: boolean;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectUserJobRoleUpdateEvent
 */
export interface ConnectUserJobRoleUpdateEvent {
    /**
     * Software Engineer, DevOps Engineer etc.
     *
     * @generated from protobuf field: string job_role = 1;
     */
    jobRole: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectConnectMyComputerSetup
 */
export interface ConnectConnectMyComputerSetup {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: bool success = 3;
     */
    success: boolean;
    /**
     * empty when success is true
     *
     * @generated from protobuf field: string failed_step = 4;
     */
    failedStep: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.ConnectConnectMyComputerAgentStart
 */
export interface ConnectConnectMyComputerAgentStart {
    /**
     * anonymized
     *
     * @generated from protobuf field: string cluster_name = 1;
     */
    clusterName: string;
    /**
     * anonymized
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitConnectEventRequest
 */
export interface SubmitConnectEventRequest {
    /**
     * UUID
     *
     * @generated from protobuf field: string distinct_id = 1;
     */
    distinctId: string;
    /**
     * optional, will default to the ingest time if unset
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "clusterLogin";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectClusterLoginEvent cluster_login = 3;
         */
        clusterLogin: ConnectClusterLoginEvent;
    } | {
        oneofKind: "protocolUse";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectProtocolUseEvent protocol_use = 4;
         */
        protocolUse: ConnectProtocolUseEvent;
    } | {
        oneofKind: "accessRequestCreate";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectAccessRequestCreateEvent access_request_create = 5;
         */
        accessRequestCreate: ConnectAccessRequestCreateEvent;
    } | {
        oneofKind: "accessRequestReview";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectAccessRequestReviewEvent access_request_review = 6;
         */
        accessRequestReview: ConnectAccessRequestReviewEvent;
    } | {
        oneofKind: "accessRequestAssumeRole";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent access_request_assume_role = 7;
         */
        accessRequestAssumeRole: ConnectAccessRequestAssumeRoleEvent;
    } | {
        oneofKind: "fileTransferRun";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectFileTransferRunEvent file_transfer_run = 8;
         */
        fileTransferRun: ConnectFileTransferRunEvent;
    } | {
        oneofKind: "userJobRoleUpdate";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectUserJobRoleUpdateEvent user_job_role_update = 9;
         */
        userJobRoleUpdate: ConnectUserJobRoleUpdateEvent;
    } | {
        oneofKind: "connectMyComputerSetup";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectConnectMyComputerSetup connect_my_computer_setup = 10;
         */
        connectMyComputerSetup: ConnectConnectMyComputerSetup;
    } | {
        oneofKind: "connectMyComputerAgentStart";
        /**
         * @generated from protobuf field: prehog.v1alpha.ConnectConnectMyComputerAgentStart connect_my_computer_agent_start = 11;
         */
        connectMyComputerAgentStart: ConnectConnectMyComputerAgentStart;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message prehog.v1alpha.SubmitConnectEventResponse
 */
export interface SubmitConnectEventResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ConnectClusterLoginEvent$Type extends MessageType<ConnectClusterLoginEvent> {
    constructor() {
        super("prehog.v1alpha.ConnectClusterLoginEvent", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "connector_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "arch", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "os", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "os_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "app_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectClusterLoginEvent>): ConnectClusterLoginEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        message.connectorType = "";
        message.arch = "";
        message.os = "";
        message.osVersion = "";
        message.appVersion = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectClusterLoginEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectClusterLoginEvent): ConnectClusterLoginEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string connector_type */ 3:
                    message.connectorType = reader.string();
                    break;
                case /* string arch */ 4:
                    message.arch = reader.string();
                    break;
                case /* string os */ 5:
                    message.os = reader.string();
                    break;
                case /* string os_version */ 6:
                    message.osVersion = reader.string();
                    break;
                case /* string app_version */ 7:
                    message.appVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectClusterLoginEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string connector_type = 3; */
        if (message.connectorType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.connectorType);
        /* string arch = 4; */
        if (message.arch !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.arch);
        /* string os = 5; */
        if (message.os !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.os);
        /* string os_version = 6; */
        if (message.osVersion !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.osVersion);
        /* string app_version = 7; */
        if (message.appVersion !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.appVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectClusterLoginEvent
 */
export const ConnectClusterLoginEvent = new ConnectClusterLoginEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectProtocolUseEvent$Type extends MessageType<ConnectProtocolUseEvent> {
    constructor() {
        super("prehog.v1alpha.ConnectProtocolUseEvent", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "protocol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "origin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "access_through", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectProtocolUseEvent>): ConnectProtocolUseEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        message.protocol = "";
        message.origin = "";
        message.accessThrough = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectProtocolUseEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectProtocolUseEvent): ConnectProtocolUseEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string protocol */ 3:
                    message.protocol = reader.string();
                    break;
                case /* string origin */ 4:
                    message.origin = reader.string();
                    break;
                case /* string access_through */ 5:
                    message.accessThrough = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectProtocolUseEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string protocol = 3; */
        if (message.protocol !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.protocol);
        /* string origin = 4; */
        if (message.origin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.origin);
        /* string access_through = 5; */
        if (message.accessThrough !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.accessThrough);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectProtocolUseEvent
 */
export const ConnectProtocolUseEvent = new ConnectProtocolUseEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectAccessRequestCreateEvent$Type extends MessageType<ConnectAccessRequestCreateEvent> {
    constructor() {
        super("prehog.v1alpha.ConnectAccessRequestCreateEvent", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectAccessRequestCreateEvent>): ConnectAccessRequestCreateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        message.kind = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectAccessRequestCreateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectAccessRequestCreateEvent): ConnectAccessRequestCreateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string kind */ 3:
                    message.kind = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectAccessRequestCreateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string kind = 3; */
        if (message.kind !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.kind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectAccessRequestCreateEvent
 */
export const ConnectAccessRequestCreateEvent = new ConnectAccessRequestCreateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectAccessRequestReviewEvent$Type extends MessageType<ConnectAccessRequestReviewEvent> {
    constructor() {
        super("prehog.v1alpha.ConnectAccessRequestReviewEvent", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectAccessRequestReviewEvent>): ConnectAccessRequestReviewEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectAccessRequestReviewEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectAccessRequestReviewEvent): ConnectAccessRequestReviewEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectAccessRequestReviewEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectAccessRequestReviewEvent
 */
export const ConnectAccessRequestReviewEvent = new ConnectAccessRequestReviewEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectAccessRequestAssumeRoleEvent$Type extends MessageType<ConnectAccessRequestAssumeRoleEvent> {
    constructor() {
        super("prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectAccessRequestAssumeRoleEvent>): ConnectAccessRequestAssumeRoleEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectAccessRequestAssumeRoleEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectAccessRequestAssumeRoleEvent): ConnectAccessRequestAssumeRoleEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectAccessRequestAssumeRoleEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent
 */
export const ConnectAccessRequestAssumeRoleEvent = new ConnectAccessRequestAssumeRoleEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectFileTransferRunEvent$Type extends MessageType<ConnectFileTransferRunEvent> {
    constructor() {
        super("prehog.v1alpha.ConnectFileTransferRunEvent", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_upload", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectFileTransferRunEvent>): ConnectFileTransferRunEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        message.isUpload = false;
        if (value !== undefined)
            reflectionMergePartial<ConnectFileTransferRunEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectFileTransferRunEvent): ConnectFileTransferRunEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* bool is_upload */ 3:
                    message.isUpload = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectFileTransferRunEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* bool is_upload = 3; */
        if (message.isUpload !== false)
            writer.tag(3, WireType.Varint).bool(message.isUpload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectFileTransferRunEvent
 */
export const ConnectFileTransferRunEvent = new ConnectFileTransferRunEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectUserJobRoleUpdateEvent$Type extends MessageType<ConnectUserJobRoleUpdateEvent> {
    constructor() {
        super("prehog.v1alpha.ConnectUserJobRoleUpdateEvent", [
            { no: 1, name: "job_role", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectUserJobRoleUpdateEvent>): ConnectUserJobRoleUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobRole = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectUserJobRoleUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectUserJobRoleUpdateEvent): ConnectUserJobRoleUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job_role */ 1:
                    message.jobRole = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectUserJobRoleUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job_role = 1; */
        if (message.jobRole !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jobRole);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectUserJobRoleUpdateEvent
 */
export const ConnectUserJobRoleUpdateEvent = new ConnectUserJobRoleUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectConnectMyComputerSetup$Type extends MessageType<ConnectConnectMyComputerSetup> {
    constructor() {
        super("prehog.v1alpha.ConnectConnectMyComputerSetup", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "failed_step", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectConnectMyComputerSetup>): ConnectConnectMyComputerSetup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        message.success = false;
        message.failedStep = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectConnectMyComputerSetup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectConnectMyComputerSetup): ConnectConnectMyComputerSetup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* bool success */ 3:
                    message.success = reader.bool();
                    break;
                case /* string failed_step */ 4:
                    message.failedStep = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectConnectMyComputerSetup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* bool success = 3; */
        if (message.success !== false)
            writer.tag(3, WireType.Varint).bool(message.success);
        /* string failed_step = 4; */
        if (message.failedStep !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.failedStep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectConnectMyComputerSetup
 */
export const ConnectConnectMyComputerSetup = new ConnectConnectMyComputerSetup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectConnectMyComputerAgentStart$Type extends MessageType<ConnectConnectMyComputerAgentStart> {
    constructor() {
        super("prehog.v1alpha.ConnectConnectMyComputerAgentStart", [
            { no: 1, name: "cluster_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectConnectMyComputerAgentStart>): ConnectConnectMyComputerAgentStart {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterName = "";
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectConnectMyComputerAgentStart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectConnectMyComputerAgentStart): ConnectConnectMyComputerAgentStart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_name */ 1:
                    message.clusterName = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectConnectMyComputerAgentStart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_name = 1; */
        if (message.clusterName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterName);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.ConnectConnectMyComputerAgentStart
 */
export const ConnectConnectMyComputerAgentStart = new ConnectConnectMyComputerAgentStart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitConnectEventRequest$Type extends MessageType<SubmitConnectEventRequest> {
    constructor() {
        super("prehog.v1alpha.SubmitConnectEventRequest", [
            { no: 1, name: "distinct_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 3, name: "cluster_login", kind: "message", oneof: "event", T: () => ConnectClusterLoginEvent },
            { no: 4, name: "protocol_use", kind: "message", oneof: "event", T: () => ConnectProtocolUseEvent },
            { no: 5, name: "access_request_create", kind: "message", oneof: "event", T: () => ConnectAccessRequestCreateEvent },
            { no: 6, name: "access_request_review", kind: "message", oneof: "event", T: () => ConnectAccessRequestReviewEvent },
            { no: 7, name: "access_request_assume_role", kind: "message", oneof: "event", T: () => ConnectAccessRequestAssumeRoleEvent },
            { no: 8, name: "file_transfer_run", kind: "message", oneof: "event", T: () => ConnectFileTransferRunEvent },
            { no: 9, name: "user_job_role_update", kind: "message", oneof: "event", T: () => ConnectUserJobRoleUpdateEvent },
            { no: 10, name: "connect_my_computer_setup", kind: "message", oneof: "event", T: () => ConnectConnectMyComputerSetup },
            { no: 11, name: "connect_my_computer_agent_start", kind: "message", oneof: "event", T: () => ConnectConnectMyComputerAgentStart }
        ]);
    }
    create(value?: PartialMessage<SubmitConnectEventRequest>): SubmitConnectEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.distinctId = "";
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SubmitConnectEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitConnectEventRequest): SubmitConnectEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string distinct_id */ 1:
                    message.distinctId = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 2:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* prehog.v1alpha.ConnectClusterLoginEvent cluster_login */ 3:
                    message.event = {
                        oneofKind: "clusterLogin",
                        clusterLogin: ConnectClusterLoginEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).clusterLogin)
                    };
                    break;
                case /* prehog.v1alpha.ConnectProtocolUseEvent protocol_use */ 4:
                    message.event = {
                        oneofKind: "protocolUse",
                        protocolUse: ConnectProtocolUseEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).protocolUse)
                    };
                    break;
                case /* prehog.v1alpha.ConnectAccessRequestCreateEvent access_request_create */ 5:
                    message.event = {
                        oneofKind: "accessRequestCreate",
                        accessRequestCreate: ConnectAccessRequestCreateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessRequestCreate)
                    };
                    break;
                case /* prehog.v1alpha.ConnectAccessRequestReviewEvent access_request_review */ 6:
                    message.event = {
                        oneofKind: "accessRequestReview",
                        accessRequestReview: ConnectAccessRequestReviewEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessRequestReview)
                    };
                    break;
                case /* prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent access_request_assume_role */ 7:
                    message.event = {
                        oneofKind: "accessRequestAssumeRole",
                        accessRequestAssumeRole: ConnectAccessRequestAssumeRoleEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).accessRequestAssumeRole)
                    };
                    break;
                case /* prehog.v1alpha.ConnectFileTransferRunEvent file_transfer_run */ 8:
                    message.event = {
                        oneofKind: "fileTransferRun",
                        fileTransferRun: ConnectFileTransferRunEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).fileTransferRun)
                    };
                    break;
                case /* prehog.v1alpha.ConnectUserJobRoleUpdateEvent user_job_role_update */ 9:
                    message.event = {
                        oneofKind: "userJobRoleUpdate",
                        userJobRoleUpdate: ConnectUserJobRoleUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).userJobRoleUpdate)
                    };
                    break;
                case /* prehog.v1alpha.ConnectConnectMyComputerSetup connect_my_computer_setup */ 10:
                    message.event = {
                        oneofKind: "connectMyComputerSetup",
                        connectMyComputerSetup: ConnectConnectMyComputerSetup.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).connectMyComputerSetup)
                    };
                    break;
                case /* prehog.v1alpha.ConnectConnectMyComputerAgentStart connect_my_computer_agent_start */ 11:
                    message.event = {
                        oneofKind: "connectMyComputerAgentStart",
                        connectMyComputerAgentStart: ConnectConnectMyComputerAgentStart.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).connectMyComputerAgentStart)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitConnectEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string distinct_id = 1; */
        if (message.distinctId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.distinctId);
        /* google.protobuf.Timestamp timestamp = 2; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectClusterLoginEvent cluster_login = 3; */
        if (message.event.oneofKind === "clusterLogin")
            ConnectClusterLoginEvent.internalBinaryWrite(message.event.clusterLogin, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectProtocolUseEvent protocol_use = 4; */
        if (message.event.oneofKind === "protocolUse")
            ConnectProtocolUseEvent.internalBinaryWrite(message.event.protocolUse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectAccessRequestCreateEvent access_request_create = 5; */
        if (message.event.oneofKind === "accessRequestCreate")
            ConnectAccessRequestCreateEvent.internalBinaryWrite(message.event.accessRequestCreate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectAccessRequestReviewEvent access_request_review = 6; */
        if (message.event.oneofKind === "accessRequestReview")
            ConnectAccessRequestReviewEvent.internalBinaryWrite(message.event.accessRequestReview, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectAccessRequestAssumeRoleEvent access_request_assume_role = 7; */
        if (message.event.oneofKind === "accessRequestAssumeRole")
            ConnectAccessRequestAssumeRoleEvent.internalBinaryWrite(message.event.accessRequestAssumeRole, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectFileTransferRunEvent file_transfer_run = 8; */
        if (message.event.oneofKind === "fileTransferRun")
            ConnectFileTransferRunEvent.internalBinaryWrite(message.event.fileTransferRun, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectUserJobRoleUpdateEvent user_job_role_update = 9; */
        if (message.event.oneofKind === "userJobRoleUpdate")
            ConnectUserJobRoleUpdateEvent.internalBinaryWrite(message.event.userJobRoleUpdate, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectConnectMyComputerSetup connect_my_computer_setup = 10; */
        if (message.event.oneofKind === "connectMyComputerSetup")
            ConnectConnectMyComputerSetup.internalBinaryWrite(message.event.connectMyComputerSetup, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* prehog.v1alpha.ConnectConnectMyComputerAgentStart connect_my_computer_agent_start = 11; */
        if (message.event.oneofKind === "connectMyComputerAgentStart")
            ConnectConnectMyComputerAgentStart.internalBinaryWrite(message.event.connectMyComputerAgentStart, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitConnectEventRequest
 */
export const SubmitConnectEventRequest = new SubmitConnectEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitConnectEventResponse$Type extends MessageType<SubmitConnectEventResponse> {
    constructor() {
        super("prehog.v1alpha.SubmitConnectEventResponse", []);
    }
    create(value?: PartialMessage<SubmitConnectEventResponse>): SubmitConnectEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitConnectEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitConnectEventResponse): SubmitConnectEventResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubmitConnectEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message prehog.v1alpha.SubmitConnectEventResponse
 */
export const SubmitConnectEventResponse = new SubmitConnectEventResponse$Type();
/**
 * @generated ServiceType for protobuf service prehog.v1alpha.ConnectReportingService
 */
export const ConnectReportingService = new ServiceType("prehog.v1alpha.ConnectReportingService", [
    { name: "SubmitConnectEvent", options: {}, I: SubmitConnectEventRequest, O: SubmitConnectEventResponse }
]);
