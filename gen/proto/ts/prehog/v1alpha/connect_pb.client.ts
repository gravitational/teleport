/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "prehog/v1alpha/connect.proto" (package "prehog.v1alpha", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ConnectReportingService } from "./connect_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SubmitConnectEventResponse } from "./connect_pb";
import type { SubmitConnectEventRequest } from "./connect_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service prehog.v1alpha.ConnectReportingService
 */
export interface IConnectReportingServiceClient {
    /**
     * @generated from protobuf rpc: SubmitConnectEvent(prehog.v1alpha.SubmitConnectEventRequest) returns (prehog.v1alpha.SubmitConnectEventResponse);
     */
    submitConnectEvent(input: SubmitConnectEventRequest, options?: RpcOptions): UnaryCall<SubmitConnectEventRequest, SubmitConnectEventResponse>;
}
/**
 * @generated from protobuf service prehog.v1alpha.ConnectReportingService
 */
export class ConnectReportingServiceClient implements IConnectReportingServiceClient, ServiceInfo {
    typeName = ConnectReportingService.typeName;
    methods = ConnectReportingService.methods;
    options = ConnectReportingService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubmitConnectEvent(prehog.v1alpha.SubmitConnectEventRequest) returns (prehog.v1alpha.SubmitConnectEventResponse);
     */
    submitConnectEvent(input: SubmitConnectEventRequest, options?: RpcOptions): UnaryCall<SubmitConnectEventRequest, SubmitConnectEventResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitConnectEventRequest, SubmitConnectEventResponse>("unary", this._transport, method, opt, input);
    }
}
