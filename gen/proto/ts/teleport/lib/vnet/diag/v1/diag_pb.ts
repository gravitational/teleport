/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/vnet/diag/v1/diag.proto" (package "teleport.lib.vnet.diag.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * RouteConflict describes a conflict between a route set up by a 3rd-party app where the
 * destination overlaps with a destination in a route set up by VNet.
 *
 * @generated from protobuf message teleport.lib.vnet.diag.v1.RouteConflict
 */
export interface RouteConflict {
    /**
     * dest is the destination of the conflicting route.
     *
     * @generated from protobuf field: string dest = 1;
     */
    dest: string;
    /**
     * vnet_dest is the destination of a VNet route that Dest overlaps with.
     *
     * @generated from protobuf field: string vnet_dest = 2;
     */
    vnetDest: string;
    /**
     * interface_name is the name of the interface the route uses, e.g. "utun4".
     *
     * @generated from protobuf field: string interface_name = 3;
     */
    interfaceName: string;
    /**
     * interface_app may contain the name of the application responsible for setting up the interface.
     * At the moment, the only source of this information is NetworkExtension description included in
     * the output of `ifconfig -v <interface name>`. Not all VPN applications use this framework, so
     * it's likely to be empty.
     *
     * @generated from protobuf field: string interface_app = 4;
     */
    interfaceApp: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class RouteConflict$Type extends MessageType<RouteConflict> {
    constructor() {
        super("teleport.lib.vnet.diag.v1.RouteConflict", [
            { no: 1, name: "dest", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "vnet_dest", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "interface_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "interface_app", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RouteConflict>): RouteConflict {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dest = "";
        message.vnetDest = "";
        message.interfaceName = "";
        message.interfaceApp = "";
        if (value !== undefined)
            reflectionMergePartial<RouteConflict>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteConflict): RouteConflict {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dest */ 1:
                    message.dest = reader.string();
                    break;
                case /* string vnet_dest */ 2:
                    message.vnetDest = reader.string();
                    break;
                case /* string interface_name */ 3:
                    message.interfaceName = reader.string();
                    break;
                case /* string interface_app */ 4:
                    message.interfaceApp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteConflict, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dest = 1; */
        if (message.dest !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dest);
        /* string vnet_dest = 2; */
        if (message.vnetDest !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vnetDest);
        /* string interface_name = 3; */
        if (message.interfaceName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.interfaceName);
        /* string interface_app = 4; */
        if (message.interfaceApp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.interfaceApp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.vnet.diag.v1.RouteConflict
 */
export const RouteConflict = new RouteConflict$Type();
