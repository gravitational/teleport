/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/v1/service.proto" (package "teleport.lib.teleterm.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { AuthenticateWebDeviceResponse } from "./service_pb";
import { AuthenticateWebDeviceRequest } from "./service_pb";
import { UpdateUserPreferencesResponse } from "./service_pb";
import { UpdateUserPreferencesRequest } from "./service_pb";
import { GetUserPreferencesResponse } from "./service_pb";
import { GetUserPreferencesRequest } from "./service_pb";
import { ListUnifiedResourcesResponse } from "./service_pb";
import { ListUnifiedResourcesRequest } from "./service_pb";
import { GetConnectMyComputerNodeNameResponse } from "./service_pb";
import { GetConnectMyComputerNodeNameRequest } from "./service_pb";
import { DeleteConnectMyComputerNodeResponse } from "./service_pb";
import { DeleteConnectMyComputerNodeRequest } from "./service_pb";
import { WaitForConnectMyComputerNodeJoinResponse } from "./service_pb";
import { WaitForConnectMyComputerNodeJoinRequest } from "./service_pb";
import { CreateConnectMyComputerNodeTokenResponse } from "./service_pb";
import { CreateConnectMyComputerNodeTokenRequest } from "./service_pb";
import { CreateConnectMyComputerRoleResponse } from "./service_pb";
import { CreateConnectMyComputerRoleRequest } from "./service_pb";
import { UpdateHeadlessAuthenticationStateResponse } from "./service_pb";
import { UpdateHeadlessAuthenticationStateRequest } from "./service_pb";
import { ReportUsageEventRequest } from "./usage_events_pb";
import { FileTransferProgress } from "./service_pb";
import { FileTransferRequest } from "./service_pb";
import { LogoutRequest } from "./service_pb";
import { LoginPasswordlessResponse } from "./service_pb";
import { LoginPasswordlessRequest } from "./service_pb";
import { LoginRequest } from "./service_pb";
import { GetClusterRequest } from "./service_pb";
import { AuthSettings } from "./auth_settings_pb";
import { GetAuthSettingsRequest } from "./service_pb";
import { SetGatewayLocalPortRequest } from "./service_pb";
import { SetGatewayTargetSubresourceNameRequest } from "./service_pb";
import { RemoveGatewayRequest } from "./service_pb";
import { Gateway } from "./gateway_pb";
import { CreateGatewayRequest } from "./service_pb";
import { ListGatewaysResponse } from "./service_pb";
import { ListGatewaysRequest } from "./service_pb";
import { RemoveClusterRequest } from "./service_pb";
import { Cluster } from "./cluster_pb";
import { AddClusterRequest } from "./service_pb";
import { GetAppsResponse } from "./service_pb";
import { GetAppsRequest } from "./service_pb";
import { GetKubesResponse } from "./service_pb";
import { GetKubesRequest } from "./service_pb";
import { GetSuggestedAccessListsResponse } from "./service_pb";
import { GetSuggestedAccessListsRequest } from "./service_pb";
import { PromoteAccessRequestResponse } from "./service_pb";
import { PromoteAccessRequestRequest } from "./service_pb";
import { AssumeRoleRequest } from "./service_pb";
import { GetRequestableRolesResponse } from "./service_pb";
import { GetRequestableRolesRequest } from "./service_pb";
import { ReviewAccessRequestResponse } from "./service_pb";
import { ReviewAccessRequestRequest } from "./service_pb";
import { CreateAccessRequestResponse } from "./service_pb";
import { CreateAccessRequestRequest } from "./service_pb";
import { EmptyResponse } from "./service_pb";
import { DeleteAccessRequestRequest } from "./service_pb";
import { GetAccessRequestResponse } from "./service_pb";
import { GetAccessRequestRequest } from "./service_pb";
import { GetAccessRequestsResponse } from "./service_pb";
import { GetAccessRequestsRequest } from "./service_pb";
import { GetServersResponse } from "./service_pb";
import { GetServersRequest } from "./service_pb";
import { ListDatabaseUsersResponse } from "./service_pb";
import { ListDatabaseUsersRequest } from "./service_pb";
import { GetDatabasesResponse } from "./service_pb";
import { GetDatabasesRequest } from "./service_pb";
import { ListLeafClustersRequest } from "./service_pb";
import { ListClustersResponse } from "./service_pb";
import { ListClustersRequest } from "./service_pb";
import { UpdateTshdEventsServerAddressResponse } from "./service_pb";
import { UpdateTshdEventsServerAddressRequest } from "./service_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * TerminalService is used by the Electron app to communicate with the tsh daemon.
 *
 * While we aim to preserve backwards compatibility in order to satisfy CI checks and follow the
 * proto practices used within the company, this service is not guaranteed to be stable across
 * versions. The packaging process of Teleport Connect ensures that the server and the client use
 * the same version of the service.
 *
 * @generated from protobuf service teleport.lib.teleterm.v1.TerminalService
 */
export interface ITerminalService extends grpc.UntypedServiceImplementation {
    /**
     * UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
     * supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
     * before any other from this service.
     *
     * The service is supposed to return a response from this call only after the client is ready.
     *
     * @generated from protobuf rpc: UpdateTshdEventsServerAddress(teleport.lib.teleterm.v1.UpdateTshdEventsServerAddressRequest) returns (teleport.lib.teleterm.v1.UpdateTshdEventsServerAddressResponse);
     */
    updateTshdEventsServerAddress: grpc.handleUnaryCall<UpdateTshdEventsServerAddressRequest, UpdateTshdEventsServerAddressResponse>;
    /**
     * ListRootClusters lists root clusters
     * Does not include detailed cluster information that would require a network request.
     *
     * @generated from protobuf rpc: ListRootClusters(teleport.lib.teleterm.v1.ListClustersRequest) returns (teleport.lib.teleterm.v1.ListClustersResponse);
     */
    listRootClusters: grpc.handleUnaryCall<ListClustersRequest, ListClustersResponse>;
    /**
     * ListLeafClusters lists leaf clusters
     * Does not include detailed cluster information that would require a network request.
     *
     * @generated from protobuf rpc: ListLeafClusters(teleport.lib.teleterm.v1.ListLeafClustersRequest) returns (teleport.lib.teleterm.v1.ListClustersResponse);
     */
    listLeafClusters: grpc.handleUnaryCall<ListLeafClustersRequest, ListClustersResponse>;
    /**
     * GetDatabases returns a filtered and paginated list of databases
     *
     * @generated from protobuf rpc: GetDatabases(teleport.lib.teleterm.v1.GetDatabasesRequest) returns (teleport.lib.teleterm.v1.GetDatabasesResponse);
     */
    getDatabases: grpc.handleUnaryCall<GetDatabasesRequest, GetDatabasesResponse>;
    /**
     * ListDatabaseUsers lists allowed users for the given database based on the role set.
     *
     * @generated from protobuf rpc: ListDatabaseUsers(teleport.lib.teleterm.v1.ListDatabaseUsersRequest) returns (teleport.lib.teleterm.v1.ListDatabaseUsersResponse);
     */
    listDatabaseUsers: grpc.handleUnaryCall<ListDatabaseUsersRequest, ListDatabaseUsersResponse>;
    /**
     * GetServers returns filtered, sorted, and paginated servers
     *
     * @generated from protobuf rpc: GetServers(teleport.lib.teleterm.v1.GetServersRequest) returns (teleport.lib.teleterm.v1.GetServersResponse);
     */
    getServers: grpc.handleUnaryCall<GetServersRequest, GetServersResponse>;
    /**
     * GetAccessRequests lists filtered AccessRequests
     *
     * @generated from protobuf rpc: GetAccessRequests(teleport.lib.teleterm.v1.GetAccessRequestsRequest) returns (teleport.lib.teleterm.v1.GetAccessRequestsResponse);
     */
    getAccessRequests: grpc.handleUnaryCall<GetAccessRequestsRequest, GetAccessRequestsResponse>;
    /**
     * GetAccessRequest retreives a single Access Request
     *
     * @generated from protobuf rpc: GetAccessRequest(teleport.lib.teleterm.v1.GetAccessRequestRequest) returns (teleport.lib.teleterm.v1.GetAccessRequestResponse);
     */
    getAccessRequest: grpc.handleUnaryCall<GetAccessRequestRequest, GetAccessRequestResponse>;
    /**
     * DeleteAccessRequest deletes the access request by id
     *
     * @generated from protobuf rpc: DeleteAccessRequest(teleport.lib.teleterm.v1.DeleteAccessRequestRequest) returns (teleport.lib.teleterm.v1.EmptyResponse);
     */
    deleteAccessRequest: grpc.handleUnaryCall<DeleteAccessRequestRequest, EmptyResponse>;
    /**
     * CreateAccessRequest creates an access request
     *
     * @generated from protobuf rpc: CreateAccessRequest(teleport.lib.teleterm.v1.CreateAccessRequestRequest) returns (teleport.lib.teleterm.v1.CreateAccessRequestResponse);
     */
    createAccessRequest: grpc.handleUnaryCall<CreateAccessRequestRequest, CreateAccessRequestResponse>;
    /**
     * ReviewAccessRequest submits a review for an Access Request
     *
     * @generated from protobuf rpc: ReviewAccessRequest(teleport.lib.teleterm.v1.ReviewAccessRequestRequest) returns (teleport.lib.teleterm.v1.ReviewAccessRequestResponse);
     */
    reviewAccessRequest: grpc.handleUnaryCall<ReviewAccessRequestRequest, ReviewAccessRequestResponse>;
    /**
     * GetRequestableRoles gets all requestable roles
     *
     * @generated from protobuf rpc: GetRequestableRoles(teleport.lib.teleterm.v1.GetRequestableRolesRequest) returns (teleport.lib.teleterm.v1.GetRequestableRolesResponse);
     */
    getRequestableRoles: grpc.handleUnaryCall<GetRequestableRolesRequest, GetRequestableRolesResponse>;
    /**
     * AssumeRole assumes the role of the given access request
     *
     * @generated from protobuf rpc: AssumeRole(teleport.lib.teleterm.v1.AssumeRoleRequest) returns (teleport.lib.teleterm.v1.EmptyResponse);
     */
    assumeRole: grpc.handleUnaryCall<AssumeRoleRequest, EmptyResponse>;
    /**
     * PromoteAccessRequest promotes an access request to an access list.
     *
     * @generated from protobuf rpc: PromoteAccessRequest(teleport.lib.teleterm.v1.PromoteAccessRequestRequest) returns (teleport.lib.teleterm.v1.PromoteAccessRequestResponse);
     */
    promoteAccessRequest: grpc.handleUnaryCall<PromoteAccessRequestRequest, PromoteAccessRequestResponse>;
    /**
     * GetSuggestedAccessLists returns suggested access lists for an access request.
     *
     * @generated from protobuf rpc: GetSuggestedAccessLists(teleport.lib.teleterm.v1.GetSuggestedAccessListsRequest) returns (teleport.lib.teleterm.v1.GetSuggestedAccessListsResponse);
     */
    getSuggestedAccessLists: grpc.handleUnaryCall<GetSuggestedAccessListsRequest, GetSuggestedAccessListsResponse>;
    /**
     * GetKubes returns filtered, sorted, and paginated kubes
     *
     * @generated from protobuf rpc: GetKubes(teleport.lib.teleterm.v1.GetKubesRequest) returns (teleport.lib.teleterm.v1.GetKubesResponse);
     */
    getKubes: grpc.handleUnaryCall<GetKubesRequest, GetKubesResponse>;
    /**
     * GetApps returns a filtered and paginated list of apps.
     *
     * @generated from protobuf rpc: GetApps(teleport.lib.teleterm.v1.GetAppsRequest) returns (teleport.lib.teleterm.v1.GetAppsResponse);
     */
    getApps: grpc.handleUnaryCall<GetAppsRequest, GetAppsResponse>;
    /**
     * AddCluster adds a cluster to profile
     *
     * @generated from protobuf rpc: AddCluster(teleport.lib.teleterm.v1.AddClusterRequest) returns (teleport.lib.teleterm.v1.Cluster);
     */
    addCluster: grpc.handleUnaryCall<AddClusterRequest, Cluster>;
    /**
     * RemoveCluster removes a cluster from profile
     *
     * @generated from protobuf rpc: RemoveCluster(teleport.lib.teleterm.v1.RemoveClusterRequest) returns (teleport.lib.teleterm.v1.EmptyResponse);
     */
    removeCluster: grpc.handleUnaryCall<RemoveClusterRequest, EmptyResponse>;
    /**
     * ListGateways lists gateways
     *
     * @generated from protobuf rpc: ListGateways(teleport.lib.teleterm.v1.ListGatewaysRequest) returns (teleport.lib.teleterm.v1.ListGatewaysResponse);
     */
    listGateways: grpc.handleUnaryCall<ListGatewaysRequest, ListGatewaysResponse>;
    /**
     * CreateGateway creates a gateway
     *
     * @generated from protobuf rpc: CreateGateway(teleport.lib.teleterm.v1.CreateGatewayRequest) returns (teleport.lib.teleterm.v1.Gateway);
     */
    createGateway: grpc.handleUnaryCall<CreateGatewayRequest, Gateway>;
    /**
     * RemoveGateway removes a gateway
     *
     * @generated from protobuf rpc: RemoveGateway(teleport.lib.teleterm.v1.RemoveGatewayRequest) returns (teleport.lib.teleterm.v1.EmptyResponse);
     */
    removeGateway: grpc.handleUnaryCall<RemoveGatewayRequest, EmptyResponse>;
    /**
     * SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
     * and returns the updated version of gateway.Gateway.
     *
     * In Connect this is used to update the db name of a db connection along with the CLI command.
     *
     * @generated from protobuf rpc: SetGatewayTargetSubresourceName(teleport.lib.teleterm.v1.SetGatewayTargetSubresourceNameRequest) returns (teleport.lib.teleterm.v1.Gateway);
     */
    setGatewayTargetSubresourceName: grpc.handleUnaryCall<SetGatewayTargetSubresourceNameRequest, Gateway>;
    /**
     * SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
     * assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
     *
     * @generated from protobuf rpc: SetGatewayLocalPort(teleport.lib.teleterm.v1.SetGatewayLocalPortRequest) returns (teleport.lib.teleterm.v1.Gateway);
     */
    setGatewayLocalPort: grpc.handleUnaryCall<SetGatewayLocalPortRequest, Gateway>;
    /**
     * GetAuthSettings returns cluster auth settigns
     *
     * @generated from protobuf rpc: GetAuthSettings(teleport.lib.teleterm.v1.GetAuthSettingsRequest) returns (teleport.lib.teleterm.v1.AuthSettings);
     */
    getAuthSettings: grpc.handleUnaryCall<GetAuthSettingsRequest, AuthSettings>;
    /**
     * GetCluster returns cluster. Makes a network request and includes detailed
     * information about enterprise features availabed on the connected auth server
     *
     * @generated from protobuf rpc: GetCluster(teleport.lib.teleterm.v1.GetClusterRequest) returns (teleport.lib.teleterm.v1.Cluster);
     */
    getCluster: grpc.handleUnaryCall<GetClusterRequest, Cluster>;
    /**
     * Login logs in a user to a cluster
     *
     * @generated from protobuf rpc: Login(teleport.lib.teleterm.v1.LoginRequest) returns (teleport.lib.teleterm.v1.EmptyResponse);
     */
    login: grpc.handleUnaryCall<LoginRequest, EmptyResponse>;
    /**
     * LoginPasswordless logs in a user to a cluster passwordlessly.
     *
     * The RPC is streaming both ways and the message sequence example for hardware keys are:
     * (-> means client-to-server, <- means server-to-client)
     *
     * Hardware keys:
     * -> Init
     * <- Send PasswordlessPrompt enum TAP to choose a device
     * -> Receive TAP device response
     * <- Send PasswordlessPrompt enum PIN
     * -> Receive PIN response
     * <- Send PasswordlessPrompt enum RETAP to confirm
     * -> Receive RETAP device response
     * <- Send list of credentials (e.g. usernames) associated with device
     * -> Receive the index number associated with the selected credential in list
     * <- End
     *
     * @generated from protobuf rpc: LoginPasswordless(stream teleport.lib.teleterm.v1.LoginPasswordlessRequest) returns (stream teleport.lib.teleterm.v1.LoginPasswordlessResponse);
     */
    loginPasswordless: grpc.handleBidiStreamingCall<LoginPasswordlessRequest, LoginPasswordlessResponse>;
    /**
     * ClusterLogin logs out a user from cluster
     *
     * @generated from protobuf rpc: Logout(teleport.lib.teleterm.v1.LogoutRequest) returns (teleport.lib.teleterm.v1.EmptyResponse);
     */
    logout: grpc.handleUnaryCall<LogoutRequest, EmptyResponse>;
    /**
     * TransferFile sends a request to download/upload a file
     *
     * @generated from protobuf rpc: TransferFile(teleport.lib.teleterm.v1.FileTransferRequest) returns (stream teleport.lib.teleterm.v1.FileTransferProgress);
     */
    transferFile: grpc.handleServerStreamingCall<FileTransferRequest, FileTransferProgress>;
    /**
     * ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
     *
     * @generated from protobuf rpc: ReportUsageEvent(teleport.lib.teleterm.v1.ReportUsageEventRequest) returns (teleport.lib.teleterm.v1.EmptyResponse);
     */
    reportUsageEvent: grpc.handleUnaryCall<ReportUsageEventRequest, EmptyResponse>;
    /**
     * UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
     * An MFA challenge will be prompted when approving a headless authentication.
     *
     * @generated from protobuf rpc: UpdateHeadlessAuthenticationState(teleport.lib.teleterm.v1.UpdateHeadlessAuthenticationStateRequest) returns (teleport.lib.teleterm.v1.UpdateHeadlessAuthenticationStateResponse);
     */
    updateHeadlessAuthenticationState: grpc.handleUnaryCall<UpdateHeadlessAuthenticationStateRequest, UpdateHeadlessAuthenticationStateResponse>;
    /**
     * CreateConnectMyComputerRole creates a role which allows access to nodes with the label
     * teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
     * the current system user.
     *
     * @generated from protobuf rpc: CreateConnectMyComputerRole(teleport.lib.teleterm.v1.CreateConnectMyComputerRoleRequest) returns (teleport.lib.teleterm.v1.CreateConnectMyComputerRoleResponse);
     */
    createConnectMyComputerRole: grpc.handleUnaryCall<CreateConnectMyComputerRoleRequest, CreateConnectMyComputerRoleResponse>;
    /**
     * CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
     *
     * @generated from protobuf rpc: CreateConnectMyComputerNodeToken(teleport.lib.teleterm.v1.CreateConnectMyComputerNodeTokenRequest) returns (teleport.lib.teleterm.v1.CreateConnectMyComputerNodeTokenResponse);
     */
    createConnectMyComputerNodeToken: grpc.handleUnaryCall<CreateConnectMyComputerNodeTokenRequest, CreateConnectMyComputerNodeTokenResponse>;
    /**
     * WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
     * that the Connect My Computer node for the particular cluster has joined the cluster (the
     * OpPut event).
     *
     * This RPC times out by itself after a minute to prevent the request from hanging forever, in
     * case the client didn't set a deadline or doesn't abort the request.
     *
     * @generated from protobuf rpc: WaitForConnectMyComputerNodeJoin(teleport.lib.teleterm.v1.WaitForConnectMyComputerNodeJoinRequest) returns (teleport.lib.teleterm.v1.WaitForConnectMyComputerNodeJoinResponse);
     */
    waitForConnectMyComputerNodeJoin: grpc.handleUnaryCall<WaitForConnectMyComputerNodeJoinRequest, WaitForConnectMyComputerNodeJoinResponse>;
    /**
     * DeleteConnectMyComputerNode deletes the Connect My Computer node.
     *
     * @generated from protobuf rpc: DeleteConnectMyComputerNode(teleport.lib.teleterm.v1.DeleteConnectMyComputerNodeRequest) returns (teleport.lib.teleterm.v1.DeleteConnectMyComputerNodeResponse);
     */
    deleteConnectMyComputerNode: grpc.handleUnaryCall<DeleteConnectMyComputerNodeRequest, DeleteConnectMyComputerNodeResponse>;
    /**
     * GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
     *
     * @generated from protobuf rpc: GetConnectMyComputerNodeName(teleport.lib.teleterm.v1.GetConnectMyComputerNodeNameRequest) returns (teleport.lib.teleterm.v1.GetConnectMyComputerNodeNameResponse);
     */
    getConnectMyComputerNodeName: grpc.handleUnaryCall<GetConnectMyComputerNodeNameRequest, GetConnectMyComputerNodeNameResponse>;
    /**
     * ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
     *
     * @generated from protobuf rpc: ListUnifiedResources(teleport.lib.teleterm.v1.ListUnifiedResourcesRequest) returns (teleport.lib.teleterm.v1.ListUnifiedResourcesResponse);
     */
    listUnifiedResources: grpc.handleUnaryCall<ListUnifiedResourcesRequest, ListUnifiedResourcesResponse>;
    /**
     * GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
     *
     * @generated from protobuf rpc: GetUserPreferences(teleport.lib.teleterm.v1.GetUserPreferencesRequest) returns (teleport.lib.teleterm.v1.GetUserPreferencesResponse);
     */
    getUserPreferences: grpc.handleUnaryCall<GetUserPreferencesRequest, GetUserPreferencesResponse>;
    /**
     * UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
     * Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
     *
     * @generated from protobuf rpc: UpdateUserPreferences(teleport.lib.teleterm.v1.UpdateUserPreferencesRequest) returns (teleport.lib.teleterm.v1.UpdateUserPreferencesResponse);
     */
    updateUserPreferences: grpc.handleUnaryCall<UpdateUserPreferencesRequest, UpdateUserPreferencesResponse>;
    /**
     * AuthenticateWebDevice blesses a web session with device trust by performing
     * the on-behalf-of device authentication ceremony.
     *
     * See
     * https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
     *
     * @generated from protobuf rpc: AuthenticateWebDevice(teleport.lib.teleterm.v1.AuthenticateWebDeviceRequest) returns (teleport.lib.teleterm.v1.AuthenticateWebDeviceResponse);
     */
    authenticateWebDevice: grpc.handleUnaryCall<AuthenticateWebDeviceRequest, AuthenticateWebDeviceResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service teleport.lib.teleterm.v1.TerminalService.
 *
 * Usage: Implement the interface ITerminalService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: ITerminalService = ...
 * server.addService(terminalServiceDefinition, service);
 * ```
 */
export const terminalServiceDefinition: grpc.ServiceDefinition<ITerminalService> = {
    updateTshdEventsServerAddress: {
        path: "/teleport.lib.teleterm.v1.TerminalService/UpdateTshdEventsServerAddress",
        originalName: "UpdateTshdEventsServerAddress",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => UpdateTshdEventsServerAddressResponse.fromBinary(bytes),
        requestDeserialize: bytes => UpdateTshdEventsServerAddressRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UpdateTshdEventsServerAddressResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdateTshdEventsServerAddressRequest.toBinary(value))
    },
    listRootClusters: {
        path: "/teleport.lib.teleterm.v1.TerminalService/ListRootClusters",
        originalName: "ListRootClusters",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListClustersResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListClustersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListClustersResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListClustersRequest.toBinary(value))
    },
    listLeafClusters: {
        path: "/teleport.lib.teleterm.v1.TerminalService/ListLeafClusters",
        originalName: "ListLeafClusters",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListClustersResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListLeafClustersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListClustersResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListLeafClustersRequest.toBinary(value))
    },
    getDatabases: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetDatabases",
        originalName: "GetDatabases",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetDatabasesResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetDatabasesRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetDatabasesResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetDatabasesRequest.toBinary(value))
    },
    listDatabaseUsers: {
        path: "/teleport.lib.teleterm.v1.TerminalService/ListDatabaseUsers",
        originalName: "ListDatabaseUsers",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListDatabaseUsersResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListDatabaseUsersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListDatabaseUsersResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListDatabaseUsersRequest.toBinary(value))
    },
    getServers: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetServers",
        originalName: "GetServers",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetServersResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetServersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetServersResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetServersRequest.toBinary(value))
    },
    getAccessRequests: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetAccessRequests",
        originalName: "GetAccessRequests",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAccessRequestsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAccessRequestsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAccessRequestsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAccessRequestsRequest.toBinary(value))
    },
    getAccessRequest: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetAccessRequest",
        originalName: "GetAccessRequest",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAccessRequestResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAccessRequestRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAccessRequestResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAccessRequestRequest.toBinary(value))
    },
    deleteAccessRequest: {
        path: "/teleport.lib.teleterm.v1.TerminalService/DeleteAccessRequest",
        originalName: "DeleteAccessRequest",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => DeleteAccessRequestRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(DeleteAccessRequestRequest.toBinary(value))
    },
    createAccessRequest: {
        path: "/teleport.lib.teleterm.v1.TerminalService/CreateAccessRequest",
        originalName: "CreateAccessRequest",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateAccessRequestResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateAccessRequestRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateAccessRequestResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateAccessRequestRequest.toBinary(value))
    },
    reviewAccessRequest: {
        path: "/teleport.lib.teleterm.v1.TerminalService/ReviewAccessRequest",
        originalName: "ReviewAccessRequest",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ReviewAccessRequestResponse.fromBinary(bytes),
        requestDeserialize: bytes => ReviewAccessRequestRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ReviewAccessRequestResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ReviewAccessRequestRequest.toBinary(value))
    },
    getRequestableRoles: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetRequestableRoles",
        originalName: "GetRequestableRoles",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetRequestableRolesResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetRequestableRolesRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetRequestableRolesResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetRequestableRolesRequest.toBinary(value))
    },
    assumeRole: {
        path: "/teleport.lib.teleterm.v1.TerminalService/AssumeRole",
        originalName: "AssumeRole",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => AssumeRoleRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(AssumeRoleRequest.toBinary(value))
    },
    promoteAccessRequest: {
        path: "/teleport.lib.teleterm.v1.TerminalService/PromoteAccessRequest",
        originalName: "PromoteAccessRequest",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PromoteAccessRequestResponse.fromBinary(bytes),
        requestDeserialize: bytes => PromoteAccessRequestRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PromoteAccessRequestResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(PromoteAccessRequestRequest.toBinary(value))
    },
    getSuggestedAccessLists: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetSuggestedAccessLists",
        originalName: "GetSuggestedAccessLists",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetSuggestedAccessListsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetSuggestedAccessListsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetSuggestedAccessListsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetSuggestedAccessListsRequest.toBinary(value))
    },
    getKubes: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetKubes",
        originalName: "GetKubes",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetKubesResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetKubesRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetKubesResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetKubesRequest.toBinary(value))
    },
    getApps: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetApps",
        originalName: "GetApps",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAppsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAppsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAppsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAppsRequest.toBinary(value))
    },
    addCluster: {
        path: "/teleport.lib.teleterm.v1.TerminalService/AddCluster",
        originalName: "AddCluster",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Cluster.fromBinary(bytes),
        requestDeserialize: bytes => AddClusterRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Cluster.toBinary(value)),
        requestSerialize: value => Buffer.from(AddClusterRequest.toBinary(value))
    },
    removeCluster: {
        path: "/teleport.lib.teleterm.v1.TerminalService/RemoveCluster",
        originalName: "RemoveCluster",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => RemoveClusterRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(RemoveClusterRequest.toBinary(value))
    },
    listGateways: {
        path: "/teleport.lib.teleterm.v1.TerminalService/ListGateways",
        originalName: "ListGateways",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListGatewaysResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListGatewaysRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListGatewaysResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListGatewaysRequest.toBinary(value))
    },
    createGateway: {
        path: "/teleport.lib.teleterm.v1.TerminalService/CreateGateway",
        originalName: "CreateGateway",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Gateway.fromBinary(bytes),
        requestDeserialize: bytes => CreateGatewayRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Gateway.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateGatewayRequest.toBinary(value))
    },
    removeGateway: {
        path: "/teleport.lib.teleterm.v1.TerminalService/RemoveGateway",
        originalName: "RemoveGateway",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => RemoveGatewayRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(RemoveGatewayRequest.toBinary(value))
    },
    setGatewayTargetSubresourceName: {
        path: "/teleport.lib.teleterm.v1.TerminalService/SetGatewayTargetSubresourceName",
        originalName: "SetGatewayTargetSubresourceName",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Gateway.fromBinary(bytes),
        requestDeserialize: bytes => SetGatewayTargetSubresourceNameRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Gateway.toBinary(value)),
        requestSerialize: value => Buffer.from(SetGatewayTargetSubresourceNameRequest.toBinary(value))
    },
    setGatewayLocalPort: {
        path: "/teleport.lib.teleterm.v1.TerminalService/SetGatewayLocalPort",
        originalName: "SetGatewayLocalPort",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Gateway.fromBinary(bytes),
        requestDeserialize: bytes => SetGatewayLocalPortRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Gateway.toBinary(value)),
        requestSerialize: value => Buffer.from(SetGatewayLocalPortRequest.toBinary(value))
    },
    getAuthSettings: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetAuthSettings",
        originalName: "GetAuthSettings",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => AuthSettings.fromBinary(bytes),
        requestDeserialize: bytes => GetAuthSettingsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(AuthSettings.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAuthSettingsRequest.toBinary(value))
    },
    getCluster: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetCluster",
        originalName: "GetCluster",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Cluster.fromBinary(bytes),
        requestDeserialize: bytes => GetClusterRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Cluster.toBinary(value)),
        requestSerialize: value => Buffer.from(GetClusterRequest.toBinary(value))
    },
    login: {
        path: "/teleport.lib.teleterm.v1.TerminalService/Login",
        originalName: "Login",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => LoginRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(LoginRequest.toBinary(value))
    },
    loginPasswordless: {
        path: "/teleport.lib.teleterm.v1.TerminalService/LoginPasswordless",
        originalName: "LoginPasswordless",
        requestStream: true,
        responseStream: true,
        responseDeserialize: bytes => LoginPasswordlessResponse.fromBinary(bytes),
        requestDeserialize: bytes => LoginPasswordlessRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(LoginPasswordlessResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(LoginPasswordlessRequest.toBinary(value))
    },
    logout: {
        path: "/teleport.lib.teleterm.v1.TerminalService/Logout",
        originalName: "Logout",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => LogoutRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(LogoutRequest.toBinary(value))
    },
    transferFile: {
        path: "/teleport.lib.teleterm.v1.TerminalService/TransferFile",
        originalName: "TransferFile",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => FileTransferProgress.fromBinary(bytes),
        requestDeserialize: bytes => FileTransferRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(FileTransferProgress.toBinary(value)),
        requestSerialize: value => Buffer.from(FileTransferRequest.toBinary(value))
    },
    reportUsageEvent: {
        path: "/teleport.lib.teleterm.v1.TerminalService/ReportUsageEvent",
        originalName: "ReportUsageEvent",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => ReportUsageEventRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ReportUsageEventRequest.toBinary(value))
    },
    updateHeadlessAuthenticationState: {
        path: "/teleport.lib.teleterm.v1.TerminalService/UpdateHeadlessAuthenticationState",
        originalName: "UpdateHeadlessAuthenticationState",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => UpdateHeadlessAuthenticationStateResponse.fromBinary(bytes),
        requestDeserialize: bytes => UpdateHeadlessAuthenticationStateRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UpdateHeadlessAuthenticationStateResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdateHeadlessAuthenticationStateRequest.toBinary(value))
    },
    createConnectMyComputerRole: {
        path: "/teleport.lib.teleterm.v1.TerminalService/CreateConnectMyComputerRole",
        originalName: "CreateConnectMyComputerRole",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateConnectMyComputerRoleResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateConnectMyComputerRoleRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateConnectMyComputerRoleResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateConnectMyComputerRoleRequest.toBinary(value))
    },
    createConnectMyComputerNodeToken: {
        path: "/teleport.lib.teleterm.v1.TerminalService/CreateConnectMyComputerNodeToken",
        originalName: "CreateConnectMyComputerNodeToken",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateConnectMyComputerNodeTokenResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateConnectMyComputerNodeTokenRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateConnectMyComputerNodeTokenResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateConnectMyComputerNodeTokenRequest.toBinary(value))
    },
    waitForConnectMyComputerNodeJoin: {
        path: "/teleport.lib.teleterm.v1.TerminalService/WaitForConnectMyComputerNodeJoin",
        originalName: "WaitForConnectMyComputerNodeJoin",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => WaitForConnectMyComputerNodeJoinResponse.fromBinary(bytes),
        requestDeserialize: bytes => WaitForConnectMyComputerNodeJoinRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(WaitForConnectMyComputerNodeJoinResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(WaitForConnectMyComputerNodeJoinRequest.toBinary(value))
    },
    deleteConnectMyComputerNode: {
        path: "/teleport.lib.teleterm.v1.TerminalService/DeleteConnectMyComputerNode",
        originalName: "DeleteConnectMyComputerNode",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => DeleteConnectMyComputerNodeResponse.fromBinary(bytes),
        requestDeserialize: bytes => DeleteConnectMyComputerNodeRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(DeleteConnectMyComputerNodeResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(DeleteConnectMyComputerNodeRequest.toBinary(value))
    },
    getConnectMyComputerNodeName: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetConnectMyComputerNodeName",
        originalName: "GetConnectMyComputerNodeName",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetConnectMyComputerNodeNameResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetConnectMyComputerNodeNameRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetConnectMyComputerNodeNameResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetConnectMyComputerNodeNameRequest.toBinary(value))
    },
    listUnifiedResources: {
        path: "/teleport.lib.teleterm.v1.TerminalService/ListUnifiedResources",
        originalName: "ListUnifiedResources",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListUnifiedResourcesResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListUnifiedResourcesRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListUnifiedResourcesResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListUnifiedResourcesRequest.toBinary(value))
    },
    getUserPreferences: {
        path: "/teleport.lib.teleterm.v1.TerminalService/GetUserPreferences",
        originalName: "GetUserPreferences",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetUserPreferencesResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetUserPreferencesRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetUserPreferencesResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetUserPreferencesRequest.toBinary(value))
    },
    updateUserPreferences: {
        path: "/teleport.lib.teleterm.v1.TerminalService/UpdateUserPreferences",
        originalName: "UpdateUserPreferences",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => UpdateUserPreferencesResponse.fromBinary(bytes),
        requestDeserialize: bytes => UpdateUserPreferencesRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(UpdateUserPreferencesResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdateUserPreferencesRequest.toBinary(value))
    },
    authenticateWebDevice: {
        path: "/teleport.lib.teleterm.v1.TerminalService/AuthenticateWebDevice",
        originalName: "AuthenticateWebDevice",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => AuthenticateWebDeviceResponse.fromBinary(bytes),
        requestDeserialize: bytes => AuthenticateWebDeviceRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(AuthenticateWebDeviceResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(AuthenticateWebDeviceRequest.toBinary(value))
    }
};
