/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/v1/auth_settings.proto" (package "teleport.lib.teleterm.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * AuthSettings contains the form of authentication the auth server supports.
 *
 * @generated from protobuf message teleport.lib.teleterm.v1.AuthSettings
 */
export interface AuthSettings {
    /**
     * local_auth_enabled is a flag that enables local authentication
     *
     * @generated from protobuf field: bool local_auth_enabled = 1;
     */
    localAuthEnabled: boolean;
    /**
     * second_factor is the type of second factor to use in authentication.
     *
     * @generated from protobuf field: string second_factor = 2;
     */
    secondFactor: string;
    /**
     * preferred_mfa is the prefered mfa for local logins
     *
     * @generated from protobuf field: string preferred_mfa = 3;
     */
    preferredMfa: string;
    /**
     * auth_providers contains a list of auth providers
     *
     * @generated from protobuf field: repeated teleport.lib.teleterm.v1.AuthProvider auth_providers = 4;
     */
    authProviders: AuthProvider[];
    /**
     * has_message_of_the_day is a flag indicating that the cluster has MOTD
     * banner text that must be retrieved, displayed and acknowledged by
     * the user.
     *
     * @generated from protobuf field: bool has_message_of_the_day = 5;
     */
    hasMessageOfTheDay: boolean;
    /**
     * auth_type is the authentication type e.g. "local", "github", "saml", "oidc"
     *
     * @generated from protobuf field: string auth_type = 6;
     */
    authType: string;
    /**
     * allow_passwordless is true if passwordless logins are allowed.
     *
     * @generated from protobuf field: bool allow_passwordless = 7;
     */
    allowPasswordless: boolean;
    /**
     * local_connector_name is the name of the local connector.
     *
     * @generated from protobuf field: string local_connector_name = 8;
     */
    localConnectorName: string;
}
/**
 * AuthProvider describes a way of authentication that is supported by the server. Auth provider is
 * referred to as "auth connector" on the backend.
 *
 * @generated from protobuf message teleport.lib.teleterm.v1.AuthProvider
 */
export interface AuthProvider {
    /**
     * Type is the auth provider type (github|oidc|etc)
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Name is the internal name of the connector.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * Display is the display name for the connector.
     *
     * @generated from protobuf field: string display_name = 3;
     */
    displayName: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthSettings$Type extends MessageType<AuthSettings> {
    constructor() {
        super("teleport.lib.teleterm.v1.AuthSettings", [
            { no: 1, name: "local_auth_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "second_factor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "preferred_mfa", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "auth_providers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AuthProvider },
            { no: 5, name: "has_message_of_the_day", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "auth_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "allow_passwordless", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "local_connector_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthSettings>): AuthSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.localAuthEnabled = false;
        message.secondFactor = "";
        message.preferredMfa = "";
        message.authProviders = [];
        message.hasMessageOfTheDay = false;
        message.authType = "";
        message.allowPasswordless = false;
        message.localConnectorName = "";
        if (value !== undefined)
            reflectionMergePartial<AuthSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthSettings): AuthSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool local_auth_enabled */ 1:
                    message.localAuthEnabled = reader.bool();
                    break;
                case /* string second_factor */ 2:
                    message.secondFactor = reader.string();
                    break;
                case /* string preferred_mfa */ 3:
                    message.preferredMfa = reader.string();
                    break;
                case /* repeated teleport.lib.teleterm.v1.AuthProvider auth_providers */ 4:
                    message.authProviders.push(AuthProvider.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool has_message_of_the_day */ 5:
                    message.hasMessageOfTheDay = reader.bool();
                    break;
                case /* string auth_type */ 6:
                    message.authType = reader.string();
                    break;
                case /* bool allow_passwordless */ 7:
                    message.allowPasswordless = reader.bool();
                    break;
                case /* string local_connector_name */ 8:
                    message.localConnectorName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool local_auth_enabled = 1; */
        if (message.localAuthEnabled !== false)
            writer.tag(1, WireType.Varint).bool(message.localAuthEnabled);
        /* string second_factor = 2; */
        if (message.secondFactor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.secondFactor);
        /* string preferred_mfa = 3; */
        if (message.preferredMfa !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.preferredMfa);
        /* repeated teleport.lib.teleterm.v1.AuthProvider auth_providers = 4; */
        for (let i = 0; i < message.authProviders.length; i++)
            AuthProvider.internalBinaryWrite(message.authProviders[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool has_message_of_the_day = 5; */
        if (message.hasMessageOfTheDay !== false)
            writer.tag(5, WireType.Varint).bool(message.hasMessageOfTheDay);
        /* string auth_type = 6; */
        if (message.authType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.authType);
        /* bool allow_passwordless = 7; */
        if (message.allowPasswordless !== false)
            writer.tag(7, WireType.Varint).bool(message.allowPasswordless);
        /* string local_connector_name = 8; */
        if (message.localConnectorName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.localConnectorName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.v1.AuthSettings
 */
export const AuthSettings = new AuthSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthProvider$Type extends MessageType<AuthProvider> {
    constructor() {
        super("teleport.lib.teleterm.v1.AuthProvider", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthProvider>): AuthProvider {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.name = "";
        message.displayName = "";
        if (value !== undefined)
            reflectionMergePartial<AuthProvider>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthProvider): AuthProvider {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string display_name */ 3:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthProvider, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string display_name = 3; */
        if (message.displayName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.v1.AuthProvider
 */
export const AuthProvider = new AuthProvider$Type();
