/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/hardwarekeyagent/v1/hardwarekeyagent_service.proto" (package "teleport.lib.teleterm.hardwarekeyagent.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HardwareKeyAgentService } from "./hardwarekeyagent_service_pb";
import type { Signature } from "./hardwarekeyagent_service_pb";
import type { SignRequest } from "./hardwarekeyagent_service_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PingResponse } from "./hardwarekeyagent_service_pb";
import type { PingRequest } from "./hardwarekeyagent_service_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * HardwareKeyAgentService provides an agent service for hardware key (PIV) signatures.
 * This allows multiple Teleport clients to share a PIV connection rather than blocking
 * each other, due to the exclusive nature of PIV connections. This also enabled shared
 * hardware key states, such as a custom PIN cache shared across Teleport clients.
 *
 * @generated from protobuf service teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService
 */
export interface IHardwareKeyAgentServiceClient {
    /**
     * Ping the agent service to check if it is active.
     *
     * @generated from protobuf rpc: Ping(teleport.lib.teleterm.hardwarekeyagent.v1.PingRequest) returns (teleport.lib.teleterm.hardwarekeyagent.v1.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse>;
    /**
     * Sign produces a signature with the provided options for the specified hardware private key
     *
     * This rpc implements Go's crypto.Signer interface.
     *
     * @generated from protobuf rpc: Sign(teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest) returns (teleport.lib.teleterm.hardwarekeyagent.v1.Signature);
     */
    sign(input: SignRequest, options?: RpcOptions): UnaryCall<SignRequest, Signature>;
}
/**
 * HardwareKeyAgentService provides an agent service for hardware key (PIV) signatures.
 * This allows multiple Teleport clients to share a PIV connection rather than blocking
 * each other, due to the exclusive nature of PIV connections. This also enabled shared
 * hardware key states, such as a custom PIN cache shared across Teleport clients.
 *
 * @generated from protobuf service teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService
 */
export class HardwareKeyAgentServiceClient implements IHardwareKeyAgentServiceClient, ServiceInfo {
    typeName = HardwareKeyAgentService.typeName;
    methods = HardwareKeyAgentService.methods;
    options = HardwareKeyAgentService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Ping the agent service to check if it is active.
     *
     * @generated from protobuf rpc: Ping(teleport.lib.teleterm.hardwarekeyagent.v1.PingRequest) returns (teleport.lib.teleterm.hardwarekeyagent.v1.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingRequest, PingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Sign produces a signature with the provided options for the specified hardware private key
     *
     * This rpc implements Go's crypto.Signer interface.
     *
     * @generated from protobuf rpc: Sign(teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest) returns (teleport.lib.teleterm.hardwarekeyagent.v1.Signature);
     */
    sign(input: SignRequest, options?: RpcOptions): UnaryCall<SignRequest, Signature> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignRequest, Signature>("unary", this._transport, method, opt, input);
    }
}
