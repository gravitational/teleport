/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/hardwarekeyagent/v1/hardwarekeyagent_service.proto" (package "teleport.lib.teleterm.hardwarekeyagent.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { GetAttestationResponse } from "./hardwarekeyagent_service_pb";
import { GetAttestationRequest } from "./hardwarekeyagent_service_pb";
import { Signature } from "./hardwarekeyagent_service_pb";
import { SignRequest } from "./hardwarekeyagent_service_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * HardwareKeyAgentService provides an agent service for hardware key (PIV) signatures.
 * This allows multiple Teleport clients to share a PIV connection rather than blocking
 * each other, due to the exclusive nature of PIV connections. This also enabled shared
 * hardware key states, such as a custom PIN cache shared across Teleport clients.
 *
 * @generated from protobuf service teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService
 */
export interface IHardwareKeyAgentService extends grpc.UntypedServiceImplementation {
    /**
     * Sign the given digest with the specified hardware private key. If a hash or salt
     * was used to produce the digest, HashName and SaltLength must be provided as well.
     *
     * This rpc implements Go's crypto.Signer interface.
     *
     * @generated from protobuf rpc: Sign(teleport.lib.teleterm.hardwarekeyagent.v1.SignRequest) returns (teleport.lib.teleterm.hardwarekeyagent.v1.Signature);
     */
    sign: grpc.handleUnaryCall<SignRequest, Signature>;
    /**
     * GetAttestation gets the attestation statement for the specified hardware private key.
     * This attestation is used to attest hardware key info with the Teleport server, including
     * the supported pin and touch policies. The client can also derive useful info from the
     * attestation certs, such as the public key.
     *
     * @generated from protobuf rpc: GetAttestation(teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationRequest) returns (teleport.lib.teleterm.hardwarekeyagent.v1.GetAttestationResponse);
     */
    getAttestation: grpc.handleUnaryCall<GetAttestationRequest, GetAttestationResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService.
 *
 * Usage: Implement the interface IHardwareKeyAgentService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IHardwareKeyAgentService = ...
 * server.addService(hardwareKeyAgentServiceDefinition, service);
 * ```
 */
export const hardwareKeyAgentServiceDefinition: grpc.ServiceDefinition<IHardwareKeyAgentService> = {
    sign: {
        path: "/teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService/Sign",
        originalName: "Sign",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Signature.fromBinary(bytes),
        requestDeserialize: bytes => SignRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Signature.toBinary(value)),
        requestSerialize: value => Buffer.from(SignRequest.toBinary(value))
    },
    getAttestation: {
        path: "/teleport.lib.teleterm.hardwarekeyagent.v1.HardwareKeyAgentService/GetAttestation",
        originalName: "GetAttestation",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAttestationResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAttestationRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAttestationResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAttestationRequest.toBinary(value))
    }
};
