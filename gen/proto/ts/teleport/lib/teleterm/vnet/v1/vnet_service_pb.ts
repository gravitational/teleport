/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/vnet/v1/vnet_service.proto" (package "teleport.lib.teleterm.vnet.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Report } from "../../../vnet/diag/v1/diag_pb";
/**
 * Request for Start.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.StartRequest
 */
export interface StartRequest {
}
/**
 * Response for Start.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.StartResponse
 */
export interface StartResponse {
}
/**
 * Request for Stop.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.StopRequest
 */
export interface StopRequest {
}
/**
 * Response for Stop.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.StopResponse
 */
export interface StopResponse {
}
/**
 * Request for GetServiceInfo.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.GetServiceInfoRequest
 */
export interface GetServiceInfoRequest {
}
/**
 * GetServiceInfoResponse contains the status of the running VNet service.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.GetServiceInfoResponse
 */
export interface GetServiceInfoResponse {
    /**
     * app_dns_zones is a deduplicated list of all DNS zones valid as DNS
     * suffixes for connections to TCP apps.
     *
     * @generated from protobuf field: repeated string app_dns_zones = 1;
     */
    appDnsZones: string[];
    /**
     * clusters is a list of cluster names valid as DNS suffixes for SSH hosts.
     *
     * @generated from protobuf field: repeated string clusters = 2;
     */
    clusters: string[];
    /**
     * ssh_configured is true if the user's SSH config file includes VNet's
     * generated SSH config necessary for SSH access.
     *
     * @generated from protobuf field: bool ssh_configured = 3;
     */
    sshConfigured: boolean;
    /**
     * vnet_ssh_config_path is the path of VNet's generated OpenSSH-compatible
     * config file.
     *
     * @generated from protobuf field: string vnet_ssh_config_path = 4;
     */
    vnetSshConfigPath: string;
}
/**
 * Request for GetBackgroundItemStatus.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest
 */
export interface GetBackgroundItemStatusRequest {
}
/**
 * Response for GetBackgroundItemStatus.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse
 */
export interface GetBackgroundItemStatusResponse {
    /**
     * @generated from protobuf field: teleport.lib.teleterm.vnet.v1.BackgroundItemStatus status = 1;
     */
    status: BackgroundItemStatus;
}
/**
 * Request for RunDiagnostics.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.RunDiagnosticsRequest
 */
export interface RunDiagnosticsRequest {
}
/**
 * Response for RunDiagnostics.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.RunDiagnosticsResponse
 */
export interface RunDiagnosticsResponse {
    /**
     * @generated from protobuf field: teleport.lib.vnet.diag.v1.Report report = 1;
     */
    report?: Report;
}
/**
 * Request for AutoConfigureSSH.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.AutoConfigureSSHRequest
 */
export interface AutoConfigureSSHRequest {
}
/**
 * Response for AutoConfigureSSH.
 *
 * @generated from protobuf message teleport.lib.teleterm.vnet.v1.AutoConfigureSSHResponse
 */
export interface AutoConfigureSSHResponse {
}
/**
 * BackgroundItemStatus maps to SMAppServiceStatus of the Service Management framework in macOS.
 * https://developer.apple.com/documentation/servicemanagement/smappservice/status-swift.enum?language=objc
 *
 * @generated from protobuf enum teleport.lib.teleterm.vnet.v1.BackgroundItemStatus
 */
export enum BackgroundItemStatus {
    /**
     * @generated from protobuf enum value: BACKGROUND_ITEM_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: BACKGROUND_ITEM_STATUS_NOT_REGISTERED = 1;
     */
    NOT_REGISTERED = 1,
    /**
     * This is the status the background item should have before tsh attempts to send a message to the
     * daemon.
     *
     * @generated from protobuf enum value: BACKGROUND_ITEM_STATUS_ENABLED = 2;
     */
    ENABLED = 2,
    /**
     * @generated from protobuf enum value: BACKGROUND_ITEM_STATUS_REQUIRES_APPROVAL = 3;
     */
    REQUIRES_APPROVAL = 3,
    /**
     * @generated from protobuf enum value: BACKGROUND_ITEM_STATUS_NOT_FOUND = 4;
     */
    NOT_FOUND = 4,
    /**
     * @generated from protobuf enum value: BACKGROUND_ITEM_STATUS_NOT_SUPPORTED = 5;
     */
    NOT_SUPPORTED = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class StartRequest$Type extends MessageType<StartRequest> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.StartRequest", []);
    }
    create(value?: PartialMessage<StartRequest>): StartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRequest): StartRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.StartRequest
 */
export const StartRequest = new StartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartResponse$Type extends MessageType<StartResponse> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.StartResponse", []);
    }
    create(value?: PartialMessage<StartResponse>): StartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartResponse): StartResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.StartResponse
 */
export const StartResponse = new StartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopRequest$Type extends MessageType<StopRequest> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.StopRequest", []);
    }
    create(value?: PartialMessage<StopRequest>): StopRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopRequest): StopRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.StopRequest
 */
export const StopRequest = new StopRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopResponse$Type extends MessageType<StopResponse> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.StopResponse", []);
    }
    create(value?: PartialMessage<StopResponse>): StopResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopResponse): StopResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.StopResponse
 */
export const StopResponse = new StopResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServiceInfoRequest$Type extends MessageType<GetServiceInfoRequest> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.GetServiceInfoRequest", []);
    }
    create(value?: PartialMessage<GetServiceInfoRequest>): GetServiceInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetServiceInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServiceInfoRequest): GetServiceInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetServiceInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.GetServiceInfoRequest
 */
export const GetServiceInfoRequest = new GetServiceInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServiceInfoResponse$Type extends MessageType<GetServiceInfoResponse> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.GetServiceInfoResponse", [
            { no: 1, name: "app_dns_zones", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "clusters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ssh_configured", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "vnet_ssh_config_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetServiceInfoResponse>): GetServiceInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appDnsZones = [];
        message.clusters = [];
        message.sshConfigured = false;
        message.vnetSshConfigPath = "";
        if (value !== undefined)
            reflectionMergePartial<GetServiceInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServiceInfoResponse): GetServiceInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string app_dns_zones */ 1:
                    message.appDnsZones.push(reader.string());
                    break;
                case /* repeated string clusters */ 2:
                    message.clusters.push(reader.string());
                    break;
                case /* bool ssh_configured */ 3:
                    message.sshConfigured = reader.bool();
                    break;
                case /* string vnet_ssh_config_path */ 4:
                    message.vnetSshConfigPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServiceInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string app_dns_zones = 1; */
        for (let i = 0; i < message.appDnsZones.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.appDnsZones[i]);
        /* repeated string clusters = 2; */
        for (let i = 0; i < message.clusters.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.clusters[i]);
        /* bool ssh_configured = 3; */
        if (message.sshConfigured !== false)
            writer.tag(3, WireType.Varint).bool(message.sshConfigured);
        /* string vnet_ssh_config_path = 4; */
        if (message.vnetSshConfigPath !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vnetSshConfigPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.GetServiceInfoResponse
 */
export const GetServiceInfoResponse = new GetServiceInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBackgroundItemStatusRequest$Type extends MessageType<GetBackgroundItemStatusRequest> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest", []);
    }
    create(value?: PartialMessage<GetBackgroundItemStatusRequest>): GetBackgroundItemStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBackgroundItemStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBackgroundItemStatusRequest): GetBackgroundItemStatusRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetBackgroundItemStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest
 */
export const GetBackgroundItemStatusRequest = new GetBackgroundItemStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBackgroundItemStatusResponse$Type extends MessageType<GetBackgroundItemStatusResponse> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse", [
            { no: 1, name: "status", kind: "enum", T: () => ["teleport.lib.teleterm.vnet.v1.BackgroundItemStatus", BackgroundItemStatus, "BACKGROUND_ITEM_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<GetBackgroundItemStatusResponse>): GetBackgroundItemStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetBackgroundItemStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBackgroundItemStatusResponse): GetBackgroundItemStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* teleport.lib.teleterm.vnet.v1.BackgroundItemStatus status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBackgroundItemStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* teleport.lib.teleterm.vnet.v1.BackgroundItemStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse
 */
export const GetBackgroundItemStatusResponse = new GetBackgroundItemStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunDiagnosticsRequest$Type extends MessageType<RunDiagnosticsRequest> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.RunDiagnosticsRequest", []);
    }
    create(value?: PartialMessage<RunDiagnosticsRequest>): RunDiagnosticsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RunDiagnosticsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunDiagnosticsRequest): RunDiagnosticsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RunDiagnosticsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.RunDiagnosticsRequest
 */
export const RunDiagnosticsRequest = new RunDiagnosticsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunDiagnosticsResponse$Type extends MessageType<RunDiagnosticsResponse> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.RunDiagnosticsResponse", [
            { no: 1, name: "report", kind: "message", T: () => Report }
        ]);
    }
    create(value?: PartialMessage<RunDiagnosticsResponse>): RunDiagnosticsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RunDiagnosticsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunDiagnosticsResponse): RunDiagnosticsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* teleport.lib.vnet.diag.v1.Report report */ 1:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunDiagnosticsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* teleport.lib.vnet.diag.v1.Report report = 1; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.RunDiagnosticsResponse
 */
export const RunDiagnosticsResponse = new RunDiagnosticsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutoConfigureSSHRequest$Type extends MessageType<AutoConfigureSSHRequest> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.AutoConfigureSSHRequest", []);
    }
    create(value?: PartialMessage<AutoConfigureSSHRequest>): AutoConfigureSSHRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AutoConfigureSSHRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutoConfigureSSHRequest): AutoConfigureSSHRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AutoConfigureSSHRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.AutoConfigureSSHRequest
 */
export const AutoConfigureSSHRequest = new AutoConfigureSSHRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutoConfigureSSHResponse$Type extends MessageType<AutoConfigureSSHResponse> {
    constructor() {
        super("teleport.lib.teleterm.vnet.v1.AutoConfigureSSHResponse", []);
    }
    create(value?: PartialMessage<AutoConfigureSSHResponse>): AutoConfigureSSHResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AutoConfigureSSHResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutoConfigureSSHResponse): AutoConfigureSSHResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AutoConfigureSSHResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.vnet.v1.AutoConfigureSSHResponse
 */
export const AutoConfigureSSHResponse = new AutoConfigureSSHResponse$Type();
/**
 * @generated ServiceType for protobuf service teleport.lib.teleterm.vnet.v1.VnetService
 */
export const VnetService = new ServiceType("teleport.lib.teleterm.vnet.v1.VnetService", [
    { name: "Start", options: {}, I: StartRequest, O: StartResponse },
    { name: "Stop", options: {}, I: StopRequest, O: StopResponse },
    { name: "GetServiceInfo", options: {}, I: GetServiceInfoRequest, O: GetServiceInfoResponse },
    { name: "GetBackgroundItemStatus", options: {}, I: GetBackgroundItemStatusRequest, O: GetBackgroundItemStatusResponse },
    { name: "RunDiagnostics", options: {}, I: RunDiagnosticsRequest, O: RunDiagnosticsResponse },
    { name: "AutoConfigureSSH", options: {}, I: AutoConfigureSSHRequest, O: AutoConfigureSSHResponse }
]);
