/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/vnet/v1/vnet_service.proto" (package "teleport.lib.teleterm.vnet.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VnetService } from "./vnet_service_pb";
import type { GetBackgroundItemStatusResponse } from "./vnet_service_pb";
import type { GetBackgroundItemStatusRequest } from "./vnet_service_pb";
import type { ListDNSZonesResponse } from "./vnet_service_pb";
import type { ListDNSZonesRequest } from "./vnet_service_pb";
import type { StopResponse } from "./vnet_service_pb";
import type { StopRequest } from "./vnet_service_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartResponse } from "./vnet_service_pb";
import type { StartRequest } from "./vnet_service_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * VnetService provides methods to manage a VNet instance.
 *
 * @generated from protobuf service teleport.lib.teleterm.vnet.v1.VnetService
 */
export interface IVnetServiceClient {
    /**
     * Start starts VNet.
     *
     * @generated from protobuf rpc: Start(teleport.lib.teleterm.vnet.v1.StartRequest) returns (teleport.lib.teleterm.vnet.v1.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse>;
    /**
     * Stop stops VNet.
     *
     * @generated from protobuf rpc: Stop(teleport.lib.teleterm.vnet.v1.StopRequest) returns (teleport.lib.teleterm.vnet.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
    /**
     * ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
     * includes the proxy service hostnames and custom DNS zones configured in vnet_config.
     *
     * This is fetched independently of what the Electron app thinks the current state of the cluster
     * looks like, since the VNet admin process also fetches this data independently of the Electron
     * app.
     *
     * Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
     * be fetched (due to e.g., a network error or an expired cert).
     *
     * @generated from protobuf rpc: ListDNSZones(teleport.lib.teleterm.vnet.v1.ListDNSZonesRequest) returns (teleport.lib.teleterm.vnet.v1.ListDNSZonesResponse);
     */
    listDNSZones(input: ListDNSZonesRequest, options?: RpcOptions): UnaryCall<ListDNSZonesRequest, ListDNSZonesResponse>;
    /**
     * GetBackgroundItemStatus returns the status of the background item responsible for launching
     * VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
     *
     * @generated from protobuf rpc: GetBackgroundItemStatus(teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest) returns (teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse);
     */
    getBackgroundItemStatus(input: GetBackgroundItemStatusRequest, options?: RpcOptions): UnaryCall<GetBackgroundItemStatusRequest, GetBackgroundItemStatusResponse>;
}
/**
 * VnetService provides methods to manage a VNet instance.
 *
 * @generated from protobuf service teleport.lib.teleterm.vnet.v1.VnetService
 */
export class VnetServiceClient implements IVnetServiceClient, ServiceInfo {
    typeName = VnetService.typeName;
    methods = VnetService.methods;
    options = VnetService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Start starts VNet.
     *
     * @generated from protobuf rpc: Start(teleport.lib.teleterm.vnet.v1.StartRequest) returns (teleport.lib.teleterm.vnet.v1.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRequest, StartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Stop stops VNet.
     *
     * @generated from protobuf rpc: Stop(teleport.lib.teleterm.vnet.v1.StopRequest) returns (teleport.lib.teleterm.vnet.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopRequest, StopResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListDNSZones returns DNS zones of all root and leaf clusters with non-expired user certs. This
     * includes the proxy service hostnames and custom DNS zones configured in vnet_config.
     *
     * This is fetched independently of what the Electron app thinks the current state of the cluster
     * looks like, since the VNet admin process also fetches this data independently of the Electron
     * app.
     *
     * Just like the admin process, it skips root and leaf clusters for which the vnet_config couldn't
     * be fetched (due to e.g., a network error or an expired cert).
     *
     * @generated from protobuf rpc: ListDNSZones(teleport.lib.teleterm.vnet.v1.ListDNSZonesRequest) returns (teleport.lib.teleterm.vnet.v1.ListDNSZonesResponse);
     */
    listDNSZones(input: ListDNSZonesRequest, options?: RpcOptions): UnaryCall<ListDNSZonesRequest, ListDNSZonesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDNSZonesRequest, ListDNSZonesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetBackgroundItemStatus returns the status of the background item responsible for launching
     * VNet daemon. macOS only. tsh must be compiled with the vnetdaemon build tag.
     *
     * @generated from protobuf rpc: GetBackgroundItemStatus(teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusRequest) returns (teleport.lib.teleterm.vnet.v1.GetBackgroundItemStatusResponse);
     */
    getBackgroundItemStatus(input: GetBackgroundItemStatusRequest, options?: RpcOptions): UnaryCall<GetBackgroundItemStatusRequest, GetBackgroundItemStatusResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBackgroundItemStatusRequest, GetBackgroundItemStatusResponse>("unary", this._transport, method, opt, input);
    }
}
