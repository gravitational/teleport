/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/auto_update/v1/auto_update_service.proto" (package "teleport.lib.teleterm.auto_update.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Request for GetClusterVersions.
 *
 * @generated from protobuf message teleport.lib.teleterm.auto_update.v1.GetClusterVersionsRequest
 */
export interface GetClusterVersionsRequest {
}
/**
 * Response for GetClusterVersions.
 *
 * @generated from protobuf message teleport.lib.teleterm.auto_update.v1.GetClusterVersionsResponse
 */
export interface GetClusterVersionsResponse {
    /**
     * @generated from protobuf field: repeated teleport.lib.teleterm.auto_update.v1.ClusterVersionInfo reachable_clusters = 1;
     */
    reachableClusters: ClusterVersionInfo[];
    /**
     * @generated from protobuf field: repeated teleport.lib.teleterm.auto_update.v1.UnreachableCluster unreachable_clusters = 2;
     */
    unreachableClusters: UnreachableCluster[];
}
/**
 * ClusterVersionInfo contains tool version information for a reachable cluster.
 *
 * @generated from protobuf message teleport.lib.teleterm.auto_update.v1.ClusterVersionInfo
 */
export interface ClusterVersionInfo {
    /**
     * URI of the cluster.
     *
     * @generated from protobuf field: string cluster_uri = 1;
     */
    clusterUri: string;
    /**
     * Whether the client should automatically update the tools version.
     *
     * @generated from protobuf field: bool tools_auto_update = 2;
     */
    toolsAutoUpdate: boolean;
    /**
     * Tools version required by this cluster.
     *
     * @generated from protobuf field: string tools_version = 3;
     */
    toolsVersion: string;
    /**
     * Minimum tools version allowed by this cluster.
     *
     * @generated from protobuf field: string min_tools_version = 4;
     */
    minToolsVersion: string;
}
/**
 * UnreachableCluster represents a cluster from which version information could not be retrieved.
 *
 * @generated from protobuf message teleport.lib.teleterm.auto_update.v1.UnreachableCluster
 */
export interface UnreachableCluster {
    /**
     * URI of the cluster.
     *
     * @generated from protobuf field: string cluster_uri = 1;
     */
    clusterUri: string;
    /**
     * Error that occurred while retrieving version information.
     *
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * Request for GetDownloadBaseUrl.
 *
 * @generated from protobuf message teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlRequest
 */
export interface GetDownloadBaseUrlRequest {
}
/**
 * Response for GetDownloadBaseUrl.
 *
 * @generated from protobuf message teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlResponse
 */
export interface GetDownloadBaseUrlResponse {
    /**
     * @generated from protobuf field: string base_url = 1;
     */
    baseUrl: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetClusterVersionsRequest$Type extends MessageType<GetClusterVersionsRequest> {
    constructor() {
        super("teleport.lib.teleterm.auto_update.v1.GetClusterVersionsRequest", []);
    }
    create(value?: PartialMessage<GetClusterVersionsRequest>): GetClusterVersionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetClusterVersionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClusterVersionsRequest): GetClusterVersionsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetClusterVersionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.auto_update.v1.GetClusterVersionsRequest
 */
export const GetClusterVersionsRequest = new GetClusterVersionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClusterVersionsResponse$Type extends MessageType<GetClusterVersionsResponse> {
    constructor() {
        super("teleport.lib.teleterm.auto_update.v1.GetClusterVersionsResponse", [
            { no: 1, name: "reachable_clusters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClusterVersionInfo },
            { no: 2, name: "unreachable_clusters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnreachableCluster }
        ]);
    }
    create(value?: PartialMessage<GetClusterVersionsResponse>): GetClusterVersionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reachableClusters = [];
        message.unreachableClusters = [];
        if (value !== undefined)
            reflectionMergePartial<GetClusterVersionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClusterVersionsResponse): GetClusterVersionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated teleport.lib.teleterm.auto_update.v1.ClusterVersionInfo reachable_clusters */ 1:
                    message.reachableClusters.push(ClusterVersionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated teleport.lib.teleterm.auto_update.v1.UnreachableCluster unreachable_clusters */ 2:
                    message.unreachableClusters.push(UnreachableCluster.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetClusterVersionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated teleport.lib.teleterm.auto_update.v1.ClusterVersionInfo reachable_clusters = 1; */
        for (let i = 0; i < message.reachableClusters.length; i++)
            ClusterVersionInfo.internalBinaryWrite(message.reachableClusters[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated teleport.lib.teleterm.auto_update.v1.UnreachableCluster unreachable_clusters = 2; */
        for (let i = 0; i < message.unreachableClusters.length; i++)
            UnreachableCluster.internalBinaryWrite(message.unreachableClusters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.auto_update.v1.GetClusterVersionsResponse
 */
export const GetClusterVersionsResponse = new GetClusterVersionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClusterVersionInfo$Type extends MessageType<ClusterVersionInfo> {
    constructor() {
        super("teleport.lib.teleterm.auto_update.v1.ClusterVersionInfo", [
            { no: 1, name: "cluster_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tools_auto_update", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "tools_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "min_tools_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClusterVersionInfo>): ClusterVersionInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterUri = "";
        message.toolsAutoUpdate = false;
        message.toolsVersion = "";
        message.minToolsVersion = "";
        if (value !== undefined)
            reflectionMergePartial<ClusterVersionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterVersionInfo): ClusterVersionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_uri */ 1:
                    message.clusterUri = reader.string();
                    break;
                case /* bool tools_auto_update */ 2:
                    message.toolsAutoUpdate = reader.bool();
                    break;
                case /* string tools_version */ 3:
                    message.toolsVersion = reader.string();
                    break;
                case /* string min_tools_version */ 4:
                    message.minToolsVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClusterVersionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_uri = 1; */
        if (message.clusterUri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterUri);
        /* bool tools_auto_update = 2; */
        if (message.toolsAutoUpdate !== false)
            writer.tag(2, WireType.Varint).bool(message.toolsAutoUpdate);
        /* string tools_version = 3; */
        if (message.toolsVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toolsVersion);
        /* string min_tools_version = 4; */
        if (message.minToolsVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.minToolsVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.auto_update.v1.ClusterVersionInfo
 */
export const ClusterVersionInfo = new ClusterVersionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnreachableCluster$Type extends MessageType<UnreachableCluster> {
    constructor() {
        super("teleport.lib.teleterm.auto_update.v1.UnreachableCluster", [
            { no: 1, name: "cluster_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnreachableCluster>): UnreachableCluster {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clusterUri = "";
        message.errorMessage = "";
        if (value !== undefined)
            reflectionMergePartial<UnreachableCluster>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnreachableCluster): UnreachableCluster {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cluster_uri */ 1:
                    message.clusterUri = reader.string();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnreachableCluster, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cluster_uri = 1; */
        if (message.clusterUri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clusterUri);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.auto_update.v1.UnreachableCluster
 */
export const UnreachableCluster = new UnreachableCluster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDownloadBaseUrlRequest$Type extends MessageType<GetDownloadBaseUrlRequest> {
    constructor() {
        super("teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlRequest", []);
    }
    create(value?: PartialMessage<GetDownloadBaseUrlRequest>): GetDownloadBaseUrlRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetDownloadBaseUrlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDownloadBaseUrlRequest): GetDownloadBaseUrlRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetDownloadBaseUrlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlRequest
 */
export const GetDownloadBaseUrlRequest = new GetDownloadBaseUrlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDownloadBaseUrlResponse$Type extends MessageType<GetDownloadBaseUrlResponse> {
    constructor() {
        super("teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlResponse", [
            { no: 1, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetDownloadBaseUrlResponse>): GetDownloadBaseUrlResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.baseUrl = "";
        if (value !== undefined)
            reflectionMergePartial<GetDownloadBaseUrlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDownloadBaseUrlResponse): GetDownloadBaseUrlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_url */ 1:
                    message.baseUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDownloadBaseUrlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string base_url = 1; */
        if (message.baseUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlResponse
 */
export const GetDownloadBaseUrlResponse = new GetDownloadBaseUrlResponse$Type();
/**
 * @generated ServiceType for protobuf service teleport.lib.teleterm.auto_update.v1.AutoUpdateService
 */
export const AutoUpdateService = new ServiceType("teleport.lib.teleterm.auto_update.v1.AutoUpdateService", [
    { name: "GetClusterVersions", options: {}, I: GetClusterVersionsRequest, O: GetClusterVersionsResponse },
    { name: "GetDownloadBaseUrl", options: {}, I: GetDownloadBaseUrlRequest, O: GetDownloadBaseUrlResponse }
]);
