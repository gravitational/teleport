/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/auto_update/v1/auto_update_service.proto" (package "teleport.lib.teleterm.auto_update.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { GetDownloadBaseUrlResponse } from "./auto_update_service_pb";
import { GetDownloadBaseUrlRequest } from "./auto_update_service_pb";
import { GetClusterVersionsResponse } from "./auto_update_service_pb";
import { GetClusterVersionsRequest } from "./auto_update_service_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * AutoUpdateService provides access to information about client tools updates.
 *
 * @generated from protobuf service teleport.lib.teleterm.auto_update.v1.AutoUpdateService
 */
export interface IAutoUpdateService extends grpc.UntypedServiceImplementation {
    /**
     * GetClusterVersions returns client tools versions for all clusters.
     *
     * @generated from protobuf rpc: GetClusterVersions(teleport.lib.teleterm.auto_update.v1.GetClusterVersionsRequest) returns (teleport.lib.teleterm.auto_update.v1.GetClusterVersionsResponse);
     */
    getClusterVersions: grpc.handleUnaryCall<GetClusterVersionsRequest, GetClusterVersionsResponse>;
    /**
     * GetDownloadBaseUrl returns a base URL (e.g. cdn.teleport.dev) for downloading packages.
     * Can be overridden with TELEPORT_CDN_BASE_URL env var.
     * OSS builds require this env var to be set, otherwise an error is returned.
     *
     * @generated from protobuf rpc: GetDownloadBaseUrl(teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlRequest) returns (teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlResponse);
     */
    getDownloadBaseUrl: grpc.handleUnaryCall<GetDownloadBaseUrlRequest, GetDownloadBaseUrlResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service teleport.lib.teleterm.auto_update.v1.AutoUpdateService.
 *
 * Usage: Implement the interface IAutoUpdateService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IAutoUpdateService = ...
 * server.addService(autoUpdateServiceDefinition, service);
 * ```
 */
export const autoUpdateServiceDefinition: grpc.ServiceDefinition<IAutoUpdateService> = {
    getClusterVersions: {
        path: "/teleport.lib.teleterm.auto_update.v1.AutoUpdateService/GetClusterVersions",
        originalName: "GetClusterVersions",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetClusterVersionsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetClusterVersionsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetClusterVersionsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetClusterVersionsRequest.toBinary(value))
    },
    getDownloadBaseUrl: {
        path: "/teleport.lib.teleterm.auto_update.v1.AutoUpdateService/GetDownloadBaseUrl",
        originalName: "GetDownloadBaseUrl",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetDownloadBaseUrlResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetDownloadBaseUrlRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetDownloadBaseUrlResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetDownloadBaseUrlRequest.toBinary(value))
    }
};
