/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/auto_update/v1/auto_update_service.proto" (package "teleport.lib.teleterm.auto_update.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AutoUpdateService } from "./auto_update_service_pb";
import type { GetDownloadBaseUrlResponse } from "./auto_update_service_pb";
import type { GetDownloadBaseUrlRequest } from "./auto_update_service_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetClusterVersionsResponse } from "./auto_update_service_pb";
import type { GetClusterVersionsRequest } from "./auto_update_service_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * AutoUpdateService provides access to information about client tools updates.
 *
 * @generated from protobuf service teleport.lib.teleterm.auto_update.v1.AutoUpdateService
 */
export interface IAutoUpdateServiceClient {
    /**
     * GetClusterVersions returns client tools versions for all clusters.
     *
     * @generated from protobuf rpc: GetClusterVersions(teleport.lib.teleterm.auto_update.v1.GetClusterVersionsRequest) returns (teleport.lib.teleterm.auto_update.v1.GetClusterVersionsResponse);
     */
    getClusterVersions(input: GetClusterVersionsRequest, options?: RpcOptions): UnaryCall<GetClusterVersionsRequest, GetClusterVersionsResponse>;
    /**
     * GetDownloadBaseUrl returns a base URL (e.g. cdn.teleport.dev) for downloading packages.
     * Can be overridden with TELEPORT_CDN_BASE_URL env var.
     * OSS builds require this env var to be set, otherwise an error is returned.
     *
     * @generated from protobuf rpc: GetDownloadBaseUrl(teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlRequest) returns (teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlResponse);
     */
    getDownloadBaseUrl(input: GetDownloadBaseUrlRequest, options?: RpcOptions): UnaryCall<GetDownloadBaseUrlRequest, GetDownloadBaseUrlResponse>;
}
/**
 * AutoUpdateService provides access to information about client tools updates.
 *
 * @generated from protobuf service teleport.lib.teleterm.auto_update.v1.AutoUpdateService
 */
export class AutoUpdateServiceClient implements IAutoUpdateServiceClient, ServiceInfo {
    typeName = AutoUpdateService.typeName;
    methods = AutoUpdateService.methods;
    options = AutoUpdateService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetClusterVersions returns client tools versions for all clusters.
     *
     * @generated from protobuf rpc: GetClusterVersions(teleport.lib.teleterm.auto_update.v1.GetClusterVersionsRequest) returns (teleport.lib.teleterm.auto_update.v1.GetClusterVersionsResponse);
     */
    getClusterVersions(input: GetClusterVersionsRequest, options?: RpcOptions): UnaryCall<GetClusterVersionsRequest, GetClusterVersionsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetClusterVersionsRequest, GetClusterVersionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetDownloadBaseUrl returns a base URL (e.g. cdn.teleport.dev) for downloading packages.
     * Can be overridden with TELEPORT_CDN_BASE_URL env var.
     * OSS builds require this env var to be set, otherwise an error is returned.
     *
     * @generated from protobuf rpc: GetDownloadBaseUrl(teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlRequest) returns (teleport.lib.teleterm.auto_update.v1.GetDownloadBaseUrlResponse);
     */
    getDownloadBaseUrl(input: GetDownloadBaseUrlRequest, options?: RpcOptions): UnaryCall<GetDownloadBaseUrlRequest, GetDownloadBaseUrlResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDownloadBaseUrlRequest, GetDownloadBaseUrlResponse>("unary", this._transport, method, opt, input);
    }
}
