/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/legacy/types/device.proto" (package "types", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp_pb";
import { ResourceHeader } from "./types_pb";
/**
 * DeviceV1 is the resource representation of teleport.devicetrust.v1.Device.
 *
 * @generated from protobuf message types.DeviceV1
 */
export interface DeviceV1 {
    /**
     * Header is the common resource header.
     *
     * - Kind is always "device".
     * - SubKind is unused.
     * - Version is equivalent to teleport.devicetrust.v1.Device.api_version.
     * - Metadata.Name is equivalent to teleport.devicetrust.v1.Device.Id.
     *
     * @generated from protobuf field: types.ResourceHeader Header = 1 [json_name = "Header"];
     */
    header?: ResourceHeader;
    /**
     * Specification of the device.
     *
     * @generated from protobuf field: types.DeviceSpec spec = 5;
     */
    spec?: DeviceSpec;
}
/**
 * DeviceSpec is a device specification.
 * Roughly matches teleport.devicetrust.v1.Device, with some fields changed for
 * better UX.
 *
 * @generated from protobuf message types.DeviceSpec
 */
export interface DeviceSpec {
    /**
     * @generated from protobuf field: string os_type = 1;
     */
    osType: string;
    /**
     * @generated from protobuf field: string asset_tag = 2;
     */
    assetTag: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp create_time = 3;
     */
    createTime?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp update_time = 4;
     */
    updateTime?: Timestamp;
    /**
     * @generated from protobuf field: string enroll_status = 5;
     */
    enrollStatus: string;
    /**
     * @generated from protobuf field: types.DeviceCredential credential = 6;
     */
    credential?: DeviceCredential;
    /**
     * @generated from protobuf field: repeated types.DeviceCollectedData collected_data = 7;
     */
    collectedData: DeviceCollectedData[];
    /**
     * @generated from protobuf field: types.DeviceSource source = 8;
     */
    source?: DeviceSource;
    /**
     * @generated from protobuf field: types.DeviceProfile profile = 9;
     */
    profile?: DeviceProfile;
    /**
     * @generated from protobuf field: string owner = 10;
     */
    owner: string;
}
/**
 * DeviceCredential is the resource representation of
 * teleport.devicetrust.v1.DeviceCredential.
 *
 * @generated from protobuf message types.DeviceCredential
 */
export interface DeviceCredential {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bytes public_key_der = 2;
     */
    publicKeyDer: Uint8Array;
    /**
     * @generated from protobuf field: string device_attestation_type = 3;
     */
    deviceAttestationType: string;
    /**
     * @generated from protobuf field: string tpm_ekcert_serial = 4;
     */
    tpmEkcertSerial: string;
    /**
     * @generated from protobuf field: bytes tpm_ak_public = 5;
     */
    tpmAkPublic: Uint8Array;
}
/**
 * DeviceCollectedData is the resource representation of
 * teleport.devicetrust.v1.DeviceCollectedData.
 *
 * @generated from protobuf message types.DeviceCollectedData
 */
export interface DeviceCollectedData {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp collect_time = 1;
     */
    collectTime?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp record_time = 2;
     */
    recordTime?: Timestamp;
    /**
     * @generated from protobuf field: string os_type = 3;
     */
    osType: string;
    /**
     * @generated from protobuf field: string serial_number = 4;
     */
    serialNumber: string;
    /**
     * @generated from protobuf field: string model_identifier = 5;
     */
    modelIdentifier: string;
    /**
     * @generated from protobuf field: string os_version = 6;
     */
    osVersion: string;
    /**
     * @generated from protobuf field: string os_build = 7;
     */
    osBuild: string;
    /**
     * @generated from protobuf field: string os_username = 8;
     */
    osUsername: string;
    /**
     * @generated from protobuf field: string jamf_binary_version = 9;
     */
    jamfBinaryVersion: string;
    /**
     * @generated from protobuf field: string macos_enrollment_profiles = 10;
     */
    macosEnrollmentProfiles: string;
    /**
     * @generated from protobuf field: string reported_asset_tag = 11;
     */
    reportedAssetTag: string;
    /**
     * @generated from protobuf field: string system_serial_number = 12;
     */
    systemSerialNumber: string;
    /**
     * @generated from protobuf field: string base_board_serial_number = 13;
     */
    baseBoardSerialNumber: string;
    /**
     * @generated from protobuf field: types.TPMPlatformAttestation tpm_platform_attestation = 14;
     */
    tpmPlatformAttestation?: TPMPlatformAttestation;
    /**
     * @generated from protobuf field: string os_id = 15;
     */
    osId: string;
}
/**
 * TPMPCR is the resource representation of teleport.devicetrust.v1.TPMPCR.
 *
 * @generated from protobuf message types.TPMPCR
 */
export interface TPMPCR {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: bytes digest = 2;
     */
    digest: Uint8Array;
    /**
     * @generated from protobuf field: uint64 digest_alg = 3;
     */
    digestAlg: bigint;
}
/**
 * TPMQuote is the resource representation of teleport.devicetrust.v1.TPMQuote.
 *
 * @generated from protobuf message types.TPMQuote
 */
export interface TPMQuote {
    /**
     * @generated from protobuf field: bytes quote = 1;
     */
    quote: Uint8Array;
    /**
     * @generated from protobuf field: bytes signature = 2;
     */
    signature: Uint8Array;
}
/**
 * TPMPlatformParameters is the resource representation of
 * teleport.devicetrust.v1.TPMPlatformParameters.
 *
 * @generated from protobuf message types.TPMPlatformParameters
 */
export interface TPMPlatformParameters {
    /**
     * @generated from protobuf field: repeated types.TPMQuote quotes = 1;
     */
    quotes: TPMQuote[];
    /**
     * @generated from protobuf field: repeated types.TPMPCR pcrs = 2;
     */
    pcrs: TPMPCR[];
    /**
     * @generated from protobuf field: bytes event_log = 3;
     */
    eventLog: Uint8Array;
}
/**
 * TPMPlatformAttestation is the resource representation of
 * teleport.devicetrust.v1.TPMPlatformAttestation.
 *
 * @generated from protobuf message types.TPMPlatformAttestation
 */
export interface TPMPlatformAttestation {
    /**
     * @generated from protobuf field: bytes nonce = 1;
     */
    nonce: Uint8Array;
    /**
     * @generated from protobuf field: types.TPMPlatformParameters platform_parameters = 2;
     */
    platformParameters?: TPMPlatformParameters;
}
/**
 * DeviceSource is the resource representation of
 * teleport.devicetrust.v1.DeviceSource..
 *
 * @generated from protobuf message types.DeviceSource
 */
export interface DeviceSource {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string origin = 2;
     */
    origin: string;
}
/**
 * DeviceProfile is the resource representation of
 * teleport.devicetrust.v1.DeviceProfile.
 *
 * @generated from protobuf message types.DeviceProfile
 */
export interface DeviceProfile {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp update_time = 1;
     */
    updateTime?: Timestamp;
    /**
     * @generated from protobuf field: string model_identifier = 2;
     */
    modelIdentifier: string;
    /**
     * @generated from protobuf field: string os_version = 3;
     */
    osVersion: string;
    /**
     * @generated from protobuf field: string os_build = 4;
     */
    osBuild: string;
    /**
     * @generated from protobuf field: repeated string os_usernames = 5;
     */
    osUsernames: string[];
    /**
     * @generated from protobuf field: string jamf_binary_version = 6;
     */
    jamfBinaryVersion: string;
    /**
     * @generated from protobuf field: string external_id = 7;
     */
    externalId: string;
    /**
     * @generated from protobuf field: string os_build_supplemental = 8;
     */
    osBuildSupplemental: string;
    /**
     * @generated from protobuf field: string os_id = 9;
     */
    osId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class DeviceV1$Type extends MessageType<DeviceV1> {
    constructor() {
        super("types.DeviceV1", [
            { no: 1, name: "Header", kind: "message", jsonName: "Header", T: () => ResourceHeader, options: { "gogoproto.nullable": false, "gogoproto.embed": true, "gogoproto.jsontag": "" } },
            { no: 5, name: "spec", kind: "message", T: () => DeviceSpec, options: { "gogoproto.jsontag": "spec" } }
        ]);
    }
    create(value?: PartialMessage<DeviceV1>): DeviceV1 {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeviceV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceV1): DeviceV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* types.ResourceHeader Header = 1 [json_name = "Header"];*/ 1:
                    message.header = ResourceHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* types.DeviceSpec spec */ 5:
                    message.spec = DeviceSpec.internalBinaryRead(reader, reader.uint32(), options, message.spec);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* types.ResourceHeader Header = 1 [json_name = "Header"]; */
        if (message.header)
            ResourceHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* types.DeviceSpec spec = 5; */
        if (message.spec)
            DeviceSpec.internalBinaryWrite(message.spec, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.DeviceV1
 */
export const DeviceV1 = new DeviceV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceSpec$Type extends MessageType<DeviceSpec> {
    constructor() {
        super("types.DeviceSpec", [
            { no: 1, name: "os_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_type" } },
            { no: 2, name: "asset_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "asset_tag" } },
            { no: 3, name: "create_time", kind: "message", T: () => Timestamp, options: { "gogoproto.jsontag": "create_time", "gogoproto.stdtime": true } },
            { no: 4, name: "update_time", kind: "message", T: () => Timestamp, options: { "gogoproto.jsontag": "update_time", "gogoproto.stdtime": true } },
            { no: 5, name: "enroll_status", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "enroll_status" } },
            { no: 6, name: "credential", kind: "message", T: () => DeviceCredential, options: { "gogoproto.jsontag": "credential,omitempty" } },
            { no: 7, name: "collected_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeviceCollectedData, options: { "gogoproto.jsontag": "collected_data,omitempty" } },
            { no: 8, name: "source", kind: "message", T: () => DeviceSource, options: { "gogoproto.jsontag": "source,omitempty" } },
            { no: 9, name: "profile", kind: "message", T: () => DeviceProfile, options: { "gogoproto.jsontag": "profile,omitempty" } },
            { no: 10, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "owner,omitempty" } }
        ]);
    }
    create(value?: PartialMessage<DeviceSpec>): DeviceSpec {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.osType = "";
        message.assetTag = "";
        message.enrollStatus = "";
        message.collectedData = [];
        message.owner = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceSpec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceSpec): DeviceSpec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string os_type */ 1:
                    message.osType = reader.string();
                    break;
                case /* string asset_tag */ 2:
                    message.assetTag = reader.string();
                    break;
                case /* google.protobuf.Timestamp create_time */ 3:
                    message.createTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createTime);
                    break;
                case /* google.protobuf.Timestamp update_time */ 4:
                    message.updateTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updateTime);
                    break;
                case /* string enroll_status */ 5:
                    message.enrollStatus = reader.string();
                    break;
                case /* types.DeviceCredential credential */ 6:
                    message.credential = DeviceCredential.internalBinaryRead(reader, reader.uint32(), options, message.credential);
                    break;
                case /* repeated types.DeviceCollectedData collected_data */ 7:
                    message.collectedData.push(DeviceCollectedData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* types.DeviceSource source */ 8:
                    message.source = DeviceSource.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                case /* types.DeviceProfile profile */ 9:
                    message.profile = DeviceProfile.internalBinaryRead(reader, reader.uint32(), options, message.profile);
                    break;
                case /* string owner */ 10:
                    message.owner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string os_type = 1; */
        if (message.osType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.osType);
        /* string asset_tag = 2; */
        if (message.assetTag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.assetTag);
        /* google.protobuf.Timestamp create_time = 3; */
        if (message.createTime)
            Timestamp.internalBinaryWrite(message.createTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp update_time = 4; */
        if (message.updateTime)
            Timestamp.internalBinaryWrite(message.updateTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string enroll_status = 5; */
        if (message.enrollStatus !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.enrollStatus);
        /* types.DeviceCredential credential = 6; */
        if (message.credential)
            DeviceCredential.internalBinaryWrite(message.credential, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated types.DeviceCollectedData collected_data = 7; */
        for (let i = 0; i < message.collectedData.length; i++)
            DeviceCollectedData.internalBinaryWrite(message.collectedData[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* types.DeviceSource source = 8; */
        if (message.source)
            DeviceSource.internalBinaryWrite(message.source, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* types.DeviceProfile profile = 9; */
        if (message.profile)
            DeviceProfile.internalBinaryWrite(message.profile, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string owner = 10; */
        if (message.owner !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.owner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.DeviceSpec
 */
export const DeviceSpec = new DeviceSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCredential$Type extends MessageType<DeviceCredential> {
    constructor() {
        super("types.DeviceCredential", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "id" } },
            { no: 2, name: "public_key_der", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "public_key_der,omitempty" } },
            { no: 3, name: "device_attestation_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "device_attestation_type,omitempty" } },
            { no: 4, name: "tpm_ekcert_serial", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "tpm_ekcert_serial,omitempty" } },
            { no: 5, name: "tpm_ak_public", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "tpm_ak_public,omitempty" } }
        ]);
    }
    create(value?: PartialMessage<DeviceCredential>): DeviceCredential {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.publicKeyDer = new Uint8Array(0);
        message.deviceAttestationType = "";
        message.tpmEkcertSerial = "";
        message.tpmAkPublic = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeviceCredential>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCredential): DeviceCredential {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes public_key_der */ 2:
                    message.publicKeyDer = reader.bytes();
                    break;
                case /* string device_attestation_type */ 3:
                    message.deviceAttestationType = reader.string();
                    break;
                case /* string tpm_ekcert_serial */ 4:
                    message.tpmEkcertSerial = reader.string();
                    break;
                case /* bytes tpm_ak_public */ 5:
                    message.tpmAkPublic = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCredential, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes public_key_der = 2; */
        if (message.publicKeyDer.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.publicKeyDer);
        /* string device_attestation_type = 3; */
        if (message.deviceAttestationType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceAttestationType);
        /* string tpm_ekcert_serial = 4; */
        if (message.tpmEkcertSerial !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tpmEkcertSerial);
        /* bytes tpm_ak_public = 5; */
        if (message.tpmAkPublic.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.tpmAkPublic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.DeviceCredential
 */
export const DeviceCredential = new DeviceCredential$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCollectedData$Type extends MessageType<DeviceCollectedData> {
    constructor() {
        super("types.DeviceCollectedData", [
            { no: 1, name: "collect_time", kind: "message", T: () => Timestamp, options: { "gogoproto.jsontag": "collect_time", "gogoproto.stdtime": true } },
            { no: 2, name: "record_time", kind: "message", T: () => Timestamp, options: { "gogoproto.jsontag": "record_time", "gogoproto.stdtime": true } },
            { no: 3, name: "os_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_type" } },
            { no: 4, name: "serial_number", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "serial_number,omitempty" } },
            { no: 5, name: "model_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "model_identifier,omitempty" } },
            { no: 6, name: "os_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_version,omitempty" } },
            { no: 7, name: "os_build", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_build,omitempty" } },
            { no: 8, name: "os_username", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_username,omitempty" } },
            { no: 9, name: "jamf_binary_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "jamf_binary_version,omitempty" } },
            { no: 10, name: "macos_enrollment_profiles", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "macos_enrollment_profiles,omitempty" } },
            { no: 11, name: "reported_asset_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "reported_asset_tag,omitempty" } },
            { no: 12, name: "system_serial_number", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "system_serial_number,omitempty" } },
            { no: 13, name: "base_board_serial_number", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "base_board_serial_number,omitempty" } },
            { no: 14, name: "tpm_platform_attestation", kind: "message", T: () => TPMPlatformAttestation, options: { "gogoproto.jsontag": "tpm_platform_attestation,omitempty" } },
            { no: 15, name: "os_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_id,omitempty" } }
        ]);
    }
    create(value?: PartialMessage<DeviceCollectedData>): DeviceCollectedData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.osType = "";
        message.serialNumber = "";
        message.modelIdentifier = "";
        message.osVersion = "";
        message.osBuild = "";
        message.osUsername = "";
        message.jamfBinaryVersion = "";
        message.macosEnrollmentProfiles = "";
        message.reportedAssetTag = "";
        message.systemSerialNumber = "";
        message.baseBoardSerialNumber = "";
        message.osId = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceCollectedData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCollectedData): DeviceCollectedData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp collect_time */ 1:
                    message.collectTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.collectTime);
                    break;
                case /* google.protobuf.Timestamp record_time */ 2:
                    message.recordTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.recordTime);
                    break;
                case /* string os_type */ 3:
                    message.osType = reader.string();
                    break;
                case /* string serial_number */ 4:
                    message.serialNumber = reader.string();
                    break;
                case /* string model_identifier */ 5:
                    message.modelIdentifier = reader.string();
                    break;
                case /* string os_version */ 6:
                    message.osVersion = reader.string();
                    break;
                case /* string os_build */ 7:
                    message.osBuild = reader.string();
                    break;
                case /* string os_username */ 8:
                    message.osUsername = reader.string();
                    break;
                case /* string jamf_binary_version */ 9:
                    message.jamfBinaryVersion = reader.string();
                    break;
                case /* string macos_enrollment_profiles */ 10:
                    message.macosEnrollmentProfiles = reader.string();
                    break;
                case /* string reported_asset_tag */ 11:
                    message.reportedAssetTag = reader.string();
                    break;
                case /* string system_serial_number */ 12:
                    message.systemSerialNumber = reader.string();
                    break;
                case /* string base_board_serial_number */ 13:
                    message.baseBoardSerialNumber = reader.string();
                    break;
                case /* types.TPMPlatformAttestation tpm_platform_attestation */ 14:
                    message.tpmPlatformAttestation = TPMPlatformAttestation.internalBinaryRead(reader, reader.uint32(), options, message.tpmPlatformAttestation);
                    break;
                case /* string os_id */ 15:
                    message.osId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCollectedData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp collect_time = 1; */
        if (message.collectTime)
            Timestamp.internalBinaryWrite(message.collectTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp record_time = 2; */
        if (message.recordTime)
            Timestamp.internalBinaryWrite(message.recordTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string os_type = 3; */
        if (message.osType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.osType);
        /* string serial_number = 4; */
        if (message.serialNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.serialNumber);
        /* string model_identifier = 5; */
        if (message.modelIdentifier !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.modelIdentifier);
        /* string os_version = 6; */
        if (message.osVersion !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.osVersion);
        /* string os_build = 7; */
        if (message.osBuild !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.osBuild);
        /* string os_username = 8; */
        if (message.osUsername !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.osUsername);
        /* string jamf_binary_version = 9; */
        if (message.jamfBinaryVersion !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.jamfBinaryVersion);
        /* string macos_enrollment_profiles = 10; */
        if (message.macosEnrollmentProfiles !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.macosEnrollmentProfiles);
        /* string reported_asset_tag = 11; */
        if (message.reportedAssetTag !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.reportedAssetTag);
        /* string system_serial_number = 12; */
        if (message.systemSerialNumber !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.systemSerialNumber);
        /* string base_board_serial_number = 13; */
        if (message.baseBoardSerialNumber !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.baseBoardSerialNumber);
        /* types.TPMPlatformAttestation tpm_platform_attestation = 14; */
        if (message.tpmPlatformAttestation)
            TPMPlatformAttestation.internalBinaryWrite(message.tpmPlatformAttestation, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* string os_id = 15; */
        if (message.osId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.osId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.DeviceCollectedData
 */
export const DeviceCollectedData = new DeviceCollectedData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TPMPCR$Type extends MessageType<TPMPCR> {
    constructor() {
        super("types.TPMPCR", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "gogoproto.jsontag": "index" } },
            { no: 2, name: "digest", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "digest" } },
            { no: 3, name: "digest_alg", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.jsontag": "digest_alg" } }
        ]);
    }
    create(value?: PartialMessage<TPMPCR>): TPMPCR {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = 0;
        message.digest = new Uint8Array(0);
        message.digestAlg = 0n;
        if (value !== undefined)
            reflectionMergePartial<TPMPCR>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TPMPCR): TPMPCR {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                case /* bytes digest */ 2:
                    message.digest = reader.bytes();
                    break;
                case /* uint64 digest_alg */ 3:
                    message.digestAlg = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TPMPCR, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        /* bytes digest = 2; */
        if (message.digest.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.digest);
        /* uint64 digest_alg = 3; */
        if (message.digestAlg !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.digestAlg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.TPMPCR
 */
export const TPMPCR = new TPMPCR$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TPMQuote$Type extends MessageType<TPMQuote> {
    constructor() {
        super("types.TPMQuote", [
            { no: 1, name: "quote", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "quote" } },
            { no: 2, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "signature" } }
        ]);
    }
    create(value?: PartialMessage<TPMQuote>): TPMQuote {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quote = new Uint8Array(0);
        message.signature = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TPMQuote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TPMQuote): TPMQuote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes quote */ 1:
                    message.quote = reader.bytes();
                    break;
                case /* bytes signature */ 2:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TPMQuote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes quote = 1; */
        if (message.quote.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.quote);
        /* bytes signature = 2; */
        if (message.signature.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.TPMQuote
 */
export const TPMQuote = new TPMQuote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TPMPlatformParameters$Type extends MessageType<TPMPlatformParameters> {
    constructor() {
        super("types.TPMPlatformParameters", [
            { no: 1, name: "quotes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TPMQuote, options: { "gogoproto.jsontag": "quotes" } },
            { no: 2, name: "pcrs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TPMPCR, options: { "gogoproto.jsontag": "pcrs" } },
            { no: 3, name: "event_log", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "event_log" } }
        ]);
    }
    create(value?: PartialMessage<TPMPlatformParameters>): TPMPlatformParameters {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quotes = [];
        message.pcrs = [];
        message.eventLog = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TPMPlatformParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TPMPlatformParameters): TPMPlatformParameters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated types.TPMQuote quotes */ 1:
                    message.quotes.push(TPMQuote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated types.TPMPCR pcrs */ 2:
                    message.pcrs.push(TPMPCR.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes event_log */ 3:
                    message.eventLog = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TPMPlatformParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated types.TPMQuote quotes = 1; */
        for (let i = 0; i < message.quotes.length; i++)
            TPMQuote.internalBinaryWrite(message.quotes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated types.TPMPCR pcrs = 2; */
        for (let i = 0; i < message.pcrs.length; i++)
            TPMPCR.internalBinaryWrite(message.pcrs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes event_log = 3; */
        if (message.eventLog.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.eventLog);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.TPMPlatformParameters
 */
export const TPMPlatformParameters = new TPMPlatformParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TPMPlatformAttestation$Type extends MessageType<TPMPlatformAttestation> {
    constructor() {
        super("types.TPMPlatformAttestation", [
            { no: 1, name: "nonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "nonce,omitempty" } },
            { no: 2, name: "platform_parameters", kind: "message", T: () => TPMPlatformParameters, options: { "gogoproto.jsontag": "platform_parameters,omitempty" } }
        ]);
    }
    create(value?: PartialMessage<TPMPlatformAttestation>): TPMPlatformAttestation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nonce = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TPMPlatformAttestation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TPMPlatformAttestation): TPMPlatformAttestation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes nonce */ 1:
                    message.nonce = reader.bytes();
                    break;
                case /* types.TPMPlatformParameters platform_parameters */ 2:
                    message.platformParameters = TPMPlatformParameters.internalBinaryRead(reader, reader.uint32(), options, message.platformParameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TPMPlatformAttestation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes nonce = 1; */
        if (message.nonce.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.nonce);
        /* types.TPMPlatformParameters platform_parameters = 2; */
        if (message.platformParameters)
            TPMPlatformParameters.internalBinaryWrite(message.platformParameters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.TPMPlatformAttestation
 */
export const TPMPlatformAttestation = new TPMPlatformAttestation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceSource$Type extends MessageType<DeviceSource> {
    constructor() {
        super("types.DeviceSource", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "name" } },
            { no: 2, name: "origin", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "origin" } }
        ]);
    }
    create(value?: PartialMessage<DeviceSource>): DeviceSource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.origin = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceSource): DeviceSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string origin */ 2:
                    message.origin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string origin = 2; */
        if (message.origin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.origin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.DeviceSource
 */
export const DeviceSource = new DeviceSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceProfile$Type extends MessageType<DeviceProfile> {
    constructor() {
        super("types.DeviceProfile", [
            { no: 1, name: "update_time", kind: "message", T: () => Timestamp, options: { "gogoproto.jsontag": "update_time,omitempty", "gogoproto.stdtime": true } },
            { no: 2, name: "model_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "model_identifier,omitempty" } },
            { no: 3, name: "os_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_version,omitempty" } },
            { no: 4, name: "os_build", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_build,omitempty" } },
            { no: 5, name: "os_usernames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_usernames,omitempty" } },
            { no: 6, name: "jamf_binary_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "jamf_binary_version,omitempty" } },
            { no: 7, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "external_id,omitempty" } },
            { no: 8, name: "os_build_supplemental", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_build_supplemental,omitempty" } },
            { no: 9, name: "os_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "os_id,omitempty" } }
        ]);
    }
    create(value?: PartialMessage<DeviceProfile>): DeviceProfile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.modelIdentifier = "";
        message.osVersion = "";
        message.osBuild = "";
        message.osUsernames = [];
        message.jamfBinaryVersion = "";
        message.externalId = "";
        message.osBuildSupplemental = "";
        message.osId = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceProfile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceProfile): DeviceProfile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp update_time */ 1:
                    message.updateTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updateTime);
                    break;
                case /* string model_identifier */ 2:
                    message.modelIdentifier = reader.string();
                    break;
                case /* string os_version */ 3:
                    message.osVersion = reader.string();
                    break;
                case /* string os_build */ 4:
                    message.osBuild = reader.string();
                    break;
                case /* repeated string os_usernames */ 5:
                    message.osUsernames.push(reader.string());
                    break;
                case /* string jamf_binary_version */ 6:
                    message.jamfBinaryVersion = reader.string();
                    break;
                case /* string external_id */ 7:
                    message.externalId = reader.string();
                    break;
                case /* string os_build_supplemental */ 8:
                    message.osBuildSupplemental = reader.string();
                    break;
                case /* string os_id */ 9:
                    message.osId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceProfile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp update_time = 1; */
        if (message.updateTime)
            Timestamp.internalBinaryWrite(message.updateTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string model_identifier = 2; */
        if (message.modelIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.modelIdentifier);
        /* string os_version = 3; */
        if (message.osVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.osVersion);
        /* string os_build = 4; */
        if (message.osBuild !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.osBuild);
        /* repeated string os_usernames = 5; */
        for (let i = 0; i < message.osUsernames.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.osUsernames[i]);
        /* string jamf_binary_version = 6; */
        if (message.jamfBinaryVersion !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.jamfBinaryVersion);
        /* string external_id = 7; */
        if (message.externalId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.externalId);
        /* string os_build_supplemental = 8; */
        if (message.osBuildSupplemental !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.osBuildSupplemental);
        /* string os_id = 9; */
        if (message.osId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.osId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.DeviceProfile
 */
export const DeviceProfile = new DeviceProfile$Type();
