/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/legacy/types/wrappers/wrappers.proto" (package "wrappers", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * StringValues is a list of strings.
 *
 * @generated from protobuf message wrappers.StringValues
 */
export interface StringValues {
    /**
     * @generated from protobuf field: repeated string Values = 1 [json_name = "Values"];
     */
    values: string[];
}
/**
 * LabelValues is a list of key value pairs, where key is a string
 * and value is a list of string values.
 *
 * @generated from protobuf message wrappers.LabelValues
 */
export interface LabelValues {
    /**
     * Values contains key value pairs.
     *
     * @generated from protobuf field: map<string, wrappers.StringValues> Values = 1 [json_name = "Values"];
     */
    values: {
        [key: string]: StringValues;
    };
}
/**
 * CustomType is a json protobuf representation of a Go struct. This is
 * useful when defining customtypes for use with the (gogoproto.customtype) extension.
 *
 * @generated from protobuf message wrappers.CustomType
 */
export interface CustomType {
    /**
     * Bytes is the marshalled json data of a struct.
     *
     * @generated from protobuf field: bytes Bytes = 1 [json_name = "Bytes"];
     */
    bytes: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class StringValues$Type extends MessageType<StringValues> {
    constructor() {
        super("wrappers.StringValues", [
            { no: 1, name: "Values", kind: "scalar", jsonName: "Values", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringValues>): StringValues {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.values = [];
        if (value !== undefined)
            reflectionMergePartial<StringValues>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringValues): StringValues {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string Values = 1 [json_name = "Values"];*/ 1:
                    message.values.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string Values = 1 [json_name = "Values"]; */
        for (let i = 0; i < message.values.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.values[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wrappers.StringValues
 */
export const StringValues = new StringValues$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LabelValues$Type extends MessageType<LabelValues> {
    constructor() {
        super("wrappers.LabelValues", [
            { no: 1, name: "Values", kind: "map", jsonName: "Values", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => StringValues }, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "labels" } }
        ]);
    }
    create(value?: PartialMessage<LabelValues>): LabelValues {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.values = {};
        if (value !== undefined)
            reflectionMergePartial<LabelValues>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LabelValues): LabelValues {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, wrappers.StringValues> Values = 1 [json_name = "Values"];*/ 1:
                    this.binaryReadMap1(message.values, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: LabelValues["values"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof LabelValues["values"] | undefined, val: LabelValues["values"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = StringValues.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field wrappers.LabelValues.Values");
            }
        }
        map[key ?? ""] = val ?? StringValues.create();
    }
    internalBinaryWrite(message: LabelValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, wrappers.StringValues> Values = 1 [json_name = "Values"]; */
        for (let k of globalThis.Object.keys(message.values)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            StringValues.internalBinaryWrite(message.values[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wrappers.LabelValues
 */
export const LabelValues = new LabelValues$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomType$Type extends MessageType<CustomType> {
    constructor() {
        super("wrappers.CustomType", [
            { no: 1, name: "Bytes", kind: "scalar", jsonName: "Bytes", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "json" } }
        ]);
    }
    create(value?: PartialMessage<CustomType>): CustomType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bytes = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<CustomType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomType): CustomType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes Bytes = 1 [json_name = "Bytes"];*/ 1:
                    message.bytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes Bytes = 1 [json_name = "Bytes"]; */
        if (message.bytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wrappers.CustomType
 */
export const CustomType = new CustomType$Type();
