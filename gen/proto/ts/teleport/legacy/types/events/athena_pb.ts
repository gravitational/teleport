/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/legacy/types/events/athena.proto" (package "events", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * AthenaS3EventPayload is used as payload for sending large events to SQS.
 *
 * @generated from protobuf message events.AthenaS3EventPayload
 */
export interface AthenaS3EventPayload {
    /**
     * Path on S3.
     *
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * VersionID is versionID of file on s3, if versioning is enabled.
     *
     * @generated from protobuf field: string version_id = 2;
     */
    versionId: string;
    /**
     * Custom KMS key for server-side encryption.
     *
     * @generated from protobuf field: string ckms = 3;
     */
    ckms: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AthenaS3EventPayload$Type extends MessageType<AthenaS3EventPayload> {
    constructor() {
        super("events.AthenaS3EventPayload", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ckms", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AthenaS3EventPayload>): AthenaS3EventPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        message.versionId = "";
        message.ckms = "";
        if (value !== undefined)
            reflectionMergePartial<AthenaS3EventPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AthenaS3EventPayload): AthenaS3EventPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* string version_id */ 2:
                    message.versionId = reader.string();
                    break;
                case /* string ckms */ 3:
                    message.ckms = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AthenaS3EventPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* string version_id = 2; */
        if (message.versionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.versionId);
        /* string ckms = 3; */
        if (message.ckms !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ckms);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message events.AthenaS3EventPayload
 */
export const AthenaS3EventPayload = new AthenaS3EventPayload$Type();
