/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/userpreferences/v1/cluster_preferences.proto" (package "teleport.userpreferences.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * PinnedResourcesUserPreferences is a collection of resource IDs that will be
 * displayed in the user's pinned resources tab in the Web UI.
 *
 * @generated from protobuf message teleport.userpreferences.v1.PinnedResourcesUserPreferences
 */
export interface PinnedResourcesUserPreferences {
    /**
     * resource_ids is a list of unified resource name sort keys.
     *
     * @generated from protobuf field: repeated string resource_ids = 1;
     */
    resourceIds: string[];
}
/**
 * ClusterUserPreferences are user preferences saved per cluster.
 *
 * @generated from protobuf message teleport.userpreferences.v1.ClusterUserPreferences
 */
export interface ClusterUserPreferences {
    /**
     * pinned_resources is a list of pinned resources.
     *
     * @generated from protobuf field: teleport.userpreferences.v1.PinnedResourcesUserPreferences pinned_resources = 1;
     */
    pinnedResources?: PinnedResourcesUserPreferences;
}
// @generated message type with reflection information, may provide speed optimized methods
class PinnedResourcesUserPreferences$Type extends MessageType<PinnedResourcesUserPreferences> {
    constructor() {
        super("teleport.userpreferences.v1.PinnedResourcesUserPreferences", [
            { no: 1, name: "resource_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PinnedResourcesUserPreferences>): PinnedResourcesUserPreferences {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceIds = [];
        if (value !== undefined)
            reflectionMergePartial<PinnedResourcesUserPreferences>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PinnedResourcesUserPreferences): PinnedResourcesUserPreferences {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string resource_ids */ 1:
                    message.resourceIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PinnedResourcesUserPreferences, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string resource_ids = 1; */
        for (let i = 0; i < message.resourceIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.resourceIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.userpreferences.v1.PinnedResourcesUserPreferences
 */
export const PinnedResourcesUserPreferences = new PinnedResourcesUserPreferences$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClusterUserPreferences$Type extends MessageType<ClusterUserPreferences> {
    constructor() {
        super("teleport.userpreferences.v1.ClusterUserPreferences", [
            { no: 1, name: "pinned_resources", kind: "message", T: () => PinnedResourcesUserPreferences }
        ]);
    }
    create(value?: PartialMessage<ClusterUserPreferences>): ClusterUserPreferences {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ClusterUserPreferences>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClusterUserPreferences): ClusterUserPreferences {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* teleport.userpreferences.v1.PinnedResourcesUserPreferences pinned_resources */ 1:
                    message.pinnedResources = PinnedResourcesUserPreferences.internalBinaryRead(reader, reader.uint32(), options, message.pinnedResources);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClusterUserPreferences, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* teleport.userpreferences.v1.PinnedResourcesUserPreferences pinned_resources = 1; */
        if (message.pinnedResources)
            PinnedResourcesUserPreferences.internalBinaryWrite(message.pinnedResources, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.userpreferences.v1.ClusterUserPreferences
 */
export const ClusterUserPreferences = new ClusterUserPreferences$Type();
