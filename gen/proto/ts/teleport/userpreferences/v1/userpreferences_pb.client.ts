/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/userpreferences/v1/userpreferences.proto" (package "teleport.userpreferences.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserPreferencesService } from "./userpreferences_pb";
import type { Empty } from "../../../google/protobuf/empty_pb";
import type { UpsertUserPreferencesRequest } from "./userpreferences_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetUserPreferencesResponse } from "./userpreferences_pb";
import type { GetUserPreferencesRequest } from "./userpreferences_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * UserPreferencesService is a service that stores user settings.
 *
 * @generated from protobuf service teleport.userpreferences.v1.UserPreferencesService
 */
export interface IUserPreferencesServiceClient {
    /**
     * GetUserPreferences returns the user preferences for a given user.
     *
     * @generated from protobuf rpc: GetUserPreferences(teleport.userpreferences.v1.GetUserPreferencesRequest) returns (teleport.userpreferences.v1.GetUserPreferencesResponse);
     */
    getUserPreferences(input: GetUserPreferencesRequest, options?: RpcOptions): UnaryCall<GetUserPreferencesRequest, GetUserPreferencesResponse>;
    /**
     * UpsertUserPreferences creates or updates user preferences for a given username.
     *
     * @generated from protobuf rpc: UpsertUserPreferences(teleport.userpreferences.v1.UpsertUserPreferencesRequest) returns (google.protobuf.Empty);
     */
    upsertUserPreferences(input: UpsertUserPreferencesRequest, options?: RpcOptions): UnaryCall<UpsertUserPreferencesRequest, Empty>;
}
/**
 * UserPreferencesService is a service that stores user settings.
 *
 * @generated from protobuf service teleport.userpreferences.v1.UserPreferencesService
 */
export class UserPreferencesServiceClient implements IUserPreferencesServiceClient, ServiceInfo {
    typeName = UserPreferencesService.typeName;
    methods = UserPreferencesService.methods;
    options = UserPreferencesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetUserPreferences returns the user preferences for a given user.
     *
     * @generated from protobuf rpc: GetUserPreferences(teleport.userpreferences.v1.GetUserPreferencesRequest) returns (teleport.userpreferences.v1.GetUserPreferencesResponse);
     */
    getUserPreferences(input: GetUserPreferencesRequest, options?: RpcOptions): UnaryCall<GetUserPreferencesRequest, GetUserPreferencesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserPreferencesRequest, GetUserPreferencesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpsertUserPreferences creates or updates user preferences for a given username.
     *
     * @generated from protobuf rpc: UpsertUserPreferences(teleport.userpreferences.v1.UpsertUserPreferencesRequest) returns (google.protobuf.Empty);
     */
    upsertUserPreferences(input: UpsertUserPreferencesRequest, options?: RpcOptions): UnaryCall<UpsertUserPreferencesRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertUserPreferencesRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
