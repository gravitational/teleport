/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/devicetrust/v1/device_collected_data.proto" (package "teleport.devicetrust.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TPMPlatformAttestation } from "./tpm_pb";
import { OSType } from "./os_type_pb";
import { Timestamp } from "../../../google/protobuf/timestamp_pb";
/**
 * DeviceCollectedData contains information gathered from the device during
 * various ceremonies.
 * Gathered information must match, within reason, the original registration
 * data and previous instances of collected data.
 *
 * @generated from protobuf message teleport.devicetrust.v1.DeviceCollectedData
 */
export interface DeviceCollectedData {
    /**
     * Time of data collection, set by the client.
     * Required.
     *
     * @generated from protobuf field: google.protobuf.Timestamp collect_time = 1;
     */
    collectTime?: Timestamp;
    /**
     * Time of data collection, as received by the server.
     * System managed.
     *
     * @generated from protobuf field: google.protobuf.Timestamp record_time = 2;
     */
    recordTime?: Timestamp;
    /**
     * Device operating system.
     * Required.
     *
     * @generated from protobuf field: teleport.devicetrust.v1.OSType os_type = 3;
     */
    osType: OSType;
    /**
     * Device serial number used to match the device with the inventory.
     * This field is one of the three following
     * values in this precedence:
     * - reported_asset_tag
     * - system_serial_number
     * - base_board_serial_number
     * Required.
     *
     * @generated from protobuf field: string serial_number = 4;
     */
    serialNumber: string;
    /**
     * Non-descriptive model identifier.
     * Example: "MacBookPro9,2".
     *
     * @generated from protobuf field: string model_identifier = 5;
     */
    modelIdentifier: string;
    /**
     * OS version number, without the leading 'v'.
     * Example: "13.2.1".
     *
     * @generated from protobuf field: string os_version = 6;
     */
    osVersion: string;
    /**
     * OS build identifier. Augments the os_version.
     * May match either the DeviceProfile os_build or os_build_supplemental.
     * Example: "22D68" or "22F770820d".
     *
     * @generated from protobuf field: string os_build = 7;
     */
    osBuild: string;
    /**
     * OS username (distinct from the Teleport user).
     *
     * @generated from protobuf field: string os_username = 8;
     */
    osUsername: string;
    /**
     * Jamf binary version, without the leading 'v'.
     * Example: "9.27" or "10.44.1-t1677509507".
     *
     * @generated from protobuf field: string jamf_binary_version = 9;
     */
    jamfBinaryVersion: string;
    /**
     * Unmodified output of `/usr/bin/profiles status -type enrollment`.
     * Used to verify the presence of an enrollment profile.
     *
     * @generated from protobuf field: string macos_enrollment_profiles = 10;
     */
    macosEnrollmentProfiles: string;
    /**
     * The asset tag of the device as reported by the BIOS DMI Type 3. Tools
     * used by customers to manage their fleet may set this value.
     *
     * @generated from protobuf field: string reported_asset_tag = 11;
     */
    reportedAssetTag: string;
    /**
     * The serial number of the "system" as reported by the BIOS DMI Type 1.
     * This field can be empty if no value has been configured.
     *
     * @generated from protobuf field: string system_serial_number = 12;
     */
    systemSerialNumber: string;
    /**
     * The serial number of the "base board" as reported by BIOS DMI Type 2.
     * This field can be empty if no value has been configured.
     *
     * @generated from protobuf field: string base_board_serial_number = 13;
     */
    baseBoardSerialNumber: string;
    /**
     * If during the collection of this device data, the device performed a TPM
     * platform attestation (e.g during enrollment or authentication), then this
     * field holds the record of this attestation. This allows the state of the
     * device to be compared to historical state, and allows for the platform
     * attestations to be revalidated at a later date.
     *
     * This field is not explicitly sent up by the client, and any DCD sent by a
     * client including this field should be rejected. The server should inject
     * this field once verifying that the submitted platform attestation during
     * the enrollment or authentication.
     *
     * System managed.
     *
     * @generated from protobuf field: teleport.devicetrust.v1.TPMPlatformAttestation tpm_platform_attestation = 14;
     */
    tpmPlatformAttestation?: TPMPlatformAttestation;
    /**
     * OS identifier.
     * Mainly used to differentiate Linux distros, as there is be no variation
     * for systems like macOS or Windows.
     * Example: "ubuntu", "centos", "fedora", "rhel".
     *
     * @generated from protobuf field: string os_id = 15;
     */
    osId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCollectedData$Type extends MessageType<DeviceCollectedData> {
    constructor() {
        super("teleport.devicetrust.v1.DeviceCollectedData", [
            { no: 1, name: "collect_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "record_time", kind: "message", T: () => Timestamp },
            { no: 3, name: "os_type", kind: "enum", T: () => ["teleport.devicetrust.v1.OSType", OSType] },
            { no: 4, name: "serial_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "model_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "os_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "os_build", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "os_username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "jamf_binary_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "macos_enrollment_profiles", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "reported_asset_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "system_serial_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "base_board_serial_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "tpm_platform_attestation", kind: "message", T: () => TPMPlatformAttestation },
            { no: 15, name: "os_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceCollectedData>): DeviceCollectedData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.osType = 0;
        message.serialNumber = "";
        message.modelIdentifier = "";
        message.osVersion = "";
        message.osBuild = "";
        message.osUsername = "";
        message.jamfBinaryVersion = "";
        message.macosEnrollmentProfiles = "";
        message.reportedAssetTag = "";
        message.systemSerialNumber = "";
        message.baseBoardSerialNumber = "";
        message.osId = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceCollectedData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCollectedData): DeviceCollectedData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp collect_time */ 1:
                    message.collectTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.collectTime);
                    break;
                case /* google.protobuf.Timestamp record_time */ 2:
                    message.recordTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.recordTime);
                    break;
                case /* teleport.devicetrust.v1.OSType os_type */ 3:
                    message.osType = reader.int32();
                    break;
                case /* string serial_number */ 4:
                    message.serialNumber = reader.string();
                    break;
                case /* string model_identifier */ 5:
                    message.modelIdentifier = reader.string();
                    break;
                case /* string os_version */ 6:
                    message.osVersion = reader.string();
                    break;
                case /* string os_build */ 7:
                    message.osBuild = reader.string();
                    break;
                case /* string os_username */ 8:
                    message.osUsername = reader.string();
                    break;
                case /* string jamf_binary_version */ 9:
                    message.jamfBinaryVersion = reader.string();
                    break;
                case /* string macos_enrollment_profiles */ 10:
                    message.macosEnrollmentProfiles = reader.string();
                    break;
                case /* string reported_asset_tag */ 11:
                    message.reportedAssetTag = reader.string();
                    break;
                case /* string system_serial_number */ 12:
                    message.systemSerialNumber = reader.string();
                    break;
                case /* string base_board_serial_number */ 13:
                    message.baseBoardSerialNumber = reader.string();
                    break;
                case /* teleport.devicetrust.v1.TPMPlatformAttestation tpm_platform_attestation */ 14:
                    message.tpmPlatformAttestation = TPMPlatformAttestation.internalBinaryRead(reader, reader.uint32(), options, message.tpmPlatformAttestation);
                    break;
                case /* string os_id */ 15:
                    message.osId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCollectedData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp collect_time = 1; */
        if (message.collectTime)
            Timestamp.internalBinaryWrite(message.collectTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp record_time = 2; */
        if (message.recordTime)
            Timestamp.internalBinaryWrite(message.recordTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* teleport.devicetrust.v1.OSType os_type = 3; */
        if (message.osType !== 0)
            writer.tag(3, WireType.Varint).int32(message.osType);
        /* string serial_number = 4; */
        if (message.serialNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.serialNumber);
        /* string model_identifier = 5; */
        if (message.modelIdentifier !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.modelIdentifier);
        /* string os_version = 6; */
        if (message.osVersion !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.osVersion);
        /* string os_build = 7; */
        if (message.osBuild !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.osBuild);
        /* string os_username = 8; */
        if (message.osUsername !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.osUsername);
        /* string jamf_binary_version = 9; */
        if (message.jamfBinaryVersion !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.jamfBinaryVersion);
        /* string macos_enrollment_profiles = 10; */
        if (message.macosEnrollmentProfiles !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.macosEnrollmentProfiles);
        /* string reported_asset_tag = 11; */
        if (message.reportedAssetTag !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.reportedAssetTag);
        /* string system_serial_number = 12; */
        if (message.systemSerialNumber !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.systemSerialNumber);
        /* string base_board_serial_number = 13; */
        if (message.baseBoardSerialNumber !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.baseBoardSerialNumber);
        /* teleport.devicetrust.v1.TPMPlatformAttestation tpm_platform_attestation = 14; */
        if (message.tpmPlatformAttestation)
            TPMPlatformAttestation.internalBinaryWrite(message.tpmPlatformAttestation, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* string os_id = 15; */
        if (message.osId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.osId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.devicetrust.v1.DeviceCollectedData
 */
export const DeviceCollectedData = new DeviceCollectedData$Type();
