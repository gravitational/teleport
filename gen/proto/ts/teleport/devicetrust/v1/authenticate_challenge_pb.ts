/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/devicetrust/v1/authenticate_challenge.proto" (package "teleport.devicetrust.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TPMPlatformParameters } from "./tpm_pb";
/**
 * AuthenticateDeviceChallenge carries the authentication challenge.
 *
 * @generated from protobuf message teleport.devicetrust.v1.AuthenticateDeviceChallenge
 */
export interface AuthenticateDeviceChallenge {
    /**
     * Randomly-generated, opaque challenge to be signed using the device key.
     *
     * @generated from protobuf field: bytes challenge = 1;
     */
    challenge: Uint8Array;
}
/**
 * AuthenticateDeviceChallengeResponse carries the authentication challenge
 * response.
 *
 * @generated from protobuf message teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
 */
export interface AuthenticateDeviceChallengeResponse {
    /**
     * Signature over the challenge, using the device key.
     *
     * @generated from protobuf field: bytes signature = 1;
     */
    signature: Uint8Array;
}
/**
 * TPMAuthenticateDeviceChallenge carries the authentication challenge
 * specific to TPMs.
 *
 * @generated from protobuf message teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
 */
export interface TPMAuthenticateDeviceChallenge {
    /**
     * Randomly-generated nonce to be used during platform attestation by the
     * TPM.
     *
     * @generated from protobuf field: bytes attestation_nonce = 1;
     */
    attestationNonce: Uint8Array;
}
/**
 * TPMAuthenticateDeviceChallengeResponse carries the authentication challenge
 * response specific to TPMs.
 *
 * @generated from protobuf message teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
 */
export interface TPMAuthenticateDeviceChallengeResponse {
    /**
     * The result of the client's platform attestation with the nonce provided
     * in `TPMAuthenticateDeviceChallenge`.
     *
     * @generated from protobuf field: teleport.devicetrust.v1.TPMPlatformParameters platform_parameters = 1;
     */
    platformParameters?: TPMPlatformParameters;
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateDeviceChallenge$Type extends MessageType<AuthenticateDeviceChallenge> {
    constructor() {
        super("teleport.devicetrust.v1.AuthenticateDeviceChallenge", [
            { no: 1, name: "challenge", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateDeviceChallenge>): AuthenticateDeviceChallenge {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.challenge = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AuthenticateDeviceChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateDeviceChallenge): AuthenticateDeviceChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes challenge */ 1:
                    message.challenge = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateDeviceChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes challenge = 1; */
        if (message.challenge.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.challenge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.devicetrust.v1.AuthenticateDeviceChallenge
 */
export const AuthenticateDeviceChallenge = new AuthenticateDeviceChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateDeviceChallengeResponse$Type extends MessageType<AuthenticateDeviceChallengeResponse> {
    constructor() {
        super("teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse", [
            { no: 1, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateDeviceChallengeResponse>): AuthenticateDeviceChallengeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signature = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AuthenticateDeviceChallengeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateDeviceChallengeResponse): AuthenticateDeviceChallengeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes signature */ 1:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateDeviceChallengeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes signature = 1; */
        if (message.signature.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
 */
export const AuthenticateDeviceChallengeResponse = new AuthenticateDeviceChallengeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TPMAuthenticateDeviceChallenge$Type extends MessageType<TPMAuthenticateDeviceChallenge> {
    constructor() {
        super("teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge", [
            { no: 1, name: "attestation_nonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TPMAuthenticateDeviceChallenge>): TPMAuthenticateDeviceChallenge {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attestationNonce = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TPMAuthenticateDeviceChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TPMAuthenticateDeviceChallenge): TPMAuthenticateDeviceChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes attestation_nonce */ 1:
                    message.attestationNonce = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TPMAuthenticateDeviceChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes attestation_nonce = 1; */
        if (message.attestationNonce.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.attestationNonce);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
 */
export const TPMAuthenticateDeviceChallenge = new TPMAuthenticateDeviceChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TPMAuthenticateDeviceChallengeResponse$Type extends MessageType<TPMAuthenticateDeviceChallengeResponse> {
    constructor() {
        super("teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse", [
            { no: 1, name: "platform_parameters", kind: "message", T: () => TPMPlatformParameters }
        ]);
    }
    create(value?: PartialMessage<TPMAuthenticateDeviceChallengeResponse>): TPMAuthenticateDeviceChallengeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TPMAuthenticateDeviceChallengeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TPMAuthenticateDeviceChallengeResponse): TPMAuthenticateDeviceChallengeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* teleport.devicetrust.v1.TPMPlatformParameters platform_parameters */ 1:
                    message.platformParameters = TPMPlatformParameters.internalBinaryRead(reader, reader.uint32(), options, message.platformParameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TPMAuthenticateDeviceChallengeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* teleport.devicetrust.v1.TPMPlatformParameters platform_parameters = 1; */
        if (message.platformParameters)
            TPMPlatformParameters.internalBinaryWrite(message.platformParameters, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
 */
export const TPMAuthenticateDeviceChallengeResponse = new TPMAuthenticateDeviceChallengeResponse$Type();
