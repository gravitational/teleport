/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,eslint_disable,generate_dependencies,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/web/teleterm/ptyhost/v1/pty_host_service.proto" (package "teleport.web.teleterm.ptyhost.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "../../../../../google/protobuf/struct_pb";
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyId
 */
export interface PtyId {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyCreate
 */
export interface PtyCreate {
    /**
     * @generated from protobuf field: string path = 3;
     */
    path: string;
    /**
     * @generated from protobuf field: repeated string args = 4;
     */
    args: string[];
    /**
     * @generated from protobuf field: string cwd = 5;
     */
    cwd: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct env = 7;
     */
    env?: Struct;
    /**
     * @generated from protobuf field: string init_message = 8;
     */
    initMessage: string;
    /**
     * @generated from protobuf field: bool use_conpty = 9;
     */
    useConpty: boolean;
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyClientEvent
 */
export interface PtyClientEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "start";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventStart start = 2;
         */
        start: PtyEventStart;
    } | {
        oneofKind: "resize";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventResize resize = 3;
         */
        resize: PtyEventResize;
    } | {
        oneofKind: "data";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventData data = 4;
         */
        data: PtyEventData;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyServerEvent
 */
export interface PtyServerEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "resize";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventResize resize = 1;
         */
        resize: PtyEventResize;
    } | {
        oneofKind: "data";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventData data = 2;
         */
        data: PtyEventData;
    } | {
        oneofKind: "open";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventOpen open = 3;
         */
        open: PtyEventOpen;
    } | {
        oneofKind: "exit";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventExit exit = 4;
         */
        exit: PtyEventExit;
    } | {
        oneofKind: "startError";
        /**
         * @generated from protobuf field: teleport.web.teleterm.ptyhost.v1.PtyEventStartError start_error = 5;
         */
        startError: PtyEventStartError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventStart
 */
export interface PtyEventStart {
    /**
     * @generated from protobuf field: uint32 columns = 2;
     */
    columns: number;
    /**
     * @generated from protobuf field: uint32 rows = 3;
     */
    rows: number;
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventData
 */
export interface PtyEventData {
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventResize
 */
export interface PtyEventResize {
    /**
     * @generated from protobuf field: uint32 columns = 2;
     */
    columns: number;
    /**
     * @generated from protobuf field: uint32 rows = 3;
     */
    rows: number;
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventOpen
 */
export interface PtyEventOpen {
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventExit
 */
export interface PtyEventExit {
    /**
     * @generated from protobuf field: uint32 exit_code = 1;
     */
    exitCode: number;
    /**
     * @generated from protobuf field: optional uint32 signal = 2;
     */
    signal?: number;
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventStartError
 */
export interface PtyEventStartError {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message teleport.web.teleterm.ptyhost.v1.PtyCwd
 */
export interface PtyCwd {
    /**
     * @generated from protobuf field: string cwd = 1;
     */
    cwd: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PtyId$Type extends MessageType<PtyId> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyId", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PtyId>): PtyId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<PtyId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyId): PtyId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyId
 */
export const PtyId = new PtyId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyCreate$Type extends MessageType<PtyCreate> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyCreate", [
            { no: 3, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "args", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "cwd", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "env", kind: "message", T: () => Struct },
            { no: 8, name: "init_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "use_conpty", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PtyCreate>): PtyCreate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        message.args = [];
        message.cwd = "";
        message.initMessage = "";
        message.useConpty = false;
        if (value !== undefined)
            reflectionMergePartial<PtyCreate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyCreate): PtyCreate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 3:
                    message.path = reader.string();
                    break;
                case /* repeated string args */ 4:
                    message.args.push(reader.string());
                    break;
                case /* string cwd */ 5:
                    message.cwd = reader.string();
                    break;
                case /* google.protobuf.Struct env */ 7:
                    message.env = Struct.internalBinaryRead(reader, reader.uint32(), options, message.env);
                    break;
                case /* string init_message */ 8:
                    message.initMessage = reader.string();
                    break;
                case /* bool use_conpty */ 9:
                    message.useConpty = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyCreate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 3; */
        if (message.path !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.path);
        /* repeated string args = 4; */
        for (let i = 0; i < message.args.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.args[i]);
        /* string cwd = 5; */
        if (message.cwd !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cwd);
        /* google.protobuf.Struct env = 7; */
        if (message.env)
            Struct.internalBinaryWrite(message.env, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string init_message = 8; */
        if (message.initMessage !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.initMessage);
        /* bool use_conpty = 9; */
        if (message.useConpty !== false)
            writer.tag(9, WireType.Varint).bool(message.useConpty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyCreate
 */
export const PtyCreate = new PtyCreate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyClientEvent$Type extends MessageType<PtyClientEvent> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyClientEvent", [
            { no: 2, name: "start", kind: "message", oneof: "event", T: () => PtyEventStart },
            { no: 3, name: "resize", kind: "message", oneof: "event", T: () => PtyEventResize },
            { no: 4, name: "data", kind: "message", oneof: "event", T: () => PtyEventData }
        ]);
    }
    create(value?: PartialMessage<PtyClientEvent>): PtyClientEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PtyClientEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyClientEvent): PtyClientEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventStart start */ 2:
                    message.event = {
                        oneofKind: "start",
                        start: PtyEventStart.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).start)
                    };
                    break;
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventResize resize */ 3:
                    message.event = {
                        oneofKind: "resize",
                        resize: PtyEventResize.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).resize)
                    };
                    break;
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventData data */ 4:
                    message.event = {
                        oneofKind: "data",
                        data: PtyEventData.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).data)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyClientEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* teleport.web.teleterm.ptyhost.v1.PtyEventStart start = 2; */
        if (message.event.oneofKind === "start")
            PtyEventStart.internalBinaryWrite(message.event.start, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* teleport.web.teleterm.ptyhost.v1.PtyEventResize resize = 3; */
        if (message.event.oneofKind === "resize")
            PtyEventResize.internalBinaryWrite(message.event.resize, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* teleport.web.teleterm.ptyhost.v1.PtyEventData data = 4; */
        if (message.event.oneofKind === "data")
            PtyEventData.internalBinaryWrite(message.event.data, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyClientEvent
 */
export const PtyClientEvent = new PtyClientEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyServerEvent$Type extends MessageType<PtyServerEvent> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyServerEvent", [
            { no: 1, name: "resize", kind: "message", oneof: "event", T: () => PtyEventResize },
            { no: 2, name: "data", kind: "message", oneof: "event", T: () => PtyEventData },
            { no: 3, name: "open", kind: "message", oneof: "event", T: () => PtyEventOpen },
            { no: 4, name: "exit", kind: "message", oneof: "event", T: () => PtyEventExit },
            { no: 5, name: "start_error", kind: "message", oneof: "event", T: () => PtyEventStartError }
        ]);
    }
    create(value?: PartialMessage<PtyServerEvent>): PtyServerEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PtyServerEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyServerEvent): PtyServerEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventResize resize */ 1:
                    message.event = {
                        oneofKind: "resize",
                        resize: PtyEventResize.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).resize)
                    };
                    break;
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventData data */ 2:
                    message.event = {
                        oneofKind: "data",
                        data: PtyEventData.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).data)
                    };
                    break;
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventOpen open */ 3:
                    message.event = {
                        oneofKind: "open",
                        open: PtyEventOpen.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).open)
                    };
                    break;
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventExit exit */ 4:
                    message.event = {
                        oneofKind: "exit",
                        exit: PtyEventExit.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).exit)
                    };
                    break;
                case /* teleport.web.teleterm.ptyhost.v1.PtyEventStartError start_error */ 5:
                    message.event = {
                        oneofKind: "startError",
                        startError: PtyEventStartError.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).startError)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyServerEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* teleport.web.teleterm.ptyhost.v1.PtyEventResize resize = 1; */
        if (message.event.oneofKind === "resize")
            PtyEventResize.internalBinaryWrite(message.event.resize, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* teleport.web.teleterm.ptyhost.v1.PtyEventData data = 2; */
        if (message.event.oneofKind === "data")
            PtyEventData.internalBinaryWrite(message.event.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* teleport.web.teleterm.ptyhost.v1.PtyEventOpen open = 3; */
        if (message.event.oneofKind === "open")
            PtyEventOpen.internalBinaryWrite(message.event.open, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* teleport.web.teleterm.ptyhost.v1.PtyEventExit exit = 4; */
        if (message.event.oneofKind === "exit")
            PtyEventExit.internalBinaryWrite(message.event.exit, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* teleport.web.teleterm.ptyhost.v1.PtyEventStartError start_error = 5; */
        if (message.event.oneofKind === "startError")
            PtyEventStartError.internalBinaryWrite(message.event.startError, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyServerEvent
 */
export const PtyServerEvent = new PtyServerEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyEventStart$Type extends MessageType<PtyEventStart> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyEventStart", [
            { no: 2, name: "columns", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rows", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PtyEventStart>): PtyEventStart {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.columns = 0;
        message.rows = 0;
        if (value !== undefined)
            reflectionMergePartial<PtyEventStart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyEventStart): PtyEventStart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 columns */ 2:
                    message.columns = reader.uint32();
                    break;
                case /* uint32 rows */ 3:
                    message.rows = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyEventStart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 columns = 2; */
        if (message.columns !== 0)
            writer.tag(2, WireType.Varint).uint32(message.columns);
        /* uint32 rows = 3; */
        if (message.rows !== 0)
            writer.tag(3, WireType.Varint).uint32(message.rows);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventStart
 */
export const PtyEventStart = new PtyEventStart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyEventData$Type extends MessageType<PtyEventData> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyEventData", [
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PtyEventData>): PtyEventData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<PtyEventData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyEventData): PtyEventData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyEventData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventData
 */
export const PtyEventData = new PtyEventData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyEventResize$Type extends MessageType<PtyEventResize> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyEventResize", [
            { no: 2, name: "columns", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rows", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PtyEventResize>): PtyEventResize {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.columns = 0;
        message.rows = 0;
        if (value !== undefined)
            reflectionMergePartial<PtyEventResize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyEventResize): PtyEventResize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 columns */ 2:
                    message.columns = reader.uint32();
                    break;
                case /* uint32 rows */ 3:
                    message.rows = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyEventResize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 columns = 2; */
        if (message.columns !== 0)
            writer.tag(2, WireType.Varint).uint32(message.columns);
        /* uint32 rows = 3; */
        if (message.rows !== 0)
            writer.tag(3, WireType.Varint).uint32(message.rows);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventResize
 */
export const PtyEventResize = new PtyEventResize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyEventOpen$Type extends MessageType<PtyEventOpen> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyEventOpen", []);
    }
    create(value?: PartialMessage<PtyEventOpen>): PtyEventOpen {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PtyEventOpen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyEventOpen): PtyEventOpen {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PtyEventOpen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventOpen
 */
export const PtyEventOpen = new PtyEventOpen$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyEventExit$Type extends MessageType<PtyEventExit> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyEventExit", [
            { no: 1, name: "exit_code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "signal", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PtyEventExit>): PtyEventExit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exitCode = 0;
        if (value !== undefined)
            reflectionMergePartial<PtyEventExit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyEventExit): PtyEventExit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 exit_code */ 1:
                    message.exitCode = reader.uint32();
                    break;
                case /* optional uint32 signal */ 2:
                    message.signal = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyEventExit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 exit_code = 1; */
        if (message.exitCode !== 0)
            writer.tag(1, WireType.Varint).uint32(message.exitCode);
        /* optional uint32 signal = 2; */
        if (message.signal !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.signal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventExit
 */
export const PtyEventExit = new PtyEventExit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyEventStartError$Type extends MessageType<PtyEventStartError> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyEventStartError", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PtyEventStartError>): PtyEventStartError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<PtyEventStartError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyEventStartError): PtyEventStartError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyEventStartError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyEventStartError
 */
export const PtyEventStartError = new PtyEventStartError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PtyCwd$Type extends MessageType<PtyCwd> {
    constructor() {
        super("teleport.web.teleterm.ptyhost.v1.PtyCwd", [
            { no: 1, name: "cwd", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PtyCwd>): PtyCwd {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cwd = "";
        if (value !== undefined)
            reflectionMergePartial<PtyCwd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PtyCwd): PtyCwd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cwd */ 1:
                    message.cwd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PtyCwd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cwd = 1; */
        if (message.cwd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cwd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.web.teleterm.ptyhost.v1.PtyCwd
 */
export const PtyCwd = new PtyCwd$Type();
/**
 * @generated ServiceType for protobuf service teleport.web.teleterm.ptyhost.v1.PtyHost
 */
export const PtyHost = new ServiceType("teleport.web.teleterm.ptyhost.v1.PtyHost", [
    { name: "CreatePtyProcess", options: {}, I: PtyCreate, O: PtyId },
    { name: "ExchangeEvents", serverStreaming: true, clientStreaming: true, options: {}, I: PtyClientEvent, O: PtyServerEvent },
    { name: "GetCwd", options: {}, I: PtyId, O: PtyCwd }
]);
