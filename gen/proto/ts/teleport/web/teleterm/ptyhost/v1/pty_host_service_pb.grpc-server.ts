/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,eslint_disable,generate_dependencies,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/web/teleterm/ptyhost/v1/pty_host_service.proto" (package "teleport.web.teleterm.ptyhost.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { GetCwdResponse } from "./pty_host_service_pb";
import { GetCwdRequest } from "./pty_host_service_pb";
import { ManagePtyProcessResponse } from "./pty_host_service_pb";
import { ManagePtyProcessRequest } from "./pty_host_service_pb";
import { CreatePtyProcessResponse } from "./pty_host_service_pb";
import { CreatePtyProcessRequest } from "./pty_host_service_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * PtyHost runs in the shared process of Teleport Connect and manages PTY processes.
 *
 * @generated from protobuf service teleport.web.teleterm.ptyhost.v1.PtyHostService
 */
export interface IPtyHostService extends grpc.UntypedServiceImplementation {
    /**
     * CreatePtyProcess initializes the PTY process in the shared process without starting it yet.
     *
     * @generated from protobuf rpc: CreatePtyProcess(teleport.web.teleterm.ptyhost.v1.CreatePtyProcessRequest) returns (teleport.web.teleterm.ptyhost.v1.CreatePtyProcessResponse);
     */
    createPtyProcess: grpc.handleUnaryCall<CreatePtyProcessRequest, CreatePtyProcessResponse>;
    /**
     * ManagePtyProcess is a bidirectional stream that lets the client send input and resize requests
     * to the PTY process and receive output from the PTY process.
     *
     * @generated from protobuf rpc: ManagePtyProcess(stream teleport.web.teleterm.ptyhost.v1.ManagePtyProcessRequest) returns (stream teleport.web.teleterm.ptyhost.v1.ManagePtyProcessResponse);
     */
    managePtyProcess: grpc.handleBidiStreamingCall<ManagePtyProcessRequest, ManagePtyProcessResponse>;
    /**
     * GetCwd returns the current working directory of the given PTY process.
     *
     * @generated from protobuf rpc: GetCwd(teleport.web.teleterm.ptyhost.v1.GetCwdRequest) returns (teleport.web.teleterm.ptyhost.v1.GetCwdResponse);
     */
    getCwd: grpc.handleUnaryCall<GetCwdRequest, GetCwdResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service teleport.web.teleterm.ptyhost.v1.PtyHostService.
 *
 * Usage: Implement the interface IPtyHostService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IPtyHostService = ...
 * server.addService(ptyHostServiceDefinition, service);
 * ```
 */
export const ptyHostServiceDefinition: grpc.ServiceDefinition<IPtyHostService> = {
    createPtyProcess: {
        path: "/teleport.web.teleterm.ptyhost.v1.PtyHostService/CreatePtyProcess",
        originalName: "CreatePtyProcess",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreatePtyProcessResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreatePtyProcessRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreatePtyProcessResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreatePtyProcessRequest.toBinary(value))
    },
    managePtyProcess: {
        path: "/teleport.web.teleterm.ptyhost.v1.PtyHostService/ManagePtyProcess",
        originalName: "ManagePtyProcess",
        requestStream: true,
        responseStream: true,
        responseDeserialize: bytes => ManagePtyProcessResponse.fromBinary(bytes),
        requestDeserialize: bytes => ManagePtyProcessRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ManagePtyProcessResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ManagePtyProcessRequest.toBinary(value))
    },
    getCwd: {
        path: "/teleport.web.teleterm.ptyhost.v1.PtyHostService/GetCwd",
        originalName: "GetCwd",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetCwdResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetCwdRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetCwdResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetCwdRequest.toBinary(value))
    }
};
