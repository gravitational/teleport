/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,eslint_disable,generate_dependencies,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/web/teleterm/ptyhost/v1/pty_host_service.proto" (package "teleport.web.teleterm.ptyhost.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PtyHostService } from "./pty_host_service_pb";
import type { PtyCwd } from "./pty_host_service_pb";
import type { PtyServerEvent } from "./pty_host_service_pb";
import type { PtyClientEvent } from "./pty_host_service_pb";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PtyId } from "./pty_host_service_pb";
import type { PtyCreate } from "./pty_host_service_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * PtyHost runs in the shared process of Teleport Connect and manages PTY processes.
 *
 * @generated from protobuf service teleport.web.teleterm.ptyhost.v1.PtyHostService
 */
export interface IPtyHostServiceClient {
    /**
     * CreatePtyProcess initializes the PTY process in the shared process without starting it yet.
     *
     * @generated from protobuf rpc: CreatePtyProcess(teleport.web.teleterm.ptyhost.v1.PtyCreate) returns (teleport.web.teleterm.ptyhost.v1.PtyId);
     */
    createPtyProcess(input: PtyCreate, options?: RpcOptions): UnaryCall<PtyCreate, PtyId>;
    /**
     * ExhchangeEvents is a bidirectional stream that lets the client send input and resize requests
     * to the PTY process and receive output from the PTY process.
     *
     * @generated from protobuf rpc: ExchangeEvents(stream teleport.web.teleterm.ptyhost.v1.PtyClientEvent) returns (stream teleport.web.teleterm.ptyhost.v1.PtyServerEvent);
     */
    exchangeEvents(options?: RpcOptions): DuplexStreamingCall<PtyClientEvent, PtyServerEvent>;
    /**
     * GetCwd returns the current working directory of the given PTY process.
     *
     * @generated from protobuf rpc: GetCwd(teleport.web.teleterm.ptyhost.v1.PtyId) returns (teleport.web.teleterm.ptyhost.v1.PtyCwd);
     */
    getCwd(input: PtyId, options?: RpcOptions): UnaryCall<PtyId, PtyCwd>;
}
/**
 * PtyHost runs in the shared process of Teleport Connect and manages PTY processes.
 *
 * @generated from protobuf service teleport.web.teleterm.ptyhost.v1.PtyHostService
 */
export class PtyHostServiceClient implements IPtyHostServiceClient, ServiceInfo {
    typeName = PtyHostService.typeName;
    methods = PtyHostService.methods;
    options = PtyHostService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * CreatePtyProcess initializes the PTY process in the shared process without starting it yet.
     *
     * @generated from protobuf rpc: CreatePtyProcess(teleport.web.teleterm.ptyhost.v1.PtyCreate) returns (teleport.web.teleterm.ptyhost.v1.PtyId);
     */
    createPtyProcess(input: PtyCreate, options?: RpcOptions): UnaryCall<PtyCreate, PtyId> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PtyCreate, PtyId>("unary", this._transport, method, opt, input);
    }
    /**
     * ExhchangeEvents is a bidirectional stream that lets the client send input and resize requests
     * to the PTY process and receive output from the PTY process.
     *
     * @generated from protobuf rpc: ExchangeEvents(stream teleport.web.teleterm.ptyhost.v1.PtyClientEvent) returns (stream teleport.web.teleterm.ptyhost.v1.PtyServerEvent);
     */
    exchangeEvents(options?: RpcOptions): DuplexStreamingCall<PtyClientEvent, PtyServerEvent> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PtyClientEvent, PtyServerEvent>("duplex", this._transport, method, opt);
    }
    /**
     * GetCwd returns the current working directory of the given PTY process.
     *
     * @generated from protobuf rpc: GetCwd(teleport.web.teleterm.ptyhost.v1.PtyId) returns (teleport.web.teleterm.ptyhost.v1.PtyCwd);
     */
    getCwd(input: PtyId, options?: RpcOptions): UnaryCall<PtyId, PtyCwd> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PtyId, PtyCwd>("unary", this._transport, method, opt, input);
    }
}
