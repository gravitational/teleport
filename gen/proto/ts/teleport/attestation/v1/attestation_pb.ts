/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/attestation/v1/attestation.proto" (package "teleport.attestation.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * AttestationStatement is an attestation statement for a hardware private key.
 *
 * @generated from protobuf message teleport.attestation.v1.AttestationStatement
 */
export interface AttestationStatement {
    /**
     * @generated from protobuf oneof: attestation_statement
     */
    attestationStatement: {
        oneofKind: "yubikeyAttestationStatement";
        /**
         * yubikey_attestation_statement is an attestation statement for a specific YubiKey PIV slot.
         *
         * @generated from protobuf field: teleport.attestation.v1.YubiKeyAttestationStatement yubikey_attestation_statement = 1;
         */
        yubikeyAttestationStatement: YubiKeyAttestationStatement;
    } | {
        oneofKind: undefined;
    };
}
/**
 * YubiKeyAttestationStatement is an attestation statement for a specific YubiKey PIV slot.
 *
 * @generated from protobuf message teleport.attestation.v1.YubiKeyAttestationStatement
 */
export interface YubiKeyAttestationStatement {
    /**
     * slot_cert is an attestation certificate generated from a YubiKey PIV
     * slot's public key and signed by the YubiKey's attestation certificate.
     *
     * @generated from protobuf field: bytes slot_cert = 1;
     */
    slotCert: Uint8Array;
    /**
     * attestation_cert is the YubiKey's unique attestation certificate, signed by a Yubico CA.
     *
     * @generated from protobuf field: bytes attestation_cert = 2;
     */
    attestationCert: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class AttestationStatement$Type extends MessageType<AttestationStatement> {
    constructor() {
        super("teleport.attestation.v1.AttestationStatement", [
            { no: 1, name: "yubikey_attestation_statement", kind: "message", oneof: "attestationStatement", T: () => YubiKeyAttestationStatement }
        ]);
    }
    create(value?: PartialMessage<AttestationStatement>): AttestationStatement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attestationStatement = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<AttestationStatement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttestationStatement): AttestationStatement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* teleport.attestation.v1.YubiKeyAttestationStatement yubikey_attestation_statement */ 1:
                    message.attestationStatement = {
                        oneofKind: "yubikeyAttestationStatement",
                        yubikeyAttestationStatement: YubiKeyAttestationStatement.internalBinaryRead(reader, reader.uint32(), options, (message.attestationStatement as any).yubikeyAttestationStatement)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttestationStatement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* teleport.attestation.v1.YubiKeyAttestationStatement yubikey_attestation_statement = 1; */
        if (message.attestationStatement.oneofKind === "yubikeyAttestationStatement")
            YubiKeyAttestationStatement.internalBinaryWrite(message.attestationStatement.yubikeyAttestationStatement, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.attestation.v1.AttestationStatement
 */
export const AttestationStatement = new AttestationStatement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class YubiKeyAttestationStatement$Type extends MessageType<YubiKeyAttestationStatement> {
    constructor() {
        super("teleport.attestation.v1.YubiKeyAttestationStatement", [
            { no: 1, name: "slot_cert", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "attestation_cert", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<YubiKeyAttestationStatement>): YubiKeyAttestationStatement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.slotCert = new Uint8Array(0);
        message.attestationCert = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<YubiKeyAttestationStatement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: YubiKeyAttestationStatement): YubiKeyAttestationStatement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes slot_cert */ 1:
                    message.slotCert = reader.bytes();
                    break;
                case /* bytes attestation_cert */ 2:
                    message.attestationCert = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: YubiKeyAttestationStatement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes slot_cert = 1; */
        if (message.slotCert.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.slotCert);
        /* bytes attestation_cert = 2; */
        if (message.attestationCert.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.attestationCert);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message teleport.attestation.v1.YubiKeyAttestationStatement
 */
export const YubiKeyAttestationStatement = new YubiKeyAttestationStatement$Type();
