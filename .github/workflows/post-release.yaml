---
name: Post-release

on:
  release:
    types: [released] # released does not include prereleases
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  release:
    name: Collect release information
    outputs:
      type: ${{ steps.artifacts.outputs.type }}
      version: ${{ steps.artifacts.outputs.version }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # Release event metadata doesn't include "is latest" flag so we have
      # to determine it another way.
      - name: Determine release latest flag and version
        id: artifacts
        env:
          GITHUB_TOKEN: ${{ github.token }}
          CURRENT_RELEASE_ID: ${{ github.event.release.node_id }}
        run: |
          LATEST_RELEASE_ID=$(gh release view --json id -q .id)

          if [ "$LATEST_RELEASE_ID" == "$CURRENT_RELEASE_ID" ]; then
            echo "type=latest" >> "$GITHUB_OUTPUT"
          else
            echo "type=other" >> "$GITHUB_OUTPUT"
          fi

          echo "version=$(make -s print-version)" >> "$GITHUB_OUTPUT"

  update-ami-ids:
    name: Update AMI IDs
    needs: release
    if: needs.release.outputs.type == 'latest'
    uses: gravitational/teleport/.github/workflows/update-ami-ids.yaml@master
    secrets: inherit
    with:
      version: ${{ needs.release.outputs.version }}

  update-docs-version:
    name: Update docs version
    runs-on: ubuntu-latest
    environment: post-release
    steps:
      - name: Get Release Branch
        id: get-branch
        env:
          TAG: ${{ github.event.release.tag_name }}
        run: |
          BRANCH="branch/$(echo -n $TAG | cut -d '.' -f 1)"
          MAJOR=${BRANCH#"branch/v"} # trim the 'branch/v' prefix
          VERSION=${TAG#"v"} # trim the leading v to get just the version
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "major=$MAJOR" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate GitHub token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-branch.outputs.branch }}

      - name: Make PR
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          MAJOR_VERSION: ${{ steps.get-branch.outputs.major }}
          FULL_VERSION: ${{ steps.get-branch.outputs.version }}
          TAG_NAME: ${{ github.event.release.tag_name }}
          BASE_BRANCH: ${{ steps.get-branch.outputs.branch }}
          REVIEWER: ${{ github.event.release.author.login }}
        run: |
          BRANCH_NAME="release-auto-branch-$(date +%s)"
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub"

          # update versions in docs/config.json
          # for docker images replace version number after <docker image name>:
          jq --arg major "${MAJOR_VERSION}" \
             --arg version "${FULL_VERSION}" \
             '.variables.teleport.major_version |= $major |
              .variables.teleport.version |= $version |
              .variables.teleport.plugin.version |= $version |
              .variables.teleport.latest_oss_docker_image |= sub(":.*";":")+$version |
              .variables.teleport.latest_oss_debug_docker_image |= sub(":.*";":")+$version |
              .variables.teleport.latest_ent_docker_image |= sub(":.*";":")+$version |
              .variables.teleport.latest_ent_debug_docker_image |= sub(":.*";":")+$version |
              .variables.teleport.teleport_install_script_url |=  sub("install-v.*.sh"; "install-v"+$version+".sh")' \
              docs/config.json > docs/confignew.json
          cat docs/confignew.json
          mv docs/confignew.json docs/config.json

          git add docs/config.json
          git switch -c $BRANCH_NAME
          git commit -am "[auto] docs: Update version to ${TAG_NAME}"
          git push --set-upstream origin $BRANCH_NAME
          gh pr create --fill "--base=${BASE_BRANCH}" \
             --label=automated --label=documentation --label=no-changelog \
             "--reviewer=${REVIEWER}"
           echo "Docs PR: $(gh pr view --json url --jq .url)" >> "$GITHUB_STEP_SUMMARY"
