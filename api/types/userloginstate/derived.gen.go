// Code generated by goderive DO NOT EDIT.

package userloginstate

import (
	header "github.com/gravitational/teleport/api/types/header"
	"time"
)

// deriveDeepCopyUserLoginState recursively copies the contents of src into dst.
func deriveDeepCopyUserLoginState(dst, src *UserLoginState) {
	func() {
		field := new(header.ResourceHeader)
		deriveDeepCopy(field, &src.ResourceHeader)
		dst.ResourceHeader = *field
	}()
	func() {
		field := new(Spec)
		deriveDeepCopy_(field, &src.Spec)
		dst.Spec = *field
	}()
}

// deriveDeepCopy recursively copies the contents of src into dst.
func deriveDeepCopy(dst, src *header.ResourceHeader) {
	dst.Kind = src.Kind
	dst.SubKind = src.SubKind
	dst.Version = src.Version
	func() {
		field := new(header.Metadata)
		deriveDeepCopy_1(field, &src.Metadata)
		dst.Metadata = *field
	}()
}

// deriveDeepCopy_ recursively copies the contents of src into dst.
func deriveDeepCopy_(dst, src *Spec) {
	if src.OriginalRoles == nil {
		dst.OriginalRoles = nil
	} else {
		if dst.OriginalRoles != nil {
			if len(src.OriginalRoles) > len(dst.OriginalRoles) {
				if cap(dst.OriginalRoles) >= len(src.OriginalRoles) {
					dst.OriginalRoles = (dst.OriginalRoles)[:len(src.OriginalRoles)]
				} else {
					dst.OriginalRoles = make([]string, len(src.OriginalRoles))
				}
			} else if len(src.OriginalRoles) < len(dst.OriginalRoles) {
				dst.OriginalRoles = (dst.OriginalRoles)[:len(src.OriginalRoles)]
			}
		} else {
			dst.OriginalRoles = make([]string, len(src.OriginalRoles))
		}
		copy(dst.OriginalRoles, src.OriginalRoles)
	}
	if src.OriginalTraits != nil {
		dst.OriginalTraits = make(map[string][]string, len(src.OriginalTraits))
		deriveDeepCopy_2(dst.OriginalTraits, src.OriginalTraits)
	} else {
		dst.OriginalTraits = nil
	}
	if src.Roles == nil {
		dst.Roles = nil
	} else {
		if dst.Roles != nil {
			if len(src.Roles) > len(dst.Roles) {
				if cap(dst.Roles) >= len(src.Roles) {
					dst.Roles = (dst.Roles)[:len(src.Roles)]
				} else {
					dst.Roles = make([]string, len(src.Roles))
				}
			} else if len(src.Roles) < len(dst.Roles) {
				dst.Roles = (dst.Roles)[:len(src.Roles)]
			}
		} else {
			dst.Roles = make([]string, len(src.Roles))
		}
		copy(dst.Roles, src.Roles)
	}
	if src.Traits != nil {
		dst.Traits = make(map[string][]string, len(src.Traits))
		deriveDeepCopy_2(dst.Traits, src.Traits)
	} else {
		dst.Traits = nil
	}
	dst.UserType = src.UserType
	if src.GitHubIdentity == nil {
		dst.GitHubIdentity = nil
	} else {
		dst.GitHubIdentity = new(ExternalIdentity)
		*dst.GitHubIdentity = *src.GitHubIdentity
	}
}

// deriveDeepCopy_1 recursively copies the contents of src into dst.
func deriveDeepCopy_1(dst, src *header.Metadata) {
	dst.Name = src.Name
	dst.Description = src.Description
	if src.Labels != nil {
		dst.Labels = make(map[string]string, len(src.Labels))
		deriveDeepCopy_3(dst.Labels, src.Labels)
	} else {
		dst.Labels = nil
	}
	func() {
		field := new(time.Time)
		deriveDeepCopy_4(field, &src.Expires)
		dst.Expires = *field
	}()
	dst.Revision = src.Revision
}

// deriveDeepCopy_2 recursively copies the contents of src into dst.
func deriveDeepCopy_2(dst, src map[string][]string) {
	for src_key, src_value := range src {
		if src_value == nil {
			dst[src_key] = nil
		}
		if src_value == nil {
			dst[src_key] = nil
		} else {
			if dst[src_key] != nil {
				if len(src_value) > len(dst[src_key]) {
					if cap(dst[src_key]) >= len(src_value) {
						dst[src_key] = (dst[src_key])[:len(src_value)]
					} else {
						dst[src_key] = make([]string, len(src_value))
					}
				} else if len(src_value) < len(dst[src_key]) {
					dst[src_key] = (dst[src_key])[:len(src_value)]
				}
			} else {
				dst[src_key] = make([]string, len(src_value))
			}
			copy(dst[src_key], src_value)
		}
	}
}

// deriveDeepCopy_3 recursively copies the contents of src into dst.
func deriveDeepCopy_3(dst, src map[string]string) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveDeepCopy_4 recursively copies the contents of src into dst.
func deriveDeepCopy_4(dst, src *time.Time) {
	*dst = *src
}
