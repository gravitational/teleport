#!/usr/bin/env bash
# shellcheck disable=SC1083,SC2215,SC2288 # caused by Go templating, and shellcheck won't parse if the lines are excluded individually

set -eu

on_ec2() {
  IMDS_TOKEN=$(curl -m5 -sS -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 300")
  [ -z "$IMDS_TOKEN" ] && return 1
  EC2_STATUS=$(curl -o /dev/null -w "%{http_code}" -m5 -sS -H "X-aws-ec2-metadata-token: ${IMDS_TOKEN}" "http://169.254.169.254/latest/meta-data")
  [ "$EC2_STATUS" = "200" ]
}

on_azure() {
  AZURE_STATUS=$(curl -o /dev/null -w "%{http_code}" -m5 -sS -H "Metadata: true" --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01")
  [ "$AZURE_STATUS" = "200" ]
}

on_gcp() {
  GCP_STATUS=$(curl -o /dev/null -w "%{http_code}" -m5 -sS -H "Metadata-Flavor: Google" "http://metadata.google.internal/")
  [ "$GCP_STATUS" = "200" ]
}

(
  flock -n 9 || exit 1
  if test -f /usr/local/bin/teleport; then
    exit 0
  fi

  INSTALL_SCRIPT_URL="https://{{.PublicProxyAddr}}/scripts/install.sh"
  echo "Offloading the installation part to the generic Teleport install script hosted at: $INSTALL_SCRIPT_URL"

  TEMP_INSTALLER_SCRIPT="$(mktemp)"
  curl -sSf "$INSTALL_SCRIPT_URL" -o "$TEMP_INSTALLER_SCRIPT"

  chmod +x "$TEMP_INSTALLER_SCRIPT"

  sudo "$TEMP_INSTALLER_SCRIPT" || (echo "The install script ($TEMP_INSTALLER_SCRIPT) returned a non-zero exit code" && exit 1)
  rm "$TEMP_INSTALLER_SCRIPT"

  if on_azure; then
    API_VERSION=$(curl -m5 -sS -H "Metadata: true" --noproxy "*" "http://169.254.169.254/metadata/versions" | jq -r ".apiVersions[-1]")
    INSTANCE_INFO=$(curl -m5 -sS -H "Metadata: true" --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=$API_VERSION&format=json")

    REGION="$(echo "$INSTANCE_INFO" | jq -r .compute.location)"
    RESOURCE_GROUP="$(echo "$INSTANCE_INFO" | jq -r .compute.resourceGroupName)"
    SUBSCRIPTION_ID="$(echo "$INSTANCE_INFO" | jq -r .compute.subscriptionId)"
    VM_ID="$(echo "$INSTANCE_INFO" | jq -r .compute.vmId)"

    JOIN_METHOD=azure
    LABELS="teleport.internal/vm-id=${VM_ID},teleport.internal/subscription-id=${SUBSCRIPTION_ID},teleport.internal/region=${REGION},teleport.internal/resource-group=${RESOURCE_GROUP}"
  elif on_ec2; then
    IMDS_TOKEN=$(curl -m5 -sS -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 300")
    INSTANCE_INFO=$(curl -m5 -sS -H "X-aws-ec2-metadata-token: ${IMDS_TOKEN}" "http://169.254.169.254/latest/dynamic/instance-identity/document")

    ACCOUNT_ID="$(echo "$INSTANCE_INFO" | jq -r .accountId)"
    INSTANCE_ID="$(echo "$INSTANCE_INFO" | jq -r .instanceId)"

    JOIN_METHOD=iam
    LABELS="teleport.dev/instance-id=${INSTANCE_ID},teleport.dev/account-id=${ACCOUNT_ID}"
  elif on_gcp; then
    NAME="$(curl -m5 -sS -H "Metadata-Flavor:Google" "http://metadata.google.internal/computeMetadata/v1/instance/name")"
    # GCP metadata returns fully qualified zone ("projects/<project-id>/zones/<zone>"), so we need to parse the zone name.
    FULL_ZONE="$(curl -m5 -sS -H "Metadata-Flavor:Google" "http://metadata.google.internal/computeMetadata/v1/instance/zone")"
    ZONE="$(basename $FULL_ZONE)"
    PROJECT_ID=$(curl -m5 -sS -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/project/project-id")

    JOIN_METHOD=gcp
    LABELS="teleport.internal/name=${NAME},teleport.internal/zone=${ZONE},teleport.internal/project-id=${PROJECT_ID}"
  else
    echo "Could not determine cloud provider"
    exit 1
  fi

  # generate teleport ssh config
  # token is read as a parameter from the AWS ssm script run and
  # passed as the first argument to the script
  sudo /usr/local/bin/teleport node configure \
    --proxy="{{ .PublicProxyAddr }}" \
    --join-method=${JOIN_METHOD} \
    {{- if .AzureClientID }}
    --azure-client-id="{{ .AzureClientID }}" \
    {{ end -}}
    --token="$1" \
    --output=file \
    --labels="${LABELS}"

  # enable and start teleport service
  sudo systemctl enable --now teleport

) 9>/var/lock/teleport_install.lock
