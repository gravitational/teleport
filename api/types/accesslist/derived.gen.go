// Code generated by goderive DO NOT EDIT.

package accesslist

import (
	header "github.com/gravitational/teleport/api/types/header"
	"time"
)

// deriveDeepCopy recursively copies the contents of src into dst.
func deriveDeepCopy(dst, src *AccessListMember) {
	func() {
		field := new(header.ResourceHeader)
		deriveDeepCopy_(field, &src.ResourceHeader)
		dst.ResourceHeader = *field
	}()
	func() {
		field := new(AccessListMemberSpec)
		deriveDeepCopy_1(field, &src.Spec)
		dst.Spec = *field
	}()
}

// deriveDeepCopy_ recursively copies the contents of src into dst.
func deriveDeepCopy_(dst, src *header.ResourceHeader) {
	dst.Kind = src.Kind
	dst.SubKind = src.SubKind
	dst.Version = src.Version
	func() {
		field := new(header.Metadata)
		deriveDeepCopy_2(field, &src.Metadata)
		dst.Metadata = *field
	}()
}

// deriveDeepCopy_1 recursively copies the contents of src into dst.
func deriveDeepCopy_1(dst, src *AccessListMemberSpec) {
	dst.AccessList = src.AccessList
	dst.Name = src.Name
	func() {
		field := new(time.Time)
		deriveDeepCopy_3(field, &src.Joined)
		dst.Joined = *field
	}()
	func() {
		field := new(time.Time)
		deriveDeepCopy_3(field, &src.Expires)
		dst.Expires = *field
	}()
	dst.Reason = src.Reason
	dst.AddedBy = src.AddedBy
	dst.IneligibleStatus = src.IneligibleStatus
	dst.MembershipKind = src.MembershipKind
}

// deriveDeepCopy_2 recursively copies the contents of src into dst.
func deriveDeepCopy_2(dst, src *header.Metadata) {
	dst.Name = src.Name
	dst.Description = src.Description
	if src.Labels != nil {
		dst.Labels = make(map[string]string, len(src.Labels))
		deriveDeepCopy_4(dst.Labels, src.Labels)
	} else {
		dst.Labels = nil
	}
	func() {
		field := new(time.Time)
		deriveDeepCopy_3(field, &src.Expires)
		dst.Expires = *field
	}()
	dst.Revision = src.Revision
}

// deriveDeepCopy_3 recursively copies the contents of src into dst.
func deriveDeepCopy_3(dst, src *time.Time) {
	if src.IsZero() {
		return
	}
	*dst = time.Unix(0, src.UnixNano()).In(src.Location())
}

// deriveDeepCopy_4 recursively copies the contents of src into dst.
func deriveDeepCopy_4(dst, src map[string]string) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}
