//*
// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/dynamicwindows/v1/dynamicwindows_service.proto

package dynamicwindowsv1

import (
	context "context"
	types "github.com/gravitational/teleport/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DynamicWindowsService_ListDynamicWindowsDesktops_FullMethodName  = "/teleport.dynamicwindows.v1.DynamicWindowsService/ListDynamicWindowsDesktops"
	DynamicWindowsService_GetDynamicWindowsDesktop_FullMethodName    = "/teleport.dynamicwindows.v1.DynamicWindowsService/GetDynamicWindowsDesktop"
	DynamicWindowsService_CreateDynamicWindowsDesktop_FullMethodName = "/teleport.dynamicwindows.v1.DynamicWindowsService/CreateDynamicWindowsDesktop"
	DynamicWindowsService_UpdateDynamicWindowsDesktop_FullMethodName = "/teleport.dynamicwindows.v1.DynamicWindowsService/UpdateDynamicWindowsDesktop"
	DynamicWindowsService_UpsertDynamicWindowsDesktop_FullMethodName = "/teleport.dynamicwindows.v1.DynamicWindowsService/UpsertDynamicWindowsDesktop"
	DynamicWindowsService_DeleteDynamicWindowsDesktop_FullMethodName = "/teleport.dynamicwindows.v1.DynamicWindowsService/DeleteDynamicWindowsDesktop"
)

// DynamicWindowsServiceClient is the client API for DynamicWindowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DynamicWindowsService provides methods to access dynamic Windows desktops.
type DynamicWindowsServiceClient interface {
	// GetDynamicWindowsDesktops returns all registered dynamic Windows desktops.
	ListDynamicWindowsDesktops(ctx context.Context, in *ListDynamicWindowsDesktopsRequest, opts ...grpc.CallOption) (*ListDynamicWindowsDesktopsResponse, error)
	// GetDynamicWindowsDesktop returns registered dynamic Windows desktop by name.
	GetDynamicWindowsDesktop(ctx context.Context, in *GetDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error)
	// CreateDynamicWindowsDesktop registers a new dynamic Windows desktop.
	CreateDynamicWindowsDesktop(ctx context.Context, in *CreateDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error)
	// UpdateDynamicWindowsDesktop updates an existing dynamic Windows desktop.
	UpdateDynamicWindowsDesktop(ctx context.Context, in *UpdateDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error)
	// UpsertDynamicWindowsDesktop updates an existing dynamic Windows desktop or creates new if it doesn't exist.
	UpsertDynamicWindowsDesktop(ctx context.Context, in *UpsertDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error)
	// DeleteDynamicWindowsDesktop removes the specified dynamic Windows desktop.
	DeleteDynamicWindowsDesktop(ctx context.Context, in *DeleteDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dynamicWindowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicWindowsServiceClient(cc grpc.ClientConnInterface) DynamicWindowsServiceClient {
	return &dynamicWindowsServiceClient{cc}
}

func (c *dynamicWindowsServiceClient) ListDynamicWindowsDesktops(ctx context.Context, in *ListDynamicWindowsDesktopsRequest, opts ...grpc.CallOption) (*ListDynamicWindowsDesktopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDynamicWindowsDesktopsResponse)
	err := c.cc.Invoke(ctx, DynamicWindowsService_ListDynamicWindowsDesktops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicWindowsServiceClient) GetDynamicWindowsDesktop(ctx context.Context, in *GetDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DynamicWindowsDesktopV1)
	err := c.cc.Invoke(ctx, DynamicWindowsService_GetDynamicWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicWindowsServiceClient) CreateDynamicWindowsDesktop(ctx context.Context, in *CreateDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DynamicWindowsDesktopV1)
	err := c.cc.Invoke(ctx, DynamicWindowsService_CreateDynamicWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicWindowsServiceClient) UpdateDynamicWindowsDesktop(ctx context.Context, in *UpdateDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DynamicWindowsDesktopV1)
	err := c.cc.Invoke(ctx, DynamicWindowsService_UpdateDynamicWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicWindowsServiceClient) UpsertDynamicWindowsDesktop(ctx context.Context, in *UpsertDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*types.DynamicWindowsDesktopV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DynamicWindowsDesktopV1)
	err := c.cc.Invoke(ctx, DynamicWindowsService_UpsertDynamicWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicWindowsServiceClient) DeleteDynamicWindowsDesktop(ctx context.Context, in *DeleteDynamicWindowsDesktopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DynamicWindowsService_DeleteDynamicWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicWindowsServiceServer is the server API for DynamicWindowsService service.
// All implementations must embed UnimplementedDynamicWindowsServiceServer
// for forward compatibility.
//
// DynamicWindowsService provides methods to access dynamic Windows desktops.
type DynamicWindowsServiceServer interface {
	// GetDynamicWindowsDesktops returns all registered dynamic Windows desktops.
	ListDynamicWindowsDesktops(context.Context, *ListDynamicWindowsDesktopsRequest) (*ListDynamicWindowsDesktopsResponse, error)
	// GetDynamicWindowsDesktop returns registered dynamic Windows desktop by name.
	GetDynamicWindowsDesktop(context.Context, *GetDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error)
	// CreateDynamicWindowsDesktop registers a new dynamic Windows desktop.
	CreateDynamicWindowsDesktop(context.Context, *CreateDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error)
	// UpdateDynamicWindowsDesktop updates an existing dynamic Windows desktop.
	UpdateDynamicWindowsDesktop(context.Context, *UpdateDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error)
	// UpsertDynamicWindowsDesktop updates an existing dynamic Windows desktop or creates new if it doesn't exist.
	UpsertDynamicWindowsDesktop(context.Context, *UpsertDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error)
	// DeleteDynamicWindowsDesktop removes the specified dynamic Windows desktop.
	DeleteDynamicWindowsDesktop(context.Context, *DeleteDynamicWindowsDesktopRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDynamicWindowsServiceServer()
}

// UnimplementedDynamicWindowsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamicWindowsServiceServer struct{}

func (UnimplementedDynamicWindowsServiceServer) ListDynamicWindowsDesktops(context.Context, *ListDynamicWindowsDesktopsRequest) (*ListDynamicWindowsDesktopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDynamicWindowsDesktops not implemented")
}
func (UnimplementedDynamicWindowsServiceServer) GetDynamicWindowsDesktop(context.Context, *GetDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicWindowsDesktop not implemented")
}
func (UnimplementedDynamicWindowsServiceServer) CreateDynamicWindowsDesktop(context.Context, *CreateDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDynamicWindowsDesktop not implemented")
}
func (UnimplementedDynamicWindowsServiceServer) UpdateDynamicWindowsDesktop(context.Context, *UpdateDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDynamicWindowsDesktop not implemented")
}
func (UnimplementedDynamicWindowsServiceServer) UpsertDynamicWindowsDesktop(context.Context, *UpsertDynamicWindowsDesktopRequest) (*types.DynamicWindowsDesktopV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDynamicWindowsDesktop not implemented")
}
func (UnimplementedDynamicWindowsServiceServer) DeleteDynamicWindowsDesktop(context.Context, *DeleteDynamicWindowsDesktopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDynamicWindowsDesktop not implemented")
}
func (UnimplementedDynamicWindowsServiceServer) mustEmbedUnimplementedDynamicWindowsServiceServer() {}
func (UnimplementedDynamicWindowsServiceServer) testEmbeddedByValue()                               {}

// UnsafeDynamicWindowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicWindowsServiceServer will
// result in compilation errors.
type UnsafeDynamicWindowsServiceServer interface {
	mustEmbedUnimplementedDynamicWindowsServiceServer()
}

func RegisterDynamicWindowsServiceServer(s grpc.ServiceRegistrar, srv DynamicWindowsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDynamicWindowsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DynamicWindowsService_ServiceDesc, srv)
}

func _DynamicWindowsService_ListDynamicWindowsDesktops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDynamicWindowsDesktopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicWindowsServiceServer).ListDynamicWindowsDesktops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicWindowsService_ListDynamicWindowsDesktops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicWindowsServiceServer).ListDynamicWindowsDesktops(ctx, req.(*ListDynamicWindowsDesktopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicWindowsService_GetDynamicWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicWindowsDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicWindowsServiceServer).GetDynamicWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicWindowsService_GetDynamicWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicWindowsServiceServer).GetDynamicWindowsDesktop(ctx, req.(*GetDynamicWindowsDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicWindowsService_CreateDynamicWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDynamicWindowsDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicWindowsServiceServer).CreateDynamicWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicWindowsService_CreateDynamicWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicWindowsServiceServer).CreateDynamicWindowsDesktop(ctx, req.(*CreateDynamicWindowsDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicWindowsService_UpdateDynamicWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDynamicWindowsDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicWindowsServiceServer).UpdateDynamicWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicWindowsService_UpdateDynamicWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicWindowsServiceServer).UpdateDynamicWindowsDesktop(ctx, req.(*UpdateDynamicWindowsDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicWindowsService_UpsertDynamicWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDynamicWindowsDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicWindowsServiceServer).UpsertDynamicWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicWindowsService_UpsertDynamicWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicWindowsServiceServer).UpsertDynamicWindowsDesktop(ctx, req.(*UpsertDynamicWindowsDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicWindowsService_DeleteDynamicWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDynamicWindowsDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicWindowsServiceServer).DeleteDynamicWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicWindowsService_DeleteDynamicWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicWindowsServiceServer).DeleteDynamicWindowsDesktop(ctx, req.(*DeleteDynamicWindowsDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicWindowsService_ServiceDesc is the grpc.ServiceDesc for DynamicWindowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicWindowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.dynamicwindows.v1.DynamicWindowsService",
	HandlerType: (*DynamicWindowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDynamicWindowsDesktops",
			Handler:    _DynamicWindowsService_ListDynamicWindowsDesktops_Handler,
		},
		{
			MethodName: "GetDynamicWindowsDesktop",
			Handler:    _DynamicWindowsService_GetDynamicWindowsDesktop_Handler,
		},
		{
			MethodName: "CreateDynamicWindowsDesktop",
			Handler:    _DynamicWindowsService_CreateDynamicWindowsDesktop_Handler,
		},
		{
			MethodName: "UpdateDynamicWindowsDesktop",
			Handler:    _DynamicWindowsService_UpdateDynamicWindowsDesktop_Handler,
		},
		{
			MethodName: "UpsertDynamicWindowsDesktop",
			Handler:    _DynamicWindowsService_UpsertDynamicWindowsDesktop_Handler,
		},
		{
			MethodName: "DeleteDynamicWindowsDesktop",
			Handler:    _DynamicWindowsService_DeleteDynamicWindowsDesktop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/dynamicwindows/v1/dynamicwindows_service.proto",
}
