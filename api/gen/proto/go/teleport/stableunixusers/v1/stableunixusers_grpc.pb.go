// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/stableunixusers/v1/stableunixusers.proto

package stableunixusersv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StableUNIXUsersService_ObtainUIDForUsername_FullMethodName = "/teleport.stableunixusers.v1.StableUNIXUsersService/ObtainUIDForUsername"
	StableUNIXUsersService_ListStableUNIXUsers_FullMethodName  = "/teleport.stableunixusers.v1.StableUNIXUsersService/ListStableUNIXUsers"
)

// StableUNIXUsersServiceClient is the client API for StableUNIXUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// contains the RPCs related to the stable UNIX users functionality
type StableUNIXUsersServiceClient interface {
	// returns the assigned stable UID for a given UNIX username, assigning one
	// from the configured UID range if necessary; if the feature is disabled or
	// the available UID range is full the returned error will be
	// RESOURCE_EXHAUSTED (i.e. trace.LimitExceededError), whereas an error caused
	// by high concurrent access to the storage will be (incorrectly, alas)
	// signaled by a FAILED_PRECONDITION error (i.e. trace.CompareFailedError)
	ObtainUIDForUsername(ctx context.Context, in *ObtainUIDForUsernameRequest, opts ...grpc.CallOption) (*ObtainUIDForUsernameResponse, error)
	// returns a page of username/UID pairs from the collection of stable UID assignments
	ListStableUNIXUsers(ctx context.Context, in *ListStableUNIXUsersRequest, opts ...grpc.CallOption) (*ListStableUNIXUsersResponse, error)
}

type stableUNIXUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStableUNIXUsersServiceClient(cc grpc.ClientConnInterface) StableUNIXUsersServiceClient {
	return &stableUNIXUsersServiceClient{cc}
}

func (c *stableUNIXUsersServiceClient) ObtainUIDForUsername(ctx context.Context, in *ObtainUIDForUsernameRequest, opts ...grpc.CallOption) (*ObtainUIDForUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObtainUIDForUsernameResponse)
	err := c.cc.Invoke(ctx, StableUNIXUsersService_ObtainUIDForUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stableUNIXUsersServiceClient) ListStableUNIXUsers(ctx context.Context, in *ListStableUNIXUsersRequest, opts ...grpc.CallOption) (*ListStableUNIXUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStableUNIXUsersResponse)
	err := c.cc.Invoke(ctx, StableUNIXUsersService_ListStableUNIXUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StableUNIXUsersServiceServer is the server API for StableUNIXUsersService service.
// All implementations must embed UnimplementedStableUNIXUsersServiceServer
// for forward compatibility.
//
// contains the RPCs related to the stable UNIX users functionality
type StableUNIXUsersServiceServer interface {
	// returns the assigned stable UID for a given UNIX username, assigning one
	// from the configured UID range if necessary; if the feature is disabled or
	// the available UID range is full the returned error will be
	// RESOURCE_EXHAUSTED (i.e. trace.LimitExceededError), whereas an error caused
	// by high concurrent access to the storage will be (incorrectly, alas)
	// signaled by a FAILED_PRECONDITION error (i.e. trace.CompareFailedError)
	ObtainUIDForUsername(context.Context, *ObtainUIDForUsernameRequest) (*ObtainUIDForUsernameResponse, error)
	// returns a page of username/UID pairs from the collection of stable UID assignments
	ListStableUNIXUsers(context.Context, *ListStableUNIXUsersRequest) (*ListStableUNIXUsersResponse, error)
	mustEmbedUnimplementedStableUNIXUsersServiceServer()
}

// UnimplementedStableUNIXUsersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStableUNIXUsersServiceServer struct{}

func (UnimplementedStableUNIXUsersServiceServer) ObtainUIDForUsername(context.Context, *ObtainUIDForUsernameRequest) (*ObtainUIDForUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainUIDForUsername not implemented")
}
func (UnimplementedStableUNIXUsersServiceServer) ListStableUNIXUsers(context.Context, *ListStableUNIXUsersRequest) (*ListStableUNIXUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStableUNIXUsers not implemented")
}
func (UnimplementedStableUNIXUsersServiceServer) mustEmbedUnimplementedStableUNIXUsersServiceServer() {
}
func (UnimplementedStableUNIXUsersServiceServer) testEmbeddedByValue() {}

// UnsafeStableUNIXUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StableUNIXUsersServiceServer will
// result in compilation errors.
type UnsafeStableUNIXUsersServiceServer interface {
	mustEmbedUnimplementedStableUNIXUsersServiceServer()
}

func RegisterStableUNIXUsersServiceServer(s grpc.ServiceRegistrar, srv StableUNIXUsersServiceServer) {
	// If the following call pancis, it indicates UnimplementedStableUNIXUsersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StableUNIXUsersService_ServiceDesc, srv)
}

func _StableUNIXUsersService_ObtainUIDForUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObtainUIDForUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StableUNIXUsersServiceServer).ObtainUIDForUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StableUNIXUsersService_ObtainUIDForUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StableUNIXUsersServiceServer).ObtainUIDForUsername(ctx, req.(*ObtainUIDForUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StableUNIXUsersService_ListStableUNIXUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStableUNIXUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StableUNIXUsersServiceServer).ListStableUNIXUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StableUNIXUsersService_ListStableUNIXUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StableUNIXUsersServiceServer).ListStableUNIXUsers(ctx, req.(*ListStableUNIXUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StableUNIXUsersService_ServiceDesc is the grpc.ServiceDesc for StableUNIXUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StableUNIXUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.stableunixusers.v1.StableUNIXUsersService",
	HandlerType: (*StableUNIXUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObtainUIDForUsername",
			Handler:    _StableUNIXUsersService_ObtainUIDForUsername_Handler,
		},
		{
			MethodName: "ListStableUNIXUsers",
			Handler:    _StableUNIXUsersService_ListStableUNIXUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/stableunixusers/v1/stableunixusers.proto",
}
