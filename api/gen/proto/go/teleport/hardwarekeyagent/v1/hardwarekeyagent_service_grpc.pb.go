// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/hardwarekeyagent/v1/hardwarekeyagent_service.proto

package hardwarekeyagentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HardwareKeyAgentService_Ping_FullMethodName = "/teleport.hardwarekeyagent.v1.HardwareKeyAgentService/Ping"
	HardwareKeyAgentService_Sign_FullMethodName = "/teleport.hardwarekeyagent.v1.HardwareKeyAgentService/Sign"
)

// HardwareKeyAgentServiceClient is the client API for HardwareKeyAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareKeyAgentServiceClient interface {
	// Ping the agent service to check if it is active.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Sign produces a signature with the provided options for the specified hardware private key
	//
	// This rpc implements Go's crypto.Signer interface.
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*Signature, error)
}

type hardwareKeyAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareKeyAgentServiceClient(cc grpc.ClientConnInterface) HardwareKeyAgentServiceClient {
	return &hardwareKeyAgentServiceClient{cc}
}

func (c *hardwareKeyAgentServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, HardwareKeyAgentService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareKeyAgentServiceClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := c.cc.Invoke(ctx, HardwareKeyAgentService_Sign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareKeyAgentServiceServer is the server API for HardwareKeyAgentService service.
// All implementations must embed UnimplementedHardwareKeyAgentServiceServer
// for forward compatibility
type HardwareKeyAgentServiceServer interface {
	// Ping the agent service to check if it is active.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Sign produces a signature with the provided options for the specified hardware private key
	//
	// This rpc implements Go's crypto.Signer interface.
	Sign(context.Context, *SignRequest) (*Signature, error)
	mustEmbedUnimplementedHardwareKeyAgentServiceServer()
}

// UnimplementedHardwareKeyAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHardwareKeyAgentServiceServer struct {
}

func (UnimplementedHardwareKeyAgentServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHardwareKeyAgentServiceServer) Sign(context.Context, *SignRequest) (*Signature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedHardwareKeyAgentServiceServer) mustEmbedUnimplementedHardwareKeyAgentServiceServer() {
}

// UnsafeHardwareKeyAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareKeyAgentServiceServer will
// result in compilation errors.
type UnsafeHardwareKeyAgentServiceServer interface {
	mustEmbedUnimplementedHardwareKeyAgentServiceServer()
}

func RegisterHardwareKeyAgentServiceServer(s grpc.ServiceRegistrar, srv HardwareKeyAgentServiceServer) {
	s.RegisterService(&HardwareKeyAgentService_ServiceDesc, srv)
}

func _HardwareKeyAgentService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareKeyAgentServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareKeyAgentService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareKeyAgentServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareKeyAgentService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareKeyAgentServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareKeyAgentService_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareKeyAgentServiceServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareKeyAgentService_ServiceDesc is the grpc.ServiceDesc for HardwareKeyAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareKeyAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.hardwarekeyagent.v1.HardwareKeyAgentService",
	HandlerType: (*HardwareKeyAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HardwareKeyAgentService_Ping_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _HardwareKeyAgentService_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/hardwarekeyagent/v1/hardwarekeyagent_service.proto",
}
