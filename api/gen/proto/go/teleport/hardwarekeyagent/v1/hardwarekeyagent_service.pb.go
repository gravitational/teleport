// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/hardwarekeyagent/v1/hardwarekeyagent_service.proto

package hardwarekeyagentv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PIVSlotKey is the key reference for a specific PIV slot.
type PIVSlotKey int32

const (
	// PIV slot key not specified.
	PIVSlotKey_PIV_SLOT_KEY_UNSPECIFIED PIVSlotKey = 0
	// PIV slot key 9a. This is the default slot for pin_policy=never, touch_policy=never.
	PIVSlotKey_PIV_SLOT_KEY_9A PIVSlotKey = 1
	// PIV slot key 9c. This is the default slot for pin_policy=never, touch_policy=cached.
	PIVSlotKey_PIV_SLOT_KEY_9C PIVSlotKey = 2
	// PIV slot key 9d. This is the default slot for pin_policy=once, touch_policy=cached.
	PIVSlotKey_PIV_SLOT_KEY_9D PIVSlotKey = 3
	// PIV slot key 9e. This is the default slot for pin_policy=once, touch_policy=never.
	PIVSlotKey_PIV_SLOT_KEY_9E PIVSlotKey = 4
)

// Enum value maps for PIVSlotKey.
var (
	PIVSlotKey_name = map[int32]string{
		0: "PIV_SLOT_KEY_UNSPECIFIED",
		1: "PIV_SLOT_KEY_9A",
		2: "PIV_SLOT_KEY_9C",
		3: "PIV_SLOT_KEY_9D",
		4: "PIV_SLOT_KEY_9E",
	}
	PIVSlotKey_value = map[string]int32{
		"PIV_SLOT_KEY_UNSPECIFIED": 0,
		"PIV_SLOT_KEY_9A":          1,
		"PIV_SLOT_KEY_9C":          2,
		"PIV_SLOT_KEY_9D":          3,
		"PIV_SLOT_KEY_9E":          4,
	}
)

func (x PIVSlotKey) Enum() *PIVSlotKey {
	p := new(PIVSlotKey)
	*p = x
	return p
}

func (x PIVSlotKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PIVSlotKey) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[0].Descriptor()
}

func (PIVSlotKey) Type() protoreflect.EnumType {
	return &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[0]
}

func (x PIVSlotKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PIVSlotKey.Descriptor instead.
func (PIVSlotKey) EnumDescriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{0}
}

// Hash refers to a specific hash function used during signing.
type Hash int32

const (
	Hash_HASH_UNSPECIFIED Hash = 0
	Hash_HASH_NONE        Hash = 1
	Hash_HASH_SHA256      Hash = 2
	Hash_HASH_SHA512      Hash = 3
)

// Enum value maps for Hash.
var (
	Hash_name = map[int32]string{
		0: "HASH_UNSPECIFIED",
		1: "HASH_NONE",
		2: "HASH_SHA256",
		3: "HASH_SHA512",
	}
	Hash_value = map[string]int32{
		"HASH_UNSPECIFIED": 0,
		"HASH_NONE":        1,
		"HASH_SHA256":      2,
		"HASH_SHA512":      3,
	}
)

func (x Hash) Enum() *Hash {
	p := new(Hash)
	*p = x
	return p
}

func (x Hash) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hash) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[1].Descriptor()
}

func (Hash) Type() protoreflect.EnumType {
	return &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes[1]
}

func (x Hash) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hash.Descriptor instead.
func (Hash) EnumDescriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{1}
}

// PingRequest is a request to Ping.
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{0}
}

// PingResponse is a response to Ping.
type PingResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PID is the PID of the client process running the agent.
	Pid           uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

// SignRequest is a request to perform a signature with a specific hardware private key.
type SignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Digest is a hashed message to sign.
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// Hash is the hash function used to prepare the digest.
	Hash Hash `protobuf:"varint,2,opt,name=hash,proto3,enum=teleport.hardwarekeyagent.v1.Hash" json:"hash,omitempty"`
	// SaltLength specifies the length of the salt added to the digest before a signature.
	// This salt length is precomputed by the client, following the crypto/rsa implementation.
	// Only used, and required, for PSS RSA signatures.
	SaltLength uint32 `protobuf:"varint,3,opt,name=salt_length,json=saltLength,proto3" json:"salt_length,omitempty"`
	// KeyRef references a specific hardware private key.
	KeyRef *KeyRef `protobuf:"bytes,4,opt,name=key_ref,json=keyRef,proto3" json:"key_ref,omitempty"`
	// KeyInfo contains additional, optional key info which generally will improve UX by
	// giving the agent context about the key, such as whether PIN/touch prompts are
	// expected, or what cluster login is trying to interface with the key.
	KeyInfo *KeyInfo `protobuf:"bytes,5,opt,name=key_info,json=keyInfo,proto3" json:"key_info,omitempty"`
	// Command is the client command or action requiring a signature, e.g. "tsh ssh server01".
	// The agent can include this detail in PIN/touch prompts to show the origin of the
	// signature request to the user.
	Command       string `protobuf:"bytes,6,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{2}
}

func (x *SignRequest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SignRequest) GetHash() Hash {
	if x != nil {
		return x.Hash
	}
	return Hash_HASH_UNSPECIFIED
}

func (x *SignRequest) GetSaltLength() uint32 {
	if x != nil {
		return x.SaltLength
	}
	return 0
}

func (x *SignRequest) GetKeyRef() *KeyRef {
	if x != nil {
		return x.KeyRef
	}
	return nil
}

func (x *SignRequest) GetKeyInfo() *KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

func (x *SignRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

// Signature is a private key signature.
type Signature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For an RSA key, signature should be either a PKCS #1 v1.5 or PSS signature,
	// depending on the hash and salt chosen. For an (EC)DSA key, it should be a
	// DER-serialised, ASN.1 signature structure.
	Signature     []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{3}
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// KeyRef references a specific hardware private key.
type KeyRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SerialNumber is the serial number of the hardware key.
	SerialNumber uint32 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// SlotKey is a PIV slot key reference.
	SlotKey PIVSlotKey `protobuf:"varint,2,opt,name=slot_key,json=slotKey,proto3,enum=teleport.hardwarekeyagent.v1.PIVSlotKey" json:"slot_key,omitempty"`
	// PublicKey is the public key encoded in PKIX, ASN.1 DER form. If the public key does
	// not match the private key currently in the hardware key's PIV slot, the signature
	// will fail early.
	PublicKeyDer  []byte `protobuf:"bytes,3,opt,name=public_key_der,json=publicKeyDer,proto3" json:"public_key_der,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyRef) Reset() {
	*x = KeyRef{}
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRef) ProtoMessage() {}

func (x *KeyRef) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRef.ProtoReflect.Descriptor instead.
func (*KeyRef) Descriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{4}
}

func (x *KeyRef) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *KeyRef) GetSlotKey() PIVSlotKey {
	if x != nil {
		return x.SlotKey
	}
	return PIVSlotKey_PIV_SLOT_KEY_UNSPECIFIED
}

func (x *KeyRef) GetPublicKeyDer() []byte {
	if x != nil {
		return x.PublicKeyDer
	}
	return nil
}

// KeyInfo contains additional information about a hardware private key.
type KeyInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TouchRequired is a client hint as to whether the hardware private key requires touch.
	// The agent will use this to provide the ideal UX for the touch prompt. If this client
	// hint is incorrect, touch will still be prompted.
	TouchRequired bool `protobuf:"varint,1,opt,name=touch_required,json=touchRequired,proto3" json:"touch_required,omitempty"`
	// PinRequired is a client hint as to whether the hardware private key requires PIN.
	// The agent will use this to provide the ideal UX for the PIN prompt. If this client
	// hint is incorrect, PIN will still be prompted for YubiKey versions >= 4.3.0, and
	// failing with an auth error otherwise.
	PinRequired bool `protobuf:"varint,2,opt,name=pin_required,json=pinRequired,proto3" json:"pin_required,omitempty"`
	// ProxyHost is a Teleport proxy hostname that the key is associated with.
	// May be used to add context to PIN/touch prompts.
	ProxyHost string `protobuf:"bytes,3,opt,name=proxy_host,json=proxyHost,proto3" json:"proxy_host,omitempty"`
	// Username is a Teleport username that the key is associated with.
	// May be used to add context to PIN/touch prompts.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// ClusterName is a Teleport cluster name that the key is associated with.
	// May be used to add context to PIN/touch prompts.
	ClusterName   string `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP(), []int{5}
}

func (x *KeyInfo) GetTouchRequired() bool {
	if x != nil {
		return x.TouchRequired
	}
	return false
}

func (x *KeyInfo) GetPinRequired() bool {
	if x != nil {
		return x.PinRequired
	}
	return false
}

func (x *KeyInfo) GetProxyHost() string {
	if x != nil {
		return x.ProxyHost
	}
	return ""
}

func (x *KeyInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *KeyInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

var File_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto protoreflect.FileDescriptor

const file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc = "" +
	"\n" +
	";teleport/hardwarekeyagent/v1/hardwarekeyagent_service.proto\x12\x1cteleport.hardwarekeyagent.v1\"\r\n" +
	"\vPingRequest\" \n" +
	"\fPingResponse\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\"\x99\x02\n" +
	"\vSignRequest\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\fR\x06digest\x126\n" +
	"\x04hash\x18\x02 \x01(\x0e2\".teleport.hardwarekeyagent.v1.HashR\x04hash\x12\x1f\n" +
	"\vsalt_length\x18\x03 \x01(\rR\n" +
	"saltLength\x12=\n" +
	"\akey_ref\x18\x04 \x01(\v2$.teleport.hardwarekeyagent.v1.KeyRefR\x06keyRef\x12@\n" +
	"\bkey_info\x18\x05 \x01(\v2%.teleport.hardwarekeyagent.v1.KeyInfoR\akeyInfo\x12\x18\n" +
	"\acommand\x18\x06 \x01(\tR\acommand\")\n" +
	"\tSignature\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\fR\tsignature\"\x98\x01\n" +
	"\x06KeyRef\x12#\n" +
	"\rserial_number\x18\x01 \x01(\rR\fserialNumber\x12C\n" +
	"\bslot_key\x18\x02 \x01(\x0e2(.teleport.hardwarekeyagent.v1.PIVSlotKeyR\aslotKey\x12$\n" +
	"\x0epublic_key_der\x18\x03 \x01(\fR\fpublicKeyDer\"\xb1\x01\n" +
	"\aKeyInfo\x12%\n" +
	"\x0etouch_required\x18\x01 \x01(\bR\rtouchRequired\x12!\n" +
	"\fpin_required\x18\x02 \x01(\bR\vpinRequired\x12\x1d\n" +
	"\n" +
	"proxy_host\x18\x03 \x01(\tR\tproxyHost\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12!\n" +
	"\fcluster_name\x18\x05 \x01(\tR\vclusterName*~\n" +
	"\n" +
	"PIVSlotKey\x12\x1c\n" +
	"\x18PIV_SLOT_KEY_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fPIV_SLOT_KEY_9A\x10\x01\x12\x13\n" +
	"\x0fPIV_SLOT_KEY_9C\x10\x02\x12\x13\n" +
	"\x0fPIV_SLOT_KEY_9D\x10\x03\x12\x13\n" +
	"\x0fPIV_SLOT_KEY_9E\x10\x04*M\n" +
	"\x04Hash\x12\x14\n" +
	"\x10HASH_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tHASH_NONE\x10\x01\x12\x0f\n" +
	"\vHASH_SHA256\x10\x02\x12\x0f\n" +
	"\vHASH_SHA512\x10\x032\xd8\x01\n" +
	"\x17HardwareKeyAgentService\x12_\n" +
	"\x04Ping\x12).teleport.hardwarekeyagent.v1.PingRequest\x1a*.teleport.hardwarekeyagent.v1.PingResponse\"\x00\x12\\\n" +
	"\x04Sign\x12).teleport.hardwarekeyagent.v1.SignRequest\x1a'.teleport.hardwarekeyagent.v1.Signature\"\x00BdZbgithub.com/gravitational/teleport/api/gen/proto/go/teleport/hardwarekeyagent/v1;hardwarekeyagentv1b\x06proto3"

var (
	file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescOnce sync.Once
	file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescData []byte
)

func file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescGZIP() []byte {
	file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescOnce.Do(func() {
		file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc), len(file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc)))
	})
	return file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDescData
}

var file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_goTypes = []any{
	(PIVSlotKey)(0),      // 0: teleport.hardwarekeyagent.v1.PIVSlotKey
	(Hash)(0),            // 1: teleport.hardwarekeyagent.v1.Hash
	(*PingRequest)(nil),  // 2: teleport.hardwarekeyagent.v1.PingRequest
	(*PingResponse)(nil), // 3: teleport.hardwarekeyagent.v1.PingResponse
	(*SignRequest)(nil),  // 4: teleport.hardwarekeyagent.v1.SignRequest
	(*Signature)(nil),    // 5: teleport.hardwarekeyagent.v1.Signature
	(*KeyRef)(nil),       // 6: teleport.hardwarekeyagent.v1.KeyRef
	(*KeyInfo)(nil),      // 7: teleport.hardwarekeyagent.v1.KeyInfo
}
var file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_depIdxs = []int32{
	1, // 0: teleport.hardwarekeyagent.v1.SignRequest.hash:type_name -> teleport.hardwarekeyagent.v1.Hash
	6, // 1: teleport.hardwarekeyagent.v1.SignRequest.key_ref:type_name -> teleport.hardwarekeyagent.v1.KeyRef
	7, // 2: teleport.hardwarekeyagent.v1.SignRequest.key_info:type_name -> teleport.hardwarekeyagent.v1.KeyInfo
	0, // 3: teleport.hardwarekeyagent.v1.KeyRef.slot_key:type_name -> teleport.hardwarekeyagent.v1.PIVSlotKey
	2, // 4: teleport.hardwarekeyagent.v1.HardwareKeyAgentService.Ping:input_type -> teleport.hardwarekeyagent.v1.PingRequest
	4, // 5: teleport.hardwarekeyagent.v1.HardwareKeyAgentService.Sign:input_type -> teleport.hardwarekeyagent.v1.SignRequest
	3, // 6: teleport.hardwarekeyagent.v1.HardwareKeyAgentService.Ping:output_type -> teleport.hardwarekeyagent.v1.PingResponse
	5, // 7: teleport.hardwarekeyagent.v1.HardwareKeyAgentService.Sign:output_type -> teleport.hardwarekeyagent.v1.Signature
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_init() }
func file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_init() {
	if File_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc), len(file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_goTypes,
		DependencyIndexes: file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_depIdxs,
		EnumInfos:         file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_enumTypes,
		MessageInfos:      file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_msgTypes,
	}.Build()
	File_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto = out.File
	file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_goTypes = nil
	file_teleport_hardwarekeyagent_v1_hardwarekeyagent_service_proto_depIdxs = nil
}
