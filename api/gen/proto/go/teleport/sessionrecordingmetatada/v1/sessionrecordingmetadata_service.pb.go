// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: teleport/sessionrecordingmetadata/v1/sessionrecordingmetadata_service.proto

package sessionrecordingmetatadav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateSessionRecordingMetadataRequest is create
type CreateSessionRecordingMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The desired SessionRecordingMetadata to be created.
	SessionRecordingMetadata *SessionRecordingMetadata `protobuf:"bytes,1,opt,name=session_recording_metadata,json=sessionRecordingMetadata,proto3" json:"session_recording_metadata,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateSessionRecordingMetadataRequest) Reset() {
	*x = CreateSessionRecordingMetadataRequest{}
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRecordingMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRecordingMetadataRequest) ProtoMessage() {}

func (x *CreateSessionRecordingMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRecordingMetadataRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRecordingMetadataRequest) Descriptor() ([]byte, []int) {
	return file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRecordingMetadataRequest) GetSessionRecordingMetadata() *SessionRecordingMetadata {
	if x != nil {
		return x.SessionRecordingMetadata
	}
	return nil
}

// UpdateSessionRecordingMetadataRequest is update
type UpdateSessionRecordingMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The desired SessionRecordingMetadata to be updated.
	SessionRecordingMetadata *SessionRecordingMetadata `protobuf:"bytes,1,opt,name=session_recording_metadata,json=sessionRecordingMetadata,proto3" json:"session_recording_metadata,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateSessionRecordingMetadataRequest) Reset() {
	*x = UpdateSessionRecordingMetadataRequest{}
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionRecordingMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRecordingMetadataRequest) ProtoMessage() {}

func (x *UpdateSessionRecordingMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRecordingMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRecordingMetadataRequest) Descriptor() ([]byte, []int) {
	return file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateSessionRecordingMetadataRequest) GetSessionRecordingMetadata() *SessionRecordingMetadata {
	if x != nil {
		return x.SessionRecordingMetadata
	}
	return nil
}

// DeleteSessionRecordingMetadataRequest is Update
type DeleteSessionRecordingMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The session id SessionRecordingMetadata to be deleted.
	SessionId     string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSessionRecordingMetadataRequest) Reset() {
	*x = DeleteSessionRecordingMetadataRequest{}
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSessionRecordingMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRecordingMetadataRequest) ProtoMessage() {}

func (x *DeleteSessionRecordingMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRecordingMetadataRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRecordingMetadataRequest) Descriptor() ([]byte, []int) {
	return file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteSessionRecordingMetadataRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// GetSessionRecordingMetadataRequest is get
type GetSessionRecordingMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The session id
	SessionId     string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionRecordingMetadataRequest) Reset() {
	*x = GetSessionRecordingMetadataRequest{}
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionRecordingMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRecordingMetadataRequest) ProtoMessage() {}

func (x *GetSessionRecordingMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRecordingMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRecordingMetadataRequest) Descriptor() ([]byte, []int) {
	return file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetSessionRecordingMetadataRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// ListSessionRecordingMetadataRequest is list
type ListSessionRecordingMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of items to return.
	// The server may impose a different page size at its discretion.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional list of session ids to retrieve
	SessionIds []string `protobuf:"bytes,3,rep,name=session_ids,json=sessionIds,proto3" json:"session_ids,omitempty"`
	// If we should return only SessionRecordingMetadata with summary
	WithSummary bool `protobuf:"varint,4,opt,name=with_summary,json=withSummary,proto3" json:"with_summary,omitempty"`
	// If we should return only SessionRecordingMetadata with the batch_id field set
	WithBatchId   bool `protobuf:"varint,5,opt,name=with_batch_id,json=withBatchId,proto3" json:"with_batch_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionRecordingMetadataRequest) Reset() {
	*x = ListSessionRecordingMetadataRequest{}
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionRecordingMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionRecordingMetadataRequest) ProtoMessage() {}

func (x *ListSessionRecordingMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionRecordingMetadataRequest.ProtoReflect.Descriptor instead.
func (*ListSessionRecordingMetadataRequest) Descriptor() ([]byte, []int) {
	return file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListSessionRecordingMetadataRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSessionRecordingMetadataRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSessionRecordingMetadataRequest) GetSessionIds() []string {
	if x != nil {
		return x.SessionIds
	}
	return nil
}

func (x *ListSessionRecordingMetadataRequest) GetWithSummary() bool {
	if x != nil {
		return x.WithSummary
	}
	return false
}

func (x *ListSessionRecordingMetadataRequest) GetWithBatchId() bool {
	if x != nil {
		return x.WithBatchId
	}
	return false
}

// ListSessionRecordingMetadataResponse is response from ListSessionRecordingMetadata
type ListSessionRecordingMetadataResponse struct {
	state                    protoimpl.MessageState      `protogen:"open.v1"`
	SessionRecordingMetadata []*SessionRecordingMetadata `protobuf:"bytes,1,rep,name=session_recording_metadata,json=sessionRecordingMetadata,proto3" json:"session_recording_metadata,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no more results in the list.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionRecordingMetadataResponse) Reset() {
	*x = ListSessionRecordingMetadataResponse{}
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionRecordingMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionRecordingMetadataResponse) ProtoMessage() {}

func (x *ListSessionRecordingMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionRecordingMetadataResponse.ProtoReflect.Descriptor instead.
func (*ListSessionRecordingMetadataResponse) Descriptor() ([]byte, []int) {
	return file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListSessionRecordingMetadataResponse) GetSessionRecordingMetadata() []*SessionRecordingMetadata {
	if x != nil {
		return x.SessionRecordingMetadata
	}
	return nil
}

func (x *ListSessionRecordingMetadataResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto protoreflect.FileDescriptor

var file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDesc = string([]byte{
	0x0a, 0x4b, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x43, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7c, 0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x01,
	0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x18, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77,
	0x69, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xcc,
	0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x18, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xeb, 0x06,
	0x0a, 0x1f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xad, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0xad, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0xa7, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x48, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x85, 0x01, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0xb5, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x74, 0x5a, 0x72, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x61, 0x64, 0x61, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescOnce sync.Once
	file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescData []byte
)

func file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescGZIP() []byte {
	file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescOnce.Do(func() {
		file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDesc), len(file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDesc)))
	})
	return file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDescData
}

var file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_goTypes = []any{
	(*CreateSessionRecordingMetadataRequest)(nil), // 0: teleport.sessionrecordingmetadata.v1.CreateSessionRecordingMetadataRequest
	(*UpdateSessionRecordingMetadataRequest)(nil), // 1: teleport.sessionrecordingmetadata.v1.UpdateSessionRecordingMetadataRequest
	(*DeleteSessionRecordingMetadataRequest)(nil), // 2: teleport.sessionrecordingmetadata.v1.DeleteSessionRecordingMetadataRequest
	(*GetSessionRecordingMetadataRequest)(nil),    // 3: teleport.sessionrecordingmetadata.v1.GetSessionRecordingMetadataRequest
	(*ListSessionRecordingMetadataRequest)(nil),   // 4: teleport.sessionrecordingmetadata.v1.ListSessionRecordingMetadataRequest
	(*ListSessionRecordingMetadataResponse)(nil),  // 5: teleport.sessionrecordingmetadata.v1.ListSessionRecordingMetadataResponse
	(*SessionRecordingMetadata)(nil),              // 6: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadata
	(*emptypb.Empty)(nil),                         // 7: google.protobuf.Empty
}
var file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_depIdxs = []int32{
	6, // 0: teleport.sessionrecordingmetadata.v1.CreateSessionRecordingMetadataRequest.session_recording_metadata:type_name -> teleport.sessionrecordingmetadata.v1.SessionRecordingMetadata
	6, // 1: teleport.sessionrecordingmetadata.v1.UpdateSessionRecordingMetadataRequest.session_recording_metadata:type_name -> teleport.sessionrecordingmetadata.v1.SessionRecordingMetadata
	6, // 2: teleport.sessionrecordingmetadata.v1.ListSessionRecordingMetadataResponse.session_recording_metadata:type_name -> teleport.sessionrecordingmetadata.v1.SessionRecordingMetadata
	0, // 3: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.CreateSessionRecordingMetadata:input_type -> teleport.sessionrecordingmetadata.v1.CreateSessionRecordingMetadataRequest
	1, // 4: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.UpdateSessionRecordingMetadata:input_type -> teleport.sessionrecordingmetadata.v1.UpdateSessionRecordingMetadataRequest
	3, // 5: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.GetSessionRecordingMetadata:input_type -> teleport.sessionrecordingmetadata.v1.GetSessionRecordingMetadataRequest
	2, // 6: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.DeleteSessionRecordingMetadata:input_type -> teleport.sessionrecordingmetadata.v1.DeleteSessionRecordingMetadataRequest
	4, // 7: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.ListSessionRecordingMetadata:input_type -> teleport.sessionrecordingmetadata.v1.ListSessionRecordingMetadataRequest
	6, // 8: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.CreateSessionRecordingMetadata:output_type -> teleport.sessionrecordingmetadata.v1.SessionRecordingMetadata
	6, // 9: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.UpdateSessionRecordingMetadata:output_type -> teleport.sessionrecordingmetadata.v1.SessionRecordingMetadata
	6, // 10: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.GetSessionRecordingMetadata:output_type -> teleport.sessionrecordingmetadata.v1.SessionRecordingMetadata
	7, // 11: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.DeleteSessionRecordingMetadata:output_type -> google.protobuf.Empty
	5, // 12: teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService.ListSessionRecordingMetadata:output_type -> teleport.sessionrecordingmetadata.v1.ListSessionRecordingMetadataResponse
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_init() }
func file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_init() {
	if File_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto != nil {
		return
	}
	file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDesc), len(file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_goTypes,
		DependencyIndexes: file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_depIdxs,
		MessageInfos:      file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_msgTypes,
	}.Build()
	File_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto = out.File
	file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_goTypes = nil
	file_teleport_sessionrecordingmetadata_v1_sessionrecordingmetadata_service_proto_depIdxs = nil
}
