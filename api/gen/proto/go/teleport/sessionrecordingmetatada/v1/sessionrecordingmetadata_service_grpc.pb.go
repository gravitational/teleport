// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/sessionrecordingmetadata/v1/sessionrecordingmetadata_service.proto

package sessionrecordingmetatadav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SessionRecordingMetadataService_CreateSessionRecordingMetadata_FullMethodName = "/teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService/CreateSessionRecordingMetadata"
	SessionRecordingMetadataService_UpdateSessionRecordingMetadata_FullMethodName = "/teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService/UpdateSessionRecordingMetadata"
	SessionRecordingMetadataService_GetSessionRecordingMetadata_FullMethodName    = "/teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService/GetSessionRecordingMetadata"
	SessionRecordingMetadataService_DeleteSessionRecordingMetadata_FullMethodName = "/teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService/DeleteSessionRecordingMetadata"
	SessionRecordingMetadataService_ListSessionRecordingMetadata_FullMethodName   = "/teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService/ListSessionRecordingMetadata"
)

// SessionRecordingMetadataServiceClient is the client API for SessionRecordingMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SessionRecordingMetadataService is the service that provides methods to manage SessionRecordingMetadata
type SessionRecordingMetadataServiceClient interface {
	// Creates a new SessionRecordingMetadata
	CreateSessionRecordingMetadata(ctx context.Context, in *CreateSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*SessionRecordingMetadata, error)
	// Updates existing SessionRecordingMetadata
	UpdateSessionRecordingMetadata(ctx context.Context, in *UpdateSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*SessionRecordingMetadata, error)
	// Gets single SessionRecordingMetadata
	GetSessionRecordingMetadata(ctx context.Context, in *GetSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*SessionRecordingMetadata, error)
	// Deletes existing SessionRecordingMetadata
	DeleteSessionRecordingMetadata(ctx context.Context, in *DeleteSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns list of SessionRecordingMetadata. Supports pagination and filtering
	ListSessionRecordingMetadata(ctx context.Context, in *ListSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*ListSessionRecordingMetadataResponse, error)
}

type sessionRecordingMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionRecordingMetadataServiceClient(cc grpc.ClientConnInterface) SessionRecordingMetadataServiceClient {
	return &sessionRecordingMetadataServiceClient{cc}
}

func (c *sessionRecordingMetadataServiceClient) CreateSessionRecordingMetadata(ctx context.Context, in *CreateSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*SessionRecordingMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionRecordingMetadata)
	err := c.cc.Invoke(ctx, SessionRecordingMetadataService_CreateSessionRecordingMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRecordingMetadataServiceClient) UpdateSessionRecordingMetadata(ctx context.Context, in *UpdateSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*SessionRecordingMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionRecordingMetadata)
	err := c.cc.Invoke(ctx, SessionRecordingMetadataService_UpdateSessionRecordingMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRecordingMetadataServiceClient) GetSessionRecordingMetadata(ctx context.Context, in *GetSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*SessionRecordingMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionRecordingMetadata)
	err := c.cc.Invoke(ctx, SessionRecordingMetadataService_GetSessionRecordingMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRecordingMetadataServiceClient) DeleteSessionRecordingMetadata(ctx context.Context, in *DeleteSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionRecordingMetadataService_DeleteSessionRecordingMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRecordingMetadataServiceClient) ListSessionRecordingMetadata(ctx context.Context, in *ListSessionRecordingMetadataRequest, opts ...grpc.CallOption) (*ListSessionRecordingMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionRecordingMetadataResponse)
	err := c.cc.Invoke(ctx, SessionRecordingMetadataService_ListSessionRecordingMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionRecordingMetadataServiceServer is the server API for SessionRecordingMetadataService service.
// All implementations must embed UnimplementedSessionRecordingMetadataServiceServer
// for forward compatibility.
//
// SessionRecordingMetadataService is the service that provides methods to manage SessionRecordingMetadata
type SessionRecordingMetadataServiceServer interface {
	// Creates a new SessionRecordingMetadata
	CreateSessionRecordingMetadata(context.Context, *CreateSessionRecordingMetadataRequest) (*SessionRecordingMetadata, error)
	// Updates existing SessionRecordingMetadata
	UpdateSessionRecordingMetadata(context.Context, *UpdateSessionRecordingMetadataRequest) (*SessionRecordingMetadata, error)
	// Gets single SessionRecordingMetadata
	GetSessionRecordingMetadata(context.Context, *GetSessionRecordingMetadataRequest) (*SessionRecordingMetadata, error)
	// Deletes existing SessionRecordingMetadata
	DeleteSessionRecordingMetadata(context.Context, *DeleteSessionRecordingMetadataRequest) (*emptypb.Empty, error)
	// Returns list of SessionRecordingMetadata. Supports pagination and filtering
	ListSessionRecordingMetadata(context.Context, *ListSessionRecordingMetadataRequest) (*ListSessionRecordingMetadataResponse, error)
	mustEmbedUnimplementedSessionRecordingMetadataServiceServer()
}

// UnimplementedSessionRecordingMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSessionRecordingMetadataServiceServer struct{}

func (UnimplementedSessionRecordingMetadataServiceServer) CreateSessionRecordingMetadata(context.Context, *CreateSessionRecordingMetadataRequest) (*SessionRecordingMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSessionRecordingMetadata not implemented")
}
func (UnimplementedSessionRecordingMetadataServiceServer) UpdateSessionRecordingMetadata(context.Context, *UpdateSessionRecordingMetadataRequest) (*SessionRecordingMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionRecordingMetadata not implemented")
}
func (UnimplementedSessionRecordingMetadataServiceServer) GetSessionRecordingMetadata(context.Context, *GetSessionRecordingMetadataRequest) (*SessionRecordingMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionRecordingMetadata not implemented")
}
func (UnimplementedSessionRecordingMetadataServiceServer) DeleteSessionRecordingMetadata(context.Context, *DeleteSessionRecordingMetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionRecordingMetadata not implemented")
}
func (UnimplementedSessionRecordingMetadataServiceServer) ListSessionRecordingMetadata(context.Context, *ListSessionRecordingMetadataRequest) (*ListSessionRecordingMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessionRecordingMetadata not implemented")
}
func (UnimplementedSessionRecordingMetadataServiceServer) mustEmbedUnimplementedSessionRecordingMetadataServiceServer() {
}
func (UnimplementedSessionRecordingMetadataServiceServer) testEmbeddedByValue() {}

// UnsafeSessionRecordingMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionRecordingMetadataServiceServer will
// result in compilation errors.
type UnsafeSessionRecordingMetadataServiceServer interface {
	mustEmbedUnimplementedSessionRecordingMetadataServiceServer()
}

func RegisterSessionRecordingMetadataServiceServer(s grpc.ServiceRegistrar, srv SessionRecordingMetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedSessionRecordingMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SessionRecordingMetadataService_ServiceDesc, srv)
}

func _SessionRecordingMetadataService_CreateSessionRecordingMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRecordingMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRecordingMetadataServiceServer).CreateSessionRecordingMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionRecordingMetadataService_CreateSessionRecordingMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRecordingMetadataServiceServer).CreateSessionRecordingMetadata(ctx, req.(*CreateSessionRecordingMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRecordingMetadataService_UpdateSessionRecordingMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRecordingMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRecordingMetadataServiceServer).UpdateSessionRecordingMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionRecordingMetadataService_UpdateSessionRecordingMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRecordingMetadataServiceServer).UpdateSessionRecordingMetadata(ctx, req.(*UpdateSessionRecordingMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRecordingMetadataService_GetSessionRecordingMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRecordingMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRecordingMetadataServiceServer).GetSessionRecordingMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionRecordingMetadataService_GetSessionRecordingMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRecordingMetadataServiceServer).GetSessionRecordingMetadata(ctx, req.(*GetSessionRecordingMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRecordingMetadataService_DeleteSessionRecordingMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRecordingMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRecordingMetadataServiceServer).DeleteSessionRecordingMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionRecordingMetadataService_DeleteSessionRecordingMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRecordingMetadataServiceServer).DeleteSessionRecordingMetadata(ctx, req.(*DeleteSessionRecordingMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRecordingMetadataService_ListSessionRecordingMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionRecordingMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRecordingMetadataServiceServer).ListSessionRecordingMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionRecordingMetadataService_ListSessionRecordingMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRecordingMetadataServiceServer).ListSessionRecordingMetadata(ctx, req.(*ListSessionRecordingMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionRecordingMetadataService_ServiceDesc is the grpc.ServiceDesc for SessionRecordingMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionRecordingMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.sessionrecordingmetadata.v1.SessionRecordingMetadataService",
	HandlerType: (*SessionRecordingMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSessionRecordingMetadata",
			Handler:    _SessionRecordingMetadataService_CreateSessionRecordingMetadata_Handler,
		},
		{
			MethodName: "UpdateSessionRecordingMetadata",
			Handler:    _SessionRecordingMetadataService_UpdateSessionRecordingMetadata_Handler,
		},
		{
			MethodName: "GetSessionRecordingMetadata",
			Handler:    _SessionRecordingMetadataService_GetSessionRecordingMetadata_Handler,
		},
		{
			MethodName: "DeleteSessionRecordingMetadata",
			Handler:    _SessionRecordingMetadataService_DeleteSessionRecordingMetadata_Handler,
		},
		{
			MethodName: "ListSessionRecordingMetadata",
			Handler:    _SessionRecordingMetadataService_ListSessionRecordingMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/sessionrecordingmetadata/v1/sessionrecordingmetadata_service.proto",
}
