//
// Teleport
// Copyright (C) 2024  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: teleport/notifications/v1/notifications.proto

package notificationsv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NotificationState the state of a notification for a user. This can represent either "clicked" or "dismissed".
type NotificationState int32

const (
	NotificationState_NOTIFICATION_STATE_UNSPECIFIED NotificationState = 0
	// NOTIFICATION_STATE_CLICKED marks this notification as having been clicked on by the user.
	NotificationState_NOTIFICATION_STATE_CLICKED NotificationState = 1
	// NOTIFICATION_STATE_DISMISSED marks this notification as having been dismissed by the user.
	NotificationState_NOTIFICATION_STATE_DISMISSED NotificationState = 2
)

// Enum value maps for NotificationState.
var (
	NotificationState_name = map[int32]string{
		0: "NOTIFICATION_STATE_UNSPECIFIED",
		1: "NOTIFICATION_STATE_CLICKED",
		2: "NOTIFICATION_STATE_DISMISSED",
	}
	NotificationState_value = map[string]int32{
		"NOTIFICATION_STATE_UNSPECIFIED": 0,
		"NOTIFICATION_STATE_CLICKED":     1,
		"NOTIFICATION_STATE_DISMISSED":   2,
	}
)

func (x NotificationState) Enum() *NotificationState {
	p := new(NotificationState)
	*p = x
	return p
}

func (x NotificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_notifications_v1_notifications_proto_enumTypes[0].Descriptor()
}

func (NotificationState) Type() protoreflect.EnumType {
	return &file_teleport_notifications_v1_notifications_proto_enumTypes[0]
}

func (x NotificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationState.Descriptor instead.
func (NotificationState) EnumDescriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{0}
}

// Notification represents a notification item.
type Notification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// kind is the resource kind ("notification").
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// sub_kind represents the unique kind of notification this is, eg. `access-request-approved`
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// version is the resource version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// metadata is the notification's metadata. This contains the notification's labels, and expiry. All custom notification metadata should be stored in labels.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec is the notification specification.
	Spec          *NotificationSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{0}
}

func (x *Notification) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Notification) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *Notification) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Notification) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Notification) GetSpec() *NotificationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// NotificationSpec is the notification specification.
type NotificationSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// created is when the notification was created, in UNIX time.
	Created *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// unscoped is whether the notification shouldn't be restricted to a specific audience. This is to prevent the potential future possibility that a user-specific notification contains information that the user should no longer be allowed to see. Default is true.
	Unscoped bool `protobuf:"varint,3,opt,name=unscoped,proto3" json:"unscoped,omitempty"`
	// username is the username of the target user if this is a user-specific notification. Requests for global notifications with a username will be rejected.
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationSpec) Reset() {
	*x = NotificationSpec{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSpec) ProtoMessage() {}

func (x *NotificationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSpec.ProtoReflect.Descriptor instead.
func (*NotificationSpec) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationSpec) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *NotificationSpec) GetUnscoped() bool {
	if x != nil {
		return x.Unscoped
	}
	return false
}

func (x *NotificationSpec) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// GlobalNotification represents a global notification.
type GlobalNotification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// kind is the resource kind ("global_notification").
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// sub_kind is the optional resource subkind. This is unused.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// version is the resource version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// metadata is the user last seen notification object's metadata.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec is the global notification's specification.
	Spec          *GlobalNotificationSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalNotification) Reset() {
	*x = GlobalNotification{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNotification) ProtoMessage() {}

func (x *GlobalNotification) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNotification.ProtoReflect.Descriptor instead.
func (*GlobalNotification) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{2}
}

func (x *GlobalNotification) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GlobalNotification) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *GlobalNotification) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GlobalNotification) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GlobalNotification) GetSpec() *GlobalNotificationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// GlobalNotificationSpec is the global notification's specification.
type GlobalNotificationSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matcher for determining the target of this notification.
	//
	// Types that are valid to be assigned to Matcher:
	//
	//	*GlobalNotificationSpec_ByPermissions
	//	*GlobalNotificationSpec_ByRoles
	//	*GlobalNotificationSpec_All
	Matcher isGlobalNotificationSpec_Matcher `protobuf_oneof:"matcher"`
	// match_all_conditions is whether or not all the conditions specified by the matcher must be met,
	// if false, only one of the conditions needs to be met.
	MatchAllConditions bool `protobuf:"varint,4,opt,name=match_all_conditions,json=matchAllConditions,proto3" json:"match_all_conditions,omitempty"`
	// notification is the notification itself.
	Notification  *Notification `protobuf:"bytes,5,opt,name=notification,proto3" json:"notification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalNotificationSpec) Reset() {
	*x = GlobalNotificationSpec{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalNotificationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNotificationSpec) ProtoMessage() {}

func (x *GlobalNotificationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNotificationSpec.ProtoReflect.Descriptor instead.
func (*GlobalNotificationSpec) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalNotificationSpec) GetMatcher() isGlobalNotificationSpec_Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *GlobalNotificationSpec) GetByPermissions() *ByPermissions {
	if x != nil {
		if x, ok := x.Matcher.(*GlobalNotificationSpec_ByPermissions); ok {
			return x.ByPermissions
		}
	}
	return nil
}

func (x *GlobalNotificationSpec) GetByRoles() *ByRoles {
	if x != nil {
		if x, ok := x.Matcher.(*GlobalNotificationSpec_ByRoles); ok {
			return x.ByRoles
		}
	}
	return nil
}

func (x *GlobalNotificationSpec) GetAll() bool {
	if x != nil {
		if x, ok := x.Matcher.(*GlobalNotificationSpec_All); ok {
			return x.All
		}
	}
	return false
}

func (x *GlobalNotificationSpec) GetMatchAllConditions() bool {
	if x != nil {
		return x.MatchAllConditions
	}
	return false
}

func (x *GlobalNotificationSpec) GetNotification() *Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type isGlobalNotificationSpec_Matcher interface {
	isGlobalNotificationSpec_Matcher()
}

type GlobalNotificationSpec_ByPermissions struct {
	// by_permissions represents the RoleConditions needed for a user to receive this notification.
	// If multiple permissions are defined and `MatchAllConditions` is true, the user will need to have
	// all of them to receive this notification.
	ByPermissions *ByPermissions `protobuf:"bytes,1,opt,name=by_permissions,json=byPermissions,proto3,oneof"`
}

type GlobalNotificationSpec_ByRoles struct {
	// by_roles represents the roles targeted by this notification.
	// If multiple roles are defined and `MatchAllConditions` is true, the user will need to have all
	// of them to receive this notification.
	ByRoles *ByRoles `protobuf:"bytes,2,opt,name=by_roles,json=byRoles,proto3,oneof"`
}

type GlobalNotificationSpec_All struct {
	// all represents whether to target all users, regardless of roles or permissions.
	All bool `protobuf:"varint,3,opt,name=all,proto3,oneof"`
}

func (*GlobalNotificationSpec_ByPermissions) isGlobalNotificationSpec_Matcher() {}

func (*GlobalNotificationSpec_ByRoles) isGlobalNotificationSpec_Matcher() {}

func (*GlobalNotificationSpec_All) isGlobalNotificationSpec_Matcher() {}

// ByPermissions represents the RoleConditions needed for a user to receive this notification.
type ByPermissions struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	RoleConditions []*types.RoleConditions `protobuf:"bytes,1,rep,name=role_conditions,json=roleConditions,proto3" json:"role_conditions,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ByPermissions) Reset() {
	*x = ByPermissions{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ByPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByPermissions) ProtoMessage() {}

func (x *ByPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByPermissions.ProtoReflect.Descriptor instead.
func (*ByPermissions) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{4}
}

func (x *ByPermissions) GetRoleConditions() []*types.RoleConditions {
	if x != nil {
		return x.RoleConditions
	}
	return nil
}

// ByRoles represents the roles targeted by this notification.
type ByRoles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Roles         []string               `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ByRoles) Reset() {
	*x = ByRoles{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ByRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByRoles) ProtoMessage() {}

func (x *ByRoles) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByRoles.ProtoReflect.Descriptor instead.
func (*ByRoles) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{5}
}

func (x *ByRoles) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// UserNotificationState represents a notification's state for a user. This is to keep track
// of whether the user has clicked on or dismissed the notification.
type UserNotificationState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// kind is the resource kind ("user_notification_state").
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// sub_kind is the optional resource subkind. This is unused.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// version is the resource version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// metadata is the user notification state's metadata.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec is the user notification state's specification.
	Spec *UserNotificationStateSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	// status is the state of this user notification state, it contains the notification state itself which will be dynamically modified.
	Status        *UserNotificationStateStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserNotificationState) Reset() {
	*x = UserNotificationState{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserNotificationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationState) ProtoMessage() {}

func (x *UserNotificationState) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationState.ProtoReflect.Descriptor instead.
func (*UserNotificationState) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{6}
}

func (x *UserNotificationState) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *UserNotificationState) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *UserNotificationState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserNotificationState) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserNotificationState) GetSpec() *UserNotificationStateSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *UserNotificationState) GetStatus() *UserNotificationStateStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UserNotificationStateSpec is the user notification state's specification.
type UserNotificationStateSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// notification_id is the ID of the notification this state is for.
	NotificationId string `protobuf:"bytes,1,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserNotificationStateSpec) Reset() {
	*x = UserNotificationStateSpec{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserNotificationStateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationStateSpec) ProtoMessage() {}

func (x *UserNotificationStateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationStateSpec.ProtoReflect.Descriptor instead.
func (*UserNotificationStateSpec) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{7}
}

func (x *UserNotificationStateSpec) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

// UserNotificationStateStatus is the status of this user notification state, it contains the notification state itself which will be dynamically modified.
type UserNotificationStateStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// notification_state is the state of this notification for the user. This can represent either "clicked" or "dismissed".
	NotificationState NotificationState `protobuf:"varint,1,opt,name=notification_state,json=notificationState,proto3,enum=teleport.notifications.v1.NotificationState" json:"notification_state,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UserNotificationStateStatus) Reset() {
	*x = UserNotificationStateStatus{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserNotificationStateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationStateStatus) ProtoMessage() {}

func (x *UserNotificationStateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationStateStatus.ProtoReflect.Descriptor instead.
func (*UserNotificationStateStatus) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{8}
}

func (x *UserNotificationStateStatus) GetNotificationState() NotificationState {
	if x != nil {
		return x.NotificationState
	}
	return NotificationState_NOTIFICATION_STATE_UNSPECIFIED
}

// UserLastSeenNotification represents the timestamp of the last notification a user has seen.
type UserLastSeenNotification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// kind is the resource kind ("user_last_seen_notification").
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// sub_kind is the optional resource subkind. This is unused.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// version is the resource version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// metadata is the user last seen notification object's metadata.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// UserLastSeenNotificationSpec is the user last seen notification item's specification.
	Spec *UserLastSeenNotificationSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	// status is the timestamp of this user's last seen notification, it contains the timestamp of the notification which will be dynamically modified.
	Status        *UserLastSeenNotificationStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLastSeenNotification) Reset() {
	*x = UserLastSeenNotification{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLastSeenNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLastSeenNotification) ProtoMessage() {}

func (x *UserLastSeenNotification) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLastSeenNotification.ProtoReflect.Descriptor instead.
func (*UserLastSeenNotification) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{9}
}

func (x *UserLastSeenNotification) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *UserLastSeenNotification) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *UserLastSeenNotification) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserLastSeenNotification) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserLastSeenNotification) GetSpec() *UserLastSeenNotificationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *UserLastSeenNotification) GetStatus() *UserLastSeenNotificationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UserLastSeenNotificationSpec is a user last seen notification specification.
type UserLastSeenNotificationSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLastSeenNotificationSpec) Reset() {
	*x = UserLastSeenNotificationSpec{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLastSeenNotificationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLastSeenNotificationSpec) ProtoMessage() {}

func (x *UserLastSeenNotificationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLastSeenNotificationSpec.ProtoReflect.Descriptor instead.
func (*UserLastSeenNotificationSpec) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{10}
}

// UserLastSeenNotificationStatus is the timestamp of this user's last seen notification, it contains the timestamp of the notification which will be dynamically modified.
type UserLastSeenNotificationStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// last_seen_time is the timestamp of the last notification that the user has seen.
	LastSeenTime  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLastSeenNotificationStatus) Reset() {
	*x = UserLastSeenNotificationStatus{}
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLastSeenNotificationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLastSeenNotificationStatus) ProtoMessage() {}

func (x *UserLastSeenNotificationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_notifications_v1_notifications_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLastSeenNotificationStatus.ProtoReflect.Descriptor instead.
func (*UserLastSeenNotificationStatus) Descriptor() ([]byte, []int) {
	return file_teleport_notifications_v1_notifications_proto_rawDescGZIP(), []int{11}
}

func (x *UserLastSeenNotificationStatus) GetLastSeenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeenTime
	}
	return nil
}

var File_teleport_notifications_v1_notifications_proto protoreflect.FileDescriptor

const file_teleport_notifications_v1_notifications_proto_rawDesc = "" +
	"\n" +
	"-teleport/notifications/v1/notifications.proto\x12\x19teleport.notifications.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!teleport/header/v1/metadata.proto\x1a!teleport/legacy/types/types.proto\"\xd2\x01\n" +
	"\fNotification\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x02 \x01(\tR\asubKind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x128\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1c.teleport.header.v1.MetadataR\bmetadata\x12?\n" +
	"\x04spec\x18\x05 \x01(\v2+.teleport.notifications.v1.NotificationSpecR\x04spec\"\x8a\x01\n" +
	"\x10NotificationSpec\x124\n" +
	"\acreated\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\acreated\x12\x1a\n" +
	"\bunscoped\x18\x03 \x01(\bR\bunscoped\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busernameJ\x04\b\x01\x10\x02R\x02id\"\xde\x01\n" +
	"\x12GlobalNotification\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x02 \x01(\tR\asubKind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x128\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1c.teleport.header.v1.MetadataR\bmetadata\x12E\n" +
	"\x04spec\x18\x05 \x01(\v21.teleport.notifications.v1.GlobalNotificationSpecR\x04spec\"\xca\x02\n" +
	"\x16GlobalNotificationSpec\x12Q\n" +
	"\x0eby_permissions\x18\x01 \x01(\v2(.teleport.notifications.v1.ByPermissionsH\x00R\rbyPermissions\x12?\n" +
	"\bby_roles\x18\x02 \x01(\v2\".teleport.notifications.v1.ByRolesH\x00R\abyRoles\x12\x12\n" +
	"\x03all\x18\x03 \x01(\bH\x00R\x03all\x120\n" +
	"\x14match_all_conditions\x18\x04 \x01(\bR\x12matchAllConditions\x12K\n" +
	"\fnotification\x18\x05 \x01(\v2'.teleport.notifications.v1.NotificationR\fnotificationB\t\n" +
	"\amatcher\"O\n" +
	"\rByPermissions\x12>\n" +
	"\x0frole_conditions\x18\x01 \x03(\v2\x15.types.RoleConditionsR\x0eroleConditions\"\x1f\n" +
	"\aByRoles\x12\x14\n" +
	"\x05roles\x18\x01 \x03(\tR\x05roles\"\xb4\x02\n" +
	"\x15UserNotificationState\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x02 \x01(\tR\asubKind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x128\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1c.teleport.header.v1.MetadataR\bmetadata\x12H\n" +
	"\x04spec\x18\x05 \x01(\v24.teleport.notifications.v1.UserNotificationStateSpecR\x04spec\x12N\n" +
	"\x06status\x18\x06 \x01(\v26.teleport.notifications.v1.UserNotificationStateStatusR\x06status\"D\n" +
	"\x19UserNotificationStateSpec\x12'\n" +
	"\x0fnotification_id\x18\x01 \x01(\tR\x0enotificationId\"z\n" +
	"\x1bUserNotificationStateStatus\x12[\n" +
	"\x12notification_state\x18\x01 \x01(\x0e2,.teleport.notifications.v1.NotificationStateR\x11notificationState\"\xc9\x02\n" +
	"\x18UserLastSeenNotification\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x02 \x01(\tR\asubKind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x128\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1c.teleport.header.v1.MetadataR\bmetadata\x12K\n" +
	"\x04spec\x18\x05 \x01(\v27.teleport.notifications.v1.UserLastSeenNotificationSpecR\x04spec\x12Q\n" +
	"\x06status\x18\a \x01(\v29.teleport.notifications.v1.UserLastSeenNotificationStatusR\x06statusJ\x04\b\x06\x10\aR\x04time\"\x1e\n" +
	"\x1cUserLastSeenNotificationSpec\"b\n" +
	"\x1eUserLastSeenNotificationStatus\x12@\n" +
	"\x0elast_seen_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\flastSeenTime*y\n" +
	"\x11NotificationState\x12\"\n" +
	"\x1eNOTIFICATION_STATE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aNOTIFICATION_STATE_CLICKED\x10\x01\x12 \n" +
	"\x1cNOTIFICATION_STATE_DISMISSED\x10\x02B^Z\\github.com/gravitational/teleport/api/gen/proto/go/teleport/notifications/v1;notificationsv1b\x06proto3"

var (
	file_teleport_notifications_v1_notifications_proto_rawDescOnce sync.Once
	file_teleport_notifications_v1_notifications_proto_rawDescData []byte
)

func file_teleport_notifications_v1_notifications_proto_rawDescGZIP() []byte {
	file_teleport_notifications_v1_notifications_proto_rawDescOnce.Do(func() {
		file_teleport_notifications_v1_notifications_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_notifications_v1_notifications_proto_rawDesc), len(file_teleport_notifications_v1_notifications_proto_rawDesc)))
	})
	return file_teleport_notifications_v1_notifications_proto_rawDescData
}

var file_teleport_notifications_v1_notifications_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_notifications_v1_notifications_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_teleport_notifications_v1_notifications_proto_goTypes = []any{
	(NotificationState)(0),                 // 0: teleport.notifications.v1.NotificationState
	(*Notification)(nil),                   // 1: teleport.notifications.v1.Notification
	(*NotificationSpec)(nil),               // 2: teleport.notifications.v1.NotificationSpec
	(*GlobalNotification)(nil),             // 3: teleport.notifications.v1.GlobalNotification
	(*GlobalNotificationSpec)(nil),         // 4: teleport.notifications.v1.GlobalNotificationSpec
	(*ByPermissions)(nil),                  // 5: teleport.notifications.v1.ByPermissions
	(*ByRoles)(nil),                        // 6: teleport.notifications.v1.ByRoles
	(*UserNotificationState)(nil),          // 7: teleport.notifications.v1.UserNotificationState
	(*UserNotificationStateSpec)(nil),      // 8: teleport.notifications.v1.UserNotificationStateSpec
	(*UserNotificationStateStatus)(nil),    // 9: teleport.notifications.v1.UserNotificationStateStatus
	(*UserLastSeenNotification)(nil),       // 10: teleport.notifications.v1.UserLastSeenNotification
	(*UserLastSeenNotificationSpec)(nil),   // 11: teleport.notifications.v1.UserLastSeenNotificationSpec
	(*UserLastSeenNotificationStatus)(nil), // 12: teleport.notifications.v1.UserLastSeenNotificationStatus
	(*v1.Metadata)(nil),                    // 13: teleport.header.v1.Metadata
	(*timestamppb.Timestamp)(nil),          // 14: google.protobuf.Timestamp
	(*types.RoleConditions)(nil),           // 15: types.RoleConditions
}
var file_teleport_notifications_v1_notifications_proto_depIdxs = []int32{
	13, // 0: teleport.notifications.v1.Notification.metadata:type_name -> teleport.header.v1.Metadata
	2,  // 1: teleport.notifications.v1.Notification.spec:type_name -> teleport.notifications.v1.NotificationSpec
	14, // 2: teleport.notifications.v1.NotificationSpec.created:type_name -> google.protobuf.Timestamp
	13, // 3: teleport.notifications.v1.GlobalNotification.metadata:type_name -> teleport.header.v1.Metadata
	4,  // 4: teleport.notifications.v1.GlobalNotification.spec:type_name -> teleport.notifications.v1.GlobalNotificationSpec
	5,  // 5: teleport.notifications.v1.GlobalNotificationSpec.by_permissions:type_name -> teleport.notifications.v1.ByPermissions
	6,  // 6: teleport.notifications.v1.GlobalNotificationSpec.by_roles:type_name -> teleport.notifications.v1.ByRoles
	1,  // 7: teleport.notifications.v1.GlobalNotificationSpec.notification:type_name -> teleport.notifications.v1.Notification
	15, // 8: teleport.notifications.v1.ByPermissions.role_conditions:type_name -> types.RoleConditions
	13, // 9: teleport.notifications.v1.UserNotificationState.metadata:type_name -> teleport.header.v1.Metadata
	8,  // 10: teleport.notifications.v1.UserNotificationState.spec:type_name -> teleport.notifications.v1.UserNotificationStateSpec
	9,  // 11: teleport.notifications.v1.UserNotificationState.status:type_name -> teleport.notifications.v1.UserNotificationStateStatus
	0,  // 12: teleport.notifications.v1.UserNotificationStateStatus.notification_state:type_name -> teleport.notifications.v1.NotificationState
	13, // 13: teleport.notifications.v1.UserLastSeenNotification.metadata:type_name -> teleport.header.v1.Metadata
	11, // 14: teleport.notifications.v1.UserLastSeenNotification.spec:type_name -> teleport.notifications.v1.UserLastSeenNotificationSpec
	12, // 15: teleport.notifications.v1.UserLastSeenNotification.status:type_name -> teleport.notifications.v1.UserLastSeenNotificationStatus
	14, // 16: teleport.notifications.v1.UserLastSeenNotificationStatus.last_seen_time:type_name -> google.protobuf.Timestamp
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_teleport_notifications_v1_notifications_proto_init() }
func file_teleport_notifications_v1_notifications_proto_init() {
	if File_teleport_notifications_v1_notifications_proto != nil {
		return
	}
	file_teleport_notifications_v1_notifications_proto_msgTypes[3].OneofWrappers = []any{
		(*GlobalNotificationSpec_ByPermissions)(nil),
		(*GlobalNotificationSpec_ByRoles)(nil),
		(*GlobalNotificationSpec_All)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_notifications_v1_notifications_proto_rawDesc), len(file_teleport_notifications_v1_notifications_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_notifications_v1_notifications_proto_goTypes,
		DependencyIndexes: file_teleport_notifications_v1_notifications_proto_depIdxs,
		EnumInfos:         file_teleport_notifications_v1_notifications_proto_enumTypes,
		MessageInfos:      file_teleport_notifications_v1_notifications_proto_msgTypes,
	}.Build()
	File_teleport_notifications_v1_notifications_proto = out.File
	file_teleport_notifications_v1_notifications_proto_goTypes = nil
	file_teleport_notifications_v1_notifications_proto_depIdxs = nil
}
