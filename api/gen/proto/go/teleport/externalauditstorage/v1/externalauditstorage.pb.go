// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/externalauditstorage/v1/externalauditstorage.proto

package externalauditstoragev1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExternalAuditStorage contains External Audit Storage configuration.
// It contains configuration that allows users to store audit events and session
// recordings on customer-owned infra instead of in Teleport Cloud.
type ExternalAuditStorage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header is the header for the resource.
	Header *v1.ResourceHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Spec is the specification for external audit storage.
	Spec          *ExternalAuditStorageSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalAuditStorage) Reset() {
	*x = ExternalAuditStorage{}
	mi := &file_teleport_externalauditstorage_v1_externalauditstorage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalAuditStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAuditStorage) ProtoMessage() {}

func (x *ExternalAuditStorage) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_externalauditstorage_v1_externalauditstorage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAuditStorage.ProtoReflect.Descriptor instead.
func (*ExternalAuditStorage) Descriptor() ([]byte, []int) {
	return file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalAuditStorage) GetHeader() *v1.ResourceHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ExternalAuditStorage) GetSpec() *ExternalAuditStorageSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ExternalAuditStorageConfigSpec is the specification of external audit storage.
type ExternalAuditStorageSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IntegrationName is name of an existing AWS OIDC integration used to
	// authenticate to the external AWS account.
	IntegrationName string `protobuf:"bytes,1,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	// Region is the AWS region where the infrastructure is hosted.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// SessionRecordingsURI is the S3 path used to store session recordings.
	SessionRecordingsUri string `protobuf:"bytes,3,opt,name=session_recordings_uri,json=sessionRecordingsUri,proto3" json:"session_recordings_uri,omitempty"`
	// AuditEventsLongTermURI is the S3 path used to store batched parquet files
	// with audit events.
	AuditEventsLongTermUri string `protobuf:"bytes,4,opt,name=audit_events_long_term_uri,json=auditEventsLongTermUri,proto3" json:"audit_events_long_term_uri,omitempty"`
	// AthenaResultsURI is the S3 path used to store temporary results of Athena
	// queries.
	AthenaResultsUri string `protobuf:"bytes,5,opt,name=athena_results_uri,json=athenaResultsUri,proto3" json:"athena_results_uri,omitempty"`
	// AthenaWorkgroup is the workgroup used for Athena audit log queries.
	AthenaWorkgroup string `protobuf:"bytes,6,opt,name=athena_workgroup,json=athenaWorkgroup,proto3" json:"athena_workgroup,omitempty"`
	// GlueDatabase is the database used for Athena audit log queries.
	GlueDatabase string `protobuf:"bytes,7,opt,name=glue_database,json=glueDatabase,proto3" json:"glue_database,omitempty"`
	// GlueTable is the table used for Athena audit log queries.
	GlueTable string `protobuf:"bytes,8,opt,name=glue_table,json=glueTable,proto3" json:"glue_table,omitempty"`
	// PolicyName is the name of the IAM policy attached to the OIDC integration
	// role.
	PolicyName    string `protobuf:"bytes,9,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalAuditStorageSpec) Reset() {
	*x = ExternalAuditStorageSpec{}
	mi := &file_teleport_externalauditstorage_v1_externalauditstorage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalAuditStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAuditStorageSpec) ProtoMessage() {}

func (x *ExternalAuditStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_externalauditstorage_v1_externalauditstorage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAuditStorageSpec.ProtoReflect.Descriptor instead.
func (*ExternalAuditStorageSpec) Descriptor() ([]byte, []int) {
	return file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalAuditStorageSpec) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetSessionRecordingsUri() string {
	if x != nil {
		return x.SessionRecordingsUri
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetAuditEventsLongTermUri() string {
	if x != nil {
		return x.AuditEventsLongTermUri
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetAthenaResultsUri() string {
	if x != nil {
		return x.AthenaResultsUri
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetAthenaWorkgroup() string {
	if x != nil {
		return x.AthenaWorkgroup
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetGlueDatabase() string {
	if x != nil {
		return x.GlueDatabase
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetGlueTable() string {
	if x != nil {
		return x.GlueTable
	}
	return ""
}

func (x *ExternalAuditStorageSpec) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

var File_teleport_externalauditstorage_v1_externalauditstorage_proto protoreflect.FileDescriptor

const file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDesc = "" +
	"\n" +
	";teleport/externalauditstorage/v1/externalauditstorage.proto\x12 teleport.externalauditstorage.v1\x1a'teleport/header/v1/resourceheader.proto\"\xa2\x01\n" +
	"\x14ExternalAuditStorage\x12:\n" +
	"\x06header\x18\x01 \x01(\v2\".teleport.header.v1.ResourceHeaderR\x06header\x12N\n" +
	"\x04spec\x18\x02 \x01(\v2:.teleport.externalauditstorage.v1.ExternalAuditStorageSpecR\x04spec\"\x8d\x03\n" +
	"\x18ExternalAuditStorageSpec\x12)\n" +
	"\x10integration_name\x18\x01 \x01(\tR\x0fintegrationName\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\x124\n" +
	"\x16session_recordings_uri\x18\x03 \x01(\tR\x14sessionRecordingsUri\x12:\n" +
	"\x1aaudit_events_long_term_uri\x18\x04 \x01(\tR\x16auditEventsLongTermUri\x12,\n" +
	"\x12athena_results_uri\x18\x05 \x01(\tR\x10athenaResultsUri\x12)\n" +
	"\x10athena_workgroup\x18\x06 \x01(\tR\x0fathenaWorkgroup\x12#\n" +
	"\rglue_database\x18\a \x01(\tR\fglueDatabase\x12\x1d\n" +
	"\n" +
	"glue_table\x18\b \x01(\tR\tglueTable\x12\x1f\n" +
	"\vpolicy_name\x18\t \x01(\tR\n" +
	"policyNameBlZjgithub.com/gravitational/teleport/api/gen/proto/go/teleport/externalauditstorage/v1;externalauditstoragev1b\x06proto3"

var (
	file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescOnce sync.Once
	file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescData []byte
)

func file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescGZIP() []byte {
	file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescOnce.Do(func() {
		file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDesc), len(file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDesc)))
	})
	return file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDescData
}

var file_teleport_externalauditstorage_v1_externalauditstorage_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_teleport_externalauditstorage_v1_externalauditstorage_proto_goTypes = []any{
	(*ExternalAuditStorage)(nil),     // 0: teleport.externalauditstorage.v1.ExternalAuditStorage
	(*ExternalAuditStorageSpec)(nil), // 1: teleport.externalauditstorage.v1.ExternalAuditStorageSpec
	(*v1.ResourceHeader)(nil),        // 2: teleport.header.v1.ResourceHeader
}
var file_teleport_externalauditstorage_v1_externalauditstorage_proto_depIdxs = []int32{
	2, // 0: teleport.externalauditstorage.v1.ExternalAuditStorage.header:type_name -> teleport.header.v1.ResourceHeader
	1, // 1: teleport.externalauditstorage.v1.ExternalAuditStorage.spec:type_name -> teleport.externalauditstorage.v1.ExternalAuditStorageSpec
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_teleport_externalauditstorage_v1_externalauditstorage_proto_init() }
func file_teleport_externalauditstorage_v1_externalauditstorage_proto_init() {
	if File_teleport_externalauditstorage_v1_externalauditstorage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDesc), len(file_teleport_externalauditstorage_v1_externalauditstorage_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_externalauditstorage_v1_externalauditstorage_proto_goTypes,
		DependencyIndexes: file_teleport_externalauditstorage_v1_externalauditstorage_proto_depIdxs,
		MessageInfos:      file_teleport_externalauditstorage_v1_externalauditstorage_proto_msgTypes,
	}.Build()
	File_teleport_externalauditstorage_v1_externalauditstorage_proto = out.File
	file_teleport_externalauditstorage_v1_externalauditstorage_proto_goTypes = nil
	file_teleport_externalauditstorage_v1_externalauditstorage_proto_depIdxs = nil
}
