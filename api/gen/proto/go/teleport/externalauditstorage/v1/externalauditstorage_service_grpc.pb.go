// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/externalauditstorage/v1/externalauditstorage_service.proto

package externalauditstoragev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalAuditStorageService_GetDraftExternalAuditStorage_FullMethodName         = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/GetDraftExternalAuditStorage"
	ExternalAuditStorageService_CreateDraftExternalAuditStorage_FullMethodName      = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/CreateDraftExternalAuditStorage"
	ExternalAuditStorageService_UpsertDraftExternalAuditStorage_FullMethodName      = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/UpsertDraftExternalAuditStorage"
	ExternalAuditStorageService_DeleteDraftExternalAuditStorage_FullMethodName      = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/DeleteDraftExternalAuditStorage"
	ExternalAuditStorageService_PromoteToClusterExternalAuditStorage_FullMethodName = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/PromoteToClusterExternalAuditStorage"
	ExternalAuditStorageService_GetClusterExternalAuditStorage_FullMethodName       = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/GetClusterExternalAuditStorage"
	ExternalAuditStorageService_DisableClusterExternalAuditStorage_FullMethodName   = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/DisableClusterExternalAuditStorage"
	ExternalAuditStorageService_GenerateDraftExternalAuditStorage_FullMethodName    = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/GenerateDraftExternalAuditStorage"
	ExternalAuditStorageService_TestDraftExternalAuditStorageBuckets_FullMethodName = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/TestDraftExternalAuditStorageBuckets"
	ExternalAuditStorageService_TestDraftExternalAuditStorageGlue_FullMethodName    = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/TestDraftExternalAuditStorageGlue"
	ExternalAuditStorageService_TestDraftExternalAuditStorageAthena_FullMethodName  = "/teleport.externalauditstorage.v1.ExternalAuditStorageService/TestDraftExternalAuditStorageAthena"
)

// ExternalAuditStorageServiceClient is the client API for ExternalAuditStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalAuditStorageServiceClient interface {
	// GetDraftExternalAuditStorage returns the draft external audit storage configuration resource.
	GetDraftExternalAuditStorage(ctx context.Context, in *GetDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*GetDraftExternalAuditStorageResponse, error)
	// CreateDraftExternalAuditStorage creates a draft External Audit Storage
	// resource if one does not already exist.
	CreateDraftExternalAuditStorage(ctx context.Context, in *CreateDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*CreateDraftExternalAuditStorageResponse, error)
	// UpsertDraftExternalAuditStorage upserts a draft External Audit Storage resource.
	UpsertDraftExternalAuditStorage(ctx context.Context, in *UpsertDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*UpsertDraftExternalAuditStorageResponse, error)
	// DeleteDraftExternalAuditStorage removes draft External Audit Storage resource.
	DeleteDraftExternalAuditStorage(ctx context.Context, in *DeleteDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PromoteToClusterExternalAuditStorage promotes the current draft External
	// Audit Storage configuration to be used in the cluster.
	// This method causes the Teleport Auth service to reload.
	PromoteToClusterExternalAuditStorage(ctx context.Context, in *PromoteToClusterExternalAuditStorageRequest, opts ...grpc.CallOption) (*PromoteToClusterExternalAuditStorageResponse, error)
	// GetClusterExternalAuditStorage gets cluster external audit storage.
	GetClusterExternalAuditStorage(ctx context.Context, in *GetClusterExternalAuditStorageRequest, opts ...grpc.CallOption) (*GetClusterExternalAuditStorageResponse, error)
	// DisableClusterExternalAuditStorage disables the external audit storage feature.
	// This method causes the Teleport Auth service to reload.
	DisableClusterExternalAuditStorage(ctx context.Context, in *DisableClusterExternalAuditStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GenerateDraftExternalAuditStorage generates a new external audit storage
	// resource with randomized resource names and upserts it as the current
	// draft.
	GenerateDraftExternalAuditStorage(ctx context.Context, in *GenerateDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*GenerateDraftExternalAuditStorageResponse, error)
	// TestDraftExternalAuditStorageBuckets tests the connection to the current draft buckets.
	TestDraftExternalAuditStorageBuckets(ctx context.Context, in *TestDraftExternalAuditStorageBucketsRequest, opts ...grpc.CallOption) (*TestDraftExternalAuditStorageBucketsResponse, error)
	// TestDraftExternalAuditStorageGlue tests the configuration to the current draft glue table and database.
	TestDraftExternalAuditStorageGlue(ctx context.Context, in *TestDraftExternalAuditStorageGlueRequest, opts ...grpc.CallOption) (*TestDraftExternalAuditStorageGlueResponse, error)
	// TestDraftExternalAuditStorageAthena tests the configuration to the current draft athena.
	TestDraftExternalAuditStorageAthena(ctx context.Context, in *TestDraftExternalAuditStorageAthenaRequest, opts ...grpc.CallOption) (*TestDraftExternalAuditStorageAthenaResponse, error)
}

type externalAuditStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAuditStorageServiceClient(cc grpc.ClientConnInterface) ExternalAuditStorageServiceClient {
	return &externalAuditStorageServiceClient{cc}
}

func (c *externalAuditStorageServiceClient) GetDraftExternalAuditStorage(ctx context.Context, in *GetDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*GetDraftExternalAuditStorageResponse, error) {
	out := new(GetDraftExternalAuditStorageResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_GetDraftExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) CreateDraftExternalAuditStorage(ctx context.Context, in *CreateDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*CreateDraftExternalAuditStorageResponse, error) {
	out := new(CreateDraftExternalAuditStorageResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_CreateDraftExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) UpsertDraftExternalAuditStorage(ctx context.Context, in *UpsertDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*UpsertDraftExternalAuditStorageResponse, error) {
	out := new(UpsertDraftExternalAuditStorageResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_UpsertDraftExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) DeleteDraftExternalAuditStorage(ctx context.Context, in *DeleteDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_DeleteDraftExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) PromoteToClusterExternalAuditStorage(ctx context.Context, in *PromoteToClusterExternalAuditStorageRequest, opts ...grpc.CallOption) (*PromoteToClusterExternalAuditStorageResponse, error) {
	out := new(PromoteToClusterExternalAuditStorageResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_PromoteToClusterExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) GetClusterExternalAuditStorage(ctx context.Context, in *GetClusterExternalAuditStorageRequest, opts ...grpc.CallOption) (*GetClusterExternalAuditStorageResponse, error) {
	out := new(GetClusterExternalAuditStorageResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_GetClusterExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) DisableClusterExternalAuditStorage(ctx context.Context, in *DisableClusterExternalAuditStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_DisableClusterExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) GenerateDraftExternalAuditStorage(ctx context.Context, in *GenerateDraftExternalAuditStorageRequest, opts ...grpc.CallOption) (*GenerateDraftExternalAuditStorageResponse, error) {
	out := new(GenerateDraftExternalAuditStorageResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_GenerateDraftExternalAuditStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) TestDraftExternalAuditStorageBuckets(ctx context.Context, in *TestDraftExternalAuditStorageBucketsRequest, opts ...grpc.CallOption) (*TestDraftExternalAuditStorageBucketsResponse, error) {
	out := new(TestDraftExternalAuditStorageBucketsResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_TestDraftExternalAuditStorageBuckets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) TestDraftExternalAuditStorageGlue(ctx context.Context, in *TestDraftExternalAuditStorageGlueRequest, opts ...grpc.CallOption) (*TestDraftExternalAuditStorageGlueResponse, error) {
	out := new(TestDraftExternalAuditStorageGlueResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_TestDraftExternalAuditStorageGlue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAuditStorageServiceClient) TestDraftExternalAuditStorageAthena(ctx context.Context, in *TestDraftExternalAuditStorageAthenaRequest, opts ...grpc.CallOption) (*TestDraftExternalAuditStorageAthenaResponse, error) {
	out := new(TestDraftExternalAuditStorageAthenaResponse)
	err := c.cc.Invoke(ctx, ExternalAuditStorageService_TestDraftExternalAuditStorageAthena_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAuditStorageServiceServer is the server API for ExternalAuditStorageService service.
// All implementations must embed UnimplementedExternalAuditStorageServiceServer
// for forward compatibility
type ExternalAuditStorageServiceServer interface {
	// GetDraftExternalAuditStorage returns the draft external audit storage configuration resource.
	GetDraftExternalAuditStorage(context.Context, *GetDraftExternalAuditStorageRequest) (*GetDraftExternalAuditStorageResponse, error)
	// CreateDraftExternalAuditStorage creates a draft External Audit Storage
	// resource if one does not already exist.
	CreateDraftExternalAuditStorage(context.Context, *CreateDraftExternalAuditStorageRequest) (*CreateDraftExternalAuditStorageResponse, error)
	// UpsertDraftExternalAuditStorage upserts a draft External Audit Storage resource.
	UpsertDraftExternalAuditStorage(context.Context, *UpsertDraftExternalAuditStorageRequest) (*UpsertDraftExternalAuditStorageResponse, error)
	// DeleteDraftExternalAuditStorage removes draft External Audit Storage resource.
	DeleteDraftExternalAuditStorage(context.Context, *DeleteDraftExternalAuditStorageRequest) (*emptypb.Empty, error)
	// PromoteToClusterExternalAuditStorage promotes the current draft External
	// Audit Storage configuration to be used in the cluster.
	// This method causes the Teleport Auth service to reload.
	PromoteToClusterExternalAuditStorage(context.Context, *PromoteToClusterExternalAuditStorageRequest) (*PromoteToClusterExternalAuditStorageResponse, error)
	// GetClusterExternalAuditStorage gets cluster external audit storage.
	GetClusterExternalAuditStorage(context.Context, *GetClusterExternalAuditStorageRequest) (*GetClusterExternalAuditStorageResponse, error)
	// DisableClusterExternalAuditStorage disables the external audit storage feature.
	// This method causes the Teleport Auth service to reload.
	DisableClusterExternalAuditStorage(context.Context, *DisableClusterExternalAuditStorageRequest) (*emptypb.Empty, error)
	// GenerateDraftExternalAuditStorage generates a new external audit storage
	// resource with randomized resource names and upserts it as the current
	// draft.
	GenerateDraftExternalAuditStorage(context.Context, *GenerateDraftExternalAuditStorageRequest) (*GenerateDraftExternalAuditStorageResponse, error)
	// TestDraftExternalAuditStorageBuckets tests the connection to the current draft buckets.
	TestDraftExternalAuditStorageBuckets(context.Context, *TestDraftExternalAuditStorageBucketsRequest) (*TestDraftExternalAuditStorageBucketsResponse, error)
	// TestDraftExternalAuditStorageGlue tests the configuration to the current draft glue table and database.
	TestDraftExternalAuditStorageGlue(context.Context, *TestDraftExternalAuditStorageGlueRequest) (*TestDraftExternalAuditStorageGlueResponse, error)
	// TestDraftExternalAuditStorageAthena tests the configuration to the current draft athena.
	TestDraftExternalAuditStorageAthena(context.Context, *TestDraftExternalAuditStorageAthenaRequest) (*TestDraftExternalAuditStorageAthenaResponse, error)
	mustEmbedUnimplementedExternalAuditStorageServiceServer()
}

// UnimplementedExternalAuditStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalAuditStorageServiceServer struct {
}

func (UnimplementedExternalAuditStorageServiceServer) GetDraftExternalAuditStorage(context.Context, *GetDraftExternalAuditStorageRequest) (*GetDraftExternalAuditStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraftExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) CreateDraftExternalAuditStorage(context.Context, *CreateDraftExternalAuditStorageRequest) (*CreateDraftExternalAuditStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraftExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) UpsertDraftExternalAuditStorage(context.Context, *UpsertDraftExternalAuditStorageRequest) (*UpsertDraftExternalAuditStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDraftExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) DeleteDraftExternalAuditStorage(context.Context, *DeleteDraftExternalAuditStorageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDraftExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) PromoteToClusterExternalAuditStorage(context.Context, *PromoteToClusterExternalAuditStorageRequest) (*PromoteToClusterExternalAuditStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteToClusterExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) GetClusterExternalAuditStorage(context.Context, *GetClusterExternalAuditStorageRequest) (*GetClusterExternalAuditStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) DisableClusterExternalAuditStorage(context.Context, *DisableClusterExternalAuditStorageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableClusterExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) GenerateDraftExternalAuditStorage(context.Context, *GenerateDraftExternalAuditStorageRequest) (*GenerateDraftExternalAuditStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDraftExternalAuditStorage not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) TestDraftExternalAuditStorageBuckets(context.Context, *TestDraftExternalAuditStorageBucketsRequest) (*TestDraftExternalAuditStorageBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDraftExternalAuditStorageBuckets not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) TestDraftExternalAuditStorageGlue(context.Context, *TestDraftExternalAuditStorageGlueRequest) (*TestDraftExternalAuditStorageGlueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDraftExternalAuditStorageGlue not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) TestDraftExternalAuditStorageAthena(context.Context, *TestDraftExternalAuditStorageAthenaRequest) (*TestDraftExternalAuditStorageAthenaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDraftExternalAuditStorageAthena not implemented")
}
func (UnimplementedExternalAuditStorageServiceServer) mustEmbedUnimplementedExternalAuditStorageServiceServer() {
}

// UnsafeExternalAuditStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAuditStorageServiceServer will
// result in compilation errors.
type UnsafeExternalAuditStorageServiceServer interface {
	mustEmbedUnimplementedExternalAuditStorageServiceServer()
}

func RegisterExternalAuditStorageServiceServer(s grpc.ServiceRegistrar, srv ExternalAuditStorageServiceServer) {
	s.RegisterService(&ExternalAuditStorageService_ServiceDesc, srv)
}

func _ExternalAuditStorageService_GetDraftExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).GetDraftExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_GetDraftExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).GetDraftExternalAuditStorage(ctx, req.(*GetDraftExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_CreateDraftExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).CreateDraftExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_CreateDraftExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).CreateDraftExternalAuditStorage(ctx, req.(*CreateDraftExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_UpsertDraftExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDraftExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).UpsertDraftExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_UpsertDraftExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).UpsertDraftExternalAuditStorage(ctx, req.(*UpsertDraftExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_DeleteDraftExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDraftExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).DeleteDraftExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_DeleteDraftExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).DeleteDraftExternalAuditStorage(ctx, req.(*DeleteDraftExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_PromoteToClusterExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteToClusterExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).PromoteToClusterExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_PromoteToClusterExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).PromoteToClusterExternalAuditStorage(ctx, req.(*PromoteToClusterExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_GetClusterExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).GetClusterExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_GetClusterExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).GetClusterExternalAuditStorage(ctx, req.(*GetClusterExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_DisableClusterExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableClusterExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).DisableClusterExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_DisableClusterExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).DisableClusterExternalAuditStorage(ctx, req.(*DisableClusterExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_GenerateDraftExternalAuditStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDraftExternalAuditStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).GenerateDraftExternalAuditStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_GenerateDraftExternalAuditStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).GenerateDraftExternalAuditStorage(ctx, req.(*GenerateDraftExternalAuditStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_TestDraftExternalAuditStorageBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDraftExternalAuditStorageBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).TestDraftExternalAuditStorageBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_TestDraftExternalAuditStorageBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).TestDraftExternalAuditStorageBuckets(ctx, req.(*TestDraftExternalAuditStorageBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_TestDraftExternalAuditStorageGlue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDraftExternalAuditStorageGlueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).TestDraftExternalAuditStorageGlue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_TestDraftExternalAuditStorageGlue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).TestDraftExternalAuditStorageGlue(ctx, req.(*TestDraftExternalAuditStorageGlueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAuditStorageService_TestDraftExternalAuditStorageAthena_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDraftExternalAuditStorageAthenaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuditStorageServiceServer).TestDraftExternalAuditStorageAthena(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuditStorageService_TestDraftExternalAuditStorageAthena_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuditStorageServiceServer).TestDraftExternalAuditStorageAthena(ctx, req.(*TestDraftExternalAuditStorageAthenaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAuditStorageService_ServiceDesc is the grpc.ServiceDesc for ExternalAuditStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAuditStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.externalauditstorage.v1.ExternalAuditStorageService",
	HandlerType: (*ExternalAuditStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDraftExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_GetDraftExternalAuditStorage_Handler,
		},
		{
			MethodName: "CreateDraftExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_CreateDraftExternalAuditStorage_Handler,
		},
		{
			MethodName: "UpsertDraftExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_UpsertDraftExternalAuditStorage_Handler,
		},
		{
			MethodName: "DeleteDraftExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_DeleteDraftExternalAuditStorage_Handler,
		},
		{
			MethodName: "PromoteToClusterExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_PromoteToClusterExternalAuditStorage_Handler,
		},
		{
			MethodName: "GetClusterExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_GetClusterExternalAuditStorage_Handler,
		},
		{
			MethodName: "DisableClusterExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_DisableClusterExternalAuditStorage_Handler,
		},
		{
			MethodName: "GenerateDraftExternalAuditStorage",
			Handler:    _ExternalAuditStorageService_GenerateDraftExternalAuditStorage_Handler,
		},
		{
			MethodName: "TestDraftExternalAuditStorageBuckets",
			Handler:    _ExternalAuditStorageService_TestDraftExternalAuditStorageBuckets_Handler,
		},
		{
			MethodName: "TestDraftExternalAuditStorageGlue",
			Handler:    _ExternalAuditStorageService_TestDraftExternalAuditStorageGlue_Handler,
		},
		{
			MethodName: "TestDraftExternalAuditStorageAthena",
			Handler:    _ExternalAuditStorageService_TestDraftExternalAuditStorageAthena_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/externalauditstorage/v1/externalauditstorage_service.proto",
}
