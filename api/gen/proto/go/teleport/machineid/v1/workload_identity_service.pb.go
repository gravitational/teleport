// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/machineid/v1/workload_identity_service.proto

package machineidv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request for an individual x509 SVID.
type SVIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A PKIX, ASN.1 DER encoded public key that should be included in the x509
	// SVID.
	// Required.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The path that should be included in the SPIFFE ID.
	// This should have a preceding slash and should not have a trailing slash.
	// Required.
	SpiffeIdPath string `protobuf:"bytes,2,opt,name=spiffe_id_path,json=spiffeIdPath,proto3" json:"spiffe_id_path,omitempty"`
	// The DNS SANs that should be included in the x509 SVID.
	// Optional.
	DnsSans []string `protobuf:"bytes,3,rep,name=dns_sans,json=dnsSans,proto3" json:"dns_sans,omitempty"`
	// The IP SANs that should be included in the x509 SVID.
	// Optional.
	IpSans []string `protobuf:"bytes,4,rep,name=ip_sans,json=ipSans,proto3" json:"ip_sans,omitempty"`
	// A hint that provides a way of distinguishing between SVIDs. These are
	// user configured and are sent back to the actual workload.
	// Optional.
	Hint string `protobuf:"bytes,5,opt,name=hint,proto3" json:"hint,omitempty"`
	// The TTL to use for the x509 SVID. A maximum value is enforced on this
	// field. Callers should inspect the returned cert to determine if their
	// requested TTL has been met, and if not, adjust their behaviour. If not
	// supplied, the default TTL will be the maximum value.
	Ttl           *durationpb.Duration `protobuf:"bytes,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SVIDRequest) Reset() {
	*x = SVIDRequest{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVIDRequest) ProtoMessage() {}

func (x *SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVIDRequest.ProtoReflect.Descriptor instead.
func (*SVIDRequest) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{0}
}

func (x *SVIDRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SVIDRequest) GetSpiffeIdPath() string {
	if x != nil {
		return x.SpiffeIdPath
	}
	return ""
}

func (x *SVIDRequest) GetDnsSans() []string {
	if x != nil {
		return x.DnsSans
	}
	return nil
}

func (x *SVIDRequest) GetIpSans() []string {
	if x != nil {
		return x.IpSans
	}
	return nil
}

func (x *SVIDRequest) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *SVIDRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

// The generated x509 SVID.
type SVIDResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A ASN.1 DER encoded x509 SVID.
	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// The full SPIFFE ID that was included in the x509 SVID.
	SpiffeId string `protobuf:"bytes,2,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// The hint that was included in SVIDRequest in order to allow a workload to
	// distinguish an individual SVID.
	Hint          string `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SVIDResponse) Reset() {
	*x = SVIDResponse{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVIDResponse) ProtoMessage() {}

func (x *SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVIDResponse.ProtoReflect.Descriptor instead.
func (*SVIDResponse) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{1}
}

func (x *SVIDResponse) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *SVIDResponse) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *SVIDResponse) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

// The request for SignX509SVIDs.
type SignX509SVIDsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SVIDs that should be generated. This is repeated to allow a bot to
	// request multiple SVIDs at once and reduce the number of round trips.
	// Must be non-zero length.
	Svids         []*SVIDRequest `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignX509SVIDsRequest) Reset() {
	*x = SignX509SVIDsRequest{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignX509SVIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignX509SVIDsRequest) ProtoMessage() {}

func (x *SignX509SVIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignX509SVIDsRequest.ProtoReflect.Descriptor instead.
func (*SignX509SVIDsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{2}
}

func (x *SignX509SVIDsRequest) GetSvids() []*SVIDRequest {
	if x != nil {
		return x.Svids
	}
	return nil
}

// The response for SignX509SVIDs.
type SignX509SVIDsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The generated SVIDs.
	Svids         []*SVIDResponse `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignX509SVIDsResponse) Reset() {
	*x = SignX509SVIDsResponse{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignX509SVIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignX509SVIDsResponse) ProtoMessage() {}

func (x *SignX509SVIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignX509SVIDsResponse.ProtoReflect.Descriptor instead.
func (*SignX509SVIDsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{3}
}

func (x *SignX509SVIDsResponse) GetSvids() []*SVIDResponse {
	if x != nil {
		return x.Svids
	}
	return nil
}

// The request for an individual JWT SVID.
type JWTSVIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The path that should be included in the SPIFFE ID.
	// This should have a preceding slash and should not have a trailing slash.
	// Required.
	SpiffeIdPath string `protobuf:"bytes,1,opt,name=spiffe_id_path,json=spiffeIdPath,proto3" json:"spiffe_id_path,omitempty"`
	// The value that should be included in the JWT SVID as the `aud` claim.
	// Required.
	Audiences []string `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// The TTL to use for the x509 SVID. A maximum value is enforced on this
	// field. Callers should inspect the returned cert to determine if their
	// requested TTL has been met, and if not, adjust their behaviour. If not
	// supplied, the default TTL will be the maximum value.
	Ttl *durationpb.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// A hint that provides a way of distinguishing between SVIDs. These are
	// user configured and are sent back to the actual workload.
	// Optional.
	Hint          string `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JWTSVIDRequest) Reset() {
	*x = JWTSVIDRequest{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTSVIDRequest) ProtoMessage() {}

func (x *JWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*JWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{4}
}

func (x *JWTSVIDRequest) GetSpiffeIdPath() string {
	if x != nil {
		return x.SpiffeIdPath
	}
	return ""
}

func (x *JWTSVIDRequest) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *JWTSVIDRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *JWTSVIDRequest) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

// The generated JWT SVID.
type JWTSVIDResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The JWT SVID.
	Jwt string `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// The JTI that was included in the JWT.
	Jti string `protobuf:"bytes,2,opt,name=jti,proto3" json:"jti,omitempty"`
	// The full SPIFFE ID that was included in the x509 SVID.
	SpiffeId string `protobuf:"bytes,3,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// The audiences that were included in the JWT.
	Audiences []string `protobuf:"bytes,4,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// The hint that was included in SVIDRequest in order to allow a workload to
	// distinguish an individual SVID.
	Hint          string `protobuf:"bytes,5,opt,name=hint,proto3" json:"hint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JWTSVIDResponse) Reset() {
	*x = JWTSVIDResponse{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTSVIDResponse) ProtoMessage() {}

func (x *JWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*JWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{5}
}

func (x *JWTSVIDResponse) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *JWTSVIDResponse) GetJti() string {
	if x != nil {
		return x.Jti
	}
	return ""
}

func (x *JWTSVIDResponse) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *JWTSVIDResponse) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *JWTSVIDResponse) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

// The request for SignJWTSVIDs.
type SignJWTSVIDsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Svids         []*JWTSVIDRequest      `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignJWTSVIDsRequest) Reset() {
	*x = SignJWTSVIDsRequest{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignJWTSVIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignJWTSVIDsRequest) ProtoMessage() {}

func (x *SignJWTSVIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignJWTSVIDsRequest.ProtoReflect.Descriptor instead.
func (*SignJWTSVIDsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{6}
}

func (x *SignJWTSVIDsRequest) GetSvids() []*JWTSVIDRequest {
	if x != nil {
		return x.Svids
	}
	return nil
}

// The response for SignJWTSVIDs.
type SignJWTSVIDsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Svids         []*JWTSVIDResponse     `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignJWTSVIDsResponse) Reset() {
	*x = SignJWTSVIDsResponse{}
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignJWTSVIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignJWTSVIDsResponse) ProtoMessage() {}

func (x *SignJWTSVIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_workload_identity_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignJWTSVIDsResponse.ProtoReflect.Descriptor instead.
func (*SignJWTSVIDsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP(), []int{7}
}

func (x *SignJWTSVIDsResponse) GetSvids() []*JWTSVIDResponse {
	if x != nil {
		return x.Svids
	}
	return nil
}

var File_teleport_machineid_v1_workload_identity_service_proto protoreflect.FileDescriptor

const file_teleport_machineid_v1_workload_identity_service_proto_rawDesc = "" +
	"\n" +
	"5teleport/machineid/v1/workload_identity_service.proto\x12\x15teleport.machineid.v1\x1a\x1egoogle/protobuf/duration.proto\"\xc7\x01\n" +
	"\vSVIDRequest\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12$\n" +
	"\x0espiffe_id_path\x18\x02 \x01(\tR\fspiffeIdPath\x12\x19\n" +
	"\bdns_sans\x18\x03 \x03(\tR\adnsSans\x12\x17\n" +
	"\aip_sans\x18\x04 \x03(\tR\x06ipSans\x12\x12\n" +
	"\x04hint\x18\x05 \x01(\tR\x04hint\x12+\n" +
	"\x03ttl\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x03ttl\"a\n" +
	"\fSVIDResponse\x12 \n" +
	"\vcertificate\x18\x01 \x01(\fR\vcertificate\x12\x1b\n" +
	"\tspiffe_id\x18\x02 \x01(\tR\bspiffeId\x12\x12\n" +
	"\x04hint\x18\x03 \x01(\tR\x04hint\"P\n" +
	"\x14SignX509SVIDsRequest\x128\n" +
	"\x05svids\x18\x01 \x03(\v2\".teleport.machineid.v1.SVIDRequestR\x05svids\"R\n" +
	"\x15SignX509SVIDsResponse\x129\n" +
	"\x05svids\x18\x01 \x03(\v2#.teleport.machineid.v1.SVIDResponseR\x05svids\"\x95\x01\n" +
	"\x0eJWTSVIDRequest\x12$\n" +
	"\x0espiffe_id_path\x18\x01 \x01(\tR\fspiffeIdPath\x12\x1c\n" +
	"\taudiences\x18\x02 \x03(\tR\taudiences\x12+\n" +
	"\x03ttl\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x03ttl\x12\x12\n" +
	"\x04hint\x18\x04 \x01(\tR\x04hint\"\x84\x01\n" +
	"\x0fJWTSVIDResponse\x12\x10\n" +
	"\x03jwt\x18\x01 \x01(\tR\x03jwt\x12\x10\n" +
	"\x03jti\x18\x02 \x01(\tR\x03jti\x12\x1b\n" +
	"\tspiffe_id\x18\x03 \x01(\tR\bspiffeId\x12\x1c\n" +
	"\taudiences\x18\x04 \x03(\tR\taudiences\x12\x12\n" +
	"\x04hint\x18\x05 \x01(\tR\x04hint\"R\n" +
	"\x13SignJWTSVIDsRequest\x12;\n" +
	"\x05svids\x18\x01 \x03(\v2%.teleport.machineid.v1.JWTSVIDRequestR\x05svids\"T\n" +
	"\x14SignJWTSVIDsResponse\x12<\n" +
	"\x05svids\x18\x01 \x03(\v2&.teleport.machineid.v1.JWTSVIDResponseR\x05svids2\xf2\x01\n" +
	"\x17WorkloadIdentityService\x12l\n" +
	"\rSignX509SVIDs\x12+.teleport.machineid.v1.SignX509SVIDsRequest\x1a,.teleport.machineid.v1.SignX509SVIDsResponse\"\x00\x12i\n" +
	"\fSignJWTSVIDs\x12*.teleport.machineid.v1.SignJWTSVIDsRequest\x1a+.teleport.machineid.v1.SignJWTSVIDsResponse\"\x00BVZTgithub.com/gravitational/teleport/api/gen/proto/go/teleport/machineid/v1;machineidv1b\x06proto3"

var (
	file_teleport_machineid_v1_workload_identity_service_proto_rawDescOnce sync.Once
	file_teleport_machineid_v1_workload_identity_service_proto_rawDescData []byte
)

func file_teleport_machineid_v1_workload_identity_service_proto_rawDescGZIP() []byte {
	file_teleport_machineid_v1_workload_identity_service_proto_rawDescOnce.Do(func() {
		file_teleport_machineid_v1_workload_identity_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_machineid_v1_workload_identity_service_proto_rawDesc), len(file_teleport_machineid_v1_workload_identity_service_proto_rawDesc)))
	})
	return file_teleport_machineid_v1_workload_identity_service_proto_rawDescData
}

var file_teleport_machineid_v1_workload_identity_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_teleport_machineid_v1_workload_identity_service_proto_goTypes = []any{
	(*SVIDRequest)(nil),           // 0: teleport.machineid.v1.SVIDRequest
	(*SVIDResponse)(nil),          // 1: teleport.machineid.v1.SVIDResponse
	(*SignX509SVIDsRequest)(nil),  // 2: teleport.machineid.v1.SignX509SVIDsRequest
	(*SignX509SVIDsResponse)(nil), // 3: teleport.machineid.v1.SignX509SVIDsResponse
	(*JWTSVIDRequest)(nil),        // 4: teleport.machineid.v1.JWTSVIDRequest
	(*JWTSVIDResponse)(nil),       // 5: teleport.machineid.v1.JWTSVIDResponse
	(*SignJWTSVIDsRequest)(nil),   // 6: teleport.machineid.v1.SignJWTSVIDsRequest
	(*SignJWTSVIDsResponse)(nil),  // 7: teleport.machineid.v1.SignJWTSVIDsResponse
	(*durationpb.Duration)(nil),   // 8: google.protobuf.Duration
}
var file_teleport_machineid_v1_workload_identity_service_proto_depIdxs = []int32{
	8, // 0: teleport.machineid.v1.SVIDRequest.ttl:type_name -> google.protobuf.Duration
	0, // 1: teleport.machineid.v1.SignX509SVIDsRequest.svids:type_name -> teleport.machineid.v1.SVIDRequest
	1, // 2: teleport.machineid.v1.SignX509SVIDsResponse.svids:type_name -> teleport.machineid.v1.SVIDResponse
	8, // 3: teleport.machineid.v1.JWTSVIDRequest.ttl:type_name -> google.protobuf.Duration
	4, // 4: teleport.machineid.v1.SignJWTSVIDsRequest.svids:type_name -> teleport.machineid.v1.JWTSVIDRequest
	5, // 5: teleport.machineid.v1.SignJWTSVIDsResponse.svids:type_name -> teleport.machineid.v1.JWTSVIDResponse
	2, // 6: teleport.machineid.v1.WorkloadIdentityService.SignX509SVIDs:input_type -> teleport.machineid.v1.SignX509SVIDsRequest
	6, // 7: teleport.machineid.v1.WorkloadIdentityService.SignJWTSVIDs:input_type -> teleport.machineid.v1.SignJWTSVIDsRequest
	3, // 8: teleport.machineid.v1.WorkloadIdentityService.SignX509SVIDs:output_type -> teleport.machineid.v1.SignX509SVIDsResponse
	7, // 9: teleport.machineid.v1.WorkloadIdentityService.SignJWTSVIDs:output_type -> teleport.machineid.v1.SignJWTSVIDsResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_teleport_machineid_v1_workload_identity_service_proto_init() }
func file_teleport_machineid_v1_workload_identity_service_proto_init() {
	if File_teleport_machineid_v1_workload_identity_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_machineid_v1_workload_identity_service_proto_rawDesc), len(file_teleport_machineid_v1_workload_identity_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_machineid_v1_workload_identity_service_proto_goTypes,
		DependencyIndexes: file_teleport_machineid_v1_workload_identity_service_proto_depIdxs,
		MessageInfos:      file_teleport_machineid_v1_workload_identity_service_proto_msgTypes,
	}.Build()
	File_teleport_machineid_v1_workload_identity_service_proto = out.File
	file_teleport_machineid_v1_workload_identity_service_proto_goTypes = nil
	file_teleport_machineid_v1_workload_identity_service_proto_depIdxs = nil
}
