// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/machineid/v1/bot_instance_service.proto

package machineidv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BotInstanceService_GetBotInstance_FullMethodName    = "/teleport.machineid.v1.BotInstanceService/GetBotInstance"
	BotInstanceService_ListBotInstances_FullMethodName  = "/teleport.machineid.v1.BotInstanceService/ListBotInstances"
	BotInstanceService_DeleteBotInstance_FullMethodName = "/teleport.machineid.v1.BotInstanceService/DeleteBotInstance"
	BotInstanceService_SubmitHeartbeat_FullMethodName   = "/teleport.machineid.v1.BotInstanceService/SubmitHeartbeat"
)

// BotInstanceServiceClient is the client API for BotInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BotInstanceService provides functions to record and manage bot instances.
type BotInstanceServiceClient interface {
	// GetBotInstance returns the specified BotInstance resource.
	GetBotInstance(ctx context.Context, in *GetBotInstanceRequest, opts ...grpc.CallOption) (*BotInstance, error)
	// ListBotInstances returns a page of BotInstance resources.
	ListBotInstances(ctx context.Context, in *ListBotInstancesRequest, opts ...grpc.CallOption) (*ListBotInstancesResponse, error)
	// DeleteBotInstance hard deletes the specified BotInstance resource.
	DeleteBotInstance(ctx context.Context, in *DeleteBotInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SubmitHeartbeat submits a heartbeat for a BotInstance.
	SubmitHeartbeat(ctx context.Context, in *SubmitHeartbeatRequest, opts ...grpc.CallOption) (*SubmitHeartbeatResponse, error)
}

type botInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotInstanceServiceClient(cc grpc.ClientConnInterface) BotInstanceServiceClient {
	return &botInstanceServiceClient{cc}
}

func (c *botInstanceServiceClient) GetBotInstance(ctx context.Context, in *GetBotInstanceRequest, opts ...grpc.CallOption) (*BotInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotInstance)
	err := c.cc.Invoke(ctx, BotInstanceService_GetBotInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botInstanceServiceClient) ListBotInstances(ctx context.Context, in *ListBotInstancesRequest, opts ...grpc.CallOption) (*ListBotInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBotInstancesResponse)
	err := c.cc.Invoke(ctx, BotInstanceService_ListBotInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botInstanceServiceClient) DeleteBotInstance(ctx context.Context, in *DeleteBotInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BotInstanceService_DeleteBotInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botInstanceServiceClient) SubmitHeartbeat(ctx context.Context, in *SubmitHeartbeatRequest, opts ...grpc.CallOption) (*SubmitHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitHeartbeatResponse)
	err := c.cc.Invoke(ctx, BotInstanceService_SubmitHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotInstanceServiceServer is the server API for BotInstanceService service.
// All implementations must embed UnimplementedBotInstanceServiceServer
// for forward compatibility.
//
// BotInstanceService provides functions to record and manage bot instances.
type BotInstanceServiceServer interface {
	// GetBotInstance returns the specified BotInstance resource.
	GetBotInstance(context.Context, *GetBotInstanceRequest) (*BotInstance, error)
	// ListBotInstances returns a page of BotInstance resources.
	ListBotInstances(context.Context, *ListBotInstancesRequest) (*ListBotInstancesResponse, error)
	// DeleteBotInstance hard deletes the specified BotInstance resource.
	DeleteBotInstance(context.Context, *DeleteBotInstanceRequest) (*emptypb.Empty, error)
	// SubmitHeartbeat submits a heartbeat for a BotInstance.
	SubmitHeartbeat(context.Context, *SubmitHeartbeatRequest) (*SubmitHeartbeatResponse, error)
	mustEmbedUnimplementedBotInstanceServiceServer()
}

// UnimplementedBotInstanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBotInstanceServiceServer struct{}

func (UnimplementedBotInstanceServiceServer) GetBotInstance(context.Context, *GetBotInstanceRequest) (*BotInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotInstance not implemented")
}
func (UnimplementedBotInstanceServiceServer) ListBotInstances(context.Context, *ListBotInstancesRequest) (*ListBotInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBotInstances not implemented")
}
func (UnimplementedBotInstanceServiceServer) DeleteBotInstance(context.Context, *DeleteBotInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBotInstance not implemented")
}
func (UnimplementedBotInstanceServiceServer) SubmitHeartbeat(context.Context, *SubmitHeartbeatRequest) (*SubmitHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitHeartbeat not implemented")
}
func (UnimplementedBotInstanceServiceServer) mustEmbedUnimplementedBotInstanceServiceServer() {}
func (UnimplementedBotInstanceServiceServer) testEmbeddedByValue()                            {}

// UnsafeBotInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotInstanceServiceServer will
// result in compilation errors.
type UnsafeBotInstanceServiceServer interface {
	mustEmbedUnimplementedBotInstanceServiceServer()
}

func RegisterBotInstanceServiceServer(s grpc.ServiceRegistrar, srv BotInstanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedBotInstanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BotInstanceService_ServiceDesc, srv)
}

func _BotInstanceService_GetBotInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotInstanceServiceServer).GetBotInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotInstanceService_GetBotInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotInstanceServiceServer).GetBotInstance(ctx, req.(*GetBotInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotInstanceService_ListBotInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBotInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotInstanceServiceServer).ListBotInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotInstanceService_ListBotInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotInstanceServiceServer).ListBotInstances(ctx, req.(*ListBotInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotInstanceService_DeleteBotInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBotInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotInstanceServiceServer).DeleteBotInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotInstanceService_DeleteBotInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotInstanceServiceServer).DeleteBotInstance(ctx, req.(*DeleteBotInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotInstanceService_SubmitHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotInstanceServiceServer).SubmitHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotInstanceService_SubmitHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotInstanceServiceServer).SubmitHeartbeat(ctx, req.(*SubmitHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotInstanceService_ServiceDesc is the grpc.ServiceDesc for BotInstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotInstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.machineid.v1.BotInstanceService",
	HandlerType: (*BotInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBotInstance",
			Handler:    _BotInstanceService_GetBotInstance_Handler,
		},
		{
			MethodName: "ListBotInstances",
			Handler:    _BotInstanceService_ListBotInstances_Handler,
		},
		{
			MethodName: "DeleteBotInstance",
			Handler:    _BotInstanceService_DeleteBotInstance_Handler,
		},
		{
			MethodName: "SubmitHeartbeat",
			Handler:    _BotInstanceService_SubmitHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/machineid/v1/bot_instance_service.proto",
}
