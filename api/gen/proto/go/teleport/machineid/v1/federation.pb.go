// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/machineid/v1/federation.proto

package machineidv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SPIFFEFederation is a resource that represents the configuration of a trust
// domain federation.
type SPIFFEFederation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The kind of resource represented.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Differentiates variations of the same kind. All resources should
	// contain one, even if it is never populated.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// The version of the resource being represented.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Common metadata that all resources share.
	// Importantly, the name MUST match the name of the trust domain you federate
	// with.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The configured properties of the trust domain federation
	Spec *SPIFFEFederationSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	// Fields that are set by the server as results of operations. These should
	// not be modified by users.
	Status        *SPIFFEFederationStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SPIFFEFederation) Reset() {
	*x = SPIFFEFederation{}
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPIFFEFederation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFEFederation) ProtoMessage() {}

func (x *SPIFFEFederation) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFEFederation.ProtoReflect.Descriptor instead.
func (*SPIFFEFederation) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_federation_proto_rawDescGZIP(), []int{0}
}

func (x *SPIFFEFederation) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SPIFFEFederation) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *SPIFFEFederation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SPIFFEFederation) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SPIFFEFederation) GetSpec() *SPIFFEFederationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SPIFFEFederation) GetStatus() *SPIFFEFederationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// SPIFFEFederationBundleSourceStatic is a static bundle source. It should be an
// option of last resort, as it requires manual updates.
type SPIFFEFederationBundleSourceStatic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SPIFFE JWKS bundle.
	Bundle        string `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SPIFFEFederationBundleSourceStatic) Reset() {
	*x = SPIFFEFederationBundleSourceStatic{}
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPIFFEFederationBundleSourceStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFEFederationBundleSourceStatic) ProtoMessage() {}

func (x *SPIFFEFederationBundleSourceStatic) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFEFederationBundleSourceStatic.ProtoReflect.Descriptor instead.
func (*SPIFFEFederationBundleSourceStatic) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_federation_proto_rawDescGZIP(), []int{1}
}

func (x *SPIFFEFederationBundleSourceStatic) GetBundle() string {
	if x != nil {
		return x.Bundle
	}
	return ""
}

// SPIFFEFederationBundleSourceHTTPSWeb is a bundle source that fetches the bundle
// from a HTTPS endpoint that is protected by a Web PKI certificate.
type SPIFFEFederationBundleSourceHTTPSWeb struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL of the SPIFFE Bundle Endpoint.
	BundleEndpointUrl string `protobuf:"bytes,1,opt,name=bundle_endpoint_url,json=bundleEndpointUrl,proto3" json:"bundle_endpoint_url,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SPIFFEFederationBundleSourceHTTPSWeb) Reset() {
	*x = SPIFFEFederationBundleSourceHTTPSWeb{}
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPIFFEFederationBundleSourceHTTPSWeb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFEFederationBundleSourceHTTPSWeb) ProtoMessage() {}

func (x *SPIFFEFederationBundleSourceHTTPSWeb) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFEFederationBundleSourceHTTPSWeb.ProtoReflect.Descriptor instead.
func (*SPIFFEFederationBundleSourceHTTPSWeb) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_federation_proto_rawDescGZIP(), []int{2}
}

func (x *SPIFFEFederationBundleSourceHTTPSWeb) GetBundleEndpointUrl() string {
	if x != nil {
		return x.BundleEndpointUrl
	}
	return ""
}

// SPIFFEFederationBundleSource configures how the federation bundle is sourced.
// Only one field can be set.
type SPIFFEFederationBundleSource struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Static        *SPIFFEFederationBundleSourceStatic   `protobuf:"bytes,1,opt,name=static,proto3" json:"static,omitempty"`
	HttpsWeb      *SPIFFEFederationBundleSourceHTTPSWeb `protobuf:"bytes,2,opt,name=https_web,json=httpsWeb,proto3" json:"https_web,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SPIFFEFederationBundleSource) Reset() {
	*x = SPIFFEFederationBundleSource{}
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPIFFEFederationBundleSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFEFederationBundleSource) ProtoMessage() {}

func (x *SPIFFEFederationBundleSource) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFEFederationBundleSource.ProtoReflect.Descriptor instead.
func (*SPIFFEFederationBundleSource) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_federation_proto_rawDescGZIP(), []int{3}
}

func (x *SPIFFEFederationBundleSource) GetStatic() *SPIFFEFederationBundleSourceStatic {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *SPIFFEFederationBundleSource) GetHttpsWeb() *SPIFFEFederationBundleSourceHTTPSWeb {
	if x != nil {
		return x.HttpsWeb
	}
	return nil
}

// SPIFFEFederationSpec is the configuration of a trust domain federation.
type SPIFFEFederationSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source of the federation bundle.
	BundleSource  *SPIFFEFederationBundleSource `protobuf:"bytes,1,opt,name=bundle_source,json=bundleSource,proto3" json:"bundle_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SPIFFEFederationSpec) Reset() {
	*x = SPIFFEFederationSpec{}
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPIFFEFederationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFEFederationSpec) ProtoMessage() {}

func (x *SPIFFEFederationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFEFederationSpec.ProtoReflect.Descriptor instead.
func (*SPIFFEFederationSpec) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_federation_proto_rawDescGZIP(), []int{4}
}

func (x *SPIFFEFederationSpec) GetBundleSource() *SPIFFEFederationBundleSource {
	if x != nil {
		return x.BundleSource
	}
	return nil
}

// FederationStatus is the status of a trust domain federation.
type SPIFFEFederationStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The most recently fetched bundle from the federated trust domain.
	CurrentBundle string `protobuf:"bytes,1,opt,name=current_bundle,json=currentBundle,proto3" json:"current_bundle,omitempty"`
	// The time that the most recently fetched bundle was obtained.
	CurrentBundleSyncedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=current_bundle_synced_at,json=currentBundleSyncedAt,proto3" json:"current_bundle_synced_at,omitempty"`
	// The time that this SPIFFE federation should be synced again. This is
	// usually determined by the refresh hint provided within the current bundle
	// but this can be overridden by the server where the provided refresh hint
	// is not appropriate.
	//
	// A value of zero indicates that an automatic sync is not scheduled (e.g.
	// because the bundle source is static).
	NextSyncAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=next_sync_at,json=nextSyncAt,proto3" json:"next_sync_at,omitempty"`
	// The SPIFFEFederationBundleSource that was used for the currently synced
	// bundle. This allows the bundle to be resynced if the source changes.
	CurrentBundleSyncedFrom *SPIFFEFederationBundleSource `protobuf:"bytes,5,opt,name=current_bundle_synced_from,json=currentBundleSyncedFrom,proto3" json:"current_bundle_synced_from,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SPIFFEFederationStatus) Reset() {
	*x = SPIFFEFederationStatus{}
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPIFFEFederationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPIFFEFederationStatus) ProtoMessage() {}

func (x *SPIFFEFederationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_machineid_v1_federation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPIFFEFederationStatus.ProtoReflect.Descriptor instead.
func (*SPIFFEFederationStatus) Descriptor() ([]byte, []int) {
	return file_teleport_machineid_v1_federation_proto_rawDescGZIP(), []int{5}
}

func (x *SPIFFEFederationStatus) GetCurrentBundle() string {
	if x != nil {
		return x.CurrentBundle
	}
	return ""
}

func (x *SPIFFEFederationStatus) GetCurrentBundleSyncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentBundleSyncedAt
	}
	return nil
}

func (x *SPIFFEFederationStatus) GetNextSyncAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextSyncAt
	}
	return nil
}

func (x *SPIFFEFederationStatus) GetCurrentBundleSyncedFrom() *SPIFFEFederationBundleSource {
	if x != nil {
		return x.CurrentBundleSyncedFrom
	}
	return nil
}

var File_teleport_machineid_v1_federation_proto protoreflect.FileDescriptor

const file_teleport_machineid_v1_federation_proto_rawDesc = "" +
	"\n" +
	"&teleport/machineid/v1/federation.proto\x12\x15teleport.machineid.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!teleport/header/v1/metadata.proto\"\x9d\x02\n" +
	"\x10SPIFFEFederation\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x02 \x01(\tR\asubKind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x128\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1c.teleport.header.v1.MetadataR\bmetadata\x12?\n" +
	"\x04spec\x18\x05 \x01(\v2+.teleport.machineid.v1.SPIFFEFederationSpecR\x04spec\x12E\n" +
	"\x06status\x18\x06 \x01(\v2-.teleport.machineid.v1.SPIFFEFederationStatusR\x06status\"<\n" +
	"\"SPIFFEFederationBundleSourceStatic\x12\x16\n" +
	"\x06bundle\x18\x01 \x01(\tR\x06bundle\"V\n" +
	"$SPIFFEFederationBundleSourceHTTPSWeb\x12.\n" +
	"\x13bundle_endpoint_url\x18\x01 \x01(\tR\x11bundleEndpointUrl\"\xcb\x01\n" +
	"\x1cSPIFFEFederationBundleSource\x12Q\n" +
	"\x06static\x18\x01 \x01(\v29.teleport.machineid.v1.SPIFFEFederationBundleSourceStaticR\x06static\x12X\n" +
	"\thttps_web\x18\x02 \x01(\v2;.teleport.machineid.v1.SPIFFEFederationBundleSourceHTTPSWebR\bhttpsWeb\"p\n" +
	"\x14SPIFFEFederationSpec\x12X\n" +
	"\rbundle_source\x18\x01 \x01(\v23.teleport.machineid.v1.SPIFFEFederationBundleSourceR\fbundleSource\"\xe7\x02\n" +
	"\x16SPIFFEFederationStatus\x12%\n" +
	"\x0ecurrent_bundle\x18\x01 \x01(\tR\rcurrentBundle\x12S\n" +
	"\x18current_bundle_synced_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x15currentBundleSyncedAt\x12<\n" +
	"\fnext_sync_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"nextSyncAt\x12p\n" +
	"\x1acurrent_bundle_synced_from\x18\x05 \x01(\v23.teleport.machineid.v1.SPIFFEFederationBundleSourceR\x17currentBundleSyncedFromJ\x04\b\x03\x10\x04R\x1bcurrent_bundle_refresh_hintBVZTgithub.com/gravitational/teleport/api/gen/proto/go/teleport/machineid/v1;machineidv1b\x06proto3"

var (
	file_teleport_machineid_v1_federation_proto_rawDescOnce sync.Once
	file_teleport_machineid_v1_federation_proto_rawDescData []byte
)

func file_teleport_machineid_v1_federation_proto_rawDescGZIP() []byte {
	file_teleport_machineid_v1_federation_proto_rawDescOnce.Do(func() {
		file_teleport_machineid_v1_federation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_machineid_v1_federation_proto_rawDesc), len(file_teleport_machineid_v1_federation_proto_rawDesc)))
	})
	return file_teleport_machineid_v1_federation_proto_rawDescData
}

var file_teleport_machineid_v1_federation_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_teleport_machineid_v1_federation_proto_goTypes = []any{
	(*SPIFFEFederation)(nil),                     // 0: teleport.machineid.v1.SPIFFEFederation
	(*SPIFFEFederationBundleSourceStatic)(nil),   // 1: teleport.machineid.v1.SPIFFEFederationBundleSourceStatic
	(*SPIFFEFederationBundleSourceHTTPSWeb)(nil), // 2: teleport.machineid.v1.SPIFFEFederationBundleSourceHTTPSWeb
	(*SPIFFEFederationBundleSource)(nil),         // 3: teleport.machineid.v1.SPIFFEFederationBundleSource
	(*SPIFFEFederationSpec)(nil),                 // 4: teleport.machineid.v1.SPIFFEFederationSpec
	(*SPIFFEFederationStatus)(nil),               // 5: teleport.machineid.v1.SPIFFEFederationStatus
	(*v1.Metadata)(nil),                          // 6: teleport.header.v1.Metadata
	(*timestamppb.Timestamp)(nil),                // 7: google.protobuf.Timestamp
}
var file_teleport_machineid_v1_federation_proto_depIdxs = []int32{
	6, // 0: teleport.machineid.v1.SPIFFEFederation.metadata:type_name -> teleport.header.v1.Metadata
	4, // 1: teleport.machineid.v1.SPIFFEFederation.spec:type_name -> teleport.machineid.v1.SPIFFEFederationSpec
	5, // 2: teleport.machineid.v1.SPIFFEFederation.status:type_name -> teleport.machineid.v1.SPIFFEFederationStatus
	1, // 3: teleport.machineid.v1.SPIFFEFederationBundleSource.static:type_name -> teleport.machineid.v1.SPIFFEFederationBundleSourceStatic
	2, // 4: teleport.machineid.v1.SPIFFEFederationBundleSource.https_web:type_name -> teleport.machineid.v1.SPIFFEFederationBundleSourceHTTPSWeb
	3, // 5: teleport.machineid.v1.SPIFFEFederationSpec.bundle_source:type_name -> teleport.machineid.v1.SPIFFEFederationBundleSource
	7, // 6: teleport.machineid.v1.SPIFFEFederationStatus.current_bundle_synced_at:type_name -> google.protobuf.Timestamp
	7, // 7: teleport.machineid.v1.SPIFFEFederationStatus.next_sync_at:type_name -> google.protobuf.Timestamp
	3, // 8: teleport.machineid.v1.SPIFFEFederationStatus.current_bundle_synced_from:type_name -> teleport.machineid.v1.SPIFFEFederationBundleSource
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_teleport_machineid_v1_federation_proto_init() }
func file_teleport_machineid_v1_federation_proto_init() {
	if File_teleport_machineid_v1_federation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_machineid_v1_federation_proto_rawDesc), len(file_teleport_machineid_v1_federation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_machineid_v1_federation_proto_goTypes,
		DependencyIndexes: file_teleport_machineid_v1_federation_proto_depIdxs,
		MessageInfos:      file_teleport_machineid_v1_federation_proto_msgTypes,
	}.Build()
	File_teleport_machineid_v1_federation_proto = out.File
	file_teleport_machineid_v1_federation_proto_goTypes = nil
	file_teleport_machineid_v1_federation_proto_depIdxs = nil
}
