// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/integration/v1/awsra_service.proto

package integrationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AWSRolesAnywhereService_AWSRolesAnywherePing_FullMethodName      = "/teleport.integration.v1.AWSRolesAnywhereService/AWSRolesAnywherePing"
	AWSRolesAnywhereService_ListRolesAnywhereProfiles_FullMethodName = "/teleport.integration.v1.AWSRolesAnywhereService/ListRolesAnywhereProfiles"
)

// AWSRolesAnywhereServiceClient is the client API for AWSRolesAnywhereService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AWSRolesAnywhereService provides access to AWS APIs using the AWS Roles Anywhere Integration.
type AWSRolesAnywhereServiceClient interface {
	// AWSRolesAnywherePing does an health check for the integration.
	// Returns the caller identity and the number of AWS Roles Anywhere Profiles that are active.
	// It uses the following APIs:
	// https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html
	// https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_ListProfiles.html
	AWSRolesAnywherePing(ctx context.Context, in *AWSRolesAnywherePingRequest, opts ...grpc.CallOption) (*AWSRolesAnywherePingResponse, error)
	// ListRolesAnywhereProfiles lists the AWS Roles Anywhere Profiles that are configured in the integration.
	// It uses the following API:
	// https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_ListProfiles.html
	// https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_ListTagsForResource.html
	ListRolesAnywhereProfiles(ctx context.Context, in *ListRolesAnywhereProfilesRequest, opts ...grpc.CallOption) (*ListRolesAnywhereProfilesResponse, error)
}

type aWSRolesAnywhereServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSRolesAnywhereServiceClient(cc grpc.ClientConnInterface) AWSRolesAnywhereServiceClient {
	return &aWSRolesAnywhereServiceClient{cc}
}

func (c *aWSRolesAnywhereServiceClient) AWSRolesAnywherePing(ctx context.Context, in *AWSRolesAnywherePingRequest, opts ...grpc.CallOption) (*AWSRolesAnywherePingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AWSRolesAnywherePingResponse)
	err := c.cc.Invoke(ctx, AWSRolesAnywhereService_AWSRolesAnywherePing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aWSRolesAnywhereServiceClient) ListRolesAnywhereProfiles(ctx context.Context, in *ListRolesAnywhereProfilesRequest, opts ...grpc.CallOption) (*ListRolesAnywhereProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesAnywhereProfilesResponse)
	err := c.cc.Invoke(ctx, AWSRolesAnywhereService_ListRolesAnywhereProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AWSRolesAnywhereServiceServer is the server API for AWSRolesAnywhereService service.
// All implementations must embed UnimplementedAWSRolesAnywhereServiceServer
// for forward compatibility.
//
// AWSRolesAnywhereService provides access to AWS APIs using the AWS Roles Anywhere Integration.
type AWSRolesAnywhereServiceServer interface {
	// AWSRolesAnywherePing does an health check for the integration.
	// Returns the caller identity and the number of AWS Roles Anywhere Profiles that are active.
	// It uses the following APIs:
	// https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html
	// https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_ListProfiles.html
	AWSRolesAnywherePing(context.Context, *AWSRolesAnywherePingRequest) (*AWSRolesAnywherePingResponse, error)
	// ListRolesAnywhereProfiles lists the AWS Roles Anywhere Profiles that are configured in the integration.
	// It uses the following API:
	// https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_ListProfiles.html
	// https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_ListTagsForResource.html
	ListRolesAnywhereProfiles(context.Context, *ListRolesAnywhereProfilesRequest) (*ListRolesAnywhereProfilesResponse, error)
	mustEmbedUnimplementedAWSRolesAnywhereServiceServer()
}

// UnimplementedAWSRolesAnywhereServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAWSRolesAnywhereServiceServer struct{}

func (UnimplementedAWSRolesAnywhereServiceServer) AWSRolesAnywherePing(context.Context, *AWSRolesAnywherePingRequest) (*AWSRolesAnywherePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AWSRolesAnywherePing not implemented")
}
func (UnimplementedAWSRolesAnywhereServiceServer) ListRolesAnywhereProfiles(context.Context, *ListRolesAnywhereProfilesRequest) (*ListRolesAnywhereProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolesAnywhereProfiles not implemented")
}
func (UnimplementedAWSRolesAnywhereServiceServer) mustEmbedUnimplementedAWSRolesAnywhereServiceServer() {
}
func (UnimplementedAWSRolesAnywhereServiceServer) testEmbeddedByValue() {}

// UnsafeAWSRolesAnywhereServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWSRolesAnywhereServiceServer will
// result in compilation errors.
type UnsafeAWSRolesAnywhereServiceServer interface {
	mustEmbedUnimplementedAWSRolesAnywhereServiceServer()
}

func RegisterAWSRolesAnywhereServiceServer(s grpc.ServiceRegistrar, srv AWSRolesAnywhereServiceServer) {
	// If the following call pancis, it indicates UnimplementedAWSRolesAnywhereServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AWSRolesAnywhereService_ServiceDesc, srv)
}

func _AWSRolesAnywhereService_AWSRolesAnywherePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSRolesAnywherePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSRolesAnywhereServiceServer).AWSRolesAnywherePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AWSRolesAnywhereService_AWSRolesAnywherePing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSRolesAnywhereServiceServer).AWSRolesAnywherePing(ctx, req.(*AWSRolesAnywherePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AWSRolesAnywhereService_ListRolesAnywhereProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesAnywhereProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSRolesAnywhereServiceServer).ListRolesAnywhereProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AWSRolesAnywhereService_ListRolesAnywhereProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSRolesAnywhereServiceServer).ListRolesAnywhereProfiles(ctx, req.(*ListRolesAnywhereProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AWSRolesAnywhereService_ServiceDesc is the grpc.ServiceDesc for AWSRolesAnywhereService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWSRolesAnywhereService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.integration.v1.AWSRolesAnywhereService",
	HandlerType: (*AWSRolesAnywhereServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AWSRolesAnywherePing",
			Handler:    _AWSRolesAnywhereService_AWSRolesAnywherePing_Handler,
		},
		{
			MethodName: "ListRolesAnywhereProfiles",
			Handler:    _AWSRolesAnywhereService_ListRolesAnywhereProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/integration/v1/awsra_service.proto",
}
