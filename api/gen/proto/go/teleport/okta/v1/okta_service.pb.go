// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: teleport/okta/v1/okta_service.proto

package oktav1

import (
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListOktaImportRulesRequest is the request for listing paginated Okta import rules.
type ListOktaImportRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size is the number of results to return. If page_size is 0, a default page size of 200 will be chosen.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is the next_token value returned from a previous List request if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListOktaImportRulesRequest) Reset() {
	*x = ListOktaImportRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOktaImportRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaImportRulesRequest) ProtoMessage() {}

func (x *ListOktaImportRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaImportRulesRequest.ProtoReflect.Descriptor instead.
func (*ListOktaImportRulesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListOktaImportRulesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOktaImportRulesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListOktaImportRulesResponse is the response for listing paginated Okta import rules.
type ListOktaImportRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// import_rules is the list of import rules.
	ImportRules []*types.OktaImportRuleV1 `protobuf:"bytes,1,rep,name=import_rules,json=importRules,proto3" json:"import_rules,omitempty"`
	// next_page_token is the next page token. If there are no more results, it will be empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListOktaImportRulesResponse) Reset() {
	*x = ListOktaImportRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOktaImportRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaImportRulesResponse) ProtoMessage() {}

func (x *ListOktaImportRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaImportRulesResponse.ProtoReflect.Descriptor instead.
func (*ListOktaImportRulesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListOktaImportRulesResponse) GetImportRules() []*types.OktaImportRuleV1 {
	if x != nil {
		return x.ImportRules
	}
	return nil
}

func (x *ListOktaImportRulesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetOktaImportRuleRequest is the request for retrieving an Okta import rule.
type GetOktaImportRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the Okta import rule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOktaImportRuleRequest) Reset() {
	*x = GetOktaImportRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOktaImportRuleRequest) ProtoMessage() {}

func (x *GetOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*GetOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetOktaImportRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CreateOktaImportRuleRequest is a request for creating an Okta import rule.
type CreateOktaImportRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// import_rule is the Okta import rule to create.
	ImportRule *types.OktaImportRuleV1 `protobuf:"bytes,1,opt,name=import_rule,json=importRule,proto3" json:"import_rule,omitempty"`
}

func (x *CreateOktaImportRuleRequest) Reset() {
	*x = CreateOktaImportRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOktaImportRuleRequest) ProtoMessage() {}

func (x *CreateOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOktaImportRuleRequest) GetImportRule() *types.OktaImportRuleV1 {
	if x != nil {
		return x.ImportRule
	}
	return nil
}

// UpdateOktaImportRuleRequest is a request for updating an Okta import rule.
type UpdateOktaImportRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// import_rule is the Okta import rule to update.
	ImportRule *types.OktaImportRuleV1 `protobuf:"bytes,1,opt,name=import_rule,json=importRule,proto3" json:"import_rule,omitempty"`
}

func (x *UpdateOktaImportRuleRequest) Reset() {
	*x = UpdateOktaImportRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOktaImportRuleRequest) ProtoMessage() {}

func (x *UpdateOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateOktaImportRuleRequest) GetImportRule() *types.OktaImportRuleV1 {
	if x != nil {
		return x.ImportRule
	}
	return nil
}

// DeleteOktaImportRuleRequest is the request for deleting an Okta import rule.
type DeleteOktaImportRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the Okta import rule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOktaImportRuleRequest) Reset() {
	*x = DeleteOktaImportRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOktaImportRuleRequest) ProtoMessage() {}

func (x *DeleteOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteOktaImportRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteAllOktaImportRulesRequest is the request for deleting all Okta import rules.
type DeleteAllOktaImportRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAllOktaImportRulesRequest) Reset() {
	*x = DeleteAllOktaImportRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllOktaImportRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllOktaImportRulesRequest) ProtoMessage() {}

func (x *DeleteAllOktaImportRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllOktaImportRulesRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllOktaImportRulesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{6}
}

// ListOktaAssignmentsRequest is the request for listing paginated Okta assignments.
type ListOktaAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size is the number of results to return. If page_size is 0, a default page size of 200 will be chosen.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is the next page token to use when retrieving results.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListOktaAssignmentsRequest) Reset() {
	*x = ListOktaAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOktaAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaAssignmentsRequest) ProtoMessage() {}

func (x *ListOktaAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ListOktaAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListOktaAssignmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOktaAssignmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListOktaAssignmentsResponse is the response for listing paginated Okta assignments.
type ListOktaAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assignments is the list of assignments.
	Assignments []*types.OktaAssignmentV1 `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	// next_page_token is the next page token. If there are no more results, it will be empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListOktaAssignmentsResponse) Reset() {
	*x = ListOktaAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOktaAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaAssignmentsResponse) ProtoMessage() {}

func (x *ListOktaAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*ListOktaAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListOktaAssignmentsResponse) GetAssignments() []*types.OktaAssignmentV1 {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *ListOktaAssignmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetOktaAssignmentRequest is the request for retrieving an Okta assignment.
type GetOktaAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the Okta assignment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOktaAssignmentRequest) Reset() {
	*x = GetOktaAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOktaAssignmentRequest) ProtoMessage() {}

func (x *GetOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*GetOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetOktaAssignmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CreateOktaAssignmentRequest is a request for creating an Okta assignment.
type CreateOktaAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assignment is the Okta assignment to create.
	Assignment *types.OktaAssignmentV1 `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *CreateOktaAssignmentRequest) Reset() {
	*x = CreateOktaAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOktaAssignmentRequest) ProtoMessage() {}

func (x *CreateOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*CreateOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{10}
}

func (x *CreateOktaAssignmentRequest) GetAssignment() *types.OktaAssignmentV1 {
	if x != nil {
		return x.Assignment
	}
	return nil
}

// UpdateOktaAssignmentRequest is a request for updating an Okta assignment.
type UpdateOktaAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assignment is the Okta assignment to update.
	Assignment *types.OktaAssignmentV1 `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *UpdateOktaAssignmentRequest) Reset() {
	*x = UpdateOktaAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOktaAssignmentRequest) ProtoMessage() {}

func (x *UpdateOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateOktaAssignmentRequest) GetAssignment() *types.OktaAssignmentV1 {
	if x != nil {
		return x.Assignment
	}
	return nil
}

// UpdateOktaAssignmentStatusRequest is a request for updating an Okta assignment status.
type UpdateOktaAssignmentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the Okta assignment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// status is the status to update the assignment to.
	Status types.OktaAssignmentSpecV1_OktaAssignmentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=types.OktaAssignmentSpecV1_OktaAssignmentStatus" json:"status,omitempty"`
	// timeHasPassed is the amount of time that must have passed since the last transition
	// in order to set the new transition.
	TimeHasPassed *durationpb.Duration `protobuf:"bytes,3,opt,name=time_has_passed,json=timeHasPassed,proto3" json:"time_has_passed,omitempty"`
}

func (x *UpdateOktaAssignmentStatusRequest) Reset() {
	*x = UpdateOktaAssignmentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOktaAssignmentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOktaAssignmentStatusRequest) ProtoMessage() {}

func (x *UpdateOktaAssignmentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOktaAssignmentStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateOktaAssignmentStatusRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateOktaAssignmentStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOktaAssignmentStatusRequest) GetStatus() types.OktaAssignmentSpecV1_OktaAssignmentStatus {
	if x != nil {
		return x.Status
	}
	return types.OktaAssignmentSpecV1_OktaAssignmentStatus(0)
}

func (x *UpdateOktaAssignmentStatusRequest) GetTimeHasPassed() *durationpb.Duration {
	if x != nil {
		return x.TimeHasPassed
	}
	return nil
}

// DeleteOktaAssignmentRequest is the request for deleting an Okta assignment.
type DeleteOktaAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the Okta assignment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOktaAssignmentRequest) Reset() {
	*x = DeleteOktaAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOktaAssignmentRequest) ProtoMessage() {}

func (x *DeleteOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteOktaAssignmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteAllOktaAssignmentsRequest is the request for deleting all Okta assignments.
type DeleteAllOktaAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAllOktaAssignmentsRequest) Reset() {
	*x = DeleteAllOktaAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllOktaAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllOktaAssignmentsRequest) ProtoMessage() {}

func (x *DeleteAllOktaAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllOktaAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllOktaAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{14}
}

var File_teleport_okta_v1_okta_service_proto protoreflect.FileDescriptor

var file_teleport_okta_v1_okta_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x6b, 0x74, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31,
	0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x56, 0x31, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x57,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x52, 0x0a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x56, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b,
	0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74,
	0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x31, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xa0, 0x0a, 0x0a, 0x0b, 0x4f, 0x6b, 0x74, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x5e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x5e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74,
	0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x12, 0x5e, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x12, 0x5e, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x12, 0x69, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b,
	0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x6b, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x3b, 0x6f, 0x6b, 0x74, 0x61, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_okta_v1_okta_service_proto_rawDescOnce sync.Once
	file_teleport_okta_v1_okta_service_proto_rawDescData = file_teleport_okta_v1_okta_service_proto_rawDesc
)

func file_teleport_okta_v1_okta_service_proto_rawDescGZIP() []byte {
	file_teleport_okta_v1_okta_service_proto_rawDescOnce.Do(func() {
		file_teleport_okta_v1_okta_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_okta_v1_okta_service_proto_rawDescData)
	})
	return file_teleport_okta_v1_okta_service_proto_rawDescData
}

var file_teleport_okta_v1_okta_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_teleport_okta_v1_okta_service_proto_goTypes = []any{
	(*ListOktaImportRulesRequest)(nil),                   // 0: teleport.okta.v1.ListOktaImportRulesRequest
	(*ListOktaImportRulesResponse)(nil),                  // 1: teleport.okta.v1.ListOktaImportRulesResponse
	(*GetOktaImportRuleRequest)(nil),                     // 2: teleport.okta.v1.GetOktaImportRuleRequest
	(*CreateOktaImportRuleRequest)(nil),                  // 3: teleport.okta.v1.CreateOktaImportRuleRequest
	(*UpdateOktaImportRuleRequest)(nil),                  // 4: teleport.okta.v1.UpdateOktaImportRuleRequest
	(*DeleteOktaImportRuleRequest)(nil),                  // 5: teleport.okta.v1.DeleteOktaImportRuleRequest
	(*DeleteAllOktaImportRulesRequest)(nil),              // 6: teleport.okta.v1.DeleteAllOktaImportRulesRequest
	(*ListOktaAssignmentsRequest)(nil),                   // 7: teleport.okta.v1.ListOktaAssignmentsRequest
	(*ListOktaAssignmentsResponse)(nil),                  // 8: teleport.okta.v1.ListOktaAssignmentsResponse
	(*GetOktaAssignmentRequest)(nil),                     // 9: teleport.okta.v1.GetOktaAssignmentRequest
	(*CreateOktaAssignmentRequest)(nil),                  // 10: teleport.okta.v1.CreateOktaAssignmentRequest
	(*UpdateOktaAssignmentRequest)(nil),                  // 11: teleport.okta.v1.UpdateOktaAssignmentRequest
	(*UpdateOktaAssignmentStatusRequest)(nil),            // 12: teleport.okta.v1.UpdateOktaAssignmentStatusRequest
	(*DeleteOktaAssignmentRequest)(nil),                  // 13: teleport.okta.v1.DeleteOktaAssignmentRequest
	(*DeleteAllOktaAssignmentsRequest)(nil),              // 14: teleport.okta.v1.DeleteAllOktaAssignmentsRequest
	(*types.OktaImportRuleV1)(nil),                       // 15: types.OktaImportRuleV1
	(*types.OktaAssignmentV1)(nil),                       // 16: types.OktaAssignmentV1
	(types.OktaAssignmentSpecV1_OktaAssignmentStatus)(0), // 17: types.OktaAssignmentSpecV1.OktaAssignmentStatus
	(*durationpb.Duration)(nil),                          // 18: google.protobuf.Duration
	(*emptypb.Empty)(nil),                                // 19: google.protobuf.Empty
}
var file_teleport_okta_v1_okta_service_proto_depIdxs = []int32{
	15, // 0: teleport.okta.v1.ListOktaImportRulesResponse.import_rules:type_name -> types.OktaImportRuleV1
	15, // 1: teleport.okta.v1.CreateOktaImportRuleRequest.import_rule:type_name -> types.OktaImportRuleV1
	15, // 2: teleport.okta.v1.UpdateOktaImportRuleRequest.import_rule:type_name -> types.OktaImportRuleV1
	16, // 3: teleport.okta.v1.ListOktaAssignmentsResponse.assignments:type_name -> types.OktaAssignmentV1
	16, // 4: teleport.okta.v1.CreateOktaAssignmentRequest.assignment:type_name -> types.OktaAssignmentV1
	16, // 5: teleport.okta.v1.UpdateOktaAssignmentRequest.assignment:type_name -> types.OktaAssignmentV1
	17, // 6: teleport.okta.v1.UpdateOktaAssignmentStatusRequest.status:type_name -> types.OktaAssignmentSpecV1.OktaAssignmentStatus
	18, // 7: teleport.okta.v1.UpdateOktaAssignmentStatusRequest.time_has_passed:type_name -> google.protobuf.Duration
	0,  // 8: teleport.okta.v1.OktaService.ListOktaImportRules:input_type -> teleport.okta.v1.ListOktaImportRulesRequest
	2,  // 9: teleport.okta.v1.OktaService.GetOktaImportRule:input_type -> teleport.okta.v1.GetOktaImportRuleRequest
	3,  // 10: teleport.okta.v1.OktaService.CreateOktaImportRule:input_type -> teleport.okta.v1.CreateOktaImportRuleRequest
	4,  // 11: teleport.okta.v1.OktaService.UpdateOktaImportRule:input_type -> teleport.okta.v1.UpdateOktaImportRuleRequest
	5,  // 12: teleport.okta.v1.OktaService.DeleteOktaImportRule:input_type -> teleport.okta.v1.DeleteOktaImportRuleRequest
	6,  // 13: teleport.okta.v1.OktaService.DeleteAllOktaImportRules:input_type -> teleport.okta.v1.DeleteAllOktaImportRulesRequest
	7,  // 14: teleport.okta.v1.OktaService.ListOktaAssignments:input_type -> teleport.okta.v1.ListOktaAssignmentsRequest
	9,  // 15: teleport.okta.v1.OktaService.GetOktaAssignment:input_type -> teleport.okta.v1.GetOktaAssignmentRequest
	10, // 16: teleport.okta.v1.OktaService.CreateOktaAssignment:input_type -> teleport.okta.v1.CreateOktaAssignmentRequest
	11, // 17: teleport.okta.v1.OktaService.UpdateOktaAssignment:input_type -> teleport.okta.v1.UpdateOktaAssignmentRequest
	12, // 18: teleport.okta.v1.OktaService.UpdateOktaAssignmentStatus:input_type -> teleport.okta.v1.UpdateOktaAssignmentStatusRequest
	13, // 19: teleport.okta.v1.OktaService.DeleteOktaAssignment:input_type -> teleport.okta.v1.DeleteOktaAssignmentRequest
	14, // 20: teleport.okta.v1.OktaService.DeleteAllOktaAssignments:input_type -> teleport.okta.v1.DeleteAllOktaAssignmentsRequest
	1,  // 21: teleport.okta.v1.OktaService.ListOktaImportRules:output_type -> teleport.okta.v1.ListOktaImportRulesResponse
	15, // 22: teleport.okta.v1.OktaService.GetOktaImportRule:output_type -> types.OktaImportRuleV1
	15, // 23: teleport.okta.v1.OktaService.CreateOktaImportRule:output_type -> types.OktaImportRuleV1
	15, // 24: teleport.okta.v1.OktaService.UpdateOktaImportRule:output_type -> types.OktaImportRuleV1
	19, // 25: teleport.okta.v1.OktaService.DeleteOktaImportRule:output_type -> google.protobuf.Empty
	19, // 26: teleport.okta.v1.OktaService.DeleteAllOktaImportRules:output_type -> google.protobuf.Empty
	8,  // 27: teleport.okta.v1.OktaService.ListOktaAssignments:output_type -> teleport.okta.v1.ListOktaAssignmentsResponse
	16, // 28: teleport.okta.v1.OktaService.GetOktaAssignment:output_type -> types.OktaAssignmentV1
	16, // 29: teleport.okta.v1.OktaService.CreateOktaAssignment:output_type -> types.OktaAssignmentV1
	16, // 30: teleport.okta.v1.OktaService.UpdateOktaAssignment:output_type -> types.OktaAssignmentV1
	19, // 31: teleport.okta.v1.OktaService.UpdateOktaAssignmentStatus:output_type -> google.protobuf.Empty
	19, // 32: teleport.okta.v1.OktaService.DeleteOktaAssignment:output_type -> google.protobuf.Empty
	19, // 33: teleport.okta.v1.OktaService.DeleteAllOktaAssignments:output_type -> google.protobuf.Empty
	21, // [21:34] is the sub-list for method output_type
	8,  // [8:21] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_teleport_okta_v1_okta_service_proto_init() }
func file_teleport_okta_v1_okta_service_proto_init() {
	if File_teleport_okta_v1_okta_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teleport_okta_v1_okta_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListOktaImportRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListOktaImportRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetOktaImportRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateOktaImportRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOktaImportRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteOktaImportRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAllOktaImportRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListOktaAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListOktaAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetOktaAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateOktaAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOktaAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateOktaAssignmentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteOktaAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_okta_v1_okta_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAllOktaAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_okta_v1_okta_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_okta_v1_okta_service_proto_goTypes,
		DependencyIndexes: file_teleport_okta_v1_okta_service_proto_depIdxs,
		MessageInfos:      file_teleport_okta_v1_okta_service_proto_msgTypes,
	}.Build()
	File_teleport_okta_v1_okta_service_proto = out.File
	file_teleport_okta_v1_okta_service_proto_rawDesc = nil
	file_teleport_okta_v1_okta_service_proto_goTypes = nil
	file_teleport_okta_v1_okta_service_proto_depIdxs = nil
}
