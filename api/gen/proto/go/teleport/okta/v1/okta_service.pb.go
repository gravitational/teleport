// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: teleport/okta/v1/okta_service.proto

package oktav1

import (
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetAppsRequest is the request message for filtering apps.
type GetAppsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of the Okta organization.
	OktaOrganizationUrl string `protobuf:"bytes,1,opt,name=okta_organization_url,json=oktaOrganizationUrl,proto3" json:"okta_organization_url,omitempty"`
	// Credentials to access the Okta API.
	ApiCredentials *OktaAPICredentials `protobuf:"bytes,2,opt,name=api_credentials,json=apiCredentials,proto3" json:"api_credentials,omitempty"`
	// List of filters to apply when fetching apps.
	Filters       []string `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAppsRequest) Reset() {
	*x = GetAppsRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppsRequest) ProtoMessage() {}

func (x *GetAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppsRequest.ProtoReflect.Descriptor instead.
func (*GetAppsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAppsRequest) GetOktaOrganizationUrl() string {
	if x != nil {
		return x.OktaOrganizationUrl
	}
	return ""
}

func (x *GetAppsRequest) GetApiCredentials() *OktaAPICredentials {
	if x != nil {
		return x.ApiCredentials
	}
	return nil
}

func (x *GetAppsRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

// GetAppsResponse is the response message for filtering apps.
type GetAppsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of apps that match the filter criteria.
	Apps          []*GetAppsResponse_App `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAppsResponse) Reset() {
	*x = GetAppsResponse{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppsResponse) ProtoMessage() {}

func (x *GetAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppsResponse.ProtoReflect.Descriptor instead.
func (*GetAppsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetAppsResponse) GetApps() []*GetAppsResponse_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

// GetGroupsRequest is the request message.
type GetGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of the Okta organization.
	OktaOrganizationUrl string `protobuf:"bytes,1,opt,name=okta_organization_url,json=oktaOrganizationUrl,proto3" json:"okta_organization_url,omitempty"`
	// Credentials to access the Okta API.
	ApiCredentials *OktaAPICredentials `protobuf:"bytes,2,opt,name=api_credentials,json=apiCredentials,proto3" json:"api_credentials,omitempty"`
	// List of filters to apply when fetching groups.
	Filters       []string `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupsRequest) Reset() {
	*x = GetGroupsRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsRequest) ProtoMessage() {}

func (x *GetGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetGroupsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetGroupsRequest) GetOktaOrganizationUrl() string {
	if x != nil {
		return x.OktaOrganizationUrl
	}
	return ""
}

func (x *GetGroupsRequest) GetApiCredentials() *OktaAPICredentials {
	if x != nil {
		return x.ApiCredentials
	}
	return nil
}

func (x *GetGroupsRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

// GetGroupsResponse is the response message for filtering groups.
type GetGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of groups that match the filter criteria.
	Groups        []*GetGroupsResponse_Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupsResponse) Reset() {
	*x = GetGroupsResponse{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsResponse) ProtoMessage() {}

func (x *GetGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupsResponse) GetGroups() []*GetGroupsResponse_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

// CreateIntegrationRequest is the request message for enrolling a new Okta integration.
type CreateIntegrationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of the Okta organization.
	OktaOrganizationUrl string `protobuf:"bytes,1,opt,name=okta_organization_url,json=oktaOrganizationUrl,proto3" json:"okta_organization_url,omitempty"`
	// Credentials to access the Okta API.
	ApiCredentials *OktaAPICredentials `protobuf:"bytes,2,opt,name=api_credentials,json=apiCredentials,proto3" json:"api_credentials,omitempty"`
	// SCIM token for integration.
	ScimToken string `protobuf:"bytes,3,opt,name=scim_token,json=scimToken,proto3" json:"scim_token,omitempty"`
	// Enable synchronization of access lists.
	EnableAccessListSync bool `protobuf:"varint,4,opt,name=enable_access_list_sync,json=enableAccessListSync,proto3" json:"enable_access_list_sync,omitempty"`
	// Enable user synchronization.
	EnableUserSync bool `protobuf:"varint,5,opt,name=enable_user_sync,json=enableUserSync,proto3" json:"enable_user_sync,omitempty"`
	// Enable synchronization of app groups.
	EnableAppGroupSync bool `protobuf:"varint,6,opt,name=enable_app_group_sync,json=enableAppGroupSync,proto3" json:"enable_app_group_sync,omitempty"`
	// Settings related to access list synchronization.
	AccessListSettings *AccessListSettings `protobuf:"bytes,7,opt,name=access_list_settings,json=accessListSettings,proto3" json:"access_list_settings,omitempty"`
	// Option to reuse an existing connector.
	ReuseConnector string `protobuf:"bytes,8,opt,name=reuse_connector,json=reuseConnector,proto3" json:"reuse_connector,omitempty"`
	// SSO metadata URL for integration.
	SsoMetadataUrl string `protobuf:"bytes,9,opt,name=sso_metadata_url,json=ssoMetadataUrl,proto3" json:"sso_metadata_url,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateIntegrationRequest) Reset() {
	*x = CreateIntegrationRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIntegrationRequest) ProtoMessage() {}

func (x *CreateIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIntegrationRequest.ProtoReflect.Descriptor instead.
func (*CreateIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateIntegrationRequest) GetOktaOrganizationUrl() string {
	if x != nil {
		return x.OktaOrganizationUrl
	}
	return ""
}

func (x *CreateIntegrationRequest) GetApiCredentials() *OktaAPICredentials {
	if x != nil {
		return x.ApiCredentials
	}
	return nil
}

func (x *CreateIntegrationRequest) GetScimToken() string {
	if x != nil {
		return x.ScimToken
	}
	return ""
}

func (x *CreateIntegrationRequest) GetEnableAccessListSync() bool {
	if x != nil {
		return x.EnableAccessListSync
	}
	return false
}

func (x *CreateIntegrationRequest) GetEnableUserSync() bool {
	if x != nil {
		return x.EnableUserSync
	}
	return false
}

func (x *CreateIntegrationRequest) GetEnableAppGroupSync() bool {
	if x != nil {
		return x.EnableAppGroupSync
	}
	return false
}

func (x *CreateIntegrationRequest) GetAccessListSettings() *AccessListSettings {
	if x != nil {
		return x.AccessListSettings
	}
	return nil
}

func (x *CreateIntegrationRequest) GetReuseConnector() string {
	if x != nil {
		return x.ReuseConnector
	}
	return ""
}

func (x *CreateIntegrationRequest) GetSsoMetadataUrl() string {
	if x != nil {
		return x.SsoMetadataUrl
	}
	return ""
}

// UpdateIntegrationRequest is the request message for updating an existing Okta integration.
type UpdateIntegrationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Credentials to access the Okta API.
	ApiCredentials *OktaAPICredentials `protobuf:"bytes,2,opt,name=api_credentials,json=apiCredentials,proto3" json:"api_credentials,omitempty"`
	// SCIM token for integration.
	ScimToken string `protobuf:"bytes,3,opt,name=scim_token,json=scimToken,proto3" json:"scim_token,omitempty"`
	// Enable synchronization of access lists.
	EnableAccessListSync bool `protobuf:"varint,4,opt,name=enable_access_list_sync,json=enableAccessListSync,proto3" json:"enable_access_list_sync,omitempty"`
	// Enable user synchronization.
	EnableUserSync bool `protobuf:"varint,5,opt,name=enable_user_sync,json=enableUserSync,proto3" json:"enable_user_sync,omitempty"`
	// Enable synchronization of app groups.
	EnableAppGroupSync bool `protobuf:"varint,6,opt,name=enable_app_group_sync,json=enableAppGroupSync,proto3" json:"enable_app_group_sync,omitempty"`
	// Settings related to access list synchronization.
	AccessListSettings *AccessListSettings `protobuf:"bytes,7,opt,name=access_list_settings,json=accessListSettings,proto3" json:"access_list_settings,omitempty"`
	// Option to reuse an existing connector.
	ReuseConnector string `protobuf:"bytes,8,opt,name=reuse_connector,json=reuseConnector,proto3" json:"reuse_connector,omitempty"`
	// SSO metadata URL for integration.
	SsoMetadataUrl string `protobuf:"bytes,9,opt,name=sso_metadata_url,json=ssoMetadataUrl,proto3" json:"sso_metadata_url,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateIntegrationRequest) Reset() {
	*x = UpdateIntegrationRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIntegrationRequest) ProtoMessage() {}

func (x *UpdateIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIntegrationRequest.ProtoReflect.Descriptor instead.
func (*UpdateIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateIntegrationRequest) GetApiCredentials() *OktaAPICredentials {
	if x != nil {
		return x.ApiCredentials
	}
	return nil
}

func (x *UpdateIntegrationRequest) GetScimToken() string {
	if x != nil {
		return x.ScimToken
	}
	return ""
}

func (x *UpdateIntegrationRequest) GetEnableAccessListSync() bool {
	if x != nil {
		return x.EnableAccessListSync
	}
	return false
}

func (x *UpdateIntegrationRequest) GetEnableUserSync() bool {
	if x != nil {
		return x.EnableUserSync
	}
	return false
}

func (x *UpdateIntegrationRequest) GetEnableAppGroupSync() bool {
	if x != nil {
		return x.EnableAppGroupSync
	}
	return false
}

func (x *UpdateIntegrationRequest) GetAccessListSettings() *AccessListSettings {
	if x != nil {
		return x.AccessListSettings
	}
	return nil
}

func (x *UpdateIntegrationRequest) GetReuseConnector() string {
	if x != nil {
		return x.ReuseConnector
	}
	return ""
}

func (x *UpdateIntegrationRequest) GetSsoMetadataUrl() string {
	if x != nil {
		return x.SsoMetadataUrl
	}
	return ""
}

// AccessListSettings contains the settings for access list synchronization.
type AccessListSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filters for groups to include in the access list.
	GroupFilters []string `protobuf:"bytes,2,rep,name=group_filters,json=groupFilters,proto3" json:"group_filters,omitempty"`
	// Filters for apps to include in the access list.
	AppFilters []string `protobuf:"bytes,3,rep,name=app_filters,json=appFilters,proto3" json:"app_filters,omitempty"`
	// Default owner for access list items.
	DefaultOwner  []string `protobuf:"bytes,4,rep,name=default_owner,json=defaultOwner,proto3" json:"default_owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessListSettings) Reset() {
	*x = AccessListSettings{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessListSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListSettings) ProtoMessage() {}

func (x *AccessListSettings) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListSettings.ProtoReflect.Descriptor instead.
func (*AccessListSettings) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{6}
}

func (x *AccessListSettings) GetGroupFilters() []string {
	if x != nil {
		return x.GroupFilters
	}
	return nil
}

func (x *AccessListSettings) GetAppFilters() []string {
	if x != nil {
		return x.AppFilters
	}
	return nil
}

func (x *AccessListSettings) GetDefaultOwner() []string {
	if x != nil {
		return x.DefaultOwner
	}
	return nil
}

// OktaAPICredentials provides the authentication details for accessing Okta API.
type OktaAPICredentials struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Auth:
	//
	//	*OktaAPICredentials_OauthId
	//	*OktaAPICredentials_SswsBearerToken
	Auth          isOktaAPICredentials_Auth `protobuf_oneof:"auth"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OktaAPICredentials) Reset() {
	*x = OktaAPICredentials{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OktaAPICredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OktaAPICredentials) ProtoMessage() {}

func (x *OktaAPICredentials) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OktaAPICredentials.ProtoReflect.Descriptor instead.
func (*OktaAPICredentials) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{7}
}

func (x *OktaAPICredentials) GetAuth() isOktaAPICredentials_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *OktaAPICredentials) GetOauthId() string {
	if x != nil {
		if x, ok := x.Auth.(*OktaAPICredentials_OauthId); ok {
			return x.OauthId
		}
	}
	return ""
}

func (x *OktaAPICredentials) GetSswsBearerToken() string {
	if x != nil {
		if x, ok := x.Auth.(*OktaAPICredentials_SswsBearerToken); ok {
			return x.SswsBearerToken
		}
	}
	return ""
}

type isOktaAPICredentials_Auth interface {
	isOktaAPICredentials_Auth()
}

type OktaAPICredentials_OauthId struct {
	// OAuth ClientID for authentication.
	OauthId string `protobuf:"bytes,1,opt,name=oauth_id,json=oauthId,proto3,oneof"`
}

type OktaAPICredentials_SswsBearerToken struct {
	// SSWS Bearer token for authentication.
	SswsBearerToken string `protobuf:"bytes,2,opt,name=ssws_bearer_token,json=sswsBearerToken,proto3,oneof"`
}

func (*OktaAPICredentials_OauthId) isOktaAPICredentials_Auth() {}

func (*OktaAPICredentials_SswsBearerToken) isOktaAPICredentials_Auth() {}

// CreateIntegrationResponse is the response message for enrolling a new Okta integration.
type CreateIntegrationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Plugin information.
	Plugin *types.PluginV1 `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	// Details of the connector.
	ConnectorInfo *ConnectorInfo `protobuf:"bytes,2,opt,name=connector_info,json=connectorInfo,proto3" json:"connector_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateIntegrationResponse) Reset() {
	*x = CreateIntegrationResponse{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIntegrationResponse) ProtoMessage() {}

func (x *CreateIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIntegrationResponse.ProtoReflect.Descriptor instead.
func (*CreateIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateIntegrationResponse) GetPlugin() *types.PluginV1 {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *CreateIntegrationResponse) GetConnectorInfo() *ConnectorInfo {
	if x != nil {
		return x.ConnectorInfo
	}
	return nil
}

// UpdateIntegrationResponse is the request for listing paginated Okta import rules.
type UpdateIntegrationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Plugin information.
	Plugin *types.PluginV1 `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	// Details of the connector.
	ConnectorInfo *ConnectorInfo `protobuf:"bytes,2,opt,name=connector_info,json=connectorInfo,proto3" json:"connector_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateIntegrationResponse) Reset() {
	*x = UpdateIntegrationResponse{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIntegrationResponse) ProtoMessage() {}

func (x *UpdateIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIntegrationResponse.ProtoReflect.Descriptor instead.
func (*UpdateIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateIntegrationResponse) GetPlugin() *types.PluginV1 {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *UpdateIntegrationResponse) GetConnectorInfo() *ConnectorInfo {
	if x != nil {
		return x.ConnectorInfo
	}
	return nil
}

// ConnectorInfo contains information about the connector.
type ConnectorInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Okta application ID.
	OktaAppId string `protobuf:"bytes,1,opt,name=okta_app_id,json=oktaAppId,proto3" json:"okta_app_id,omitempty"`
	// Name of the Okta application.
	OktaAppName string `protobuf:"bytes,2,opt,name=okta_app_name,json=oktaAppName,proto3" json:"okta_app_name,omitempty"`
	// Labels associated with the Okta application.
	OktaAppLabels string `protobuf:"bytes,3,opt,name=okta_app_labels,json=oktaAppLabels,proto3" json:"okta_app_labels,omitempty"`
	// Name of the Teleport connector.
	TeleportConnectorName string `protobuf:"bytes,4,opt,name=teleport_connector_name,json=teleportConnectorName,proto3" json:"teleport_connector_name,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ConnectorInfo) Reset() {
	*x = ConnectorInfo{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorInfo) ProtoMessage() {}

func (x *ConnectorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorInfo.ProtoReflect.Descriptor instead.
func (*ConnectorInfo) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectorInfo) GetOktaAppId() string {
	if x != nil {
		return x.OktaAppId
	}
	return ""
}

func (x *ConnectorInfo) GetOktaAppName() string {
	if x != nil {
		return x.OktaAppName
	}
	return ""
}

func (x *ConnectorInfo) GetOktaAppLabels() string {
	if x != nil {
		return x.OktaAppLabels
	}
	return ""
}

func (x *ConnectorInfo) GetTeleportConnectorName() string {
	if x != nil {
		return x.TeleportConnectorName
	}
	return ""
}

// ValidateClientCredentialsRequest is the request message for validating client credentials.
type ValidateClientCredentialsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of the Okta organization.
	OktaOrganizationUrl string `protobuf:"bytes,1,opt,name=okta_organization_url,json=oktaOrganizationUrl,proto3" json:"okta_organization_url,omitempty"`
	// Credentials to access the Okta API.
	ApiCredentials *OktaAPICredentials `protobuf:"bytes,2,opt,name=api_credentials,json=apiCredentials,proto3" json:"api_credentials,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateClientCredentialsRequest) Reset() {
	*x = ValidateClientCredentialsRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateClientCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateClientCredentialsRequest) ProtoMessage() {}

func (x *ValidateClientCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateClientCredentialsRequest.ProtoReflect.Descriptor instead.
func (*ValidateClientCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{11}
}

func (x *ValidateClientCredentialsRequest) GetOktaOrganizationUrl() string {
	if x != nil {
		return x.OktaOrganizationUrl
	}
	return ""
}

func (x *ValidateClientCredentialsRequest) GetApiCredentials() *OktaAPICredentials {
	if x != nil {
		return x.ApiCredentials
	}
	return nil
}

// ValidateClientCredentialsResponse is the response message for validating client credentials.
type ValidateClientCredentialsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateClientCredentialsResponse) Reset() {
	*x = ValidateClientCredentialsResponse{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateClientCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateClientCredentialsResponse) ProtoMessage() {}

func (x *ValidateClientCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateClientCredentialsResponse.ProtoReflect.Descriptor instead.
func (*ValidateClientCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{12}
}

// ListOktaImportRulesRequest is the request for listing paginated Okta import rules.
type ListOktaImportRulesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// page_size is the number of results to return. If page_size is 0, a default page size of 200 will be chosen.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is the next_token value returned from a previous List request if any.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOktaImportRulesRequest) Reset() {
	*x = ListOktaImportRulesRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOktaImportRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaImportRulesRequest) ProtoMessage() {}

func (x *ListOktaImportRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaImportRulesRequest.ProtoReflect.Descriptor instead.
func (*ListOktaImportRulesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListOktaImportRulesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOktaImportRulesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListOktaImportRulesResponse is the response for listing paginated Okta import rules.
type ListOktaImportRulesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// import_rules is the list of import rules.
	ImportRules []*types.OktaImportRuleV1 `protobuf:"bytes,1,rep,name=import_rules,json=importRules,proto3" json:"import_rules,omitempty"`
	// next_page_token is the next page token. If there are no more results, it will be empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOktaImportRulesResponse) Reset() {
	*x = ListOktaImportRulesResponse{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOktaImportRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaImportRulesResponse) ProtoMessage() {}

func (x *ListOktaImportRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaImportRulesResponse.ProtoReflect.Descriptor instead.
func (*ListOktaImportRulesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListOktaImportRulesResponse) GetImportRules() []*types.OktaImportRuleV1 {
	if x != nil {
		return x.ImportRules
	}
	return nil
}

func (x *ListOktaImportRulesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetOktaImportRuleRequest is the request for retrieving an Okta import rule.
type GetOktaImportRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the Okta import rule.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOktaImportRuleRequest) Reset() {
	*x = GetOktaImportRuleRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOktaImportRuleRequest) ProtoMessage() {}

func (x *GetOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*GetOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetOktaImportRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CreateOktaImportRuleRequest is a request for creating an Okta import rule.
type CreateOktaImportRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// import_rule is the Okta import rule to create.
	ImportRule    *types.OktaImportRuleV1 `protobuf:"bytes,1,opt,name=import_rule,json=importRule,proto3" json:"import_rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOktaImportRuleRequest) Reset() {
	*x = CreateOktaImportRuleRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOktaImportRuleRequest) ProtoMessage() {}

func (x *CreateOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateOktaImportRuleRequest) GetImportRule() *types.OktaImportRuleV1 {
	if x != nil {
		return x.ImportRule
	}
	return nil
}

// UpdateOktaImportRuleRequest is a request for updating an Okta import rule.
type UpdateOktaImportRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// import_rule is the Okta import rule to update.
	ImportRule    *types.OktaImportRuleV1 `protobuf:"bytes,1,opt,name=import_rule,json=importRule,proto3" json:"import_rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOktaImportRuleRequest) Reset() {
	*x = UpdateOktaImportRuleRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOktaImportRuleRequest) ProtoMessage() {}

func (x *UpdateOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateOktaImportRuleRequest) GetImportRule() *types.OktaImportRuleV1 {
	if x != nil {
		return x.ImportRule
	}
	return nil
}

// DeleteOktaImportRuleRequest is the request for deleting an Okta import rule.
type DeleteOktaImportRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the Okta import rule.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOktaImportRuleRequest) Reset() {
	*x = DeleteOktaImportRuleRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOktaImportRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOktaImportRuleRequest) ProtoMessage() {}

func (x *DeleteOktaImportRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOktaImportRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteOktaImportRuleRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteOktaImportRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteAllOktaImportRulesRequest is the request for deleting all Okta import rules.
type DeleteAllOktaImportRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAllOktaImportRulesRequest) Reset() {
	*x = DeleteAllOktaImportRulesRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAllOktaImportRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllOktaImportRulesRequest) ProtoMessage() {}

func (x *DeleteAllOktaImportRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllOktaImportRulesRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllOktaImportRulesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{19}
}

// ListOktaAssignmentsRequest is the request for listing paginated Okta assignments.
type ListOktaAssignmentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// page_size is the number of results to return. If page_size is 0, a default page size of 200 will be chosen.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is the next page token to use when retrieving results.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOktaAssignmentsRequest) Reset() {
	*x = ListOktaAssignmentsRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOktaAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaAssignmentsRequest) ProtoMessage() {}

func (x *ListOktaAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ListOktaAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListOktaAssignmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOktaAssignmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListOktaAssignmentsResponse is the response for listing paginated Okta assignments.
type ListOktaAssignmentsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// assignments is the list of assignments.
	Assignments []*types.OktaAssignmentV1 `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	// next_page_token is the next page token. If there are no more results, it will be empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOktaAssignmentsResponse) Reset() {
	*x = ListOktaAssignmentsResponse{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOktaAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOktaAssignmentsResponse) ProtoMessage() {}

func (x *ListOktaAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOktaAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*ListOktaAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListOktaAssignmentsResponse) GetAssignments() []*types.OktaAssignmentV1 {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *ListOktaAssignmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetOktaAssignmentRequest is the request for retrieving an Okta assignment.
type GetOktaAssignmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the Okta assignment.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOktaAssignmentRequest) Reset() {
	*x = GetOktaAssignmentRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOktaAssignmentRequest) ProtoMessage() {}

func (x *GetOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*GetOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetOktaAssignmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CreateOktaAssignmentRequest is a request for creating an Okta assignment.
type CreateOktaAssignmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// assignment is the Okta assignment to create.
	Assignment    *types.OktaAssignmentV1 `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOktaAssignmentRequest) Reset() {
	*x = CreateOktaAssignmentRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOktaAssignmentRequest) ProtoMessage() {}

func (x *CreateOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*CreateOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{23}
}

func (x *CreateOktaAssignmentRequest) GetAssignment() *types.OktaAssignmentV1 {
	if x != nil {
		return x.Assignment
	}
	return nil
}

// UpdateOktaAssignmentRequest is a request for updating an Okta assignment.
type UpdateOktaAssignmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// assignment is the Okta assignment to update.
	Assignment    *types.OktaAssignmentV1 `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOktaAssignmentRequest) Reset() {
	*x = UpdateOktaAssignmentRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOktaAssignmentRequest) ProtoMessage() {}

func (x *UpdateOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateOktaAssignmentRequest) GetAssignment() *types.OktaAssignmentV1 {
	if x != nil {
		return x.Assignment
	}
	return nil
}

// UpdateOktaAssignmentStatusRequest is a request for updating an Okta assignment status.
type UpdateOktaAssignmentStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the Okta assignment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// status is the status to update the assignment to.
	Status types.OktaAssignmentSpecV1_OktaAssignmentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=types.OktaAssignmentSpecV1_OktaAssignmentStatus" json:"status,omitempty"`
	// timeHasPassed is the amount of time that must have passed since the last transition
	// in order to set the new transition.
	TimeHasPassed *durationpb.Duration `protobuf:"bytes,3,opt,name=time_has_passed,json=timeHasPassed,proto3" json:"time_has_passed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOktaAssignmentStatusRequest) Reset() {
	*x = UpdateOktaAssignmentStatusRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOktaAssignmentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOktaAssignmentStatusRequest) ProtoMessage() {}

func (x *UpdateOktaAssignmentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOktaAssignmentStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateOktaAssignmentStatusRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateOktaAssignmentStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOktaAssignmentStatusRequest) GetStatus() types.OktaAssignmentSpecV1_OktaAssignmentStatus {
	if x != nil {
		return x.Status
	}
	return types.OktaAssignmentSpecV1_OktaAssignmentStatus(0)
}

func (x *UpdateOktaAssignmentStatusRequest) GetTimeHasPassed() *durationpb.Duration {
	if x != nil {
		return x.TimeHasPassed
	}
	return nil
}

// DeleteOktaAssignmentRequest is the request for deleting an Okta assignment.
type DeleteOktaAssignmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the Okta assignment.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOktaAssignmentRequest) Reset() {
	*x = DeleteOktaAssignmentRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOktaAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOktaAssignmentRequest) ProtoMessage() {}

func (x *DeleteOktaAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOktaAssignmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOktaAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteOktaAssignmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteAllOktaAssignmentsRequest is the request for deleting all Okta assignments.
type DeleteAllOktaAssignmentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAllOktaAssignmentsRequest) Reset() {
	*x = DeleteAllOktaAssignmentsRequest{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAllOktaAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllOktaAssignmentsRequest) ProtoMessage() {}

func (x *DeleteAllOktaAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllOktaAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllOktaAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{27}
}

// App contains details of an individual Okta app.
type GetAppsResponse_App struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the app.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the app.
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAppsResponse_App) Reset() {
	*x = GetAppsResponse_App{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAppsResponse_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppsResponse_App) ProtoMessage() {}

func (x *GetAppsResponse_App) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppsResponse_App.ProtoReflect.Descriptor instead.
func (*GetAppsResponse_App) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetAppsResponse_App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAppsResponse_App) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Group contains details of an individual Okta group.
type GetGroupsResponse_Group struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the group.
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupsResponse_Group) Reset() {
	*x = GetGroupsResponse_Group{}
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsResponse_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsResponse_Group) ProtoMessage() {}

func (x *GetGroupsResponse_Group) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_okta_v1_okta_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsResponse_Group.ProtoReflect.Descriptor instead.
func (*GetGroupsResponse_Group) Descriptor() ([]byte, []int) {
	return file_teleport_okta_v1_okta_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetGroupsResponse_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupsResponse_Group) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_teleport_okta_v1_okta_service_proto protoreflect.FileDescriptor

var file_teleport_okta_v1_okta_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x6b, 0x74, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6b,
	0x74, 0x61, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x6b, 0x74, 0x61, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x4d,
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41,
	0x50, 0x49, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0e, 0x61,
	0x70, 0x69, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x1a, 0x3b, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6b, 0x74, 0x61,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x6b, 0x74, 0x61, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x0f,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x50, 0x49,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0e, 0x61, 0x70, 0x69,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x3d,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb, 0x03,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6b,
	0x74, 0x61, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x6b, 0x74, 0x61, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x4d,
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41,
	0x50, 0x49, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0e, 0x61,
	0x70, 0x69, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x63, 0x69, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x63, 0x69, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x17,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x31, 0x0a,
	0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x56, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x75, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x73, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x73, 0x6f,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x22, 0xc7, 0x03, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x50, 0x49, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x69, 0x6d, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x69,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x73, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x73, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x55, 0x72, 0x6c, 0x22, 0x7f, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x12, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x50,
	0x49, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x08,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x73, 0x77,
	0x73, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x73, 0x77, 0x73, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22,
	0x8c, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x31, 0x52, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8c,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x31, 0x52, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0b, 0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6b, 0x74, 0x61, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6b, 0x74, 0x61, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6b, 0x74, 0x61, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6b,
	0x74, 0x61, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6b, 0x74, 0x61,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x6b, 0x74, 0x61, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x0f,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x50, 0x49,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0e, 0x61, 0x70, 0x69,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x58, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x52, 0x0a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x56, 0x31, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b,
	0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x80, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b,
	0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74,
	0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f,
	0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52,
	0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b,
	0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x31, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x48, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a,
	0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0xa9, 0x0e, 0x0a, 0x0b, 0x4f, 0x6b, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x72, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74,
	0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b,
	0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x5e,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b,
	0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x5e,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b,
	0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x5d,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f,
	0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x31, 0x12, 0x5e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x31, 0x12, 0x5e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x31, 0x12, 0x69, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5d, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x32, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x73, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f,
	0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6f,
	0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x6f, 0x6b, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4c, 0x5a, 0x4a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x6b, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x6b, 0x74, 0x61, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_teleport_okta_v1_okta_service_proto_rawDescOnce sync.Once
	file_teleport_okta_v1_okta_service_proto_rawDescData = file_teleport_okta_v1_okta_service_proto_rawDesc
)

func file_teleport_okta_v1_okta_service_proto_rawDescGZIP() []byte {
	file_teleport_okta_v1_okta_service_proto_rawDescOnce.Do(func() {
		file_teleport_okta_v1_okta_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_okta_v1_okta_service_proto_rawDescData)
	})
	return file_teleport_okta_v1_okta_service_proto_rawDescData
}

var file_teleport_okta_v1_okta_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_teleport_okta_v1_okta_service_proto_goTypes = []any{
	(*GetAppsRequest)(nil),                               // 0: teleport.okta.v1.GetAppsRequest
	(*GetAppsResponse)(nil),                              // 1: teleport.okta.v1.GetAppsResponse
	(*GetGroupsRequest)(nil),                             // 2: teleport.okta.v1.GetGroupsRequest
	(*GetGroupsResponse)(nil),                            // 3: teleport.okta.v1.GetGroupsResponse
	(*CreateIntegrationRequest)(nil),                     // 4: teleport.okta.v1.CreateIntegrationRequest
	(*UpdateIntegrationRequest)(nil),                     // 5: teleport.okta.v1.UpdateIntegrationRequest
	(*AccessListSettings)(nil),                           // 6: teleport.okta.v1.AccessListSettings
	(*OktaAPICredentials)(nil),                           // 7: teleport.okta.v1.OktaAPICredentials
	(*CreateIntegrationResponse)(nil),                    // 8: teleport.okta.v1.CreateIntegrationResponse
	(*UpdateIntegrationResponse)(nil),                    // 9: teleport.okta.v1.UpdateIntegrationResponse
	(*ConnectorInfo)(nil),                                // 10: teleport.okta.v1.ConnectorInfo
	(*ValidateClientCredentialsRequest)(nil),             // 11: teleport.okta.v1.ValidateClientCredentialsRequest
	(*ValidateClientCredentialsResponse)(nil),            // 12: teleport.okta.v1.ValidateClientCredentialsResponse
	(*ListOktaImportRulesRequest)(nil),                   // 13: teleport.okta.v1.ListOktaImportRulesRequest
	(*ListOktaImportRulesResponse)(nil),                  // 14: teleport.okta.v1.ListOktaImportRulesResponse
	(*GetOktaImportRuleRequest)(nil),                     // 15: teleport.okta.v1.GetOktaImportRuleRequest
	(*CreateOktaImportRuleRequest)(nil),                  // 16: teleport.okta.v1.CreateOktaImportRuleRequest
	(*UpdateOktaImportRuleRequest)(nil),                  // 17: teleport.okta.v1.UpdateOktaImportRuleRequest
	(*DeleteOktaImportRuleRequest)(nil),                  // 18: teleport.okta.v1.DeleteOktaImportRuleRequest
	(*DeleteAllOktaImportRulesRequest)(nil),              // 19: teleport.okta.v1.DeleteAllOktaImportRulesRequest
	(*ListOktaAssignmentsRequest)(nil),                   // 20: teleport.okta.v1.ListOktaAssignmentsRequest
	(*ListOktaAssignmentsResponse)(nil),                  // 21: teleport.okta.v1.ListOktaAssignmentsResponse
	(*GetOktaAssignmentRequest)(nil),                     // 22: teleport.okta.v1.GetOktaAssignmentRequest
	(*CreateOktaAssignmentRequest)(nil),                  // 23: teleport.okta.v1.CreateOktaAssignmentRequest
	(*UpdateOktaAssignmentRequest)(nil),                  // 24: teleport.okta.v1.UpdateOktaAssignmentRequest
	(*UpdateOktaAssignmentStatusRequest)(nil),            // 25: teleport.okta.v1.UpdateOktaAssignmentStatusRequest
	(*DeleteOktaAssignmentRequest)(nil),                  // 26: teleport.okta.v1.DeleteOktaAssignmentRequest
	(*DeleteAllOktaAssignmentsRequest)(nil),              // 27: teleport.okta.v1.DeleteAllOktaAssignmentsRequest
	(*GetAppsResponse_App)(nil),                          // 28: teleport.okta.v1.GetAppsResponse.App
	(*GetGroupsResponse_Group)(nil),                      // 29: teleport.okta.v1.GetGroupsResponse.Group
	(*types.PluginV1)(nil),                               // 30: types.PluginV1
	(*types.OktaImportRuleV1)(nil),                       // 31: types.OktaImportRuleV1
	(*types.OktaAssignmentV1)(nil),                       // 32: types.OktaAssignmentV1
	(types.OktaAssignmentSpecV1_OktaAssignmentStatus)(0), // 33: types.OktaAssignmentSpecV1.OktaAssignmentStatus
	(*durationpb.Duration)(nil),                          // 34: google.protobuf.Duration
	(*emptypb.Empty)(nil),                                // 35: google.protobuf.Empty
}
var file_teleport_okta_v1_okta_service_proto_depIdxs = []int32{
	7,  // 0: teleport.okta.v1.GetAppsRequest.api_credentials:type_name -> teleport.okta.v1.OktaAPICredentials
	28, // 1: teleport.okta.v1.GetAppsResponse.apps:type_name -> teleport.okta.v1.GetAppsResponse.App
	7,  // 2: teleport.okta.v1.GetGroupsRequest.api_credentials:type_name -> teleport.okta.v1.OktaAPICredentials
	29, // 3: teleport.okta.v1.GetGroupsResponse.groups:type_name -> teleport.okta.v1.GetGroupsResponse.Group
	7,  // 4: teleport.okta.v1.CreateIntegrationRequest.api_credentials:type_name -> teleport.okta.v1.OktaAPICredentials
	6,  // 5: teleport.okta.v1.CreateIntegrationRequest.access_list_settings:type_name -> teleport.okta.v1.AccessListSettings
	7,  // 6: teleport.okta.v1.UpdateIntegrationRequest.api_credentials:type_name -> teleport.okta.v1.OktaAPICredentials
	6,  // 7: teleport.okta.v1.UpdateIntegrationRequest.access_list_settings:type_name -> teleport.okta.v1.AccessListSettings
	30, // 8: teleport.okta.v1.CreateIntegrationResponse.plugin:type_name -> types.PluginV1
	10, // 9: teleport.okta.v1.CreateIntegrationResponse.connector_info:type_name -> teleport.okta.v1.ConnectorInfo
	30, // 10: teleport.okta.v1.UpdateIntegrationResponse.plugin:type_name -> types.PluginV1
	10, // 11: teleport.okta.v1.UpdateIntegrationResponse.connector_info:type_name -> teleport.okta.v1.ConnectorInfo
	7,  // 12: teleport.okta.v1.ValidateClientCredentialsRequest.api_credentials:type_name -> teleport.okta.v1.OktaAPICredentials
	31, // 13: teleport.okta.v1.ListOktaImportRulesResponse.import_rules:type_name -> types.OktaImportRuleV1
	31, // 14: teleport.okta.v1.CreateOktaImportRuleRequest.import_rule:type_name -> types.OktaImportRuleV1
	31, // 15: teleport.okta.v1.UpdateOktaImportRuleRequest.import_rule:type_name -> types.OktaImportRuleV1
	32, // 16: teleport.okta.v1.ListOktaAssignmentsResponse.assignments:type_name -> types.OktaAssignmentV1
	32, // 17: teleport.okta.v1.CreateOktaAssignmentRequest.assignment:type_name -> types.OktaAssignmentV1
	32, // 18: teleport.okta.v1.UpdateOktaAssignmentRequest.assignment:type_name -> types.OktaAssignmentV1
	33, // 19: teleport.okta.v1.UpdateOktaAssignmentStatusRequest.status:type_name -> types.OktaAssignmentSpecV1.OktaAssignmentStatus
	34, // 20: teleport.okta.v1.UpdateOktaAssignmentStatusRequest.time_has_passed:type_name -> google.protobuf.Duration
	13, // 21: teleport.okta.v1.OktaService.ListOktaImportRules:input_type -> teleport.okta.v1.ListOktaImportRulesRequest
	15, // 22: teleport.okta.v1.OktaService.GetOktaImportRule:input_type -> teleport.okta.v1.GetOktaImportRuleRequest
	16, // 23: teleport.okta.v1.OktaService.CreateOktaImportRule:input_type -> teleport.okta.v1.CreateOktaImportRuleRequest
	17, // 24: teleport.okta.v1.OktaService.UpdateOktaImportRule:input_type -> teleport.okta.v1.UpdateOktaImportRuleRequest
	18, // 25: teleport.okta.v1.OktaService.DeleteOktaImportRule:input_type -> teleport.okta.v1.DeleteOktaImportRuleRequest
	19, // 26: teleport.okta.v1.OktaService.DeleteAllOktaImportRules:input_type -> teleport.okta.v1.DeleteAllOktaImportRulesRequest
	20, // 27: teleport.okta.v1.OktaService.ListOktaAssignments:input_type -> teleport.okta.v1.ListOktaAssignmentsRequest
	22, // 28: teleport.okta.v1.OktaService.GetOktaAssignment:input_type -> teleport.okta.v1.GetOktaAssignmentRequest
	23, // 29: teleport.okta.v1.OktaService.CreateOktaAssignment:input_type -> teleport.okta.v1.CreateOktaAssignmentRequest
	24, // 30: teleport.okta.v1.OktaService.UpdateOktaAssignment:input_type -> teleport.okta.v1.UpdateOktaAssignmentRequest
	25, // 31: teleport.okta.v1.OktaService.UpdateOktaAssignmentStatus:input_type -> teleport.okta.v1.UpdateOktaAssignmentStatusRequest
	26, // 32: teleport.okta.v1.OktaService.DeleteOktaAssignment:input_type -> teleport.okta.v1.DeleteOktaAssignmentRequest
	27, // 33: teleport.okta.v1.OktaService.DeleteAllOktaAssignments:input_type -> teleport.okta.v1.DeleteAllOktaAssignmentsRequest
	11, // 34: teleport.okta.v1.OktaService.ValidateClientCredentials:input_type -> teleport.okta.v1.ValidateClientCredentialsRequest
	4,  // 35: teleport.okta.v1.OktaService.CreateIntegration:input_type -> teleport.okta.v1.CreateIntegrationRequest
	5,  // 36: teleport.okta.v1.OktaService.UpdateIntegration:input_type -> teleport.okta.v1.UpdateIntegrationRequest
	0,  // 37: teleport.okta.v1.OktaService.GetApps:input_type -> teleport.okta.v1.GetAppsRequest
	2,  // 38: teleport.okta.v1.OktaService.GetGroups:input_type -> teleport.okta.v1.GetGroupsRequest
	14, // 39: teleport.okta.v1.OktaService.ListOktaImportRules:output_type -> teleport.okta.v1.ListOktaImportRulesResponse
	31, // 40: teleport.okta.v1.OktaService.GetOktaImportRule:output_type -> types.OktaImportRuleV1
	31, // 41: teleport.okta.v1.OktaService.CreateOktaImportRule:output_type -> types.OktaImportRuleV1
	31, // 42: teleport.okta.v1.OktaService.UpdateOktaImportRule:output_type -> types.OktaImportRuleV1
	35, // 43: teleport.okta.v1.OktaService.DeleteOktaImportRule:output_type -> google.protobuf.Empty
	35, // 44: teleport.okta.v1.OktaService.DeleteAllOktaImportRules:output_type -> google.protobuf.Empty
	21, // 45: teleport.okta.v1.OktaService.ListOktaAssignments:output_type -> teleport.okta.v1.ListOktaAssignmentsResponse
	32, // 46: teleport.okta.v1.OktaService.GetOktaAssignment:output_type -> types.OktaAssignmentV1
	32, // 47: teleport.okta.v1.OktaService.CreateOktaAssignment:output_type -> types.OktaAssignmentV1
	32, // 48: teleport.okta.v1.OktaService.UpdateOktaAssignment:output_type -> types.OktaAssignmentV1
	35, // 49: teleport.okta.v1.OktaService.UpdateOktaAssignmentStatus:output_type -> google.protobuf.Empty
	35, // 50: teleport.okta.v1.OktaService.DeleteOktaAssignment:output_type -> google.protobuf.Empty
	35, // 51: teleport.okta.v1.OktaService.DeleteAllOktaAssignments:output_type -> google.protobuf.Empty
	12, // 52: teleport.okta.v1.OktaService.ValidateClientCredentials:output_type -> teleport.okta.v1.ValidateClientCredentialsResponse
	8,  // 53: teleport.okta.v1.OktaService.CreateIntegration:output_type -> teleport.okta.v1.CreateIntegrationResponse
	9,  // 54: teleport.okta.v1.OktaService.UpdateIntegration:output_type -> teleport.okta.v1.UpdateIntegrationResponse
	1,  // 55: teleport.okta.v1.OktaService.GetApps:output_type -> teleport.okta.v1.GetAppsResponse
	3,  // 56: teleport.okta.v1.OktaService.GetGroups:output_type -> teleport.okta.v1.GetGroupsResponse
	39, // [39:57] is the sub-list for method output_type
	21, // [21:39] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_teleport_okta_v1_okta_service_proto_init() }
func file_teleport_okta_v1_okta_service_proto_init() {
	if File_teleport_okta_v1_okta_service_proto != nil {
		return
	}
	file_teleport_okta_v1_okta_service_proto_msgTypes[7].OneofWrappers = []any{
		(*OktaAPICredentials_OauthId)(nil),
		(*OktaAPICredentials_SswsBearerToken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_okta_v1_okta_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_okta_v1_okta_service_proto_goTypes,
		DependencyIndexes: file_teleport_okta_v1_okta_service_proto_depIdxs,
		MessageInfos:      file_teleport_okta_v1_okta_service_proto_msgTypes,
	}.Build()
	File_teleport_okta_v1_okta_service_proto = out.File
	file_teleport_okta_v1_okta_service_proto_rawDesc = nil
	file_teleport_okta_v1_okta_service_proto_goTypes = nil
	file_teleport_okta_v1_okta_service_proto_depIdxs = nil
}
