// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/autoupdate/v1/autoupdate_service.proto

package autoupdate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AutoUpdateService_GetAutoUpdateConfig_FullMethodName          = "/teleport.autoupdate.v1.AutoUpdateService/GetAutoUpdateConfig"
	AutoUpdateService_CreateAutoUpdateConfig_FullMethodName       = "/teleport.autoupdate.v1.AutoUpdateService/CreateAutoUpdateConfig"
	AutoUpdateService_UpdateAutoUpdateConfig_FullMethodName       = "/teleport.autoupdate.v1.AutoUpdateService/UpdateAutoUpdateConfig"
	AutoUpdateService_UpsertAutoUpdateConfig_FullMethodName       = "/teleport.autoupdate.v1.AutoUpdateService/UpsertAutoUpdateConfig"
	AutoUpdateService_DeleteAutoUpdateConfig_FullMethodName       = "/teleport.autoupdate.v1.AutoUpdateService/DeleteAutoUpdateConfig"
	AutoUpdateService_GetAutoUpdateVersion_FullMethodName         = "/teleport.autoupdate.v1.AutoUpdateService/GetAutoUpdateVersion"
	AutoUpdateService_CreateAutoUpdateVersion_FullMethodName      = "/teleport.autoupdate.v1.AutoUpdateService/CreateAutoUpdateVersion"
	AutoUpdateService_UpdateAutoUpdateVersion_FullMethodName      = "/teleport.autoupdate.v1.AutoUpdateService/UpdateAutoUpdateVersion"
	AutoUpdateService_UpsertAutoUpdateVersion_FullMethodName      = "/teleport.autoupdate.v1.AutoUpdateService/UpsertAutoUpdateVersion"
	AutoUpdateService_DeleteAutoUpdateVersion_FullMethodName      = "/teleport.autoupdate.v1.AutoUpdateService/DeleteAutoUpdateVersion"
	AutoUpdateService_GetAutoUpdateAgentRollout_FullMethodName    = "/teleport.autoupdate.v1.AutoUpdateService/GetAutoUpdateAgentRollout"
	AutoUpdateService_CreateAutoUpdateAgentRollout_FullMethodName = "/teleport.autoupdate.v1.AutoUpdateService/CreateAutoUpdateAgentRollout"
	AutoUpdateService_UpdateAutoUpdateAgentRollout_FullMethodName = "/teleport.autoupdate.v1.AutoUpdateService/UpdateAutoUpdateAgentRollout"
	AutoUpdateService_UpsertAutoUpdateAgentRollout_FullMethodName = "/teleport.autoupdate.v1.AutoUpdateService/UpsertAutoUpdateAgentRollout"
	AutoUpdateService_DeleteAutoUpdateAgentRollout_FullMethodName = "/teleport.autoupdate.v1.AutoUpdateService/DeleteAutoUpdateAgentRollout"
	AutoUpdateService_TriggerAutoUpdateAgentGroup_FullMethodName  = "/teleport.autoupdate.v1.AutoUpdateService/TriggerAutoUpdateAgentGroup"
	AutoUpdateService_ForceAutoUpdateAgentGroup_FullMethodName    = "/teleport.autoupdate.v1.AutoUpdateService/ForceAutoUpdateAgentGroup"
	AutoUpdateService_RollbackAutoUpdateAgentGroup_FullMethodName = "/teleport.autoupdate.v1.AutoUpdateService/RollbackAutoUpdateAgentGroup"
	AutoUpdateService_ListAutoUpdateAgentReports_FullMethodName   = "/teleport.autoupdate.v1.AutoUpdateService/ListAutoUpdateAgentReports"
	AutoUpdateService_GetAutoUpdateAgentReport_FullMethodName     = "/teleport.autoupdate.v1.AutoUpdateService/GetAutoUpdateAgentReport"
	AutoUpdateService_CreateAutoUpdateAgentReport_FullMethodName  = "/teleport.autoupdate.v1.AutoUpdateService/CreateAutoUpdateAgentReport"
	AutoUpdateService_UpdateAutoUpdateAgentReport_FullMethodName  = "/teleport.autoupdate.v1.AutoUpdateService/UpdateAutoUpdateAgentReport"
	AutoUpdateService_UpsertAutoUpdateAgentReport_FullMethodName  = "/teleport.autoupdate.v1.AutoUpdateService/UpsertAutoUpdateAgentReport"
	AutoUpdateService_DeleteAutoUpdateAgentReport_FullMethodName  = "/teleport.autoupdate.v1.AutoUpdateService/DeleteAutoUpdateAgentReport"
)

// AutoUpdateServiceClient is the client API for AutoUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AutoUpdateService provides an API to manage autoupdates.
type AutoUpdateServiceClient interface {
	// GetAutoUpdateConfig gets the current autoupdate config singleton.
	GetAutoUpdateConfig(ctx context.Context, in *GetAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error)
	// CreateAutoUpdateConfig creates a new AutoUpdateConfig.
	CreateAutoUpdateConfig(ctx context.Context, in *CreateAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error)
	// CreateAutoUpdateConfig updates AutoUpdateConfig singleton.
	UpdateAutoUpdateConfig(ctx context.Context, in *UpdateAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error)
	// UpsertAutoUpdateConfig creates a new AutoUpdateConfig or replaces an existing AutoUpdateConfig.
	UpsertAutoUpdateConfig(ctx context.Context, in *UpsertAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error)
	// DeleteAutoUpdateConfig hard deletes the specified AutoUpdateConfig.
	DeleteAutoUpdateConfig(ctx context.Context, in *DeleteAutoUpdateConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAutoUpdateVersion gets the current autoupdate version singleton.
	GetAutoUpdateVersion(ctx context.Context, in *GetAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error)
	// CreateAutoUpdateVersion creates a new AutoUpdateVersion.
	CreateAutoUpdateVersion(ctx context.Context, in *CreateAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error)
	// UpdateAutoUpdateVersion updates AutoUpdateVersion singleton.
	UpdateAutoUpdateVersion(ctx context.Context, in *UpdateAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error)
	// UpsertAutoUpdateVersion creates a new AutoUpdateVersion or replaces an existing AutoUpdateVersion.
	UpsertAutoUpdateVersion(ctx context.Context, in *UpsertAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error)
	// DeleteAutoUpdateVersion hard deletes the specified AutoUpdateVersionRequest.
	DeleteAutoUpdateVersion(ctx context.Context, in *DeleteAutoUpdateVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAutoUpdateVersion gets the current autoupdate version singleton.
	GetAutoUpdateAgentRollout(ctx context.Context, in *GetAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error)
	// CreateAutoUpdateAgentRollout creates a new AutoUpdateAgentRollout.
	CreateAutoUpdateAgentRollout(ctx context.Context, in *CreateAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error)
	// UpdateAutoUpdateAgentRollout updates AutoUpdateAgentRollout singleton.
	UpdateAutoUpdateAgentRollout(ctx context.Context, in *UpdateAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error)
	// UpsertAutoUpdateAgentRollout creates a new AutoUpdateAgentRollout or replaces an existing AutoUpdateAgentRollout.
	UpsertAutoUpdateAgentRollout(ctx context.Context, in *UpsertAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error)
	// DeleteAutoUpdateAgentRollout hard deletes the specified AutoUpdateAgentRolloutRequest.
	DeleteAutoUpdateAgentRollout(ctx context.Context, in *DeleteAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// TriggerAutoUpdateAgentGroup changes the state of an agent group from `unstarted` to `active`.
	// This RPC will be extended later to switch the group state to `canary` by default,
	// and `active` if a flag is set.
	TriggerAutoUpdateAgentGroup(ctx context.Context, in *TriggerAutoUpdateAgentGroupRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error)
	// ForceAutoUpdateAgentGroup changes the state of an agent group from `unstarted`, `canary`, or `active` to the `done` state.
	ForceAutoUpdateAgentGroup(ctx context.Context, in *ForceAutoUpdateAgentGroupRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error)
	// RollbackAutoUpdateAgentGroup changes the state of an agent group to `rolledback`.
	RollbackAutoUpdateAgentGroup(ctx context.Context, in *RollbackAutoUpdateAgentGroupRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error)
	// ListAutoUpdateAgentReports returns a paginated list of AutoUpdateAgentReport resources.
	ListAutoUpdateAgentReports(ctx context.Context, in *ListAutoUpdateAgentReportsRequest, opts ...grpc.CallOption) (*ListAutoUpdateAgentReportsResponse, error)
	// GetAutoUpdateAgentReport returns the specified AutoUpdateAgentReport resource.
	GetAutoUpdateAgentReport(ctx context.Context, in *GetAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error)
	// CreateAutoUpdateAgentReport creates a new AutoUpdateAgentReport resource.
	CreateAutoUpdateAgentReport(ctx context.Context, in *CreateAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error)
	// UpdateAutoUpdateAgentReport updates an existing AutoUpdateAgentReport resource.
	UpdateAutoUpdateAgentReport(ctx context.Context, in *UpdateAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error)
	// UpsertAutoUpdateAgentReport creates or updates a AutoUpdateAgentReport resource.
	UpsertAutoUpdateAgentReport(ctx context.Context, in *UpsertAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error)
	// DeleteAutoUpdateAgentReport removes the specified AutoUpdateAgentReport resource.
	DeleteAutoUpdateAgentReport(ctx context.Context, in *DeleteAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type autoUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoUpdateServiceClient(cc grpc.ClientConnInterface) AutoUpdateServiceClient {
	return &autoUpdateServiceClient{cc}
}

func (c *autoUpdateServiceClient) GetAutoUpdateConfig(ctx context.Context, in *GetAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateConfig)
	err := c.cc.Invoke(ctx, AutoUpdateService_GetAutoUpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) CreateAutoUpdateConfig(ctx context.Context, in *CreateAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateConfig)
	err := c.cc.Invoke(ctx, AutoUpdateService_CreateAutoUpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpdateAutoUpdateConfig(ctx context.Context, in *UpdateAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateConfig)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpdateAutoUpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpsertAutoUpdateConfig(ctx context.Context, in *UpsertAutoUpdateConfigRequest, opts ...grpc.CallOption) (*AutoUpdateConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateConfig)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpsertAutoUpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) DeleteAutoUpdateConfig(ctx context.Context, in *DeleteAutoUpdateConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AutoUpdateService_DeleteAutoUpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) GetAutoUpdateVersion(ctx context.Context, in *GetAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateVersion)
	err := c.cc.Invoke(ctx, AutoUpdateService_GetAutoUpdateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) CreateAutoUpdateVersion(ctx context.Context, in *CreateAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateVersion)
	err := c.cc.Invoke(ctx, AutoUpdateService_CreateAutoUpdateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpdateAutoUpdateVersion(ctx context.Context, in *UpdateAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateVersion)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpdateAutoUpdateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpsertAutoUpdateVersion(ctx context.Context, in *UpsertAutoUpdateVersionRequest, opts ...grpc.CallOption) (*AutoUpdateVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateVersion)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpsertAutoUpdateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) DeleteAutoUpdateVersion(ctx context.Context, in *DeleteAutoUpdateVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AutoUpdateService_DeleteAutoUpdateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) GetAutoUpdateAgentRollout(ctx context.Context, in *GetAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentRollout)
	err := c.cc.Invoke(ctx, AutoUpdateService_GetAutoUpdateAgentRollout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) CreateAutoUpdateAgentRollout(ctx context.Context, in *CreateAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentRollout)
	err := c.cc.Invoke(ctx, AutoUpdateService_CreateAutoUpdateAgentRollout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpdateAutoUpdateAgentRollout(ctx context.Context, in *UpdateAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentRollout)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpdateAutoUpdateAgentRollout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpsertAutoUpdateAgentRollout(ctx context.Context, in *UpsertAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentRollout)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpsertAutoUpdateAgentRollout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) DeleteAutoUpdateAgentRollout(ctx context.Context, in *DeleteAutoUpdateAgentRolloutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AutoUpdateService_DeleteAutoUpdateAgentRollout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) TriggerAutoUpdateAgentGroup(ctx context.Context, in *TriggerAutoUpdateAgentGroupRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentRollout)
	err := c.cc.Invoke(ctx, AutoUpdateService_TriggerAutoUpdateAgentGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) ForceAutoUpdateAgentGroup(ctx context.Context, in *ForceAutoUpdateAgentGroupRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentRollout)
	err := c.cc.Invoke(ctx, AutoUpdateService_ForceAutoUpdateAgentGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) RollbackAutoUpdateAgentGroup(ctx context.Context, in *RollbackAutoUpdateAgentGroupRequest, opts ...grpc.CallOption) (*AutoUpdateAgentRollout, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentRollout)
	err := c.cc.Invoke(ctx, AutoUpdateService_RollbackAutoUpdateAgentGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) ListAutoUpdateAgentReports(ctx context.Context, in *ListAutoUpdateAgentReportsRequest, opts ...grpc.CallOption) (*ListAutoUpdateAgentReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAutoUpdateAgentReportsResponse)
	err := c.cc.Invoke(ctx, AutoUpdateService_ListAutoUpdateAgentReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) GetAutoUpdateAgentReport(ctx context.Context, in *GetAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentReport)
	err := c.cc.Invoke(ctx, AutoUpdateService_GetAutoUpdateAgentReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) CreateAutoUpdateAgentReport(ctx context.Context, in *CreateAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentReport)
	err := c.cc.Invoke(ctx, AutoUpdateService_CreateAutoUpdateAgentReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpdateAutoUpdateAgentReport(ctx context.Context, in *UpdateAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentReport)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpdateAutoUpdateAgentReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) UpsertAutoUpdateAgentReport(ctx context.Context, in *UpsertAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*AutoUpdateAgentReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoUpdateAgentReport)
	err := c.cc.Invoke(ctx, AutoUpdateService_UpsertAutoUpdateAgentReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoUpdateServiceClient) DeleteAutoUpdateAgentReport(ctx context.Context, in *DeleteAutoUpdateAgentReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AutoUpdateService_DeleteAutoUpdateAgentReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoUpdateServiceServer is the server API for AutoUpdateService service.
// All implementations must embed UnimplementedAutoUpdateServiceServer
// for forward compatibility.
//
// AutoUpdateService provides an API to manage autoupdates.
type AutoUpdateServiceServer interface {
	// GetAutoUpdateConfig gets the current autoupdate config singleton.
	GetAutoUpdateConfig(context.Context, *GetAutoUpdateConfigRequest) (*AutoUpdateConfig, error)
	// CreateAutoUpdateConfig creates a new AutoUpdateConfig.
	CreateAutoUpdateConfig(context.Context, *CreateAutoUpdateConfigRequest) (*AutoUpdateConfig, error)
	// CreateAutoUpdateConfig updates AutoUpdateConfig singleton.
	UpdateAutoUpdateConfig(context.Context, *UpdateAutoUpdateConfigRequest) (*AutoUpdateConfig, error)
	// UpsertAutoUpdateConfig creates a new AutoUpdateConfig or replaces an existing AutoUpdateConfig.
	UpsertAutoUpdateConfig(context.Context, *UpsertAutoUpdateConfigRequest) (*AutoUpdateConfig, error)
	// DeleteAutoUpdateConfig hard deletes the specified AutoUpdateConfig.
	DeleteAutoUpdateConfig(context.Context, *DeleteAutoUpdateConfigRequest) (*emptypb.Empty, error)
	// GetAutoUpdateVersion gets the current autoupdate version singleton.
	GetAutoUpdateVersion(context.Context, *GetAutoUpdateVersionRequest) (*AutoUpdateVersion, error)
	// CreateAutoUpdateVersion creates a new AutoUpdateVersion.
	CreateAutoUpdateVersion(context.Context, *CreateAutoUpdateVersionRequest) (*AutoUpdateVersion, error)
	// UpdateAutoUpdateVersion updates AutoUpdateVersion singleton.
	UpdateAutoUpdateVersion(context.Context, *UpdateAutoUpdateVersionRequest) (*AutoUpdateVersion, error)
	// UpsertAutoUpdateVersion creates a new AutoUpdateVersion or replaces an existing AutoUpdateVersion.
	UpsertAutoUpdateVersion(context.Context, *UpsertAutoUpdateVersionRequest) (*AutoUpdateVersion, error)
	// DeleteAutoUpdateVersion hard deletes the specified AutoUpdateVersionRequest.
	DeleteAutoUpdateVersion(context.Context, *DeleteAutoUpdateVersionRequest) (*emptypb.Empty, error)
	// GetAutoUpdateVersion gets the current autoupdate version singleton.
	GetAutoUpdateAgentRollout(context.Context, *GetAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error)
	// CreateAutoUpdateAgentRollout creates a new AutoUpdateAgentRollout.
	CreateAutoUpdateAgentRollout(context.Context, *CreateAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error)
	// UpdateAutoUpdateAgentRollout updates AutoUpdateAgentRollout singleton.
	UpdateAutoUpdateAgentRollout(context.Context, *UpdateAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error)
	// UpsertAutoUpdateAgentRollout creates a new AutoUpdateAgentRollout or replaces an existing AutoUpdateAgentRollout.
	UpsertAutoUpdateAgentRollout(context.Context, *UpsertAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error)
	// DeleteAutoUpdateAgentRollout hard deletes the specified AutoUpdateAgentRolloutRequest.
	DeleteAutoUpdateAgentRollout(context.Context, *DeleteAutoUpdateAgentRolloutRequest) (*emptypb.Empty, error)
	// TriggerAutoUpdateAgentGroup changes the state of an agent group from `unstarted` to `active`.
	// This RPC will be extended later to switch the group state to `canary` by default,
	// and `active` if a flag is set.
	TriggerAutoUpdateAgentGroup(context.Context, *TriggerAutoUpdateAgentGroupRequest) (*AutoUpdateAgentRollout, error)
	// ForceAutoUpdateAgentGroup changes the state of an agent group from `unstarted`, `canary`, or `active` to the `done` state.
	ForceAutoUpdateAgentGroup(context.Context, *ForceAutoUpdateAgentGroupRequest) (*AutoUpdateAgentRollout, error)
	// RollbackAutoUpdateAgentGroup changes the state of an agent group to `rolledback`.
	RollbackAutoUpdateAgentGroup(context.Context, *RollbackAutoUpdateAgentGroupRequest) (*AutoUpdateAgentRollout, error)
	// ListAutoUpdateAgentReports returns a paginated list of AutoUpdateAgentReport resources.
	ListAutoUpdateAgentReports(context.Context, *ListAutoUpdateAgentReportsRequest) (*ListAutoUpdateAgentReportsResponse, error)
	// GetAutoUpdateAgentReport returns the specified AutoUpdateAgentReport resource.
	GetAutoUpdateAgentReport(context.Context, *GetAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error)
	// CreateAutoUpdateAgentReport creates a new AutoUpdateAgentReport resource.
	CreateAutoUpdateAgentReport(context.Context, *CreateAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error)
	// UpdateAutoUpdateAgentReport updates an existing AutoUpdateAgentReport resource.
	UpdateAutoUpdateAgentReport(context.Context, *UpdateAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error)
	// UpsertAutoUpdateAgentReport creates or updates a AutoUpdateAgentReport resource.
	UpsertAutoUpdateAgentReport(context.Context, *UpsertAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error)
	// DeleteAutoUpdateAgentReport removes the specified AutoUpdateAgentReport resource.
	DeleteAutoUpdateAgentReport(context.Context, *DeleteAutoUpdateAgentReportRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAutoUpdateServiceServer()
}

// UnimplementedAutoUpdateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAutoUpdateServiceServer struct{}

func (UnimplementedAutoUpdateServiceServer) GetAutoUpdateConfig(context.Context, *GetAutoUpdateConfigRequest) (*AutoUpdateConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoUpdateConfig not implemented")
}
func (UnimplementedAutoUpdateServiceServer) CreateAutoUpdateConfig(context.Context, *CreateAutoUpdateConfigRequest) (*AutoUpdateConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoUpdateConfig not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpdateAutoUpdateConfig(context.Context, *UpdateAutoUpdateConfigRequest) (*AutoUpdateConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoUpdateConfig not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpsertAutoUpdateConfig(context.Context, *UpsertAutoUpdateConfigRequest) (*AutoUpdateConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAutoUpdateConfig not implemented")
}
func (UnimplementedAutoUpdateServiceServer) DeleteAutoUpdateConfig(context.Context, *DeleteAutoUpdateConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoUpdateConfig not implemented")
}
func (UnimplementedAutoUpdateServiceServer) GetAutoUpdateVersion(context.Context, *GetAutoUpdateVersionRequest) (*AutoUpdateVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoUpdateVersion not implemented")
}
func (UnimplementedAutoUpdateServiceServer) CreateAutoUpdateVersion(context.Context, *CreateAutoUpdateVersionRequest) (*AutoUpdateVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoUpdateVersion not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpdateAutoUpdateVersion(context.Context, *UpdateAutoUpdateVersionRequest) (*AutoUpdateVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoUpdateVersion not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpsertAutoUpdateVersion(context.Context, *UpsertAutoUpdateVersionRequest) (*AutoUpdateVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAutoUpdateVersion not implemented")
}
func (UnimplementedAutoUpdateServiceServer) DeleteAutoUpdateVersion(context.Context, *DeleteAutoUpdateVersionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoUpdateVersion not implemented")
}
func (UnimplementedAutoUpdateServiceServer) GetAutoUpdateAgentRollout(context.Context, *GetAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoUpdateAgentRollout not implemented")
}
func (UnimplementedAutoUpdateServiceServer) CreateAutoUpdateAgentRollout(context.Context, *CreateAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoUpdateAgentRollout not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpdateAutoUpdateAgentRollout(context.Context, *UpdateAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoUpdateAgentRollout not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpsertAutoUpdateAgentRollout(context.Context, *UpsertAutoUpdateAgentRolloutRequest) (*AutoUpdateAgentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAutoUpdateAgentRollout not implemented")
}
func (UnimplementedAutoUpdateServiceServer) DeleteAutoUpdateAgentRollout(context.Context, *DeleteAutoUpdateAgentRolloutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoUpdateAgentRollout not implemented")
}
func (UnimplementedAutoUpdateServiceServer) TriggerAutoUpdateAgentGroup(context.Context, *TriggerAutoUpdateAgentGroupRequest) (*AutoUpdateAgentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAutoUpdateAgentGroup not implemented")
}
func (UnimplementedAutoUpdateServiceServer) ForceAutoUpdateAgentGroup(context.Context, *ForceAutoUpdateAgentGroupRequest) (*AutoUpdateAgentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceAutoUpdateAgentGroup not implemented")
}
func (UnimplementedAutoUpdateServiceServer) RollbackAutoUpdateAgentGroup(context.Context, *RollbackAutoUpdateAgentGroupRequest) (*AutoUpdateAgentRollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackAutoUpdateAgentGroup not implemented")
}
func (UnimplementedAutoUpdateServiceServer) ListAutoUpdateAgentReports(context.Context, *ListAutoUpdateAgentReportsRequest) (*ListAutoUpdateAgentReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutoUpdateAgentReports not implemented")
}
func (UnimplementedAutoUpdateServiceServer) GetAutoUpdateAgentReport(context.Context, *GetAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoUpdateAgentReport not implemented")
}
func (UnimplementedAutoUpdateServiceServer) CreateAutoUpdateAgentReport(context.Context, *CreateAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoUpdateAgentReport not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpdateAutoUpdateAgentReport(context.Context, *UpdateAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoUpdateAgentReport not implemented")
}
func (UnimplementedAutoUpdateServiceServer) UpsertAutoUpdateAgentReport(context.Context, *UpsertAutoUpdateAgentReportRequest) (*AutoUpdateAgentReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAutoUpdateAgentReport not implemented")
}
func (UnimplementedAutoUpdateServiceServer) DeleteAutoUpdateAgentReport(context.Context, *DeleteAutoUpdateAgentReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoUpdateAgentReport not implemented")
}
func (UnimplementedAutoUpdateServiceServer) mustEmbedUnimplementedAutoUpdateServiceServer() {}
func (UnimplementedAutoUpdateServiceServer) testEmbeddedByValue()                           {}

// UnsafeAutoUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoUpdateServiceServer will
// result in compilation errors.
type UnsafeAutoUpdateServiceServer interface {
	mustEmbedUnimplementedAutoUpdateServiceServer()
}

func RegisterAutoUpdateServiceServer(s grpc.ServiceRegistrar, srv AutoUpdateServiceServer) {
	// If the following call pancis, it indicates UnimplementedAutoUpdateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AutoUpdateService_ServiceDesc, srv)
}

func _AutoUpdateService_GetAutoUpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoUpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_GetAutoUpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateConfig(ctx, req.(*GetAutoUpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_CreateAutoUpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoUpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_CreateAutoUpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateConfig(ctx, req.(*CreateAutoUpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpdateAutoUpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoUpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpdateAutoUpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateConfig(ctx, req.(*UpdateAutoUpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpsertAutoUpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAutoUpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpsertAutoUpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateConfig(ctx, req.(*UpsertAutoUpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_DeleteAutoUpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoUpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_DeleteAutoUpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateConfig(ctx, req.(*DeleteAutoUpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_GetAutoUpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoUpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_GetAutoUpdateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateVersion(ctx, req.(*GetAutoUpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_CreateAutoUpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoUpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_CreateAutoUpdateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateVersion(ctx, req.(*CreateAutoUpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpdateAutoUpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoUpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpdateAutoUpdateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateVersion(ctx, req.(*UpdateAutoUpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpsertAutoUpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAutoUpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpsertAutoUpdateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateVersion(ctx, req.(*UpsertAutoUpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_DeleteAutoUpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoUpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_DeleteAutoUpdateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateVersion(ctx, req.(*DeleteAutoUpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_GetAutoUpdateAgentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoUpdateAgentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateAgentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_GetAutoUpdateAgentRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateAgentRollout(ctx, req.(*GetAutoUpdateAgentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_CreateAutoUpdateAgentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoUpdateAgentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateAgentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_CreateAutoUpdateAgentRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateAgentRollout(ctx, req.(*CreateAutoUpdateAgentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpdateAutoUpdateAgentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoUpdateAgentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateAgentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpdateAutoUpdateAgentRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateAgentRollout(ctx, req.(*UpdateAutoUpdateAgentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpsertAutoUpdateAgentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAutoUpdateAgentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateAgentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpsertAutoUpdateAgentRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateAgentRollout(ctx, req.(*UpsertAutoUpdateAgentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_DeleteAutoUpdateAgentRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoUpdateAgentRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateAgentRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_DeleteAutoUpdateAgentRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateAgentRollout(ctx, req.(*DeleteAutoUpdateAgentRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_TriggerAutoUpdateAgentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAutoUpdateAgentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).TriggerAutoUpdateAgentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_TriggerAutoUpdateAgentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).TriggerAutoUpdateAgentGroup(ctx, req.(*TriggerAutoUpdateAgentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_ForceAutoUpdateAgentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceAutoUpdateAgentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).ForceAutoUpdateAgentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_ForceAutoUpdateAgentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).ForceAutoUpdateAgentGroup(ctx, req.(*ForceAutoUpdateAgentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_RollbackAutoUpdateAgentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackAutoUpdateAgentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).RollbackAutoUpdateAgentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_RollbackAutoUpdateAgentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).RollbackAutoUpdateAgentGroup(ctx, req.(*RollbackAutoUpdateAgentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_ListAutoUpdateAgentReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoUpdateAgentReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).ListAutoUpdateAgentReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_ListAutoUpdateAgentReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).ListAutoUpdateAgentReports(ctx, req.(*ListAutoUpdateAgentReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_GetAutoUpdateAgentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoUpdateAgentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateAgentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_GetAutoUpdateAgentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).GetAutoUpdateAgentReport(ctx, req.(*GetAutoUpdateAgentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_CreateAutoUpdateAgentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoUpdateAgentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateAgentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_CreateAutoUpdateAgentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).CreateAutoUpdateAgentReport(ctx, req.(*CreateAutoUpdateAgentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpdateAutoUpdateAgentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoUpdateAgentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateAgentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpdateAutoUpdateAgentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpdateAutoUpdateAgentReport(ctx, req.(*UpdateAutoUpdateAgentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_UpsertAutoUpdateAgentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAutoUpdateAgentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateAgentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_UpsertAutoUpdateAgentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).UpsertAutoUpdateAgentReport(ctx, req.(*UpsertAutoUpdateAgentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoUpdateService_DeleteAutoUpdateAgentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoUpdateAgentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateAgentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoUpdateService_DeleteAutoUpdateAgentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoUpdateServiceServer).DeleteAutoUpdateAgentReport(ctx, req.(*DeleteAutoUpdateAgentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutoUpdateService_ServiceDesc is the grpc.ServiceDesc for AutoUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.autoupdate.v1.AutoUpdateService",
	HandlerType: (*AutoUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAutoUpdateConfig",
			Handler:    _AutoUpdateService_GetAutoUpdateConfig_Handler,
		},
		{
			MethodName: "CreateAutoUpdateConfig",
			Handler:    _AutoUpdateService_CreateAutoUpdateConfig_Handler,
		},
		{
			MethodName: "UpdateAutoUpdateConfig",
			Handler:    _AutoUpdateService_UpdateAutoUpdateConfig_Handler,
		},
		{
			MethodName: "UpsertAutoUpdateConfig",
			Handler:    _AutoUpdateService_UpsertAutoUpdateConfig_Handler,
		},
		{
			MethodName: "DeleteAutoUpdateConfig",
			Handler:    _AutoUpdateService_DeleteAutoUpdateConfig_Handler,
		},
		{
			MethodName: "GetAutoUpdateVersion",
			Handler:    _AutoUpdateService_GetAutoUpdateVersion_Handler,
		},
		{
			MethodName: "CreateAutoUpdateVersion",
			Handler:    _AutoUpdateService_CreateAutoUpdateVersion_Handler,
		},
		{
			MethodName: "UpdateAutoUpdateVersion",
			Handler:    _AutoUpdateService_UpdateAutoUpdateVersion_Handler,
		},
		{
			MethodName: "UpsertAutoUpdateVersion",
			Handler:    _AutoUpdateService_UpsertAutoUpdateVersion_Handler,
		},
		{
			MethodName: "DeleteAutoUpdateVersion",
			Handler:    _AutoUpdateService_DeleteAutoUpdateVersion_Handler,
		},
		{
			MethodName: "GetAutoUpdateAgentRollout",
			Handler:    _AutoUpdateService_GetAutoUpdateAgentRollout_Handler,
		},
		{
			MethodName: "CreateAutoUpdateAgentRollout",
			Handler:    _AutoUpdateService_CreateAutoUpdateAgentRollout_Handler,
		},
		{
			MethodName: "UpdateAutoUpdateAgentRollout",
			Handler:    _AutoUpdateService_UpdateAutoUpdateAgentRollout_Handler,
		},
		{
			MethodName: "UpsertAutoUpdateAgentRollout",
			Handler:    _AutoUpdateService_UpsertAutoUpdateAgentRollout_Handler,
		},
		{
			MethodName: "DeleteAutoUpdateAgentRollout",
			Handler:    _AutoUpdateService_DeleteAutoUpdateAgentRollout_Handler,
		},
		{
			MethodName: "TriggerAutoUpdateAgentGroup",
			Handler:    _AutoUpdateService_TriggerAutoUpdateAgentGroup_Handler,
		},
		{
			MethodName: "ForceAutoUpdateAgentGroup",
			Handler:    _AutoUpdateService_ForceAutoUpdateAgentGroup_Handler,
		},
		{
			MethodName: "RollbackAutoUpdateAgentGroup",
			Handler:    _AutoUpdateService_RollbackAutoUpdateAgentGroup_Handler,
		},
		{
			MethodName: "ListAutoUpdateAgentReports",
			Handler:    _AutoUpdateService_ListAutoUpdateAgentReports_Handler,
		},
		{
			MethodName: "GetAutoUpdateAgentReport",
			Handler:    _AutoUpdateService_GetAutoUpdateAgentReport_Handler,
		},
		{
			MethodName: "CreateAutoUpdateAgentReport",
			Handler:    _AutoUpdateService_CreateAutoUpdateAgentReport_Handler,
		},
		{
			MethodName: "UpdateAutoUpdateAgentReport",
			Handler:    _AutoUpdateService_UpdateAutoUpdateAgentReport_Handler,
		},
		{
			MethodName: "UpsertAutoUpdateAgentReport",
			Handler:    _AutoUpdateService_UpsertAutoUpdateAgentReport_Handler,
		},
		{
			MethodName: "DeleteAutoUpdateAgentReport",
			Handler:    _AutoUpdateService_DeleteAutoUpdateAgentReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/autoupdate/v1/autoupdate_service.proto",
}
