// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/recordingmetadata/v1/recordingmetadata_service.proto

package recordingmetadatav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordingMetadataService_GetThumbnails_FullMethodName = "/teleport.recordingmetadata.v1.RecordingMetadataService/GetThumbnails"
	RecordingMetadataService_GetMetadata_FullMethodName   = "/teleport.recordingmetadata.v1.RecordingMetadataService/GetMetadata"
)

// RecordingMetadataServiceClient is the client API for RecordingMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RecordingMetadataService provides methods to retrieve metadata and thumbnails for a session recording.
type RecordingMetadataServiceClient interface {
	// GetThumbnails retrieves the thumbnails for many session recordings.
	GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetThumbnailsResponse], error)
	// GetMetadata retrieves the metadata for a session recording.
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMetadataResponseChunk], error)
}

type recordingMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingMetadataServiceClient(cc grpc.ClientConnInterface) RecordingMetadataServiceClient {
	return &recordingMetadataServiceClient{cc}
}

func (c *recordingMetadataServiceClient) GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetThumbnailsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordingMetadataService_ServiceDesc.Streams[0], RecordingMetadataService_GetThumbnails_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetThumbnailsRequest, GetThumbnailsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingMetadataService_GetThumbnailsClient = grpc.ServerStreamingClient[GetThumbnailsResponse]

func (c *recordingMetadataServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMetadataResponseChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordingMetadataService_ServiceDesc.Streams[1], RecordingMetadataService_GetMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMetadataRequest, GetMetadataResponseChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingMetadataService_GetMetadataClient = grpc.ServerStreamingClient[GetMetadataResponseChunk]

// RecordingMetadataServiceServer is the server API for RecordingMetadataService service.
// All implementations must embed UnimplementedRecordingMetadataServiceServer
// for forward compatibility.
//
// RecordingMetadataService provides methods to retrieve metadata and thumbnails for a session recording.
type RecordingMetadataServiceServer interface {
	// GetThumbnails retrieves the thumbnails for many session recordings.
	GetThumbnails(*GetThumbnailsRequest, grpc.ServerStreamingServer[GetThumbnailsResponse]) error
	// GetMetadata retrieves the metadata for a session recording.
	GetMetadata(*GetMetadataRequest, grpc.ServerStreamingServer[GetMetadataResponseChunk]) error
	mustEmbedUnimplementedRecordingMetadataServiceServer()
}

// UnimplementedRecordingMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordingMetadataServiceServer struct{}

func (UnimplementedRecordingMetadataServiceServer) GetThumbnails(*GetThumbnailsRequest, grpc.ServerStreamingServer[GetThumbnailsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetThumbnails not implemented")
}
func (UnimplementedRecordingMetadataServiceServer) GetMetadata(*GetMetadataRequest, grpc.ServerStreamingServer[GetMetadataResponseChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedRecordingMetadataServiceServer) mustEmbedUnimplementedRecordingMetadataServiceServer() {
}
func (UnimplementedRecordingMetadataServiceServer) testEmbeddedByValue() {}

// UnsafeRecordingMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingMetadataServiceServer will
// result in compilation errors.
type UnsafeRecordingMetadataServiceServer interface {
	mustEmbedUnimplementedRecordingMetadataServiceServer()
}

func RegisterRecordingMetadataServiceServer(s grpc.ServiceRegistrar, srv RecordingMetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordingMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordingMetadataService_ServiceDesc, srv)
}

func _RecordingMetadataService_GetThumbnails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetThumbnailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordingMetadataServiceServer).GetThumbnails(m, &grpc.GenericServerStream[GetThumbnailsRequest, GetThumbnailsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingMetadataService_GetThumbnailsServer = grpc.ServerStreamingServer[GetThumbnailsResponse]

func _RecordingMetadataService_GetMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordingMetadataServiceServer).GetMetadata(m, &grpc.GenericServerStream[GetMetadataRequest, GetMetadataResponseChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingMetadataService_GetMetadataServer = grpc.ServerStreamingServer[GetMetadataResponseChunk]

// RecordingMetadataService_ServiceDesc is the grpc.ServiceDesc for RecordingMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.recordingmetadata.v1.RecordingMetadataService",
	HandlerType: (*RecordingMetadataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetThumbnails",
			Handler:       _RecordingMetadataService_GetThumbnails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMetadata",
			Handler:       _RecordingMetadataService_GetMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "teleport/recordingmetadata/v1/recordingmetadata_service.proto",
}
