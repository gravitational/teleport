// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: teleport/workloadidentity/v1/sigstore.proto

package workloadidentityv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sigstore bundle and simple signing envelope discovered by `tbot` and sent to
// the server for verification.
type SigstoreVerificationPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sigstore bundle serialized in the protobuf encoding.
	Bundle []byte `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	// When the bundle was constructed by `tbot` from the old-style annotations
	// the enclosed signature will be over the simple signing envelope, not the
	// actual image manifest.
	//
	// Signature = Sign(SHA-256(SimpleSigningEnvelope(SHA-256(Image Manifest))))
	//
	// In that case, `tbot` will include the simple signing envelope, which the
	// server will hash with SHA-256 and check the signature. The server will also
	// compare the `critical.docker-manifest-digest` to the image digest produced
	// by the Podman, Docker, or Kubernetes attestor.
	//
	// When simple_signing_envelope is not provided, the server will assert the
	// bundle contains an in-toto attestation, enclosed with DSSE, where the
	// subject matches the image digest from the Podman, Docker, or Kubernetes
	// attestor.
	SimpleSigningEnvelope []byte `protobuf:"bytes,2,opt,name=simple_signing_envelope,json=simpleSigningEnvelope,proto3,oneof" json:"simple_signing_envelope,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SigstoreVerificationPayload) Reset() {
	*x = SigstoreVerificationPayload{}
	mi := &file_teleport_workloadidentity_v1_sigstore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigstoreVerificationPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstoreVerificationPayload) ProtoMessage() {}

func (x *SigstoreVerificationPayload) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstoreVerificationPayload.ProtoReflect.Descriptor instead.
func (*SigstoreVerificationPayload) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_proto_rawDescGZIP(), []int{0}
}

func (x *SigstoreVerificationPayload) GetBundle() []byte {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *SigstoreVerificationPayload) GetSimpleSigningEnvelope() []byte {
	if x != nil {
		return x.SimpleSigningEnvelope
	}
	return nil
}

var File_teleport_workloadidentity_v1_sigstore_proto protoreflect.FileDescriptor

var file_teleport_workloadidentity_v1_sigstore_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x8e, 0x01, 0x0a, 0x1b,
	0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x64, 0x5a, 0x62,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x3b,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_teleport_workloadidentity_v1_sigstore_proto_rawDescOnce sync.Once
	file_teleport_workloadidentity_v1_sigstore_proto_rawDescData []byte
)

func file_teleport_workloadidentity_v1_sigstore_proto_rawDescGZIP() []byte {
	file_teleport_workloadidentity_v1_sigstore_proto_rawDescOnce.Do(func() {
		file_teleport_workloadidentity_v1_sigstore_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_sigstore_proto_rawDesc), len(file_teleport_workloadidentity_v1_sigstore_proto_rawDesc)))
	})
	return file_teleport_workloadidentity_v1_sigstore_proto_rawDescData
}

var file_teleport_workloadidentity_v1_sigstore_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teleport_workloadidentity_v1_sigstore_proto_goTypes = []any{
	(*SigstoreVerificationPayload)(nil), // 0: teleport.workloadidentity.v1.SigstoreVerificationPayload
}
var file_teleport_workloadidentity_v1_sigstore_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_teleport_workloadidentity_v1_sigstore_proto_init() }
func file_teleport_workloadidentity_v1_sigstore_proto_init() {
	if File_teleport_workloadidentity_v1_sigstore_proto != nil {
		return
	}
	file_teleport_workloadidentity_v1_sigstore_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_sigstore_proto_rawDesc), len(file_teleport_workloadidentity_v1_sigstore_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_workloadidentity_v1_sigstore_proto_goTypes,
		DependencyIndexes: file_teleport_workloadidentity_v1_sigstore_proto_depIdxs,
		MessageInfos:      file_teleport_workloadidentity_v1_sigstore_proto_msgTypes,
	}.Build()
	File_teleport_workloadidentity_v1_sigstore_proto = out.File
	file_teleport_workloadidentity_v1_sigstore_proto_goTypes = nil
	file_teleport_workloadidentity_v1_sigstore_proto_depIdxs = nil
}
