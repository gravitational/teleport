// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/workloadidentity/v1/join_attrs.proto

package workloadidentityv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The collection of attributes that result from the join process.
type JoinAttrs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The collection of attributes that result from the join process but are not
	// specific to any particular join method.
	Meta *JoinAttrsMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Attributes that are specific to the GitLab (`gitlab`) join method.
	Gitlab *JoinAttrsGitLab `protobuf:"bytes,2,opt,name=gitlab,proto3" json:"gitlab,omitempty"`
	// Attributes that are specific to the GitHub (`github`) join method.
	Github *JoinAttrsGitHub `protobuf:"bytes,3,opt,name=github,proto3" json:"github,omitempty"`
	// Attributes that are specific to the AWS IAM (`iam`) join method.
	Iam *JoinAttrsAWSIAM `protobuf:"bytes,4,opt,name=iam,proto3" json:"iam,omitempty"`
	// Attributes that are specific to the TPM (`tpm`) join method.
	Tpm *JoinAttrsTPM `protobuf:"bytes,5,opt,name=tpm,proto3" json:"tpm,omitempty"`
	// Attributes that are specific to the Azure (`azure`) join method.
	Azure *JoinAttrsAzure `protobuf:"bytes,6,opt,name=azure,proto3" json:"azure,omitempty"`
	// Attributes that are specific to the CircleCI (`circleci`) join method.
	Circleci *JoinAttrsCircleCI `protobuf:"bytes,7,opt,name=circleci,proto3" json:"circleci,omitempty"`
	// Attributes that are specific to the Bitbucket (`bitbucket`) join method.
	Bitbucket *JoinAttrsBitbucket `protobuf:"bytes,8,opt,name=bitbucket,proto3" json:"bitbucket,omitempty"`
	// Attributes that are specific to the Terraform Cloud (`terraform_cloud`) join method.
	TerraformCloud *JoinAttrsTerraformCloud `protobuf:"bytes,9,opt,name=terraform_cloud,json=terraformCloud,proto3" json:"terraform_cloud,omitempty"`
	// Attributes that are specific to the Spacelift (`spacelift`) join method.
	Spacelift *JoinAttrsSpacelift `protobuf:"bytes,10,opt,name=spacelift,proto3" json:"spacelift,omitempty"`
	// Attributes that are specific to the GCP (`gcp`) join method.
	Gcp *JoinAttrsGCP `protobuf:"bytes,11,opt,name=gcp,proto3" json:"gcp,omitempty"`
	// Attributes that are specific to the Kubernetes (`kubernetes`) join method.
	Kubernetes *JoinAttrsKubernetes `protobuf:"bytes,12,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// Attributes that are specific to the Oracle (`oracle`) join method.
	Oracle *JoinAttrsOracle `protobuf:"bytes,13,opt,name=oracle,proto3" json:"oracle,omitempty"`
	// Attributes that are specific to the Azure Devops (`azure_devops`) join method.
	AzureDevops   *JoinAttrsAzureDevops `protobuf:"bytes,14,opt,name=azure_devops,json=azureDevops,proto3" json:"azure_devops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrs) Reset() {
	*x = JoinAttrs{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrs) ProtoMessage() {}

func (x *JoinAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrs.ProtoReflect.Descriptor instead.
func (*JoinAttrs) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{0}
}

func (x *JoinAttrs) GetMeta() *JoinAttrsMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *JoinAttrs) GetGitlab() *JoinAttrsGitLab {
	if x != nil {
		return x.Gitlab
	}
	return nil
}

func (x *JoinAttrs) GetGithub() *JoinAttrsGitHub {
	if x != nil {
		return x.Github
	}
	return nil
}

func (x *JoinAttrs) GetIam() *JoinAttrsAWSIAM {
	if x != nil {
		return x.Iam
	}
	return nil
}

func (x *JoinAttrs) GetTpm() *JoinAttrsTPM {
	if x != nil {
		return x.Tpm
	}
	return nil
}

func (x *JoinAttrs) GetAzure() *JoinAttrsAzure {
	if x != nil {
		return x.Azure
	}
	return nil
}

func (x *JoinAttrs) GetCircleci() *JoinAttrsCircleCI {
	if x != nil {
		return x.Circleci
	}
	return nil
}

func (x *JoinAttrs) GetBitbucket() *JoinAttrsBitbucket {
	if x != nil {
		return x.Bitbucket
	}
	return nil
}

func (x *JoinAttrs) GetTerraformCloud() *JoinAttrsTerraformCloud {
	if x != nil {
		return x.TerraformCloud
	}
	return nil
}

func (x *JoinAttrs) GetSpacelift() *JoinAttrsSpacelift {
	if x != nil {
		return x.Spacelift
	}
	return nil
}

func (x *JoinAttrs) GetGcp() *JoinAttrsGCP {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *JoinAttrs) GetKubernetes() *JoinAttrsKubernetes {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *JoinAttrs) GetOracle() *JoinAttrsOracle {
	if x != nil {
		return x.Oracle
	}
	return nil
}

func (x *JoinAttrs) GetAzureDevops() *JoinAttrsAzureDevops {
	if x != nil {
		return x.AzureDevops
	}
	return nil
}

// The collection of attributes that result from the join process but are not
// specific to any particular join method.
type JoinAttrsMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the join token that was used to join.
	//
	// This field is omitted if the join token that was used to join was of the
	// `token` method as in this case, the name of the join token is sensitive.
	//
	// Example: `my-gitlab-join-token`
	JoinTokenName string `protobuf:"bytes,1,opt,name=join_token_name,json=joinTokenName,proto3" json:"join_token_name,omitempty"`
	// The name of the join method that was used to join.
	//
	// Example: `gitlab`
	JoinMethod    string `protobuf:"bytes,2,opt,name=join_method,json=joinMethod,proto3" json:"join_method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsMeta) Reset() {
	*x = JoinAttrsMeta{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsMeta) ProtoMessage() {}

func (x *JoinAttrsMeta) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsMeta.ProtoReflect.Descriptor instead.
func (*JoinAttrsMeta) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{1}
}

func (x *JoinAttrsMeta) GetJoinTokenName() string {
	if x != nil {
		return x.JoinTokenName
	}
	return ""
}

func (x *JoinAttrsMeta) GetJoinMethod() string {
	if x != nil {
		return x.JoinMethod
	}
	return ""
}

// Attributes that are specific to the GitLab join method.
//
// Typically, these are mapped directly from the claims of the GitLab JWT that
// was used to join. You can view the documentation for those claims at:
// https://docs.gitlab.com/ee/ci/secrets/id_token_authentication.html#token-payload
type JoinAttrsGitLab struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The `sub` claim of the GitLab JWT that was used to join.
	// For example: `project_path:mygroup/my-project:ref_type:branch:ref:main`
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// The ref that the pipeline is running against.
	// For example: `main`
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// The type of ref that the pipeline is running against.
	// This is typically `branch` or `tag`.
	RefType string `protobuf:"bytes,3,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	// Whether or not the ref that the pipeline is running against is protected.
	RefProtected bool `protobuf:"varint,4,opt,name=ref_protected,json=refProtected,proto3" json:"ref_protected,omitempty"`
	// The path of the namespace of the project that the pipeline is running within.
	// For example: `mygroup`
	NamespacePath string `protobuf:"bytes,5,opt,name=namespace_path,json=namespacePath,proto3" json:"namespace_path,omitempty"`
	// The full qualified path of the project that the pipeline is running within.
	// This includes the namespace path.
	// For example: `mygroup/my-project`
	ProjectPath string `protobuf:"bytes,6,opt,name=project_path,json=projectPath,proto3" json:"project_path,omitempty"`
	// The name of the user that triggered the pipeline run.
	UserLogin string `protobuf:"bytes,7,opt,name=user_login,json=userLogin,proto3" json:"user_login,omitempty"`
	// The email of the user that triggered the pipeline run.
	UserEmail string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// The ID of the pipeline.
	PipelineId string `protobuf:"bytes,9,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// The source of the pipeline.
	// For example: `push` or `web`
	PipelineSource string `protobuf:"bytes,10,opt,name=pipeline_source,json=pipelineSource,proto3" json:"pipeline_source,omitempty"`
	// The environment the pipeline is running against, if any.
	Environment string `protobuf:"bytes,11,opt,name=environment,proto3" json:"environment,omitempty"`
	// Whether or not the pipeline is running against a protected environment.
	// If there is no configured environment, this field is false.
	EnvironmentProtected bool `protobuf:"varint,12,opt,name=environment_protected,json=environmentProtected,proto3" json:"environment_protected,omitempty"`
	// The ID of the runner that this pipeline is running on.
	RunnerId int64 `protobuf:"varint,13,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// The type of runner that is processing the pipeline.
	// Either `gitlab-hosted` or `self-hosted`.
	RunnerEnvironment string `protobuf:"bytes,14,opt,name=runner_environment,json=runnerEnvironment,proto3" json:"runner_environment,omitempty"`
	// The SHA of the commit that triggered the pipeline run.
	Sha string `protobuf:"bytes,15,opt,name=sha,proto3" json:"sha,omitempty"`
	// The ref URI of the CI config configuring the pipeline.
	CiConfigRefUri string `protobuf:"bytes,16,opt,name=ci_config_ref_uri,json=ciConfigRefUri,proto3" json:"ci_config_ref_uri,omitempty"`
	// The Git SHA of the CI config ref configuring the pipeline.
	CiConfigSha   string `protobuf:"bytes,17,opt,name=ci_config_sha,json=ciConfigSha,proto3" json:"ci_config_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsGitLab) Reset() {
	*x = JoinAttrsGitLab{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsGitLab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsGitLab) ProtoMessage() {}

func (x *JoinAttrsGitLab) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsGitLab.ProtoReflect.Descriptor instead.
func (*JoinAttrsGitLab) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{2}
}

func (x *JoinAttrsGitLab) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinAttrsGitLab) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *JoinAttrsGitLab) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *JoinAttrsGitLab) GetRefProtected() bool {
	if x != nil {
		return x.RefProtected
	}
	return false
}

func (x *JoinAttrsGitLab) GetNamespacePath() string {
	if x != nil {
		return x.NamespacePath
	}
	return ""
}

func (x *JoinAttrsGitLab) GetProjectPath() string {
	if x != nil {
		return x.ProjectPath
	}
	return ""
}

func (x *JoinAttrsGitLab) GetUserLogin() string {
	if x != nil {
		return x.UserLogin
	}
	return ""
}

func (x *JoinAttrsGitLab) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *JoinAttrsGitLab) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *JoinAttrsGitLab) GetPipelineSource() string {
	if x != nil {
		return x.PipelineSource
	}
	return ""
}

func (x *JoinAttrsGitLab) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *JoinAttrsGitLab) GetEnvironmentProtected() bool {
	if x != nil {
		return x.EnvironmentProtected
	}
	return false
}

func (x *JoinAttrsGitLab) GetRunnerId() int64 {
	if x != nil {
		return x.RunnerId
	}
	return 0
}

func (x *JoinAttrsGitLab) GetRunnerEnvironment() string {
	if x != nil {
		return x.RunnerEnvironment
	}
	return ""
}

func (x *JoinAttrsGitLab) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *JoinAttrsGitLab) GetCiConfigRefUri() string {
	if x != nil {
		return x.CiConfigRefUri
	}
	return ""
}

func (x *JoinAttrsGitLab) GetCiConfigSha() string {
	if x != nil {
		return x.CiConfigSha
	}
	return ""
}

// Attributes that are specific to the GitHub (`github`) join method.
//
// Typically, these are mapped directly from the claims of the GitHub JWT that
// was used to join. You can view the documentation for those claims at:
// https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token
type JoinAttrsGitHub struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The `sub` claim of the GitHub JWT that was used to join.
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// The username of the actor that initiated the workflow run.
	Actor string `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// The name of the environment that the workflow is running against, if any.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// The ref that the workflow is running against.
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	// The type of ref that the workflow is running against.
	// For example, `branch`.
	RefType string `protobuf:"bytes,5,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	// The name of the repository that the workflow is running within.
	Repository string `protobuf:"bytes,6,opt,name=repository,proto3" json:"repository,omitempty"`
	// The name of the owner of the repository that the workflow is running within.
	RepositoryOwner string `protobuf:"bytes,7,opt,name=repository_owner,json=repositoryOwner,proto3" json:"repository_owner,omitempty"`
	// The name of the workflow that is running.
	Workflow string `protobuf:"bytes,8,opt,name=workflow,proto3" json:"workflow,omitempty"`
	// The name of the event that triggered the workflow run.
	EventName string `protobuf:"bytes,9,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// The SHA of the commit that triggered the workflow run.
	Sha string `protobuf:"bytes,10,opt,name=sha,proto3" json:"sha,omitempty"`
	// The ID of this GitHub actions workflow run.
	RunId         string `protobuf:"bytes,11,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsGitHub) Reset() {
	*x = JoinAttrsGitHub{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsGitHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsGitHub) ProtoMessage() {}

func (x *JoinAttrsGitHub) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsGitHub.ProtoReflect.Descriptor instead.
func (*JoinAttrsGitHub) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{3}
}

func (x *JoinAttrsGitHub) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinAttrsGitHub) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *JoinAttrsGitHub) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *JoinAttrsGitHub) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *JoinAttrsGitHub) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *JoinAttrsGitHub) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *JoinAttrsGitHub) GetRepositoryOwner() string {
	if x != nil {
		return x.RepositoryOwner
	}
	return ""
}

func (x *JoinAttrsGitHub) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *JoinAttrsGitHub) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *JoinAttrsGitHub) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *JoinAttrsGitHub) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// Attributes that are specific to the AWS IAM (`iam`) join method.
//
// Typically, these are mapped directly from the results of the
// STS GetCallerIdentity call that is made as part of the join process.
type JoinAttrsAWSIAM struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the account that the joining entity is a part of.
	// For example: `123456789012`
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The AWS ARN of the joining entity.
	// For example: `arn:aws:sts::123456789012:assumed-role/my-role-name/my-role-session-name`
	Arn           string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsAWSIAM) Reset() {
	*x = JoinAttrsAWSIAM{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsAWSIAM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsAWSIAM) ProtoMessage() {}

func (x *JoinAttrsAWSIAM) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsAWSIAM.ProtoReflect.Descriptor instead.
func (*JoinAttrsAWSIAM) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{4}
}

func (x *JoinAttrsAWSIAM) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *JoinAttrsAWSIAM) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

// Attributes that are specific to the TPM (`tpm`) join method.
type JoinAttrsTPM struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SHA256 hash of the PKIX formatted EK public key, encoded in hex.
	// This effectively identifies a specific TPM.
	EkPubHash string `protobuf:"bytes,1,opt,name=ek_pub_hash,json=ekPubHash,proto3" json:"ek_pub_hash,omitempty"`
	// The serial number of the EK certificate, if present.
	EkCertSerial string `protobuf:"bytes,2,opt,name=ek_cert_serial,json=ekCertSerial,proto3" json:"ek_cert_serial,omitempty"`
	// Whether or not the EK certificate was verified against a certificate
	// authority.
	EkCertVerified bool `protobuf:"varint,3,opt,name=ek_cert_verified,json=ekCertVerified,proto3" json:"ek_cert_verified,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JoinAttrsTPM) Reset() {
	*x = JoinAttrsTPM{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsTPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsTPM) ProtoMessage() {}

func (x *JoinAttrsTPM) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsTPM.ProtoReflect.Descriptor instead.
func (*JoinAttrsTPM) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{5}
}

func (x *JoinAttrsTPM) GetEkPubHash() string {
	if x != nil {
		return x.EkPubHash
	}
	return ""
}

func (x *JoinAttrsTPM) GetEkCertSerial() string {
	if x != nil {
		return x.EkCertSerial
	}
	return ""
}

func (x *JoinAttrsTPM) GetEkCertVerified() bool {
	if x != nil {
		return x.EkCertVerified
	}
	return false
}

// Attributes that are specific to the Azure (`azure`) join method.
type JoinAttrsAzure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The subscription ID of the Azure account that the joining entity is a part of.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// The resource group of the Azure account that the joining entity is a part of.
	ResourceGroup string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsAzure) Reset() {
	*x = JoinAttrsAzure{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsAzure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsAzure) ProtoMessage() {}

func (x *JoinAttrsAzure) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsAzure.ProtoReflect.Descriptor instead.
func (*JoinAttrsAzure) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{6}
}

func (x *JoinAttrsAzure) GetSubscription() string {
	if x != nil {
		return x.Subscription
	}
	return ""
}

func (x *JoinAttrsAzure) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

// Attributes that are specific to the CircleCI (`circleci`) join method.
// These are mapped from the claims of the JWT issued by CircleCI to runs,
// which is documented at: https://circleci.com/docs/openid-connect-tokens/
type JoinAttrsCircleCI struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The `sub` claim of the CircleCI JWT that was used to join.
	// For example: `org/ORGANIZATION_ID/project/PROJECT_ID/user/USER_ID`
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// The UUIDs of the contexts used in the job.
	ContextIds []string `protobuf:"bytes,2,rep,name=context_ids,json=contextIds,proto3" json:"context_ids,omitempty"`
	// The UUID of the project in which the job is running.
	ProjectId     string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsCircleCI) Reset() {
	*x = JoinAttrsCircleCI{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsCircleCI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsCircleCI) ProtoMessage() {}

func (x *JoinAttrsCircleCI) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsCircleCI.ProtoReflect.Descriptor instead.
func (*JoinAttrsCircleCI) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{7}
}

func (x *JoinAttrsCircleCI) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinAttrsCircleCI) GetContextIds() []string {
	if x != nil {
		return x.ContextIds
	}
	return nil
}

func (x *JoinAttrsCircleCI) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Attributes that are specific to the Bitbucket (`bitbucket`) join method.
// These are mapped from the claims of the JWT issued by BitBucket to runs,
// which is documented at: https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
type JoinAttrsBitbucket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The `sub` claim of the Bitbucket JWT that was used to join.
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// The UUID of the pipeline step.
	StepUuid string `protobuf:"bytes,2,opt,name=step_uuid,json=stepUuid,proto3" json:"step_uuid,omitempty"`
	// The UUID of the repository the pipeline step is running within.
	RepositoryUuid string `protobuf:"bytes,3,opt,name=repository_uuid,json=repositoryUuid,proto3" json:"repository_uuid,omitempty"`
	// The UUID of the pipeline the step is running within.
	PipelineUuid string `protobuf:"bytes,4,opt,name=pipeline_uuid,json=pipelineUuid,proto3" json:"pipeline_uuid,omitempty"`
	// The UUID of the workspace the pipeline belongs to.
	WorkspaceUuid string `protobuf:"bytes,5,opt,name=workspace_uuid,json=workspaceUuid,proto3" json:"workspace_uuid,omitempty"`
	// The UUID of the deployment environment the pipeline is running against.
	DeploymentEnvironmentUuid string `protobuf:"bytes,6,opt,name=deployment_environment_uuid,json=deploymentEnvironmentUuid,proto3" json:"deployment_environment_uuid,omitempty"`
	// The name of the branch the pipeline is running against.
	BranchName    string `protobuf:"bytes,7,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsBitbucket) Reset() {
	*x = JoinAttrsBitbucket{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsBitbucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsBitbucket) ProtoMessage() {}

func (x *JoinAttrsBitbucket) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsBitbucket.ProtoReflect.Descriptor instead.
func (*JoinAttrsBitbucket) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{8}
}

func (x *JoinAttrsBitbucket) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinAttrsBitbucket) GetStepUuid() string {
	if x != nil {
		return x.StepUuid
	}
	return ""
}

func (x *JoinAttrsBitbucket) GetRepositoryUuid() string {
	if x != nil {
		return x.RepositoryUuid
	}
	return ""
}

func (x *JoinAttrsBitbucket) GetPipelineUuid() string {
	if x != nil {
		return x.PipelineUuid
	}
	return ""
}

func (x *JoinAttrsBitbucket) GetWorkspaceUuid() string {
	if x != nil {
		return x.WorkspaceUuid
	}
	return ""
}

func (x *JoinAttrsBitbucket) GetDeploymentEnvironmentUuid() string {
	if x != nil {
		return x.DeploymentEnvironmentUuid
	}
	return ""
}

func (x *JoinAttrsBitbucket) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

// Attributes that are specific to the Terraform Cloud (`terraform_cloud`) join method.
// These are mapped from the claims of the JWT issued by Terraform Cloud to runs,
// which is documented at: https://developer.hashicorp.com/terraform/enterprise/workspaces/dynamic-provider-credentials/workload-identity-tokens
type JoinAttrsTerraformCloud struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The `sub` claim of the Terraform Cloud JWT that was used to join.
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// The name of the organization the project and workspace belong to.
	OrganizationName string `protobuf:"bytes,2,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// The name of the project the workspace belongs to.
	ProjectName string `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// The name of the workspace that the plan/apply is running within.
	WorkspaceName string `protobuf:"bytes,4,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	// The fully qualified workspace path, including the organization and project
	// name.
	// For example: `organization:<name>:project:<name>:workspace:<name>`
	FullWorkspace string `protobuf:"bytes,5,opt,name=full_workspace,json=fullWorkspace,proto3" json:"full_workspace,omitempty"`
	// The ID of the run that is being executed.
	RunId string `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The phase of the run that is being executed, either `plan` or `apply`.
	RunPhase      string `protobuf:"bytes,7,opt,name=run_phase,json=runPhase,proto3" json:"run_phase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsTerraformCloud) Reset() {
	*x = JoinAttrsTerraformCloud{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsTerraformCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsTerraformCloud) ProtoMessage() {}

func (x *JoinAttrsTerraformCloud) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsTerraformCloud.ProtoReflect.Descriptor instead.
func (*JoinAttrsTerraformCloud) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{9}
}

func (x *JoinAttrsTerraformCloud) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinAttrsTerraformCloud) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *JoinAttrsTerraformCloud) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *JoinAttrsTerraformCloud) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *JoinAttrsTerraformCloud) GetFullWorkspace() string {
	if x != nil {
		return x.FullWorkspace
	}
	return ""
}

func (x *JoinAttrsTerraformCloud) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *JoinAttrsTerraformCloud) GetRunPhase() string {
	if x != nil {
		return x.RunPhase
	}
	return ""
}

// Attributes that are specific to the Spacelift (`spacelift`) join method.
// These are mapped from the claims of the JWT issued by Spacelift to runs,
// which is documented at: https://docs.spacelift.io/integrations/cloud-providers/oidc/#standard-claims
type JoinAttrsSpacelift struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The `sub` claim of the Spacelift JWT that was used to join.
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// The ID of the space in which the run is executing.
	SpaceId string `protobuf:"bytes,2,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// The type of the caller that owns the run, either `stack` or `module`.
	CallerType string `protobuf:"bytes,3,opt,name=caller_type,json=callerType,proto3" json:"caller_type,omitempty"`
	// The ID of the caller that generated the run.
	CallerId string `protobuf:"bytes,4,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// The type of the run, either `PROPOSED`, `TRACKED`, `TASK`, `TESTING` or `DESTROY`.
	RunType string `protobuf:"bytes,5,opt,name=run_type,json=runType,proto3" json:"run_type,omitempty"`
	// The ID of the run.
	RunId string `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The configured scope of the token, either `read` or `write`.
	Scope         string `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsSpacelift) Reset() {
	*x = JoinAttrsSpacelift{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsSpacelift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsSpacelift) ProtoMessage() {}

func (x *JoinAttrsSpacelift) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsSpacelift.ProtoReflect.Descriptor instead.
func (*JoinAttrsSpacelift) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{10}
}

func (x *JoinAttrsSpacelift) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinAttrsSpacelift) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *JoinAttrsSpacelift) GetCallerType() string {
	if x != nil {
		return x.CallerType
	}
	return ""
}

func (x *JoinAttrsSpacelift) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *JoinAttrsSpacelift) GetRunType() string {
	if x != nil {
		return x.RunType
	}
	return ""
}

func (x *JoinAttrsSpacelift) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *JoinAttrsSpacelift) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

// Attributes specific to the GCP join method when the joining entity is on a
// GCE instance.
type JoinAttrsGCPGCE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the GCE instance that the joining entity is running on.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The zone of the GCE instance that the joining entity is running on.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// The ID of the GCE instance that the joining entity is running on.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The project ID of the GCP project that the instance is running within.
	Project       string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsGCPGCE) Reset() {
	*x = JoinAttrsGCPGCE{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsGCPGCE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsGCPGCE) ProtoMessage() {}

func (x *JoinAttrsGCPGCE) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsGCPGCE.ProtoReflect.Descriptor instead.
func (*JoinAttrsGCPGCE) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{11}
}

func (x *JoinAttrsGCPGCE) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JoinAttrsGCPGCE) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *JoinAttrsGCPGCE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JoinAttrsGCPGCE) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Attributes that are specific to the GCP (`gcp`) join method.
// These are mapped from the claims of the JWT instance identity token, which
// is documented at: https://cloud.google.com/compute/docs/instances/verifying-instance-identity#payload
type JoinAttrsGCP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The service account email of the service account that the instance is running as.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Attributes specific to the GCP join method when the joining entity is on a
	// GCE instance. This may not be present if the joining entity is not on
	// GCE.
	Gce           *JoinAttrsGCPGCE `protobuf:"bytes,2,opt,name=gce,proto3" json:"gce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsGCP) Reset() {
	*x = JoinAttrsGCP{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsGCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsGCP) ProtoMessage() {}

func (x *JoinAttrsGCP) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsGCP.ProtoReflect.Descriptor instead.
func (*JoinAttrsGCP) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{12}
}

func (x *JoinAttrsGCP) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *JoinAttrsGCP) GetGce() *JoinAttrsGCPGCE {
	if x != nil {
		return x.Gce
	}
	return nil
}

// Attributes that are specific to the Kubernetes (`kubernetes`) join method
// when a pod-bound service account token is used.
type JoinAttrsKubernetesPod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the service account that the joining entity is running as.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsKubernetesPod) Reset() {
	*x = JoinAttrsKubernetesPod{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsKubernetesPod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsKubernetesPod) ProtoMessage() {}

func (x *JoinAttrsKubernetesPod) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsKubernetesPod.ProtoReflect.Descriptor instead.
func (*JoinAttrsKubernetesPod) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{13}
}

func (x *JoinAttrsKubernetesPod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Attributes that are specific to the Kubernetes (`kubernetes`) join method
// when a service account token is used.
type JoinAttrsKubernetesServiceAccount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the service account that the joining entity is running as.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the service account that the joining entity is running as.
	Namespace     string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsKubernetesServiceAccount) Reset() {
	*x = JoinAttrsKubernetesServiceAccount{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsKubernetesServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsKubernetesServiceAccount) ProtoMessage() {}

func (x *JoinAttrsKubernetesServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsKubernetesServiceAccount.ProtoReflect.Descriptor instead.
func (*JoinAttrsKubernetesServiceAccount) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{14}
}

func (x *JoinAttrsKubernetesServiceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JoinAttrsKubernetesServiceAccount) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Attributes that are specific to the Kubernetes (`kubernetes`) join method.
type JoinAttrsKubernetes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The fully qualified identifier of the entity based on the Kubernetes
	// token. For a service account, this takes the form of
	// `system:serviceaccount:<namespace>:<service-account-name>`.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Attributes specific to the Kubernetes join method when the joining entity
	// is a service account token. This will only be present if the joining entity
	// is a service account (as opposed to a human user or similar).
	ServiceAccount *JoinAttrsKubernetesServiceAccount `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Attributes specific to the Kubernetes join method when the joining entity
	// is a pod-bound service account token. This will only be present if the
	// joining entity is a service account, and, the token has been bound to a
	// pod.
	Pod           *JoinAttrsKubernetesPod `protobuf:"bytes,3,opt,name=pod,proto3" json:"pod,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsKubernetes) Reset() {
	*x = JoinAttrsKubernetes{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsKubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsKubernetes) ProtoMessage() {}

func (x *JoinAttrsKubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsKubernetes.ProtoReflect.Descriptor instead.
func (*JoinAttrsKubernetes) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{15}
}

func (x *JoinAttrsKubernetes) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *JoinAttrsKubernetes) GetServiceAccount() *JoinAttrsKubernetesServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

func (x *JoinAttrsKubernetes) GetPod() *JoinAttrsKubernetesPod {
	if x != nil {
		return x.Pod
	}
	return nil
}

// Attributes that are specific to the Oracle (`oracle`) join method.
type JoinAttrsOracle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the instance's tenant.
	TenancyId string `protobuf:"bytes,1,opt,name=tenancy_id,json=tenancyId,proto3" json:"tenancy_id,omitempty"`
	// The ID of the instance's compartment.
	CompartmentId string `protobuf:"bytes,2,opt,name=compartment_id,json=compartmentId,proto3" json:"compartment_id,omitempty"`
	// The ID of the instance.
	InstanceId    string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsOracle) Reset() {
	*x = JoinAttrsOracle{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsOracle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsOracle) ProtoMessage() {}

func (x *JoinAttrsOracle) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsOracle.ProtoReflect.Descriptor instead.
func (*JoinAttrsOracle) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{16}
}

func (x *JoinAttrsOracle) GetTenancyId() string {
	if x != nil {
		return x.TenancyId
	}
	return ""
}

func (x *JoinAttrsOracle) GetCompartmentId() string {
	if x != nil {
		return x.CompartmentId
	}
	return ""
}

func (x *JoinAttrsOracle) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Attributes that are specific to the Azure Devops (`azure_devops`) join method.
type JoinAttrsAzureDevops struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Attributes specific to joins that occur with the pipeline ID token.
	Pipeline      *JoinAttrsAzureDevopsPipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsAzureDevops) Reset() {
	*x = JoinAttrsAzureDevops{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsAzureDevops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsAzureDevops) ProtoMessage() {}

func (x *JoinAttrsAzureDevops) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsAzureDevops.ProtoReflect.Descriptor instead.
func (*JoinAttrsAzureDevops) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{17}
}

func (x *JoinAttrsAzureDevops) GetPipeline() *JoinAttrsAzureDevopsPipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// Attributes that are specific to the Azure DevOps join method when the
// pipeline ID token is used for authentication
type JoinAttrsAzureDevopsPipeline struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The `sub` claim of the Azure DevOps pipeline ID token that was used to join.
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// The name of the organization that the pipeline is running within.
	OrganizationName string `protobuf:"bytes,2,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// The name of the project that the pipeline is running within.
	ProjectName string `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// The name of the pipeline that is running.
	PipelineName string `protobuf:"bytes,4,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	// The ID of the organization that the pipeline is running within.
	OrganizationId string `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The ID of the project that the pipeline is running within.
	ProjectId string `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of the pipeline that is running.
	DefinitionId string `protobuf:"bytes,7,opt,name=definition_id,json=definitionId,proto3" json:"definition_id,omitempty"`
	// The ID of the repository that the pipeline is running within.
	RepositoryId string `protobuf:"bytes,8,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	// The version of the repository that the pipeline is running against.
	// For Git this will be the commit SHA.
	RepositoryVersion string `protobuf:"bytes,9,opt,name=repository_version,json=repositoryVersion,proto3" json:"repository_version,omitempty"`
	// The ref of the repository that the pipeline is running against.
	RepositoryRef string `protobuf:"bytes,10,opt,name=repository_ref,json=repositoryRef,proto3" json:"repository_ref,omitempty"`
	// The ID of the run that is being executed.
	RunId         string `protobuf:"bytes,11,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinAttrsAzureDevopsPipeline) Reset() {
	*x = JoinAttrsAzureDevopsPipeline{}
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAttrsAzureDevopsPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAttrsAzureDevopsPipeline) ProtoMessage() {}

func (x *JoinAttrsAzureDevopsPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAttrsAzureDevopsPipeline.ProtoReflect.Descriptor instead.
func (*JoinAttrsAzureDevopsPipeline) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP(), []int{18}
}

func (x *JoinAttrsAzureDevopsPipeline) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetDefinitionId() string {
	if x != nil {
		return x.DefinitionId
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetRepositoryVersion() string {
	if x != nil {
		return x.RepositoryVersion
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetRepositoryRef() string {
	if x != nil {
		return x.RepositoryRef
	}
	return ""
}

func (x *JoinAttrsAzureDevopsPipeline) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

var File_teleport_workloadidentity_v1_join_attrs_proto protoreflect.FileDescriptor

const file_teleport_workloadidentity_v1_join_attrs_proto_rawDesc = "" +
	"\n" +
	"-teleport/workloadidentity/v1/join_attrs.proto\x12\x1cteleport.workloadidentity.v1\"\x99\b\n" +
	"\tJoinAttrs\x12?\n" +
	"\x04meta\x18\x01 \x01(\v2+.teleport.workloadidentity.v1.JoinAttrsMetaR\x04meta\x12E\n" +
	"\x06gitlab\x18\x02 \x01(\v2-.teleport.workloadidentity.v1.JoinAttrsGitLabR\x06gitlab\x12E\n" +
	"\x06github\x18\x03 \x01(\v2-.teleport.workloadidentity.v1.JoinAttrsGitHubR\x06github\x12?\n" +
	"\x03iam\x18\x04 \x01(\v2-.teleport.workloadidentity.v1.JoinAttrsAWSIAMR\x03iam\x12<\n" +
	"\x03tpm\x18\x05 \x01(\v2*.teleport.workloadidentity.v1.JoinAttrsTPMR\x03tpm\x12B\n" +
	"\x05azure\x18\x06 \x01(\v2,.teleport.workloadidentity.v1.JoinAttrsAzureR\x05azure\x12K\n" +
	"\bcircleci\x18\a \x01(\v2/.teleport.workloadidentity.v1.JoinAttrsCircleCIR\bcircleci\x12N\n" +
	"\tbitbucket\x18\b \x01(\v20.teleport.workloadidentity.v1.JoinAttrsBitbucketR\tbitbucket\x12^\n" +
	"\x0fterraform_cloud\x18\t \x01(\v25.teleport.workloadidentity.v1.JoinAttrsTerraformCloudR\x0eterraformCloud\x12N\n" +
	"\tspacelift\x18\n" +
	" \x01(\v20.teleport.workloadidentity.v1.JoinAttrsSpaceliftR\tspacelift\x12<\n" +
	"\x03gcp\x18\v \x01(\v2*.teleport.workloadidentity.v1.JoinAttrsGCPR\x03gcp\x12Q\n" +
	"\n" +
	"kubernetes\x18\f \x01(\v21.teleport.workloadidentity.v1.JoinAttrsKubernetesR\n" +
	"kubernetes\x12E\n" +
	"\x06oracle\x18\r \x01(\v2-.teleport.workloadidentity.v1.JoinAttrsOracleR\x06oracle\x12U\n" +
	"\fazure_devops\x18\x0e \x01(\v22.teleport.workloadidentity.v1.JoinAttrsAzureDevopsR\vazureDevops\"X\n" +
	"\rJoinAttrsMeta\x12&\n" +
	"\x0fjoin_token_name\x18\x01 \x01(\tR\rjoinTokenName\x12\x1f\n" +
	"\vjoin_method\x18\x02 \x01(\tR\n" +
	"joinMethod\"\xcb\x04\n" +
	"\x0fJoinAttrsGitLab\x12\x10\n" +
	"\x03sub\x18\x01 \x01(\tR\x03sub\x12\x10\n" +
	"\x03ref\x18\x02 \x01(\tR\x03ref\x12\x19\n" +
	"\bref_type\x18\x03 \x01(\tR\arefType\x12#\n" +
	"\rref_protected\x18\x04 \x01(\bR\frefProtected\x12%\n" +
	"\x0enamespace_path\x18\x05 \x01(\tR\rnamespacePath\x12!\n" +
	"\fproject_path\x18\x06 \x01(\tR\vprojectPath\x12\x1d\n" +
	"\n" +
	"user_login\x18\a \x01(\tR\tuserLogin\x12\x1d\n" +
	"\n" +
	"user_email\x18\b \x01(\tR\tuserEmail\x12\x1f\n" +
	"\vpipeline_id\x18\t \x01(\tR\n" +
	"pipelineId\x12'\n" +
	"\x0fpipeline_source\x18\n" +
	" \x01(\tR\x0epipelineSource\x12 \n" +
	"\venvironment\x18\v \x01(\tR\venvironment\x123\n" +
	"\x15environment_protected\x18\f \x01(\bR\x14environmentProtected\x12\x1b\n" +
	"\trunner_id\x18\r \x01(\x03R\brunnerId\x12-\n" +
	"\x12runner_environment\x18\x0e \x01(\tR\x11runnerEnvironment\x12\x10\n" +
	"\x03sha\x18\x0f \x01(\tR\x03sha\x12)\n" +
	"\x11ci_config_ref_uri\x18\x10 \x01(\tR\x0eciConfigRefUri\x12\"\n" +
	"\rci_config_sha\x18\x11 \x01(\tR\vciConfigSha\"\xb7\x02\n" +
	"\x0fJoinAttrsGitHub\x12\x10\n" +
	"\x03sub\x18\x01 \x01(\tR\x03sub\x12\x14\n" +
	"\x05actor\x18\x02 \x01(\tR\x05actor\x12 \n" +
	"\venvironment\x18\x03 \x01(\tR\venvironment\x12\x10\n" +
	"\x03ref\x18\x04 \x01(\tR\x03ref\x12\x19\n" +
	"\bref_type\x18\x05 \x01(\tR\arefType\x12\x1e\n" +
	"\n" +
	"repository\x18\x06 \x01(\tR\n" +
	"repository\x12)\n" +
	"\x10repository_owner\x18\a \x01(\tR\x0frepositoryOwner\x12\x1a\n" +
	"\bworkflow\x18\b \x01(\tR\bworkflow\x12\x1d\n" +
	"\n" +
	"event_name\x18\t \x01(\tR\teventName\x12\x10\n" +
	"\x03sha\x18\n" +
	" \x01(\tR\x03sha\x12\x15\n" +
	"\x06run_id\x18\v \x01(\tR\x05runId\"=\n" +
	"\x0fJoinAttrsAWSIAM\x12\x18\n" +
	"\aaccount\x18\x01 \x01(\tR\aaccount\x12\x10\n" +
	"\x03arn\x18\x02 \x01(\tR\x03arn\"~\n" +
	"\fJoinAttrsTPM\x12\x1e\n" +
	"\vek_pub_hash\x18\x01 \x01(\tR\tekPubHash\x12$\n" +
	"\x0eek_cert_serial\x18\x02 \x01(\tR\fekCertSerial\x12(\n" +
	"\x10ek_cert_verified\x18\x03 \x01(\bR\x0eekCertVerified\"[\n" +
	"\x0eJoinAttrsAzure\x12\"\n" +
	"\fsubscription\x18\x01 \x01(\tR\fsubscription\x12%\n" +
	"\x0eresource_group\x18\x02 \x01(\tR\rresourceGroup\"e\n" +
	"\x11JoinAttrsCircleCI\x12\x10\n" +
	"\x03sub\x18\x01 \x01(\tR\x03sub\x12\x1f\n" +
	"\vcontext_ids\x18\x02 \x03(\tR\n" +
	"contextIds\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\"\x99\x02\n" +
	"\x12JoinAttrsBitbucket\x12\x10\n" +
	"\x03sub\x18\x01 \x01(\tR\x03sub\x12\x1b\n" +
	"\tstep_uuid\x18\x02 \x01(\tR\bstepUuid\x12'\n" +
	"\x0frepository_uuid\x18\x03 \x01(\tR\x0erepositoryUuid\x12#\n" +
	"\rpipeline_uuid\x18\x04 \x01(\tR\fpipelineUuid\x12%\n" +
	"\x0eworkspace_uuid\x18\x05 \x01(\tR\rworkspaceUuid\x12>\n" +
	"\x1bdeployment_environment_uuid\x18\x06 \x01(\tR\x19deploymentEnvironmentUuid\x12\x1f\n" +
	"\vbranch_name\x18\a \x01(\tR\n" +
	"branchName\"\xfd\x01\n" +
	"\x17JoinAttrsTerraformCloud\x12\x10\n" +
	"\x03sub\x18\x01 \x01(\tR\x03sub\x12+\n" +
	"\x11organization_name\x18\x02 \x01(\tR\x10organizationName\x12!\n" +
	"\fproject_name\x18\x03 \x01(\tR\vprojectName\x12%\n" +
	"\x0eworkspace_name\x18\x04 \x01(\tR\rworkspaceName\x12%\n" +
	"\x0efull_workspace\x18\x05 \x01(\tR\rfullWorkspace\x12\x15\n" +
	"\x06run_id\x18\x06 \x01(\tR\x05runId\x12\x1b\n" +
	"\trun_phase\x18\a \x01(\tR\brunPhase\"\xc7\x01\n" +
	"\x12JoinAttrsSpacelift\x12\x10\n" +
	"\x03sub\x18\x01 \x01(\tR\x03sub\x12\x19\n" +
	"\bspace_id\x18\x02 \x01(\tR\aspaceId\x12\x1f\n" +
	"\vcaller_type\x18\x03 \x01(\tR\n" +
	"callerType\x12\x1b\n" +
	"\tcaller_id\x18\x04 \x01(\tR\bcallerId\x12\x19\n" +
	"\brun_type\x18\x05 \x01(\tR\arunType\x12\x15\n" +
	"\x06run_id\x18\x06 \x01(\tR\x05runId\x12\x14\n" +
	"\x05scope\x18\a \x01(\tR\x05scope\"c\n" +
	"\x0fJoinAttrsGCPGCE\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04zone\x18\x02 \x01(\tR\x04zone\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\x12\x18\n" +
	"\aproject\x18\x04 \x01(\tR\aproject\"x\n" +
	"\fJoinAttrsGCP\x12'\n" +
	"\x0fservice_account\x18\x01 \x01(\tR\x0eserviceAccount\x12?\n" +
	"\x03gce\x18\x02 \x01(\v2-.teleport.workloadidentity.v1.JoinAttrsGCPGCER\x03gce\",\n" +
	"\x16JoinAttrsKubernetesPod\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"U\n" +
	"!JoinAttrsKubernetesServiceAccount\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"\xe1\x01\n" +
	"\x13JoinAttrsKubernetes\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12h\n" +
	"\x0fservice_account\x18\x02 \x01(\v2?.teleport.workloadidentity.v1.JoinAttrsKubernetesServiceAccountR\x0eserviceAccount\x12F\n" +
	"\x03pod\x18\x03 \x01(\v24.teleport.workloadidentity.v1.JoinAttrsKubernetesPodR\x03pod\"x\n" +
	"\x0fJoinAttrsOracle\x12\x1d\n" +
	"\n" +
	"tenancy_id\x18\x01 \x01(\tR\ttenancyId\x12%\n" +
	"\x0ecompartment_id\x18\x02 \x01(\tR\rcompartmentId\x12\x1f\n" +
	"\vinstance_id\x18\x03 \x01(\tR\n" +
	"instanceId\"n\n" +
	"\x14JoinAttrsAzureDevops\x12V\n" +
	"\bpipeline\x18\x01 \x01(\v2:.teleport.workloadidentity.v1.JoinAttrsAzureDevopsPipelineR\bpipeline\"\xa4\x03\n" +
	"\x1cJoinAttrsAzureDevopsPipeline\x12\x10\n" +
	"\x03sub\x18\x01 \x01(\tR\x03sub\x12+\n" +
	"\x11organization_name\x18\x02 \x01(\tR\x10organizationName\x12!\n" +
	"\fproject_name\x18\x03 \x01(\tR\vprojectName\x12#\n" +
	"\rpipeline_name\x18\x04 \x01(\tR\fpipelineName\x12'\n" +
	"\x0forganization_id\x18\x05 \x01(\tR\x0eorganizationId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x06 \x01(\tR\tprojectId\x12#\n" +
	"\rdefinition_id\x18\a \x01(\tR\fdefinitionId\x12#\n" +
	"\rrepository_id\x18\b \x01(\tR\frepositoryId\x12-\n" +
	"\x12repository_version\x18\t \x01(\tR\x11repositoryVersion\x12%\n" +
	"\x0erepository_ref\x18\n" +
	" \x01(\tR\rrepositoryRef\x12\x15\n" +
	"\x06run_id\x18\v \x01(\tR\x05runIdBdZbgithub.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1b\x06proto3"

var (
	file_teleport_workloadidentity_v1_join_attrs_proto_rawDescOnce sync.Once
	file_teleport_workloadidentity_v1_join_attrs_proto_rawDescData []byte
)

func file_teleport_workloadidentity_v1_join_attrs_proto_rawDescGZIP() []byte {
	file_teleport_workloadidentity_v1_join_attrs_proto_rawDescOnce.Do(func() {
		file_teleport_workloadidentity_v1_join_attrs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_join_attrs_proto_rawDesc), len(file_teleport_workloadidentity_v1_join_attrs_proto_rawDesc)))
	})
	return file_teleport_workloadidentity_v1_join_attrs_proto_rawDescData
}

var file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_teleport_workloadidentity_v1_join_attrs_proto_goTypes = []any{
	(*JoinAttrs)(nil),                         // 0: teleport.workloadidentity.v1.JoinAttrs
	(*JoinAttrsMeta)(nil),                     // 1: teleport.workloadidentity.v1.JoinAttrsMeta
	(*JoinAttrsGitLab)(nil),                   // 2: teleport.workloadidentity.v1.JoinAttrsGitLab
	(*JoinAttrsGitHub)(nil),                   // 3: teleport.workloadidentity.v1.JoinAttrsGitHub
	(*JoinAttrsAWSIAM)(nil),                   // 4: teleport.workloadidentity.v1.JoinAttrsAWSIAM
	(*JoinAttrsTPM)(nil),                      // 5: teleport.workloadidentity.v1.JoinAttrsTPM
	(*JoinAttrsAzure)(nil),                    // 6: teleport.workloadidentity.v1.JoinAttrsAzure
	(*JoinAttrsCircleCI)(nil),                 // 7: teleport.workloadidentity.v1.JoinAttrsCircleCI
	(*JoinAttrsBitbucket)(nil),                // 8: teleport.workloadidentity.v1.JoinAttrsBitbucket
	(*JoinAttrsTerraformCloud)(nil),           // 9: teleport.workloadidentity.v1.JoinAttrsTerraformCloud
	(*JoinAttrsSpacelift)(nil),                // 10: teleport.workloadidentity.v1.JoinAttrsSpacelift
	(*JoinAttrsGCPGCE)(nil),                   // 11: teleport.workloadidentity.v1.JoinAttrsGCPGCE
	(*JoinAttrsGCP)(nil),                      // 12: teleport.workloadidentity.v1.JoinAttrsGCP
	(*JoinAttrsKubernetesPod)(nil),            // 13: teleport.workloadidentity.v1.JoinAttrsKubernetesPod
	(*JoinAttrsKubernetesServiceAccount)(nil), // 14: teleport.workloadidentity.v1.JoinAttrsKubernetesServiceAccount
	(*JoinAttrsKubernetes)(nil),               // 15: teleport.workloadidentity.v1.JoinAttrsKubernetes
	(*JoinAttrsOracle)(nil),                   // 16: teleport.workloadidentity.v1.JoinAttrsOracle
	(*JoinAttrsAzureDevops)(nil),              // 17: teleport.workloadidentity.v1.JoinAttrsAzureDevops
	(*JoinAttrsAzureDevopsPipeline)(nil),      // 18: teleport.workloadidentity.v1.JoinAttrsAzureDevopsPipeline
}
var file_teleport_workloadidentity_v1_join_attrs_proto_depIdxs = []int32{
	1,  // 0: teleport.workloadidentity.v1.JoinAttrs.meta:type_name -> teleport.workloadidentity.v1.JoinAttrsMeta
	2,  // 1: teleport.workloadidentity.v1.JoinAttrs.gitlab:type_name -> teleport.workloadidentity.v1.JoinAttrsGitLab
	3,  // 2: teleport.workloadidentity.v1.JoinAttrs.github:type_name -> teleport.workloadidentity.v1.JoinAttrsGitHub
	4,  // 3: teleport.workloadidentity.v1.JoinAttrs.iam:type_name -> teleport.workloadidentity.v1.JoinAttrsAWSIAM
	5,  // 4: teleport.workloadidentity.v1.JoinAttrs.tpm:type_name -> teleport.workloadidentity.v1.JoinAttrsTPM
	6,  // 5: teleport.workloadidentity.v1.JoinAttrs.azure:type_name -> teleport.workloadidentity.v1.JoinAttrsAzure
	7,  // 6: teleport.workloadidentity.v1.JoinAttrs.circleci:type_name -> teleport.workloadidentity.v1.JoinAttrsCircleCI
	8,  // 7: teleport.workloadidentity.v1.JoinAttrs.bitbucket:type_name -> teleport.workloadidentity.v1.JoinAttrsBitbucket
	9,  // 8: teleport.workloadidentity.v1.JoinAttrs.terraform_cloud:type_name -> teleport.workloadidentity.v1.JoinAttrsTerraformCloud
	10, // 9: teleport.workloadidentity.v1.JoinAttrs.spacelift:type_name -> teleport.workloadidentity.v1.JoinAttrsSpacelift
	12, // 10: teleport.workloadidentity.v1.JoinAttrs.gcp:type_name -> teleport.workloadidentity.v1.JoinAttrsGCP
	15, // 11: teleport.workloadidentity.v1.JoinAttrs.kubernetes:type_name -> teleport.workloadidentity.v1.JoinAttrsKubernetes
	16, // 12: teleport.workloadidentity.v1.JoinAttrs.oracle:type_name -> teleport.workloadidentity.v1.JoinAttrsOracle
	17, // 13: teleport.workloadidentity.v1.JoinAttrs.azure_devops:type_name -> teleport.workloadidentity.v1.JoinAttrsAzureDevops
	11, // 14: teleport.workloadidentity.v1.JoinAttrsGCP.gce:type_name -> teleport.workloadidentity.v1.JoinAttrsGCPGCE
	14, // 15: teleport.workloadidentity.v1.JoinAttrsKubernetes.service_account:type_name -> teleport.workloadidentity.v1.JoinAttrsKubernetesServiceAccount
	13, // 16: teleport.workloadidentity.v1.JoinAttrsKubernetes.pod:type_name -> teleport.workloadidentity.v1.JoinAttrsKubernetesPod
	18, // 17: teleport.workloadidentity.v1.JoinAttrsAzureDevops.pipeline:type_name -> teleport.workloadidentity.v1.JoinAttrsAzureDevopsPipeline
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_teleport_workloadidentity_v1_join_attrs_proto_init() }
func file_teleport_workloadidentity_v1_join_attrs_proto_init() {
	if File_teleport_workloadidentity_v1_join_attrs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_join_attrs_proto_rawDesc), len(file_teleport_workloadidentity_v1_join_attrs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_workloadidentity_v1_join_attrs_proto_goTypes,
		DependencyIndexes: file_teleport_workloadidentity_v1_join_attrs_proto_depIdxs,
		MessageInfos:      file_teleport_workloadidentity_v1_join_attrs_proto_msgTypes,
	}.Build()
	File_teleport_workloadidentity_v1_join_attrs_proto = out.File
	file_teleport_workloadidentity_v1_join_attrs_proto_goTypes = nil
	file_teleport_workloadidentity_v1_join_attrs_proto_depIdxs = nil
}
