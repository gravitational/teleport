// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/workloadidentity/v1/resource_service.proto

package workloadidentityv1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkloadIdentityResourceService_CreateWorkloadIdentity_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityResourceService/CreateWorkloadIdentity"
	WorkloadIdentityResourceService_UpdateWorkloadIdentity_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityResourceService/UpdateWorkloadIdentity"
	WorkloadIdentityResourceService_UpsertWorkloadIdentity_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityResourceService/UpsertWorkloadIdentity"
	WorkloadIdentityResourceService_GetWorkloadIdentity_FullMethodName    = "/teleport.workloadidentity.v1.WorkloadIdentityResourceService/GetWorkloadIdentity"
	WorkloadIdentityResourceService_DeleteWorkloadIdentity_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityResourceService/DeleteWorkloadIdentity"
	WorkloadIdentityResourceService_ListWorkloadIdentities_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityResourceService/ListWorkloadIdentities"
)

// WorkloadIdentityResourceServiceClient is the client API for WorkloadIdentityResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadIdentityResourceServiceClient interface {
	// CreateWorkloadIdentity creates a new workload identity, it will refuse to
	// create a workload identity if one already exists with the same name.
	CreateWorkloadIdentity(ctx context.Context, in *CreateWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error)
	// UpdateWorkloadIdentity updates an existing workload identity, it will refuse
	// to update a workload identity if one does not already exist with the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided WorkloadIdentity matches the revision of
	// the existing WorkloadIdentity.
	UpdateWorkloadIdentity(ctx context.Context, in *UpdateWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error)
	// UpsertWorkloadIdentity creates or updates a workload identity. You should
	// prefer to call Create or Update.
	UpsertWorkloadIdentity(ctx context.Context, in *UpsertWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error)
	// GetWorkloadIdentity retrieves a workload identity by name.
	GetWorkloadIdentity(ctx context.Context, in *GetWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error)
	// DeleteWorkloadIdentity deletes a workload identity by name.
	DeleteWorkloadIdentity(ctx context.Context, in *DeleteWorkloadIdentityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListWorkloadIdentities of all workload identities, pagination semantics are
	// applied.
	ListWorkloadIdentities(ctx context.Context, in *ListWorkloadIdentitiesRequest, opts ...grpc.CallOption) (*ListWorkloadIdentitiesResponse, error)
}

type workloadIdentityResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadIdentityResourceServiceClient(cc grpc.ClientConnInterface) WorkloadIdentityResourceServiceClient {
	return &workloadIdentityResourceServiceClient{cc}
}

func (c *workloadIdentityResourceServiceClient) CreateWorkloadIdentity(ctx context.Context, in *CreateWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error) {
	out := new(WorkloadIdentity)
	err := c.cc.Invoke(ctx, WorkloadIdentityResourceService_CreateWorkloadIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityResourceServiceClient) UpdateWorkloadIdentity(ctx context.Context, in *UpdateWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error) {
	out := new(WorkloadIdentity)
	err := c.cc.Invoke(ctx, WorkloadIdentityResourceService_UpdateWorkloadIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityResourceServiceClient) UpsertWorkloadIdentity(ctx context.Context, in *UpsertWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error) {
	out := new(WorkloadIdentity)
	err := c.cc.Invoke(ctx, WorkloadIdentityResourceService_UpsertWorkloadIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityResourceServiceClient) GetWorkloadIdentity(ctx context.Context, in *GetWorkloadIdentityRequest, opts ...grpc.CallOption) (*WorkloadIdentity, error) {
	out := new(WorkloadIdentity)
	err := c.cc.Invoke(ctx, WorkloadIdentityResourceService_GetWorkloadIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityResourceServiceClient) DeleteWorkloadIdentity(ctx context.Context, in *DeleteWorkloadIdentityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkloadIdentityResourceService_DeleteWorkloadIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityResourceServiceClient) ListWorkloadIdentities(ctx context.Context, in *ListWorkloadIdentitiesRequest, opts ...grpc.CallOption) (*ListWorkloadIdentitiesResponse, error) {
	out := new(ListWorkloadIdentitiesResponse)
	err := c.cc.Invoke(ctx, WorkloadIdentityResourceService_ListWorkloadIdentities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadIdentityResourceServiceServer is the server API for WorkloadIdentityResourceService service.
// All implementations must embed UnimplementedWorkloadIdentityResourceServiceServer
// for forward compatibility
type WorkloadIdentityResourceServiceServer interface {
	// CreateWorkloadIdentity creates a new workload identity, it will refuse to
	// create a workload identity if one already exists with the same name.
	CreateWorkloadIdentity(context.Context, *CreateWorkloadIdentityRequest) (*WorkloadIdentity, error)
	// UpdateWorkloadIdentity updates an existing workload identity, it will refuse
	// to update a workload identity if one does not already exist with the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided WorkloadIdentity matches the revision of
	// the existing WorkloadIdentity.
	UpdateWorkloadIdentity(context.Context, *UpdateWorkloadIdentityRequest) (*WorkloadIdentity, error)
	// UpsertWorkloadIdentity creates or updates a workload identity. You should
	// prefer to call Create or Update.
	UpsertWorkloadIdentity(context.Context, *UpsertWorkloadIdentityRequest) (*WorkloadIdentity, error)
	// GetWorkloadIdentity retrieves a workload identity by name.
	GetWorkloadIdentity(context.Context, *GetWorkloadIdentityRequest) (*WorkloadIdentity, error)
	// DeleteWorkloadIdentity deletes a workload identity by name.
	DeleteWorkloadIdentity(context.Context, *DeleteWorkloadIdentityRequest) (*emptypb.Empty, error)
	// ListWorkloadIdentities of all workload identities, pagination semantics are
	// applied.
	ListWorkloadIdentities(context.Context, *ListWorkloadIdentitiesRequest) (*ListWorkloadIdentitiesResponse, error)
	mustEmbedUnimplementedWorkloadIdentityResourceServiceServer()
}

// UnimplementedWorkloadIdentityResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkloadIdentityResourceServiceServer struct {
}

func (UnimplementedWorkloadIdentityResourceServiceServer) CreateWorkloadIdentity(context.Context, *CreateWorkloadIdentityRequest) (*WorkloadIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkloadIdentity not implemented")
}
func (UnimplementedWorkloadIdentityResourceServiceServer) UpdateWorkloadIdentity(context.Context, *UpdateWorkloadIdentityRequest) (*WorkloadIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkloadIdentity not implemented")
}
func (UnimplementedWorkloadIdentityResourceServiceServer) UpsertWorkloadIdentity(context.Context, *UpsertWorkloadIdentityRequest) (*WorkloadIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWorkloadIdentity not implemented")
}
func (UnimplementedWorkloadIdentityResourceServiceServer) GetWorkloadIdentity(context.Context, *GetWorkloadIdentityRequest) (*WorkloadIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadIdentity not implemented")
}
func (UnimplementedWorkloadIdentityResourceServiceServer) DeleteWorkloadIdentity(context.Context, *DeleteWorkloadIdentityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkloadIdentity not implemented")
}
func (UnimplementedWorkloadIdentityResourceServiceServer) ListWorkloadIdentities(context.Context, *ListWorkloadIdentitiesRequest) (*ListWorkloadIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloadIdentities not implemented")
}
func (UnimplementedWorkloadIdentityResourceServiceServer) mustEmbedUnimplementedWorkloadIdentityResourceServiceServer() {
}

// UnsafeWorkloadIdentityResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadIdentityResourceServiceServer will
// result in compilation errors.
type UnsafeWorkloadIdentityResourceServiceServer interface {
	mustEmbedUnimplementedWorkloadIdentityResourceServiceServer()
}

func RegisterWorkloadIdentityResourceServiceServer(s grpc.ServiceRegistrar, srv WorkloadIdentityResourceServiceServer) {
	s.RegisterService(&WorkloadIdentityResourceService_ServiceDesc, srv)
}

func _WorkloadIdentityResourceService_CreateWorkloadIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityResourceServiceServer).CreateWorkloadIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityResourceService_CreateWorkloadIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityResourceServiceServer).CreateWorkloadIdentity(ctx, req.(*CreateWorkloadIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityResourceService_UpdateWorkloadIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkloadIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityResourceServiceServer).UpdateWorkloadIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityResourceService_UpdateWorkloadIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityResourceServiceServer).UpdateWorkloadIdentity(ctx, req.(*UpdateWorkloadIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityResourceService_UpsertWorkloadIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertWorkloadIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityResourceServiceServer).UpsertWorkloadIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityResourceService_UpsertWorkloadIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityResourceServiceServer).UpsertWorkloadIdentity(ctx, req.(*UpsertWorkloadIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityResourceService_GetWorkloadIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityResourceServiceServer).GetWorkloadIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityResourceService_GetWorkloadIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityResourceServiceServer).GetWorkloadIdentity(ctx, req.(*GetWorkloadIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityResourceService_DeleteWorkloadIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityResourceServiceServer).DeleteWorkloadIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityResourceService_DeleteWorkloadIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityResourceServiceServer).DeleteWorkloadIdentity(ctx, req.(*DeleteWorkloadIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityResourceService_ListWorkloadIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityResourceServiceServer).ListWorkloadIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityResourceService_ListWorkloadIdentities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityResourceServiceServer).ListWorkloadIdentities(ctx, req.(*ListWorkloadIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkloadIdentityResourceService_ServiceDesc is the grpc.ServiceDesc for WorkloadIdentityResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadIdentityResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.workloadidentity.v1.WorkloadIdentityResourceService",
	HandlerType: (*WorkloadIdentityResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkloadIdentity",
			Handler:    _WorkloadIdentityResourceService_CreateWorkloadIdentity_Handler,
		},
		{
			MethodName: "UpdateWorkloadIdentity",
			Handler:    _WorkloadIdentityResourceService_UpdateWorkloadIdentity_Handler,
		},
		{
			MethodName: "UpsertWorkloadIdentity",
			Handler:    _WorkloadIdentityResourceService_UpsertWorkloadIdentity_Handler,
		},
		{
			MethodName: "GetWorkloadIdentity",
			Handler:    _WorkloadIdentityResourceService_GetWorkloadIdentity_Handler,
		},
		{
			MethodName: "DeleteWorkloadIdentity",
			Handler:    _WorkloadIdentityResourceService_DeleteWorkloadIdentity_Handler,
		},
		{
			MethodName: "ListWorkloadIdentities",
			Handler:    _WorkloadIdentityResourceService_ListWorkloadIdentities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/workloadidentity/v1/resource_service.proto",
}
