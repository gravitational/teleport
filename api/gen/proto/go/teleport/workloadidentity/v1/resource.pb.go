// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/workloadidentity/v1/resource.proto

package workloadidentityv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkloadIdentity represents a single, or group of similar, workload
// identities and configures the structure of workload identity credentials and
// authorization rules. is a resource that represents the configuration of a trust
// domain federation.
type WorkloadIdentity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The kind of resource represented.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Differentiates variations of the same kind. All resources should
	// contain one, even if it is never populated.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// The version of the resource being represented.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Common metadata that all resources share.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The configured properties of the WorkloadIdentity
	Spec          *WorkloadIdentitySpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentity) Reset() {
	*x = WorkloadIdentity{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentity) ProtoMessage() {}

func (x *WorkloadIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentity.ProtoReflect.Descriptor instead.
func (*WorkloadIdentity) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{0}
}

func (x *WorkloadIdentity) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkloadIdentity) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *WorkloadIdentity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkloadIdentity) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkloadIdentity) GetSpec() *WorkloadIdentitySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// The attribute casted to a string must be equal to the value.
type WorkloadIdentityConditionEq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value to compare the attribute against.
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentityConditionEq) Reset() {
	*x = WorkloadIdentityConditionEq{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityConditionEq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityConditionEq) ProtoMessage() {}

func (x *WorkloadIdentityConditionEq) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityConditionEq.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityConditionEq) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{1}
}

func (x *WorkloadIdentityConditionEq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The attribute casted to a string must not be equal to the value.
type WorkloadIdentityConditionNotEq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value to compare the attribute against.
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentityConditionNotEq) Reset() {
	*x = WorkloadIdentityConditionNotEq{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityConditionNotEq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityConditionNotEq) ProtoMessage() {}

func (x *WorkloadIdentityConditionNotEq) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityConditionNotEq.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityConditionNotEq) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{2}
}

func (x *WorkloadIdentityConditionNotEq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The attribute casted to a string must be in the list of values.
type WorkloadIdentityConditionIn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of values to compare the attribute against.
	Values        []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentityConditionIn) Reset() {
	*x = WorkloadIdentityConditionIn{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityConditionIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityConditionIn) ProtoMessage() {}

func (x *WorkloadIdentityConditionIn) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityConditionIn.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityConditionIn) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{3}
}

func (x *WorkloadIdentityConditionIn) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// The attribute casted to a string must not be in the list of values.
type WorkloadIdentityConditionNotIn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of values to compare the attribute against.
	Values        []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentityConditionNotIn) Reset() {
	*x = WorkloadIdentityConditionNotIn{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityConditionNotIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityConditionNotIn) ProtoMessage() {}

func (x *WorkloadIdentityConditionNotIn) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityConditionNotIn.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityConditionNotIn) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{4}
}

func (x *WorkloadIdentityConditionNotIn) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// The individual conditions that make up a rule.
type WorkloadIdentityCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the attribute to evaluate the condition against.
	Attribute string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// Types that are valid to be assigned to Operator:
	//
	//	*WorkloadIdentityCondition_Eq
	//	*WorkloadIdentityCondition_NotEq
	//	*WorkloadIdentityCondition_In
	//	*WorkloadIdentityCondition_NotIn
	Operator      isWorkloadIdentityCondition_Operator `protobuf_oneof:"operator"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentityCondition) Reset() {
	*x = WorkloadIdentityCondition{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityCondition) ProtoMessage() {}

func (x *WorkloadIdentityCondition) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityCondition.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityCondition) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{5}
}

func (x *WorkloadIdentityCondition) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *WorkloadIdentityCondition) GetOperator() isWorkloadIdentityCondition_Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *WorkloadIdentityCondition) GetEq() *WorkloadIdentityConditionEq {
	if x != nil {
		if x, ok := x.Operator.(*WorkloadIdentityCondition_Eq); ok {
			return x.Eq
		}
	}
	return nil
}

func (x *WorkloadIdentityCondition) GetNotEq() *WorkloadIdentityConditionNotEq {
	if x != nil {
		if x, ok := x.Operator.(*WorkloadIdentityCondition_NotEq); ok {
			return x.NotEq
		}
	}
	return nil
}

func (x *WorkloadIdentityCondition) GetIn() *WorkloadIdentityConditionIn {
	if x != nil {
		if x, ok := x.Operator.(*WorkloadIdentityCondition_In); ok {
			return x.In
		}
	}
	return nil
}

func (x *WorkloadIdentityCondition) GetNotIn() *WorkloadIdentityConditionNotIn {
	if x != nil {
		if x, ok := x.Operator.(*WorkloadIdentityCondition_NotIn); ok {
			return x.NotIn
		}
	}
	return nil
}

type isWorkloadIdentityCondition_Operator interface {
	isWorkloadIdentityCondition_Operator()
}

type WorkloadIdentityCondition_Eq struct {
	// The attribute casted to a string must be equal to the value.
	Eq *WorkloadIdentityConditionEq `protobuf:"bytes,3,opt,name=eq,proto3,oneof"`
}

type WorkloadIdentityCondition_NotEq struct {
	// The attribute casted to a string must not be equal to the value.
	NotEq *WorkloadIdentityConditionNotEq `protobuf:"bytes,4,opt,name=not_eq,json=notEq,proto3,oneof"`
}

type WorkloadIdentityCondition_In struct {
	// The attribute casted to a string must be in the list of values.
	In *WorkloadIdentityConditionIn `protobuf:"bytes,5,opt,name=in,proto3,oneof"`
}

type WorkloadIdentityCondition_NotIn struct {
	// The attribute casted to a string must not be in the list of values.
	NotIn *WorkloadIdentityConditionNotIn `protobuf:"bytes,6,opt,name=not_in,json=notIn,proto3,oneof"`
}

func (*WorkloadIdentityCondition_Eq) isWorkloadIdentityCondition_Operator() {}

func (*WorkloadIdentityCondition_NotEq) isWorkloadIdentityCondition_Operator() {}

func (*WorkloadIdentityCondition_In) isWorkloadIdentityCondition_Operator() {}

func (*WorkloadIdentityCondition_NotIn) isWorkloadIdentityCondition_Operator() {}

// An individual rule that is evaluated during the issuance of a WorkloadIdentity.
type WorkloadIdentityRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The conditions that must be met for this rule to be considered passed.
	//
	// Mutually exclusive with expression.
	Conditions []*WorkloadIdentityCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// An expression written in Teleport's predicate language that must evaluate
	// to true for this rule to be considered passed.
	//
	// Mutually exclusive with conditions.
	Expression    string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentityRule) Reset() {
	*x = WorkloadIdentityRule{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityRule) ProtoMessage() {}

func (x *WorkloadIdentityRule) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityRule.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityRule) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{6}
}

func (x *WorkloadIdentityRule) GetConditions() []*WorkloadIdentityCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *WorkloadIdentityRule) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// The rules which are evaluated before the WorkloadIdentity can be issued.
type WorkloadIdentityRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of rules used to determine if a WorkloadIdentity can be issued.
	// If none are provided, it will be considered a pass. If any are provided,
	// then at least one must pass for the rules to be considered passed.
	Allow         []*WorkloadIdentityRule `protobuf:"bytes,1,rep,name=allow,proto3" json:"allow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentityRules) Reset() {
	*x = WorkloadIdentityRules{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentityRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentityRules) ProtoMessage() {}

func (x *WorkloadIdentityRules) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentityRules.ProtoReflect.Descriptor instead.
func (*WorkloadIdentityRules) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{7}
}

func (x *WorkloadIdentityRules) GetAllow() []*WorkloadIdentityRule {
	if x != nil {
		return x.Allow
	}
	return nil
}

// Template for an X509 Distinguished Name (DN).
// Each field is optional, and, if provided, supports templating using attributes.
type X509DistinguishedNameTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Common Name (CN) - 2.5.4.3
	// If empty, the RDN will be omitted from the DN.
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Organization (O) - 2.5.4.10
	// If empty, the RDN will be omitted from the DN.
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	// Organizational Unit (OU) - 2.5.4.11
	// If empty, the RDN will be omitted from the DN.
	OrganizationalUnit string `protobuf:"bytes,3,opt,name=organizational_unit,json=organizationalUnit,proto3" json:"organizational_unit,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *X509DistinguishedNameTemplate) Reset() {
	*x = X509DistinguishedNameTemplate{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *X509DistinguishedNameTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509DistinguishedNameTemplate) ProtoMessage() {}

func (x *X509DistinguishedNameTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509DistinguishedNameTemplate.ProtoReflect.Descriptor instead.
func (*X509DistinguishedNameTemplate) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{8}
}

func (x *X509DistinguishedNameTemplate) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *X509DistinguishedNameTemplate) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *X509DistinguishedNameTemplate) GetOrganizationalUnit() string {
	if x != nil {
		return x.OrganizationalUnit
	}
	return ""
}

// Configuration specific to the issuance of X509-SVIDs.
type WorkloadIdentitySPIFFEX509 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The DNS Subject Alternative Names (SANs) that should be included in an
	// X509-SVID issued using this WorkloadIdentity.
	//
	// Each entry in this list supports templating using attributes.
	DnsSans []string `protobuf:"bytes,1,rep,name=dns_sans,json=dnsSans,proto3" json:"dns_sans,omitempty"`
	// Used to configure the Subject Distinguished Name (DN) of the X509-SVID.
	//
	// In most circumstances, it is recommended to prefer relying on the SPIFFE ID
	// encoded in the URI SAN. However, the Subject DN may be needed to support
	// legacy systems designed for X509 and not SPIFFE/WIMSE.
	//
	// If not provided, the X509-SVID will be issued with an empty Subject DN.
	SubjectTemplate *X509DistinguishedNameTemplate `protobuf:"bytes,2,opt,name=subject_template,json=subjectTemplate,proto3" json:"subject_template,omitempty"`
	// Control the maximum TTL of X509-SVIDs issued using this WorkloadIdentity.
	//
	// If a X509-SVID is requested with a TTL greater than this value, then the
	// returned X509-SVID will have a TTL of this value.
	//
	// Defaults to 24 hours. The maximum this value can be set to is 14 days.
	MaximumTtl    *durationpb.Duration `protobuf:"bytes,3,opt,name=maximum_ttl,json=maximumTtl,proto3" json:"maximum_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentitySPIFFEX509) Reset() {
	*x = WorkloadIdentitySPIFFEX509{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentitySPIFFEX509) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentitySPIFFEX509) ProtoMessage() {}

func (x *WorkloadIdentitySPIFFEX509) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentitySPIFFEX509.ProtoReflect.Descriptor instead.
func (*WorkloadIdentitySPIFFEX509) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{9}
}

func (x *WorkloadIdentitySPIFFEX509) GetDnsSans() []string {
	if x != nil {
		return x.DnsSans
	}
	return nil
}

func (x *WorkloadIdentitySPIFFEX509) GetSubjectTemplate() *X509DistinguishedNameTemplate {
	if x != nil {
		return x.SubjectTemplate
	}
	return nil
}

func (x *WorkloadIdentitySPIFFEX509) GetMaximumTtl() *durationpb.Duration {
	if x != nil {
		return x.MaximumTtl
	}
	return nil
}

// Configuration specific to the issuance of JWT-SVIDs.
type WorkloadIdentitySPIFFEJWT struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Additional claims that will be added to the JWT.
	ExtraClaims *structpb.Struct `protobuf:"bytes,1,opt,name=extra_claims,json=extraClaims,proto3" json:"extra_claims,omitempty"`
	// Control the maximum TTL of JWT-SVIDs issued using this WorkloadIdentity.
	//
	// If a JWT-SVID is requested with a TTL greater than this value, then the
	// returned JWT-SVID will have a TTL of this value.
	//
	// Defaults to 24 hours. The maximum this value can be set to is 24 hours.
	MaximumTtl    *durationpb.Duration `protobuf:"bytes,2,opt,name=maximum_ttl,json=maximumTtl,proto3" json:"maximum_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentitySPIFFEJWT) Reset() {
	*x = WorkloadIdentitySPIFFEJWT{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentitySPIFFEJWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentitySPIFFEJWT) ProtoMessage() {}

func (x *WorkloadIdentitySPIFFEJWT) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentitySPIFFEJWT.ProtoReflect.Descriptor instead.
func (*WorkloadIdentitySPIFFEJWT) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{10}
}

func (x *WorkloadIdentitySPIFFEJWT) GetExtraClaims() *structpb.Struct {
	if x != nil {
		return x.ExtraClaims
	}
	return nil
}

func (x *WorkloadIdentitySPIFFEJWT) GetMaximumTtl() *durationpb.Duration {
	if x != nil {
		return x.MaximumTtl
	}
	return nil
}

// Configuration pertaining to the issuance of SPIFFE-compatible workload
// identity credentials.
type WorkloadIdentitySPIFFE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The path of the SPIFFE ID that will be issued to the workload.
	//
	// This should be prefixed with a forward-slash ("/").
	//
	// This field supports templating using attributes.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A freeform text field which is provided to workloads along with a
	// credential produced by this WorkloadIdentity. This can be used to provide
	// additional context that can be used to select between multiple credentials.
	Hint string `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
	// Configuration specific to X509-SVIDs.
	X509 *WorkloadIdentitySPIFFEX509 `protobuf:"bytes,3,opt,name=x509,proto3" json:"x509,omitempty"`
	// Configuration specific to JWT-SVIDs.
	Jwt           *WorkloadIdentitySPIFFEJWT `protobuf:"bytes,4,opt,name=jwt,proto3" json:"jwt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentitySPIFFE) Reset() {
	*x = WorkloadIdentitySPIFFE{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentitySPIFFE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentitySPIFFE) ProtoMessage() {}

func (x *WorkloadIdentitySPIFFE) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentitySPIFFE.ProtoReflect.Descriptor instead.
func (*WorkloadIdentitySPIFFE) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{11}
}

func (x *WorkloadIdentitySPIFFE) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkloadIdentitySPIFFE) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *WorkloadIdentitySPIFFE) GetX509() *WorkloadIdentitySPIFFEX509 {
	if x != nil {
		return x.X509
	}
	return nil
}

func (x *WorkloadIdentitySPIFFE) GetJwt() *WorkloadIdentitySPIFFEJWT {
	if x != nil {
		return x.Jwt
	}
	return nil
}

// The spec for the WorkloadIdentity resource.
type WorkloadIdentitySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rules which are evaluated before the WorkloadIdentity can be issued.
	Rules *WorkloadIdentityRules `protobuf:"bytes,1,opt,name=rules,proto3" json:"rules,omitempty"`
	// Configuration pertaining to the issuance of SPIFFE-compatible workload
	// identity credentials.
	Spiffe        *WorkloadIdentitySPIFFE `protobuf:"bytes,2,opt,name=spiffe,proto3" json:"spiffe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadIdentitySpec) Reset() {
	*x = WorkloadIdentitySpec{}
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadIdentitySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadIdentitySpec) ProtoMessage() {}

func (x *WorkloadIdentitySpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_resource_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadIdentitySpec.ProtoReflect.Descriptor instead.
func (*WorkloadIdentitySpec) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP(), []int{12}
}

func (x *WorkloadIdentitySpec) GetRules() *WorkloadIdentityRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *WorkloadIdentitySpec) GetSpiffe() *WorkloadIdentitySPIFFE {
	if x != nil {
		return x.Spiffe
	}
	return nil
}

var File_teleport_workloadidentity_v1_resource_proto protoreflect.FileDescriptor

const file_teleport_workloadidentity_v1_resource_proto_rawDesc = "" +
	"\n" +
	"+teleport/workloadidentity/v1/resource.proto\x12\x1cteleport.workloadidentity.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a!teleport/header/v1/metadata.proto\"\xdd\x01\n" +
	"\x10WorkloadIdentity\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x02 \x01(\tR\asubKind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x128\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1c.teleport.header.v1.MetadataR\bmetadata\x12F\n" +
	"\x04spec\x18\x05 \x01(\v22.teleport.workloadidentity.v1.WorkloadIdentitySpecR\x04spec\"3\n" +
	"\x1bWorkloadIdentityConditionEq\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"6\n" +
	"\x1eWorkloadIdentityConditionNotEq\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"5\n" +
	"\x1bWorkloadIdentityConditionIn\x12\x16\n" +
	"\x06values\x18\x01 \x03(\tR\x06values\"8\n" +
	"\x1eWorkloadIdentityConditionNotIn\x12\x16\n" +
	"\x06values\x18\x01 \x03(\tR\x06values\"\x9b\x03\n" +
	"\x19WorkloadIdentityCondition\x12\x1c\n" +
	"\tattribute\x18\x01 \x01(\tR\tattribute\x12K\n" +
	"\x02eq\x18\x03 \x01(\v29.teleport.workloadidentity.v1.WorkloadIdentityConditionEqH\x00R\x02eq\x12U\n" +
	"\x06not_eq\x18\x04 \x01(\v2<.teleport.workloadidentity.v1.WorkloadIdentityConditionNotEqH\x00R\x05notEq\x12K\n" +
	"\x02in\x18\x05 \x01(\v29.teleport.workloadidentity.v1.WorkloadIdentityConditionInH\x00R\x02in\x12U\n" +
	"\x06not_in\x18\x06 \x01(\v2<.teleport.workloadidentity.v1.WorkloadIdentityConditionNotInH\x00R\x05notInB\n" +
	"\n" +
	"\boperatorJ\x04\b\x02\x10\x03R\x06equals\"\x8f\x01\n" +
	"\x14WorkloadIdentityRule\x12W\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v27.teleport.workloadidentity.v1.WorkloadIdentityConditionR\n" +
	"conditions\x12\x1e\n" +
	"\n" +
	"expression\x18\x02 \x01(\tR\n" +
	"expression\"a\n" +
	"\x15WorkloadIdentityRules\x12H\n" +
	"\x05allow\x18\x01 \x03(\v22.teleport.workloadidentity.v1.WorkloadIdentityRuleR\x05allow\"\x95\x01\n" +
	"\x1dX509DistinguishedNameTemplate\x12\x1f\n" +
	"\vcommon_name\x18\x01 \x01(\tR\n" +
	"commonName\x12\"\n" +
	"\forganization\x18\x02 \x01(\tR\forganization\x12/\n" +
	"\x13organizational_unit\x18\x03 \x01(\tR\x12organizationalUnit\"\xdb\x01\n" +
	"\x1aWorkloadIdentitySPIFFEX509\x12\x19\n" +
	"\bdns_sans\x18\x01 \x03(\tR\adnsSans\x12f\n" +
	"\x10subject_template\x18\x02 \x01(\v2;.teleport.workloadidentity.v1.X509DistinguishedNameTemplateR\x0fsubjectTemplate\x12:\n" +
	"\vmaximum_ttl\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"maximumTtl\"\x93\x01\n" +
	"\x19WorkloadIdentitySPIFFEJWT\x12:\n" +
	"\fextra_claims\x18\x01 \x01(\v2\x17.google.protobuf.StructR\vextraClaims\x12:\n" +
	"\vmaximum_ttl\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"maximumTtl\"\xd5\x01\n" +
	"\x16WorkloadIdentitySPIFFE\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04hint\x18\x02 \x01(\tR\x04hint\x12L\n" +
	"\x04x509\x18\x03 \x01(\v28.teleport.workloadidentity.v1.WorkloadIdentitySPIFFEX509R\x04x509\x12I\n" +
	"\x03jwt\x18\x04 \x01(\v27.teleport.workloadidentity.v1.WorkloadIdentitySPIFFEJWTR\x03jwt\"\xaf\x01\n" +
	"\x14WorkloadIdentitySpec\x12I\n" +
	"\x05rules\x18\x01 \x01(\v23.teleport.workloadidentity.v1.WorkloadIdentityRulesR\x05rules\x12L\n" +
	"\x06spiffe\x18\x02 \x01(\v24.teleport.workloadidentity.v1.WorkloadIdentitySPIFFER\x06spiffeBdZbgithub.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1b\x06proto3"

var (
	file_teleport_workloadidentity_v1_resource_proto_rawDescOnce sync.Once
	file_teleport_workloadidentity_v1_resource_proto_rawDescData []byte
)

func file_teleport_workloadidentity_v1_resource_proto_rawDescGZIP() []byte {
	file_teleport_workloadidentity_v1_resource_proto_rawDescOnce.Do(func() {
		file_teleport_workloadidentity_v1_resource_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_resource_proto_rawDesc), len(file_teleport_workloadidentity_v1_resource_proto_rawDesc)))
	})
	return file_teleport_workloadidentity_v1_resource_proto_rawDescData
}

var file_teleport_workloadidentity_v1_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_teleport_workloadidentity_v1_resource_proto_goTypes = []any{
	(*WorkloadIdentity)(nil),               // 0: teleport.workloadidentity.v1.WorkloadIdentity
	(*WorkloadIdentityConditionEq)(nil),    // 1: teleport.workloadidentity.v1.WorkloadIdentityConditionEq
	(*WorkloadIdentityConditionNotEq)(nil), // 2: teleport.workloadidentity.v1.WorkloadIdentityConditionNotEq
	(*WorkloadIdentityConditionIn)(nil),    // 3: teleport.workloadidentity.v1.WorkloadIdentityConditionIn
	(*WorkloadIdentityConditionNotIn)(nil), // 4: teleport.workloadidentity.v1.WorkloadIdentityConditionNotIn
	(*WorkloadIdentityCondition)(nil),      // 5: teleport.workloadidentity.v1.WorkloadIdentityCondition
	(*WorkloadIdentityRule)(nil),           // 6: teleport.workloadidentity.v1.WorkloadIdentityRule
	(*WorkloadIdentityRules)(nil),          // 7: teleport.workloadidentity.v1.WorkloadIdentityRules
	(*X509DistinguishedNameTemplate)(nil),  // 8: teleport.workloadidentity.v1.X509DistinguishedNameTemplate
	(*WorkloadIdentitySPIFFEX509)(nil),     // 9: teleport.workloadidentity.v1.WorkloadIdentitySPIFFEX509
	(*WorkloadIdentitySPIFFEJWT)(nil),      // 10: teleport.workloadidentity.v1.WorkloadIdentitySPIFFEJWT
	(*WorkloadIdentitySPIFFE)(nil),         // 11: teleport.workloadidentity.v1.WorkloadIdentitySPIFFE
	(*WorkloadIdentitySpec)(nil),           // 12: teleport.workloadidentity.v1.WorkloadIdentitySpec
	(*v1.Metadata)(nil),                    // 13: teleport.header.v1.Metadata
	(*durationpb.Duration)(nil),            // 14: google.protobuf.Duration
	(*structpb.Struct)(nil),                // 15: google.protobuf.Struct
}
var file_teleport_workloadidentity_v1_resource_proto_depIdxs = []int32{
	13, // 0: teleport.workloadidentity.v1.WorkloadIdentity.metadata:type_name -> teleport.header.v1.Metadata
	12, // 1: teleport.workloadidentity.v1.WorkloadIdentity.spec:type_name -> teleport.workloadidentity.v1.WorkloadIdentitySpec
	1,  // 2: teleport.workloadidentity.v1.WorkloadIdentityCondition.eq:type_name -> teleport.workloadidentity.v1.WorkloadIdentityConditionEq
	2,  // 3: teleport.workloadidentity.v1.WorkloadIdentityCondition.not_eq:type_name -> teleport.workloadidentity.v1.WorkloadIdentityConditionNotEq
	3,  // 4: teleport.workloadidentity.v1.WorkloadIdentityCondition.in:type_name -> teleport.workloadidentity.v1.WorkloadIdentityConditionIn
	4,  // 5: teleport.workloadidentity.v1.WorkloadIdentityCondition.not_in:type_name -> teleport.workloadidentity.v1.WorkloadIdentityConditionNotIn
	5,  // 6: teleport.workloadidentity.v1.WorkloadIdentityRule.conditions:type_name -> teleport.workloadidentity.v1.WorkloadIdentityCondition
	6,  // 7: teleport.workloadidentity.v1.WorkloadIdentityRules.allow:type_name -> teleport.workloadidentity.v1.WorkloadIdentityRule
	8,  // 8: teleport.workloadidentity.v1.WorkloadIdentitySPIFFEX509.subject_template:type_name -> teleport.workloadidentity.v1.X509DistinguishedNameTemplate
	14, // 9: teleport.workloadidentity.v1.WorkloadIdentitySPIFFEX509.maximum_ttl:type_name -> google.protobuf.Duration
	15, // 10: teleport.workloadidentity.v1.WorkloadIdentitySPIFFEJWT.extra_claims:type_name -> google.protobuf.Struct
	14, // 11: teleport.workloadidentity.v1.WorkloadIdentitySPIFFEJWT.maximum_ttl:type_name -> google.protobuf.Duration
	9,  // 12: teleport.workloadidentity.v1.WorkloadIdentitySPIFFE.x509:type_name -> teleport.workloadidentity.v1.WorkloadIdentitySPIFFEX509
	10, // 13: teleport.workloadidentity.v1.WorkloadIdentitySPIFFE.jwt:type_name -> teleport.workloadidentity.v1.WorkloadIdentitySPIFFEJWT
	7,  // 14: teleport.workloadidentity.v1.WorkloadIdentitySpec.rules:type_name -> teleport.workloadidentity.v1.WorkloadIdentityRules
	11, // 15: teleport.workloadidentity.v1.WorkloadIdentitySpec.spiffe:type_name -> teleport.workloadidentity.v1.WorkloadIdentitySPIFFE
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_teleport_workloadidentity_v1_resource_proto_init() }
func file_teleport_workloadidentity_v1_resource_proto_init() {
	if File_teleport_workloadidentity_v1_resource_proto != nil {
		return
	}
	file_teleport_workloadidentity_v1_resource_proto_msgTypes[5].OneofWrappers = []any{
		(*WorkloadIdentityCondition_Eq)(nil),
		(*WorkloadIdentityCondition_NotEq)(nil),
		(*WorkloadIdentityCondition_In)(nil),
		(*WorkloadIdentityCondition_NotIn)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_resource_proto_rawDesc), len(file_teleport_workloadidentity_v1_resource_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_workloadidentity_v1_resource_proto_goTypes,
		DependencyIndexes: file_teleport_workloadidentity_v1_resource_proto_depIdxs,
		MessageInfos:      file_teleport_workloadidentity_v1_resource_proto_msgTypes,
	}.Build()
	File_teleport_workloadidentity_v1_resource_proto = out.File
	file_teleport_workloadidentity_v1_resource_proto_goTypes = nil
	file_teleport_workloadidentity_v1_resource_proto_depIdxs = nil
}
