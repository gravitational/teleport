// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/workloadidentity/v1/revocation_service.proto

package workloadidentityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkloadIdentityRevocationService_CreateWorkloadIdentityX509Revocation_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityRevocationService/CreateWorkloadIdentityX509Revocation"
	WorkloadIdentityRevocationService_UpsertWorkloadIdentityX509Revocation_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityRevocationService/UpsertWorkloadIdentityX509Revocation"
	WorkloadIdentityRevocationService_UpdateWorkloadIdentityX509Revocation_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityRevocationService/UpdateWorkloadIdentityX509Revocation"
	WorkloadIdentityRevocationService_GetWorkloadIdentityX509Revocation_FullMethodName    = "/teleport.workloadidentity.v1.WorkloadIdentityRevocationService/GetWorkloadIdentityX509Revocation"
	WorkloadIdentityRevocationService_DeleteWorkloadIdentityX509Revocation_FullMethodName = "/teleport.workloadidentity.v1.WorkloadIdentityRevocationService/DeleteWorkloadIdentityX509Revocation"
	WorkloadIdentityRevocationService_ListWorkloadIdentityX509Revocations_FullMethodName  = "/teleport.workloadidentity.v1.WorkloadIdentityRevocationService/ListWorkloadIdentityX509Revocations"
	WorkloadIdentityRevocationService_StreamSignedCRL_FullMethodName                      = "/teleport.workloadidentity.v1.WorkloadIdentityRevocationService/StreamSignedCRL"
)

// WorkloadIdentityRevocationServiceClient is the client API for WorkloadIdentityRevocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadIdentityRevocationServiceClient interface {
	// CreateWorkloadIdentityX509Revocation creates a new revocation for an X509
	// workload identity credential. It will refuse to revoke a credential which
	// has already been revoked.
	CreateWorkloadIdentityX509Revocation(ctx context.Context, in *CreateWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error)
	// UpsertWorkloadIdentityX509Revocation creates or updates an X509 workload
	// identity revocation.
	// You should prefer to call Create or Update.
	UpsertWorkloadIdentityX509Revocation(ctx context.Context, in *UpsertWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error)
	// UpdateWorkloadIdentityX509Revocation updates an existing X509 workload
	// identity revocation, it will refuse to update a workload identity
	// revocation if one does not already exist with the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided WorkloadIdentityX509Revocation matches the
	// revision of the existing WorkloadIdentity.
	UpdateWorkloadIdentityX509Revocation(ctx context.Context, in *UpdateWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error)
	// GetWorkloadIdentityX509Revocation retrieves a X509 workload identity
	// revocation by name.
	GetWorkloadIdentityX509Revocation(ctx context.Context, in *GetWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error)
	// DeleteWorkloadIdentityX509Revocation deletes a X509 workload identity
	// revocation by name.
	DeleteWorkloadIdentityX509Revocation(ctx context.Context, in *DeleteWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListWorkloadIdentityX509Revocations returns a list of X509 workload
	// identity revocations, pagination semantics are applied.
	ListWorkloadIdentityX509Revocations(ctx context.Context, in *ListWorkloadIdentityX509RevocationsRequest, opts ...grpc.CallOption) (*ListWorkloadIdentityX509RevocationsResponse, error)
	// StreamSignedCRL returns the current signed Certificate Revocation List
	// (CRL) for the cluster to the client. If any new revocations are added or
	// any existing revocations are updated, for as long as the client is
	// connected, the server will send them the full updated signed CRL.
	StreamSignedCRL(ctx context.Context, in *StreamSignedCRLRequest, opts ...grpc.CallOption) (WorkloadIdentityRevocationService_StreamSignedCRLClient, error)
}

type workloadIdentityRevocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadIdentityRevocationServiceClient(cc grpc.ClientConnInterface) WorkloadIdentityRevocationServiceClient {
	return &workloadIdentityRevocationServiceClient{cc}
}

func (c *workloadIdentityRevocationServiceClient) CreateWorkloadIdentityX509Revocation(ctx context.Context, in *CreateWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error) {
	out := new(WorkloadIdentityX509Revocation)
	err := c.cc.Invoke(ctx, WorkloadIdentityRevocationService_CreateWorkloadIdentityX509Revocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityRevocationServiceClient) UpsertWorkloadIdentityX509Revocation(ctx context.Context, in *UpsertWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error) {
	out := new(WorkloadIdentityX509Revocation)
	err := c.cc.Invoke(ctx, WorkloadIdentityRevocationService_UpsertWorkloadIdentityX509Revocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityRevocationServiceClient) UpdateWorkloadIdentityX509Revocation(ctx context.Context, in *UpdateWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error) {
	out := new(WorkloadIdentityX509Revocation)
	err := c.cc.Invoke(ctx, WorkloadIdentityRevocationService_UpdateWorkloadIdentityX509Revocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityRevocationServiceClient) GetWorkloadIdentityX509Revocation(ctx context.Context, in *GetWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*WorkloadIdentityX509Revocation, error) {
	out := new(WorkloadIdentityX509Revocation)
	err := c.cc.Invoke(ctx, WorkloadIdentityRevocationService_GetWorkloadIdentityX509Revocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityRevocationServiceClient) DeleteWorkloadIdentityX509Revocation(ctx context.Context, in *DeleteWorkloadIdentityX509RevocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkloadIdentityRevocationService_DeleteWorkloadIdentityX509Revocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityRevocationServiceClient) ListWorkloadIdentityX509Revocations(ctx context.Context, in *ListWorkloadIdentityX509RevocationsRequest, opts ...grpc.CallOption) (*ListWorkloadIdentityX509RevocationsResponse, error) {
	out := new(ListWorkloadIdentityX509RevocationsResponse)
	err := c.cc.Invoke(ctx, WorkloadIdentityRevocationService_ListWorkloadIdentityX509Revocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityRevocationServiceClient) StreamSignedCRL(ctx context.Context, in *StreamSignedCRLRequest, opts ...grpc.CallOption) (WorkloadIdentityRevocationService_StreamSignedCRLClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkloadIdentityRevocationService_ServiceDesc.Streams[0], WorkloadIdentityRevocationService_StreamSignedCRL_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadIdentityRevocationServiceStreamSignedCRLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadIdentityRevocationService_StreamSignedCRLClient interface {
	Recv() (*StreamSignedCRLResponse, error)
	grpc.ClientStream
}

type workloadIdentityRevocationServiceStreamSignedCRLClient struct {
	grpc.ClientStream
}

func (x *workloadIdentityRevocationServiceStreamSignedCRLClient) Recv() (*StreamSignedCRLResponse, error) {
	m := new(StreamSignedCRLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkloadIdentityRevocationServiceServer is the server API for WorkloadIdentityRevocationService service.
// All implementations must embed UnimplementedWorkloadIdentityRevocationServiceServer
// for forward compatibility
type WorkloadIdentityRevocationServiceServer interface {
	// CreateWorkloadIdentityX509Revocation creates a new revocation for an X509
	// workload identity credential. It will refuse to revoke a credential which
	// has already been revoked.
	CreateWorkloadIdentityX509Revocation(context.Context, *CreateWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error)
	// UpsertWorkloadIdentityX509Revocation creates or updates an X509 workload
	// identity revocation.
	// You should prefer to call Create or Update.
	UpsertWorkloadIdentityX509Revocation(context.Context, *UpsertWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error)
	// UpdateWorkloadIdentityX509Revocation updates an existing X509 workload
	// identity revocation, it will refuse to update a workload identity
	// revocation if one does not already exist with the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided WorkloadIdentityX509Revocation matches the
	// revision of the existing WorkloadIdentity.
	UpdateWorkloadIdentityX509Revocation(context.Context, *UpdateWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error)
	// GetWorkloadIdentityX509Revocation retrieves a X509 workload identity
	// revocation by name.
	GetWorkloadIdentityX509Revocation(context.Context, *GetWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error)
	// DeleteWorkloadIdentityX509Revocation deletes a X509 workload identity
	// revocation by name.
	DeleteWorkloadIdentityX509Revocation(context.Context, *DeleteWorkloadIdentityX509RevocationRequest) (*emptypb.Empty, error)
	// ListWorkloadIdentityX509Revocations returns a list of X509 workload
	// identity revocations, pagination semantics are applied.
	ListWorkloadIdentityX509Revocations(context.Context, *ListWorkloadIdentityX509RevocationsRequest) (*ListWorkloadIdentityX509RevocationsResponse, error)
	// StreamSignedCRL returns the current signed Certificate Revocation List
	// (CRL) for the cluster to the client. If any new revocations are added or
	// any existing revocations are updated, for as long as the client is
	// connected, the server will send them the full updated signed CRL.
	StreamSignedCRL(*StreamSignedCRLRequest, WorkloadIdentityRevocationService_StreamSignedCRLServer) error
	mustEmbedUnimplementedWorkloadIdentityRevocationServiceServer()
}

// UnimplementedWorkloadIdentityRevocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkloadIdentityRevocationServiceServer struct {
}

func (UnimplementedWorkloadIdentityRevocationServiceServer) CreateWorkloadIdentityX509Revocation(context.Context, *CreateWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkloadIdentityX509Revocation not implemented")
}
func (UnimplementedWorkloadIdentityRevocationServiceServer) UpsertWorkloadIdentityX509Revocation(context.Context, *UpsertWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWorkloadIdentityX509Revocation not implemented")
}
func (UnimplementedWorkloadIdentityRevocationServiceServer) UpdateWorkloadIdentityX509Revocation(context.Context, *UpdateWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkloadIdentityX509Revocation not implemented")
}
func (UnimplementedWorkloadIdentityRevocationServiceServer) GetWorkloadIdentityX509Revocation(context.Context, *GetWorkloadIdentityX509RevocationRequest) (*WorkloadIdentityX509Revocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadIdentityX509Revocation not implemented")
}
func (UnimplementedWorkloadIdentityRevocationServiceServer) DeleteWorkloadIdentityX509Revocation(context.Context, *DeleteWorkloadIdentityX509RevocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkloadIdentityX509Revocation not implemented")
}
func (UnimplementedWorkloadIdentityRevocationServiceServer) ListWorkloadIdentityX509Revocations(context.Context, *ListWorkloadIdentityX509RevocationsRequest) (*ListWorkloadIdentityX509RevocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloadIdentityX509Revocations not implemented")
}
func (UnimplementedWorkloadIdentityRevocationServiceServer) StreamSignedCRL(*StreamSignedCRLRequest, WorkloadIdentityRevocationService_StreamSignedCRLServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSignedCRL not implemented")
}
func (UnimplementedWorkloadIdentityRevocationServiceServer) mustEmbedUnimplementedWorkloadIdentityRevocationServiceServer() {
}

// UnsafeWorkloadIdentityRevocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadIdentityRevocationServiceServer will
// result in compilation errors.
type UnsafeWorkloadIdentityRevocationServiceServer interface {
	mustEmbedUnimplementedWorkloadIdentityRevocationServiceServer()
}

func RegisterWorkloadIdentityRevocationServiceServer(s grpc.ServiceRegistrar, srv WorkloadIdentityRevocationServiceServer) {
	s.RegisterService(&WorkloadIdentityRevocationService_ServiceDesc, srv)
}

func _WorkloadIdentityRevocationService_CreateWorkloadIdentityX509Revocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadIdentityX509RevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityRevocationServiceServer).CreateWorkloadIdentityX509Revocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityRevocationService_CreateWorkloadIdentityX509Revocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityRevocationServiceServer).CreateWorkloadIdentityX509Revocation(ctx, req.(*CreateWorkloadIdentityX509RevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityRevocationService_UpsertWorkloadIdentityX509Revocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertWorkloadIdentityX509RevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityRevocationServiceServer).UpsertWorkloadIdentityX509Revocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityRevocationService_UpsertWorkloadIdentityX509Revocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityRevocationServiceServer).UpsertWorkloadIdentityX509Revocation(ctx, req.(*UpsertWorkloadIdentityX509RevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityRevocationService_UpdateWorkloadIdentityX509Revocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkloadIdentityX509RevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityRevocationServiceServer).UpdateWorkloadIdentityX509Revocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityRevocationService_UpdateWorkloadIdentityX509Revocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityRevocationServiceServer).UpdateWorkloadIdentityX509Revocation(ctx, req.(*UpdateWorkloadIdentityX509RevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityRevocationService_GetWorkloadIdentityX509Revocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadIdentityX509RevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityRevocationServiceServer).GetWorkloadIdentityX509Revocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityRevocationService_GetWorkloadIdentityX509Revocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityRevocationServiceServer).GetWorkloadIdentityX509Revocation(ctx, req.(*GetWorkloadIdentityX509RevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityRevocationService_DeleteWorkloadIdentityX509Revocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadIdentityX509RevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityRevocationServiceServer).DeleteWorkloadIdentityX509Revocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityRevocationService_DeleteWorkloadIdentityX509Revocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityRevocationServiceServer).DeleteWorkloadIdentityX509Revocation(ctx, req.(*DeleteWorkloadIdentityX509RevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityRevocationService_ListWorkloadIdentityX509Revocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadIdentityX509RevocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityRevocationServiceServer).ListWorkloadIdentityX509Revocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadIdentityRevocationService_ListWorkloadIdentityX509Revocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityRevocationServiceServer).ListWorkloadIdentityX509Revocations(ctx, req.(*ListWorkloadIdentityX509RevocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityRevocationService_StreamSignedCRL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSignedCRLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadIdentityRevocationServiceServer).StreamSignedCRL(m, &workloadIdentityRevocationServiceStreamSignedCRLServer{stream})
}

type WorkloadIdentityRevocationService_StreamSignedCRLServer interface {
	Send(*StreamSignedCRLResponse) error
	grpc.ServerStream
}

type workloadIdentityRevocationServiceStreamSignedCRLServer struct {
	grpc.ServerStream
}

func (x *workloadIdentityRevocationServiceStreamSignedCRLServer) Send(m *StreamSignedCRLResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WorkloadIdentityRevocationService_ServiceDesc is the grpc.ServiceDesc for WorkloadIdentityRevocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadIdentityRevocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.workloadidentity.v1.WorkloadIdentityRevocationService",
	HandlerType: (*WorkloadIdentityRevocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkloadIdentityX509Revocation",
			Handler:    _WorkloadIdentityRevocationService_CreateWorkloadIdentityX509Revocation_Handler,
		},
		{
			MethodName: "UpsertWorkloadIdentityX509Revocation",
			Handler:    _WorkloadIdentityRevocationService_UpsertWorkloadIdentityX509Revocation_Handler,
		},
		{
			MethodName: "UpdateWorkloadIdentityX509Revocation",
			Handler:    _WorkloadIdentityRevocationService_UpdateWorkloadIdentityX509Revocation_Handler,
		},
		{
			MethodName: "GetWorkloadIdentityX509Revocation",
			Handler:    _WorkloadIdentityRevocationService_GetWorkloadIdentityX509Revocation_Handler,
		},
		{
			MethodName: "DeleteWorkloadIdentityX509Revocation",
			Handler:    _WorkloadIdentityRevocationService_DeleteWorkloadIdentityX509Revocation_Handler,
		},
		{
			MethodName: "ListWorkloadIdentityX509Revocations",
			Handler:    _WorkloadIdentityRevocationService_ListWorkloadIdentityX509Revocations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSignedCRL",
			Handler:       _WorkloadIdentityRevocationService_StreamSignedCRL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "teleport/workloadidentity/v1/revocation_service.proto",
}
