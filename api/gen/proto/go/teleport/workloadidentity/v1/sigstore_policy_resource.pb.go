// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: teleport/workloadidentity/v1/sigstore_policy_resource.proto

package workloadidentityv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Policy that describes the signatures and attestations that must be presented
// in order to be issued a workload identity.
type SigstorePolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The kind of resource represented. This is always `sigstore_policy`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Differentiates variations of the same kind. All resources should contain
	// one, even if it is never populated.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// The version of the resource being represented.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Common metadata that all resources share.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Desired Sigstore policy configuration.
	Spec          *SigstorePolicySpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigstorePolicy) Reset() {
	*x = SigstorePolicy{}
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigstorePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstorePolicy) ProtoMessage() {}

func (x *SigstorePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstorePolicy.ProtoReflect.Descriptor instead.
func (*SigstorePolicy) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP(), []int{0}
}

func (x *SigstorePolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SigstorePolicy) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *SigstorePolicy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SigstorePolicy) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SigstorePolicy) GetSpec() *SigstorePolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Desired Sigstore policy configuration.
type SigstorePolicySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Authority:
	//
	//	*SigstorePolicySpec_Key
	//	*SigstorePolicySpec_Keyless
	Authority isSigstorePolicySpec_Authority `protobuf_oneof:"authority"`
	// Requirements of the policy.
	Requirements  *SigstorePolicyRequirements `protobuf:"bytes,3,opt,name=requirements,proto3" json:"requirements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigstorePolicySpec) Reset() {
	*x = SigstorePolicySpec{}
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigstorePolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstorePolicySpec) ProtoMessage() {}

func (x *SigstorePolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstorePolicySpec.ProtoReflect.Descriptor instead.
func (*SigstorePolicySpec) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP(), []int{1}
}

func (x *SigstorePolicySpec) GetAuthority() isSigstorePolicySpec_Authority {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *SigstorePolicySpec) GetKey() *SigstoreKeyAuthority {
	if x != nil {
		if x, ok := x.Authority.(*SigstorePolicySpec_Key); ok {
			return x.Key
		}
	}
	return nil
}

func (x *SigstorePolicySpec) GetKeyless() *SigstoreKeylessAuthority {
	if x != nil {
		if x, ok := x.Authority.(*SigstorePolicySpec_Keyless); ok {
			return x.Keyless
		}
	}
	return nil
}

func (x *SigstorePolicySpec) GetRequirements() *SigstorePolicyRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

type isSigstorePolicySpec_Authority interface {
	isSigstorePolicySpec_Authority()
}

type SigstorePolicySpec_Key struct {
	// Well-known trusted public key.
	Key *SigstoreKeyAuthority `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

type SigstorePolicySpec_Keyless struct {
	// Keyless signing using a Fulcio certificate authority.
	Keyless *SigstoreKeylessAuthority `protobuf:"bytes,2,opt,name=keyless,proto3,oneof"`
}

func (*SigstorePolicySpec_Key) isSigstorePolicySpec_Authority() {}

func (*SigstorePolicySpec_Keyless) isSigstorePolicySpec_Authority() {}

// Requirements of the policy.
type SigstorePolicyRequirements struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether there must be a Cosign signature for the workload "artifact"
	// (i.e. a simple signing envelope containing the container image digest)
	// for the policy to pass.
	ArtifactSignature bool `protobuf:"varint,1,opt,name=artifact_signature,json=artifactSignature,proto3" json:"artifact_signature,omitempty"`
	// Which in-toto attestations must be present for the policy to pass.
	Attestations  []*InTotoAttestationMatcher `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigstorePolicyRequirements) Reset() {
	*x = SigstorePolicyRequirements{}
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigstorePolicyRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstorePolicyRequirements) ProtoMessage() {}

func (x *SigstorePolicyRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstorePolicyRequirements.ProtoReflect.Descriptor instead.
func (*SigstorePolicyRequirements) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP(), []int{2}
}

func (x *SigstorePolicyRequirements) GetArtifactSignature() bool {
	if x != nil {
		return x.ArtifactSignature
	}
	return false
}

func (x *SigstorePolicyRequirements) GetAttestations() []*InTotoAttestationMatcher {
	if x != nil {
		return x.Attestations
	}
	return nil
}

// Configuration for a well-known trusted public key.
type SigstoreKeyAuthority struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key in PEM-encoded DER format.
	Public        string `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigstoreKeyAuthority) Reset() {
	*x = SigstoreKeyAuthority{}
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigstoreKeyAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstoreKeyAuthority) ProtoMessage() {}

func (x *SigstoreKeyAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstoreKeyAuthority.ProtoReflect.Descriptor instead.
func (*SigstoreKeyAuthority) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP(), []int{3}
}

func (x *SigstoreKeyAuthority) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

// Configuration for keyless signing using a Fulcio certificate authority.
type SigstoreKeylessAuthority struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trusted signing identities.
	Identities []*SigstoreKeylessSigningIdentity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty"`
	// Custom trusted roots that will be used instead of the Sigstore project's
	// public good instance, formatted as JSON.
	//
	// This is where you can configure custom Fulcio, Rekor and timestamp
	// authorities.
	//
	// https://github.com/sigstore/protobuf-specs/blob/cac7a926e0968571d3eb2e2fc8ebd40b8ebe0d58/protos/sigstore_trustroot.proto#L92-L144
	TrustedRoots  []string `protobuf:"bytes,2,rep,name=trusted_roots,json=trustedRoots,proto3" json:"trusted_roots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigstoreKeylessAuthority) Reset() {
	*x = SigstoreKeylessAuthority{}
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigstoreKeylessAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstoreKeylessAuthority) ProtoMessage() {}

func (x *SigstoreKeylessAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstoreKeylessAuthority.ProtoReflect.Descriptor instead.
func (*SigstoreKeylessAuthority) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP(), []int{4}
}

func (x *SigstoreKeylessAuthority) GetIdentities() []*SigstoreKeylessSigningIdentity {
	if x != nil {
		return x.Identities
	}
	return nil
}

func (x *SigstoreKeylessAuthority) GetTrustedRoots() []string {
	if x != nil {
		return x.TrustedRoots
	}
	return nil
}

// Configuration for a trusted signing identity.
type SigstoreKeylessSigningIdentity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to IssuerMatcher:
	//
	//	*SigstoreKeylessSigningIdentity_Issuer
	//	*SigstoreKeylessSigningIdentity_IssuerRegex
	IssuerMatcher isSigstoreKeylessSigningIdentity_IssuerMatcher `protobuf_oneof:"issuer_matcher"`
	// Types that are valid to be assigned to SubjectMatcher:
	//
	//	*SigstoreKeylessSigningIdentity_Subject
	//	*SigstoreKeylessSigningIdentity_SubjectRegex
	SubjectMatcher isSigstoreKeylessSigningIdentity_SubjectMatcher `protobuf_oneof:"subject_matcher"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SigstoreKeylessSigningIdentity) Reset() {
	*x = SigstoreKeylessSigningIdentity{}
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigstoreKeylessSigningIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigstoreKeylessSigningIdentity) ProtoMessage() {}

func (x *SigstoreKeylessSigningIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigstoreKeylessSigningIdentity.ProtoReflect.Descriptor instead.
func (*SigstoreKeylessSigningIdentity) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP(), []int{5}
}

func (x *SigstoreKeylessSigningIdentity) GetIssuerMatcher() isSigstoreKeylessSigningIdentity_IssuerMatcher {
	if x != nil {
		return x.IssuerMatcher
	}
	return nil
}

func (x *SigstoreKeylessSigningIdentity) GetIssuer() string {
	if x != nil {
		if x, ok := x.IssuerMatcher.(*SigstoreKeylessSigningIdentity_Issuer); ok {
			return x.Issuer
		}
	}
	return ""
}

func (x *SigstoreKeylessSigningIdentity) GetIssuerRegex() string {
	if x != nil {
		if x, ok := x.IssuerMatcher.(*SigstoreKeylessSigningIdentity_IssuerRegex); ok {
			return x.IssuerRegex
		}
	}
	return ""
}

func (x *SigstoreKeylessSigningIdentity) GetSubjectMatcher() isSigstoreKeylessSigningIdentity_SubjectMatcher {
	if x != nil {
		return x.SubjectMatcher
	}
	return nil
}

func (x *SigstoreKeylessSigningIdentity) GetSubject() string {
	if x != nil {
		if x, ok := x.SubjectMatcher.(*SigstoreKeylessSigningIdentity_Subject); ok {
			return x.Subject
		}
	}
	return ""
}

func (x *SigstoreKeylessSigningIdentity) GetSubjectRegex() string {
	if x != nil {
		if x, ok := x.SubjectMatcher.(*SigstoreKeylessSigningIdentity_SubjectRegex); ok {
			return x.SubjectRegex
		}
	}
	return ""
}

type isSigstoreKeylessSigningIdentity_IssuerMatcher interface {
	isSigstoreKeylessSigningIdentity_IssuerMatcher()
}

type SigstoreKeylessSigningIdentity_Issuer struct {
	// Exact issuer string.
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3,oneof"`
}

type SigstoreKeylessSigningIdentity_IssuerRegex struct {
	// Regex that matches the issuer.
	IssuerRegex string `protobuf:"bytes,2,opt,name=issuer_regex,json=issuerRegex,proto3,oneof"`
}

func (*SigstoreKeylessSigningIdentity_Issuer) isSigstoreKeylessSigningIdentity_IssuerMatcher() {}

func (*SigstoreKeylessSigningIdentity_IssuerRegex) isSigstoreKeylessSigningIdentity_IssuerMatcher() {}

type isSigstoreKeylessSigningIdentity_SubjectMatcher interface {
	isSigstoreKeylessSigningIdentity_SubjectMatcher()
}

type SigstoreKeylessSigningIdentity_Subject struct {
	// Exact subject string.
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3,oneof"`
}

type SigstoreKeylessSigningIdentity_SubjectRegex struct {
	// Regex that matches the subject.
	SubjectRegex string `protobuf:"bytes,4,opt,name=subject_regex,json=subjectRegex,proto3,oneof"`
}

func (*SigstoreKeylessSigningIdentity_Subject) isSigstoreKeylessSigningIdentity_SubjectMatcher() {}

func (*SigstoreKeylessSigningIdentity_SubjectRegex) isSigstoreKeylessSigningIdentity_SubjectMatcher() {
}

// Describes a required in-toto attestation.
type InTotoAttestationMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// In-toto predicate type (e.g. `https://slsa.dev/provenance/v1`).
	PredicateType string `protobuf:"bytes,1,opt,name=predicate_type,json=predicateType,proto3" json:"predicate_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InTotoAttestationMatcher) Reset() {
	*x = InTotoAttestationMatcher{}
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InTotoAttestationMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InTotoAttestationMatcher) ProtoMessage() {}

func (x *InTotoAttestationMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InTotoAttestationMatcher.ProtoReflect.Descriptor instead.
func (*InTotoAttestationMatcher) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP(), []int{6}
}

func (x *InTotoAttestationMatcher) GetPredicateType() string {
	if x != nil {
		return x.PredicateType
	}
	return ""
}

var File_teleport_workloadidentity_v1_sigstore_policy_resource_proto protoreflect.FileDescriptor

var file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDesc = string([]byte{
	0x0a, 0x3b, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9,
	0x01, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x9b, 0x02, 0x0a, 0x12, 0x53,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x46, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x6c, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x54, 0x6f,
	0x74, 0x6f, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x22, 0x9d, 0x01, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x5c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x6c, 0x65,
	0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f,
	0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x1e, 0x53, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x25, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x18,
	0x49, 0x6e, 0x54, 0x6f, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x64, 0x5a, 0x62, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0x3b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescOnce sync.Once
	file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescData []byte
)

func file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescGZIP() []byte {
	file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescOnce.Do(func() {
		file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDesc), len(file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDesc)))
	})
	return file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDescData
}

var file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_goTypes = []any{
	(*SigstorePolicy)(nil),                 // 0: teleport.workloadidentity.v1.SigstorePolicy
	(*SigstorePolicySpec)(nil),             // 1: teleport.workloadidentity.v1.SigstorePolicySpec
	(*SigstorePolicyRequirements)(nil),     // 2: teleport.workloadidentity.v1.SigstorePolicyRequirements
	(*SigstoreKeyAuthority)(nil),           // 3: teleport.workloadidentity.v1.SigstoreKeyAuthority
	(*SigstoreKeylessAuthority)(nil),       // 4: teleport.workloadidentity.v1.SigstoreKeylessAuthority
	(*SigstoreKeylessSigningIdentity)(nil), // 5: teleport.workloadidentity.v1.SigstoreKeylessSigningIdentity
	(*InTotoAttestationMatcher)(nil),       // 6: teleport.workloadidentity.v1.InTotoAttestationMatcher
	(*v1.Metadata)(nil),                    // 7: teleport.header.v1.Metadata
}
var file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_depIdxs = []int32{
	7, // 0: teleport.workloadidentity.v1.SigstorePolicy.metadata:type_name -> teleport.header.v1.Metadata
	1, // 1: teleport.workloadidentity.v1.SigstorePolicy.spec:type_name -> teleport.workloadidentity.v1.SigstorePolicySpec
	3, // 2: teleport.workloadidentity.v1.SigstorePolicySpec.key:type_name -> teleport.workloadidentity.v1.SigstoreKeyAuthority
	4, // 3: teleport.workloadidentity.v1.SigstorePolicySpec.keyless:type_name -> teleport.workloadidentity.v1.SigstoreKeylessAuthority
	2, // 4: teleport.workloadidentity.v1.SigstorePolicySpec.requirements:type_name -> teleport.workloadidentity.v1.SigstorePolicyRequirements
	6, // 5: teleport.workloadidentity.v1.SigstorePolicyRequirements.attestations:type_name -> teleport.workloadidentity.v1.InTotoAttestationMatcher
	5, // 6: teleport.workloadidentity.v1.SigstoreKeylessAuthority.identities:type_name -> teleport.workloadidentity.v1.SigstoreKeylessSigningIdentity
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_init() }
func file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_init() {
	if File_teleport_workloadidentity_v1_sigstore_policy_resource_proto != nil {
		return
	}
	file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[1].OneofWrappers = []any{
		(*SigstorePolicySpec_Key)(nil),
		(*SigstorePolicySpec_Keyless)(nil),
	}
	file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes[5].OneofWrappers = []any{
		(*SigstoreKeylessSigningIdentity_Issuer)(nil),
		(*SigstoreKeylessSigningIdentity_IssuerRegex)(nil),
		(*SigstoreKeylessSigningIdentity_Subject)(nil),
		(*SigstoreKeylessSigningIdentity_SubjectRegex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDesc), len(file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_goTypes,
		DependencyIndexes: file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_depIdxs,
		MessageInfos:      file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_msgTypes,
	}.Build()
	File_teleport_workloadidentity_v1_sigstore_policy_resource_proto = out.File
	file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_goTypes = nil
	file_teleport_workloadidentity_v1_sigstore_policy_resource_proto_depIdxs = nil
}
