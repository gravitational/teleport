// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/workloadidentity/v1/attrs.proto

package workloadidentityv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/trait/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Attributes sourced from the Kubernetes workload attestor.
type WorkloadAttrsKubernetes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the workload passed Kubernetes attestation.
	Attested bool `protobuf:"varint,1,opt,name=attested,proto3" json:"attested,omitempty"`
	// The namespace of the workload pod.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the workload pod.
	PodName string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// The service account of the workload pod.
	ServiceAccount string `protobuf:"bytes,4,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The UID of the workload pod.
	PodUid string `protobuf:"bytes,5,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	// The labels of the workload pod.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Details of the workload container.
	Container     *WorkloadAttrsKubernetesContainer `protobuf:"bytes,7,opt,name=container,proto3,oneof" json:"container,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsKubernetes) Reset() {
	*x = WorkloadAttrsKubernetes{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsKubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsKubernetes) ProtoMessage() {}

func (x *WorkloadAttrsKubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsKubernetes.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsKubernetes) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{0}
}

func (x *WorkloadAttrsKubernetes) GetAttested() bool {
	if x != nil {
		return x.Attested
	}
	return false
}

func (x *WorkloadAttrsKubernetes) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkloadAttrsKubernetes) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *WorkloadAttrsKubernetes) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *WorkloadAttrsKubernetes) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *WorkloadAttrsKubernetes) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WorkloadAttrsKubernetes) GetContainer() *WorkloadAttrsKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

// Attributes of the container sourced from the Kubernetes workload attestation.
type WorkloadAttrsKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the container.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the image the container is running.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// The exact image digest the container is running.
	ImageDigest   string `protobuf:"bytes,3,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsKubernetesContainer) Reset() {
	*x = WorkloadAttrsKubernetesContainer{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsKubernetesContainer) ProtoMessage() {}

func (x *WorkloadAttrsKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsKubernetesContainer.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{1}
}

func (x *WorkloadAttrsKubernetesContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadAttrsKubernetesContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *WorkloadAttrsKubernetesContainer) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

// Attributes sourced from the Unix workload attestor.
type WorkloadAttrsUnix struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the workload passed Unix attestation.
	Attested bool `protobuf:"varint,1,opt,name=attested,proto3" json:"attested,omitempty"`
	// The PID of the workload process.
	Pid int32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	// The primary user ID of the workload process.
	Gid uint32 `protobuf:"varint,3,opt,name=gid,proto3" json:"gid,omitempty"`
	// The primary group ID of the workload process.
	Uid uint32 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// The path to the workload process binary.
	BinaryPath *string `protobuf:"bytes,5,opt,name=binary_path,json=binaryPath,proto3,oneof" json:"binary_path,omitempty"`
	// The hex-encoded SHA256 hash of the workload process binary.
	BinaryHash    *string `protobuf:"bytes,6,opt,name=binary_hash,json=binaryHash,proto3,oneof" json:"binary_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsUnix) Reset() {
	*x = WorkloadAttrsUnix{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsUnix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsUnix) ProtoMessage() {}

func (x *WorkloadAttrsUnix) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsUnix.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsUnix) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{2}
}

func (x *WorkloadAttrsUnix) GetAttested() bool {
	if x != nil {
		return x.Attested
	}
	return false
}

func (x *WorkloadAttrsUnix) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *WorkloadAttrsUnix) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *WorkloadAttrsUnix) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WorkloadAttrsUnix) GetBinaryPath() string {
	if x != nil && x.BinaryPath != nil {
		return *x.BinaryPath
	}
	return ""
}

func (x *WorkloadAttrsUnix) GetBinaryHash() string {
	if x != nil && x.BinaryHash != nil {
		return *x.BinaryHash
	}
	return ""
}

// Attributes sourced from the Podman workload attestor.
type WorkloadAttrsPodman struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the workload passed Podman attestation.
	Attested bool `protobuf:"varint,1,opt,name=attested,proto3" json:"attested,omitempty"`
	// Attributes of the container.
	Container *WorkloadAttrsPodmanContainer `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	// Attributes of the pod, if the container is in one.
	Pod           *WorkloadAttrsPodmanPod `protobuf:"bytes,3,opt,name=pod,proto3,oneof" json:"pod,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsPodman) Reset() {
	*x = WorkloadAttrsPodman{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsPodman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsPodman) ProtoMessage() {}

func (x *WorkloadAttrsPodman) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsPodman.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsPodman) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{3}
}

func (x *WorkloadAttrsPodman) GetAttested() bool {
	if x != nil {
		return x.Attested
	}
	return false
}

func (x *WorkloadAttrsPodman) GetContainer() *WorkloadAttrsPodmanContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *WorkloadAttrsPodman) GetPod() *WorkloadAttrsPodmanPod {
	if x != nil {
		return x.Pod
	}
	return nil
}

// Attributes of the container sourced from the Podman workload attestation.
type WorkloadAttrsPodmanContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the container.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The image the container is running.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// The labels attached to the container.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The exact image digest the container is running.
	ImageDigest   string `protobuf:"bytes,4,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsPodmanContainer) Reset() {
	*x = WorkloadAttrsPodmanContainer{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsPodmanContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsPodmanContainer) ProtoMessage() {}

func (x *WorkloadAttrsPodmanContainer) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsPodmanContainer.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsPodmanContainer) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{4}
}

func (x *WorkloadAttrsPodmanContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadAttrsPodmanContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *WorkloadAttrsPodmanContainer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WorkloadAttrsPodmanContainer) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

// Attributes of the pod sourced from the Podman workload attestation.
type WorkloadAttrsPodmanPod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the pod.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The labels attached to the pod.
	Labels        map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsPodmanPod) Reset() {
	*x = WorkloadAttrsPodmanPod{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsPodmanPod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsPodmanPod) ProtoMessage() {}

func (x *WorkloadAttrsPodmanPod) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsPodmanPod.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsPodmanPod) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{5}
}

func (x *WorkloadAttrsPodmanPod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadAttrsPodmanPod) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Attributes sourced from the Docker workload attestor.
type WorkloadAttrsDocker struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the workload passed Docker attestation.
	Attested bool `protobuf:"varint,1,opt,name=attested,proto3" json:"attested,omitempty"`
	// Attributes of the container.
	Container     *WorkloadAttrsDockerContainer `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsDocker) Reset() {
	*x = WorkloadAttrsDocker{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsDocker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsDocker) ProtoMessage() {}

func (x *WorkloadAttrsDocker) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsDocker.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsDocker) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{6}
}

func (x *WorkloadAttrsDocker) GetAttested() bool {
	if x != nil {
		return x.Attested
	}
	return false
}

func (x *WorkloadAttrsDocker) GetContainer() *WorkloadAttrsDockerContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

// Attributes of the container sourced from the Docker workload attestation.
type WorkloadAttrsDockerContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the container.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The image the container is running.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// The labels attached to the container.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The exact image digest the container is running.
	ImageDigest   string `protobuf:"bytes,4,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsDockerContainer) Reset() {
	*x = WorkloadAttrsDockerContainer{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsDockerContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsDockerContainer) ProtoMessage() {}

func (x *WorkloadAttrsDockerContainer) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsDockerContainer.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsDockerContainer) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{7}
}

func (x *WorkloadAttrsDockerContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadAttrsDockerContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *WorkloadAttrsDockerContainer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WorkloadAttrsDockerContainer) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

// Attributes sourced from the Systemd workload attestor.
type WorkloadAttrsSystemd struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the workload passed Systemd attestation.
	Attested bool `protobuf:"varint,1,opt,name=attested,proto3" json:"attested,omitempty"`
	// The systemd service name.
	Service       string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrsSystemd) Reset() {
	*x = WorkloadAttrsSystemd{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrsSystemd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrsSystemd) ProtoMessage() {}

func (x *WorkloadAttrsSystemd) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrsSystemd.ProtoReflect.Descriptor instead.
func (*WorkloadAttrsSystemd) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{8}
}

func (x *WorkloadAttrsSystemd) GetAttested() bool {
	if x != nil {
		return x.Attested
	}
	return false
}

func (x *WorkloadAttrsSystemd) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// The attributes provided by `tbot` regarding the workload's attestation.
// This will be mostly unset if the workload has not requested credentials via
// the SPIFFE Workload API.
type WorkloadAttrs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Unix-specific attributes.
	Unix *WorkloadAttrsUnix `protobuf:"bytes,1,opt,name=unix,proto3" json:"unix,omitempty"`
	// The Kubernetes-specific attributes.
	Kubernetes *WorkloadAttrsKubernetes `protobuf:"bytes,2,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// The Podman-specific attributes.
	Podman *WorkloadAttrsPodman `protobuf:"bytes,3,opt,name=podman,proto3" json:"podman,omitempty"`
	// The Docker-specific attributes.
	Docker *WorkloadAttrsDocker `protobuf:"bytes,4,opt,name=docker,proto3" json:"docker,omitempty"`
	// The Systemd-specific attributes.
	Systemd       *WorkloadAttrsSystemd `protobuf:"bytes,5,opt,name=systemd,proto3" json:"systemd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadAttrs) Reset() {
	*x = WorkloadAttrs{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadAttrs) ProtoMessage() {}

func (x *WorkloadAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadAttrs.ProtoReflect.Descriptor instead.
func (*WorkloadAttrs) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{9}
}

func (x *WorkloadAttrs) GetUnix() *WorkloadAttrsUnix {
	if x != nil {
		return x.Unix
	}
	return nil
}

func (x *WorkloadAttrs) GetKubernetes() *WorkloadAttrsKubernetes {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *WorkloadAttrs) GetPodman() *WorkloadAttrsPodman {
	if x != nil {
		return x.Podman
	}
	return nil
}

func (x *WorkloadAttrs) GetDocker() *WorkloadAttrsDocker {
	if x != nil {
		return x.Docker
	}
	return nil
}

func (x *WorkloadAttrs) GetSystemd() *WorkloadAttrsSystemd {
	if x != nil {
		return x.Systemd
	}
	return nil
}

// Attributes related to the user/bot making the request for a workload
// identity.
type UserAttrs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether the user is a bot.
	IsBot bool `protobuf:"varint,2,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	// If the user is a bot, the name of the bot.
	BotName string `protobuf:"bytes,3,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
	// If the user is a bot, the instance ID of the bot.
	BotInstanceId string `protobuf:"bytes,4,opt,name=bot_instance_id,json=botInstanceId,proto3" json:"bot_instance_id,omitempty"`
	// Labels of the user.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Traits of the user.
	Traits        []*v1.Trait `protobuf:"bytes,6,rep,name=traits,proto3" json:"traits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAttrs) Reset() {
	*x = UserAttrs{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttrs) ProtoMessage() {}

func (x *UserAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttrs.ProtoReflect.Descriptor instead.
func (*UserAttrs) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{10}
}

func (x *UserAttrs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserAttrs) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *UserAttrs) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

func (x *UserAttrs) GetBotInstanceId() string {
	if x != nil {
		return x.BotInstanceId
	}
	return ""
}

func (x *UserAttrs) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UserAttrs) GetTraits() []*v1.Trait {
	if x != nil {
		return x.Traits
	}
	return nil
}

// The attributes of a principal requesting a workload identity. These
// attributes can be leveraged in rules, expressions and templating within the
// WorkloadIdentity resource.
type Attrs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Attributes sourced by workload attestation performed by `tbot`.
	Workload *WorkloadAttrs `protobuf:"bytes,1,opt,name=workload,proto3" json:"workload,omitempty"`
	// Attributes sourced from the user/bot making the request for a workload
	// identity credential.
	User *UserAttrs `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Attributes sourced from the join process that the Bot underwent. This will
	// be unset if the principal making the request is not a Bot.
	Join          *JoinAttrs `protobuf:"bytes,3,opt,name=join,proto3" json:"join,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attrs) Reset() {
	*x = Attrs{}
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attrs) ProtoMessage() {}

func (x *Attrs) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_attrs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attrs.ProtoReflect.Descriptor instead.
func (*Attrs) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP(), []int{11}
}

func (x *Attrs) GetWorkload() *WorkloadAttrs {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *Attrs) GetUser() *UserAttrs {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Attrs) GetJoin() *JoinAttrs {
	if x != nil {
		return x.Join
	}
	return nil
}

var File_teleport_workloadidentity_v1_attrs_proto protoreflect.FileDescriptor

const file_teleport_workloadidentity_v1_attrs_proto_rawDesc = "" +
	"\n" +
	"(teleport/workloadidentity/v1/attrs.proto\x12\x1cteleport.workloadidentity.v1\x1a\x1dteleport/trait/v1/trait.proto\x1a-teleport/workloadidentity/v1/join_attrs.proto\"\xb7\x03\n" +
	"\x17WorkloadAttrsKubernetes\x12\x1a\n" +
	"\battested\x18\x01 \x01(\bR\battested\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x19\n" +
	"\bpod_name\x18\x03 \x01(\tR\apodName\x12'\n" +
	"\x0fservice_account\x18\x04 \x01(\tR\x0eserviceAccount\x12\x17\n" +
	"\apod_uid\x18\x05 \x01(\tR\x06podUid\x12Y\n" +
	"\x06labels\x18\x06 \x03(\v2A.teleport.workloadidentity.v1.WorkloadAttrsKubernetes.LabelsEntryR\x06labels\x12a\n" +
	"\tcontainer\x18\a \x01(\v2>.teleport.workloadidentity.v1.WorkloadAttrsKubernetesContainerH\x00R\tcontainer\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_container\"o\n" +
	" WorkloadAttrsKubernetesContainer\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12!\n" +
	"\fimage_digest\x18\x03 \x01(\tR\vimageDigest\"\xd1\x01\n" +
	"\x11WorkloadAttrsUnix\x12\x1a\n" +
	"\battested\x18\x01 \x01(\bR\battested\x12\x10\n" +
	"\x03pid\x18\x02 \x01(\x05R\x03pid\x12\x10\n" +
	"\x03gid\x18\x03 \x01(\rR\x03gid\x12\x10\n" +
	"\x03uid\x18\x04 \x01(\rR\x03uid\x12$\n" +
	"\vbinary_path\x18\x05 \x01(\tH\x00R\n" +
	"binaryPath\x88\x01\x01\x12$\n" +
	"\vbinary_hash\x18\x06 \x01(\tH\x01R\n" +
	"binaryHash\x88\x01\x01B\x0e\n" +
	"\f_binary_pathB\x0e\n" +
	"\f_binary_hash\"\xe0\x01\n" +
	"\x13WorkloadAttrsPodman\x12\x1a\n" +
	"\battested\x18\x01 \x01(\bR\battested\x12X\n" +
	"\tcontainer\x18\x02 \x01(\v2:.teleport.workloadidentity.v1.WorkloadAttrsPodmanContainerR\tcontainer\x12K\n" +
	"\x03pod\x18\x03 \x01(\v24.teleport.workloadidentity.v1.WorkloadAttrsPodmanPodH\x00R\x03pod\x88\x01\x01B\x06\n" +
	"\x04_pod\"\x86\x02\n" +
	"\x1cWorkloadAttrsPodmanContainer\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12^\n" +
	"\x06labels\x18\x03 \x03(\v2F.teleport.workloadidentity.v1.WorkloadAttrsPodmanContainer.LabelsEntryR\x06labels\x12!\n" +
	"\fimage_digest\x18\x04 \x01(\tR\vimageDigest\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc1\x01\n" +
	"\x16WorkloadAttrsPodmanPod\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12X\n" +
	"\x06labels\x18\x02 \x03(\v2@.teleport.workloadidentity.v1.WorkloadAttrsPodmanPod.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8b\x01\n" +
	"\x13WorkloadAttrsDocker\x12\x1a\n" +
	"\battested\x18\x01 \x01(\bR\battested\x12X\n" +
	"\tcontainer\x18\x02 \x01(\v2:.teleport.workloadidentity.v1.WorkloadAttrsDockerContainerR\tcontainer\"\x86\x02\n" +
	"\x1cWorkloadAttrsDockerContainer\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12^\n" +
	"\x06labels\x18\x03 \x03(\v2F.teleport.workloadidentity.v1.WorkloadAttrsDockerContainer.LabelsEntryR\x06labels\x12!\n" +
	"\fimage_digest\x18\x04 \x01(\tR\vimageDigest\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"L\n" +
	"\x14WorkloadAttrsSystemd\x12\x1a\n" +
	"\battested\x18\x01 \x01(\bR\battested\x12\x18\n" +
	"\aservice\x18\x02 \x01(\tR\aservice\"\x8f\x03\n" +
	"\rWorkloadAttrs\x12C\n" +
	"\x04unix\x18\x01 \x01(\v2/.teleport.workloadidentity.v1.WorkloadAttrsUnixR\x04unix\x12U\n" +
	"\n" +
	"kubernetes\x18\x02 \x01(\v25.teleport.workloadidentity.v1.WorkloadAttrsKubernetesR\n" +
	"kubernetes\x12I\n" +
	"\x06podman\x18\x03 \x01(\v21.teleport.workloadidentity.v1.WorkloadAttrsPodmanR\x06podman\x12I\n" +
	"\x06docker\x18\x04 \x01(\v21.teleport.workloadidentity.v1.WorkloadAttrsDockerR\x06docker\x12L\n" +
	"\asystemd\x18\x05 \x01(\v22.teleport.workloadidentity.v1.WorkloadAttrsSystemdR\asystemd\"\xb3\x02\n" +
	"\tUserAttrs\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x15\n" +
	"\x06is_bot\x18\x02 \x01(\bR\x05isBot\x12\x19\n" +
	"\bbot_name\x18\x03 \x01(\tR\abotName\x12&\n" +
	"\x0fbot_instance_id\x18\x04 \x01(\tR\rbotInstanceId\x12K\n" +
	"\x06labels\x18\x05 \x03(\v23.teleport.workloadidentity.v1.UserAttrs.LabelsEntryR\x06labels\x120\n" +
	"\x06traits\x18\x06 \x03(\v2\x18.teleport.trait.v1.TraitR\x06traits\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xca\x01\n" +
	"\x05Attrs\x12G\n" +
	"\bworkload\x18\x01 \x01(\v2+.teleport.workloadidentity.v1.WorkloadAttrsR\bworkload\x12;\n" +
	"\x04user\x18\x02 \x01(\v2'.teleport.workloadidentity.v1.UserAttrsR\x04user\x12;\n" +
	"\x04join\x18\x03 \x01(\v2'.teleport.workloadidentity.v1.JoinAttrsR\x04joinBdZbgithub.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1b\x06proto3"

var (
	file_teleport_workloadidentity_v1_attrs_proto_rawDescOnce sync.Once
	file_teleport_workloadidentity_v1_attrs_proto_rawDescData []byte
)

func file_teleport_workloadidentity_v1_attrs_proto_rawDescGZIP() []byte {
	file_teleport_workloadidentity_v1_attrs_proto_rawDescOnce.Do(func() {
		file_teleport_workloadidentity_v1_attrs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_attrs_proto_rawDesc), len(file_teleport_workloadidentity_v1_attrs_proto_rawDesc)))
	})
	return file_teleport_workloadidentity_v1_attrs_proto_rawDescData
}

var file_teleport_workloadidentity_v1_attrs_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_teleport_workloadidentity_v1_attrs_proto_goTypes = []any{
	(*WorkloadAttrsKubernetes)(nil),          // 0: teleport.workloadidentity.v1.WorkloadAttrsKubernetes
	(*WorkloadAttrsKubernetesContainer)(nil), // 1: teleport.workloadidentity.v1.WorkloadAttrsKubernetesContainer
	(*WorkloadAttrsUnix)(nil),                // 2: teleport.workloadidentity.v1.WorkloadAttrsUnix
	(*WorkloadAttrsPodman)(nil),              // 3: teleport.workloadidentity.v1.WorkloadAttrsPodman
	(*WorkloadAttrsPodmanContainer)(nil),     // 4: teleport.workloadidentity.v1.WorkloadAttrsPodmanContainer
	(*WorkloadAttrsPodmanPod)(nil),           // 5: teleport.workloadidentity.v1.WorkloadAttrsPodmanPod
	(*WorkloadAttrsDocker)(nil),              // 6: teleport.workloadidentity.v1.WorkloadAttrsDocker
	(*WorkloadAttrsDockerContainer)(nil),     // 7: teleport.workloadidentity.v1.WorkloadAttrsDockerContainer
	(*WorkloadAttrsSystemd)(nil),             // 8: teleport.workloadidentity.v1.WorkloadAttrsSystemd
	(*WorkloadAttrs)(nil),                    // 9: teleport.workloadidentity.v1.WorkloadAttrs
	(*UserAttrs)(nil),                        // 10: teleport.workloadidentity.v1.UserAttrs
	(*Attrs)(nil),                            // 11: teleport.workloadidentity.v1.Attrs
	nil,                                      // 12: teleport.workloadidentity.v1.WorkloadAttrsKubernetes.LabelsEntry
	nil,                                      // 13: teleport.workloadidentity.v1.WorkloadAttrsPodmanContainer.LabelsEntry
	nil,                                      // 14: teleport.workloadidentity.v1.WorkloadAttrsPodmanPod.LabelsEntry
	nil,                                      // 15: teleport.workloadidentity.v1.WorkloadAttrsDockerContainer.LabelsEntry
	nil,                                      // 16: teleport.workloadidentity.v1.UserAttrs.LabelsEntry
	(*v1.Trait)(nil),                         // 17: teleport.trait.v1.Trait
	(*JoinAttrs)(nil),                        // 18: teleport.workloadidentity.v1.JoinAttrs
}
var file_teleport_workloadidentity_v1_attrs_proto_depIdxs = []int32{
	12, // 0: teleport.workloadidentity.v1.WorkloadAttrsKubernetes.labels:type_name -> teleport.workloadidentity.v1.WorkloadAttrsKubernetes.LabelsEntry
	1,  // 1: teleport.workloadidentity.v1.WorkloadAttrsKubernetes.container:type_name -> teleport.workloadidentity.v1.WorkloadAttrsKubernetesContainer
	4,  // 2: teleport.workloadidentity.v1.WorkloadAttrsPodman.container:type_name -> teleport.workloadidentity.v1.WorkloadAttrsPodmanContainer
	5,  // 3: teleport.workloadidentity.v1.WorkloadAttrsPodman.pod:type_name -> teleport.workloadidentity.v1.WorkloadAttrsPodmanPod
	13, // 4: teleport.workloadidentity.v1.WorkloadAttrsPodmanContainer.labels:type_name -> teleport.workloadidentity.v1.WorkloadAttrsPodmanContainer.LabelsEntry
	14, // 5: teleport.workloadidentity.v1.WorkloadAttrsPodmanPod.labels:type_name -> teleport.workloadidentity.v1.WorkloadAttrsPodmanPod.LabelsEntry
	7,  // 6: teleport.workloadidentity.v1.WorkloadAttrsDocker.container:type_name -> teleport.workloadidentity.v1.WorkloadAttrsDockerContainer
	15, // 7: teleport.workloadidentity.v1.WorkloadAttrsDockerContainer.labels:type_name -> teleport.workloadidentity.v1.WorkloadAttrsDockerContainer.LabelsEntry
	2,  // 8: teleport.workloadidentity.v1.WorkloadAttrs.unix:type_name -> teleport.workloadidentity.v1.WorkloadAttrsUnix
	0,  // 9: teleport.workloadidentity.v1.WorkloadAttrs.kubernetes:type_name -> teleport.workloadidentity.v1.WorkloadAttrsKubernetes
	3,  // 10: teleport.workloadidentity.v1.WorkloadAttrs.podman:type_name -> teleport.workloadidentity.v1.WorkloadAttrsPodman
	6,  // 11: teleport.workloadidentity.v1.WorkloadAttrs.docker:type_name -> teleport.workloadidentity.v1.WorkloadAttrsDocker
	8,  // 12: teleport.workloadidentity.v1.WorkloadAttrs.systemd:type_name -> teleport.workloadidentity.v1.WorkloadAttrsSystemd
	16, // 13: teleport.workloadidentity.v1.UserAttrs.labels:type_name -> teleport.workloadidentity.v1.UserAttrs.LabelsEntry
	17, // 14: teleport.workloadidentity.v1.UserAttrs.traits:type_name -> teleport.trait.v1.Trait
	9,  // 15: teleport.workloadidentity.v1.Attrs.workload:type_name -> teleport.workloadidentity.v1.WorkloadAttrs
	10, // 16: teleport.workloadidentity.v1.Attrs.user:type_name -> teleport.workloadidentity.v1.UserAttrs
	18, // 17: teleport.workloadidentity.v1.Attrs.join:type_name -> teleport.workloadidentity.v1.JoinAttrs
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_teleport_workloadidentity_v1_attrs_proto_init() }
func file_teleport_workloadidentity_v1_attrs_proto_init() {
	if File_teleport_workloadidentity_v1_attrs_proto != nil {
		return
	}
	file_teleport_workloadidentity_v1_join_attrs_proto_init()
	file_teleport_workloadidentity_v1_attrs_proto_msgTypes[0].OneofWrappers = []any{}
	file_teleport_workloadidentity_v1_attrs_proto_msgTypes[2].OneofWrappers = []any{}
	file_teleport_workloadidentity_v1_attrs_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_workloadidentity_v1_attrs_proto_rawDesc), len(file_teleport_workloadidentity_v1_attrs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_workloadidentity_v1_attrs_proto_goTypes,
		DependencyIndexes: file_teleport_workloadidentity_v1_attrs_proto_depIdxs,
		MessageInfos:      file_teleport_workloadidentity_v1_attrs_proto_msgTypes,
	}.Build()
	File_teleport_workloadidentity_v1_attrs_proto = out.File
	file_teleport_workloadidentity_v1_attrs_proto_goTypes = nil
	file_teleport_workloadidentity_v1_attrs_proto_depIdxs = nil
}
