// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/workloadidentity/v1/sigstore_policy_service.proto

package workloadidentityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SigstorePolicyResourceService_CreateSigstorePolicy_FullMethodName = "/teleport.workloadidentity.v1.SigstorePolicyResourceService/CreateSigstorePolicy"
	SigstorePolicyResourceService_UpsertSigstorePolicy_FullMethodName = "/teleport.workloadidentity.v1.SigstorePolicyResourceService/UpsertSigstorePolicy"
	SigstorePolicyResourceService_UpdateSigstorePolicy_FullMethodName = "/teleport.workloadidentity.v1.SigstorePolicyResourceService/UpdateSigstorePolicy"
	SigstorePolicyResourceService_GetSigstorePolicy_FullMethodName    = "/teleport.workloadidentity.v1.SigstorePolicyResourceService/GetSigstorePolicy"
	SigstorePolicyResourceService_DeleteSigstorePolicy_FullMethodName = "/teleport.workloadidentity.v1.SigstorePolicyResourceService/DeleteSigstorePolicy"
	SigstorePolicyResourceService_ListSigstorePolicies_FullMethodName = "/teleport.workloadidentity.v1.SigstorePolicyResourceService/ListSigstorePolicies"
)

// SigstorePolicyResourceServiceClient is the client API for SigstorePolicyResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SigstorePolicyResourceService provides methods to manage the Sigstore policies
// used to verify workload artifact integrity and provenance.
//
// It's only available in Teleport Enterprise Edition.
type SigstorePolicyResourceServiceClient interface {
	// CreateSigstorePolicy creates a new Sigstore policy.
	CreateSigstorePolicy(ctx context.Context, in *CreateSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error)
	// UpsertSigstorePolicy creates or updates a Sigstore policy.
	//
	// You should prefer to call CreateSigstorePolicy or UpdateSigstorePolicy.
	UpsertSigstorePolicy(ctx context.Context, in *UpsertSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error)
	// UpdateSigstorePolicy updates an existing Sigstore policy. It will refuse to
	// update a Sigstore policy if one does not already exist with the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided SigstorePolicy matches the revision of the
	// existing SigstorePolicy.
	UpdateSigstorePolicy(ctx context.Context, in *UpdateSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error)
	// GetSigstorePolicy retrieves a Sigstore policy by name.
	GetSigstorePolicy(ctx context.Context, in *GetSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error)
	// DeleteSigstorePolicy deletes a Sigstore policy by name.
	DeleteSigstorePolicy(ctx context.Context, in *DeleteSigstorePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListSigstorePolicies returns a list of Sigstore policies, pagination
	// semantics are applied.
	ListSigstorePolicies(ctx context.Context, in *ListSigstorePoliciesRequest, opts ...grpc.CallOption) (*ListSigstorePoliciesResponse, error)
}

type sigstorePolicyResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSigstorePolicyResourceServiceClient(cc grpc.ClientConnInterface) SigstorePolicyResourceServiceClient {
	return &sigstorePolicyResourceServiceClient{cc}
}

func (c *sigstorePolicyResourceServiceClient) CreateSigstorePolicy(ctx context.Context, in *CreateSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigstorePolicy)
	err := c.cc.Invoke(ctx, SigstorePolicyResourceService_CreateSigstorePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstorePolicyResourceServiceClient) UpsertSigstorePolicy(ctx context.Context, in *UpsertSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigstorePolicy)
	err := c.cc.Invoke(ctx, SigstorePolicyResourceService_UpsertSigstorePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstorePolicyResourceServiceClient) UpdateSigstorePolicy(ctx context.Context, in *UpdateSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigstorePolicy)
	err := c.cc.Invoke(ctx, SigstorePolicyResourceService_UpdateSigstorePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstorePolicyResourceServiceClient) GetSigstorePolicy(ctx context.Context, in *GetSigstorePolicyRequest, opts ...grpc.CallOption) (*SigstorePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SigstorePolicy)
	err := c.cc.Invoke(ctx, SigstorePolicyResourceService_GetSigstorePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstorePolicyResourceServiceClient) DeleteSigstorePolicy(ctx context.Context, in *DeleteSigstorePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SigstorePolicyResourceService_DeleteSigstorePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigstorePolicyResourceServiceClient) ListSigstorePolicies(ctx context.Context, in *ListSigstorePoliciesRequest, opts ...grpc.CallOption) (*ListSigstorePoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSigstorePoliciesResponse)
	err := c.cc.Invoke(ctx, SigstorePolicyResourceService_ListSigstorePolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigstorePolicyResourceServiceServer is the server API for SigstorePolicyResourceService service.
// All implementations must embed UnimplementedSigstorePolicyResourceServiceServer
// for forward compatibility.
//
// SigstorePolicyResourceService provides methods to manage the Sigstore policies
// used to verify workload artifact integrity and provenance.
//
// It's only available in Teleport Enterprise Edition.
type SigstorePolicyResourceServiceServer interface {
	// CreateSigstorePolicy creates a new Sigstore policy.
	CreateSigstorePolicy(context.Context, *CreateSigstorePolicyRequest) (*SigstorePolicy, error)
	// UpsertSigstorePolicy creates or updates a Sigstore policy.
	//
	// You should prefer to call CreateSigstorePolicy or UpdateSigstorePolicy.
	UpsertSigstorePolicy(context.Context, *UpsertSigstorePolicyRequest) (*SigstorePolicy, error)
	// UpdateSigstorePolicy updates an existing Sigstore policy. It will refuse to
	// update a Sigstore policy if one does not already exist with the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided SigstorePolicy matches the revision of the
	// existing SigstorePolicy.
	UpdateSigstorePolicy(context.Context, *UpdateSigstorePolicyRequest) (*SigstorePolicy, error)
	// GetSigstorePolicy retrieves a Sigstore policy by name.
	GetSigstorePolicy(context.Context, *GetSigstorePolicyRequest) (*SigstorePolicy, error)
	// DeleteSigstorePolicy deletes a Sigstore policy by name.
	DeleteSigstorePolicy(context.Context, *DeleteSigstorePolicyRequest) (*emptypb.Empty, error)
	// ListSigstorePolicies returns a list of Sigstore policies, pagination
	// semantics are applied.
	ListSigstorePolicies(context.Context, *ListSigstorePoliciesRequest) (*ListSigstorePoliciesResponse, error)
	mustEmbedUnimplementedSigstorePolicyResourceServiceServer()
}

// UnimplementedSigstorePolicyResourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSigstorePolicyResourceServiceServer struct{}

func (UnimplementedSigstorePolicyResourceServiceServer) CreateSigstorePolicy(context.Context, *CreateSigstorePolicyRequest) (*SigstorePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSigstorePolicy not implemented")
}
func (UnimplementedSigstorePolicyResourceServiceServer) UpsertSigstorePolicy(context.Context, *UpsertSigstorePolicyRequest) (*SigstorePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSigstorePolicy not implemented")
}
func (UnimplementedSigstorePolicyResourceServiceServer) UpdateSigstorePolicy(context.Context, *UpdateSigstorePolicyRequest) (*SigstorePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSigstorePolicy not implemented")
}
func (UnimplementedSigstorePolicyResourceServiceServer) GetSigstorePolicy(context.Context, *GetSigstorePolicyRequest) (*SigstorePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigstorePolicy not implemented")
}
func (UnimplementedSigstorePolicyResourceServiceServer) DeleteSigstorePolicy(context.Context, *DeleteSigstorePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSigstorePolicy not implemented")
}
func (UnimplementedSigstorePolicyResourceServiceServer) ListSigstorePolicies(context.Context, *ListSigstorePoliciesRequest) (*ListSigstorePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSigstorePolicies not implemented")
}
func (UnimplementedSigstorePolicyResourceServiceServer) mustEmbedUnimplementedSigstorePolicyResourceServiceServer() {
}
func (UnimplementedSigstorePolicyResourceServiceServer) testEmbeddedByValue() {}

// UnsafeSigstorePolicyResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigstorePolicyResourceServiceServer will
// result in compilation errors.
type UnsafeSigstorePolicyResourceServiceServer interface {
	mustEmbedUnimplementedSigstorePolicyResourceServiceServer()
}

func RegisterSigstorePolicyResourceServiceServer(s grpc.ServiceRegistrar, srv SigstorePolicyResourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedSigstorePolicyResourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SigstorePolicyResourceService_ServiceDesc, srv)
}

func _SigstorePolicyResourceService_CreateSigstorePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSigstorePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstorePolicyResourceServiceServer).CreateSigstorePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstorePolicyResourceService_CreateSigstorePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstorePolicyResourceServiceServer).CreateSigstorePolicy(ctx, req.(*CreateSigstorePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstorePolicyResourceService_UpsertSigstorePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSigstorePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstorePolicyResourceServiceServer).UpsertSigstorePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstorePolicyResourceService_UpsertSigstorePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstorePolicyResourceServiceServer).UpsertSigstorePolicy(ctx, req.(*UpsertSigstorePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstorePolicyResourceService_UpdateSigstorePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSigstorePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstorePolicyResourceServiceServer).UpdateSigstorePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstorePolicyResourceService_UpdateSigstorePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstorePolicyResourceServiceServer).UpdateSigstorePolicy(ctx, req.(*UpdateSigstorePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstorePolicyResourceService_GetSigstorePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSigstorePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstorePolicyResourceServiceServer).GetSigstorePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstorePolicyResourceService_GetSigstorePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstorePolicyResourceServiceServer).GetSigstorePolicy(ctx, req.(*GetSigstorePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstorePolicyResourceService_DeleteSigstorePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSigstorePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstorePolicyResourceServiceServer).DeleteSigstorePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstorePolicyResourceService_DeleteSigstorePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstorePolicyResourceServiceServer).DeleteSigstorePolicy(ctx, req.(*DeleteSigstorePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigstorePolicyResourceService_ListSigstorePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSigstorePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigstorePolicyResourceServiceServer).ListSigstorePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigstorePolicyResourceService_ListSigstorePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigstorePolicyResourceServiceServer).ListSigstorePolicies(ctx, req.(*ListSigstorePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SigstorePolicyResourceService_ServiceDesc is the grpc.ServiceDesc for SigstorePolicyResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigstorePolicyResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.workloadidentity.v1.SigstorePolicyResourceService",
	HandlerType: (*SigstorePolicyResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSigstorePolicy",
			Handler:    _SigstorePolicyResourceService_CreateSigstorePolicy_Handler,
		},
		{
			MethodName: "UpsertSigstorePolicy",
			Handler:    _SigstorePolicyResourceService_UpsertSigstorePolicy_Handler,
		},
		{
			MethodName: "UpdateSigstorePolicy",
			Handler:    _SigstorePolicyResourceService_UpdateSigstorePolicy_Handler,
		},
		{
			MethodName: "GetSigstorePolicy",
			Handler:    _SigstorePolicyResourceService_GetSigstorePolicy_Handler,
		},
		{
			MethodName: "DeleteSigstorePolicy",
			Handler:    _SigstorePolicyResourceService_DeleteSigstorePolicy_Handler,
		},
		{
			MethodName: "ListSigstorePolicies",
			Handler:    _SigstorePolicyResourceService_ListSigstorePolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/workloadidentity/v1/sigstore_policy_service.proto",
}
