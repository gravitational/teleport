// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/workloadidentity/v1/x509_overrides_service.proto

package workloadidentityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	X509OverridesService_GetX509IssuerOverride_FullMethodName    = "/teleport.workloadidentity.v1.X509OverridesService/GetX509IssuerOverride"
	X509OverridesService_ListX509IssuerOverrides_FullMethodName  = "/teleport.workloadidentity.v1.X509OverridesService/ListX509IssuerOverrides"
	X509OverridesService_CreateX509IssuerOverride_FullMethodName = "/teleport.workloadidentity.v1.X509OverridesService/CreateX509IssuerOverride"
	X509OverridesService_UpdateX509IssuerOverride_FullMethodName = "/teleport.workloadidentity.v1.X509OverridesService/UpdateX509IssuerOverride"
	X509OverridesService_UpsertX509IssuerOverride_FullMethodName = "/teleport.workloadidentity.v1.X509OverridesService/UpsertX509IssuerOverride"
	X509OverridesService_DeleteX509IssuerOverride_FullMethodName = "/teleport.workloadidentity.v1.X509OverridesService/DeleteX509IssuerOverride"
)

// X509OverridesServiceClient is the client API for X509OverridesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service contains RPCs for the configuration resources related to X.509
// issuer overrides, and for operations that require the auth's help or
// involvement in generating overrides.
type X509OverridesServiceClient interface {
	// Get a workload_identity_x509_issuer_override by name.
	GetX509IssuerOverride(ctx context.Context, in *GetX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error)
	// List a page of workload_identity_x509_issuer_override items.
	ListX509IssuerOverrides(ctx context.Context, in *ListX509IssuerOverridesRequest, opts ...grpc.CallOption) (*ListX509IssuerOverridesResponse, error)
	// Create a new workload_identity_x509_issuer_override. An ALREADY_EXISTS
	// error will be returned if an item with the same name already exists in the
	// cluster state storage.
	CreateX509IssuerOverride(ctx context.Context, in *CreateX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error)
	// Update a workload_identity_x509_issuer_override; an item with the same name
	// must exist and the revision of the new item must match the revision of the
	// existing item. A FAILED_PRECONDITION error will be returned otherwise.
	UpdateX509IssuerOverride(ctx context.Context, in *UpdateX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error)
	// Create a new workload_identity_x509_issuer_override or overwrite an
	// existing one with the same name.
	UpsertX509IssuerOverride(ctx context.Context, in *UpsertX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error)
	// Delete an existing workload_identity_x509_issuer_override that has a given
	// name. A NOT_FOUND error is returned if the item didn't exist.
	DeleteX509IssuerOverride(ctx context.Context, in *DeleteX509IssuerOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type x509OverridesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewX509OverridesServiceClient(cc grpc.ClientConnInterface) X509OverridesServiceClient {
	return &x509OverridesServiceClient{cc}
}

func (c *x509OverridesServiceClient) GetX509IssuerOverride(ctx context.Context, in *GetX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(X509IssuerOverride)
	err := c.cc.Invoke(ctx, X509OverridesService_GetX509IssuerOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *x509OverridesServiceClient) ListX509IssuerOverrides(ctx context.Context, in *ListX509IssuerOverridesRequest, opts ...grpc.CallOption) (*ListX509IssuerOverridesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListX509IssuerOverridesResponse)
	err := c.cc.Invoke(ctx, X509OverridesService_ListX509IssuerOverrides_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *x509OverridesServiceClient) CreateX509IssuerOverride(ctx context.Context, in *CreateX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(X509IssuerOverride)
	err := c.cc.Invoke(ctx, X509OverridesService_CreateX509IssuerOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *x509OverridesServiceClient) UpdateX509IssuerOverride(ctx context.Context, in *UpdateX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(X509IssuerOverride)
	err := c.cc.Invoke(ctx, X509OverridesService_UpdateX509IssuerOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *x509OverridesServiceClient) UpsertX509IssuerOverride(ctx context.Context, in *UpsertX509IssuerOverrideRequest, opts ...grpc.CallOption) (*X509IssuerOverride, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(X509IssuerOverride)
	err := c.cc.Invoke(ctx, X509OverridesService_UpsertX509IssuerOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *x509OverridesServiceClient) DeleteX509IssuerOverride(ctx context.Context, in *DeleteX509IssuerOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, X509OverridesService_DeleteX509IssuerOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// X509OverridesServiceServer is the server API for X509OverridesService service.
// All implementations must embed UnimplementedX509OverridesServiceServer
// for forward compatibility.
//
// This service contains RPCs for the configuration resources related to X.509
// issuer overrides, and for operations that require the auth's help or
// involvement in generating overrides.
type X509OverridesServiceServer interface {
	// Get a workload_identity_x509_issuer_override by name.
	GetX509IssuerOverride(context.Context, *GetX509IssuerOverrideRequest) (*X509IssuerOverride, error)
	// List a page of workload_identity_x509_issuer_override items.
	ListX509IssuerOverrides(context.Context, *ListX509IssuerOverridesRequest) (*ListX509IssuerOverridesResponse, error)
	// Create a new workload_identity_x509_issuer_override. An ALREADY_EXISTS
	// error will be returned if an item with the same name already exists in the
	// cluster state storage.
	CreateX509IssuerOverride(context.Context, *CreateX509IssuerOverrideRequest) (*X509IssuerOverride, error)
	// Update a workload_identity_x509_issuer_override; an item with the same name
	// must exist and the revision of the new item must match the revision of the
	// existing item. A FAILED_PRECONDITION error will be returned otherwise.
	UpdateX509IssuerOverride(context.Context, *UpdateX509IssuerOverrideRequest) (*X509IssuerOverride, error)
	// Create a new workload_identity_x509_issuer_override or overwrite an
	// existing one with the same name.
	UpsertX509IssuerOverride(context.Context, *UpsertX509IssuerOverrideRequest) (*X509IssuerOverride, error)
	// Delete an existing workload_identity_x509_issuer_override that has a given
	// name. A NOT_FOUND error is returned if the item didn't exist.
	DeleteX509IssuerOverride(context.Context, *DeleteX509IssuerOverrideRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedX509OverridesServiceServer()
}

// UnimplementedX509OverridesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedX509OverridesServiceServer struct{}

func (UnimplementedX509OverridesServiceServer) GetX509IssuerOverride(context.Context, *GetX509IssuerOverrideRequest) (*X509IssuerOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetX509IssuerOverride not implemented")
}
func (UnimplementedX509OverridesServiceServer) ListX509IssuerOverrides(context.Context, *ListX509IssuerOverridesRequest) (*ListX509IssuerOverridesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListX509IssuerOverrides not implemented")
}
func (UnimplementedX509OverridesServiceServer) CreateX509IssuerOverride(context.Context, *CreateX509IssuerOverrideRequest) (*X509IssuerOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateX509IssuerOverride not implemented")
}
func (UnimplementedX509OverridesServiceServer) UpdateX509IssuerOverride(context.Context, *UpdateX509IssuerOverrideRequest) (*X509IssuerOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateX509IssuerOverride not implemented")
}
func (UnimplementedX509OverridesServiceServer) UpsertX509IssuerOverride(context.Context, *UpsertX509IssuerOverrideRequest) (*X509IssuerOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertX509IssuerOverride not implemented")
}
func (UnimplementedX509OverridesServiceServer) DeleteX509IssuerOverride(context.Context, *DeleteX509IssuerOverrideRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteX509IssuerOverride not implemented")
}
func (UnimplementedX509OverridesServiceServer) mustEmbedUnimplementedX509OverridesServiceServer() {}
func (UnimplementedX509OverridesServiceServer) testEmbeddedByValue()                              {}

// UnsafeX509OverridesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to X509OverridesServiceServer will
// result in compilation errors.
type UnsafeX509OverridesServiceServer interface {
	mustEmbedUnimplementedX509OverridesServiceServer()
}

func RegisterX509OverridesServiceServer(s grpc.ServiceRegistrar, srv X509OverridesServiceServer) {
	// If the following call pancis, it indicates UnimplementedX509OverridesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&X509OverridesService_ServiceDesc, srv)
}

func _X509OverridesService_GetX509IssuerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetX509IssuerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(X509OverridesServiceServer).GetX509IssuerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: X509OverridesService_GetX509IssuerOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(X509OverridesServiceServer).GetX509IssuerOverride(ctx, req.(*GetX509IssuerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _X509OverridesService_ListX509IssuerOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListX509IssuerOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(X509OverridesServiceServer).ListX509IssuerOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: X509OverridesService_ListX509IssuerOverrides_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(X509OverridesServiceServer).ListX509IssuerOverrides(ctx, req.(*ListX509IssuerOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _X509OverridesService_CreateX509IssuerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateX509IssuerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(X509OverridesServiceServer).CreateX509IssuerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: X509OverridesService_CreateX509IssuerOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(X509OverridesServiceServer).CreateX509IssuerOverride(ctx, req.(*CreateX509IssuerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _X509OverridesService_UpdateX509IssuerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateX509IssuerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(X509OverridesServiceServer).UpdateX509IssuerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: X509OverridesService_UpdateX509IssuerOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(X509OverridesServiceServer).UpdateX509IssuerOverride(ctx, req.(*UpdateX509IssuerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _X509OverridesService_UpsertX509IssuerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertX509IssuerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(X509OverridesServiceServer).UpsertX509IssuerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: X509OverridesService_UpsertX509IssuerOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(X509OverridesServiceServer).UpsertX509IssuerOverride(ctx, req.(*UpsertX509IssuerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _X509OverridesService_DeleteX509IssuerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteX509IssuerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(X509OverridesServiceServer).DeleteX509IssuerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: X509OverridesService_DeleteX509IssuerOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(X509OverridesServiceServer).DeleteX509IssuerOverride(ctx, req.(*DeleteX509IssuerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// X509OverridesService_ServiceDesc is the grpc.ServiceDesc for X509OverridesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var X509OverridesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.workloadidentity.v1.X509OverridesService",
	HandlerType: (*X509OverridesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetX509IssuerOverride",
			Handler:    _X509OverridesService_GetX509IssuerOverride_Handler,
		},
		{
			MethodName: "ListX509IssuerOverrides",
			Handler:    _X509OverridesService_ListX509IssuerOverrides_Handler,
		},
		{
			MethodName: "CreateX509IssuerOverride",
			Handler:    _X509OverridesService_CreateX509IssuerOverride_Handler,
		},
		{
			MethodName: "UpdateX509IssuerOverride",
			Handler:    _X509OverridesService_UpdateX509IssuerOverride_Handler,
		},
		{
			MethodName: "UpsertX509IssuerOverride",
			Handler:    _X509OverridesService_UpsertX509IssuerOverride_Handler,
		},
		{
			MethodName: "DeleteX509IssuerOverride",
			Handler:    _X509OverridesService_DeleteX509IssuerOverride_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/workloadidentity/v1/x509_overrides_service.proto",
}
