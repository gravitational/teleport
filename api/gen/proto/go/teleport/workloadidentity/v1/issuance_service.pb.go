// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: teleport/workloadidentity/v1/issuance_service.proto

package workloadidentityv1pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The parameters for issuing an X509 SVID.
type X509SVIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The PKIX, ASN.1 DER public key to encode into the X509 SVID.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *X509SVIDParams) Reset() {
	*x = X509SVIDParams{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *X509SVIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509SVIDParams) ProtoMessage() {}

func (x *X509SVIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509SVIDParams.ProtoReflect.Descriptor instead.
func (*X509SVIDParams) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{0}
}

func (x *X509SVIDParams) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// The parameters for issuing a JWT SVID.
type JWTSVIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The audiences to encode into the JWT SVID as the `aud` claim.
	Audiences []string `protobuf:"bytes,1,rep,name=audiences,proto3" json:"audiences,omitempty"`
}

func (x *JWTSVIDParams) Reset() {
	*x = JWTSVIDParams{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWTSVIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTSVIDParams) ProtoMessage() {}

func (x *JWTSVIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTSVIDParams.ProtoReflect.Descriptor instead.
func (*JWTSVIDParams) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{1}
}

func (x *JWTSVIDParams) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

// A credential, and its metadata, that has been issued by Teleport Workload
// Identity.
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The TTL that was chosen by the server.
	Ttl *durationpb.Duration `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// The time that the TTL is reached for this credential.
	Expiry *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The hint configured for this Workload Identity - if any. This is provided
	// to workloads using the SPIFFE Workload API to fetch credentials.
	Hint string `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
	// The name of the Workload Identity resource used to issue this credential.
	WorkloadIdentityName string `protobuf:"bytes,4,opt,name=workload_identity_name,json=workloadIdentityName,proto3" json:"workload_identity_name,omitempty"`
	// The revision of the Workload Identity resource used to issue this
	// credential.
	WorkloadIdentityRevision string `protobuf:"bytes,5,opt,name=workload_identity_revision,json=workloadIdentityRevision,proto3" json:"workload_identity_revision,omitempty"`
	// The fully qualified SPIFFE ID that was encoded into the SVID.
	SpiffeId string `protobuf:"bytes,6,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Types that are assignable to Credential:
	//
	//	*Credential_X509Svid
	//	*Credential_JwtSvid
	Credential isCredential_Credential `protobuf_oneof:"credential"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{2}
}

func (x *Credential) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *Credential) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *Credential) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *Credential) GetWorkloadIdentityName() string {
	if x != nil {
		return x.WorkloadIdentityName
	}
	return ""
}

func (x *Credential) GetWorkloadIdentityRevision() string {
	if x != nil {
		return x.WorkloadIdentityRevision
	}
	return ""
}

func (x *Credential) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (m *Credential) GetCredential() isCredential_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Credential) GetX509Svid() []byte {
	if x, ok := x.GetCredential().(*Credential_X509Svid); ok {
		return x.X509Svid
	}
	return nil
}

func (x *Credential) GetJwtSvid() string {
	if x, ok := x.GetCredential().(*Credential_JwtSvid); ok {
		return x.JwtSvid
	}
	return ""
}

type isCredential_Credential interface {
	isCredential_Credential()
}

type Credential_X509Svid struct {
	// The X509 SVID that was issued.
	// ASN.1 DER encoded X.509 certificate. No PEM.
	X509Svid []byte `protobuf:"bytes,7,opt,name=x509_svid,json=x509Svid,proto3,oneof"`
}

type Credential_JwtSvid struct {
	// The JWT SVID that was issued.
	JwtSvid string `protobuf:"bytes,8,opt,name=jwt_svid,json=jwtSvid,proto3,oneof"`
}

func (*Credential_X509Svid) isCredential_Credential() {}

func (*Credential_JwtSvid) isCredential_Credential() {}

// The request for the IssueWorkloadIdentity RPC.
type IssueWorkloadIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the WorkloadIdentity resource to use for issuing the credential.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The parameters for issuing the credential, varying by credential type.
	//
	// Types that are assignable to Credential:
	//
	//	*IssueWorkloadIdentityRequest_X509SvidParams
	//	*IssueWorkloadIdentityRequest_JwtSvidParams
	Credential isIssueWorkloadIdentityRequest_Credential `protobuf_oneof:"credential"`
	// The workload attributes to encode into the credential.
	WorkloadAttrs *WorkloadAttrs `protobuf:"bytes,4,opt,name=workload_attrs,json=workloadAttrs,proto3" json:"workload_attrs,omitempty"`
	// The TTL that the client is requesting for the resulting credentials.
	// This may be adjusted by the server and therefore the client MUST check the
	// returned TTL rather than assuming that the requested TTL was granted.
	RequestedTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=requested_ttl,json=requestedTtl,proto3" json:"requested_ttl,omitempty"`
}

func (x *IssueWorkloadIdentityRequest) Reset() {
	*x = IssueWorkloadIdentityRequest{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueWorkloadIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueWorkloadIdentityRequest) ProtoMessage() {}

func (x *IssueWorkloadIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueWorkloadIdentityRequest.ProtoReflect.Descriptor instead.
func (*IssueWorkloadIdentityRequest) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{3}
}

func (x *IssueWorkloadIdentityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *IssueWorkloadIdentityRequest) GetCredential() isIssueWorkloadIdentityRequest_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *IssueWorkloadIdentityRequest) GetX509SvidParams() *X509SVIDParams {
	if x, ok := x.GetCredential().(*IssueWorkloadIdentityRequest_X509SvidParams); ok {
		return x.X509SvidParams
	}
	return nil
}

func (x *IssueWorkloadIdentityRequest) GetJwtSvidParams() *JWTSVIDParams {
	if x, ok := x.GetCredential().(*IssueWorkloadIdentityRequest_JwtSvidParams); ok {
		return x.JwtSvidParams
	}
	return nil
}

func (x *IssueWorkloadIdentityRequest) GetWorkloadAttrs() *WorkloadAttrs {
	if x != nil {
		return x.WorkloadAttrs
	}
	return nil
}

func (x *IssueWorkloadIdentityRequest) GetRequestedTtl() *durationpb.Duration {
	if x != nil {
		return x.RequestedTtl
	}
	return nil
}

type isIssueWorkloadIdentityRequest_Credential interface {
	isIssueWorkloadIdentityRequest_Credential()
}

type IssueWorkloadIdentityRequest_X509SvidParams struct {
	// The parameters for issuing an X509 SVID.
	X509SvidParams *X509SVIDParams `protobuf:"bytes,2,opt,name=x509_svid_params,json=x509SvidParams,proto3,oneof"`
}

type IssueWorkloadIdentityRequest_JwtSvidParams struct {
	// The parameters for issuing a JWT SVID.
	JwtSvidParams *JWTSVIDParams `protobuf:"bytes,3,opt,name=jwt_svid_params,json=jwtSvidParams,proto3,oneof"`
}

func (*IssueWorkloadIdentityRequest_X509SvidParams) isIssueWorkloadIdentityRequest_Credential() {}

func (*IssueWorkloadIdentityRequest_JwtSvidParams) isIssueWorkloadIdentityRequest_Credential() {}

// The response for the IssueWorkloadIdentity RPC.
type IssueWorkloadIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The issued credential.
	Credential *Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *IssueWorkloadIdentityResponse) Reset() {
	*x = IssueWorkloadIdentityResponse{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueWorkloadIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueWorkloadIdentityResponse) ProtoMessage() {}

func (x *IssueWorkloadIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueWorkloadIdentityResponse.ProtoReflect.Descriptor instead.
func (*IssueWorkloadIdentityResponse) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{4}
}

func (x *IssueWorkloadIdentityResponse) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

// A key-values pair for selecting WorkloadIdentity resources based on their
// labels.
type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key to match.
	// If this is wildcard, then a single value of wildcard must also be provided.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Any of the acceptable matching values.
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{5}
}

func (x *LabelSelector) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelector) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// The request for the IssueWorkloadIdentities RPC.
type IssueWorkloadIdentitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label selectors to use for selecting WorkloadIdentity resources.
	// At least one selector must be provided.
	LabelSelectors []*LabelSelector `protobuf:"bytes,1,rep,name=label_selectors,json=labelSelectors,proto3" json:"label_selectors,omitempty"`
	// The parameters for issuing the credentials, varying by credential type.
	//
	// Types that are assignable to Credential:
	//
	//	*IssueWorkloadIdentitiesRequest_X509SvidParams
	//	*IssueWorkloadIdentitiesRequest_JwtSvidParams
	Credential isIssueWorkloadIdentitiesRequest_Credential `protobuf_oneof:"credential"`
	// The workload attributes to encode into the credentials.
	WorkloadAttrs *WorkloadAttrs `protobuf:"bytes,4,opt,name=workload_attrs,json=workloadAttrs,proto3" json:"workload_attrs,omitempty"`
	// The TTL that the client is requesting for the resulting credentials.
	// This may be adjusted by the server and therefore the client MUST check the
	// returned TTL rather than assuming that the requested TTL was granted.
	RequestedTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=requested_ttl,json=requestedTtl,proto3" json:"requested_ttl,omitempty"`
}

func (x *IssueWorkloadIdentitiesRequest) Reset() {
	*x = IssueWorkloadIdentitiesRequest{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueWorkloadIdentitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueWorkloadIdentitiesRequest) ProtoMessage() {}

func (x *IssueWorkloadIdentitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueWorkloadIdentitiesRequest.ProtoReflect.Descriptor instead.
func (*IssueWorkloadIdentitiesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{6}
}

func (x *IssueWorkloadIdentitiesRequest) GetLabelSelectors() []*LabelSelector {
	if x != nil {
		return x.LabelSelectors
	}
	return nil
}

func (m *IssueWorkloadIdentitiesRequest) GetCredential() isIssueWorkloadIdentitiesRequest_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *IssueWorkloadIdentitiesRequest) GetX509SvidParams() *X509SVIDParams {
	if x, ok := x.GetCredential().(*IssueWorkloadIdentitiesRequest_X509SvidParams); ok {
		return x.X509SvidParams
	}
	return nil
}

func (x *IssueWorkloadIdentitiesRequest) GetJwtSvidParams() *JWTSVIDParams {
	if x, ok := x.GetCredential().(*IssueWorkloadIdentitiesRequest_JwtSvidParams); ok {
		return x.JwtSvidParams
	}
	return nil
}

func (x *IssueWorkloadIdentitiesRequest) GetWorkloadAttrs() *WorkloadAttrs {
	if x != nil {
		return x.WorkloadAttrs
	}
	return nil
}

func (x *IssueWorkloadIdentitiesRequest) GetRequestedTtl() *durationpb.Duration {
	if x != nil {
		return x.RequestedTtl
	}
	return nil
}

type isIssueWorkloadIdentitiesRequest_Credential interface {
	isIssueWorkloadIdentitiesRequest_Credential()
}

type IssueWorkloadIdentitiesRequest_X509SvidParams struct {
	// The parameters for issuing an X509 SVID.
	X509SvidParams *X509SVIDParams `protobuf:"bytes,2,opt,name=x509_svid_params,json=x509SvidParams,proto3,oneof"`
}

type IssueWorkloadIdentitiesRequest_JwtSvidParams struct {
	// The parameters for issuing a JWT SVID.
	JwtSvidParams *JWTSVIDParams `protobuf:"bytes,3,opt,name=jwt_svid_params,json=jwtSvidParams,proto3,oneof"`
}

func (*IssueWorkloadIdentitiesRequest_X509SvidParams) isIssueWorkloadIdentitiesRequest_Credential() {}

func (*IssueWorkloadIdentitiesRequest_JwtSvidParams) isIssueWorkloadIdentitiesRequest_Credential() {}

// The response for the IssueWorkloadIdentities RPC.
type IssueWorkloadIdentitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The issued credentials.
	Credentials []*Credential `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *IssueWorkloadIdentitiesResponse) Reset() {
	*x = IssueWorkloadIdentitiesResponse{}
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueWorkloadIdentitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueWorkloadIdentitiesResponse) ProtoMessage() {}

func (x *IssueWorkloadIdentitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueWorkloadIdentitiesResponse.ProtoReflect.Descriptor instead.
func (*IssueWorkloadIdentitiesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP(), []int{7}
}

func (x *IssueWorkloadIdentitiesResponse) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

var File_teleport_workloadidentity_v1_issuance_service_proto protoreflect.FileDescriptor

var file_teleport_workloadidentity_v1_issuance_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f,
	0x0a, 0x0e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0x2d, 0x0a, 0x0d, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xdc,
	0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x73, 0x76, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x78, 0x35, 0x30, 0x39, 0x53, 0x76,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x6a, 0x77, 0x74, 0x5f, 0x73, 0x76, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x77, 0x74, 0x53, 0x76, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x85, 0x03,
	0x0a, 0x1c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x73, 0x76, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39,
	0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x78, 0x35,
	0x30, 0x39, 0x53, 0x76, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x0f,
	0x6a, 0x77, 0x74, 0x5f, 0x73, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x77, 0x74, 0x53, 0x76, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x54, 0x74, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x69, 0x0a, 0x1d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0x39, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc9, 0x03, 0x0a, 0x1e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x73, 0x76, 0x69,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x78, 0x35, 0x30, 0x39, 0x53, 0x76, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55,
	0x0a, 0x0f, 0x6a, 0x77, 0x74, 0x5f, 0x73, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x77, 0x74, 0x53, 0x76, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x74, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x6d, 0x0a, 0x1f, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x32, 0xcd, 0x02, 0x0a, 0x1f, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01,
	0x0a, 0x17, 0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x66, 0x5a, 0x64, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x76, 0x31, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_workloadidentity_v1_issuance_service_proto_rawDescOnce sync.Once
	file_teleport_workloadidentity_v1_issuance_service_proto_rawDescData = file_teleport_workloadidentity_v1_issuance_service_proto_rawDesc
)

func file_teleport_workloadidentity_v1_issuance_service_proto_rawDescGZIP() []byte {
	file_teleport_workloadidentity_v1_issuance_service_proto_rawDescOnce.Do(func() {
		file_teleport_workloadidentity_v1_issuance_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_workloadidentity_v1_issuance_service_proto_rawDescData)
	})
	return file_teleport_workloadidentity_v1_issuance_service_proto_rawDescData
}

var file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_teleport_workloadidentity_v1_issuance_service_proto_goTypes = []any{
	(*X509SVIDParams)(nil),                  // 0: teleport.workloadidentity.v1.X509SVIDParams
	(*JWTSVIDParams)(nil),                   // 1: teleport.workloadidentity.v1.JWTSVIDParams
	(*Credential)(nil),                      // 2: teleport.workloadidentity.v1.Credential
	(*IssueWorkloadIdentityRequest)(nil),    // 3: teleport.workloadidentity.v1.IssueWorkloadIdentityRequest
	(*IssueWorkloadIdentityResponse)(nil),   // 4: teleport.workloadidentity.v1.IssueWorkloadIdentityResponse
	(*LabelSelector)(nil),                   // 5: teleport.workloadidentity.v1.LabelSelector
	(*IssueWorkloadIdentitiesRequest)(nil),  // 6: teleport.workloadidentity.v1.IssueWorkloadIdentitiesRequest
	(*IssueWorkloadIdentitiesResponse)(nil), // 7: teleport.workloadidentity.v1.IssueWorkloadIdentitiesResponse
	(*durationpb.Duration)(nil),             // 8: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),           // 9: google.protobuf.Timestamp
	(*WorkloadAttrs)(nil),                   // 10: teleport.workloadidentity.v1.WorkloadAttrs
}
var file_teleport_workloadidentity_v1_issuance_service_proto_depIdxs = []int32{
	8,  // 0: teleport.workloadidentity.v1.Credential.ttl:type_name -> google.protobuf.Duration
	9,  // 1: teleport.workloadidentity.v1.Credential.expiry:type_name -> google.protobuf.Timestamp
	0,  // 2: teleport.workloadidentity.v1.IssueWorkloadIdentityRequest.x509_svid_params:type_name -> teleport.workloadidentity.v1.X509SVIDParams
	1,  // 3: teleport.workloadidentity.v1.IssueWorkloadIdentityRequest.jwt_svid_params:type_name -> teleport.workloadidentity.v1.JWTSVIDParams
	10, // 4: teleport.workloadidentity.v1.IssueWorkloadIdentityRequest.workload_attrs:type_name -> teleport.workloadidentity.v1.WorkloadAttrs
	8,  // 5: teleport.workloadidentity.v1.IssueWorkloadIdentityRequest.requested_ttl:type_name -> google.protobuf.Duration
	2,  // 6: teleport.workloadidentity.v1.IssueWorkloadIdentityResponse.credential:type_name -> teleport.workloadidentity.v1.Credential
	5,  // 7: teleport.workloadidentity.v1.IssueWorkloadIdentitiesRequest.label_selectors:type_name -> teleport.workloadidentity.v1.LabelSelector
	0,  // 8: teleport.workloadidentity.v1.IssueWorkloadIdentitiesRequest.x509_svid_params:type_name -> teleport.workloadidentity.v1.X509SVIDParams
	1,  // 9: teleport.workloadidentity.v1.IssueWorkloadIdentitiesRequest.jwt_svid_params:type_name -> teleport.workloadidentity.v1.JWTSVIDParams
	10, // 10: teleport.workloadidentity.v1.IssueWorkloadIdentitiesRequest.workload_attrs:type_name -> teleport.workloadidentity.v1.WorkloadAttrs
	8,  // 11: teleport.workloadidentity.v1.IssueWorkloadIdentitiesRequest.requested_ttl:type_name -> google.protobuf.Duration
	2,  // 12: teleport.workloadidentity.v1.IssueWorkloadIdentitiesResponse.credentials:type_name -> teleport.workloadidentity.v1.Credential
	3,  // 13: teleport.workloadidentity.v1.WorkloadIdentityIssuanceService.IssueWorkloadIdentity:input_type -> teleport.workloadidentity.v1.IssueWorkloadIdentityRequest
	6,  // 14: teleport.workloadidentity.v1.WorkloadIdentityIssuanceService.IssueWorkloadIdentities:input_type -> teleport.workloadidentity.v1.IssueWorkloadIdentitiesRequest
	4,  // 15: teleport.workloadidentity.v1.WorkloadIdentityIssuanceService.IssueWorkloadIdentity:output_type -> teleport.workloadidentity.v1.IssueWorkloadIdentityResponse
	7,  // 16: teleport.workloadidentity.v1.WorkloadIdentityIssuanceService.IssueWorkloadIdentities:output_type -> teleport.workloadidentity.v1.IssueWorkloadIdentitiesResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_teleport_workloadidentity_v1_issuance_service_proto_init() }
func file_teleport_workloadidentity_v1_issuance_service_proto_init() {
	if File_teleport_workloadidentity_v1_issuance_service_proto != nil {
		return
	}
	file_teleport_workloadidentity_v1_attrs_proto_init()
	file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[2].OneofWrappers = []any{
		(*Credential_X509Svid)(nil),
		(*Credential_JwtSvid)(nil),
	}
	file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[3].OneofWrappers = []any{
		(*IssueWorkloadIdentityRequest_X509SvidParams)(nil),
		(*IssueWorkloadIdentityRequest_JwtSvidParams)(nil),
	}
	file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes[6].OneofWrappers = []any{
		(*IssueWorkloadIdentitiesRequest_X509SvidParams)(nil),
		(*IssueWorkloadIdentitiesRequest_JwtSvidParams)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_workloadidentity_v1_issuance_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_workloadidentity_v1_issuance_service_proto_goTypes,
		DependencyIndexes: file_teleport_workloadidentity_v1_issuance_service_proto_depIdxs,
		MessageInfos:      file_teleport_workloadidentity_v1_issuance_service_proto_msgTypes,
	}.Build()
	File_teleport_workloadidentity_v1_issuance_service_proto = out.File
	file_teleport_workloadidentity_v1_issuance_service_proto_rawDesc = nil
	file_teleport_workloadidentity_v1_issuance_service_proto_goTypes = nil
	file_teleport_workloadidentity_v1_issuance_service_proto_depIdxs = nil
}
