// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: teleport/trust/v1/trust_service.proto

package trustv1

import (
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for GetCertAuthority
type GetCertAuthorityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of certificate authority.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The domain for the certificate authority.
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Whether the private key should be included in the response.
	IncludeKey    bool `protobuf:"varint,3,opt,name=include_key,json=includeKey,proto3" json:"include_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCertAuthorityRequest) Reset() {
	*x = GetCertAuthorityRequest{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertAuthorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertAuthorityRequest) ProtoMessage() {}

func (x *GetCertAuthorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertAuthorityRequest.ProtoReflect.Descriptor instead.
func (*GetCertAuthorityRequest) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetCertAuthorityRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetCertAuthorityRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetCertAuthorityRequest) GetIncludeKey() bool {
	if x != nil {
		return x.IncludeKey
	}
	return false
}

// Request for GetCertAuthorities
type GetCertAuthoritiesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of certificate authority.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Whether the private key should be included in the response.
	IncludeKey    bool `protobuf:"varint,2,opt,name=include_key,json=includeKey,proto3" json:"include_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCertAuthoritiesRequest) Reset() {
	*x = GetCertAuthoritiesRequest{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertAuthoritiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertAuthoritiesRequest) ProtoMessage() {}

func (x *GetCertAuthoritiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertAuthoritiesRequest.ProtoReflect.Descriptor instead.
func (*GetCertAuthoritiesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetCertAuthoritiesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetCertAuthoritiesRequest) GetIncludeKey() bool {
	if x != nil {
		return x.IncludeKey
	}
	return false
}

// Response for GetCertAuthorities
type GetCertAuthoritiesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The matching certificate authorities.
	CertAuthoritiesV2 []*types.CertAuthorityV2 `protobuf:"bytes,1,rep,name=cert_authorities_v2,json=certAuthoritiesV2,proto3" json:"cert_authorities_v2,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetCertAuthoritiesResponse) Reset() {
	*x = GetCertAuthoritiesResponse{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertAuthoritiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertAuthoritiesResponse) ProtoMessage() {}

func (x *GetCertAuthoritiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertAuthoritiesResponse.ProtoReflect.Descriptor instead.
func (*GetCertAuthoritiesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetCertAuthoritiesResponse) GetCertAuthoritiesV2() []*types.CertAuthorityV2 {
	if x != nil {
		return x.CertAuthoritiesV2
	}
	return nil
}

// Request for DeleteCertAuthority
type DeleteCertAuthorityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of certificate authority.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The domain for the certificate authority.
	Domain        string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCertAuthorityRequest) Reset() {
	*x = DeleteCertAuthorityRequest{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCertAuthorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCertAuthorityRequest) ProtoMessage() {}

func (x *DeleteCertAuthorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCertAuthorityRequest.ProtoReflect.Descriptor instead.
func (*DeleteCertAuthorityRequest) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteCertAuthorityRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteCertAuthorityRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// Request for UpsertCertAuthority
type UpsertCertAuthorityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The certificate authority to create or update.
	CertAuthority *types.CertAuthorityV2 `protobuf:"bytes,1,opt,name=cert_authority,json=certAuthority,proto3" json:"cert_authority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertCertAuthorityRequest) Reset() {
	*x = UpsertCertAuthorityRequest{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertCertAuthorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCertAuthorityRequest) ProtoMessage() {}

func (x *UpsertCertAuthorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCertAuthorityRequest.ProtoReflect.Descriptor instead.
func (*UpsertCertAuthorityRequest) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertCertAuthorityRequest) GetCertAuthority() *types.CertAuthorityV2 {
	if x != nil {
		return x.CertAuthority
	}
	return nil
}

// Request for RotateCertAuthority.
type RotateCertAuthorityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is a certificate authority type, if omitted, both user and host CA
	// will be rotated.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// GracePeriod is used to generate cert rotation schedule that defines
	// times at which different rotation phases will be applied by the auth server
	// in auto mode. It is not used in manual rotation mode.
	// If omitted, default value is set, if 0 is supplied, it is interpreted as
	// forcing rotation of all certificate authorities with no grace period,
	// all existing users and hosts will have to re-login and re-added
	// into the cluster.
	GracePeriod *durationpb.Duration `protobuf:"bytes,2,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	// TargetPhase sets desired rotation phase to move to, if not set
	// will be set automatically, it is a required argument
	// for manual rotation.
	TargetPhase string `protobuf:"bytes,3,opt,name=target_phase,json=targetPhase,proto3" json:"target_phase,omitempty"`
	// Mode sets manual or auto rotation mode.
	Mode string `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Schedule is an optional rotation schedule,
	// autogenerated based on GracePeriod parameter if not set.
	Schedule      *RotationSchedule `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotateCertAuthorityRequest) Reset() {
	*x = RotateCertAuthorityRequest{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateCertAuthorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertAuthorityRequest) ProtoMessage() {}

func (x *RotateCertAuthorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertAuthorityRequest.ProtoReflect.Descriptor instead.
func (*RotateCertAuthorityRequest) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{5}
}

func (x *RotateCertAuthorityRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RotateCertAuthorityRequest) GetGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *RotateCertAuthorityRequest) GetTargetPhase() string {
	if x != nil {
		return x.TargetPhase
	}
	return ""
}

func (x *RotateCertAuthorityRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *RotateCertAuthorityRequest) GetSchedule() *RotationSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// RotationSchedule is a rotation schedule setting time switches for different phases.
type RotationSchedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UpdateClients specifies time to switch to the "Update clients" phase
	UpdateClients *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=update_clients,json=updateClients,proto3" json:"update_clients,omitempty"`
	// UpdateServers specifies time to switch to the "Update servers" phase.
	UpdateServers *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_servers,json=updateServers,proto3" json:"update_servers,omitempty"`
	// Standby specifies time to switch to the "Standby" phase.
	Standby       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=standby,proto3" json:"standby,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotationSchedule) Reset() {
	*x = RotationSchedule{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotationSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotationSchedule) ProtoMessage() {}

func (x *RotationSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotationSchedule.ProtoReflect.Descriptor instead.
func (*RotationSchedule) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{6}
}

func (x *RotationSchedule) GetUpdateClients() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateClients
	}
	return nil
}

func (x *RotationSchedule) GetUpdateServers() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateServers
	}
	return nil
}

func (x *RotationSchedule) GetStandby() *timestamppb.Timestamp {
	if x != nil {
		return x.Standby
	}
	return nil
}

// Response for RotateCertAuthority.
type RotateCertAuthorityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotateCertAuthorityResponse) Reset() {
	*x = RotateCertAuthorityResponse{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateCertAuthorityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertAuthorityResponse) ProtoMessage() {}

func (x *RotateCertAuthorityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertAuthorityResponse.ProtoReflect.Descriptor instead.
func (*RotateCertAuthorityResponse) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{7}
}

// Request for RotateExternalCertAuthority.
type RotateExternalCertAuthorityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The certificate authority to rotate.
	CertAuthority *types.CertAuthorityV2 `protobuf:"bytes,1,opt,name=cert_authority,json=certAuthority,proto3" json:"cert_authority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotateExternalCertAuthorityRequest) Reset() {
	*x = RotateExternalCertAuthorityRequest{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateExternalCertAuthorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateExternalCertAuthorityRequest) ProtoMessage() {}

func (x *RotateExternalCertAuthorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateExternalCertAuthorityRequest.ProtoReflect.Descriptor instead.
func (*RotateExternalCertAuthorityRequest) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{8}
}

func (x *RotateExternalCertAuthorityRequest) GetCertAuthority() *types.CertAuthorityV2 {
	if x != nil {
		return x.CertAuthority
	}
	return nil
}

// Response for RotateExternalCertAuthority.
type RotateExternalCertAuthorityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotateExternalCertAuthorityResponse) Reset() {
	*x = RotateExternalCertAuthorityResponse{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateExternalCertAuthorityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateExternalCertAuthorityResponse) ProtoMessage() {}

func (x *RotateExternalCertAuthorityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateExternalCertAuthorityResponse.ProtoReflect.Descriptor instead.
func (*RotateExternalCertAuthorityResponse) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{9}
}

// GenerateHostCertRequest is the request for GenerateHostCert.
type GenerateHostCertRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key is the SSH public key that the certificate should include.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// host_id is the ID of the host the certificate should include.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// node_name is the name of the node the certificate should include.
	NodeName string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// principals is a list of principals that the certificate should include.
	Principals []string `protobuf:"bytes,4,rep,name=principals,proto3" json:"principals,omitempty"`
	// cluster_name is a list of principals that the certificate should include.
	ClusterName string `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// role is a system role assigned to the host that will be included on the certificate.
	Role string `protobuf:"bytes,6,opt,name=role,proto3" json:"role,omitempty"`
	// ttl is the duration the certificate will be valid for. This may be zero for indefinite.
	Ttl           *durationpb.Duration `protobuf:"bytes,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateHostCertRequest) Reset() {
	*x = GenerateHostCertRequest{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateHostCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateHostCertRequest) ProtoMessage() {}

func (x *GenerateHostCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateHostCertRequest.ProtoReflect.Descriptor instead.
func (*GenerateHostCertRequest) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateHostCertRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GenerateHostCertRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *GenerateHostCertRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *GenerateHostCertRequest) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *GenerateHostCertRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GenerateHostCertRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *GenerateHostCertRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

// GenerateHostCertResponse is the response for GenerateHostCert.
type GenerateHostCertResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ssh_certificate is the encoded bytes of the SSH certificate generated by the RPC.
	SshCertificate []byte `protobuf:"bytes,1,opt,name=ssh_certificate,json=sshCertificate,proto3" json:"ssh_certificate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerateHostCertResponse) Reset() {
	*x = GenerateHostCertResponse{}
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateHostCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateHostCertResponse) ProtoMessage() {}

func (x *GenerateHostCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_trust_v1_trust_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateHostCertResponse.ProtoReflect.Descriptor instead.
func (*GenerateHostCertResponse) Descriptor() ([]byte, []int) {
	return file_teleport_trust_v1_trust_service_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateHostCertResponse) GetSshCertificate() []byte {
	if x != nil {
		return x.SshCertificate
	}
	return nil
}

var File_teleport_trust_v1_trust_service_proto protoreflect.FileDescriptor

const file_teleport_trust_v1_trust_service_proto_rawDesc = "" +
	"\n" +
	"%teleport/trust/v1/trust_service.proto\x12\x11teleport.trust.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!teleport/legacy/types/types.proto\"f\n" +
	"\x17GetCertAuthorityRequest\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x16\n" +
	"\x06domain\x18\x02 \x01(\tR\x06domain\x12\x1f\n" +
	"\vinclude_key\x18\x03 \x01(\bR\n" +
	"includeKey\"P\n" +
	"\x19GetCertAuthoritiesRequest\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x1f\n" +
	"\vinclude_key\x18\x02 \x01(\bR\n" +
	"includeKey\"d\n" +
	"\x1aGetCertAuthoritiesResponse\x12F\n" +
	"\x13cert_authorities_v2\x18\x01 \x03(\v2\x16.types.CertAuthorityV2R\x11certAuthoritiesV2\"H\n" +
	"\x1aDeleteCertAuthorityRequest\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x16\n" +
	"\x06domain\x18\x02 \x01(\tR\x06domain\"[\n" +
	"\x1aUpsertCertAuthorityRequest\x12=\n" +
	"\x0ecert_authority\x18\x01 \x01(\v2\x16.types.CertAuthorityV2R\rcertAuthority\"\xe6\x01\n" +
	"\x1aRotateCertAuthorityRequest\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12<\n" +
	"\fgrace_period\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\vgracePeriod\x12!\n" +
	"\ftarget_phase\x18\x03 \x01(\tR\vtargetPhase\x12\x12\n" +
	"\x04mode\x18\x04 \x01(\tR\x04mode\x12?\n" +
	"\bschedule\x18\x05 \x01(\v2#.teleport.trust.v1.RotationScheduleR\bschedule\"\xce\x01\n" +
	"\x10RotationSchedule\x12A\n" +
	"\x0eupdate_clients\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\rupdateClients\x12A\n" +
	"\x0eupdate_servers\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\rupdateServers\x124\n" +
	"\astandby\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\astandby\"\x1d\n" +
	"\x1bRotateCertAuthorityResponse\"c\n" +
	"\"RotateExternalCertAuthorityRequest\x12=\n" +
	"\x0ecert_authority\x18\x01 \x01(\v2\x16.types.CertAuthorityV2R\rcertAuthority\"%\n" +
	"#RotateExternalCertAuthorityResponse\"\xe5\x01\n" +
	"\x17GenerateHostCertRequest\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x17\n" +
	"\ahost_id\x18\x02 \x01(\tR\x06hostId\x12\x1b\n" +
	"\tnode_name\x18\x03 \x01(\tR\bnodeName\x12\x1e\n" +
	"\n" +
	"principals\x18\x04 \x03(\tR\n" +
	"principals\x12!\n" +
	"\fcluster_name\x18\x05 \x01(\tR\vclusterName\x12\x12\n" +
	"\x04role\x18\x06 \x01(\tR\x04role\x12+\n" +
	"\x03ttl\x18\a \x01(\v2\x19.google.protobuf.DurationR\x03ttl\"C\n" +
	"\x18GenerateHostCertResponse\x12'\n" +
	"\x0fssh_certificate\x18\x01 \x01(\fR\x0esshCertificate2\x87\x06\n" +
	"\fTrustService\x12V\n" +
	"\x10GetCertAuthority\x12*.teleport.trust.v1.GetCertAuthorityRequest\x1a\x16.types.CertAuthorityV2\x12q\n" +
	"\x12GetCertAuthorities\x12,.teleport.trust.v1.GetCertAuthoritiesRequest\x1a-.teleport.trust.v1.GetCertAuthoritiesResponse\x12\\\n" +
	"\x13DeleteCertAuthority\x12-.teleport.trust.v1.DeleteCertAuthorityRequest\x1a\x16.google.protobuf.Empty\x12\\\n" +
	"\x13UpsertCertAuthority\x12-.teleport.trust.v1.UpsertCertAuthorityRequest\x1a\x16.types.CertAuthorityV2\x12t\n" +
	"\x13RotateCertAuthority\x12-.teleport.trust.v1.RotateCertAuthorityRequest\x1a..teleport.trust.v1.RotateCertAuthorityResponse\x12\x8c\x01\n" +
	"\x1bRotateExternalCertAuthority\x125.teleport.trust.v1.RotateExternalCertAuthorityRequest\x1a6.teleport.trust.v1.RotateExternalCertAuthorityResponse\x12k\n" +
	"\x10GenerateHostCert\x12*.teleport.trust.v1.GenerateHostCertRequest\x1a+.teleport.trust.v1.GenerateHostCertResponseBNZLgithub.com/gravitational/teleport/api/gen/proto/go/teleport/trust/v1;trustv1b\x06proto3"

var (
	file_teleport_trust_v1_trust_service_proto_rawDescOnce sync.Once
	file_teleport_trust_v1_trust_service_proto_rawDescData []byte
)

func file_teleport_trust_v1_trust_service_proto_rawDescGZIP() []byte {
	file_teleport_trust_v1_trust_service_proto_rawDescOnce.Do(func() {
		file_teleport_trust_v1_trust_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_trust_v1_trust_service_proto_rawDesc), len(file_teleport_trust_v1_trust_service_proto_rawDesc)))
	})
	return file_teleport_trust_v1_trust_service_proto_rawDescData
}

var file_teleport_trust_v1_trust_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_teleport_trust_v1_trust_service_proto_goTypes = []any{
	(*GetCertAuthorityRequest)(nil),             // 0: teleport.trust.v1.GetCertAuthorityRequest
	(*GetCertAuthoritiesRequest)(nil),           // 1: teleport.trust.v1.GetCertAuthoritiesRequest
	(*GetCertAuthoritiesResponse)(nil),          // 2: teleport.trust.v1.GetCertAuthoritiesResponse
	(*DeleteCertAuthorityRequest)(nil),          // 3: teleport.trust.v1.DeleteCertAuthorityRequest
	(*UpsertCertAuthorityRequest)(nil),          // 4: teleport.trust.v1.UpsertCertAuthorityRequest
	(*RotateCertAuthorityRequest)(nil),          // 5: teleport.trust.v1.RotateCertAuthorityRequest
	(*RotationSchedule)(nil),                    // 6: teleport.trust.v1.RotationSchedule
	(*RotateCertAuthorityResponse)(nil),         // 7: teleport.trust.v1.RotateCertAuthorityResponse
	(*RotateExternalCertAuthorityRequest)(nil),  // 8: teleport.trust.v1.RotateExternalCertAuthorityRequest
	(*RotateExternalCertAuthorityResponse)(nil), // 9: teleport.trust.v1.RotateExternalCertAuthorityResponse
	(*GenerateHostCertRequest)(nil),             // 10: teleport.trust.v1.GenerateHostCertRequest
	(*GenerateHostCertResponse)(nil),            // 11: teleport.trust.v1.GenerateHostCertResponse
	(*types.CertAuthorityV2)(nil),               // 12: types.CertAuthorityV2
	(*durationpb.Duration)(nil),                 // 13: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),               // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                       // 15: google.protobuf.Empty
}
var file_teleport_trust_v1_trust_service_proto_depIdxs = []int32{
	12, // 0: teleport.trust.v1.GetCertAuthoritiesResponse.cert_authorities_v2:type_name -> types.CertAuthorityV2
	12, // 1: teleport.trust.v1.UpsertCertAuthorityRequest.cert_authority:type_name -> types.CertAuthorityV2
	13, // 2: teleport.trust.v1.RotateCertAuthorityRequest.grace_period:type_name -> google.protobuf.Duration
	6,  // 3: teleport.trust.v1.RotateCertAuthorityRequest.schedule:type_name -> teleport.trust.v1.RotationSchedule
	14, // 4: teleport.trust.v1.RotationSchedule.update_clients:type_name -> google.protobuf.Timestamp
	14, // 5: teleport.trust.v1.RotationSchedule.update_servers:type_name -> google.protobuf.Timestamp
	14, // 6: teleport.trust.v1.RotationSchedule.standby:type_name -> google.protobuf.Timestamp
	12, // 7: teleport.trust.v1.RotateExternalCertAuthorityRequest.cert_authority:type_name -> types.CertAuthorityV2
	13, // 8: teleport.trust.v1.GenerateHostCertRequest.ttl:type_name -> google.protobuf.Duration
	0,  // 9: teleport.trust.v1.TrustService.GetCertAuthority:input_type -> teleport.trust.v1.GetCertAuthorityRequest
	1,  // 10: teleport.trust.v1.TrustService.GetCertAuthorities:input_type -> teleport.trust.v1.GetCertAuthoritiesRequest
	3,  // 11: teleport.trust.v1.TrustService.DeleteCertAuthority:input_type -> teleport.trust.v1.DeleteCertAuthorityRequest
	4,  // 12: teleport.trust.v1.TrustService.UpsertCertAuthority:input_type -> teleport.trust.v1.UpsertCertAuthorityRequest
	5,  // 13: teleport.trust.v1.TrustService.RotateCertAuthority:input_type -> teleport.trust.v1.RotateCertAuthorityRequest
	8,  // 14: teleport.trust.v1.TrustService.RotateExternalCertAuthority:input_type -> teleport.trust.v1.RotateExternalCertAuthorityRequest
	10, // 15: teleport.trust.v1.TrustService.GenerateHostCert:input_type -> teleport.trust.v1.GenerateHostCertRequest
	12, // 16: teleport.trust.v1.TrustService.GetCertAuthority:output_type -> types.CertAuthorityV2
	2,  // 17: teleport.trust.v1.TrustService.GetCertAuthorities:output_type -> teleport.trust.v1.GetCertAuthoritiesResponse
	15, // 18: teleport.trust.v1.TrustService.DeleteCertAuthority:output_type -> google.protobuf.Empty
	12, // 19: teleport.trust.v1.TrustService.UpsertCertAuthority:output_type -> types.CertAuthorityV2
	7,  // 20: teleport.trust.v1.TrustService.RotateCertAuthority:output_type -> teleport.trust.v1.RotateCertAuthorityResponse
	9,  // 21: teleport.trust.v1.TrustService.RotateExternalCertAuthority:output_type -> teleport.trust.v1.RotateExternalCertAuthorityResponse
	11, // 22: teleport.trust.v1.TrustService.GenerateHostCert:output_type -> teleport.trust.v1.GenerateHostCertResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_teleport_trust_v1_trust_service_proto_init() }
func file_teleport_trust_v1_trust_service_proto_init() {
	if File_teleport_trust_v1_trust_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_trust_v1_trust_service_proto_rawDesc), len(file_teleport_trust_v1_trust_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_trust_v1_trust_service_proto_goTypes,
		DependencyIndexes: file_teleport_trust_v1_trust_service_proto_depIdxs,
		MessageInfos:      file_teleport_trust_v1_trust_service_proto_msgTypes,
	}.Build()
	File_teleport_trust_v1_trust_service_proto = out.File
	file_teleport_trust_v1_trust_service_proto_goTypes = nil
	file_teleport_trust_v1_trust_service_proto_depIdxs = nil
}
