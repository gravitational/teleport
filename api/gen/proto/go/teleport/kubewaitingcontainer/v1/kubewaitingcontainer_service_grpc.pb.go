// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/kubewaitingcontainer/v1/kubewaitingcontainer_service.proto

package kubewaitingcontainerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeWaitingContainersService_ListKubernetesWaitingContainers_FullMethodName  = "/teleport.kubewaitingcontainer.v1.KubeWaitingContainersService/ListKubernetesWaitingContainers"
	KubeWaitingContainersService_GetKubernetesWaitingContainer_FullMethodName    = "/teleport.kubewaitingcontainer.v1.KubeWaitingContainersService/GetKubernetesWaitingContainer"
	KubeWaitingContainersService_CreateKubernetesWaitingContainer_FullMethodName = "/teleport.kubewaitingcontainer.v1.KubeWaitingContainersService/CreateKubernetesWaitingContainer"
	KubeWaitingContainersService_DeleteKubernetesWaitingContainer_FullMethodName = "/teleport.kubewaitingcontainer.v1.KubeWaitingContainersService/DeleteKubernetesWaitingContainer"
)

// KubeWaitingContainersServiceClient is the client API for KubeWaitingContainersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeWaitingContainersServiceClient interface {
	// ListKubernetesWaitingContainers returns a Kubernetes ephemeral
	// container that is waiting to be created.
	ListKubernetesWaitingContainers(ctx context.Context, in *ListKubernetesWaitingContainersRequest, opts ...grpc.CallOption) (*ListKubernetesWaitingContainersResponse, error)
	// GetKubernetesWaitingContainer returns a Kubernetes ephemeral
	// container that is waiting to be created.
	GetKubernetesWaitingContainer(ctx context.Context, in *GetKubernetesWaitingContainerRequest, opts ...grpc.CallOption) (*KubernetesWaitingContainer, error)
	// CreateKubernetesWaitingContainer creates a Kubernetes ephemeral
	// container that is waiting to be created.
	CreateKubernetesWaitingContainer(ctx context.Context, in *CreateKubernetesWaitingContainerRequest, opts ...grpc.CallOption) (*KubernetesWaitingContainer, error)
	// DeleteKubernetesWaitingContainer deletes a Kubernetes ephemeral
	// container that is waiting to be created.
	DeleteKubernetesWaitingContainer(ctx context.Context, in *DeleteKubernetesWaitingContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type kubeWaitingContainersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeWaitingContainersServiceClient(cc grpc.ClientConnInterface) KubeWaitingContainersServiceClient {
	return &kubeWaitingContainersServiceClient{cc}
}

func (c *kubeWaitingContainersServiceClient) ListKubernetesWaitingContainers(ctx context.Context, in *ListKubernetesWaitingContainersRequest, opts ...grpc.CallOption) (*ListKubernetesWaitingContainersResponse, error) {
	out := new(ListKubernetesWaitingContainersResponse)
	err := c.cc.Invoke(ctx, KubeWaitingContainersService_ListKubernetesWaitingContainers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeWaitingContainersServiceClient) GetKubernetesWaitingContainer(ctx context.Context, in *GetKubernetesWaitingContainerRequest, opts ...grpc.CallOption) (*KubernetesWaitingContainer, error) {
	out := new(KubernetesWaitingContainer)
	err := c.cc.Invoke(ctx, KubeWaitingContainersService_GetKubernetesWaitingContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeWaitingContainersServiceClient) CreateKubernetesWaitingContainer(ctx context.Context, in *CreateKubernetesWaitingContainerRequest, opts ...grpc.CallOption) (*KubernetesWaitingContainer, error) {
	out := new(KubernetesWaitingContainer)
	err := c.cc.Invoke(ctx, KubeWaitingContainersService_CreateKubernetesWaitingContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeWaitingContainersServiceClient) DeleteKubernetesWaitingContainer(ctx context.Context, in *DeleteKubernetesWaitingContainerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KubeWaitingContainersService_DeleteKubernetesWaitingContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeWaitingContainersServiceServer is the server API for KubeWaitingContainersService service.
// All implementations must embed UnimplementedKubeWaitingContainersServiceServer
// for forward compatibility
type KubeWaitingContainersServiceServer interface {
	// ListKubernetesWaitingContainers returns a Kubernetes ephemeral
	// container that is waiting to be created.
	ListKubernetesWaitingContainers(context.Context, *ListKubernetesWaitingContainersRequest) (*ListKubernetesWaitingContainersResponse, error)
	// GetKubernetesWaitingContainer returns a Kubernetes ephemeral
	// container that is waiting to be created.
	GetKubernetesWaitingContainer(context.Context, *GetKubernetesWaitingContainerRequest) (*KubernetesWaitingContainer, error)
	// CreateKubernetesWaitingContainer creates a Kubernetes ephemeral
	// container that is waiting to be created.
	CreateKubernetesWaitingContainer(context.Context, *CreateKubernetesWaitingContainerRequest) (*KubernetesWaitingContainer, error)
	// DeleteKubernetesWaitingContainer deletes a Kubernetes ephemeral
	// container that is waiting to be created.
	DeleteKubernetesWaitingContainer(context.Context, *DeleteKubernetesWaitingContainerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedKubeWaitingContainersServiceServer()
}

// UnimplementedKubeWaitingContainersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKubeWaitingContainersServiceServer struct {
}

func (UnimplementedKubeWaitingContainersServiceServer) ListKubernetesWaitingContainers(context.Context, *ListKubernetesWaitingContainersRequest) (*ListKubernetesWaitingContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKubernetesWaitingContainers not implemented")
}
func (UnimplementedKubeWaitingContainersServiceServer) GetKubernetesWaitingContainer(context.Context, *GetKubernetesWaitingContainerRequest) (*KubernetesWaitingContainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesWaitingContainer not implemented")
}
func (UnimplementedKubeWaitingContainersServiceServer) CreateKubernetesWaitingContainer(context.Context, *CreateKubernetesWaitingContainerRequest) (*KubernetesWaitingContainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesWaitingContainer not implemented")
}
func (UnimplementedKubeWaitingContainersServiceServer) DeleteKubernetesWaitingContainer(context.Context, *DeleteKubernetesWaitingContainerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesWaitingContainer not implemented")
}
func (UnimplementedKubeWaitingContainersServiceServer) mustEmbedUnimplementedKubeWaitingContainersServiceServer() {
}

// UnsafeKubeWaitingContainersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeWaitingContainersServiceServer will
// result in compilation errors.
type UnsafeKubeWaitingContainersServiceServer interface {
	mustEmbedUnimplementedKubeWaitingContainersServiceServer()
}

func RegisterKubeWaitingContainersServiceServer(s grpc.ServiceRegistrar, srv KubeWaitingContainersServiceServer) {
	s.RegisterService(&KubeWaitingContainersService_ServiceDesc, srv)
}

func _KubeWaitingContainersService_ListKubernetesWaitingContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubernetesWaitingContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeWaitingContainersServiceServer).ListKubernetesWaitingContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeWaitingContainersService_ListKubernetesWaitingContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeWaitingContainersServiceServer).ListKubernetesWaitingContainers(ctx, req.(*ListKubernetesWaitingContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeWaitingContainersService_GetKubernetesWaitingContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubernetesWaitingContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeWaitingContainersServiceServer).GetKubernetesWaitingContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeWaitingContainersService_GetKubernetesWaitingContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeWaitingContainersServiceServer).GetKubernetesWaitingContainer(ctx, req.(*GetKubernetesWaitingContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeWaitingContainersService_CreateKubernetesWaitingContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKubernetesWaitingContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeWaitingContainersServiceServer).CreateKubernetesWaitingContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeWaitingContainersService_CreateKubernetesWaitingContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeWaitingContainersServiceServer).CreateKubernetesWaitingContainer(ctx, req.(*CreateKubernetesWaitingContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeWaitingContainersService_DeleteKubernetesWaitingContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubernetesWaitingContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeWaitingContainersServiceServer).DeleteKubernetesWaitingContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeWaitingContainersService_DeleteKubernetesWaitingContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeWaitingContainersServiceServer).DeleteKubernetesWaitingContainer(ctx, req.(*DeleteKubernetesWaitingContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeWaitingContainersService_ServiceDesc is the grpc.ServiceDesc for KubeWaitingContainersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeWaitingContainersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.kubewaitingcontainer.v1.KubeWaitingContainersService",
	HandlerType: (*KubeWaitingContainersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKubernetesWaitingContainers",
			Handler:    _KubeWaitingContainersService_ListKubernetesWaitingContainers_Handler,
		},
		{
			MethodName: "GetKubernetesWaitingContainer",
			Handler:    _KubeWaitingContainersService_GetKubernetesWaitingContainer_Handler,
		},
		{
			MethodName: "CreateKubernetesWaitingContainer",
			Handler:    _KubeWaitingContainersService_CreateKubernetesWaitingContainer_Handler,
		},
		{
			MethodName: "DeleteKubernetesWaitingContainer",
			Handler:    _KubeWaitingContainersService_DeleteKubernetesWaitingContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/kubewaitingcontainer/v1/kubewaitingcontainer_service.proto",
}
