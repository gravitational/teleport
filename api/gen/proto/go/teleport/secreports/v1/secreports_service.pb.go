// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: teleport/secreports/v1/secreports_service.proto

package secreportsv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// name is a name of the security report.
type ReportSate_State int32

const (
	// STATE_UNSPECIFIED is an unspecified state.
	ReportSate_STATE_UNSPECIFIED ReportSate_State = 0
	// STATE_ERROR is an error state.
	ReportSate_STATE_ERROR ReportSate_State = 1
	// STATE_SUCCESS is a success state.
	ReportSate_STATE_SUCCESS ReportSate_State = 2
	// STATE_RUNNING is a running state.
	ReportSate_STATE_RUNNING ReportSate_State = 3
)

// Enum value maps for ReportSate_State.
var (
	ReportSate_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ERROR",
		2: "STATE_SUCCESS",
		3: "STATE_RUNNING",
	}
	ReportSate_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ERROR":       1,
		"STATE_SUCCESS":     2,
		"STATE_RUNNING":     3,
	}
)

func (x ReportSate_State) Enum() *ReportSate_State {
	p := new(ReportSate_State)
	*p = x
	return p
}

func (x ReportSate_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportSate_State) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_secreports_v1_secreports_service_proto_enumTypes[0].Descriptor()
}

func (ReportSate_State) Type() protoreflect.EnumType {
	return &file_teleport_secreports_v1_secreports_service_proto_enumTypes[0]
}

func (x ReportSate_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportSate_State.Descriptor instead.
func (ReportSate_State) EnumDescriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{24, 0}
}

// GetAuditQueryResultRequest is a request for GetAuditQueryResult.
type GetAuditQueryResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result_id is a unique id of the result.
	ResultId string `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// next_token is a token for pagination.
	NextToken string `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	// max_results is a maximum number of results to return.
	MaxResults int32 `protobuf:"varint,3,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
}

func (x *GetAuditQueryResultRequest) Reset() {
	*x = GetAuditQueryResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditQueryResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditQueryResultRequest) ProtoMessage() {}

func (x *GetAuditQueryResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditQueryResultRequest.ProtoReflect.Descriptor instead.
func (*GetAuditQueryResultRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAuditQueryResultRequest) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *GetAuditQueryResultRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *GetAuditQueryResultRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

// QueryResultColumnInfo is a column info.
type QueryResultColumnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is type of the column.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QueryResultColumnInfo) Reset() {
	*x = QueryResultColumnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultColumnInfo) ProtoMessage() {}

func (x *QueryResultColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultColumnInfo.ProtoReflect.Descriptor instead.
func (*QueryResultColumnInfo) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{1}
}

func (x *QueryResultColumnInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryResultColumnInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// QueryRowResult is a row result.
type QueryRowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data is a list of values.
	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryRowResult) Reset() {
	*x = QueryRowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRowResult) ProtoMessage() {}

func (x *QueryRowResult) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRowResult.ProtoReflect.Descriptor instead.
func (*QueryRowResult) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRowResult) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// QueryResultSet is a result set.
type QueryResultSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// column_info contains information about columns.
	ColumnInfo []*QueryResultColumnInfo `protobuf:"bytes,1,rep,name=column_info,json=columnInfo,proto3" json:"column_info,omitempty"`
	// rows  is a list of rows containing values.
	Rows []*QueryRowResult `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *QueryResultSet) Reset() {
	*x = QueryResultSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultSet) ProtoMessage() {}

func (x *QueryResultSet) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultSet.ProtoReflect.Descriptor instead.
func (*QueryResultSet) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{3}
}

func (x *QueryResultSet) GetColumnInfo() []*QueryResultColumnInfo {
	if x != nil {
		return x.ColumnInfo
	}
	return nil
}

func (x *QueryResultSet) GetRows() []*QueryRowResult {
	if x != nil {
		return x.Rows
	}
	return nil
}

// GetAuditQueryResultResponse contains an audit query result.
type GetAuditQueryResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is a result set.
	Result *QueryResultSet `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// next_token is a token for pagination.
	NextToken string `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	// result_id is a unique id of the result.
	ResultId string `protobuf:"bytes,3,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *GetAuditQueryResultResponse) Reset() {
	*x = GetAuditQueryResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditQueryResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditQueryResultResponse) ProtoMessage() {}

func (x *GetAuditQueryResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditQueryResultResponse.ProtoReflect.Descriptor instead.
func (*GetAuditQueryResultResponse) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetAuditQueryResultResponse) GetResult() *QueryResultSet {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetAuditQueryResultResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *GetAuditQueryResultResponse) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

// RunReportRequest is a request for RunReport.
type RunReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is a name of the security report.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// days is a time range is days.
	Days uint32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *RunReportRequest) Reset() {
	*x = RunReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunReportRequest) ProtoMessage() {}

func (x *RunReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunReportRequest.ProtoReflect.Descriptor instead.
func (*RunReportRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{5}
}

func (x *RunReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunReportRequest) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

// GetStateRequest is a request for GetReportState.
type GetReportStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is a name of the security report.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// days is a time range is days.
	Days uint32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *GetReportStateRequest) Reset() {
	*x = GetReportStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportStateRequest) ProtoMessage() {}

func (x *GetReportStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportStateRequest.ProtoReflect.Descriptor instead.
func (*GetReportStateRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetReportStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReportStateRequest) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

// DeleteAuditQueryRequest is audit query delete request.
type DeleteAuditQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the audit query to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAuditQueryRequest) Reset() {
	*x = DeleteAuditQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuditQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuditQueryRequest) ProtoMessage() {}

func (x *DeleteAuditQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuditQueryRequest.ProtoReflect.Descriptor instead.
func (*DeleteAuditQueryRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteAuditQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteReportRequest is security report delete request.
type DeleteReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the security report to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteReportRequest) Reset() {
	*x = DeleteReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportRequest) ProtoMessage() {}

func (x *DeleteReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RunAuditQueryRequest is audit query run request.
type RunAuditQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the audit query to run.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// days is a time range is days.
	Days int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *RunAuditQueryRequest) Reset() {
	*x = RunAuditQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAuditQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAuditQueryRequest) ProtoMessage() {}

func (x *RunAuditQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAuditQueryRequest.ProtoReflect.Descriptor instead.
func (*RunAuditQueryRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{9}
}

func (x *RunAuditQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RunAuditQueryRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

// UpsertAuditQueryRequest is audit query upsert request.
type UpsertAuditQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// audit_query is the audit query to upsert.
	AuditQuery *AuditQuery `protobuf:"bytes,1,opt,name=audit_query,json=auditQuery,proto3" json:"audit_query,omitempty"`
}

func (x *UpsertAuditQueryRequest) Reset() {
	*x = UpsertAuditQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAuditQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAuditQueryRequest) ProtoMessage() {}

func (x *UpsertAuditQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAuditQueryRequest.ProtoReflect.Descriptor instead.
func (*UpsertAuditQueryRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpsertAuditQueryRequest) GetAuditQuery() *AuditQuery {
	if x != nil {
		return x.AuditQuery
	}
	return nil
}

// UpsertReportRequest is security report upsert request.
type UpsertReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// report is the security report to upsert.
	Report *Report `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *UpsertReportRequest) Reset() {
	*x = UpsertReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertReportRequest) ProtoMessage() {}

func (x *UpsertReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertReportRequest.ProtoReflect.Descriptor instead.
func (*UpsertReportRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpsertReportRequest) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

// GetAuditQueryRequest is audit query get request.
type GetAuditQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the audit query to get.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAuditQueryRequest) Reset() {
	*x = GetAuditQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditQueryRequest) ProtoMessage() {}

func (x *GetAuditQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditQueryRequest.ProtoReflect.Descriptor instead.
func (*GetAuditQueryRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetAuditQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetReportRequest is security report get request.
type GetReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the security report to get.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetReportRequest) Reset() {
	*x = GetReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportRequest) ProtoMessage() {}

func (x *GetReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportRequest.ProtoReflect.Descriptor instead.
func (*GetReportRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetReportResultRequest is report get request.
type GetReportResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the security report to get.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// days is a time range is days.
	Days uint32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
	// execution_id is a unique id of the execution.
	ExecutionId string `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *GetReportResultRequest) Reset() {
	*x = GetReportResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportResultRequest) ProtoMessage() {}

func (x *GetReportResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportResultRequest.ProtoReflect.Descriptor instead.
func (*GetReportResultRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetReportResultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReportResultRequest) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *GetReportResultRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

// ListAuditQueriesRequest is audit query list request.
type ListAuditQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size is the number of results to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is the next_token value returned from a previous List request if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAuditQueriesRequest) Reset() {
	*x = ListAuditQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditQueriesRequest) ProtoMessage() {}

func (x *ListAuditQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListAuditQueriesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListAuditQueriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAuditQueriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListAuditQueryResponse is audit query list response.
type ListReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size is the number of results to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token is the next_token value returned from a previous List request if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListReportsRequest) Reset() {
	*x = ListReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportsRequest) ProtoMessage() {}

func (x *ListReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportsRequest.ProtoReflect.Descriptor instead.
func (*ListReportsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListReportsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReportsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListAuditQueriesResponse is audit query list response.
type ListAuditQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// queries is a list of audit queries.
	Queries []*AuditQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// next_page_token is the next page token. If there are no more results, it will be empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAuditQueriesResponse) Reset() {
	*x = ListAuditQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditQueriesResponse) ProtoMessage() {}

func (x *ListAuditQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListAuditQueriesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListAuditQueriesResponse) GetQueries() []*AuditQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ListAuditQueriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetSchemaRequest is a request for GetSchema.
type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{18}
}

// GetSchemaResponse is a response for GetSchema.
type GetSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// views is the list of views.
	Views []*GetSchemaResponse_ViewDesc `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetSchemaResponse) GetViews() []*GetSchemaResponse_ViewDesc {
	if x != nil {
		return x.Views
	}
	return nil
}

// RunAuditQueryResponse is audit query run response.
type RunAuditQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result_id is a unique id of the result.
	ResultId string `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *RunAuditQueryResponse) Reset() {
	*x = RunAuditQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAuditQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAuditQueryResponse) ProtoMessage() {}

func (x *RunAuditQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAuditQueryResponse.ProtoReflect.Descriptor instead.
func (*RunAuditQueryResponse) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{20}
}

func (x *RunAuditQueryResponse) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

// ListReportResponse is security report list response.
type ListReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reports is a list of security reports.
	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	// next_page_token is the next page token. If there are no more results, it will be empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListReportsResponse) Reset() {
	*x = ListReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportsResponse) ProtoMessage() {}

func (x *ListReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportsResponse.ProtoReflect.Descriptor instead.
func (*ListReportsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListReportsResponse) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ListReportsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetReportResultResponse is report result get response.
type GetReportResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is a report execution result.
	Result *ReportResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetReportResultResponse) Reset() {
	*x = GetReportResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportResultResponse) ProtoMessage() {}

func (x *GetReportResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportResultResponse.ProtoReflect.Descriptor instead.
func (*GetReportResultResponse) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetReportResultResponse) GetResult() *ReportResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// Report is the result of security report.
type ReportResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is a name of the security report.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description is a description of the security report.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// audit_query_results is a list of audit query results.
	AuditQueryResults []*ReportResult_AuditQueryResult `protobuf:"bytes,3,rep,name=audit_query_results,json=auditQueryResults,proto3" json:"audit_query_results,omitempty"`
	// updated_at is a time when the security report was updated.
	UpdatedAt string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// total_execution_time_in_millis is a time in milliseconds when the security report was executed.
	TotalExecutionTimeInMillis int64 `protobuf:"varint,5,opt,name=total_execution_time_in_millis,json=totalExecutionTimeInMillis,proto3" json:"total_execution_time_in_millis,omitempty"`
	// total_data_scanned_in_bytes is a number of bytes scanned.
	TotalDataScannedInBytes int64 `protobuf:"varint,6,opt,name=total_data_scanned_in_bytes,json=totalDataScannedInBytes,proto3" json:"total_data_scanned_in_bytes,omitempty"`
}

func (x *ReportResult) Reset() {
	*x = ReportResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResult) ProtoMessage() {}

func (x *ReportResult) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResult.ProtoReflect.Descriptor instead.
func (*ReportResult) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{23}
}

func (x *ReportResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReportResult) GetAuditQueryResults() []*ReportResult_AuditQueryResult {
	if x != nil {
		return x.AuditQueryResults
	}
	return nil
}

func (x *ReportResult) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ReportResult) GetTotalExecutionTimeInMillis() int64 {
	if x != nil {
		return x.TotalExecutionTimeInMillis
	}
	return 0
}

func (x *ReportResult) GetTotalDataScannedInBytes() int64 {
	if x != nil {
		return x.TotalDataScannedInBytes
	}
	return 0
}

// Report is a security report.
type ReportSate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header is a resource header.
	Header *v1.ResourceHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// state is a state of the security report.
	State ReportSate_State `protobuf:"varint,2,opt,name=state,proto3,enum=teleport.secreports.v1.ReportSate_State" json:"state,omitempty"`
	// updated_at is a time when the security report state was updated.
	UpdatedAt string `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ReportSate) Reset() {
	*x = ReportSate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSate) ProtoMessage() {}

func (x *ReportSate) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSate.ProtoReflect.Descriptor instead.
func (*ReportSate) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{24}
}

func (x *ReportSate) GetHeader() *v1.ResourceHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReportSate) GetState() ReportSate_State {
	if x != nil {
		return x.State
	}
	return ReportSate_STATE_UNSPECIFIED
}

func (x *ReportSate) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// ViewDesc is a description of view.
type GetSchemaResponse_ViewDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the view.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// desc is the description of the view.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// columns is the list of columns.
	Columns []*GetSchemaResponse_ViewDesc_ColumnDesc `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *GetSchemaResponse_ViewDesc) Reset() {
	*x = GetSchemaResponse_ViewDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse_ViewDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse_ViewDesc) ProtoMessage() {}

func (x *GetSchemaResponse_ViewDesc) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse_ViewDesc.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse_ViewDesc) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetSchemaResponse_ViewDesc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSchemaResponse_ViewDesc) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GetSchemaResponse_ViewDesc) GetColumns() []*GetSchemaResponse_ViewDesc_ColumnDesc {
	if x != nil {
		return x.Columns
	}
	return nil
}

// ColumnDesc is a description of column.
type GetSchemaResponse_ViewDesc_ColumnDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the type of the column.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// desc is the description of the column.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *GetSchemaResponse_ViewDesc_ColumnDesc) Reset() {
	*x = GetSchemaResponse_ViewDesc_ColumnDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse_ViewDesc_ColumnDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse_ViewDesc_ColumnDesc) ProtoMessage() {}

func (x *GetSchemaResponse_ViewDesc_ColumnDesc) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse_ViewDesc_ColumnDesc.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse_ViewDesc_ColumnDesc) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{19, 0, 0}
}

func (x *GetSchemaResponse_ViewDesc_ColumnDesc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSchemaResponse_ViewDesc_ColumnDesc) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetSchemaResponse_ViewDesc_ColumnDesc) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// AuditQueryResult is a result of audit query.
type ReportResult_AuditQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// audit_query is the audit query spec containing information about audit query.
	AuditQuery *AuditQuerySpec `protobuf:"bytes,1,opt,name=audit_query,json=auditQuery,proto3" json:"audit_query,omitempty"`
	// result is the result set.
	Result *QueryResultSet `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// result_id is a unique id of the result.
	ResultId string `protobuf:"bytes,3,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// execution_time_in_millis is a time in milliseconds when the audit query was executed.
	ExecutionTimeInMillis int64 `protobuf:"varint,4,opt,name=execution_time_in_millis,json=executionTimeInMillis,proto3" json:"execution_time_in_millis,omitempty"`
	// data_scanned_in_bytes is a number of bytes scanned.
	DataScannedInBytes int64 `protobuf:"varint,5,opt,name=data_scanned_in_bytes,json=dataScannedInBytes,proto3" json:"data_scanned_in_bytes,omitempty"`
}

func (x *ReportResult_AuditQueryResult) Reset() {
	*x = ReportResult_AuditQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResult_AuditQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResult_AuditQueryResult) ProtoMessage() {}

func (x *ReportResult_AuditQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_secreports_v1_secreports_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResult_AuditQueryResult.ProtoReflect.Descriptor instead.
func (*ReportResult_AuditQueryResult) Descriptor() ([]byte, []int) {
	return file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ReportResult_AuditQueryResult) GetAuditQuery() *AuditQuerySpec {
	if x != nil {
		return x.AuditQuery
	}
	return nil
}

func (x *ReportResult_AuditQueryResult) GetResult() *QueryResultSet {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReportResult_AuditQueryResult) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *ReportResult_AuditQueryResult) GetExecutionTimeInMillis() int64 {
	if x != nil {
		return x.ExecutionTimeInMillis
	}
	return 0
}

func (x *ReportResult_AuditQueryResult) GetDataScannedInBytes() int64 {
	if x != nil {
		return x.DataScannedInBytes
	}
	return 0
}

var File_teleport_secreports_v1_secreports_service_proto protoreflect.FileDescriptor

var file_teleport_secreports_v1_secreports_service_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0x4e, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x22, 0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x14,
	0x52, 0x75, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0x5e,
	0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x4d,
	0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2a, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x63, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x50, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x80, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x52,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x1a, 0xd5, 0x01, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x57, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x48, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x34,
	0x0a, 0x15, 0x52, 0x75, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf3, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x13, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xa4, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xfe, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x32, 0x89, 0x0b,
	0x0a, 0x11, 0x53, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x75, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x66, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x6c, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x09, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x72, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x64, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_secreports_v1_secreports_service_proto_rawDescOnce sync.Once
	file_teleport_secreports_v1_secreports_service_proto_rawDescData = file_teleport_secreports_v1_secreports_service_proto_rawDesc
)

func file_teleport_secreports_v1_secreports_service_proto_rawDescGZIP() []byte {
	file_teleport_secreports_v1_secreports_service_proto_rawDescOnce.Do(func() {
		file_teleport_secreports_v1_secreports_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_secreports_v1_secreports_service_proto_rawDescData)
	})
	return file_teleport_secreports_v1_secreports_service_proto_rawDescData
}

var file_teleport_secreports_v1_secreports_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_secreports_v1_secreports_service_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_teleport_secreports_v1_secreports_service_proto_goTypes = []any{
	(ReportSate_State)(0),                         // 0: teleport.secreports.v1.ReportSate.State
	(*GetAuditQueryResultRequest)(nil),            // 1: teleport.secreports.v1.GetAuditQueryResultRequest
	(*QueryResultColumnInfo)(nil),                 // 2: teleport.secreports.v1.QueryResultColumnInfo
	(*QueryRowResult)(nil),                        // 3: teleport.secreports.v1.QueryRowResult
	(*QueryResultSet)(nil),                        // 4: teleport.secreports.v1.QueryResultSet
	(*GetAuditQueryResultResponse)(nil),           // 5: teleport.secreports.v1.GetAuditQueryResultResponse
	(*RunReportRequest)(nil),                      // 6: teleport.secreports.v1.RunReportRequest
	(*GetReportStateRequest)(nil),                 // 7: teleport.secreports.v1.GetReportStateRequest
	(*DeleteAuditQueryRequest)(nil),               // 8: teleport.secreports.v1.DeleteAuditQueryRequest
	(*DeleteReportRequest)(nil),                   // 9: teleport.secreports.v1.DeleteReportRequest
	(*RunAuditQueryRequest)(nil),                  // 10: teleport.secreports.v1.RunAuditQueryRequest
	(*UpsertAuditQueryRequest)(nil),               // 11: teleport.secreports.v1.UpsertAuditQueryRequest
	(*UpsertReportRequest)(nil),                   // 12: teleport.secreports.v1.UpsertReportRequest
	(*GetAuditQueryRequest)(nil),                  // 13: teleport.secreports.v1.GetAuditQueryRequest
	(*GetReportRequest)(nil),                      // 14: teleport.secreports.v1.GetReportRequest
	(*GetReportResultRequest)(nil),                // 15: teleport.secreports.v1.GetReportResultRequest
	(*ListAuditQueriesRequest)(nil),               // 16: teleport.secreports.v1.ListAuditQueriesRequest
	(*ListReportsRequest)(nil),                    // 17: teleport.secreports.v1.ListReportsRequest
	(*ListAuditQueriesResponse)(nil),              // 18: teleport.secreports.v1.ListAuditQueriesResponse
	(*GetSchemaRequest)(nil),                      // 19: teleport.secreports.v1.GetSchemaRequest
	(*GetSchemaResponse)(nil),                     // 20: teleport.secreports.v1.GetSchemaResponse
	(*RunAuditQueryResponse)(nil),                 // 21: teleport.secreports.v1.RunAuditQueryResponse
	(*ListReportsResponse)(nil),                   // 22: teleport.secreports.v1.ListReportsResponse
	(*GetReportResultResponse)(nil),               // 23: teleport.secreports.v1.GetReportResultResponse
	(*ReportResult)(nil),                          // 24: teleport.secreports.v1.ReportResult
	(*ReportSate)(nil),                            // 25: teleport.secreports.v1.ReportSate
	(*GetSchemaResponse_ViewDesc)(nil),            // 26: teleport.secreports.v1.GetSchemaResponse.ViewDesc
	(*GetSchemaResponse_ViewDesc_ColumnDesc)(nil), // 27: teleport.secreports.v1.GetSchemaResponse.ViewDesc.ColumnDesc
	(*ReportResult_AuditQueryResult)(nil),         // 28: teleport.secreports.v1.ReportResult.AuditQueryResult
	(*AuditQuery)(nil),                            // 29: teleport.secreports.v1.AuditQuery
	(*Report)(nil),                                // 30: teleport.secreports.v1.Report
	(*v1.ResourceHeader)(nil),                     // 31: teleport.header.v1.ResourceHeader
	(*AuditQuerySpec)(nil),                        // 32: teleport.secreports.v1.AuditQuerySpec
	(*emptypb.Empty)(nil),                         // 33: google.protobuf.Empty
	(*ReportState)(nil),                           // 34: teleport.secreports.v1.ReportState
}
var file_teleport_secreports_v1_secreports_service_proto_depIdxs = []int32{
	2,  // 0: teleport.secreports.v1.QueryResultSet.column_info:type_name -> teleport.secreports.v1.QueryResultColumnInfo
	3,  // 1: teleport.secreports.v1.QueryResultSet.rows:type_name -> teleport.secreports.v1.QueryRowResult
	4,  // 2: teleport.secreports.v1.GetAuditQueryResultResponse.result:type_name -> teleport.secreports.v1.QueryResultSet
	29, // 3: teleport.secreports.v1.UpsertAuditQueryRequest.audit_query:type_name -> teleport.secreports.v1.AuditQuery
	30, // 4: teleport.secreports.v1.UpsertReportRequest.report:type_name -> teleport.secreports.v1.Report
	29, // 5: teleport.secreports.v1.ListAuditQueriesResponse.queries:type_name -> teleport.secreports.v1.AuditQuery
	26, // 6: teleport.secreports.v1.GetSchemaResponse.views:type_name -> teleport.secreports.v1.GetSchemaResponse.ViewDesc
	30, // 7: teleport.secreports.v1.ListReportsResponse.reports:type_name -> teleport.secreports.v1.Report
	24, // 8: teleport.secreports.v1.GetReportResultResponse.result:type_name -> teleport.secreports.v1.ReportResult
	28, // 9: teleport.secreports.v1.ReportResult.audit_query_results:type_name -> teleport.secreports.v1.ReportResult.AuditQueryResult
	31, // 10: teleport.secreports.v1.ReportSate.header:type_name -> teleport.header.v1.ResourceHeader
	0,  // 11: teleport.secreports.v1.ReportSate.state:type_name -> teleport.secreports.v1.ReportSate.State
	27, // 12: teleport.secreports.v1.GetSchemaResponse.ViewDesc.columns:type_name -> teleport.secreports.v1.GetSchemaResponse.ViewDesc.ColumnDesc
	32, // 13: teleport.secreports.v1.ReportResult.AuditQueryResult.audit_query:type_name -> teleport.secreports.v1.AuditQuerySpec
	4,  // 14: teleport.secreports.v1.ReportResult.AuditQueryResult.result:type_name -> teleport.secreports.v1.QueryResultSet
	11, // 15: teleport.secreports.v1.SecReportsService.UpsertAuditQuery:input_type -> teleport.secreports.v1.UpsertAuditQueryRequest
	13, // 16: teleport.secreports.v1.SecReportsService.GetAuditQuery:input_type -> teleport.secreports.v1.GetAuditQueryRequest
	16, // 17: teleport.secreports.v1.SecReportsService.ListAuditQueries:input_type -> teleport.secreports.v1.ListAuditQueriesRequest
	8,  // 18: teleport.secreports.v1.SecReportsService.DeleteAuditQuery:input_type -> teleport.secreports.v1.DeleteAuditQueryRequest
	12, // 19: teleport.secreports.v1.SecReportsService.UpsertReport:input_type -> teleport.secreports.v1.UpsertReportRequest
	14, // 20: teleport.secreports.v1.SecReportsService.GetReport:input_type -> teleport.secreports.v1.GetReportRequest
	17, // 21: teleport.secreports.v1.SecReportsService.ListReports:input_type -> teleport.secreports.v1.ListReportsRequest
	9,  // 22: teleport.secreports.v1.SecReportsService.DeleteReport:input_type -> teleport.secreports.v1.DeleteReportRequest
	10, // 23: teleport.secreports.v1.SecReportsService.RunAuditQuery:input_type -> teleport.secreports.v1.RunAuditQueryRequest
	1,  // 24: teleport.secreports.v1.SecReportsService.GetAuditQueryResult:input_type -> teleport.secreports.v1.GetAuditQueryResultRequest
	6,  // 25: teleport.secreports.v1.SecReportsService.RunReport:input_type -> teleport.secreports.v1.RunReportRequest
	15, // 26: teleport.secreports.v1.SecReportsService.GetReportResult:input_type -> teleport.secreports.v1.GetReportResultRequest
	7,  // 27: teleport.secreports.v1.SecReportsService.GetReportState:input_type -> teleport.secreports.v1.GetReportStateRequest
	19, // 28: teleport.secreports.v1.SecReportsService.GetSchema:input_type -> teleport.secreports.v1.GetSchemaRequest
	33, // 29: teleport.secreports.v1.SecReportsService.UpsertAuditQuery:output_type -> google.protobuf.Empty
	29, // 30: teleport.secreports.v1.SecReportsService.GetAuditQuery:output_type -> teleport.secreports.v1.AuditQuery
	18, // 31: teleport.secreports.v1.SecReportsService.ListAuditQueries:output_type -> teleport.secreports.v1.ListAuditQueriesResponse
	33, // 32: teleport.secreports.v1.SecReportsService.DeleteAuditQuery:output_type -> google.protobuf.Empty
	33, // 33: teleport.secreports.v1.SecReportsService.UpsertReport:output_type -> google.protobuf.Empty
	30, // 34: teleport.secreports.v1.SecReportsService.GetReport:output_type -> teleport.secreports.v1.Report
	22, // 35: teleport.secreports.v1.SecReportsService.ListReports:output_type -> teleport.secreports.v1.ListReportsResponse
	33, // 36: teleport.secreports.v1.SecReportsService.DeleteReport:output_type -> google.protobuf.Empty
	21, // 37: teleport.secreports.v1.SecReportsService.RunAuditQuery:output_type -> teleport.secreports.v1.RunAuditQueryResponse
	5,  // 38: teleport.secreports.v1.SecReportsService.GetAuditQueryResult:output_type -> teleport.secreports.v1.GetAuditQueryResultResponse
	33, // 39: teleport.secreports.v1.SecReportsService.RunReport:output_type -> google.protobuf.Empty
	23, // 40: teleport.secreports.v1.SecReportsService.GetReportResult:output_type -> teleport.secreports.v1.GetReportResultResponse
	34, // 41: teleport.secreports.v1.SecReportsService.GetReportState:output_type -> teleport.secreports.v1.ReportState
	20, // 42: teleport.secreports.v1.SecReportsService.GetSchema:output_type -> teleport.secreports.v1.GetSchemaResponse
	29, // [29:43] is the sub-list for method output_type
	15, // [15:29] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_teleport_secreports_v1_secreports_service_proto_init() }
func file_teleport_secreports_v1_secreports_service_proto_init() {
	if File_teleport_secreports_v1_secreports_service_proto != nil {
		return
	}
	file_teleport_secreports_v1_secreports_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetAuditQueryResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*QueryResultColumnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*QueryRowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*QueryResultSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetAuditQueryResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RunReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAuditQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RunAuditQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertAuditQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetAuditQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ListAuditQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListAuditQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RunAuditQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ListReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ReportResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ReportSate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaResponse_ViewDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaResponse_ViewDesc_ColumnDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_secreports_v1_secreports_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ReportResult_AuditQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_secreports_v1_secreports_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_secreports_v1_secreports_service_proto_goTypes,
		DependencyIndexes: file_teleport_secreports_v1_secreports_service_proto_depIdxs,
		EnumInfos:         file_teleport_secreports_v1_secreports_service_proto_enumTypes,
		MessageInfos:      file_teleport_secreports_v1_secreports_service_proto_msgTypes,
	}.Build()
	File_teleport_secreports_v1_secreports_service_proto = out.File
	file_teleport_secreports_v1_secreports_service_proto_rawDesc = nil
	file_teleport_secreports_v1_secreports_service_proto_goTypes = nil
	file_teleport_secreports_v1_secreports_service_proto_depIdxs = nil
}
