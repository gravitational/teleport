// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/access_graph/v1/secrets_service.proto

package accessgraphv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretsScannerService_ReportAuthorizedKeys_FullMethodName = "/teleport.access_graph.v1.SecretsScannerService/ReportAuthorizedKeys"
	SecretsScannerService_ReportSecrets_FullMethodName        = "/teleport.access_graph.v1.SecretsScannerService/ReportSecrets"
)

// SecretsScannerServiceClient is the client API for SecretsScannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecretsScannerService provides methods for Access Graph Secret Scanner functionality.
type SecretsScannerServiceClient interface {
	// ReportAuthorizedKeys is used by Teleport SSH nodes to report authorized keys
	// that could be used to bypass Teleport.
	// The client (Teleport SSH Node) should authenticate using the certificate-key pair signed by Teleport HostCA.
	ReportAuthorizedKeys(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse], error)
	// ReportSecrets is used by trusted devices to report secrets found on the host that could be used to bypass Teleport.
	// The client (device) should first authenticate using the [ReportSecretsRequest.device_assertion] flow. Please refer to
	// the [teleport.devicetrust.v1.AssertDeviceRequest] and [teleport.devicetrust.v1.AssertDeviceResponse] messages for more details.
	//
	// Once the device is asserted, the client can send the secrets using the [ReportSecretsRequest.private_keys] field
	// and then close the client side of the stream.
	//
	// -> ReportSecrets (client) [1 or more]
	// -> CloseStream (client)
	// <- TerminateStream (server)
	//
	// Any failure in the assertion ceremony will result in the stream being terminated by the server. All secrets
	// reported by the client before the assertion terminates will be ignored and result in the stream being terminated.
	ReportSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportSecretsRequest, ReportSecretsResponse], error)
}

type secretsScannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsScannerServiceClient(cc grpc.ClientConnInterface) SecretsScannerServiceClient {
	return &secretsScannerServiceClient{cc}
}

func (c *secretsScannerServiceClient) ReportAuthorizedKeys(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretsScannerService_ServiceDesc.Streams[0], SecretsScannerService_ReportAuthorizedKeys_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretsScannerService_ReportAuthorizedKeysClient = grpc.BidiStreamingClient[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse]

func (c *secretsScannerServiceClient) ReportSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportSecretsRequest, ReportSecretsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretsScannerService_ServiceDesc.Streams[1], SecretsScannerService_ReportSecrets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportSecretsRequest, ReportSecretsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretsScannerService_ReportSecretsClient = grpc.BidiStreamingClient[ReportSecretsRequest, ReportSecretsResponse]

// SecretsScannerServiceServer is the server API for SecretsScannerService service.
// All implementations must embed UnimplementedSecretsScannerServiceServer
// for forward compatibility.
//
// SecretsScannerService provides methods for Access Graph Secret Scanner functionality.
type SecretsScannerServiceServer interface {
	// ReportAuthorizedKeys is used by Teleport SSH nodes to report authorized keys
	// that could be used to bypass Teleport.
	// The client (Teleport SSH Node) should authenticate using the certificate-key pair signed by Teleport HostCA.
	ReportAuthorizedKeys(grpc.BidiStreamingServer[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse]) error
	// ReportSecrets is used by trusted devices to report secrets found on the host that could be used to bypass Teleport.
	// The client (device) should first authenticate using the [ReportSecretsRequest.device_assertion] flow. Please refer to
	// the [teleport.devicetrust.v1.AssertDeviceRequest] and [teleport.devicetrust.v1.AssertDeviceResponse] messages for more details.
	//
	// Once the device is asserted, the client can send the secrets using the [ReportSecretsRequest.private_keys] field
	// and then close the client side of the stream.
	//
	// -> ReportSecrets (client) [1 or more]
	// -> CloseStream (client)
	// <- TerminateStream (server)
	//
	// Any failure in the assertion ceremony will result in the stream being terminated by the server. All secrets
	// reported by the client before the assertion terminates will be ignored and result in the stream being terminated.
	ReportSecrets(grpc.BidiStreamingServer[ReportSecretsRequest, ReportSecretsResponse]) error
	mustEmbedUnimplementedSecretsScannerServiceServer()
}

// UnimplementedSecretsScannerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretsScannerServiceServer struct{}

func (UnimplementedSecretsScannerServiceServer) ReportAuthorizedKeys(grpc.BidiStreamingServer[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReportAuthorizedKeys not implemented")
}
func (UnimplementedSecretsScannerServiceServer) ReportSecrets(grpc.BidiStreamingServer[ReportSecretsRequest, ReportSecretsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReportSecrets not implemented")
}
func (UnimplementedSecretsScannerServiceServer) mustEmbedUnimplementedSecretsScannerServiceServer() {}
func (UnimplementedSecretsScannerServiceServer) testEmbeddedByValue()                               {}

// UnsafeSecretsScannerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsScannerServiceServer will
// result in compilation errors.
type UnsafeSecretsScannerServiceServer interface {
	mustEmbedUnimplementedSecretsScannerServiceServer()
}

func RegisterSecretsScannerServiceServer(s grpc.ServiceRegistrar, srv SecretsScannerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretsScannerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretsScannerService_ServiceDesc, srv)
}

func _SecretsScannerService_ReportAuthorizedKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecretsScannerServiceServer).ReportAuthorizedKeys(&grpc.GenericServerStream[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretsScannerService_ReportAuthorizedKeysServer = grpc.BidiStreamingServer[ReportAuthorizedKeysRequest, ReportAuthorizedKeysResponse]

func _SecretsScannerService_ReportSecrets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecretsScannerServiceServer).ReportSecrets(&grpc.GenericServerStream[ReportSecretsRequest, ReportSecretsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretsScannerService_ReportSecretsServer = grpc.BidiStreamingServer[ReportSecretsRequest, ReportSecretsResponse]

// SecretsScannerService_ServiceDesc is the grpc.ServiceDesc for SecretsScannerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsScannerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.access_graph.v1.SecretsScannerService",
	HandlerType: (*SecretsScannerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportAuthorizedKeys",
			Handler:       _SecretsScannerService_ReportAuthorizedKeys_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportSecrets",
			Handler:       _SecretsScannerService_ReportSecrets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/access_graph/v1/secrets_service.proto",
}
