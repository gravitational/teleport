// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: teleport/identitycenter/v1/identitycenter.proto

package identitycenterv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PrincipalType indicates the type of principal represented by a PrincipalAssignment
type PrincipalType int32

const (
	PrincipalType_PRINCIPAL_TYPE_UNSPECIFIED PrincipalType = 0
	PrincipalType_PRINCIPAL_TYPE_USER        PrincipalType = 1
	PrincipalType_PRINCIPAL_TYPE_ACCESS_LIST PrincipalType = 2
)

// Enum value maps for PrincipalType.
var (
	PrincipalType_name = map[int32]string{
		0: "PRINCIPAL_TYPE_UNSPECIFIED",
		1: "PRINCIPAL_TYPE_USER",
		2: "PRINCIPAL_TYPE_ACCESS_LIST",
	}
	PrincipalType_value = map[string]int32{
		"PRINCIPAL_TYPE_UNSPECIFIED": 0,
		"PRINCIPAL_TYPE_USER":        1,
		"PRINCIPAL_TYPE_ACCESS_LIST": 2,
	}
)

func (x PrincipalType) Enum() *PrincipalType {
	p := new(PrincipalType)
	*p = x
	return p
}

func (x PrincipalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrincipalType) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_identitycenter_v1_identitycenter_proto_enumTypes[0].Descriptor()
}

func (PrincipalType) Type() protoreflect.EnumType {
	return &file_teleport_identitycenter_v1_identitycenter_proto_enumTypes[0]
}

func (x PrincipalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrincipalType.Descriptor instead.
func (PrincipalType) EnumDescriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{0}
}

// ProvisioningState indicates the current stage of the Account-Assignment
// provisioning pipeline a resource is in.
type ProvisioningState int32

const (
	// PROVISIONING_STATE_UNSPECIFIED is the default empty state. This should never
	// be used in practice.
	ProvisioningState_PROVISIONING_STATE_UNSPECIFIED ProvisioningState = 0
	// PROVISIONING_STATE_STALE indicates that Teleport has recalculated the
	// principal's Account Assignment set, but this has not yet been reflected in
	// AWS.
	ProvisioningState_PROVISIONING_STATE_STALE ProvisioningState = 1
	// PROVISIONING_STATE_PROVISIONED indicates that Teleport has synced the
	// principal's Account Assignments with AWS, and no further work needs to be
	// done.
	ProvisioningState_PROVISIONING_STATE_PROVISIONED ProvisioningState = 2
	// PROVISIONING_STATE_DELETED indicates that the principal as been deleted in
	// Teleport and all account assignments need to be revoked in AWS and the
	// Teleport PrincipalAssignment record needs to be deleted
	ProvisioningState_PROVISIONING_STATE_DELETED ProvisioningState = 3
)

// Enum value maps for ProvisioningState.
var (
	ProvisioningState_name = map[int32]string{
		0: "PROVISIONING_STATE_UNSPECIFIED",
		1: "PROVISIONING_STATE_STALE",
		2: "PROVISIONING_STATE_PROVISIONED",
		3: "PROVISIONING_STATE_DELETED",
	}
	ProvisioningState_value = map[string]int32{
		"PROVISIONING_STATE_UNSPECIFIED": 0,
		"PROVISIONING_STATE_STALE":       1,
		"PROVISIONING_STATE_PROVISIONED": 2,
		"PROVISIONING_STATE_DELETED":     3,
	}
)

func (x ProvisioningState) Enum() *ProvisioningState {
	p := new(ProvisioningState)
	*p = x
	return p
}

func (x ProvisioningState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisioningState) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_identitycenter_v1_identitycenter_proto_enumTypes[1].Descriptor()
}

func (ProvisioningState) Type() protoreflect.EnumType {
	return &file_teleport_identitycenter_v1_identitycenter_proto_enumTypes[1]
}

func (x ProvisioningState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisioningState.Descriptor instead.
func (ProvisioningState) EnumDescriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{1}
}

// PermissionSetInfo represents a permission set that is available on a given
// account. This is not intended to be a complete description of a PermissionSet,
// but just enough to identify it for cross-referencing when included in an
// Account record.
type PermissionSetInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arn is the unique ARN for this permission set
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// Title is the human-readable name of the permission set
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Role is an optional ARN indicating role provisioned to this account. May be
	// empty if the permission set is not provisioned or is not relevant in the
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// AssignmentID is the name of a Teleport Account Assignment resource
	// representing this permission set assigned to the enclosing Account.
	AssignmentId  string `protobuf:"bytes,4,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionSetInfo) Reset() {
	*x = PermissionSetInfo{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSetInfo) ProtoMessage() {}

func (x *PermissionSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSetInfo.ProtoReflect.Descriptor instead.
func (*PermissionSetInfo) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{0}
}

func (x *PermissionSetInfo) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *PermissionSetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionSetInfo) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *PermissionSetInfo) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

// AccountStatus represents any commonly-changing data about an Identity
// Center account.
type AccountStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountStatus) Reset() {
	*x = AccountStatus{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatus) ProtoMessage() {}

func (x *AccountStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatus.ProtoReflect.Descriptor instead.
func (*AccountStatus) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{1}
}

// Account is an Identity-Center-managed AWS account
type Account struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	SubKind       string                 `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Metadata      *v1.Metadata           `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *AccountSpec           `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *AccountStatus         `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Account) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *Account) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Account) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Account) GetSpec() *AccountSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Account) GetStatus() *AccountStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// AccountSpec holds non-changing data about an AWS Account
type AccountSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the AWS-assigned PermissionSet ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Arn is the unique ARN for this permission set
	Arn string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	// Name is the human-readable name of the permission set
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description is a heman-readable description of the AWS Permission Set
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// StartUrl is the address of the AWS start page
	StartUrl string `protobuf:"bytes,5,opt,name=start_url,json=startUrl,proto3" json:"start_url,omitempty"`
	// PermissionSetInfo contains a list of the available Perission Sets on this
	// account.
	PermissionSetInfo []*PermissionSetInfo `protobuf:"bytes,6,rep,name=permission_set_info,json=permissionSetInfo,proto3" json:"permission_set_info,omitempty"`
	// IsOrganizationOwner indicates that this account is the organisation owner,
	// and may have restrictions about adding permission sets
	IsOrganizationOwner bool `protobuf:"varint,7,opt,name=is_organization_owner,json=isOrganizationOwner,proto3" json:"is_organization_owner,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AccountSpec) Reset() {
	*x = AccountSpec{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSpec) ProtoMessage() {}

func (x *AccountSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSpec.ProtoReflect.Descriptor instead.
func (*AccountSpec) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{3}
}

func (x *AccountSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountSpec) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AccountSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountSpec) GetStartUrl() string {
	if x != nil {
		return x.StartUrl
	}
	return ""
}

func (x *AccountSpec) GetPermissionSetInfo() []*PermissionSetInfo {
	if x != nil {
		return x.PermissionSetInfo
	}
	return nil
}

func (x *AccountSpec) GetIsOrganizationOwner() bool {
	if x != nil {
		return x.IsOrganizationOwner
	}
	return false
}

// PermissionSet identifies a single permission set by name and ARN
type PermissionSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	SubKind       string                 `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Metadata      *v1.Metadata           `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *PermissionSetSpec     `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionSet) Reset() {
	*x = PermissionSet{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSet) ProtoMessage() {}

func (x *PermissionSet) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSet.ProtoReflect.Descriptor instead.
func (*PermissionSet) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{4}
}

func (x *PermissionSet) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PermissionSet) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *PermissionSet) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PermissionSet) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PermissionSet) GetSpec() *PermissionSetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// PermissionSetSpec holds rarely-changing information about ans AWS pwermission
// set
type PermissionSetSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arn is the unique ARN for this permission set
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// Name is the human-readable name of the permission set
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description is a human-readable description of the AWS Permission Set
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionSetSpec) Reset() {
	*x = PermissionSetSpec{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionSetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSetSpec) ProtoMessage() {}

func (x *PermissionSetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSetSpec.ProtoReflect.Descriptor instead.
func (*PermissionSetSpec) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{5}
}

func (x *PermissionSetSpec) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *PermissionSetSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionSetSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// AccountAssignment captures the relationship between a PermissionSet
// and an Identity Center Account. It represents two parts of a potential 3-part
// Identity Center Account Assignment. This is the primary requestable resource
// for a user and a user having access to an AccountAssignment resource implies
// that there is a corresponding Account Assignment in AWS Identity Center that
// grants that user the Permission Set specified in that resource, on the
// AWS Account specified in that resource.
type AccountAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	SubKind       string                 `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Metadata      *v1.Metadata           `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *AccountAssignmentSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountAssignment) Reset() {
	*x = AccountAssignment{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAssignment) ProtoMessage() {}

func (x *AccountAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAssignment.ProtoReflect.Descriptor instead.
func (*AccountAssignment) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{6}
}

func (x *AccountAssignment) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AccountAssignment) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *AccountAssignment) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AccountAssignment) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AccountAssignment) GetSpec() *AccountAssignmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// AccountAssignmentSpec holds static information abount an AccountAssignment,
// linking a Permission Set and an AWS account.
type AccountAssignmentSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Display       string                 `protobuf:"bytes,1,opt,name=display,proto3" json:"display,omitempty"`
	PermissionSet *PermissionSetInfo     `protobuf:"bytes,2,opt,name=permission_set,json=permissionSet,proto3" json:"permission_set,omitempty"`
	AccountName   string                 `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountId     string                 `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountAssignmentSpec) Reset() {
	*x = AccountAssignmentSpec{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountAssignmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAssignmentSpec) ProtoMessage() {}

func (x *AccountAssignmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAssignmentSpec.ProtoReflect.Descriptor instead.
func (*AccountAssignmentSpec) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{7}
}

func (x *AccountAssignmentSpec) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *AccountAssignmentSpec) GetPermissionSet() *PermissionSetInfo {
	if x != nil {
		return x.PermissionSet
	}
	return nil
}

func (x *AccountAssignmentSpec) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AccountAssignmentSpec) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// PrincipalAssignment relates a collection of PermissionSets and Applications
// to a given principal. This is the source of truth for all Account & Permission
// Set assignments in AWS
type PrincipalAssignment struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Kind          string                     `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	SubKind       string                     `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	Version       string                     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Metadata      *v1.Metadata               `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *PrincipalAssignmentSpec   `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *PrincipalAssignmentStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalAssignment) Reset() {
	*x = PrincipalAssignment{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalAssignment) ProtoMessage() {}

func (x *PrincipalAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalAssignment.ProtoReflect.Descriptor instead.
func (*PrincipalAssignment) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{8}
}

func (x *PrincipalAssignment) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PrincipalAssignment) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *PrincipalAssignment) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PrincipalAssignment) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PrincipalAssignment) GetSpec() *PrincipalAssignmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PrincipalAssignment) GetStatus() *PrincipalAssignmentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PrincipalAssignmentSpec holds information about the Account Assignments
// assigned to the target principal.
type PrincipalAssignmentSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PrincipalId identifies what kind of principal this assignment applies to, either
	// a User or a Group (i.e. AccessList)
	PrincipalType PrincipalType `protobuf:"varint,1,opt,name=principal_type,json=principalType,proto3,enum=teleport.identitycenter.v1.PrincipalType" json:"principal_type,omitempty"`
	// PrincipalId identifies the Teleport User or Access List that this assignment
	// applies to
	PrincipalId string `protobuf:"bytes,2,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	// ExternalIdSource
	ExternalIdSource string `protobuf:"bytes,3,opt,name=external_id_source,json=externalIdSource,proto3" json:"external_id_source,omitempty"`
	// ExternalID identifies the user or group within AWS
	ExternalId    string `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrincipalAssignmentSpec) Reset() {
	*x = PrincipalAssignmentSpec{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalAssignmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalAssignmentSpec) ProtoMessage() {}

func (x *PrincipalAssignmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalAssignmentSpec.ProtoReflect.Descriptor instead.
func (*PrincipalAssignmentSpec) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{9}
}

func (x *PrincipalAssignmentSpec) GetPrincipalType() PrincipalType {
	if x != nil {
		return x.PrincipalType
	}
	return PrincipalType_PRINCIPAL_TYPE_UNSPECIFIED
}

func (x *PrincipalAssignmentSpec) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *PrincipalAssignmentSpec) GetExternalIdSource() string {
	if x != nil {
		return x.ExternalIdSource
	}
	return ""
}

func (x *PrincipalAssignmentSpec) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// AccountAssignmentRef is a minimal link between an AWS Account and a
// permission set. Optionally contains human-readable metadata describing the
// target AWS Account and Permission Set.
type AccountAssignmentRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AccountId holds the AWS account ID for the target AWS account. This will
	// always be set
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// AccountName optionally holds the heman-readable name of the target AwS
	// account
	AccountName string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// PermissionSetArn holds the target Permission Set ARN. This will always be
	// set.
	PermissionSetArn string `protobuf:"bytes,3,opt,name=permission_set_arn,json=permissionSetArn,proto3" json:"permission_set_arn,omitempty"`
	// PermissionSetName optionally holds the human-readable name of the target
	// AWS Permission Set.
	PermissionSetName string `protobuf:"bytes,4,opt,name=permission_set_name,json=permissionSetName,proto3" json:"permission_set_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccountAssignmentRef) Reset() {
	*x = AccountAssignmentRef{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountAssignmentRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAssignmentRef) ProtoMessage() {}

func (x *AccountAssignmentRef) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAssignmentRef.ProtoReflect.Descriptor instead.
func (*AccountAssignmentRef) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{10}
}

func (x *AccountAssignmentRef) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountAssignmentRef) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AccountAssignmentRef) GetPermissionSetArn() string {
	if x != nil {
		return x.PermissionSetArn
	}
	return ""
}

func (x *AccountAssignmentRef) GetPermissionSetName() string {
	if x != nil {
		return x.PermissionSetName
	}
	return ""
}

// PrincipalAssignmentAssignmentStatus holds frequently-changing iinformation
// about the PrincipalAssignment
type PrincipalAssignmentStatus struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	ProvisioningState ProvisioningState       `protobuf:"varint,1,opt,name=provisioning_state,json=provisioningState,proto3,enum=teleport.identitycenter.v1.ProvisioningState" json:"provisioning_state,omitempty"`
	Assignments       []*AccountAssignmentRef `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	Applications      []string                `protobuf:"bytes,3,rep,name=applications,proto3" json:"applications,omitempty"`
	Error             string                  `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PrincipalAssignmentStatus) Reset() {
	*x = PrincipalAssignmentStatus{}
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrincipalAssignmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalAssignmentStatus) ProtoMessage() {}

func (x *PrincipalAssignmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_identitycenter_v1_identitycenter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalAssignmentStatus.ProtoReflect.Descriptor instead.
func (*PrincipalAssignmentStatus) Descriptor() ([]byte, []int) {
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP(), []int{11}
}

func (x *PrincipalAssignmentStatus) GetProvisioningState() ProvisioningState {
	if x != nil {
		return x.ProvisioningState
	}
	return ProvisioningState_PROVISIONING_STATE_UNSPECIFIED
}

func (x *PrincipalAssignmentStatus) GetAssignments() []*AccountAssignmentRef {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *PrincipalAssignmentStatus) GetApplications() []string {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *PrincipalAssignmentStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_teleport_identitycenter_v1_identitycenter_proto protoreflect.FileDescriptor

var file_teleport_identitycenter_v1_identitycenter_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1a, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x72, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x5d, 0x0a, 0x13, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a,
	0x0d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x22, 0x5b, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb0, 0x02,
	0x0a, 0x13, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xdd, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x22, 0xb6, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x19, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2a, 0x68, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x99, 0x01,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0x60, 0x5a, 0x5e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_teleport_identitycenter_v1_identitycenter_proto_rawDescOnce sync.Once
	file_teleport_identitycenter_v1_identitycenter_proto_rawDescData = file_teleport_identitycenter_v1_identitycenter_proto_rawDesc
)

func file_teleport_identitycenter_v1_identitycenter_proto_rawDescGZIP() []byte {
	file_teleport_identitycenter_v1_identitycenter_proto_rawDescOnce.Do(func() {
		file_teleport_identitycenter_v1_identitycenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_identitycenter_v1_identitycenter_proto_rawDescData)
	})
	return file_teleport_identitycenter_v1_identitycenter_proto_rawDescData
}

var file_teleport_identitycenter_v1_identitycenter_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_teleport_identitycenter_v1_identitycenter_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_teleport_identitycenter_v1_identitycenter_proto_goTypes = []any{
	(PrincipalType)(0),                // 0: teleport.identitycenter.v1.PrincipalType
	(ProvisioningState)(0),            // 1: teleport.identitycenter.v1.ProvisioningState
	(*PermissionSetInfo)(nil),         // 2: teleport.identitycenter.v1.PermissionSetInfo
	(*AccountStatus)(nil),             // 3: teleport.identitycenter.v1.AccountStatus
	(*Account)(nil),                   // 4: teleport.identitycenter.v1.Account
	(*AccountSpec)(nil),               // 5: teleport.identitycenter.v1.AccountSpec
	(*PermissionSet)(nil),             // 6: teleport.identitycenter.v1.PermissionSet
	(*PermissionSetSpec)(nil),         // 7: teleport.identitycenter.v1.PermissionSetSpec
	(*AccountAssignment)(nil),         // 8: teleport.identitycenter.v1.AccountAssignment
	(*AccountAssignmentSpec)(nil),     // 9: teleport.identitycenter.v1.AccountAssignmentSpec
	(*PrincipalAssignment)(nil),       // 10: teleport.identitycenter.v1.PrincipalAssignment
	(*PrincipalAssignmentSpec)(nil),   // 11: teleport.identitycenter.v1.PrincipalAssignmentSpec
	(*AccountAssignmentRef)(nil),      // 12: teleport.identitycenter.v1.AccountAssignmentRef
	(*PrincipalAssignmentStatus)(nil), // 13: teleport.identitycenter.v1.PrincipalAssignmentStatus
	(*v1.Metadata)(nil),               // 14: teleport.header.v1.Metadata
}
var file_teleport_identitycenter_v1_identitycenter_proto_depIdxs = []int32{
	14, // 0: teleport.identitycenter.v1.Account.metadata:type_name -> teleport.header.v1.Metadata
	5,  // 1: teleport.identitycenter.v1.Account.spec:type_name -> teleport.identitycenter.v1.AccountSpec
	3,  // 2: teleport.identitycenter.v1.Account.status:type_name -> teleport.identitycenter.v1.AccountStatus
	2,  // 3: teleport.identitycenter.v1.AccountSpec.permission_set_info:type_name -> teleport.identitycenter.v1.PermissionSetInfo
	14, // 4: teleport.identitycenter.v1.PermissionSet.metadata:type_name -> teleport.header.v1.Metadata
	7,  // 5: teleport.identitycenter.v1.PermissionSet.spec:type_name -> teleport.identitycenter.v1.PermissionSetSpec
	14, // 6: teleport.identitycenter.v1.AccountAssignment.metadata:type_name -> teleport.header.v1.Metadata
	9,  // 7: teleport.identitycenter.v1.AccountAssignment.spec:type_name -> teleport.identitycenter.v1.AccountAssignmentSpec
	2,  // 8: teleport.identitycenter.v1.AccountAssignmentSpec.permission_set:type_name -> teleport.identitycenter.v1.PermissionSetInfo
	14, // 9: teleport.identitycenter.v1.PrincipalAssignment.metadata:type_name -> teleport.header.v1.Metadata
	11, // 10: teleport.identitycenter.v1.PrincipalAssignment.spec:type_name -> teleport.identitycenter.v1.PrincipalAssignmentSpec
	13, // 11: teleport.identitycenter.v1.PrincipalAssignment.status:type_name -> teleport.identitycenter.v1.PrincipalAssignmentStatus
	0,  // 12: teleport.identitycenter.v1.PrincipalAssignmentSpec.principal_type:type_name -> teleport.identitycenter.v1.PrincipalType
	1,  // 13: teleport.identitycenter.v1.PrincipalAssignmentStatus.provisioning_state:type_name -> teleport.identitycenter.v1.ProvisioningState
	12, // 14: teleport.identitycenter.v1.PrincipalAssignmentStatus.assignments:type_name -> teleport.identitycenter.v1.AccountAssignmentRef
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_teleport_identitycenter_v1_identitycenter_proto_init() }
func file_teleport_identitycenter_v1_identitycenter_proto_init() {
	if File_teleport_identitycenter_v1_identitycenter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_identitycenter_v1_identitycenter_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_identitycenter_v1_identitycenter_proto_goTypes,
		DependencyIndexes: file_teleport_identitycenter_v1_identitycenter_proto_depIdxs,
		EnumInfos:         file_teleport_identitycenter_v1_identitycenter_proto_enumTypes,
		MessageInfos:      file_teleport_identitycenter_v1_identitycenter_proto_msgTypes,
	}.Build()
	File_teleport_identitycenter_v1_identitycenter_proto = out.File
	file_teleport_identitycenter_v1_identitycenter_proto_rawDesc = nil
	file_teleport_identitycenter_v1_identitycenter_proto_goTypes = nil
	file_teleport_identitycenter_v1_identitycenter_proto_depIdxs = nil
}
