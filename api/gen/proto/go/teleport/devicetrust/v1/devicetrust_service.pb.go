// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: teleport/devicetrust/v1/devicetrust_service.proto

package devicetrustv1

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DeviceView specifies which fields of returned devices should be present.
type DeviceView int32

const (
	DeviceView_DEVICE_VIEW_UNSPECIFIED DeviceView = 0
	// View for general device listings, like `tctl devices ls`.
	// Contains only basic information, such as IDs and enrollment status.
	DeviceView_DEVICE_VIEW_LIST DeviceView = 1
	// View for detailed device queries, like `tctl get devices`.
	// Presents a complete view of the device.
	DeviceView_DEVICE_VIEW_RESOURCE DeviceView = 2
)

// Enum value maps for DeviceView.
var (
	DeviceView_name = map[int32]string{
		0: "DEVICE_VIEW_UNSPECIFIED",
		1: "DEVICE_VIEW_LIST",
		2: "DEVICE_VIEW_RESOURCE",
	}
	DeviceView_value = map[string]int32{
		"DEVICE_VIEW_UNSPECIFIED": 0,
		"DEVICE_VIEW_LIST":        1,
		"DEVICE_VIEW_RESOURCE":    2,
	}
)

func (x DeviceView) Enum() *DeviceView {
	p := new(DeviceView)
	*p = x
	return p
}

func (x DeviceView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceView) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_enumTypes[0].Descriptor()
}

func (DeviceView) Type() protoreflect.EnumType {
	return &file_teleport_devicetrust_v1_devicetrust_service_proto_enumTypes[0]
}

func (x DeviceView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceView.Descriptor instead.
func (DeviceView) EnumDescriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{0}
}

// Request for CreateDevice.
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device to create.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// If true, a DeviceEnrollToken is created along with the Device.
	CreateEnrollToken bool `protobuf:"varint,2,opt,name=create_enroll_token,json=createEnrollToken,proto3" json:"create_enroll_token,omitempty"`
	// If true, create the device as a Teleport resource, meaning that fields that
	// are usually considered read-only or system managed are copied as provided
	// to storage.
	// Prefer using non-resource creation semantics if possible.
	CreateAsResource bool `protobuf:"varint,3,opt,name=create_as_resource,json=createAsResource,proto3" json:"create_as_resource,omitempty"`
	// Custom expiration time for enrollment tokens.
	// A short (for humans) server default is used if unset.
	EnrollTokenExpireTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=enroll_token_expire_time,json=enrollTokenExpireTime,proto3" json:"enroll_token_expire_time,omitempty"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CreateDeviceRequest) GetCreateEnrollToken() bool {
	if x != nil {
		return x.CreateEnrollToken
	}
	return false
}

func (x *CreateDeviceRequest) GetCreateAsResource() bool {
	if x != nil {
		return x.CreateAsResource
	}
	return false
}

func (x *CreateDeviceRequest) GetEnrollTokenExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EnrollTokenExpireTime
	}
	return nil
}

// Request for UpdateDevice.
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device to update.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Update mask applied to the resource.
	// Fields are masked according to their proto name.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateDeviceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request for UpsertDevice.
type UpsertDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device to create or update.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// If true, creates the device using resource semantics.
	// Has no effect on device updates.
	// See create_as_resource in CreateDeviceRequest.
	CreateAsResource bool `protobuf:"varint,2,opt,name=create_as_resource,json=createAsResource,proto3" json:"create_as_resource,omitempty"`
}

func (x *UpsertDeviceRequest) Reset() {
	*x = UpsertDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDeviceRequest) ProtoMessage() {}

func (x *UpsertDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpsertDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpsertDeviceRequest) GetCreateAsResource() bool {
	if x != nil {
		return x.CreateAsResource
	}
	return false
}

// Request for DeleteDevice.
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Device to delete.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// Request for FindDevices.
//
// Inspect the returned devices to determine whether the match was by ID or
// asset tag.
type FindDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device ID or asset tag.
	IdOrTag string `protobuf:"bytes,1,opt,name=id_or_tag,json=idOrTag,proto3" json:"id_or_tag,omitempty"`
}

func (x *FindDevicesRequest) Reset() {
	*x = FindDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDevicesRequest) ProtoMessage() {}

func (x *FindDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDevicesRequest.ProtoReflect.Descriptor instead.
func (*FindDevicesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{4}
}

func (x *FindDevicesRequest) GetIdOrTag() string {
	if x != nil {
		return x.IdOrTag
	}
	return ""
}

// Response for FindDevices.
type FindDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices that matched the search.
	// The number of resulting devices is expected to be low and may be
	// artificially capped by the server otherwise.
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *FindDevicesResponse) Reset() {
	*x = FindDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDevicesResponse) ProtoMessage() {}

func (x *FindDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDevicesResponse.ProtoReflect.Descriptor instead.
func (*FindDevicesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{5}
}

func (x *FindDevicesResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// Request for GetDevice.
type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the device.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// Request for ListDevices.
//
// Follows the pagination semantics of
// https://cloud.google.com/apis/design/standard_methods#list.
type ListDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of items to return.
	// The server may impose a different page size at its discretion.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specifies which fields of the resource should be returned in the response.
	// Defaults to DEVICE_VIEW_LIST.
	View DeviceView `protobuf:"varint,3,opt,name=view,proto3,enum=teleport.devicetrust.v1.DeviceView" json:"view,omitempty"`
}

func (x *ListDevicesRequest) Reset() {
	*x = ListDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesRequest) ProtoMessage() {}

func (x *ListDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListDevicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDevicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDevicesRequest) GetView() DeviceView {
	if x != nil {
		return x.View
	}
	return DeviceView_DEVICE_VIEW_UNSPECIFIED
}

// Response for ListDevices.
type ListDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices that matched the search.
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDevicesResponse) Reset() {
	*x = ListDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResponse) ProtoMessage() {}

func (x *ListDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListDevicesResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ListDevicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for BulkCreateDevices.
type BulkCreateDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices to create.
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// If true, create the device as a Teleport resource, meaning that fields that
	// are usually considered read-only or system managed are copied as provided
	// to storage.
	// Prefer using non-resource creation semantics if possible.
	CreateAsResource bool `protobuf:"varint,2,opt,name=create_as_resource,json=createAsResource,proto3" json:"create_as_resource,omitempty"`
}

func (x *BulkCreateDevicesRequest) Reset() {
	*x = BulkCreateDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateDevicesRequest) ProtoMessage() {}

func (x *BulkCreateDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateDevicesRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateDevicesRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{9}
}

func (x *BulkCreateDevicesRequest) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *BulkCreateDevicesRequest) GetCreateAsResource() bool {
	if x != nil {
		return x.CreateAsResource
	}
	return false
}

// Response for BulkCreateDevices.
type BulkCreateDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created devices or a failure reason.
	// Responses are sorted according to the request.
	Devices []*DeviceOrStatus `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *BulkCreateDevicesResponse) Reset() {
	*x = BulkCreateDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateDevicesResponse) ProtoMessage() {}

func (x *BulkCreateDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateDevicesResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateDevicesResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{10}
}

func (x *BulkCreateDevicesResponse) GetDevices() []*DeviceOrStatus {
	if x != nil {
		return x.Devices
	}
	return nil
}

// DeviceOrStatus contains either a device ID, in case of success, or a status
// in case of failures.
type DeviceOrStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the operation.
	// May either be absent or contain the OK code for successes, at the
	// implementation's discretion.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// ID of the created device.
	// Only present if the status is OK.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// If true the action attempted against the device was a delete, instead of a
	// create or update.
	Deleted bool `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeviceOrStatus) Reset() {
	*x = DeviceOrStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOrStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOrStatus) ProtoMessage() {}

func (x *DeviceOrStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOrStatus.ProtoReflect.Descriptor instead.
func (*DeviceOrStatus) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceOrStatus) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeviceOrStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceOrStatus) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

// Request for CreateDeviceEnrollToken.
type CreateDeviceEnrollTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the device.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Device collected data.
	// Used to authorize issuance of device enrollment tokens for auto-enrollment.
	// Not required otherwise.
	DeviceData *DeviceCollectedData `protobuf:"bytes,2,opt,name=device_data,json=deviceData,proto3" json:"device_data,omitempty"`
	// Custom expiration time for enrollment tokens.
	// A short (for humans) server default is used if unset.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *CreateDeviceEnrollTokenRequest) Reset() {
	*x = CreateDeviceEnrollTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceEnrollTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceEnrollTokenRequest) ProtoMessage() {}

func (x *CreateDeviceEnrollTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceEnrollTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceEnrollTokenRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDeviceEnrollTokenRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateDeviceEnrollTokenRequest) GetDeviceData() *DeviceCollectedData {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

func (x *CreateDeviceEnrollTokenRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

// Request for EnrollDevice.
type EnrollDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*EnrollDeviceRequest_Init
	//	*EnrollDeviceRequest_MacosChallengeResponse
	//	*EnrollDeviceRequest_TpmChallengeResponse
	Payload isEnrollDeviceRequest_Payload `protobuf_oneof:"payload"`
}

func (x *EnrollDeviceRequest) Reset() {
	*x = EnrollDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollDeviceRequest) ProtoMessage() {}

func (x *EnrollDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollDeviceRequest.ProtoReflect.Descriptor instead.
func (*EnrollDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{13}
}

func (m *EnrollDeviceRequest) GetPayload() isEnrollDeviceRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *EnrollDeviceRequest) GetInit() *EnrollDeviceInit {
	if x, ok := x.GetPayload().(*EnrollDeviceRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *EnrollDeviceRequest) GetMacosChallengeResponse() *MacOSEnrollChallengeResponse {
	if x, ok := x.GetPayload().(*EnrollDeviceRequest_MacosChallengeResponse); ok {
		return x.MacosChallengeResponse
	}
	return nil
}

func (x *EnrollDeviceRequest) GetTpmChallengeResponse() *TPMEnrollChallengeResponse {
	if x, ok := x.GetPayload().(*EnrollDeviceRequest_TpmChallengeResponse); ok {
		return x.TpmChallengeResponse
	}
	return nil
}

type isEnrollDeviceRequest_Payload interface {
	isEnrollDeviceRequest_Payload()
}

type EnrollDeviceRequest_Init struct {
	Init *EnrollDeviceInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type EnrollDeviceRequest_MacosChallengeResponse struct {
	MacosChallengeResponse *MacOSEnrollChallengeResponse `protobuf:"bytes,2,opt,name=macos_challenge_response,json=macosChallengeResponse,proto3,oneof"`
}

type EnrollDeviceRequest_TpmChallengeResponse struct {
	TpmChallengeResponse *TPMEnrollChallengeResponse `protobuf:"bytes,3,opt,name=tpm_challenge_response,json=tpmChallengeResponse,proto3,oneof"`
}

func (*EnrollDeviceRequest_Init) isEnrollDeviceRequest_Payload() {}

func (*EnrollDeviceRequest_MacosChallengeResponse) isEnrollDeviceRequest_Payload() {}

func (*EnrollDeviceRequest_TpmChallengeResponse) isEnrollDeviceRequest_Payload() {}

// Response for EnrollDevice.
type EnrollDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*EnrollDeviceResponse_Success
	//	*EnrollDeviceResponse_MacosChallenge
	//	*EnrollDeviceResponse_TpmChallenge
	Payload isEnrollDeviceResponse_Payload `protobuf_oneof:"payload"`
}

func (x *EnrollDeviceResponse) Reset() {
	*x = EnrollDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollDeviceResponse) ProtoMessage() {}

func (x *EnrollDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollDeviceResponse.ProtoReflect.Descriptor instead.
func (*EnrollDeviceResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{14}
}

func (m *EnrollDeviceResponse) GetPayload() isEnrollDeviceResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *EnrollDeviceResponse) GetSuccess() *EnrollDeviceSuccess {
	if x, ok := x.GetPayload().(*EnrollDeviceResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *EnrollDeviceResponse) GetMacosChallenge() *MacOSEnrollChallenge {
	if x, ok := x.GetPayload().(*EnrollDeviceResponse_MacosChallenge); ok {
		return x.MacosChallenge
	}
	return nil
}

func (x *EnrollDeviceResponse) GetTpmChallenge() *TPMEnrollChallenge {
	if x, ok := x.GetPayload().(*EnrollDeviceResponse_TpmChallenge); ok {
		return x.TpmChallenge
	}
	return nil
}

type isEnrollDeviceResponse_Payload interface {
	isEnrollDeviceResponse_Payload()
}

type EnrollDeviceResponse_Success struct {
	Success *EnrollDeviceSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type EnrollDeviceResponse_MacosChallenge struct {
	MacosChallenge *MacOSEnrollChallenge `protobuf:"bytes,2,opt,name=macos_challenge,json=macosChallenge,proto3,oneof"`
}

type EnrollDeviceResponse_TpmChallenge struct {
	TpmChallenge *TPMEnrollChallenge `protobuf:"bytes,3,opt,name=tpm_challenge,json=tpmChallenge,proto3,oneof"`
}

func (*EnrollDeviceResponse_Success) isEnrollDeviceResponse_Payload() {}

func (*EnrollDeviceResponse_MacosChallenge) isEnrollDeviceResponse_Payload() {}

func (*EnrollDeviceResponse_TpmChallenge) isEnrollDeviceResponse_Payload() {}

// EnrollDeviceInit initiates the enrollment ceremony.
type EnrollDeviceInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device enrollment token.
	// See CreateDevice or CreateDeviceEnrollToken.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// ID of the device credential.
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Device collected data.
	// Matched against the device registration information and any previously
	// collected data.
	DeviceData *DeviceCollectedData `protobuf:"bytes,3,opt,name=device_data,json=deviceData,proto3" json:"device_data,omitempty"`
	// Payload for macOS-specific data.
	Macos *MacOSEnrollPayload `protobuf:"bytes,4,opt,name=macos,proto3" json:"macos,omitempty"`
	// Payload for TPM-specific data. Used for Windows/Linux.
	Tpm *TPMEnrollPayload `protobuf:"bytes,5,opt,name=tpm,proto3" json:"tpm,omitempty"`
}

func (x *EnrollDeviceInit) Reset() {
	*x = EnrollDeviceInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollDeviceInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollDeviceInit) ProtoMessage() {}

func (x *EnrollDeviceInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollDeviceInit.ProtoReflect.Descriptor instead.
func (*EnrollDeviceInit) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{15}
}

func (x *EnrollDeviceInit) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *EnrollDeviceInit) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *EnrollDeviceInit) GetDeviceData() *DeviceCollectedData {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

func (x *EnrollDeviceInit) GetMacos() *MacOSEnrollPayload {
	if x != nil {
		return x.Macos
	}
	return nil
}

func (x *EnrollDeviceInit) GetTpm() *TPMEnrollPayload {
	if x != nil {
		return x.Tpm
	}
	return nil
}

// EnrollDeviceSuccess marks a successful device enrollment ceremony.
type EnrollDeviceSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The enrolled device.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *EnrollDeviceSuccess) Reset() {
	*x = EnrollDeviceSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollDeviceSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollDeviceSuccess) ProtoMessage() {}

func (x *EnrollDeviceSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollDeviceSuccess.ProtoReflect.Descriptor instead.
func (*EnrollDeviceSuccess) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{16}
}

func (x *EnrollDeviceSuccess) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// MacOSEnrollPayload is the macOS-specific enrollment payload.
type MacOSEnrollPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device public key marshaled as a PKIX, ASN.1 DER.
	PublicKeyDer []byte `protobuf:"bytes,2,opt,name=public_key_der,json=publicKeyDer,proto3" json:"public_key_der,omitempty"`
}

func (x *MacOSEnrollPayload) Reset() {
	*x = MacOSEnrollPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacOSEnrollPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacOSEnrollPayload) ProtoMessage() {}

func (x *MacOSEnrollPayload) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacOSEnrollPayload.ProtoReflect.Descriptor instead.
func (*MacOSEnrollPayload) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{17}
}

func (x *MacOSEnrollPayload) GetPublicKeyDer() []byte {
	if x != nil {
		return x.PublicKeyDer
	}
	return nil
}

// MacOSEnrollChallenge is a macOS enrollment challenge.
type MacOSEnrollChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Randomly-generated, opaque challenge to be signed using the device key.
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *MacOSEnrollChallenge) Reset() {
	*x = MacOSEnrollChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacOSEnrollChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacOSEnrollChallenge) ProtoMessage() {}

func (x *MacOSEnrollChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacOSEnrollChallenge.ProtoReflect.Descriptor instead.
func (*MacOSEnrollChallenge) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{18}
}

func (x *MacOSEnrollChallenge) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

// MacOSEnrollChallengeResponse is a macOS enrollment challenge response.
type MacOSEnrollChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signature over the challenge, using the device key.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MacOSEnrollChallengeResponse) Reset() {
	*x = MacOSEnrollChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacOSEnrollChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacOSEnrollChallengeResponse) ProtoMessage() {}

func (x *MacOSEnrollChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacOSEnrollChallengeResponse.ProtoReflect.Descriptor instead.
func (*MacOSEnrollChallengeResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{19}
}

func (x *MacOSEnrollChallengeResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// The payload containing TPM specific information required on device
// enrollment.
type TPMEnrollPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ek:
	//
	//	*TPMEnrollPayload_EkCert
	//	*TPMEnrollPayload_EkKey
	Ek isTPMEnrollPayload_Ek `protobuf_oneof:"ek"`
	// The attestation key and the parameters necessary to remotely verify it as
	// related to the endorsement key.
	AttestationParameters *TPMAttestationParameters `protobuf:"bytes,3,opt,name=attestation_parameters,json=attestationParameters,proto3" json:"attestation_parameters,omitempty"`
}

func (x *TPMEnrollPayload) Reset() {
	*x = TPMEnrollPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMEnrollPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMEnrollPayload) ProtoMessage() {}

func (x *TPMEnrollPayload) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMEnrollPayload.ProtoReflect.Descriptor instead.
func (*TPMEnrollPayload) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{20}
}

func (m *TPMEnrollPayload) GetEk() isTPMEnrollPayload_Ek {
	if m != nil {
		return m.Ek
	}
	return nil
}

func (x *TPMEnrollPayload) GetEkCert() []byte {
	if x, ok := x.GetEk().(*TPMEnrollPayload_EkCert); ok {
		return x.EkCert
	}
	return nil
}

func (x *TPMEnrollPayload) GetEkKey() []byte {
	if x, ok := x.GetEk().(*TPMEnrollPayload_EkKey); ok {
		return x.EkKey
	}
	return nil
}

func (x *TPMEnrollPayload) GetAttestationParameters() *TPMAttestationParameters {
	if x != nil {
		return x.AttestationParameters
	}
	return nil
}

type isTPMEnrollPayload_Ek interface {
	isTPMEnrollPayload_Ek()
}

type TPMEnrollPayload_EkCert struct {
	// The device's endorsement certificate in X509, ASN.1 DER form. This
	// certificate contains the public key of the endorsement key. This is
	// preferred to ek_key.
	EkCert []byte `protobuf:"bytes,1,opt,name=ek_cert,json=ekCert,proto3,oneof"`
}

type TPMEnrollPayload_EkKey struct {
	// The device's public endorsement key in PKIX, ASN.1 DER form. This is
	// used when a TPM does not contain any endorsement certificates.
	EkKey []byte `protobuf:"bytes,2,opt,name=ek_key,json=ekKey,proto3,oneof"`
}

func (*TPMEnrollPayload_EkCert) isTPMEnrollPayload_Ek() {}

func (*TPMEnrollPayload_EkKey) isTPMEnrollPayload_Ek() {}

// The attestation key and the parameters necessary to remotely verify it as
// related to the endorsement key.
// See https://pkg.go.dev/github.com/google/go-attestation/attest#AttestationParameters.
// This message excludes the `UseTCSDActivationFormat` field from the link above
// as it is TMP 1.x specific and always false.
type TPMAttestationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoded TPMT_PUBLIC structure containing the attestation public key
	// and signing parameters.
	Public []byte `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	// The properties of the attestation key, encoded as a TPMS_CREATION_DATA
	// structure.
	CreateData []byte `protobuf:"bytes,2,opt,name=create_data,json=createData,proto3" json:"create_data,omitempty"`
	// An assertion as to the details of the key, encoded as a TPMS_ATTEST
	// structure.
	CreateAttestation []byte `protobuf:"bytes,3,opt,name=create_attestation,json=createAttestation,proto3" json:"create_attestation,omitempty"`
	// A signature of create_attestation, encoded as a TPMT_SIGNATURE structure.
	CreateSignature []byte `protobuf:"bytes,4,opt,name=create_signature,json=createSignature,proto3" json:"create_signature,omitempty"`
}

func (x *TPMAttestationParameters) Reset() {
	*x = TPMAttestationParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMAttestationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMAttestationParameters) ProtoMessage() {}

func (x *TPMAttestationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMAttestationParameters.ProtoReflect.Descriptor instead.
func (*TPMAttestationParameters) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{21}
}

func (x *TPMAttestationParameters) GetPublic() []byte {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *TPMAttestationParameters) GetCreateData() []byte {
	if x != nil {
		return x.CreateData
	}
	return nil
}

func (x *TPMAttestationParameters) GetCreateAttestation() []byte {
	if x != nil {
		return x.CreateAttestation
	}
	return nil
}

func (x *TPMAttestationParameters) GetCreateSignature() []byte {
	if x != nil {
		return x.CreateSignature
	}
	return nil
}

// The challenge sent to the client by the server during enrollment.
// The challenge involves two parts:
// - Solving an encrypted credential with `ActivateCredential`.
// - Producing a platform attestation using the provided nonce.
type TPMEnrollChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encrypted credential for the client to prove possession of the EK and
	// AK.
	EncryptedCredential *TPMEncryptedCredential `protobuf:"bytes,1,opt,name=encrypted_credential,json=encryptedCredential,proto3" json:"encrypted_credential,omitempty"`
	// The nonce to use when producing the quotes over the PCRs with the TPM
	// during the platform attestation.
	AttestationNonce []byte `protobuf:"bytes,2,opt,name=attestation_nonce,json=attestationNonce,proto3" json:"attestation_nonce,omitempty"`
}

func (x *TPMEnrollChallenge) Reset() {
	*x = TPMEnrollChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMEnrollChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMEnrollChallenge) ProtoMessage() {}

func (x *TPMEnrollChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMEnrollChallenge.ProtoReflect.Descriptor instead.
func (*TPMEnrollChallenge) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{22}
}

func (x *TPMEnrollChallenge) GetEncryptedCredential() *TPMEncryptedCredential {
	if x != nil {
		return x.EncryptedCredential
	}
	return nil
}

func (x *TPMEnrollChallenge) GetAttestationNonce() []byte {
	if x != nil {
		return x.AttestationNonce
	}
	return nil
}

// These values are used by the TPM2.0 `ActivateCredential` command to produce
// the solution which proves possession of the EK and AK.
//
// For a more in-depth description see:
// - https://pkg.go.dev/github.com/google/go-attestation/attest#EncryptedCredential
// - https://trustedcomputinggroup.org/wp-content/uploads/TCG_TPM2_r1p59_Part3_Commands_code_pub.pdf (Heading 12.5.1 "TPM2_ActivateCredential" "General Description")
// - https://github.com/google/go-attestation/blob/v0.4.3/attest/activation.go#L199
// - https://github.com/google/go-tpm/blob/v0.3.3/tpm2/credactivation/credential_activation.go#L61
type TPMEncryptedCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `credential_blob` parameter to be used with the `ActivateCredential`
	// command. This is used with the decrypted value of `secret` in a
	// cryptographic process to decrypt the solution.
	CredentialBlob []byte `protobuf:"bytes,1,opt,name=credential_blob,json=credentialBlob,proto3" json:"credential_blob,omitempty"`
	// The `secret` parameter to be used with `ActivateCredential`. This is a
	// seed which can be decrypted with the EK. The decrypted seed is then used
	// when decrypting `credential_blob`.
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *TPMEncryptedCredential) Reset() {
	*x = TPMEncryptedCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMEncryptedCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMEncryptedCredential) ProtoMessage() {}

func (x *TPMEncryptedCredential) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMEncryptedCredential.ProtoReflect.Descriptor instead.
func (*TPMEncryptedCredential) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{23}
}

func (x *TPMEncryptedCredential) GetCredentialBlob() []byte {
	if x != nil {
		return x.CredentialBlob
	}
	return nil
}

func (x *TPMEncryptedCredential) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

// The enrollment challenge response containing the solution returned by
// calling the TPM2.0 `ActivateCredential` command on the client with the
// parameters provided in `TPMEnrollChallenge`.
type TPMEnrollChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client's solution to `TPMEncryptedCredential` included in
	// `TPMEnrollChallenge` using ActivateCredential.
	Solution []byte `protobuf:"bytes,1,opt,name=solution,proto3" json:"solution,omitempty"`
	// The result of the client's platform attestation with the nonce provided
	// in `TPMEnrollChallenge`.
	PlatformParameters *TPMPlatformParameters `protobuf:"bytes,2,opt,name=platform_parameters,json=platformParameters,proto3" json:"platform_parameters,omitempty"`
}

func (x *TPMEnrollChallengeResponse) Reset() {
	*x = TPMEnrollChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMEnrollChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMEnrollChallengeResponse) ProtoMessage() {}

func (x *TPMEnrollChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMEnrollChallengeResponse.ProtoReflect.Descriptor instead.
func (*TPMEnrollChallengeResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{24}
}

func (x *TPMEnrollChallengeResponse) GetSolution() []byte {
	if x != nil {
		return x.Solution
	}
	return nil
}

func (x *TPMEnrollChallengeResponse) GetPlatformParameters() *TPMPlatformParameters {
	if x != nil {
		return x.PlatformParameters
	}
	return nil
}

// Request for AuthenticateDevice.
//
// Authentication ceremony flow:
// -> AuthenticateDeviceInit (client)
// <- AuthenticateDeviceChallenge (server)
// -> AuthenticateDeviceChallengeResponse
// <- UserCertificates (regular authn) or ConfirmationToken (web authn)
type AuthenticateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthenticateDeviceRequest_Init
	//	*AuthenticateDeviceRequest_ChallengeResponse
	//	*AuthenticateDeviceRequest_TpmChallengeResponse
	Payload isAuthenticateDeviceRequest_Payload `protobuf_oneof:"payload"`
}

func (x *AuthenticateDeviceRequest) Reset() {
	*x = AuthenticateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateDeviceRequest) ProtoMessage() {}

func (x *AuthenticateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateDeviceRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{25}
}

func (m *AuthenticateDeviceRequest) GetPayload() isAuthenticateDeviceRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthenticateDeviceRequest) GetInit() *AuthenticateDeviceInit {
	if x, ok := x.GetPayload().(*AuthenticateDeviceRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *AuthenticateDeviceRequest) GetChallengeResponse() *AuthenticateDeviceChallengeResponse {
	if x, ok := x.GetPayload().(*AuthenticateDeviceRequest_ChallengeResponse); ok {
		return x.ChallengeResponse
	}
	return nil
}

func (x *AuthenticateDeviceRequest) GetTpmChallengeResponse() *TPMAuthenticateDeviceChallengeResponse {
	if x, ok := x.GetPayload().(*AuthenticateDeviceRequest_TpmChallengeResponse); ok {
		return x.TpmChallengeResponse
	}
	return nil
}

type isAuthenticateDeviceRequest_Payload interface {
	isAuthenticateDeviceRequest_Payload()
}

type AuthenticateDeviceRequest_Init struct {
	Init *AuthenticateDeviceInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type AuthenticateDeviceRequest_ChallengeResponse struct {
	ChallengeResponse *AuthenticateDeviceChallengeResponse `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

type AuthenticateDeviceRequest_TpmChallengeResponse struct {
	TpmChallengeResponse *TPMAuthenticateDeviceChallengeResponse `protobuf:"bytes,3,opt,name=tpm_challenge_response,json=tpmChallengeResponse,proto3,oneof"`
}

func (*AuthenticateDeviceRequest_Init) isAuthenticateDeviceRequest_Payload() {}

func (*AuthenticateDeviceRequest_ChallengeResponse) isAuthenticateDeviceRequest_Payload() {}

func (*AuthenticateDeviceRequest_TpmChallengeResponse) isAuthenticateDeviceRequest_Payload() {}

// Response for AuthenticateDevice.
type AuthenticateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthenticateDeviceResponse_Challenge
	//	*AuthenticateDeviceResponse_UserCertificates
	//	*AuthenticateDeviceResponse_TpmChallenge
	//	*AuthenticateDeviceResponse_ConfirmationToken
	Payload isAuthenticateDeviceResponse_Payload `protobuf_oneof:"payload"`
}

func (x *AuthenticateDeviceResponse) Reset() {
	*x = AuthenticateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateDeviceResponse) ProtoMessage() {}

func (x *AuthenticateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateDeviceResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{26}
}

func (m *AuthenticateDeviceResponse) GetPayload() isAuthenticateDeviceResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthenticateDeviceResponse) GetChallenge() *AuthenticateDeviceChallenge {
	if x, ok := x.GetPayload().(*AuthenticateDeviceResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (x *AuthenticateDeviceResponse) GetUserCertificates() *UserCertificates {
	if x, ok := x.GetPayload().(*AuthenticateDeviceResponse_UserCertificates); ok {
		return x.UserCertificates
	}
	return nil
}

func (x *AuthenticateDeviceResponse) GetTpmChallenge() *TPMAuthenticateDeviceChallenge {
	if x, ok := x.GetPayload().(*AuthenticateDeviceResponse_TpmChallenge); ok {
		return x.TpmChallenge
	}
	return nil
}

func (x *AuthenticateDeviceResponse) GetConfirmationToken() *DeviceConfirmationToken {
	if x, ok := x.GetPayload().(*AuthenticateDeviceResponse_ConfirmationToken); ok {
		return x.ConfirmationToken
	}
	return nil
}

type isAuthenticateDeviceResponse_Payload interface {
	isAuthenticateDeviceResponse_Payload()
}

type AuthenticateDeviceResponse_Challenge struct {
	Challenge *AuthenticateDeviceChallenge `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type AuthenticateDeviceResponse_UserCertificates struct {
	// User certificates are returned as the result of a successful device
	// authentication attempt ("regular" or non-web authentication).
	UserCertificates *UserCertificates `protobuf:"bytes,2,opt,name=user_certificates,json=userCertificates,proto3,oneof"`
}

type AuthenticateDeviceResponse_TpmChallenge struct {
	TpmChallenge *TPMAuthenticateDeviceChallenge `protobuf:"bytes,3,opt,name=tpm_challenge,json=tpmChallenge,proto3,oneof"`
}

type AuthenticateDeviceResponse_ConfirmationToken struct {
	// A confirmation token is returned as the result of a successful device web
	// authentication.
	//
	// See AuthenticateDeviceInit.device_web_token.
	ConfirmationToken *DeviceConfirmationToken `protobuf:"bytes,4,opt,name=confirmation_token,json=confirmationToken,proto3,oneof"`
}

func (*AuthenticateDeviceResponse_Challenge) isAuthenticateDeviceResponse_Payload() {}

func (*AuthenticateDeviceResponse_UserCertificates) isAuthenticateDeviceResponse_Payload() {}

func (*AuthenticateDeviceResponse_TpmChallenge) isAuthenticateDeviceResponse_Payload() {}

func (*AuthenticateDeviceResponse_ConfirmationToken) isAuthenticateDeviceResponse_Payload() {}

// AuthenticateDeviceInit initiates the device authentication ceremony.
type AuthenticateDeviceInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In-band user certificates to augment with device extensions.
	//   - The x509 certificate is acquired from the mTLS connection, thus the
	//     in-band certificate is ignored.
	//   - All certificates must be valid and issued by the Teleport CA.
	//   - All certificates must match (same public key, same Teleport user, plus
	//     whatever additional checks the backend sees fit).
	//   - Augmented certificates have the same expiration as the original
	//     certificates.
	UserCertificates *UserCertificates `protobuf:"bytes,1,opt,name=user_certificates,json=userCertificates,proto3" json:"user_certificates,omitempty"`
	// ID of the enrolled device credential.
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Device collected data.
	// Matched against the device registration information and any previously
	// collected data.
	DeviceData *DeviceCollectedData `protobuf:"bytes,3,opt,name=device_data,json=deviceData,proto3" json:"device_data,omitempty"`
	// If present, on-behalf-of device authentication is performed.
	// The user_certificates input field is ignored and no certificate data is
	// returned to the caller, instead a confirmation_token is returned in
	// the last step.
	//
	// See ConfirmDeviceWebAuthentication.
	DeviceWebToken *DeviceWebToken `protobuf:"bytes,4,opt,name=device_web_token,json=deviceWebToken,proto3" json:"device_web_token,omitempty"`
}

func (x *AuthenticateDeviceInit) Reset() {
	*x = AuthenticateDeviceInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateDeviceInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateDeviceInit) ProtoMessage() {}

func (x *AuthenticateDeviceInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateDeviceInit.ProtoReflect.Descriptor instead.
func (*AuthenticateDeviceInit) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{27}
}

func (x *AuthenticateDeviceInit) GetUserCertificates() *UserCertificates {
	if x != nil {
		return x.UserCertificates
	}
	return nil
}

func (x *AuthenticateDeviceInit) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *AuthenticateDeviceInit) GetDeviceData() *DeviceCollectedData {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

func (x *AuthenticateDeviceInit) GetDeviceWebToken() *DeviceWebToken {
	if x != nil {
		return x.DeviceWebToken
	}
	return nil
}

// Request for ConfirmDeviceWebAuthentication.
type ConfirmDeviceWebAuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Confirmation token to be spent.
	ConfirmationToken *DeviceConfirmationToken `protobuf:"bytes,1,opt,name=confirmation_token,json=confirmationToken,proto3" json:"confirmation_token,omitempty"`
	// Web Session identifier of the session that started this request, via
	// Teleport Proxy.
	//
	// For the request to be successful the Web Session must match the session
	// that started the authentication attempt.
	CurrentWebSessionId string `protobuf:"bytes,2,opt,name=current_web_session_id,json=currentWebSessionId,proto3" json:"current_web_session_id,omitempty"`
}

func (x *ConfirmDeviceWebAuthenticationRequest) Reset() {
	*x = ConfirmDeviceWebAuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmDeviceWebAuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmDeviceWebAuthenticationRequest) ProtoMessage() {}

func (x *ConfirmDeviceWebAuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmDeviceWebAuthenticationRequest.ProtoReflect.Descriptor instead.
func (*ConfirmDeviceWebAuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{28}
}

func (x *ConfirmDeviceWebAuthenticationRequest) GetConfirmationToken() *DeviceConfirmationToken {
	if x != nil {
		return x.ConfirmationToken
	}
	return nil
}

func (x *ConfirmDeviceWebAuthenticationRequest) GetCurrentWebSessionId() string {
	if x != nil {
		return x.CurrentWebSessionId
	}
	return ""
}

// Response for ConfirmDeviceWebAuthentication.
type ConfirmDeviceWebAuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmDeviceWebAuthenticationResponse) Reset() {
	*x = ConfirmDeviceWebAuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmDeviceWebAuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmDeviceWebAuthenticationResponse) ProtoMessage() {}

func (x *ConfirmDeviceWebAuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmDeviceWebAuthenticationResponse.ProtoReflect.Descriptor instead.
func (*ConfirmDeviceWebAuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{29}
}

// Request for SyncInventory.
//
// A typical message sequence is as follows:
// (-> means client-to-server, <- means server-to-client)
// -> SyncInventoryStart
// <- SyncInventoryAck
// (loop)
// -> SyncInventoryDevices (add/remove devices)
// <- SyncInventoryResult
// (end loop)
// -> SyncInventoryEnd
// (loop until server closes the stream, zero or more times)
// <- SyncInventoryMissingDevices
// -> SyncInventoryDevices (removals only)
// <- SyncInventoryResult
// (end loop)
type SyncInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*SyncInventoryRequest_Start
	//	*SyncInventoryRequest_End
	//	*SyncInventoryRequest_DevicesToUpsert
	//	*SyncInventoryRequest_DevicesToRemove
	Payload isSyncInventoryRequest_Payload `protobuf_oneof:"payload"`
}

func (x *SyncInventoryRequest) Reset() {
	*x = SyncInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryRequest) ProtoMessage() {}

func (x *SyncInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryRequest.ProtoReflect.Descriptor instead.
func (*SyncInventoryRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{30}
}

func (m *SyncInventoryRequest) GetPayload() isSyncInventoryRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SyncInventoryRequest) GetStart() *SyncInventoryStart {
	if x, ok := x.GetPayload().(*SyncInventoryRequest_Start); ok {
		return x.Start
	}
	return nil
}

func (x *SyncInventoryRequest) GetEnd() *SyncInventoryEnd {
	if x, ok := x.GetPayload().(*SyncInventoryRequest_End); ok {
		return x.End
	}
	return nil
}

func (x *SyncInventoryRequest) GetDevicesToUpsert() *SyncInventoryDevices {
	if x, ok := x.GetPayload().(*SyncInventoryRequest_DevicesToUpsert); ok {
		return x.DevicesToUpsert
	}
	return nil
}

func (x *SyncInventoryRequest) GetDevicesToRemove() *SyncInventoryDevices {
	if x, ok := x.GetPayload().(*SyncInventoryRequest_DevicesToRemove); ok {
		return x.DevicesToRemove
	}
	return nil
}

type isSyncInventoryRequest_Payload interface {
	isSyncInventoryRequest_Payload()
}

type SyncInventoryRequest_Start struct {
	Start *SyncInventoryStart `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type SyncInventoryRequest_End struct {
	End *SyncInventoryEnd `protobuf:"bytes,2,opt,name=end,proto3,oneof"`
}

type SyncInventoryRequest_DevicesToUpsert struct {
	DevicesToUpsert *SyncInventoryDevices `protobuf:"bytes,3,opt,name=devices_to_upsert,json=devicesToUpsert,proto3,oneof"`
}

type SyncInventoryRequest_DevicesToRemove struct {
	DevicesToRemove *SyncInventoryDevices `protobuf:"bytes,4,opt,name=devices_to_remove,json=devicesToRemove,proto3,oneof"`
}

func (*SyncInventoryRequest_Start) isSyncInventoryRequest_Payload() {}

func (*SyncInventoryRequest_End) isSyncInventoryRequest_Payload() {}

func (*SyncInventoryRequest_DevicesToUpsert) isSyncInventoryRequest_Payload() {}

func (*SyncInventoryRequest_DevicesToRemove) isSyncInventoryRequest_Payload() {}

// Response for SyncInventory.
type SyncInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*SyncInventoryResponse_Ack
	//	*SyncInventoryResponse_Result
	//	*SyncInventoryResponse_MissingDevices
	Payload isSyncInventoryResponse_Payload `protobuf_oneof:"payload"`
}

func (x *SyncInventoryResponse) Reset() {
	*x = SyncInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryResponse) ProtoMessage() {}

func (x *SyncInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryResponse.ProtoReflect.Descriptor instead.
func (*SyncInventoryResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{31}
}

func (m *SyncInventoryResponse) GetPayload() isSyncInventoryResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SyncInventoryResponse) GetAck() *SyncInventoryAck {
	if x, ok := x.GetPayload().(*SyncInventoryResponse_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *SyncInventoryResponse) GetResult() *SyncInventoryResult {
	if x, ok := x.GetPayload().(*SyncInventoryResponse_Result); ok {
		return x.Result
	}
	return nil
}

func (x *SyncInventoryResponse) GetMissingDevices() *SyncInventoryMissingDevices {
	if x, ok := x.GetPayload().(*SyncInventoryResponse_MissingDevices); ok {
		return x.MissingDevices
	}
	return nil
}

type isSyncInventoryResponse_Payload interface {
	isSyncInventoryResponse_Payload()
}

type SyncInventoryResponse_Ack struct {
	Ack *SyncInventoryAck `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type SyncInventoryResponse_Result struct {
	Result *SyncInventoryResult `protobuf:"bytes,2,opt,name=result,proto3,oneof"`
}

type SyncInventoryResponse_MissingDevices struct {
	MissingDevices *SyncInventoryMissingDevices `protobuf:"bytes,3,opt,name=missing_devices,json=missingDevices,proto3,oneof"`
}

func (*SyncInventoryResponse_Ack) isSyncInventoryResponse_Payload() {}

func (*SyncInventoryResponse_Result) isSyncInventoryResponse_Payload() {}

func (*SyncInventoryResponse_MissingDevices) isSyncInventoryResponse_Payload() {}

// SyncInventoryStart starts the inventory sync.
type SyncInventoryStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source of the inventory sync.
	// Used for all devices. The `source` field in individual devices is ignored
	// by this RPC.
	Source *DeviceSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// If true, the server keeps track of the devices upserted during the sync.
	// After receiving the [SyncInventoryEnd] message, the server informs the
	// client of all devices that are present in storage but not observed in the
	// upserts.
	// See [SyncInventoryRequest] and [SyncInventoryMissingDevices] for details.
	TrackMissingDevices bool `protobuf:"varint,4,opt,name=track_missing_devices,json=trackMissingDevices,proto3" json:"track_missing_devices,omitempty"`
}

func (x *SyncInventoryStart) Reset() {
	*x = SyncInventoryStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryStart) ProtoMessage() {}

func (x *SyncInventoryStart) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryStart.ProtoReflect.Descriptor instead.
func (*SyncInventoryStart) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{32}
}

func (x *SyncInventoryStart) GetSource() *DeviceSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SyncInventoryStart) GetTrackMissingDevices() bool {
	if x != nil {
		return x.TrackMissingDevices
	}
	return false
}

// SyncInventoryEnd ends the inventory sync, signaling that no more
// SyncInventoryDevices messages will be sent by the client.
type SyncInventoryEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncInventoryEnd) Reset() {
	*x = SyncInventoryEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryEnd) ProtoMessage() {}

func (x *SyncInventoryEnd) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryEnd.ProtoReflect.Descriptor instead.
func (*SyncInventoryEnd) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{33}
}

// SyncInventoryDevices transports devices to add/update/remove.
// Removals only need identifying fields to be set.
type SyncInventoryDevices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices to sync.
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *SyncInventoryDevices) Reset() {
	*x = SyncInventoryDevices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryDevices) ProtoMessage() {}

func (x *SyncInventoryDevices) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryDevices.ProtoReflect.Descriptor instead.
func (*SyncInventoryDevices) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{34}
}

func (x *SyncInventoryDevices) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// SyncInventoryAck is used to confirm successful processing of messages that
// lack a more specific response.
type SyncInventoryAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncInventoryAck) Reset() {
	*x = SyncInventoryAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryAck) ProtoMessage() {}

func (x *SyncInventoryAck) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryAck.ProtoReflect.Descriptor instead.
func (*SyncInventoryAck) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{35}
}

// SyncInventoryResult is the response for SyncInventoryDevices or
// SyncInventoryEnd
// It lists all synced/deleted devices.
type SyncInventoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices modified, in the same order as the input when applicable.
	Devices []*DeviceOrStatus `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *SyncInventoryResult) Reset() {
	*x = SyncInventoryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryResult) ProtoMessage() {}

func (x *SyncInventoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryResult.ProtoReflect.Descriptor instead.
func (*SyncInventoryResult) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{36}
}

func (x *SyncInventoryResult) GetDevices() []*DeviceOrStatus {
	if x != nil {
		return x.Devices
	}
	return nil
}

// SyncInventoryMissingDevices informs the sync client of all stored devices
// that were not observed in upserts during the sync.
//
// Requires `track_missing_devices` to be set in the [SyncInventoryStart]
// message.
//
// The client must follow up with a [SyncInventoryDevices] message, including
// any devices to be deleted.
type SyncInventoryMissingDevices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices missing from the client-side sync.
	// Guaranteed to have the following fields: id, os_type, asset_tag and
	// profile.external_id.
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *SyncInventoryMissingDevices) Reset() {
	*x = SyncInventoryMissingDevices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInventoryMissingDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInventoryMissingDevices) ProtoMessage() {}

func (x *SyncInventoryMissingDevices) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInventoryMissingDevices.ProtoReflect.Descriptor instead.
func (*SyncInventoryMissingDevices) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{37}
}

func (x *SyncInventoryMissingDevices) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// Superseded by ResourceUsageService.GetUsage.
type GetDevicesUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDevicesUsageRequest) Reset() {
	*x = GetDevicesUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicesUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesUsageRequest) ProtoMessage() {}

func (x *GetDevicesUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesUsageRequest.ProtoReflect.Descriptor instead.
func (*GetDevicesUsageRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP(), []int{38}
}

var File_teleport_devicetrust_v1_devicetrust_service_proto protoreflect.FileDescriptor

var file_teleport_devicetrust_v1_devicetrust_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x33, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x77, 0x65, 0x62, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x70, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x7c, 0x0a, 0x13, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x12,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x4f, 0x72, 0x54, 0x61, 0x67, 0x22, 0x50,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x78, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5e, 0x0a,
	0x19, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x66, 0x0a,
	0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc1, 0x02, 0x0a, 0x13, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x71, 0x0a, 0x18, 0x6d, 0x61,
	0x63, 0x6f, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a,
	0x16, 0x74, 0x70, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x70, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x14, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x6f,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x4f,
	0x53, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x74, 0x70, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x70, 0x6d, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x41, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x6d, 0x61,
	0x63, 0x6f, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x74, 0x70, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x03, 0x74, 0x70, 0x6d,
	0x22, 0x4e, 0x0a, 0x13, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x3a, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x14,
	0x4d, 0x61, 0x63, 0x4f, 0x53, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x22, 0x3c, 0x0a, 0x1c, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x10, 0x54, 0x50, 0x4d, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6b, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6b, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x17, 0x0a, 0x06, 0x65, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x68, 0x0a, 0x16, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x65, 0x6b, 0x22, 0xad, 0x01, 0x0a, 0x18, 0x54, 0x50,
	0x4d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x54, 0x50,
	0x4d, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x62, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x22, 0x59, 0x0a, 0x16, 0x54, 0x50, 0x4d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x99, 0x01, 0x0a,
	0x1a, 0x54, 0x50, 0x4d, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x50, 0x4d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x19, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x6d, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16,
	0x74, 0x70, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x74, 0x70, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x9a, 0x03, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x5e, 0x0a, 0x0d, 0x74, 0x70, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x50, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x70, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb7, 0x02,
	0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77,
	0x65, 0x62, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65,
	0x62, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xdf, 0x02, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x3d, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x5b,
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xac, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x32, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x22, 0x51, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x6b, 0x22, 0x58, 0x0a, 0x13, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x1b, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x18,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x59, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x02, 0x32, 0xad, 0x0c, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x68, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x68, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x42, 0x75,
	0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x37, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6f, 0x0a, 0x0c, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x1e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x72, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76,
	0x31, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescOnce sync.Once
	file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescData = file_teleport_devicetrust_v1_devicetrust_service_proto_rawDesc
)

func file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescGZIP() []byte {
	file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescOnce.Do(func() {
		file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescData)
	})
	return file_teleport_devicetrust_v1_devicetrust_service_proto_rawDescData
}

var file_teleport_devicetrust_v1_devicetrust_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_teleport_devicetrust_v1_devicetrust_service_proto_goTypes = []any{
	(DeviceView)(0),                                // 0: teleport.devicetrust.v1.DeviceView
	(*CreateDeviceRequest)(nil),                    // 1: teleport.devicetrust.v1.CreateDeviceRequest
	(*UpdateDeviceRequest)(nil),                    // 2: teleport.devicetrust.v1.UpdateDeviceRequest
	(*UpsertDeviceRequest)(nil),                    // 3: teleport.devicetrust.v1.UpsertDeviceRequest
	(*DeleteDeviceRequest)(nil),                    // 4: teleport.devicetrust.v1.DeleteDeviceRequest
	(*FindDevicesRequest)(nil),                     // 5: teleport.devicetrust.v1.FindDevicesRequest
	(*FindDevicesResponse)(nil),                    // 6: teleport.devicetrust.v1.FindDevicesResponse
	(*GetDeviceRequest)(nil),                       // 7: teleport.devicetrust.v1.GetDeviceRequest
	(*ListDevicesRequest)(nil),                     // 8: teleport.devicetrust.v1.ListDevicesRequest
	(*ListDevicesResponse)(nil),                    // 9: teleport.devicetrust.v1.ListDevicesResponse
	(*BulkCreateDevicesRequest)(nil),               // 10: teleport.devicetrust.v1.BulkCreateDevicesRequest
	(*BulkCreateDevicesResponse)(nil),              // 11: teleport.devicetrust.v1.BulkCreateDevicesResponse
	(*DeviceOrStatus)(nil),                         // 12: teleport.devicetrust.v1.DeviceOrStatus
	(*CreateDeviceEnrollTokenRequest)(nil),         // 13: teleport.devicetrust.v1.CreateDeviceEnrollTokenRequest
	(*EnrollDeviceRequest)(nil),                    // 14: teleport.devicetrust.v1.EnrollDeviceRequest
	(*EnrollDeviceResponse)(nil),                   // 15: teleport.devicetrust.v1.EnrollDeviceResponse
	(*EnrollDeviceInit)(nil),                       // 16: teleport.devicetrust.v1.EnrollDeviceInit
	(*EnrollDeviceSuccess)(nil),                    // 17: teleport.devicetrust.v1.EnrollDeviceSuccess
	(*MacOSEnrollPayload)(nil),                     // 18: teleport.devicetrust.v1.MacOSEnrollPayload
	(*MacOSEnrollChallenge)(nil),                   // 19: teleport.devicetrust.v1.MacOSEnrollChallenge
	(*MacOSEnrollChallengeResponse)(nil),           // 20: teleport.devicetrust.v1.MacOSEnrollChallengeResponse
	(*TPMEnrollPayload)(nil),                       // 21: teleport.devicetrust.v1.TPMEnrollPayload
	(*TPMAttestationParameters)(nil),               // 22: teleport.devicetrust.v1.TPMAttestationParameters
	(*TPMEnrollChallenge)(nil),                     // 23: teleport.devicetrust.v1.TPMEnrollChallenge
	(*TPMEncryptedCredential)(nil),                 // 24: teleport.devicetrust.v1.TPMEncryptedCredential
	(*TPMEnrollChallengeResponse)(nil),             // 25: teleport.devicetrust.v1.TPMEnrollChallengeResponse
	(*AuthenticateDeviceRequest)(nil),              // 26: teleport.devicetrust.v1.AuthenticateDeviceRequest
	(*AuthenticateDeviceResponse)(nil),             // 27: teleport.devicetrust.v1.AuthenticateDeviceResponse
	(*AuthenticateDeviceInit)(nil),                 // 28: teleport.devicetrust.v1.AuthenticateDeviceInit
	(*ConfirmDeviceWebAuthenticationRequest)(nil),  // 29: teleport.devicetrust.v1.ConfirmDeviceWebAuthenticationRequest
	(*ConfirmDeviceWebAuthenticationResponse)(nil), // 30: teleport.devicetrust.v1.ConfirmDeviceWebAuthenticationResponse
	(*SyncInventoryRequest)(nil),                   // 31: teleport.devicetrust.v1.SyncInventoryRequest
	(*SyncInventoryResponse)(nil),                  // 32: teleport.devicetrust.v1.SyncInventoryResponse
	(*SyncInventoryStart)(nil),                     // 33: teleport.devicetrust.v1.SyncInventoryStart
	(*SyncInventoryEnd)(nil),                       // 34: teleport.devicetrust.v1.SyncInventoryEnd
	(*SyncInventoryDevices)(nil),                   // 35: teleport.devicetrust.v1.SyncInventoryDevices
	(*SyncInventoryAck)(nil),                       // 36: teleport.devicetrust.v1.SyncInventoryAck
	(*SyncInventoryResult)(nil),                    // 37: teleport.devicetrust.v1.SyncInventoryResult
	(*SyncInventoryMissingDevices)(nil),            // 38: teleport.devicetrust.v1.SyncInventoryMissingDevices
	(*GetDevicesUsageRequest)(nil),                 // 39: teleport.devicetrust.v1.GetDevicesUsageRequest
	(*Device)(nil),                                 // 40: teleport.devicetrust.v1.Device
	(*timestamppb.Timestamp)(nil),                  // 41: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),                  // 42: google.protobuf.FieldMask
	(*status.Status)(nil),                          // 43: google.rpc.Status
	(*DeviceCollectedData)(nil),                    // 44: teleport.devicetrust.v1.DeviceCollectedData
	(*TPMPlatformParameters)(nil),                  // 45: teleport.devicetrust.v1.TPMPlatformParameters
	(*AuthenticateDeviceChallengeResponse)(nil),    // 46: teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
	(*TPMAuthenticateDeviceChallengeResponse)(nil), // 47: teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
	(*AuthenticateDeviceChallenge)(nil),            // 48: teleport.devicetrust.v1.AuthenticateDeviceChallenge
	(*UserCertificates)(nil),                       // 49: teleport.devicetrust.v1.UserCertificates
	(*TPMAuthenticateDeviceChallenge)(nil),         // 50: teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
	(*DeviceConfirmationToken)(nil),                // 51: teleport.devicetrust.v1.DeviceConfirmationToken
	(*DeviceWebToken)(nil),                         // 52: teleport.devicetrust.v1.DeviceWebToken
	(*DeviceSource)(nil),                           // 53: teleport.devicetrust.v1.DeviceSource
	(*emptypb.Empty)(nil),                          // 54: google.protobuf.Empty
	(*DeviceEnrollToken)(nil),                      // 55: teleport.devicetrust.v1.DeviceEnrollToken
	(*DevicesUsage)(nil),                           // 56: teleport.devicetrust.v1.DevicesUsage
}
var file_teleport_devicetrust_v1_devicetrust_service_proto_depIdxs = []int32{
	40, // 0: teleport.devicetrust.v1.CreateDeviceRequest.device:type_name -> teleport.devicetrust.v1.Device
	41, // 1: teleport.devicetrust.v1.CreateDeviceRequest.enroll_token_expire_time:type_name -> google.protobuf.Timestamp
	40, // 2: teleport.devicetrust.v1.UpdateDeviceRequest.device:type_name -> teleport.devicetrust.v1.Device
	42, // 3: teleport.devicetrust.v1.UpdateDeviceRequest.update_mask:type_name -> google.protobuf.FieldMask
	40, // 4: teleport.devicetrust.v1.UpsertDeviceRequest.device:type_name -> teleport.devicetrust.v1.Device
	40, // 5: teleport.devicetrust.v1.FindDevicesResponse.devices:type_name -> teleport.devicetrust.v1.Device
	0,  // 6: teleport.devicetrust.v1.ListDevicesRequest.view:type_name -> teleport.devicetrust.v1.DeviceView
	40, // 7: teleport.devicetrust.v1.ListDevicesResponse.devices:type_name -> teleport.devicetrust.v1.Device
	40, // 8: teleport.devicetrust.v1.BulkCreateDevicesRequest.devices:type_name -> teleport.devicetrust.v1.Device
	12, // 9: teleport.devicetrust.v1.BulkCreateDevicesResponse.devices:type_name -> teleport.devicetrust.v1.DeviceOrStatus
	43, // 10: teleport.devicetrust.v1.DeviceOrStatus.status:type_name -> google.rpc.Status
	44, // 11: teleport.devicetrust.v1.CreateDeviceEnrollTokenRequest.device_data:type_name -> teleport.devicetrust.v1.DeviceCollectedData
	41, // 12: teleport.devicetrust.v1.CreateDeviceEnrollTokenRequest.expire_time:type_name -> google.protobuf.Timestamp
	16, // 13: teleport.devicetrust.v1.EnrollDeviceRequest.init:type_name -> teleport.devicetrust.v1.EnrollDeviceInit
	20, // 14: teleport.devicetrust.v1.EnrollDeviceRequest.macos_challenge_response:type_name -> teleport.devicetrust.v1.MacOSEnrollChallengeResponse
	25, // 15: teleport.devicetrust.v1.EnrollDeviceRequest.tpm_challenge_response:type_name -> teleport.devicetrust.v1.TPMEnrollChallengeResponse
	17, // 16: teleport.devicetrust.v1.EnrollDeviceResponse.success:type_name -> teleport.devicetrust.v1.EnrollDeviceSuccess
	19, // 17: teleport.devicetrust.v1.EnrollDeviceResponse.macos_challenge:type_name -> teleport.devicetrust.v1.MacOSEnrollChallenge
	23, // 18: teleport.devicetrust.v1.EnrollDeviceResponse.tpm_challenge:type_name -> teleport.devicetrust.v1.TPMEnrollChallenge
	44, // 19: teleport.devicetrust.v1.EnrollDeviceInit.device_data:type_name -> teleport.devicetrust.v1.DeviceCollectedData
	18, // 20: teleport.devicetrust.v1.EnrollDeviceInit.macos:type_name -> teleport.devicetrust.v1.MacOSEnrollPayload
	21, // 21: teleport.devicetrust.v1.EnrollDeviceInit.tpm:type_name -> teleport.devicetrust.v1.TPMEnrollPayload
	40, // 22: teleport.devicetrust.v1.EnrollDeviceSuccess.device:type_name -> teleport.devicetrust.v1.Device
	22, // 23: teleport.devicetrust.v1.TPMEnrollPayload.attestation_parameters:type_name -> teleport.devicetrust.v1.TPMAttestationParameters
	24, // 24: teleport.devicetrust.v1.TPMEnrollChallenge.encrypted_credential:type_name -> teleport.devicetrust.v1.TPMEncryptedCredential
	45, // 25: teleport.devicetrust.v1.TPMEnrollChallengeResponse.platform_parameters:type_name -> teleport.devicetrust.v1.TPMPlatformParameters
	28, // 26: teleport.devicetrust.v1.AuthenticateDeviceRequest.init:type_name -> teleport.devicetrust.v1.AuthenticateDeviceInit
	46, // 27: teleport.devicetrust.v1.AuthenticateDeviceRequest.challenge_response:type_name -> teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
	47, // 28: teleport.devicetrust.v1.AuthenticateDeviceRequest.tpm_challenge_response:type_name -> teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
	48, // 29: teleport.devicetrust.v1.AuthenticateDeviceResponse.challenge:type_name -> teleport.devicetrust.v1.AuthenticateDeviceChallenge
	49, // 30: teleport.devicetrust.v1.AuthenticateDeviceResponse.user_certificates:type_name -> teleport.devicetrust.v1.UserCertificates
	50, // 31: teleport.devicetrust.v1.AuthenticateDeviceResponse.tpm_challenge:type_name -> teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
	51, // 32: teleport.devicetrust.v1.AuthenticateDeviceResponse.confirmation_token:type_name -> teleport.devicetrust.v1.DeviceConfirmationToken
	49, // 33: teleport.devicetrust.v1.AuthenticateDeviceInit.user_certificates:type_name -> teleport.devicetrust.v1.UserCertificates
	44, // 34: teleport.devicetrust.v1.AuthenticateDeviceInit.device_data:type_name -> teleport.devicetrust.v1.DeviceCollectedData
	52, // 35: teleport.devicetrust.v1.AuthenticateDeviceInit.device_web_token:type_name -> teleport.devicetrust.v1.DeviceWebToken
	51, // 36: teleport.devicetrust.v1.ConfirmDeviceWebAuthenticationRequest.confirmation_token:type_name -> teleport.devicetrust.v1.DeviceConfirmationToken
	33, // 37: teleport.devicetrust.v1.SyncInventoryRequest.start:type_name -> teleport.devicetrust.v1.SyncInventoryStart
	34, // 38: teleport.devicetrust.v1.SyncInventoryRequest.end:type_name -> teleport.devicetrust.v1.SyncInventoryEnd
	35, // 39: teleport.devicetrust.v1.SyncInventoryRequest.devices_to_upsert:type_name -> teleport.devicetrust.v1.SyncInventoryDevices
	35, // 40: teleport.devicetrust.v1.SyncInventoryRequest.devices_to_remove:type_name -> teleport.devicetrust.v1.SyncInventoryDevices
	36, // 41: teleport.devicetrust.v1.SyncInventoryResponse.ack:type_name -> teleport.devicetrust.v1.SyncInventoryAck
	37, // 42: teleport.devicetrust.v1.SyncInventoryResponse.result:type_name -> teleport.devicetrust.v1.SyncInventoryResult
	38, // 43: teleport.devicetrust.v1.SyncInventoryResponse.missing_devices:type_name -> teleport.devicetrust.v1.SyncInventoryMissingDevices
	53, // 44: teleport.devicetrust.v1.SyncInventoryStart.source:type_name -> teleport.devicetrust.v1.DeviceSource
	40, // 45: teleport.devicetrust.v1.SyncInventoryDevices.devices:type_name -> teleport.devicetrust.v1.Device
	12, // 46: teleport.devicetrust.v1.SyncInventoryResult.devices:type_name -> teleport.devicetrust.v1.DeviceOrStatus
	40, // 47: teleport.devicetrust.v1.SyncInventoryMissingDevices.devices:type_name -> teleport.devicetrust.v1.Device
	1,  // 48: teleport.devicetrust.v1.DeviceTrustService.CreateDevice:input_type -> teleport.devicetrust.v1.CreateDeviceRequest
	2,  // 49: teleport.devicetrust.v1.DeviceTrustService.UpdateDevice:input_type -> teleport.devicetrust.v1.UpdateDeviceRequest
	3,  // 50: teleport.devicetrust.v1.DeviceTrustService.UpsertDevice:input_type -> teleport.devicetrust.v1.UpsertDeviceRequest
	4,  // 51: teleport.devicetrust.v1.DeviceTrustService.DeleteDevice:input_type -> teleport.devicetrust.v1.DeleteDeviceRequest
	5,  // 52: teleport.devicetrust.v1.DeviceTrustService.FindDevices:input_type -> teleport.devicetrust.v1.FindDevicesRequest
	7,  // 53: teleport.devicetrust.v1.DeviceTrustService.GetDevice:input_type -> teleport.devicetrust.v1.GetDeviceRequest
	8,  // 54: teleport.devicetrust.v1.DeviceTrustService.ListDevices:input_type -> teleport.devicetrust.v1.ListDevicesRequest
	10, // 55: teleport.devicetrust.v1.DeviceTrustService.BulkCreateDevices:input_type -> teleport.devicetrust.v1.BulkCreateDevicesRequest
	13, // 56: teleport.devicetrust.v1.DeviceTrustService.CreateDeviceEnrollToken:input_type -> teleport.devicetrust.v1.CreateDeviceEnrollTokenRequest
	14, // 57: teleport.devicetrust.v1.DeviceTrustService.EnrollDevice:input_type -> teleport.devicetrust.v1.EnrollDeviceRequest
	26, // 58: teleport.devicetrust.v1.DeviceTrustService.AuthenticateDevice:input_type -> teleport.devicetrust.v1.AuthenticateDeviceRequest
	29, // 59: teleport.devicetrust.v1.DeviceTrustService.ConfirmDeviceWebAuthentication:input_type -> teleport.devicetrust.v1.ConfirmDeviceWebAuthenticationRequest
	31, // 60: teleport.devicetrust.v1.DeviceTrustService.SyncInventory:input_type -> teleport.devicetrust.v1.SyncInventoryRequest
	39, // 61: teleport.devicetrust.v1.DeviceTrustService.GetDevicesUsage:input_type -> teleport.devicetrust.v1.GetDevicesUsageRequest
	40, // 62: teleport.devicetrust.v1.DeviceTrustService.CreateDevice:output_type -> teleport.devicetrust.v1.Device
	40, // 63: teleport.devicetrust.v1.DeviceTrustService.UpdateDevice:output_type -> teleport.devicetrust.v1.Device
	40, // 64: teleport.devicetrust.v1.DeviceTrustService.UpsertDevice:output_type -> teleport.devicetrust.v1.Device
	54, // 65: teleport.devicetrust.v1.DeviceTrustService.DeleteDevice:output_type -> google.protobuf.Empty
	6,  // 66: teleport.devicetrust.v1.DeviceTrustService.FindDevices:output_type -> teleport.devicetrust.v1.FindDevicesResponse
	40, // 67: teleport.devicetrust.v1.DeviceTrustService.GetDevice:output_type -> teleport.devicetrust.v1.Device
	9,  // 68: teleport.devicetrust.v1.DeviceTrustService.ListDevices:output_type -> teleport.devicetrust.v1.ListDevicesResponse
	11, // 69: teleport.devicetrust.v1.DeviceTrustService.BulkCreateDevices:output_type -> teleport.devicetrust.v1.BulkCreateDevicesResponse
	55, // 70: teleport.devicetrust.v1.DeviceTrustService.CreateDeviceEnrollToken:output_type -> teleport.devicetrust.v1.DeviceEnrollToken
	15, // 71: teleport.devicetrust.v1.DeviceTrustService.EnrollDevice:output_type -> teleport.devicetrust.v1.EnrollDeviceResponse
	27, // 72: teleport.devicetrust.v1.DeviceTrustService.AuthenticateDevice:output_type -> teleport.devicetrust.v1.AuthenticateDeviceResponse
	30, // 73: teleport.devicetrust.v1.DeviceTrustService.ConfirmDeviceWebAuthentication:output_type -> teleport.devicetrust.v1.ConfirmDeviceWebAuthenticationResponse
	32, // 74: teleport.devicetrust.v1.DeviceTrustService.SyncInventory:output_type -> teleport.devicetrust.v1.SyncInventoryResponse
	56, // 75: teleport.devicetrust.v1.DeviceTrustService.GetDevicesUsage:output_type -> teleport.devicetrust.v1.DevicesUsage
	62, // [62:76] is the sub-list for method output_type
	48, // [48:62] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_teleport_devicetrust_v1_devicetrust_service_proto_init() }
func file_teleport_devicetrust_v1_devicetrust_service_proto_init() {
	if File_teleport_devicetrust_v1_devicetrust_service_proto != nil {
		return
	}
	file_teleport_devicetrust_v1_authenticate_challenge_proto_init()
	file_teleport_devicetrust_v1_device_proto_init()
	file_teleport_devicetrust_v1_device_collected_data_proto_init()
	file_teleport_devicetrust_v1_device_confirmation_token_proto_init()
	file_teleport_devicetrust_v1_device_enroll_token_proto_init()
	file_teleport_devicetrust_v1_device_source_proto_init()
	file_teleport_devicetrust_v1_device_web_token_proto_init()
	file_teleport_devicetrust_v1_tpm_proto_init()
	file_teleport_devicetrust_v1_usage_proto_init()
	file_teleport_devicetrust_v1_user_certificates_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FindDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FindDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BulkCreateDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BulkCreateDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceOrStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDeviceEnrollTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EnrollDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*EnrollDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*EnrollDeviceInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*EnrollDeviceSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MacOSEnrollPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MacOSEnrollChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MacOSEnrollChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*TPMEnrollPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TPMAttestationParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*TPMEnrollChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*TPMEncryptedCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*TPMEnrollChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AuthenticateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AuthenticateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*AuthenticateDeviceInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ConfirmDeviceWebAuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ConfirmDeviceWebAuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryDevices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*SyncInventoryMissingDevices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetDevicesUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[13].OneofWrappers = []any{
		(*EnrollDeviceRequest_Init)(nil),
		(*EnrollDeviceRequest_MacosChallengeResponse)(nil),
		(*EnrollDeviceRequest_TpmChallengeResponse)(nil),
	}
	file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[14].OneofWrappers = []any{
		(*EnrollDeviceResponse_Success)(nil),
		(*EnrollDeviceResponse_MacosChallenge)(nil),
		(*EnrollDeviceResponse_TpmChallenge)(nil),
	}
	file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[20].OneofWrappers = []any{
		(*TPMEnrollPayload_EkCert)(nil),
		(*TPMEnrollPayload_EkKey)(nil),
	}
	file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[25].OneofWrappers = []any{
		(*AuthenticateDeviceRequest_Init)(nil),
		(*AuthenticateDeviceRequest_ChallengeResponse)(nil),
		(*AuthenticateDeviceRequest_TpmChallengeResponse)(nil),
	}
	file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[26].OneofWrappers = []any{
		(*AuthenticateDeviceResponse_Challenge)(nil),
		(*AuthenticateDeviceResponse_UserCertificates)(nil),
		(*AuthenticateDeviceResponse_TpmChallenge)(nil),
		(*AuthenticateDeviceResponse_ConfirmationToken)(nil),
	}
	file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[30].OneofWrappers = []any{
		(*SyncInventoryRequest_Start)(nil),
		(*SyncInventoryRequest_End)(nil),
		(*SyncInventoryRequest_DevicesToUpsert)(nil),
		(*SyncInventoryRequest_DevicesToRemove)(nil),
	}
	file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes[31].OneofWrappers = []any{
		(*SyncInventoryResponse_Ack)(nil),
		(*SyncInventoryResponse_Result)(nil),
		(*SyncInventoryResponse_MissingDevices)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_devicetrust_v1_devicetrust_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_devicetrust_v1_devicetrust_service_proto_goTypes,
		DependencyIndexes: file_teleport_devicetrust_v1_devicetrust_service_proto_depIdxs,
		EnumInfos:         file_teleport_devicetrust_v1_devicetrust_service_proto_enumTypes,
		MessageInfos:      file_teleport_devicetrust_v1_devicetrust_service_proto_msgTypes,
	}.Build()
	File_teleport_devicetrust_v1_devicetrust_service_proto = out.File
	file_teleport_devicetrust_v1_devicetrust_service_proto_rawDesc = nil
	file_teleport_devicetrust_v1_devicetrust_service_proto_goTypes = nil
	file_teleport_devicetrust_v1_devicetrust_service_proto_depIdxs = nil
}
