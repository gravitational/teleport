// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: teleport/devicetrust/v1/devicetrust_service.proto

package devicetrustv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/devicetrust/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceTrustServiceName is the fully-qualified name of the DeviceTrustService service.
	DeviceTrustServiceName = "teleport.devicetrust.v1.DeviceTrustService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceTrustServicePingProcedure is the fully-qualified name of the DeviceTrustService's Ping RPC.
	DeviceTrustServicePingProcedure = "/teleport.devicetrust.v1.DeviceTrustService/Ping"
	// DeviceTrustServiceCreateDeviceProcedure is the fully-qualified name of the DeviceTrustService's
	// CreateDevice RPC.
	DeviceTrustServiceCreateDeviceProcedure = "/teleport.devicetrust.v1.DeviceTrustService/CreateDevice"
	// DeviceTrustServiceUpdateDeviceProcedure is the fully-qualified name of the DeviceTrustService's
	// UpdateDevice RPC.
	DeviceTrustServiceUpdateDeviceProcedure = "/teleport.devicetrust.v1.DeviceTrustService/UpdateDevice"
	// DeviceTrustServiceUpsertDeviceProcedure is the fully-qualified name of the DeviceTrustService's
	// UpsertDevice RPC.
	DeviceTrustServiceUpsertDeviceProcedure = "/teleport.devicetrust.v1.DeviceTrustService/UpsertDevice"
	// DeviceTrustServiceDeleteDeviceProcedure is the fully-qualified name of the DeviceTrustService's
	// DeleteDevice RPC.
	DeviceTrustServiceDeleteDeviceProcedure = "/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice"
	// DeviceTrustServiceFindDevicesProcedure is the fully-qualified name of the DeviceTrustService's
	// FindDevices RPC.
	DeviceTrustServiceFindDevicesProcedure = "/teleport.devicetrust.v1.DeviceTrustService/FindDevices"
	// DeviceTrustServiceGetDeviceProcedure is the fully-qualified name of the DeviceTrustService's
	// GetDevice RPC.
	DeviceTrustServiceGetDeviceProcedure = "/teleport.devicetrust.v1.DeviceTrustService/GetDevice"
	// DeviceTrustServiceListDevicesProcedure is the fully-qualified name of the DeviceTrustService's
	// ListDevices RPC.
	DeviceTrustServiceListDevicesProcedure = "/teleport.devicetrust.v1.DeviceTrustService/ListDevices"
	// DeviceTrustServiceListDevicesByUserProcedure is the fully-qualified name of the
	// DeviceTrustService's ListDevicesByUser RPC.
	DeviceTrustServiceListDevicesByUserProcedure = "/teleport.devicetrust.v1.DeviceTrustService/ListDevicesByUser"
	// DeviceTrustServiceBulkCreateDevicesProcedure is the fully-qualified name of the
	// DeviceTrustService's BulkCreateDevices RPC.
	DeviceTrustServiceBulkCreateDevicesProcedure = "/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices"
	// DeviceTrustServiceCreateDeviceEnrollTokenProcedure is the fully-qualified name of the
	// DeviceTrustService's CreateDeviceEnrollToken RPC.
	DeviceTrustServiceCreateDeviceEnrollTokenProcedure = "/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken"
	// DeviceTrustServiceEnrollDeviceProcedure is the fully-qualified name of the DeviceTrustService's
	// EnrollDevice RPC.
	DeviceTrustServiceEnrollDeviceProcedure = "/teleport.devicetrust.v1.DeviceTrustService/EnrollDevice"
	// DeviceTrustServiceAuthenticateDeviceProcedure is the fully-qualified name of the
	// DeviceTrustService's AuthenticateDevice RPC.
	DeviceTrustServiceAuthenticateDeviceProcedure = "/teleport.devicetrust.v1.DeviceTrustService/AuthenticateDevice"
	// DeviceTrustServiceConfirmDeviceWebAuthenticationProcedure is the fully-qualified name of the
	// DeviceTrustService's ConfirmDeviceWebAuthentication RPC.
	DeviceTrustServiceConfirmDeviceWebAuthenticationProcedure = "/teleport.devicetrust.v1.DeviceTrustService/ConfirmDeviceWebAuthentication"
	// DeviceTrustServiceSyncInventoryProcedure is the fully-qualified name of the DeviceTrustService's
	// SyncInventory RPC.
	DeviceTrustServiceSyncInventoryProcedure = "/teleport.devicetrust.v1.DeviceTrustService/SyncInventory"
	// DeviceTrustServiceGetDevicesUsageProcedure is the fully-qualified name of the
	// DeviceTrustService's GetDevicesUsage RPC.
	DeviceTrustServiceGetDevicesUsageProcedure = "/teleport.devicetrust.v1.DeviceTrustService/GetDevicesUsage"
)

// DeviceTrustServiceClient is a client for the teleport.devicetrust.v1.DeviceTrustService service.
type DeviceTrustServiceClient interface {
	// Ping foo bar.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// CreateDevice creates a device, effectively registering it on Teleport.
	// Devices need to be registered before they can be enrolled.
	//
	// It is possible to create both a Device and a DeviceEnrollToken in a
	// single invocation, see CreateDeviceRequest.create_enroll_token.
	CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.Device], error)
	// UpdateDevice is a masked device update.
	//
	// Only certain fields may be updated, see Device for details.
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.Device], error)
	// UpsertDevice creates or updates a device.
	//
	// UpsertDevice attempts a write of all mutable fields on updates, therefore
	// reading a fresh copy of the device is recommended. Update semantics still
	// apply.
	UpsertDevice(context.Context, *connect.Request[v1.UpsertDeviceRequest]) (*connect.Response[v1.Device], error)
	// DeleteDevice hard-deletes a device, removing it and all collected data
	// history from the system.
	//
	// Prefer locking the device instead (see the `tctl lock` command). Deleting a
	// device doesn't invalidate existing device certificates, but does prevent
	// new device authentication ceremonies from occurring.
	//
	// Use with caution.
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	// FindDevices retrieves devices by device ID and/or asset tag.
	//
	// It provides an in-between search between fetching a device by ID and
	// listing all devices.
	//
	// ID matches are guaranteed to be present in the response.
	FindDevices(context.Context, *connect.Request[v1.FindDevicesRequest]) (*connect.Response[v1.FindDevicesResponse], error)
	// GetDevice retrieves a device by ID.
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.Device], error)
	// ListDevices lists all registered devices.
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	// ListDevicesByUser lists all devices owned by the user
	ListDevicesByUser(context.Context, *connect.Request[v1.ListDevicesByUserRequest]) (*connect.Response[v1.ListDevicesByUserResponse], error)
	// BulkCreateDevices is a bulk variant of CreateDevice.
	//
	// Unlike CreateDevice, it does not support creation of enrollment tokens, as
	// it is meant for bulk inventory registration.
	BulkCreateDevices(context.Context, *connect.Request[v1.BulkCreateDevicesRequest]) (*connect.Response[v1.BulkCreateDevicesResponse], error)
	// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
	// An enrollment token is required for the enrollment ceremony. See
	// EnrollDevice.
	CreateDeviceEnrollToken(context.Context, *connect.Request[v1.CreateDeviceEnrollTokenRequest]) (*connect.Response[v1.DeviceEnrollToken], error)
	// EnrollDevice performs the device enrollment ceremony.
	//
	// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
	// see CreateDevice and CreateDeviceEnrollToken.
	//
	// An enrolled device is allowed, via AuthenticateDevice, to acquire
	// certificates containing device extensions, thus gaining access to
	// device-aware actions.
	//
	// macOS enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- MacOSEnrollChallenge (server)
	// -> MacOSEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	//
	// TPM enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- TPMEnrollChallenge (server)
	// -> TPMEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	EnrollDevice(context.Context) *connect.BidiStreamForClient[v1.EnrollDeviceRequest, v1.EnrollDeviceResponse]
	// AuthenticateDevice performs the device authentication ceremony.
	//
	// Device authentication exchanges existing user certificates without device
	// extensions for certificates augmented with device extensions. The new
	// certificates allow the user to perform device-aware actions.
	//
	// Only registered and enrolled devices may perform device authentication.
	AuthenticateDevice(context.Context) *connect.BidiStreamForClient[v1.AuthenticateDeviceRequest, v1.AuthenticateDeviceResponse]
	// ConfirmDeviceWebAuthentication finalizes the device web authentication
	// ceremony started by the creation of a DeviceWebToken and subsequent
	// AuthenticateDevice call.
	//
	// The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
	// method, which consequently augments the corresponding Web Session
	// certificates with device extensions.
	//
	// This method must be called by the Teleport Proxy, and the Proxy itself must
	// be called by the same browser that started the on-behalf-of authentication
	// attempt. See the /webapi/device/webconfirm endpoint.
	//
	// See
	// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
	ConfirmDeviceWebAuthentication(context.Context, *connect.Request[v1.ConfirmDeviceWebAuthenticationRequest]) (*connect.Response[v1.ConfirmDeviceWebAuthenticationResponse], error)
	// Syncs device inventory from a source exterior to Teleport, for example an
	// MDM.
	// Allows both partial and full syncs; for the latter, devices missing from
	// the external inventory are handled as specified.
	// Authorized either by a valid MDM service certificate or the appropriate
	// "device" permissions (create/update/delete).
	SyncInventory(context.Context) *connect.BidiStreamForClient[v1.SyncInventoryRequest, v1.SyncInventoryResponse]
	// Superseded by ResourceUsageService.GetUsage.
	//
	// Deprecated: do not use.
	GetDevicesUsage(context.Context, *connect.Request[v1.GetDevicesUsageRequest]) (*connect.Response[v1.DevicesUsage], error)
}

// NewDeviceTrustServiceClient constructs a client for the
// teleport.devicetrust.v1.DeviceTrustService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceTrustServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceTrustServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deviceTrustServiceMethods := v1.File_teleport_devicetrust_v1_devicetrust_service_proto.Services().ByName("DeviceTrustService").Methods()
	return &deviceTrustServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+DeviceTrustServicePingProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		createDevice: connect.NewClient[v1.CreateDeviceRequest, v1.Device](
			httpClient,
			baseURL+DeviceTrustServiceCreateDeviceProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("CreateDevice")),
			connect.WithClientOptions(opts...),
		),
		updateDevice: connect.NewClient[v1.UpdateDeviceRequest, v1.Device](
			httpClient,
			baseURL+DeviceTrustServiceUpdateDeviceProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("UpdateDevice")),
			connect.WithClientOptions(opts...),
		),
		upsertDevice: connect.NewClient[v1.UpsertDeviceRequest, v1.Device](
			httpClient,
			baseURL+DeviceTrustServiceUpsertDeviceProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("UpsertDevice")),
			connect.WithClientOptions(opts...),
		),
		deleteDevice: connect.NewClient[v1.DeleteDeviceRequest, emptypb.Empty](
			httpClient,
			baseURL+DeviceTrustServiceDeleteDeviceProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("DeleteDevice")),
			connect.WithClientOptions(opts...),
		),
		findDevices: connect.NewClient[v1.FindDevicesRequest, v1.FindDevicesResponse](
			httpClient,
			baseURL+DeviceTrustServiceFindDevicesProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("FindDevices")),
			connect.WithClientOptions(opts...),
		),
		getDevice: connect.NewClient[v1.GetDeviceRequest, v1.Device](
			httpClient,
			baseURL+DeviceTrustServiceGetDeviceProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("GetDevice")),
			connect.WithClientOptions(opts...),
		),
		listDevices: connect.NewClient[v1.ListDevicesRequest, v1.ListDevicesResponse](
			httpClient,
			baseURL+DeviceTrustServiceListDevicesProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("ListDevices")),
			connect.WithClientOptions(opts...),
		),
		listDevicesByUser: connect.NewClient[v1.ListDevicesByUserRequest, v1.ListDevicesByUserResponse](
			httpClient,
			baseURL+DeviceTrustServiceListDevicesByUserProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("ListDevicesByUser")),
			connect.WithClientOptions(opts...),
		),
		bulkCreateDevices: connect.NewClient[v1.BulkCreateDevicesRequest, v1.BulkCreateDevicesResponse](
			httpClient,
			baseURL+DeviceTrustServiceBulkCreateDevicesProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("BulkCreateDevices")),
			connect.WithClientOptions(opts...),
		),
		createDeviceEnrollToken: connect.NewClient[v1.CreateDeviceEnrollTokenRequest, v1.DeviceEnrollToken](
			httpClient,
			baseURL+DeviceTrustServiceCreateDeviceEnrollTokenProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("CreateDeviceEnrollToken")),
			connect.WithClientOptions(opts...),
		),
		enrollDevice: connect.NewClient[v1.EnrollDeviceRequest, v1.EnrollDeviceResponse](
			httpClient,
			baseURL+DeviceTrustServiceEnrollDeviceProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("EnrollDevice")),
			connect.WithClientOptions(opts...),
		),
		authenticateDevice: connect.NewClient[v1.AuthenticateDeviceRequest, v1.AuthenticateDeviceResponse](
			httpClient,
			baseURL+DeviceTrustServiceAuthenticateDeviceProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("AuthenticateDevice")),
			connect.WithClientOptions(opts...),
		),
		confirmDeviceWebAuthentication: connect.NewClient[v1.ConfirmDeviceWebAuthenticationRequest, v1.ConfirmDeviceWebAuthenticationResponse](
			httpClient,
			baseURL+DeviceTrustServiceConfirmDeviceWebAuthenticationProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("ConfirmDeviceWebAuthentication")),
			connect.WithClientOptions(opts...),
		),
		syncInventory: connect.NewClient[v1.SyncInventoryRequest, v1.SyncInventoryResponse](
			httpClient,
			baseURL+DeviceTrustServiceSyncInventoryProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("SyncInventory")),
			connect.WithClientOptions(opts...),
		),
		getDevicesUsage: connect.NewClient[v1.GetDevicesUsageRequest, v1.DevicesUsage](
			httpClient,
			baseURL+DeviceTrustServiceGetDevicesUsageProcedure,
			connect.WithSchema(deviceTrustServiceMethods.ByName("GetDevicesUsage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceTrustServiceClient implements DeviceTrustServiceClient.
type deviceTrustServiceClient struct {
	ping                           *connect.Client[v1.PingRequest, v1.PingResponse]
	createDevice                   *connect.Client[v1.CreateDeviceRequest, v1.Device]
	updateDevice                   *connect.Client[v1.UpdateDeviceRequest, v1.Device]
	upsertDevice                   *connect.Client[v1.UpsertDeviceRequest, v1.Device]
	deleteDevice                   *connect.Client[v1.DeleteDeviceRequest, emptypb.Empty]
	findDevices                    *connect.Client[v1.FindDevicesRequest, v1.FindDevicesResponse]
	getDevice                      *connect.Client[v1.GetDeviceRequest, v1.Device]
	listDevices                    *connect.Client[v1.ListDevicesRequest, v1.ListDevicesResponse]
	listDevicesByUser              *connect.Client[v1.ListDevicesByUserRequest, v1.ListDevicesByUserResponse]
	bulkCreateDevices              *connect.Client[v1.BulkCreateDevicesRequest, v1.BulkCreateDevicesResponse]
	createDeviceEnrollToken        *connect.Client[v1.CreateDeviceEnrollTokenRequest, v1.DeviceEnrollToken]
	enrollDevice                   *connect.Client[v1.EnrollDeviceRequest, v1.EnrollDeviceResponse]
	authenticateDevice             *connect.Client[v1.AuthenticateDeviceRequest, v1.AuthenticateDeviceResponse]
	confirmDeviceWebAuthentication *connect.Client[v1.ConfirmDeviceWebAuthenticationRequest, v1.ConfirmDeviceWebAuthenticationResponse]
	syncInventory                  *connect.Client[v1.SyncInventoryRequest, v1.SyncInventoryResponse]
	getDevicesUsage                *connect.Client[v1.GetDevicesUsageRequest, v1.DevicesUsage]
}

// Ping calls teleport.devicetrust.v1.DeviceTrustService.Ping.
func (c *deviceTrustServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// CreateDevice calls teleport.devicetrust.v1.DeviceTrustService.CreateDevice.
func (c *deviceTrustServiceClient) CreateDevice(ctx context.Context, req *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.Device], error) {
	return c.createDevice.CallUnary(ctx, req)
}

// UpdateDevice calls teleport.devicetrust.v1.DeviceTrustService.UpdateDevice.
func (c *deviceTrustServiceClient) UpdateDevice(ctx context.Context, req *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.Device], error) {
	return c.updateDevice.CallUnary(ctx, req)
}

// UpsertDevice calls teleport.devicetrust.v1.DeviceTrustService.UpsertDevice.
func (c *deviceTrustServiceClient) UpsertDevice(ctx context.Context, req *connect.Request[v1.UpsertDeviceRequest]) (*connect.Response[v1.Device], error) {
	return c.upsertDevice.CallUnary(ctx, req)
}

// DeleteDevice calls teleport.devicetrust.v1.DeviceTrustService.DeleteDevice.
func (c *deviceTrustServiceClient) DeleteDevice(ctx context.Context, req *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDevice.CallUnary(ctx, req)
}

// FindDevices calls teleport.devicetrust.v1.DeviceTrustService.FindDevices.
func (c *deviceTrustServiceClient) FindDevices(ctx context.Context, req *connect.Request[v1.FindDevicesRequest]) (*connect.Response[v1.FindDevicesResponse], error) {
	return c.findDevices.CallUnary(ctx, req)
}

// GetDevice calls teleport.devicetrust.v1.DeviceTrustService.GetDevice.
func (c *deviceTrustServiceClient) GetDevice(ctx context.Context, req *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.Device], error) {
	return c.getDevice.CallUnary(ctx, req)
}

// ListDevices calls teleport.devicetrust.v1.DeviceTrustService.ListDevices.
func (c *deviceTrustServiceClient) ListDevices(ctx context.Context, req *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// ListDevicesByUser calls teleport.devicetrust.v1.DeviceTrustService.ListDevicesByUser.
func (c *deviceTrustServiceClient) ListDevicesByUser(ctx context.Context, req *connect.Request[v1.ListDevicesByUserRequest]) (*connect.Response[v1.ListDevicesByUserResponse], error) {
	return c.listDevicesByUser.CallUnary(ctx, req)
}

// BulkCreateDevices calls teleport.devicetrust.v1.DeviceTrustService.BulkCreateDevices.
func (c *deviceTrustServiceClient) BulkCreateDevices(ctx context.Context, req *connect.Request[v1.BulkCreateDevicesRequest]) (*connect.Response[v1.BulkCreateDevicesResponse], error) {
	return c.bulkCreateDevices.CallUnary(ctx, req)
}

// CreateDeviceEnrollToken calls teleport.devicetrust.v1.DeviceTrustService.CreateDeviceEnrollToken.
func (c *deviceTrustServiceClient) CreateDeviceEnrollToken(ctx context.Context, req *connect.Request[v1.CreateDeviceEnrollTokenRequest]) (*connect.Response[v1.DeviceEnrollToken], error) {
	return c.createDeviceEnrollToken.CallUnary(ctx, req)
}

// EnrollDevice calls teleport.devicetrust.v1.DeviceTrustService.EnrollDevice.
func (c *deviceTrustServiceClient) EnrollDevice(ctx context.Context) *connect.BidiStreamForClient[v1.EnrollDeviceRequest, v1.EnrollDeviceResponse] {
	return c.enrollDevice.CallBidiStream(ctx)
}

// AuthenticateDevice calls teleport.devicetrust.v1.DeviceTrustService.AuthenticateDevice.
func (c *deviceTrustServiceClient) AuthenticateDevice(ctx context.Context) *connect.BidiStreamForClient[v1.AuthenticateDeviceRequest, v1.AuthenticateDeviceResponse] {
	return c.authenticateDevice.CallBidiStream(ctx)
}

// ConfirmDeviceWebAuthentication calls
// teleport.devicetrust.v1.DeviceTrustService.ConfirmDeviceWebAuthentication.
func (c *deviceTrustServiceClient) ConfirmDeviceWebAuthentication(ctx context.Context, req *connect.Request[v1.ConfirmDeviceWebAuthenticationRequest]) (*connect.Response[v1.ConfirmDeviceWebAuthenticationResponse], error) {
	return c.confirmDeviceWebAuthentication.CallUnary(ctx, req)
}

// SyncInventory calls teleport.devicetrust.v1.DeviceTrustService.SyncInventory.
func (c *deviceTrustServiceClient) SyncInventory(ctx context.Context) *connect.BidiStreamForClient[v1.SyncInventoryRequest, v1.SyncInventoryResponse] {
	return c.syncInventory.CallBidiStream(ctx)
}

// GetDevicesUsage calls teleport.devicetrust.v1.DeviceTrustService.GetDevicesUsage.
//
// Deprecated: do not use.
func (c *deviceTrustServiceClient) GetDevicesUsage(ctx context.Context, req *connect.Request[v1.GetDevicesUsageRequest]) (*connect.Response[v1.DevicesUsage], error) {
	return c.getDevicesUsage.CallUnary(ctx, req)
}

// DeviceTrustServiceHandler is an implementation of the teleport.devicetrust.v1.DeviceTrustService
// service.
type DeviceTrustServiceHandler interface {
	// Ping foo bar.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// CreateDevice creates a device, effectively registering it on Teleport.
	// Devices need to be registered before they can be enrolled.
	//
	// It is possible to create both a Device and a DeviceEnrollToken in a
	// single invocation, see CreateDeviceRequest.create_enroll_token.
	CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.Device], error)
	// UpdateDevice is a masked device update.
	//
	// Only certain fields may be updated, see Device for details.
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.Device], error)
	// UpsertDevice creates or updates a device.
	//
	// UpsertDevice attempts a write of all mutable fields on updates, therefore
	// reading a fresh copy of the device is recommended. Update semantics still
	// apply.
	UpsertDevice(context.Context, *connect.Request[v1.UpsertDeviceRequest]) (*connect.Response[v1.Device], error)
	// DeleteDevice hard-deletes a device, removing it and all collected data
	// history from the system.
	//
	// Prefer locking the device instead (see the `tctl lock` command). Deleting a
	// device doesn't invalidate existing device certificates, but does prevent
	// new device authentication ceremonies from occurring.
	//
	// Use with caution.
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	// FindDevices retrieves devices by device ID and/or asset tag.
	//
	// It provides an in-between search between fetching a device by ID and
	// listing all devices.
	//
	// ID matches are guaranteed to be present in the response.
	FindDevices(context.Context, *connect.Request[v1.FindDevicesRequest]) (*connect.Response[v1.FindDevicesResponse], error)
	// GetDevice retrieves a device by ID.
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.Device], error)
	// ListDevices lists all registered devices.
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	// ListDevicesByUser lists all devices owned by the user
	ListDevicesByUser(context.Context, *connect.Request[v1.ListDevicesByUserRequest]) (*connect.Response[v1.ListDevicesByUserResponse], error)
	// BulkCreateDevices is a bulk variant of CreateDevice.
	//
	// Unlike CreateDevice, it does not support creation of enrollment tokens, as
	// it is meant for bulk inventory registration.
	BulkCreateDevices(context.Context, *connect.Request[v1.BulkCreateDevicesRequest]) (*connect.Response[v1.BulkCreateDevicesResponse], error)
	// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
	// An enrollment token is required for the enrollment ceremony. See
	// EnrollDevice.
	CreateDeviceEnrollToken(context.Context, *connect.Request[v1.CreateDeviceEnrollTokenRequest]) (*connect.Response[v1.DeviceEnrollToken], error)
	// EnrollDevice performs the device enrollment ceremony.
	//
	// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
	// see CreateDevice and CreateDeviceEnrollToken.
	//
	// An enrolled device is allowed, via AuthenticateDevice, to acquire
	// certificates containing device extensions, thus gaining access to
	// device-aware actions.
	//
	// macOS enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- MacOSEnrollChallenge (server)
	// -> MacOSEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	//
	// TPM enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- TPMEnrollChallenge (server)
	// -> TPMEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	EnrollDevice(context.Context, *connect.BidiStream[v1.EnrollDeviceRequest, v1.EnrollDeviceResponse]) error
	// AuthenticateDevice performs the device authentication ceremony.
	//
	// Device authentication exchanges existing user certificates without device
	// extensions for certificates augmented with device extensions. The new
	// certificates allow the user to perform device-aware actions.
	//
	// Only registered and enrolled devices may perform device authentication.
	AuthenticateDevice(context.Context, *connect.BidiStream[v1.AuthenticateDeviceRequest, v1.AuthenticateDeviceResponse]) error
	// ConfirmDeviceWebAuthentication finalizes the device web authentication
	// ceremony started by the creation of a DeviceWebToken and subsequent
	// AuthenticateDevice call.
	//
	// The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
	// method, which consequently augments the corresponding Web Session
	// certificates with device extensions.
	//
	// This method must be called by the Teleport Proxy, and the Proxy itself must
	// be called by the same browser that started the on-behalf-of authentication
	// attempt. See the /webapi/device/webconfirm endpoint.
	//
	// See
	// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
	ConfirmDeviceWebAuthentication(context.Context, *connect.Request[v1.ConfirmDeviceWebAuthenticationRequest]) (*connect.Response[v1.ConfirmDeviceWebAuthenticationResponse], error)
	// Syncs device inventory from a source exterior to Teleport, for example an
	// MDM.
	// Allows both partial and full syncs; for the latter, devices missing from
	// the external inventory are handled as specified.
	// Authorized either by a valid MDM service certificate or the appropriate
	// "device" permissions (create/update/delete).
	SyncInventory(context.Context, *connect.BidiStream[v1.SyncInventoryRequest, v1.SyncInventoryResponse]) error
	// Superseded by ResourceUsageService.GetUsage.
	//
	// Deprecated: do not use.
	GetDevicesUsage(context.Context, *connect.Request[v1.GetDevicesUsageRequest]) (*connect.Response[v1.DevicesUsage], error)
}

// NewDeviceTrustServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceTrustServiceHandler(svc DeviceTrustServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceTrustServiceMethods := v1.File_teleport_devicetrust_v1_devicetrust_service_proto.Services().ByName("DeviceTrustService").Methods()
	deviceTrustServicePingHandler := connect.NewUnaryHandler(
		DeviceTrustServicePingProcedure,
		svc.Ping,
		connect.WithSchema(deviceTrustServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceCreateDeviceHandler := connect.NewUnaryHandler(
		DeviceTrustServiceCreateDeviceProcedure,
		svc.CreateDevice,
		connect.WithSchema(deviceTrustServiceMethods.ByName("CreateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceUpdateDeviceHandler := connect.NewUnaryHandler(
		DeviceTrustServiceUpdateDeviceProcedure,
		svc.UpdateDevice,
		connect.WithSchema(deviceTrustServiceMethods.ByName("UpdateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceUpsertDeviceHandler := connect.NewUnaryHandler(
		DeviceTrustServiceUpsertDeviceProcedure,
		svc.UpsertDevice,
		connect.WithSchema(deviceTrustServiceMethods.ByName("UpsertDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceDeleteDeviceHandler := connect.NewUnaryHandler(
		DeviceTrustServiceDeleteDeviceProcedure,
		svc.DeleteDevice,
		connect.WithSchema(deviceTrustServiceMethods.ByName("DeleteDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceFindDevicesHandler := connect.NewUnaryHandler(
		DeviceTrustServiceFindDevicesProcedure,
		svc.FindDevices,
		connect.WithSchema(deviceTrustServiceMethods.ByName("FindDevices")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceGetDeviceHandler := connect.NewUnaryHandler(
		DeviceTrustServiceGetDeviceProcedure,
		svc.GetDevice,
		connect.WithSchema(deviceTrustServiceMethods.ByName("GetDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceListDevicesHandler := connect.NewUnaryHandler(
		DeviceTrustServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(deviceTrustServiceMethods.ByName("ListDevices")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceListDevicesByUserHandler := connect.NewUnaryHandler(
		DeviceTrustServiceListDevicesByUserProcedure,
		svc.ListDevicesByUser,
		connect.WithSchema(deviceTrustServiceMethods.ByName("ListDevicesByUser")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceBulkCreateDevicesHandler := connect.NewUnaryHandler(
		DeviceTrustServiceBulkCreateDevicesProcedure,
		svc.BulkCreateDevices,
		connect.WithSchema(deviceTrustServiceMethods.ByName("BulkCreateDevices")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceCreateDeviceEnrollTokenHandler := connect.NewUnaryHandler(
		DeviceTrustServiceCreateDeviceEnrollTokenProcedure,
		svc.CreateDeviceEnrollToken,
		connect.WithSchema(deviceTrustServiceMethods.ByName("CreateDeviceEnrollToken")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceEnrollDeviceHandler := connect.NewBidiStreamHandler(
		DeviceTrustServiceEnrollDeviceProcedure,
		svc.EnrollDevice,
		connect.WithSchema(deviceTrustServiceMethods.ByName("EnrollDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceAuthenticateDeviceHandler := connect.NewBidiStreamHandler(
		DeviceTrustServiceAuthenticateDeviceProcedure,
		svc.AuthenticateDevice,
		connect.WithSchema(deviceTrustServiceMethods.ByName("AuthenticateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceConfirmDeviceWebAuthenticationHandler := connect.NewUnaryHandler(
		DeviceTrustServiceConfirmDeviceWebAuthenticationProcedure,
		svc.ConfirmDeviceWebAuthentication,
		connect.WithSchema(deviceTrustServiceMethods.ByName("ConfirmDeviceWebAuthentication")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceSyncInventoryHandler := connect.NewBidiStreamHandler(
		DeviceTrustServiceSyncInventoryProcedure,
		svc.SyncInventory,
		connect.WithSchema(deviceTrustServiceMethods.ByName("SyncInventory")),
		connect.WithHandlerOptions(opts...),
	)
	deviceTrustServiceGetDevicesUsageHandler := connect.NewUnaryHandler(
		DeviceTrustServiceGetDevicesUsageProcedure,
		svc.GetDevicesUsage,
		connect.WithSchema(deviceTrustServiceMethods.ByName("GetDevicesUsage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/teleport.devicetrust.v1.DeviceTrustService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceTrustServicePingProcedure:
			deviceTrustServicePingHandler.ServeHTTP(w, r)
		case DeviceTrustServiceCreateDeviceProcedure:
			deviceTrustServiceCreateDeviceHandler.ServeHTTP(w, r)
		case DeviceTrustServiceUpdateDeviceProcedure:
			deviceTrustServiceUpdateDeviceHandler.ServeHTTP(w, r)
		case DeviceTrustServiceUpsertDeviceProcedure:
			deviceTrustServiceUpsertDeviceHandler.ServeHTTP(w, r)
		case DeviceTrustServiceDeleteDeviceProcedure:
			deviceTrustServiceDeleteDeviceHandler.ServeHTTP(w, r)
		case DeviceTrustServiceFindDevicesProcedure:
			deviceTrustServiceFindDevicesHandler.ServeHTTP(w, r)
		case DeviceTrustServiceGetDeviceProcedure:
			deviceTrustServiceGetDeviceHandler.ServeHTTP(w, r)
		case DeviceTrustServiceListDevicesProcedure:
			deviceTrustServiceListDevicesHandler.ServeHTTP(w, r)
		case DeviceTrustServiceListDevicesByUserProcedure:
			deviceTrustServiceListDevicesByUserHandler.ServeHTTP(w, r)
		case DeviceTrustServiceBulkCreateDevicesProcedure:
			deviceTrustServiceBulkCreateDevicesHandler.ServeHTTP(w, r)
		case DeviceTrustServiceCreateDeviceEnrollTokenProcedure:
			deviceTrustServiceCreateDeviceEnrollTokenHandler.ServeHTTP(w, r)
		case DeviceTrustServiceEnrollDeviceProcedure:
			deviceTrustServiceEnrollDeviceHandler.ServeHTTP(w, r)
		case DeviceTrustServiceAuthenticateDeviceProcedure:
			deviceTrustServiceAuthenticateDeviceHandler.ServeHTTP(w, r)
		case DeviceTrustServiceConfirmDeviceWebAuthenticationProcedure:
			deviceTrustServiceConfirmDeviceWebAuthenticationHandler.ServeHTTP(w, r)
		case DeviceTrustServiceSyncInventoryProcedure:
			deviceTrustServiceSyncInventoryHandler.ServeHTTP(w, r)
		case DeviceTrustServiceGetDevicesUsageProcedure:
			deviceTrustServiceGetDevicesUsageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceTrustServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceTrustServiceHandler struct{}

func (UnimplementedDeviceTrustServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.Ping is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.Device], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.CreateDevice is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.Device], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.UpdateDevice is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) UpsertDevice(context.Context, *connect.Request[v1.UpsertDeviceRequest]) (*connect.Response[v1.Device], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.UpsertDevice is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.DeleteDevice is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) FindDevices(context.Context, *connect.Request[v1.FindDevicesRequest]) (*connect.Response[v1.FindDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.FindDevices is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.Device], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.GetDevice is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.ListDevices is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) ListDevicesByUser(context.Context, *connect.Request[v1.ListDevicesByUserRequest]) (*connect.Response[v1.ListDevicesByUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.ListDevicesByUser is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) BulkCreateDevices(context.Context, *connect.Request[v1.BulkCreateDevicesRequest]) (*connect.Response[v1.BulkCreateDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.BulkCreateDevices is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) CreateDeviceEnrollToken(context.Context, *connect.Request[v1.CreateDeviceEnrollTokenRequest]) (*connect.Response[v1.DeviceEnrollToken], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.CreateDeviceEnrollToken is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) EnrollDevice(context.Context, *connect.BidiStream[v1.EnrollDeviceRequest, v1.EnrollDeviceResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.EnrollDevice is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) AuthenticateDevice(context.Context, *connect.BidiStream[v1.AuthenticateDeviceRequest, v1.AuthenticateDeviceResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.AuthenticateDevice is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) ConfirmDeviceWebAuthentication(context.Context, *connect.Request[v1.ConfirmDeviceWebAuthenticationRequest]) (*connect.Response[v1.ConfirmDeviceWebAuthenticationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.ConfirmDeviceWebAuthentication is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) SyncInventory(context.Context, *connect.BidiStream[v1.SyncInventoryRequest, v1.SyncInventoryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.SyncInventory is not implemented"))
}

func (UnimplementedDeviceTrustServiceHandler) GetDevicesUsage(context.Context, *connect.Request[v1.GetDevicesUsageRequest]) (*connect.Response[v1.DevicesUsage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("teleport.devicetrust.v1.DeviceTrustService.GetDevicesUsage is not implemented"))
}
