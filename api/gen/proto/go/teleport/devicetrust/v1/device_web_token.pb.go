// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/devicetrust/v1/device_web_token.proto

package devicetrustv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A device web token is a token used to device-authenticate a Web UI session.
//
// Tokens are generally acquired on login and exchanged for a single
// on-behalf-of device authentication attempt, performed by Connect.
//
// See
// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-token.
type DeviceWebToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Opaque token identifier.
	// Required for token usage.
	// System-generated.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Opaque device web token, in plaintext, encoded in base64.RawURLEncoding
	// (so it is inherently safe for URl use).
	// Required for token usage.
	// System-generated.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Identifier for the Web Session being device-authorized.
	// Required for creation.
	WebSessionId string `protobuf:"bytes,3,opt,name=web_session_id,json=webSessionId,proto3" json:"web_session_id,omitempty"`
	// Browser user agent, as acquired from the Web UI browser.
	// Used as part of expected device checks.
	// Required for creation.
	BrowserUserAgent string `protobuf:"bytes,4,opt,name=browser_user_agent,json=browserUserAgent,proto3" json:"browser_user_agent,omitempty"`
	// Browser public IP, as acquired from the Web UI browser.
	// Used as part of expected device checks.
	// Required for creation.
	BrowserIp string `protobuf:"bytes,5,opt,name=browser_ip,json=browserIp,proto3" json:"browser_ip,omitempty"`
	// Owner of the Web Session and trusted device.
	// Used internally by the Device Trust system.
	// Transient.
	User string `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	// ID of the devices allowed to perform on-behalf-of device authentication.
	// Used internally by the Device Trust system.
	// Transient.
	ExpectedDeviceIds []string `protobuf:"bytes,7,rep,name=expected_device_ids,json=expectedDeviceIds,proto3" json:"expected_device_ids,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeviceWebToken) Reset() {
	*x = DeviceWebToken{}
	mi := &file_teleport_devicetrust_v1_device_web_token_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceWebToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebToken) ProtoMessage() {}

func (x *DeviceWebToken) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_device_web_token_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebToken.ProtoReflect.Descriptor instead.
func (*DeviceWebToken) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_device_web_token_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceWebToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceWebToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeviceWebToken) GetWebSessionId() string {
	if x != nil {
		return x.WebSessionId
	}
	return ""
}

func (x *DeviceWebToken) GetBrowserUserAgent() string {
	if x != nil {
		return x.BrowserUserAgent
	}
	return ""
}

func (x *DeviceWebToken) GetBrowserIp() string {
	if x != nil {
		return x.BrowserIp
	}
	return ""
}

func (x *DeviceWebToken) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DeviceWebToken) GetExpectedDeviceIds() []string {
	if x != nil {
		return x.ExpectedDeviceIds
	}
	return nil
}

var File_teleport_devicetrust_v1_device_web_token_proto protoreflect.FileDescriptor

const file_teleport_devicetrust_v1_device_web_token_proto_rawDesc = "" +
	"\n" +
	".teleport/devicetrust/v1/device_web_token.proto\x12\x17teleport.devicetrust.v1\"\xed\x01\n" +
	"\x0eDeviceWebToken\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12$\n" +
	"\x0eweb_session_id\x18\x03 \x01(\tR\fwebSessionId\x12,\n" +
	"\x12browser_user_agent\x18\x04 \x01(\tR\x10browserUserAgent\x12\x1d\n" +
	"\n" +
	"browser_ip\x18\x05 \x01(\tR\tbrowserIp\x12\x12\n" +
	"\x04user\x18\x06 \x01(\tR\x04user\x12.\n" +
	"\x13expected_device_ids\x18\a \x03(\tR\x11expectedDeviceIdsBZZXgithub.com/gravitational/teleport/api/gen/proto/go/teleport/devicetrust/v1;devicetrustv1b\x06proto3"

var (
	file_teleport_devicetrust_v1_device_web_token_proto_rawDescOnce sync.Once
	file_teleport_devicetrust_v1_device_web_token_proto_rawDescData []byte
)

func file_teleport_devicetrust_v1_device_web_token_proto_rawDescGZIP() []byte {
	file_teleport_devicetrust_v1_device_web_token_proto_rawDescOnce.Do(func() {
		file_teleport_devicetrust_v1_device_web_token_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_devicetrust_v1_device_web_token_proto_rawDesc), len(file_teleport_devicetrust_v1_device_web_token_proto_rawDesc)))
	})
	return file_teleport_devicetrust_v1_device_web_token_proto_rawDescData
}

var file_teleport_devicetrust_v1_device_web_token_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teleport_devicetrust_v1_device_web_token_proto_goTypes = []any{
	(*DeviceWebToken)(nil), // 0: teleport.devicetrust.v1.DeviceWebToken
}
var file_teleport_devicetrust_v1_device_web_token_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_teleport_devicetrust_v1_device_web_token_proto_init() }
func file_teleport_devicetrust_v1_device_web_token_proto_init() {
	if File_teleport_devicetrust_v1_device_web_token_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_devicetrust_v1_device_web_token_proto_rawDesc), len(file_teleport_devicetrust_v1_device_web_token_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_devicetrust_v1_device_web_token_proto_goTypes,
		DependencyIndexes: file_teleport_devicetrust_v1_device_web_token_proto_depIdxs,
		MessageInfos:      file_teleport_devicetrust_v1_device_web_token_proto_msgTypes,
	}.Build()
	File_teleport_devicetrust_v1_device_web_token_proto = out.File
	file_teleport_devicetrust_v1_device_web_token_proto_goTypes = nil
	file_teleport_devicetrust_v1_device_web_token_proto_depIdxs = nil
}
