// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: teleport/devicetrust/v1/assert.proto

package devicetrustv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to assert an enrolled device. Assertion authenticates the device,
// regardless of the user driving the assertion.
//
// Assertion messages are meant to be included by other requests and responses,
// either streams or multi-stage RPCs. The ceremony is resolved by a co-located
// DeviceTrustService.
//
// See the lib/devicetrust/assert (client) and lib/devicetrust/assertserver
// (server) packages.
//
// Assertion ceremony flow:
// -> AssertDeviceInit (client)
// <- AssertDeviceChallenge (server)
// -> AssertDeviceChallengeResponse (client)
// <- DeviceAsserted (server)
//
// A successful ceremony signifies that the device is registered, enrolled and
// passed the authentication challenge.
type AssertDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AssertDeviceRequest_Init
	//	*AssertDeviceRequest_ChallengeResponse
	//	*AssertDeviceRequest_TpmChallengeResponse
	Payload isAssertDeviceRequest_Payload `protobuf_oneof:"payload"`
}

func (x *AssertDeviceRequest) Reset() {
	*x = AssertDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertDeviceRequest) ProtoMessage() {}

func (x *AssertDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertDeviceRequest.ProtoReflect.Descriptor instead.
func (*AssertDeviceRequest) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_assert_proto_rawDescGZIP(), []int{0}
}

func (m *AssertDeviceRequest) GetPayload() isAssertDeviceRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AssertDeviceRequest) GetInit() *AssertDeviceInit {
	if x, ok := x.GetPayload().(*AssertDeviceRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *AssertDeviceRequest) GetChallengeResponse() *AuthenticateDeviceChallengeResponse {
	if x, ok := x.GetPayload().(*AssertDeviceRequest_ChallengeResponse); ok {
		return x.ChallengeResponse
	}
	return nil
}

func (x *AssertDeviceRequest) GetTpmChallengeResponse() *TPMAuthenticateDeviceChallengeResponse {
	if x, ok := x.GetPayload().(*AssertDeviceRequest_TpmChallengeResponse); ok {
		return x.TpmChallengeResponse
	}
	return nil
}

type isAssertDeviceRequest_Payload interface {
	isAssertDeviceRequest_Payload()
}

type AssertDeviceRequest_Init struct {
	Init *AssertDeviceInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type AssertDeviceRequest_ChallengeResponse struct {
	ChallengeResponse *AuthenticateDeviceChallengeResponse `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

type AssertDeviceRequest_TpmChallengeResponse struct {
	TpmChallengeResponse *TPMAuthenticateDeviceChallengeResponse `protobuf:"bytes,3,opt,name=tpm_challenge_response,json=tpmChallengeResponse,proto3,oneof"`
}

func (*AssertDeviceRequest_Init) isAssertDeviceRequest_Payload() {}

func (*AssertDeviceRequest_ChallengeResponse) isAssertDeviceRequest_Payload() {}

func (*AssertDeviceRequest_TpmChallengeResponse) isAssertDeviceRequest_Payload() {}

// Response of the device assertion ceremony.
// See [AssertDeviceRequest].
type AssertDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AssertDeviceResponse_Challenge
	//	*AssertDeviceResponse_TpmChallenge
	//	*AssertDeviceResponse_DeviceAsserted
	Payload isAssertDeviceResponse_Payload `protobuf_oneof:"payload"`
}

func (x *AssertDeviceResponse) Reset() {
	*x = AssertDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertDeviceResponse) ProtoMessage() {}

func (x *AssertDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertDeviceResponse.ProtoReflect.Descriptor instead.
func (*AssertDeviceResponse) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_assert_proto_rawDescGZIP(), []int{1}
}

func (m *AssertDeviceResponse) GetPayload() isAssertDeviceResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AssertDeviceResponse) GetChallenge() *AuthenticateDeviceChallenge {
	if x, ok := x.GetPayload().(*AssertDeviceResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (x *AssertDeviceResponse) GetTpmChallenge() *TPMAuthenticateDeviceChallenge {
	if x, ok := x.GetPayload().(*AssertDeviceResponse_TpmChallenge); ok {
		return x.TpmChallenge
	}
	return nil
}

func (x *AssertDeviceResponse) GetDeviceAsserted() *DeviceAsserted {
	if x, ok := x.GetPayload().(*AssertDeviceResponse_DeviceAsserted); ok {
		return x.DeviceAsserted
	}
	return nil
}

type isAssertDeviceResponse_Payload interface {
	isAssertDeviceResponse_Payload()
}

type AssertDeviceResponse_Challenge struct {
	Challenge *AuthenticateDeviceChallenge `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type AssertDeviceResponse_TpmChallenge struct {
	TpmChallenge *TPMAuthenticateDeviceChallenge `protobuf:"bytes,2,opt,name=tpm_challenge,json=tpmChallenge,proto3,oneof"`
}

type AssertDeviceResponse_DeviceAsserted struct {
	DeviceAsserted *DeviceAsserted `protobuf:"bytes,3,opt,name=device_asserted,json=deviceAsserted,proto3,oneof"`
}

func (*AssertDeviceResponse_Challenge) isAssertDeviceResponse_Payload() {}

func (*AssertDeviceResponse_TpmChallenge) isAssertDeviceResponse_Payload() {}

func (*AssertDeviceResponse_DeviceAsserted) isAssertDeviceResponse_Payload() {}

// AssertDeviceInit initiates the device assertion ceremony.
// See [AssertDeviceRequest].
type AssertDeviceInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the enrolled device credential.
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Device collected data.
	// Matched against the device registration information and any previously
	// collected data.
	DeviceData *DeviceCollectedData `protobuf:"bytes,2,opt,name=device_data,json=deviceData,proto3" json:"device_data,omitempty"`
}

func (x *AssertDeviceInit) Reset() {
	*x = AssertDeviceInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertDeviceInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertDeviceInit) ProtoMessage() {}

func (x *AssertDeviceInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertDeviceInit.ProtoReflect.Descriptor instead.
func (*AssertDeviceInit) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_assert_proto_rawDescGZIP(), []int{2}
}

func (x *AssertDeviceInit) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *AssertDeviceInit) GetDeviceData() *DeviceCollectedData {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

// DeviceAsserted marks a successful device assertion ceremony.
// See [AssertDeviceRequest].
type DeviceAsserted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceAsserted) Reset() {
	*x = DeviceAsserted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAsserted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAsserted) ProtoMessage() {}

func (x *DeviceAsserted) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_assert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAsserted.ProtoReflect.Descriptor instead.
func (*DeviceAsserted) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_assert_proto_rawDescGZIP(), []int{3}
}

var File_teleport_devicetrust_v1_assert_proto protoreflect.FileDescriptor

var file_teleport_devicetrust_v1_assert_proto_rawDesc = []byte{
	0x0a, 0x24, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x34, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x6d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x74, 0x70, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x70, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x74, 0x70, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x70, 0x6d, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x10, 0x0a,
	0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42,
	0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_teleport_devicetrust_v1_assert_proto_rawDescOnce sync.Once
	file_teleport_devicetrust_v1_assert_proto_rawDescData = file_teleport_devicetrust_v1_assert_proto_rawDesc
)

func file_teleport_devicetrust_v1_assert_proto_rawDescGZIP() []byte {
	file_teleport_devicetrust_v1_assert_proto_rawDescOnce.Do(func() {
		file_teleport_devicetrust_v1_assert_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_devicetrust_v1_assert_proto_rawDescData)
	})
	return file_teleport_devicetrust_v1_assert_proto_rawDescData
}

var file_teleport_devicetrust_v1_assert_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_teleport_devicetrust_v1_assert_proto_goTypes = []any{
	(*AssertDeviceRequest)(nil),                    // 0: teleport.devicetrust.v1.AssertDeviceRequest
	(*AssertDeviceResponse)(nil),                   // 1: teleport.devicetrust.v1.AssertDeviceResponse
	(*AssertDeviceInit)(nil),                       // 2: teleport.devicetrust.v1.AssertDeviceInit
	(*DeviceAsserted)(nil),                         // 3: teleport.devicetrust.v1.DeviceAsserted
	(*AuthenticateDeviceChallengeResponse)(nil),    // 4: teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
	(*TPMAuthenticateDeviceChallengeResponse)(nil), // 5: teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
	(*AuthenticateDeviceChallenge)(nil),            // 6: teleport.devicetrust.v1.AuthenticateDeviceChallenge
	(*TPMAuthenticateDeviceChallenge)(nil),         // 7: teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
	(*DeviceCollectedData)(nil),                    // 8: teleport.devicetrust.v1.DeviceCollectedData
}
var file_teleport_devicetrust_v1_assert_proto_depIdxs = []int32{
	2, // 0: teleport.devicetrust.v1.AssertDeviceRequest.init:type_name -> teleport.devicetrust.v1.AssertDeviceInit
	4, // 1: teleport.devicetrust.v1.AssertDeviceRequest.challenge_response:type_name -> teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
	5, // 2: teleport.devicetrust.v1.AssertDeviceRequest.tpm_challenge_response:type_name -> teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
	6, // 3: teleport.devicetrust.v1.AssertDeviceResponse.challenge:type_name -> teleport.devicetrust.v1.AuthenticateDeviceChallenge
	7, // 4: teleport.devicetrust.v1.AssertDeviceResponse.tpm_challenge:type_name -> teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
	3, // 5: teleport.devicetrust.v1.AssertDeviceResponse.device_asserted:type_name -> teleport.devicetrust.v1.DeviceAsserted
	8, // 6: teleport.devicetrust.v1.AssertDeviceInit.device_data:type_name -> teleport.devicetrust.v1.DeviceCollectedData
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_teleport_devicetrust_v1_assert_proto_init() }
func file_teleport_devicetrust_v1_assert_proto_init() {
	if File_teleport_devicetrust_v1_assert_proto != nil {
		return
	}
	file_teleport_devicetrust_v1_authenticate_challenge_proto_init()
	file_teleport_devicetrust_v1_device_collected_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teleport_devicetrust_v1_assert_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AssertDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_assert_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AssertDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_assert_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AssertDeviceInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_devicetrust_v1_assert_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceAsserted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teleport_devicetrust_v1_assert_proto_msgTypes[0].OneofWrappers = []any{
		(*AssertDeviceRequest_Init)(nil),
		(*AssertDeviceRequest_ChallengeResponse)(nil),
		(*AssertDeviceRequest_TpmChallengeResponse)(nil),
	}
	file_teleport_devicetrust_v1_assert_proto_msgTypes[1].OneofWrappers = []any{
		(*AssertDeviceResponse_Challenge)(nil),
		(*AssertDeviceResponse_TpmChallenge)(nil),
		(*AssertDeviceResponse_DeviceAsserted)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_devicetrust_v1_assert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_devicetrust_v1_assert_proto_goTypes,
		DependencyIndexes: file_teleport_devicetrust_v1_assert_proto_depIdxs,
		MessageInfos:      file_teleport_devicetrust_v1_assert_proto_msgTypes,
	}.Build()
	File_teleport_devicetrust_v1_assert_proto = out.File
	file_teleport_devicetrust_v1_assert_proto_rawDesc = nil
	file_teleport_devicetrust_v1_assert_proto_goTypes = nil
	file_teleport_devicetrust_v1_assert_proto_depIdxs = nil
}
