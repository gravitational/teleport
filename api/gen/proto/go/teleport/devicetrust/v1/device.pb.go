// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/devicetrust/v1/device.proto

package devicetrustv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AttestationType indicates the degree to which the device credential has
// been attested.
type DeviceAttestationType int32

const (
	// Bare public key which has only verified with proof of ownership.
	// Used on macOS.
	DeviceAttestationType_DEVICE_ATTESTATION_TYPE_UNSPECIFIED DeviceAttestationType = 0
	// Credential was verified through a TPM EK->AK chain on enrollment.
	DeviceAttestationType_DEVICE_ATTESTATION_TYPE_TPM_EKPUB DeviceAttestationType = 1
	// Credential was verified through a TPM EKCert->AK chain on enrollment,
	// but no allow-listed CAs were configured to validate this EKCert against.
	DeviceAttestationType_DEVICE_ATTESTATION_TYPE_TPM_EKCERT DeviceAttestationType = 2
	// Credential was verified through a TPM EKCert->AK chain on enrollment, and
	// the EKCert was signed by a configured allow-listed CA.
	DeviceAttestationType_DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED DeviceAttestationType = 3
)

// Enum value maps for DeviceAttestationType.
var (
	DeviceAttestationType_name = map[int32]string{
		0: "DEVICE_ATTESTATION_TYPE_UNSPECIFIED",
		1: "DEVICE_ATTESTATION_TYPE_TPM_EKPUB",
		2: "DEVICE_ATTESTATION_TYPE_TPM_EKCERT",
		3: "DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED",
	}
	DeviceAttestationType_value = map[string]int32{
		"DEVICE_ATTESTATION_TYPE_UNSPECIFIED":        0,
		"DEVICE_ATTESTATION_TYPE_TPM_EKPUB":          1,
		"DEVICE_ATTESTATION_TYPE_TPM_EKCERT":         2,
		"DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED": 3,
	}
)

func (x DeviceAttestationType) Enum() *DeviceAttestationType {
	p := new(DeviceAttestationType)
	*p = x
	return p
}

func (x DeviceAttestationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceAttestationType) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_devicetrust_v1_device_proto_enumTypes[0].Descriptor()
}

func (DeviceAttestationType) Type() protoreflect.EnumType {
	return &file_teleport_devicetrust_v1_device_proto_enumTypes[0]
}

func (x DeviceAttestationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceAttestationType.Descriptor instead.
func (DeviceAttestationType) EnumDescriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_device_proto_rawDescGZIP(), []int{0}
}

// DeviceEnrollStatus represents the enrollment status of a device.
type DeviceEnrollStatus int32

const (
	DeviceEnrollStatus_DEVICE_ENROLL_STATUS_UNSPECIFIED DeviceEnrollStatus = 0
	// Device is registered but not enrolled.
	DeviceEnrollStatus_DEVICE_ENROLL_STATUS_NOT_ENROLLED DeviceEnrollStatus = 1
	// Device is registered and enrolled.
	DeviceEnrollStatus_DEVICE_ENROLL_STATUS_ENROLLED DeviceEnrollStatus = 2
)

// Enum value maps for DeviceEnrollStatus.
var (
	DeviceEnrollStatus_name = map[int32]string{
		0: "DEVICE_ENROLL_STATUS_UNSPECIFIED",
		1: "DEVICE_ENROLL_STATUS_NOT_ENROLLED",
		2: "DEVICE_ENROLL_STATUS_ENROLLED",
	}
	DeviceEnrollStatus_value = map[string]int32{
		"DEVICE_ENROLL_STATUS_UNSPECIFIED":  0,
		"DEVICE_ENROLL_STATUS_NOT_ENROLLED": 1,
		"DEVICE_ENROLL_STATUS_ENROLLED":     2,
	}
)

func (x DeviceEnrollStatus) Enum() *DeviceEnrollStatus {
	p := new(DeviceEnrollStatus)
	*p = x
	return p
}

func (x DeviceEnrollStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceEnrollStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_devicetrust_v1_device_proto_enumTypes[1].Descriptor()
}

func (DeviceEnrollStatus) Type() protoreflect.EnumType {
	return &file_teleport_devicetrust_v1_device_proto_enumTypes[1]
}

func (x DeviceEnrollStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceEnrollStatus.Descriptor instead.
func (DeviceEnrollStatus) EnumDescriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_device_proto_rawDescGZIP(), []int{1}
}

// Device represents a registered device.
// Registered devices may be enrolled. Enrolled devices are allowed to perform
// device-aware actions.
type Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// API version of the Device definition, present for compatibility with
	// types.DeviceV1.
	// Always "v1".
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Unique device identifier.
	// System managed.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Device operating system.
	// Required.
	OsType OSType `protobuf:"varint,3,opt,name=os_type,json=osType,proto3,enum=teleport.devicetrust.v1.OSType" json:"os_type,omitempty"`
	// Device inventory identifier.
	// Takes different meanings depending on the device and operating system.
	// For macOS devices it is the device serial number.
	// Required.
	AssetTag string `protobuf:"bytes,4,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	// Create time.
	// System managed.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Last update time.
	// System managed.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Enrollment token for the device.
	// Only present in situations where device creation and enrollment are rolled
	// into a single operation.
	// Transient.
	EnrollToken *DeviceEnrollToken `protobuf:"bytes,7,opt,name=enroll_token,json=enrollToken,proto3" json:"enroll_token,omitempty"`
	// Enrollment status of the device.
	// May be changed to DEVICE_ENROLL_STATUS_NOT_ENROLLED at any time to
	// forcefully unenroll a device (server-side only).
	// System managed.
	EnrollStatus DeviceEnrollStatus `protobuf:"varint,8,opt,name=enroll_status,json=enrollStatus,proto3,enum=teleport.devicetrust.v1.DeviceEnrollStatus" json:"enroll_status,omitempty"`
	// Currently enrolled device credential.
	// Manually unenrolling a device clears the credential.
	// System managed.
	Credential *DeviceCredential `protobuf:"bytes,9,opt,name=credential,proto3" json:"credential,omitempty"`
	// Device data collected during enrollment and device authentication.
	// Enrollment data is always present, while authentication data is capped at N
	// most recent events.
	// Only present in certain read modes.
	// Transient.
	CollectedData []*DeviceCollectedData `protobuf:"bytes,10,rep,name=collected_data,json=collectedData,proto3" json:"collected_data,omitempty"`
	// Source of the device.
	// Devices managed directly via Teleport (`tctl`, Web UI, etc) have no
	// assigned source.
	Source *DeviceSource `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	// Device information acquired from an external source.
	Profile *DeviceProfile `protobuf:"bytes,12,opt,name=profile,proto3" json:"profile,omitempty"`
	// Device owner.
	// Usually the owner is the same user who performed the enrollment ceremony.
	// May be empty for legacy devices (Teleport v13.2 and older).
	// Manually unenrolling a device clears the owner.
	// System-managed.
	Owner         string `protobuf:"bytes,13,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_teleport_devicetrust_v1_device_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_device_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_device_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetOsType() OSType {
	if x != nil {
		return x.OsType
	}
	return OSType_OS_TYPE_UNSPECIFIED
}

func (x *Device) GetAssetTag() string {
	if x != nil {
		return x.AssetTag
	}
	return ""
}

func (x *Device) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Device) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Device) GetEnrollToken() *DeviceEnrollToken {
	if x != nil {
		return x.EnrollToken
	}
	return nil
}

func (x *Device) GetEnrollStatus() DeviceEnrollStatus {
	if x != nil {
		return x.EnrollStatus
	}
	return DeviceEnrollStatus_DEVICE_ENROLL_STATUS_UNSPECIFIED
}

func (x *Device) GetCredential() *DeviceCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Device) GetCollectedData() []*DeviceCollectedData {
	if x != nil {
		return x.CollectedData
	}
	return nil
}

func (x *Device) GetSource() *DeviceSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Device) GetProfile() *DeviceProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Device) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// DeviceCredential represents the current enrolled public key of a device.
type DeviceCredential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the credential, defined client-side.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Device public key marshaled as a PKIX, ASN.1 DER. Used only on MacOS.
	PublicKeyDer []byte `protobuf:"bytes,2,opt,name=public_key_der,json=publicKeyDer,proto3" json:"public_key_der,omitempty"`
	// The degree to which the device credential is attested.
	DeviceAttestationType DeviceAttestationType `protobuf:"varint,3,opt,name=device_attestation_type,json=deviceAttestationType,proto3,enum=teleport.devicetrust.v1.DeviceAttestationType" json:"device_attestation_type,omitempty"`
	// For TPM devices, the serial number of the TPM endorsement certificate.
	TpmEkcertSerial string `protobuf:"bytes,4,opt,name=tpm_ekcert_serial,json=tpmEkcertSerial,proto3" json:"tpm_ekcert_serial,omitempty"`
	// For TPM devices, the encoded TPMT_PUBLIC structure containing the
	// attestation public key and signing parameters.
	TpmAkPublic   []byte `protobuf:"bytes,5,opt,name=tpm_ak_public,json=tpmAkPublic,proto3" json:"tpm_ak_public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceCredential) Reset() {
	*x = DeviceCredential{}
	mi := &file_teleport_devicetrust_v1_device_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCredential) ProtoMessage() {}

func (x *DeviceCredential) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_devicetrust_v1_device_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCredential.ProtoReflect.Descriptor instead.
func (*DeviceCredential) Descriptor() ([]byte, []int) {
	return file_teleport_devicetrust_v1_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceCredential) GetPublicKeyDer() []byte {
	if x != nil {
		return x.PublicKeyDer
	}
	return nil
}

func (x *DeviceCredential) GetDeviceAttestationType() DeviceAttestationType {
	if x != nil {
		return x.DeviceAttestationType
	}
	return DeviceAttestationType_DEVICE_ATTESTATION_TYPE_UNSPECIFIED
}

func (x *DeviceCredential) GetTpmEkcertSerial() string {
	if x != nil {
		return x.TpmEkcertSerial
	}
	return ""
}

func (x *DeviceCredential) GetTpmAkPublic() []byte {
	if x != nil {
		return x.TpmAkPublic
	}
	return nil
}

var File_teleport_devicetrust_v1_device_proto protoreflect.FileDescriptor

const file_teleport_devicetrust_v1_device_proto_rawDesc = "" +
	"\n" +
	"$teleport/devicetrust/v1/device.proto\x12\x17teleport.devicetrust.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a3teleport/devicetrust/v1/device_collected_data.proto\x1a1teleport/devicetrust/v1/device_enroll_token.proto\x1a,teleport/devicetrust/v1/device_profile.proto\x1a+teleport/devicetrust/v1/device_source.proto\x1a%teleport/devicetrust/v1/os_type.proto\"\xe2\x05\n" +
	"\x06Device\x12\x1f\n" +
	"\vapi_version\x18\x01 \x01(\tR\n" +
	"apiVersion\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x128\n" +
	"\aos_type\x18\x03 \x01(\x0e2\x1f.teleport.devicetrust.v1.OSTypeR\x06osType\x12\x1b\n" +
	"\tasset_tag\x18\x04 \x01(\tR\bassetTag\x12;\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12M\n" +
	"\fenroll_token\x18\a \x01(\v2*.teleport.devicetrust.v1.DeviceEnrollTokenR\venrollToken\x12P\n" +
	"\renroll_status\x18\b \x01(\x0e2+.teleport.devicetrust.v1.DeviceEnrollStatusR\fenrollStatus\x12I\n" +
	"\n" +
	"credential\x18\t \x01(\v2).teleport.devicetrust.v1.DeviceCredentialR\n" +
	"credential\x12S\n" +
	"\x0ecollected_data\x18\n" +
	" \x03(\v2,.teleport.devicetrust.v1.DeviceCollectedDataR\rcollectedData\x12=\n" +
	"\x06source\x18\v \x01(\v2%.teleport.devicetrust.v1.DeviceSourceR\x06source\x12@\n" +
	"\aprofile\x18\f \x01(\v2&.teleport.devicetrust.v1.DeviceProfileR\aprofile\x12\x14\n" +
	"\x05owner\x18\r \x01(\tR\x05owner\"\x80\x02\n" +
	"\x10DeviceCredential\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12$\n" +
	"\x0epublic_key_der\x18\x02 \x01(\fR\fpublicKeyDer\x12f\n" +
	"\x17device_attestation_type\x18\x03 \x01(\x0e2..teleport.devicetrust.v1.DeviceAttestationTypeR\x15deviceAttestationType\x12*\n" +
	"\x11tpm_ekcert_serial\x18\x04 \x01(\tR\x0ftpmEkcertSerial\x12\"\n" +
	"\rtpm_ak_public\x18\x05 \x01(\fR\vtpmAkPublic*\xbf\x01\n" +
	"\x15DeviceAttestationType\x12'\n" +
	"#DEVICE_ATTESTATION_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!DEVICE_ATTESTATION_TYPE_TPM_EKPUB\x10\x01\x12&\n" +
	"\"DEVICE_ATTESTATION_TYPE_TPM_EKCERT\x10\x02\x12.\n" +
	"*DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED\x10\x03*\x84\x01\n" +
	"\x12DeviceEnrollStatus\x12$\n" +
	" DEVICE_ENROLL_STATUS_UNSPECIFIED\x10\x00\x12%\n" +
	"!DEVICE_ENROLL_STATUS_NOT_ENROLLED\x10\x01\x12!\n" +
	"\x1dDEVICE_ENROLL_STATUS_ENROLLED\x10\x02BZZXgithub.com/gravitational/teleport/api/gen/proto/go/teleport/devicetrust/v1;devicetrustv1b\x06proto3"

var (
	file_teleport_devicetrust_v1_device_proto_rawDescOnce sync.Once
	file_teleport_devicetrust_v1_device_proto_rawDescData []byte
)

func file_teleport_devicetrust_v1_device_proto_rawDescGZIP() []byte {
	file_teleport_devicetrust_v1_device_proto_rawDescOnce.Do(func() {
		file_teleport_devicetrust_v1_device_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_devicetrust_v1_device_proto_rawDesc), len(file_teleport_devicetrust_v1_device_proto_rawDesc)))
	})
	return file_teleport_devicetrust_v1_device_proto_rawDescData
}

var file_teleport_devicetrust_v1_device_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_teleport_devicetrust_v1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_teleport_devicetrust_v1_device_proto_goTypes = []any{
	(DeviceAttestationType)(0),    // 0: teleport.devicetrust.v1.DeviceAttestationType
	(DeviceEnrollStatus)(0),       // 1: teleport.devicetrust.v1.DeviceEnrollStatus
	(*Device)(nil),                // 2: teleport.devicetrust.v1.Device
	(*DeviceCredential)(nil),      // 3: teleport.devicetrust.v1.DeviceCredential
	(OSType)(0),                   // 4: teleport.devicetrust.v1.OSType
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*DeviceEnrollToken)(nil),     // 6: teleport.devicetrust.v1.DeviceEnrollToken
	(*DeviceCollectedData)(nil),   // 7: teleport.devicetrust.v1.DeviceCollectedData
	(*DeviceSource)(nil),          // 8: teleport.devicetrust.v1.DeviceSource
	(*DeviceProfile)(nil),         // 9: teleport.devicetrust.v1.DeviceProfile
}
var file_teleport_devicetrust_v1_device_proto_depIdxs = []int32{
	4,  // 0: teleport.devicetrust.v1.Device.os_type:type_name -> teleport.devicetrust.v1.OSType
	5,  // 1: teleport.devicetrust.v1.Device.create_time:type_name -> google.protobuf.Timestamp
	5,  // 2: teleport.devicetrust.v1.Device.update_time:type_name -> google.protobuf.Timestamp
	6,  // 3: teleport.devicetrust.v1.Device.enroll_token:type_name -> teleport.devicetrust.v1.DeviceEnrollToken
	1,  // 4: teleport.devicetrust.v1.Device.enroll_status:type_name -> teleport.devicetrust.v1.DeviceEnrollStatus
	3,  // 5: teleport.devicetrust.v1.Device.credential:type_name -> teleport.devicetrust.v1.DeviceCredential
	7,  // 6: teleport.devicetrust.v1.Device.collected_data:type_name -> teleport.devicetrust.v1.DeviceCollectedData
	8,  // 7: teleport.devicetrust.v1.Device.source:type_name -> teleport.devicetrust.v1.DeviceSource
	9,  // 8: teleport.devicetrust.v1.Device.profile:type_name -> teleport.devicetrust.v1.DeviceProfile
	0,  // 9: teleport.devicetrust.v1.DeviceCredential.device_attestation_type:type_name -> teleport.devicetrust.v1.DeviceAttestationType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_teleport_devicetrust_v1_device_proto_init() }
func file_teleport_devicetrust_v1_device_proto_init() {
	if File_teleport_devicetrust_v1_device_proto != nil {
		return
	}
	file_teleport_devicetrust_v1_device_collected_data_proto_init()
	file_teleport_devicetrust_v1_device_enroll_token_proto_init()
	file_teleport_devicetrust_v1_device_profile_proto_init()
	file_teleport_devicetrust_v1_device_source_proto_init()
	file_teleport_devicetrust_v1_os_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_devicetrust_v1_device_proto_rawDesc), len(file_teleport_devicetrust_v1_device_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_devicetrust_v1_device_proto_goTypes,
		DependencyIndexes: file_teleport_devicetrust_v1_device_proto_depIdxs,
		EnumInfos:         file_teleport_devicetrust_v1_device_proto_enumTypes,
		MessageInfos:      file_teleport_devicetrust_v1_device_proto_msgTypes,
	}.Build()
	File_teleport_devicetrust_v1_device_proto = out.File
	file_teleport_devicetrust_v1_device_proto_goTypes = nil
	file_teleport_devicetrust_v1_device_proto_depIdxs = nil
}
