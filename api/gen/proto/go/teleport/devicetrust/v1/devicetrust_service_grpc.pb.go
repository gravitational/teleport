// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/devicetrust/v1/devicetrust_service.proto

package devicetrustv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceTrustService_CreateDevice_FullMethodName                   = "/teleport.devicetrust.v1.DeviceTrustService/CreateDevice"
	DeviceTrustService_UpdateDevice_FullMethodName                   = "/teleport.devicetrust.v1.DeviceTrustService/UpdateDevice"
	DeviceTrustService_UpsertDevice_FullMethodName                   = "/teleport.devicetrust.v1.DeviceTrustService/UpsertDevice"
	DeviceTrustService_DeleteDevice_FullMethodName                   = "/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice"
	DeviceTrustService_FindDevices_FullMethodName                    = "/teleport.devicetrust.v1.DeviceTrustService/FindDevices"
	DeviceTrustService_GetDevice_FullMethodName                      = "/teleport.devicetrust.v1.DeviceTrustService/GetDevice"
	DeviceTrustService_ListDevices_FullMethodName                    = "/teleport.devicetrust.v1.DeviceTrustService/ListDevices"
	DeviceTrustService_BulkCreateDevices_FullMethodName              = "/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices"
	DeviceTrustService_CreateDeviceEnrollToken_FullMethodName        = "/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken"
	DeviceTrustService_EnrollDevice_FullMethodName                   = "/teleport.devicetrust.v1.DeviceTrustService/EnrollDevice"
	DeviceTrustService_AuthenticateDevice_FullMethodName             = "/teleport.devicetrust.v1.DeviceTrustService/AuthenticateDevice"
	DeviceTrustService_ConfirmDeviceWebAuthentication_FullMethodName = "/teleport.devicetrust.v1.DeviceTrustService/ConfirmDeviceWebAuthentication"
	DeviceTrustService_SyncInventory_FullMethodName                  = "/teleport.devicetrust.v1.DeviceTrustService/SyncInventory"
	DeviceTrustService_GetDevicesUsage_FullMethodName                = "/teleport.devicetrust.v1.DeviceTrustService/GetDevicesUsage"
)

// DeviceTrustServiceClient is the client API for DeviceTrustService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DeviceTrustService provides methods to manage, enroll and authenticate
// trusted devices.
//
// A trusted device is a device that is registered and enrolled with Teleport,
// thus allowing the system to provide some guarantees about its provenance and
// state.
//
// Managing devices requires the corresponding CRUD "device" permission.
// Additionally, creating enrollment tokens requires the "create_enroll_token"
// permission and enrolling devices requires the "enroll" permission. See
// CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.
//
// An authenticated, trusted device allows its user to perform device-aware
// actions. Such actions include accessing an SSH node, managing sensitive
// resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
// and/or per-role toggles. Device authentication is automatic for enrolled
// devices communicating with Enterprise clusters. See AuthenticateDevice for
// reference.
//
// Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
// treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
type DeviceTrustServiceClient interface {
	// CreateDevice creates a device, effectively registering it on Teleport.
	// Devices need to be registered before they can be enrolled.
	//
	// It is possible to create both a Device and a DeviceEnrollToken in a
	// single invocation, see CreateDeviceRequest.create_enroll_token.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// UpdateDevice is a masked device update.
	//
	// Only certain fields may be updated, see Device for details.
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// UpsertDevice creates or updates a device.
	//
	// UpsertDevice attempts a write of all mutable fields on updates, therefore
	// reading a fresh copy of the device is recommended. Update semantics still
	// apply.
	UpsertDevice(ctx context.Context, in *UpsertDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// DeleteDevice hard-deletes a device, removing it and all collected data
	// history from the system.
	//
	// Prefer locking the device instead (see the `tctl lock` command). Deleting a
	// device doesn't invalidate existing device certificates, but does prevent
	// new device authentication ceremonies from occurring.
	//
	// Use with caution.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FindDevices retrieves devices by device ID and/or asset tag.
	//
	// It provides an in-between search between fetching a device by ID and
	// listing all devices.
	//
	// ID matches are guaranteed to be present in the response.
	FindDevices(ctx context.Context, in *FindDevicesRequest, opts ...grpc.CallOption) (*FindDevicesResponse, error)
	// GetDevice retrieves a device by ID.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// ListDevices lists all registered devices.
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// BulkCreateDevices is a bulk variant of CreateDevice.
	//
	// Unlike CreateDevice, it does not support creation of enrollment tokens, as
	// it is meant for bulk inventory registration.
	BulkCreateDevices(ctx context.Context, in *BulkCreateDevicesRequest, opts ...grpc.CallOption) (*BulkCreateDevicesResponse, error)
	// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
	// An enrollment token is required for the enrollment ceremony. See
	// EnrollDevice.
	CreateDeviceEnrollToken(ctx context.Context, in *CreateDeviceEnrollTokenRequest, opts ...grpc.CallOption) (*DeviceEnrollToken, error)
	// EnrollDevice performs the device enrollment ceremony.
	//
	// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
	// see CreateDevice and CreateDeviceEnrollToken.
	//
	// An enrolled device is allowed, via AuthenticateDevice, to acquire
	// certificates containing device extensions, thus gaining access to
	// device-aware actions.
	//
	// macOS enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- MacOSEnrollChallenge (server)
	// -> MacOSEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	//
	// TPM enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- TPMEnrollChallenge (server)
	// -> TPMEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	EnrollDevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EnrollDeviceRequest, EnrollDeviceResponse], error)
	// AuthenticateDevice performs the device authentication ceremony.
	//
	// Device authentication exchanges existing user certificates without device
	// extensions for certificates augmented with device extensions. The new
	// certificates allow the user to perform device-aware actions.
	//
	// Only registered and enrolled devices may perform device authentication.
	AuthenticateDevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuthenticateDeviceRequest, AuthenticateDeviceResponse], error)
	// ConfirmDeviceWebAuthentication finalizes the device web authentication
	// ceremony started by the creation of a DeviceWebToken and subsequent
	// AuthenticateDevice call.
	//
	// The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
	// method, which consequently augments the corresponding Web Session
	// certificates with device extensions.
	//
	// This method must be called by the Teleport Proxy, and the Proxy itself must
	// be called by the same browser that started the on-behalf-of authentication
	// attempt. See the /webapi/device/webconfirm endpoint.
	//
	// See
	// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
	ConfirmDeviceWebAuthentication(ctx context.Context, in *ConfirmDeviceWebAuthenticationRequest, opts ...grpc.CallOption) (*ConfirmDeviceWebAuthenticationResponse, error)
	// Syncs device inventory from a source exterior to Teleport, for example an
	// MDM.
	// Allows both partial and full syncs; for the latter, devices missing from
	// the external inventory are handled as specified.
	// Authorized either by a valid MDM service certificate or the appropriate
	// "device" permissions (create/update/delete).
	SyncInventory(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncInventoryRequest, SyncInventoryResponse], error)
	// Deprecated: Do not use.
	// Superseded by ResourceUsageService.GetUsage.
	GetDevicesUsage(ctx context.Context, in *GetDevicesUsageRequest, opts ...grpc.CallOption) (*DevicesUsage, error)
}

type deviceTrustServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTrustServiceClient(cc grpc.ClientConnInterface) DeviceTrustServiceClient {
	return &deviceTrustServiceClient{cc}
}

func (c *deviceTrustServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, DeviceTrustService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, DeviceTrustService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) UpsertDevice(ctx context.Context, in *UpsertDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, DeviceTrustService_UpsertDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceTrustService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) FindDevices(ctx context.Context, in *FindDevicesRequest, opts ...grpc.CallOption) (*FindDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDevicesResponse)
	err := c.cc.Invoke(ctx, DeviceTrustService_FindDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, DeviceTrustService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, DeviceTrustService_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) BulkCreateDevices(ctx context.Context, in *BulkCreateDevicesRequest, opts ...grpc.CallOption) (*BulkCreateDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateDevicesResponse)
	err := c.cc.Invoke(ctx, DeviceTrustService_BulkCreateDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) CreateDeviceEnrollToken(ctx context.Context, in *CreateDeviceEnrollTokenRequest, opts ...grpc.CallOption) (*DeviceEnrollToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceEnrollToken)
	err := c.cc.Invoke(ctx, DeviceTrustService_CreateDeviceEnrollToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) EnrollDevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EnrollDeviceRequest, EnrollDeviceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceTrustService_ServiceDesc.Streams[0], DeviceTrustService_EnrollDevice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EnrollDeviceRequest, EnrollDeviceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceTrustService_EnrollDeviceClient = grpc.BidiStreamingClient[EnrollDeviceRequest, EnrollDeviceResponse]

func (c *deviceTrustServiceClient) AuthenticateDevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuthenticateDeviceRequest, AuthenticateDeviceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceTrustService_ServiceDesc.Streams[1], DeviceTrustService_AuthenticateDevice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AuthenticateDeviceRequest, AuthenticateDeviceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceTrustService_AuthenticateDeviceClient = grpc.BidiStreamingClient[AuthenticateDeviceRequest, AuthenticateDeviceResponse]

func (c *deviceTrustServiceClient) ConfirmDeviceWebAuthentication(ctx context.Context, in *ConfirmDeviceWebAuthenticationRequest, opts ...grpc.CallOption) (*ConfirmDeviceWebAuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmDeviceWebAuthenticationResponse)
	err := c.cc.Invoke(ctx, DeviceTrustService_ConfirmDeviceWebAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) SyncInventory(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncInventoryRequest, SyncInventoryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceTrustService_ServiceDesc.Streams[2], DeviceTrustService_SyncInventory_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncInventoryRequest, SyncInventoryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceTrustService_SyncInventoryClient = grpc.BidiStreamingClient[SyncInventoryRequest, SyncInventoryResponse]

// Deprecated: Do not use.
func (c *deviceTrustServiceClient) GetDevicesUsage(ctx context.Context, in *GetDevicesUsageRequest, opts ...grpc.CallOption) (*DevicesUsage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DevicesUsage)
	err := c.cc.Invoke(ctx, DeviceTrustService_GetDevicesUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceTrustServiceServer is the server API for DeviceTrustService service.
// All implementations must embed UnimplementedDeviceTrustServiceServer
// for forward compatibility.
//
// DeviceTrustService provides methods to manage, enroll and authenticate
// trusted devices.
//
// A trusted device is a device that is registered and enrolled with Teleport,
// thus allowing the system to provide some guarantees about its provenance and
// state.
//
// Managing devices requires the corresponding CRUD "device" permission.
// Additionally, creating enrollment tokens requires the "create_enroll_token"
// permission and enrolling devices requires the "enroll" permission. See
// CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.
//
// An authenticated, trusted device allows its user to perform device-aware
// actions. Such actions include accessing an SSH node, managing sensitive
// resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
// and/or per-role toggles. Device authentication is automatic for enrolled
// devices communicating with Enterprise clusters. See AuthenticateDevice for
// reference.
//
// Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
// treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
type DeviceTrustServiceServer interface {
	// CreateDevice creates a device, effectively registering it on Teleport.
	// Devices need to be registered before they can be enrolled.
	//
	// It is possible to create both a Device and a DeviceEnrollToken in a
	// single invocation, see CreateDeviceRequest.create_enroll_token.
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	// UpdateDevice is a masked device update.
	//
	// Only certain fields may be updated, see Device for details.
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error)
	// UpsertDevice creates or updates a device.
	//
	// UpsertDevice attempts a write of all mutable fields on updates, therefore
	// reading a fresh copy of the device is recommended. Update semantics still
	// apply.
	UpsertDevice(context.Context, *UpsertDeviceRequest) (*Device, error)
	// DeleteDevice hard-deletes a device, removing it and all collected data
	// history from the system.
	//
	// Prefer locking the device instead (see the `tctl lock` command). Deleting a
	// device doesn't invalidate existing device certificates, but does prevent
	// new device authentication ceremonies from occurring.
	//
	// Use with caution.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error)
	// FindDevices retrieves devices by device ID and/or asset tag.
	//
	// It provides an in-between search between fetching a device by ID and
	// listing all devices.
	//
	// ID matches are guaranteed to be present in the response.
	FindDevices(context.Context, *FindDevicesRequest) (*FindDevicesResponse, error)
	// GetDevice retrieves a device by ID.
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// ListDevices lists all registered devices.
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// BulkCreateDevices is a bulk variant of CreateDevice.
	//
	// Unlike CreateDevice, it does not support creation of enrollment tokens, as
	// it is meant for bulk inventory registration.
	BulkCreateDevices(context.Context, *BulkCreateDevicesRequest) (*BulkCreateDevicesResponse, error)
	// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
	// An enrollment token is required for the enrollment ceremony. See
	// EnrollDevice.
	CreateDeviceEnrollToken(context.Context, *CreateDeviceEnrollTokenRequest) (*DeviceEnrollToken, error)
	// EnrollDevice performs the device enrollment ceremony.
	//
	// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
	// see CreateDevice and CreateDeviceEnrollToken.
	//
	// An enrolled device is allowed, via AuthenticateDevice, to acquire
	// certificates containing device extensions, thus gaining access to
	// device-aware actions.
	//
	// macOS enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- MacOSEnrollChallenge (server)
	// -> MacOSEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	//
	// TPM enrollment flow:
	// -> EnrollDeviceInit (client)
	// <- TPMEnrollChallenge (server)
	// -> TPMEnrollChallengeResponse
	// <- EnrollDeviceSuccess
	EnrollDevice(grpc.BidiStreamingServer[EnrollDeviceRequest, EnrollDeviceResponse]) error
	// AuthenticateDevice performs the device authentication ceremony.
	//
	// Device authentication exchanges existing user certificates without device
	// extensions for certificates augmented with device extensions. The new
	// certificates allow the user to perform device-aware actions.
	//
	// Only registered and enrolled devices may perform device authentication.
	AuthenticateDevice(grpc.BidiStreamingServer[AuthenticateDeviceRequest, AuthenticateDeviceResponse]) error
	// ConfirmDeviceWebAuthentication finalizes the device web authentication
	// ceremony started by the creation of a DeviceWebToken and subsequent
	// AuthenticateDevice call.
	//
	// The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
	// method, which consequently augments the corresponding Web Session
	// certificates with device extensions.
	//
	// This method must be called by the Teleport Proxy, and the Proxy itself must
	// be called by the same browser that started the on-behalf-of authentication
	// attempt. See the /webapi/device/webconfirm endpoint.
	//
	// See
	// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
	ConfirmDeviceWebAuthentication(context.Context, *ConfirmDeviceWebAuthenticationRequest) (*ConfirmDeviceWebAuthenticationResponse, error)
	// Syncs device inventory from a source exterior to Teleport, for example an
	// MDM.
	// Allows both partial and full syncs; for the latter, devices missing from
	// the external inventory are handled as specified.
	// Authorized either by a valid MDM service certificate or the appropriate
	// "device" permissions (create/update/delete).
	SyncInventory(grpc.BidiStreamingServer[SyncInventoryRequest, SyncInventoryResponse]) error
	// Deprecated: Do not use.
	// Superseded by ResourceUsageService.GetUsage.
	GetDevicesUsage(context.Context, *GetDevicesUsageRequest) (*DevicesUsage, error)
	mustEmbedUnimplementedDeviceTrustServiceServer()
}

// UnimplementedDeviceTrustServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceTrustServiceServer struct{}

func (UnimplementedDeviceTrustServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) UpsertDevice(context.Context, *UpsertDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) FindDevices(context.Context, *FindDevicesRequest) (*FindDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDevices not implemented")
}
func (UnimplementedDeviceTrustServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDeviceTrustServiceServer) BulkCreateDevices(context.Context, *BulkCreateDevicesRequest) (*BulkCreateDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateDevices not implemented")
}
func (UnimplementedDeviceTrustServiceServer) CreateDeviceEnrollToken(context.Context, *CreateDeviceEnrollTokenRequest) (*DeviceEnrollToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceEnrollToken not implemented")
}
func (UnimplementedDeviceTrustServiceServer) EnrollDevice(grpc.BidiStreamingServer[EnrollDeviceRequest, EnrollDeviceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EnrollDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) AuthenticateDevice(grpc.BidiStreamingServer[AuthenticateDeviceRequest, AuthenticateDeviceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AuthenticateDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) ConfirmDeviceWebAuthentication(context.Context, *ConfirmDeviceWebAuthenticationRequest) (*ConfirmDeviceWebAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDeviceWebAuthentication not implemented")
}
func (UnimplementedDeviceTrustServiceServer) SyncInventory(grpc.BidiStreamingServer[SyncInventoryRequest, SyncInventoryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SyncInventory not implemented")
}
func (UnimplementedDeviceTrustServiceServer) GetDevicesUsage(context.Context, *GetDevicesUsageRequest) (*DevicesUsage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesUsage not implemented")
}
func (UnimplementedDeviceTrustServiceServer) mustEmbedUnimplementedDeviceTrustServiceServer() {}
func (UnimplementedDeviceTrustServiceServer) testEmbeddedByValue()                            {}

// UnsafeDeviceTrustServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTrustServiceServer will
// result in compilation errors.
type UnsafeDeviceTrustServiceServer interface {
	mustEmbedUnimplementedDeviceTrustServiceServer()
}

func RegisterDeviceTrustServiceServer(s grpc.ServiceRegistrar, srv DeviceTrustServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceTrustServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceTrustService_ServiceDesc, srv)
}

func _DeviceTrustService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_UpsertDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).UpsertDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_UpsertDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).UpsertDevice(ctx, req.(*UpsertDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_FindDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).FindDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_FindDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).FindDevices(ctx, req.(*FindDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_BulkCreateDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).BulkCreateDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_BulkCreateDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).BulkCreateDevices(ctx, req.(*BulkCreateDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_CreateDeviceEnrollToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceEnrollTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).CreateDeviceEnrollToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_CreateDeviceEnrollToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).CreateDeviceEnrollToken(ctx, req.(*CreateDeviceEnrollTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_EnrollDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceTrustServiceServer).EnrollDevice(&grpc.GenericServerStream[EnrollDeviceRequest, EnrollDeviceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceTrustService_EnrollDeviceServer = grpc.BidiStreamingServer[EnrollDeviceRequest, EnrollDeviceResponse]

func _DeviceTrustService_AuthenticateDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceTrustServiceServer).AuthenticateDevice(&grpc.GenericServerStream[AuthenticateDeviceRequest, AuthenticateDeviceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceTrustService_AuthenticateDeviceServer = grpc.BidiStreamingServer[AuthenticateDeviceRequest, AuthenticateDeviceResponse]

func _DeviceTrustService_ConfirmDeviceWebAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDeviceWebAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).ConfirmDeviceWebAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_ConfirmDeviceWebAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).ConfirmDeviceWebAuthentication(ctx, req.(*ConfirmDeviceWebAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_SyncInventory_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceTrustServiceServer).SyncInventory(&grpc.GenericServerStream[SyncInventoryRequest, SyncInventoryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceTrustService_SyncInventoryServer = grpc.BidiStreamingServer[SyncInventoryRequest, SyncInventoryResponse]

func _DeviceTrustService_GetDevicesUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).GetDevicesUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceTrustService_GetDevicesUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).GetDevicesUsage(ctx, req.(*GetDevicesUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceTrustService_ServiceDesc is the grpc.ServiceDesc for DeviceTrustService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTrustService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.devicetrust.v1.DeviceTrustService",
	HandlerType: (*DeviceTrustServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceTrustService_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceTrustService_UpdateDevice_Handler,
		},
		{
			MethodName: "UpsertDevice",
			Handler:    _DeviceTrustService_UpsertDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceTrustService_DeleteDevice_Handler,
		},
		{
			MethodName: "FindDevices",
			Handler:    _DeviceTrustService_FindDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceTrustService_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DeviceTrustService_ListDevices_Handler,
		},
		{
			MethodName: "BulkCreateDevices",
			Handler:    _DeviceTrustService_BulkCreateDevices_Handler,
		},
		{
			MethodName: "CreateDeviceEnrollToken",
			Handler:    _DeviceTrustService_CreateDeviceEnrollToken_Handler,
		},
		{
			MethodName: "ConfirmDeviceWebAuthentication",
			Handler:    _DeviceTrustService_ConfirmDeviceWebAuthentication_Handler,
		},
		{
			MethodName: "GetDevicesUsage",
			Handler:    _DeviceTrustService_GetDevicesUsage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnrollDevice",
			Handler:       _DeviceTrustService_EnrollDevice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AuthenticateDevice",
			Handler:       _DeviceTrustService_AuthenticateDevice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncInventory",
			Handler:       _DeviceTrustService_SyncInventory_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/devicetrust/v1/devicetrust_service.proto",
}
