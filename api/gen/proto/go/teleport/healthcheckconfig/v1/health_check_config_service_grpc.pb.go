// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/healthcheckconfig/v1/health_check_config_service.proto

package healthcheckconfigv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthCheckConfigService_CreateHealthCheckConfig_FullMethodName = "/teleport.healthcheckconfig.v1.HealthCheckConfigService/CreateHealthCheckConfig"
	HealthCheckConfigService_GetHealthCheckConfig_FullMethodName    = "/teleport.healthcheckconfig.v1.HealthCheckConfigService/GetHealthCheckConfig"
	HealthCheckConfigService_ListHealthCheckConfigs_FullMethodName  = "/teleport.healthcheckconfig.v1.HealthCheckConfigService/ListHealthCheckConfigs"
	HealthCheckConfigService_UpdateHealthCheckConfig_FullMethodName = "/teleport.healthcheckconfig.v1.HealthCheckConfigService/UpdateHealthCheckConfig"
	HealthCheckConfigService_UpsertHealthCheckConfig_FullMethodName = "/teleport.healthcheckconfig.v1.HealthCheckConfigService/UpsertHealthCheckConfig"
	HealthCheckConfigService_DeleteHealthCheckConfig_FullMethodName = "/teleport.healthcheckconfig.v1.HealthCheckConfigService/DeleteHealthCheckConfig"
)

// HealthCheckConfigServiceClient is the client API for HealthCheckConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HealthCheckConfigService provides CRUD ops for health check config resources.
type HealthCheckConfigServiceClient interface {
	// CreateHealthCheckConfig creates a new HealthCheckConfig.
	CreateHealthCheckConfig(ctx context.Context, in *CreateHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error)
	// GetHealthCheckConfig returns the specified HealthCheckConfig.
	GetHealthCheckConfig(ctx context.Context, in *GetHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error)
	// ListHealthCheckConfigs lists HealthCheckConfig resources.
	ListHealthCheckConfigs(ctx context.Context, in *ListHealthCheckConfigsRequest, opts ...grpc.CallOption) (*ListHealthCheckConfigsResponse, error)
	// UpdateHealthCheckConfig updates an existing HealthCheckConfig.
	UpdateHealthCheckConfig(ctx context.Context, in *UpdateHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error)
	// UpsertHealthCheckConfig creates or replaces a HealthCheckConfig.
	UpsertHealthCheckConfig(ctx context.Context, in *UpsertHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error)
	// DeleteHealthCheckConfig deletes the specified HealthCheckConfig.
	DeleteHealthCheckConfig(ctx context.Context, in *DeleteHealthCheckConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type healthCheckConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckConfigServiceClient(cc grpc.ClientConnInterface) HealthCheckConfigServiceClient {
	return &healthCheckConfigServiceClient{cc}
}

func (c *healthCheckConfigServiceClient) CreateHealthCheckConfig(ctx context.Context, in *CreateHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckConfig)
	err := c.cc.Invoke(ctx, HealthCheckConfigService_CreateHealthCheckConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckConfigServiceClient) GetHealthCheckConfig(ctx context.Context, in *GetHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckConfig)
	err := c.cc.Invoke(ctx, HealthCheckConfigService_GetHealthCheckConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckConfigServiceClient) ListHealthCheckConfigs(ctx context.Context, in *ListHealthCheckConfigsRequest, opts ...grpc.CallOption) (*ListHealthCheckConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHealthCheckConfigsResponse)
	err := c.cc.Invoke(ctx, HealthCheckConfigService_ListHealthCheckConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckConfigServiceClient) UpdateHealthCheckConfig(ctx context.Context, in *UpdateHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckConfig)
	err := c.cc.Invoke(ctx, HealthCheckConfigService_UpdateHealthCheckConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckConfigServiceClient) UpsertHealthCheckConfig(ctx context.Context, in *UpsertHealthCheckConfigRequest, opts ...grpc.CallOption) (*HealthCheckConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckConfig)
	err := c.cc.Invoke(ctx, HealthCheckConfigService_UpsertHealthCheckConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckConfigServiceClient) DeleteHealthCheckConfig(ctx context.Context, in *DeleteHealthCheckConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HealthCheckConfigService_DeleteHealthCheckConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckConfigServiceServer is the server API for HealthCheckConfigService service.
// All implementations must embed UnimplementedHealthCheckConfigServiceServer
// for forward compatibility.
//
// HealthCheckConfigService provides CRUD ops for health check config resources.
type HealthCheckConfigServiceServer interface {
	// CreateHealthCheckConfig creates a new HealthCheckConfig.
	CreateHealthCheckConfig(context.Context, *CreateHealthCheckConfigRequest) (*HealthCheckConfig, error)
	// GetHealthCheckConfig returns the specified HealthCheckConfig.
	GetHealthCheckConfig(context.Context, *GetHealthCheckConfigRequest) (*HealthCheckConfig, error)
	// ListHealthCheckConfigs lists HealthCheckConfig resources.
	ListHealthCheckConfigs(context.Context, *ListHealthCheckConfigsRequest) (*ListHealthCheckConfigsResponse, error)
	// UpdateHealthCheckConfig updates an existing HealthCheckConfig.
	UpdateHealthCheckConfig(context.Context, *UpdateHealthCheckConfigRequest) (*HealthCheckConfig, error)
	// UpsertHealthCheckConfig creates or replaces a HealthCheckConfig.
	UpsertHealthCheckConfig(context.Context, *UpsertHealthCheckConfigRequest) (*HealthCheckConfig, error)
	// DeleteHealthCheckConfig deletes the specified HealthCheckConfig.
	DeleteHealthCheckConfig(context.Context, *DeleteHealthCheckConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHealthCheckConfigServiceServer()
}

// UnimplementedHealthCheckConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthCheckConfigServiceServer struct{}

func (UnimplementedHealthCheckConfigServiceServer) CreateHealthCheckConfig(context.Context, *CreateHealthCheckConfigRequest) (*HealthCheckConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHealthCheckConfig not implemented")
}
func (UnimplementedHealthCheckConfigServiceServer) GetHealthCheckConfig(context.Context, *GetHealthCheckConfigRequest) (*HealthCheckConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthCheckConfig not implemented")
}
func (UnimplementedHealthCheckConfigServiceServer) ListHealthCheckConfigs(context.Context, *ListHealthCheckConfigsRequest) (*ListHealthCheckConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHealthCheckConfigs not implemented")
}
func (UnimplementedHealthCheckConfigServiceServer) UpdateHealthCheckConfig(context.Context, *UpdateHealthCheckConfigRequest) (*HealthCheckConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealthCheckConfig not implemented")
}
func (UnimplementedHealthCheckConfigServiceServer) UpsertHealthCheckConfig(context.Context, *UpsertHealthCheckConfigRequest) (*HealthCheckConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertHealthCheckConfig not implemented")
}
func (UnimplementedHealthCheckConfigServiceServer) DeleteHealthCheckConfig(context.Context, *DeleteHealthCheckConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHealthCheckConfig not implemented")
}
func (UnimplementedHealthCheckConfigServiceServer) mustEmbedUnimplementedHealthCheckConfigServiceServer() {
}
func (UnimplementedHealthCheckConfigServiceServer) testEmbeddedByValue() {}

// UnsafeHealthCheckConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckConfigServiceServer will
// result in compilation errors.
type UnsafeHealthCheckConfigServiceServer interface {
	mustEmbedUnimplementedHealthCheckConfigServiceServer()
}

func RegisterHealthCheckConfigServiceServer(s grpc.ServiceRegistrar, srv HealthCheckConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthCheckConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthCheckConfigService_ServiceDesc, srv)
}

func _HealthCheckConfigService_CreateHealthCheckConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHealthCheckConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckConfigServiceServer).CreateHealthCheckConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckConfigService_CreateHealthCheckConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckConfigServiceServer).CreateHealthCheckConfig(ctx, req.(*CreateHealthCheckConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckConfigService_GetHealthCheckConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthCheckConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckConfigServiceServer).GetHealthCheckConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckConfigService_GetHealthCheckConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckConfigServiceServer).GetHealthCheckConfig(ctx, req.(*GetHealthCheckConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckConfigService_ListHealthCheckConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHealthCheckConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckConfigServiceServer).ListHealthCheckConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckConfigService_ListHealthCheckConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckConfigServiceServer).ListHealthCheckConfigs(ctx, req.(*ListHealthCheckConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckConfigService_UpdateHealthCheckConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHealthCheckConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckConfigServiceServer).UpdateHealthCheckConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckConfigService_UpdateHealthCheckConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckConfigServiceServer).UpdateHealthCheckConfig(ctx, req.(*UpdateHealthCheckConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckConfigService_UpsertHealthCheckConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertHealthCheckConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckConfigServiceServer).UpsertHealthCheckConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckConfigService_UpsertHealthCheckConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckConfigServiceServer).UpsertHealthCheckConfig(ctx, req.(*UpsertHealthCheckConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckConfigService_DeleteHealthCheckConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHealthCheckConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckConfigServiceServer).DeleteHealthCheckConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckConfigService_DeleteHealthCheckConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckConfigServiceServer).DeleteHealthCheckConfig(ctx, req.(*DeleteHealthCheckConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheckConfigService_ServiceDesc is the grpc.ServiceDesc for HealthCheckConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheckConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.healthcheckconfig.v1.HealthCheckConfigService",
	HandlerType: (*HealthCheckConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHealthCheckConfig",
			Handler:    _HealthCheckConfigService_CreateHealthCheckConfig_Handler,
		},
		{
			MethodName: "GetHealthCheckConfig",
			Handler:    _HealthCheckConfigService_GetHealthCheckConfig_Handler,
		},
		{
			MethodName: "ListHealthCheckConfigs",
			Handler:    _HealthCheckConfigService_ListHealthCheckConfigs_Handler,
		},
		{
			MethodName: "UpdateHealthCheckConfig",
			Handler:    _HealthCheckConfigService_UpdateHealthCheckConfig_Handler,
		},
		{
			MethodName: "UpsertHealthCheckConfig",
			Handler:    _HealthCheckConfigService_UpsertHealthCheckConfig_Handler,
		},
		{
			MethodName: "DeleteHealthCheckConfig",
			Handler:    _HealthCheckConfigService_DeleteHealthCheckConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/healthcheckconfig/v1/health_check_config_service.proto",
}
