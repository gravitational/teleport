// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/usertasks/v1/user_tasks_service.proto

package usertasksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserTaskService_CreateUserTask_FullMethodName             = "/teleport.usertasks.v1.UserTaskService/CreateUserTask"
	UserTaskService_UpsertUserTask_FullMethodName             = "/teleport.usertasks.v1.UserTaskService/UpsertUserTask"
	UserTaskService_GetUserTask_FullMethodName                = "/teleport.usertasks.v1.UserTaskService/GetUserTask"
	UserTaskService_ListUserTasks_FullMethodName              = "/teleport.usertasks.v1.UserTaskService/ListUserTasks"
	UserTaskService_ListUserTasksByIntegration_FullMethodName = "/teleport.usertasks.v1.UserTaskService/ListUserTasksByIntegration"
	UserTaskService_UpdateUserTask_FullMethodName             = "/teleport.usertasks.v1.UserTaskService/UpdateUserTask"
	UserTaskService_DeleteUserTask_FullMethodName             = "/teleport.usertasks.v1.UserTaskService/DeleteUserTask"
)

// UserTaskServiceClient is the client API for UserTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserTaskServiceClient interface {
	// CreateUserTask creates a User Task.
	CreateUserTask(ctx context.Context, in *CreateUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error)
	// UpsertUserTask creates or updates User Task.
	UpsertUserTask(ctx context.Context, in *UpsertUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error)
	// GetUserTask gets a UserTask by name.
	GetUserTask(ctx context.Context, in *GetUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error)
	// ListUserTasks returns a list of UserTasks. It supports pagination and filters.
	ListUserTasks(ctx context.Context, in *ListUserTasksRequest, opts ...grpc.CallOption) (*ListUserTasksResponse, error)
	// ListUserTasksByIntegration returns a list of UserTasks filtered by an integration and other optional fields. It supports pagination.
	ListUserTasksByIntegration(ctx context.Context, in *ListUserTasksByIntegrationRequest, opts ...grpc.CallOption) (*ListUserTasksResponse, error)
	// UpdateUserTask updates an existing User Task.
	UpdateUserTask(ctx context.Context, in *UpdateUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error)
	// DeleteUserTask deletes a User Task.
	DeleteUserTask(ctx context.Context, in *DeleteUserTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserTaskServiceClient(cc grpc.ClientConnInterface) UserTaskServiceClient {
	return &userTaskServiceClient{cc}
}

func (c *userTaskServiceClient) CreateUserTask(ctx context.Context, in *CreateUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error) {
	out := new(UserTask)
	err := c.cc.Invoke(ctx, UserTaskService_CreateUserTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) UpsertUserTask(ctx context.Context, in *UpsertUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error) {
	out := new(UserTask)
	err := c.cc.Invoke(ctx, UserTaskService_UpsertUserTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) GetUserTask(ctx context.Context, in *GetUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error) {
	out := new(UserTask)
	err := c.cc.Invoke(ctx, UserTaskService_GetUserTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) ListUserTasks(ctx context.Context, in *ListUserTasksRequest, opts ...grpc.CallOption) (*ListUserTasksResponse, error) {
	out := new(ListUserTasksResponse)
	err := c.cc.Invoke(ctx, UserTaskService_ListUserTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) ListUserTasksByIntegration(ctx context.Context, in *ListUserTasksByIntegrationRequest, opts ...grpc.CallOption) (*ListUserTasksResponse, error) {
	out := new(ListUserTasksResponse)
	err := c.cc.Invoke(ctx, UserTaskService_ListUserTasksByIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) UpdateUserTask(ctx context.Context, in *UpdateUserTaskRequest, opts ...grpc.CallOption) (*UserTask, error) {
	out := new(UserTask)
	err := c.cc.Invoke(ctx, UserTaskService_UpdateUserTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) DeleteUserTask(ctx context.Context, in *DeleteUserTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserTaskService_DeleteUserTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserTaskServiceServer is the server API for UserTaskService service.
// All implementations must embed UnimplementedUserTaskServiceServer
// for forward compatibility
type UserTaskServiceServer interface {
	// CreateUserTask creates a User Task.
	CreateUserTask(context.Context, *CreateUserTaskRequest) (*UserTask, error)
	// UpsertUserTask creates or updates User Task.
	UpsertUserTask(context.Context, *UpsertUserTaskRequest) (*UserTask, error)
	// GetUserTask gets a UserTask by name.
	GetUserTask(context.Context, *GetUserTaskRequest) (*UserTask, error)
	// ListUserTasks returns a list of UserTasks. It supports pagination and filters.
	ListUserTasks(context.Context, *ListUserTasksRequest) (*ListUserTasksResponse, error)
	// ListUserTasksByIntegration returns a list of UserTasks filtered by an integration and other optional fields. It supports pagination.
	ListUserTasksByIntegration(context.Context, *ListUserTasksByIntegrationRequest) (*ListUserTasksResponse, error)
	// UpdateUserTask updates an existing User Task.
	UpdateUserTask(context.Context, *UpdateUserTaskRequest) (*UserTask, error)
	// DeleteUserTask deletes a User Task.
	DeleteUserTask(context.Context, *DeleteUserTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserTaskServiceServer()
}

// UnimplementedUserTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserTaskServiceServer struct {
}

func (UnimplementedUserTaskServiceServer) CreateUserTask(context.Context, *CreateUserTaskRequest) (*UserTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserTask not implemented")
}
func (UnimplementedUserTaskServiceServer) UpsertUserTask(context.Context, *UpsertUserTaskRequest) (*UserTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserTask not implemented")
}
func (UnimplementedUserTaskServiceServer) GetUserTask(context.Context, *GetUserTaskRequest) (*UserTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTask not implemented")
}
func (UnimplementedUserTaskServiceServer) ListUserTasks(context.Context, *ListUserTasksRequest) (*ListUserTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserTasks not implemented")
}
func (UnimplementedUserTaskServiceServer) ListUserTasksByIntegration(context.Context, *ListUserTasksByIntegrationRequest) (*ListUserTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserTasksByIntegration not implemented")
}
func (UnimplementedUserTaskServiceServer) UpdateUserTask(context.Context, *UpdateUserTaskRequest) (*UserTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTask not implemented")
}
func (UnimplementedUserTaskServiceServer) DeleteUserTask(context.Context, *DeleteUserTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTask not implemented")
}
func (UnimplementedUserTaskServiceServer) mustEmbedUnimplementedUserTaskServiceServer() {}

// UnsafeUserTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserTaskServiceServer will
// result in compilation errors.
type UnsafeUserTaskServiceServer interface {
	mustEmbedUnimplementedUserTaskServiceServer()
}

func RegisterUserTaskServiceServer(s grpc.ServiceRegistrar, srv UserTaskServiceServer) {
	s.RegisterService(&UserTaskService_ServiceDesc, srv)
}

func _UserTaskService_CreateUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).CreateUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserTaskService_CreateUserTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).CreateUserTask(ctx, req.(*CreateUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_UpsertUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).UpsertUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserTaskService_UpsertUserTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).UpsertUserTask(ctx, req.(*UpsertUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_GetUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).GetUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserTaskService_GetUserTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).GetUserTask(ctx, req.(*GetUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_ListUserTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).ListUserTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserTaskService_ListUserTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).ListUserTasks(ctx, req.(*ListUserTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_ListUserTasksByIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserTasksByIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).ListUserTasksByIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserTaskService_ListUserTasksByIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).ListUserTasksByIntegration(ctx, req.(*ListUserTasksByIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_UpdateUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).UpdateUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserTaskService_UpdateUserTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).UpdateUserTask(ctx, req.(*UpdateUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_DeleteUserTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).DeleteUserTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserTaskService_DeleteUserTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).DeleteUserTask(ctx, req.(*DeleteUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserTaskService_ServiceDesc is the grpc.ServiceDesc for UserTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.usertasks.v1.UserTaskService",
	HandlerType: (*UserTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserTask",
			Handler:    _UserTaskService_CreateUserTask_Handler,
		},
		{
			MethodName: "UpsertUserTask",
			Handler:    _UserTaskService_UpsertUserTask_Handler,
		},
		{
			MethodName: "GetUserTask",
			Handler:    _UserTaskService_GetUserTask_Handler,
		},
		{
			MethodName: "ListUserTasks",
			Handler:    _UserTaskService_ListUserTasks_Handler,
		},
		{
			MethodName: "ListUserTasksByIntegration",
			Handler:    _UserTaskService_ListUserTasksByIntegration_Handler,
		},
		{
			MethodName: "UpdateUserTask",
			Handler:    _UserTaskService_UpdateUserTask_Handler,
		},
		{
			MethodName: "DeleteUserTask",
			Handler:    _UserTaskService_DeleteUserTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/usertasks/v1/user_tasks_service.proto",
}
