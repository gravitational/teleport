// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/summarizer/v1/summarizer_service.proto

package summarizerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SummarizerService_CreateInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/CreateInferenceModel"
	SummarizerService_GetInferenceModel_FullMethodName     = "/teleport.summarizer.v1.SummarizerService/GetInferenceModel"
	SummarizerService_UpdateInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/UpdateInferenceModel"
	SummarizerService_UpsertInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/UpsertInferenceModel"
	SummarizerService_DeleteInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/DeleteInferenceModel"
	SummarizerService_ListInferenceModels_FullMethodName   = "/teleport.summarizer.v1.SummarizerService/ListInferenceModels"
	SummarizerService_CreateInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/CreateInferenceSecret"
	SummarizerService_GetInferenceSecret_FullMethodName    = "/teleport.summarizer.v1.SummarizerService/GetInferenceSecret"
	SummarizerService_UpdateInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpdateInferenceSecret"
	SummarizerService_UpsertInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpsertInferenceSecret"
	SummarizerService_DeleteInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/DeleteInferenceSecret"
	SummarizerService_ListInferenceSecrets_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/ListInferenceSecrets"
	SummarizerService_CreateInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/CreateInferencePolicy"
	SummarizerService_GetInferencePolicy_FullMethodName    = "/teleport.summarizer.v1.SummarizerService/GetInferencePolicy"
	SummarizerService_UpdateInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpdateInferencePolicy"
	SummarizerService_UpsertInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpsertInferencePolicy"
	SummarizerService_DeleteInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/DeleteInferencePolicy"
	SummarizerService_ListInferencePolicies_FullMethodName = "/teleport.summarizer.v1.SummarizerService/ListInferencePolicies"
)

// SummarizerServiceClient is the client API for SummarizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SummarizerService is the service for managing summarization inference
// models, secrets, and policies. These objects configures the session
// recording summarizer.
type SummarizerServiceClient interface {
	// CreateInferenceModel creates a new InferenceModel.
	CreateInferenceModel(ctx context.Context, in *CreateInferenceModelRequest, opts ...grpc.CallOption) (*CreateInferenceModelResponse, error)
	// GetInferenceModel retrieves an existing InferenceModel by name.
	GetInferenceModel(ctx context.Context, in *GetInferenceModelRequest, opts ...grpc.CallOption) (*GetInferenceModelResponse, error)
	// UpdateInferenceModel updates an existing InferenceModel.
	UpdateInferenceModel(ctx context.Context, in *UpdateInferenceModelRequest, opts ...grpc.CallOption) (*UpdateInferenceModelResponse, error)
	// UpsertInferenceModel creates a new InferenceModel or updates an existing
	// one.
	UpsertInferenceModel(ctx context.Context, in *UpsertInferenceModelRequest, opts ...grpc.CallOption) (*UpsertInferenceModelResponse, error)
	// DeleteInferenceModel deletes an existing InferenceModel by name.
	DeleteInferenceModel(ctx context.Context, in *DeleteInferenceModelRequest, opts ...grpc.CallOption) (*DeleteInferenceModelResponse, error)
	// ListInferenceModels lists all InferenceModels that match the request.
	ListInferenceModels(ctx context.Context, in *ListInferenceModelsRequest, opts ...grpc.CallOption) (*ListInferenceModelsResponse, error)
	// CreateInferenceSecret creates a new InferenceSecret.
	CreateInferenceSecret(ctx context.Context, in *CreateInferenceSecretRequest, opts ...grpc.CallOption) (*CreateInferenceSecretResponse, error)
	// GetInferenceSecret retrieves an existing InferenceSecret by name.
	GetInferenceSecret(ctx context.Context, in *GetInferenceSecretRequest, opts ...grpc.CallOption) (*GetInferenceSecretResponse, error)
	// UpdateInferenceSecret updates an existing InferenceSecret.
	UpdateInferenceSecret(ctx context.Context, in *UpdateInferenceSecretRequest, opts ...grpc.CallOption) (*UpdateInferenceSecretResponse, error)
	// UpsertInferenceSecret creates a new InferenceSecret or updates an existing
	// one.
	UpsertInferenceSecret(ctx context.Context, in *UpsertInferenceSecretRequest, opts ...grpc.CallOption) (*UpsertInferenceSecretResponse, error)
	// DeleteInferenceSecret deletes an existing InferenceSecret by name.
	DeleteInferenceSecret(ctx context.Context, in *DeleteInferenceSecretRequest, opts ...grpc.CallOption) (*DeleteInferenceSecretResponse, error)
	// ListInferenceSecrets lists all InferenceSecrets that match the request.
	ListInferenceSecrets(ctx context.Context, in *ListInferenceSecretsRequest, opts ...grpc.CallOption) (*ListInferenceSecretsResponse, error)
	// CreateInferencePolicy creates a new InferencePolicy.
	CreateInferencePolicy(ctx context.Context, in *CreateInferencePolicyRequest, opts ...grpc.CallOption) (*CreateInferencePolicyResponse, error)
	// GetInferencePolicy retrieves an existing InferencePolicy by name.
	GetInferencePolicy(ctx context.Context, in *GetInferencePolicyRequest, opts ...grpc.CallOption) (*GetInferencePolicyResponse, error)
	// UpdateInferencePolicy updates an existing InferencePolicy.
	UpdateInferencePolicy(ctx context.Context, in *UpdateInferencePolicyRequest, opts ...grpc.CallOption) (*UpdateInferencePolicyResponse, error)
	// UpsertInferencePolicy creates a new InferencePolicy or updates an existing
	// one.
	UpsertInferencePolicy(ctx context.Context, in *UpsertInferencePolicyRequest, opts ...grpc.CallOption) (*UpsertInferencePolicyResponse, error)
	// DeleteInferencePolicy deletes an existing InferencePolicy by name.
	DeleteInferencePolicy(ctx context.Context, in *DeleteInferencePolicyRequest, opts ...grpc.CallOption) (*DeleteInferencePolicyResponse, error)
	// ListInferencePolicies lists all InferencePolicies that match the request.
	ListInferencePolicies(ctx context.Context, in *ListInferencePoliciesRequest, opts ...grpc.CallOption) (*ListInferencePoliciesResponse, error)
}

type summarizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummarizerServiceClient(cc grpc.ClientConnInterface) SummarizerServiceClient {
	return &summarizerServiceClient{cc}
}

func (c *summarizerServiceClient) CreateInferenceModel(ctx context.Context, in *CreateInferenceModelRequest, opts ...grpc.CallOption) (*CreateInferenceModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInferenceModelResponse)
	err := c.cc.Invoke(ctx, SummarizerService_CreateInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) GetInferenceModel(ctx context.Context, in *GetInferenceModelRequest, opts ...grpc.CallOption) (*GetInferenceModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInferenceModelResponse)
	err := c.cc.Invoke(ctx, SummarizerService_GetInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpdateInferenceModel(ctx context.Context, in *UpdateInferenceModelRequest, opts ...grpc.CallOption) (*UpdateInferenceModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInferenceModelResponse)
	err := c.cc.Invoke(ctx, SummarizerService_UpdateInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpsertInferenceModel(ctx context.Context, in *UpsertInferenceModelRequest, opts ...grpc.CallOption) (*UpsertInferenceModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertInferenceModelResponse)
	err := c.cc.Invoke(ctx, SummarizerService_UpsertInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) DeleteInferenceModel(ctx context.Context, in *DeleteInferenceModelRequest, opts ...grpc.CallOption) (*DeleteInferenceModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInferenceModelResponse)
	err := c.cc.Invoke(ctx, SummarizerService_DeleteInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) ListInferenceModels(ctx context.Context, in *ListInferenceModelsRequest, opts ...grpc.CallOption) (*ListInferenceModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInferenceModelsResponse)
	err := c.cc.Invoke(ctx, SummarizerService_ListInferenceModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) CreateInferenceSecret(ctx context.Context, in *CreateInferenceSecretRequest, opts ...grpc.CallOption) (*CreateInferenceSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInferenceSecretResponse)
	err := c.cc.Invoke(ctx, SummarizerService_CreateInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) GetInferenceSecret(ctx context.Context, in *GetInferenceSecretRequest, opts ...grpc.CallOption) (*GetInferenceSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInferenceSecretResponse)
	err := c.cc.Invoke(ctx, SummarizerService_GetInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpdateInferenceSecret(ctx context.Context, in *UpdateInferenceSecretRequest, opts ...grpc.CallOption) (*UpdateInferenceSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInferenceSecretResponse)
	err := c.cc.Invoke(ctx, SummarizerService_UpdateInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpsertInferenceSecret(ctx context.Context, in *UpsertInferenceSecretRequest, opts ...grpc.CallOption) (*UpsertInferenceSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertInferenceSecretResponse)
	err := c.cc.Invoke(ctx, SummarizerService_UpsertInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) DeleteInferenceSecret(ctx context.Context, in *DeleteInferenceSecretRequest, opts ...grpc.CallOption) (*DeleteInferenceSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInferenceSecretResponse)
	err := c.cc.Invoke(ctx, SummarizerService_DeleteInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) ListInferenceSecrets(ctx context.Context, in *ListInferenceSecretsRequest, opts ...grpc.CallOption) (*ListInferenceSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInferenceSecretsResponse)
	err := c.cc.Invoke(ctx, SummarizerService_ListInferenceSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) CreateInferencePolicy(ctx context.Context, in *CreateInferencePolicyRequest, opts ...grpc.CallOption) (*CreateInferencePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInferencePolicyResponse)
	err := c.cc.Invoke(ctx, SummarizerService_CreateInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) GetInferencePolicy(ctx context.Context, in *GetInferencePolicyRequest, opts ...grpc.CallOption) (*GetInferencePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInferencePolicyResponse)
	err := c.cc.Invoke(ctx, SummarizerService_GetInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpdateInferencePolicy(ctx context.Context, in *UpdateInferencePolicyRequest, opts ...grpc.CallOption) (*UpdateInferencePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInferencePolicyResponse)
	err := c.cc.Invoke(ctx, SummarizerService_UpdateInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpsertInferencePolicy(ctx context.Context, in *UpsertInferencePolicyRequest, opts ...grpc.CallOption) (*UpsertInferencePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertInferencePolicyResponse)
	err := c.cc.Invoke(ctx, SummarizerService_UpsertInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) DeleteInferencePolicy(ctx context.Context, in *DeleteInferencePolicyRequest, opts ...grpc.CallOption) (*DeleteInferencePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInferencePolicyResponse)
	err := c.cc.Invoke(ctx, SummarizerService_DeleteInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) ListInferencePolicies(ctx context.Context, in *ListInferencePoliciesRequest, opts ...grpc.CallOption) (*ListInferencePoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInferencePoliciesResponse)
	err := c.cc.Invoke(ctx, SummarizerService_ListInferencePolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummarizerServiceServer is the server API for SummarizerService service.
// All implementations must embed UnimplementedSummarizerServiceServer
// for forward compatibility.
//
// SummarizerService is the service for managing summarization inference
// models, secrets, and policies. These objects configures the session
// recording summarizer.
type SummarizerServiceServer interface {
	// CreateInferenceModel creates a new InferenceModel.
	CreateInferenceModel(context.Context, *CreateInferenceModelRequest) (*CreateInferenceModelResponse, error)
	// GetInferenceModel retrieves an existing InferenceModel by name.
	GetInferenceModel(context.Context, *GetInferenceModelRequest) (*GetInferenceModelResponse, error)
	// UpdateInferenceModel updates an existing InferenceModel.
	UpdateInferenceModel(context.Context, *UpdateInferenceModelRequest) (*UpdateInferenceModelResponse, error)
	// UpsertInferenceModel creates a new InferenceModel or updates an existing
	// one.
	UpsertInferenceModel(context.Context, *UpsertInferenceModelRequest) (*UpsertInferenceModelResponse, error)
	// DeleteInferenceModel deletes an existing InferenceModel by name.
	DeleteInferenceModel(context.Context, *DeleteInferenceModelRequest) (*DeleteInferenceModelResponse, error)
	// ListInferenceModels lists all InferenceModels that match the request.
	ListInferenceModels(context.Context, *ListInferenceModelsRequest) (*ListInferenceModelsResponse, error)
	// CreateInferenceSecret creates a new InferenceSecret.
	CreateInferenceSecret(context.Context, *CreateInferenceSecretRequest) (*CreateInferenceSecretResponse, error)
	// GetInferenceSecret retrieves an existing InferenceSecret by name.
	GetInferenceSecret(context.Context, *GetInferenceSecretRequest) (*GetInferenceSecretResponse, error)
	// UpdateInferenceSecret updates an existing InferenceSecret.
	UpdateInferenceSecret(context.Context, *UpdateInferenceSecretRequest) (*UpdateInferenceSecretResponse, error)
	// UpsertInferenceSecret creates a new InferenceSecret or updates an existing
	// one.
	UpsertInferenceSecret(context.Context, *UpsertInferenceSecretRequest) (*UpsertInferenceSecretResponse, error)
	// DeleteInferenceSecret deletes an existing InferenceSecret by name.
	DeleteInferenceSecret(context.Context, *DeleteInferenceSecretRequest) (*DeleteInferenceSecretResponse, error)
	// ListInferenceSecrets lists all InferenceSecrets that match the request.
	ListInferenceSecrets(context.Context, *ListInferenceSecretsRequest) (*ListInferenceSecretsResponse, error)
	// CreateInferencePolicy creates a new InferencePolicy.
	CreateInferencePolicy(context.Context, *CreateInferencePolicyRequest) (*CreateInferencePolicyResponse, error)
	// GetInferencePolicy retrieves an existing InferencePolicy by name.
	GetInferencePolicy(context.Context, *GetInferencePolicyRequest) (*GetInferencePolicyResponse, error)
	// UpdateInferencePolicy updates an existing InferencePolicy.
	UpdateInferencePolicy(context.Context, *UpdateInferencePolicyRequest) (*UpdateInferencePolicyResponse, error)
	// UpsertInferencePolicy creates a new InferencePolicy or updates an existing
	// one.
	UpsertInferencePolicy(context.Context, *UpsertInferencePolicyRequest) (*UpsertInferencePolicyResponse, error)
	// DeleteInferencePolicy deletes an existing InferencePolicy by name.
	DeleteInferencePolicy(context.Context, *DeleteInferencePolicyRequest) (*DeleteInferencePolicyResponse, error)
	// ListInferencePolicies lists all InferencePolicies that match the request.
	ListInferencePolicies(context.Context, *ListInferencePoliciesRequest) (*ListInferencePoliciesResponse, error)
	mustEmbedUnimplementedSummarizerServiceServer()
}

// UnimplementedSummarizerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSummarizerServiceServer struct{}

func (UnimplementedSummarizerServiceServer) CreateInferenceModel(context.Context, *CreateInferenceModelRequest) (*CreateInferenceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) GetInferenceModel(context.Context, *GetInferenceModelRequest) (*GetInferenceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) UpdateInferenceModel(context.Context, *UpdateInferenceModelRequest) (*UpdateInferenceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) UpsertInferenceModel(context.Context, *UpsertInferenceModelRequest) (*UpsertInferenceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) DeleteInferenceModel(context.Context, *DeleteInferenceModelRequest) (*DeleteInferenceModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) ListInferenceModels(context.Context, *ListInferenceModelsRequest) (*ListInferenceModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInferenceModels not implemented")
}
func (UnimplementedSummarizerServiceServer) CreateInferenceSecret(context.Context, *CreateInferenceSecretRequest) (*CreateInferenceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) GetInferenceSecret(context.Context, *GetInferenceSecretRequest) (*GetInferenceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) UpdateInferenceSecret(context.Context, *UpdateInferenceSecretRequest) (*UpdateInferenceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) UpsertInferenceSecret(context.Context, *UpsertInferenceSecretRequest) (*UpsertInferenceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) DeleteInferenceSecret(context.Context, *DeleteInferenceSecretRequest) (*DeleteInferenceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) ListInferenceSecrets(context.Context, *ListInferenceSecretsRequest) (*ListInferenceSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInferenceSecrets not implemented")
}
func (UnimplementedSummarizerServiceServer) CreateInferencePolicy(context.Context, *CreateInferencePolicyRequest) (*CreateInferencePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) GetInferencePolicy(context.Context, *GetInferencePolicyRequest) (*GetInferencePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) UpdateInferencePolicy(context.Context, *UpdateInferencePolicyRequest) (*UpdateInferencePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) UpsertInferencePolicy(context.Context, *UpsertInferencePolicyRequest) (*UpsertInferencePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) DeleteInferencePolicy(context.Context, *DeleteInferencePolicyRequest) (*DeleteInferencePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) ListInferencePolicies(context.Context, *ListInferencePoliciesRequest) (*ListInferencePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInferencePolicies not implemented")
}
func (UnimplementedSummarizerServiceServer) mustEmbedUnimplementedSummarizerServiceServer() {}
func (UnimplementedSummarizerServiceServer) testEmbeddedByValue()                           {}

// UnsafeSummarizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummarizerServiceServer will
// result in compilation errors.
type UnsafeSummarizerServiceServer interface {
	mustEmbedUnimplementedSummarizerServiceServer()
}

func RegisterSummarizerServiceServer(s grpc.ServiceRegistrar, srv SummarizerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSummarizerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SummarizerService_ServiceDesc, srv)
}

func _SummarizerService_CreateInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).CreateInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_CreateInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).CreateInferenceModel(ctx, req.(*CreateInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_GetInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).GetInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_GetInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).GetInferenceModel(ctx, req.(*GetInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpdateInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpdateInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpdateInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpdateInferenceModel(ctx, req.(*UpdateInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpsertInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpsertInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpsertInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpsertInferenceModel(ctx, req.(*UpsertInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_DeleteInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).DeleteInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_DeleteInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).DeleteInferenceModel(ctx, req.(*DeleteInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_ListInferenceModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInferenceModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).ListInferenceModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_ListInferenceModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).ListInferenceModels(ctx, req.(*ListInferenceModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_CreateInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).CreateInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_CreateInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).CreateInferenceSecret(ctx, req.(*CreateInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_GetInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).GetInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_GetInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).GetInferenceSecret(ctx, req.(*GetInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpdateInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpdateInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpdateInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpdateInferenceSecret(ctx, req.(*UpdateInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpsertInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpsertInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpsertInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpsertInferenceSecret(ctx, req.(*UpsertInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_DeleteInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).DeleteInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_DeleteInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).DeleteInferenceSecret(ctx, req.(*DeleteInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_ListInferenceSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInferenceSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).ListInferenceSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_ListInferenceSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).ListInferenceSecrets(ctx, req.(*ListInferenceSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_CreateInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).CreateInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_CreateInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).CreateInferencePolicy(ctx, req.(*CreateInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_GetInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).GetInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_GetInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).GetInferencePolicy(ctx, req.(*GetInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpdateInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpdateInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpdateInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpdateInferencePolicy(ctx, req.(*UpdateInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpsertInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpsertInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpsertInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpsertInferencePolicy(ctx, req.(*UpsertInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_DeleteInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).DeleteInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_DeleteInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).DeleteInferencePolicy(ctx, req.(*DeleteInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_ListInferencePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInferencePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).ListInferencePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_ListInferencePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).ListInferencePolicies(ctx, req.(*ListInferencePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummarizerService_ServiceDesc is the grpc.ServiceDesc for SummarizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummarizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.summarizer.v1.SummarizerService",
	HandlerType: (*SummarizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInferenceModel",
			Handler:    _SummarizerService_CreateInferenceModel_Handler,
		},
		{
			MethodName: "GetInferenceModel",
			Handler:    _SummarizerService_GetInferenceModel_Handler,
		},
		{
			MethodName: "UpdateInferenceModel",
			Handler:    _SummarizerService_UpdateInferenceModel_Handler,
		},
		{
			MethodName: "UpsertInferenceModel",
			Handler:    _SummarizerService_UpsertInferenceModel_Handler,
		},
		{
			MethodName: "DeleteInferenceModel",
			Handler:    _SummarizerService_DeleteInferenceModel_Handler,
		},
		{
			MethodName: "ListInferenceModels",
			Handler:    _SummarizerService_ListInferenceModels_Handler,
		},
		{
			MethodName: "CreateInferenceSecret",
			Handler:    _SummarizerService_CreateInferenceSecret_Handler,
		},
		{
			MethodName: "GetInferenceSecret",
			Handler:    _SummarizerService_GetInferenceSecret_Handler,
		},
		{
			MethodName: "UpdateInferenceSecret",
			Handler:    _SummarizerService_UpdateInferenceSecret_Handler,
		},
		{
			MethodName: "UpsertInferenceSecret",
			Handler:    _SummarizerService_UpsertInferenceSecret_Handler,
		},
		{
			MethodName: "DeleteInferenceSecret",
			Handler:    _SummarizerService_DeleteInferenceSecret_Handler,
		},
		{
			MethodName: "ListInferenceSecrets",
			Handler:    _SummarizerService_ListInferenceSecrets_Handler,
		},
		{
			MethodName: "CreateInferencePolicy",
			Handler:    _SummarizerService_CreateInferencePolicy_Handler,
		},
		{
			MethodName: "GetInferencePolicy",
			Handler:    _SummarizerService_GetInferencePolicy_Handler,
		},
		{
			MethodName: "UpdateInferencePolicy",
			Handler:    _SummarizerService_UpdateInferencePolicy_Handler,
		},
		{
			MethodName: "UpsertInferencePolicy",
			Handler:    _SummarizerService_UpsertInferencePolicy_Handler,
		},
		{
			MethodName: "DeleteInferencePolicy",
			Handler:    _SummarizerService_DeleteInferencePolicy_Handler,
		},
		{
			MethodName: "ListInferencePolicies",
			Handler:    _SummarizerService_ListInferencePolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/summarizer/v1/summarizer_service.proto",
}
