// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/summarizer/v1/summarizer_service.proto

package summarizerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SummarizerService_CreateSummarizationInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/CreateSummarizationInferenceModel"
	SummarizerService_GetSummarizationInferenceModel_FullMethodName     = "/teleport.summarizer.v1.SummarizerService/GetSummarizationInferenceModel"
	SummarizerService_UpdateSummarizationInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/UpdateSummarizationInferenceModel"
	SummarizerService_UpsertSummarizationInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/UpsertSummarizationInferenceModel"
	SummarizerService_DeleteSummarizationInferenceModel_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/DeleteSummarizationInferenceModel"
	SummarizerService_ListSummarizationInferenceModels_FullMethodName   = "/teleport.summarizer.v1.SummarizerService/ListSummarizationInferenceModels"
	SummarizerService_CreateSummarizationInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/CreateSummarizationInferenceSecret"
	SummarizerService_GetSummarizationInferenceSecret_FullMethodName    = "/teleport.summarizer.v1.SummarizerService/GetSummarizationInferenceSecret"
	SummarizerService_UpdateSummarizationInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpdateSummarizationInferenceSecret"
	SummarizerService_UpsertSummarizationInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpsertSummarizationInferenceSecret"
	SummarizerService_DeleteSummarizationInferenceSecret_FullMethodName = "/teleport.summarizer.v1.SummarizerService/DeleteSummarizationInferenceSecret"
	SummarizerService_ListSummarizationInferenceSecrets_FullMethodName  = "/teleport.summarizer.v1.SummarizerService/ListSummarizationInferenceSecrets"
	SummarizerService_CreateSummarizationInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/CreateSummarizationInferencePolicy"
	SummarizerService_GetSummarizationInferencePolicy_FullMethodName    = "/teleport.summarizer.v1.SummarizerService/GetSummarizationInferencePolicy"
	SummarizerService_UpdateSummarizationInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpdateSummarizationInferencePolicy"
	SummarizerService_UpsertSummarizationInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/UpsertSummarizationInferencePolicy"
	SummarizerService_DeleteSummarizationInferencePolicy_FullMethodName = "/teleport.summarizer.v1.SummarizerService/DeleteSummarizationInferencePolicy"
	SummarizerService_ListSummarizationInferencePolicies_FullMethodName = "/teleport.summarizer.v1.SummarizerService/ListSummarizationInferencePolicies"
)

// SummarizerServiceClient is the client API for SummarizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SummarizerService is the service for managing summarization inference
// models, secrets, and policies. These objects configures the session
// recording summarizer.
type SummarizerServiceClient interface {
	// CreateSummarizationInferenceModel creates a new
	// SummarizationInferenceModel.
	CreateSummarizationInferenceModel(ctx context.Context, in *CreateSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error)
	// GetSummarizationInferenceModel retrieves an existing
	// SummarizationInferenceModel by name.
	GetSummarizationInferenceModel(ctx context.Context, in *GetSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error)
	// UpdateSummarizationInferenceModel updates an existing
	// SummarizationInferenceModel.
	UpdateSummarizationInferenceModel(ctx context.Context, in *UpdateSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error)
	// UpsertSummarizationInferenceModel creates a new
	// SummarizationInferenceModel or updates an existing one.
	UpsertSummarizationInferenceModel(ctx context.Context, in *UpsertSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error)
	// DeleteSummarizationInferenceModel deletes an existing
	// SummarizationInferenceModel by name.
	DeleteSummarizationInferenceModel(ctx context.Context, in *DeleteSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListSummarizationInferenceModels lists all SummarizationInferenceModels
	// that match the request.
	ListSummarizationInferenceModels(ctx context.Context, in *ListSummarizationInferenceModelsRequest, opts ...grpc.CallOption) (*ListSummarizationInferenceModelsResponse, error)
	// CreateSummarizationInferenceSecret creates a new
	// SummarizationInferenceSecret.
	CreateSummarizationInferenceSecret(ctx context.Context, in *CreateSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error)
	// GetSummarizationInferenceSecret retrieves an existing
	// SummarizationInferenceSecret by name.
	GetSummarizationInferenceSecret(ctx context.Context, in *GetSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error)
	// UpdateSummarizationInferenceSecret updates an existing
	// SummarizationInferenceSecret.
	UpdateSummarizationInferenceSecret(ctx context.Context, in *UpdateSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error)
	// UpsertSummarizationInferenceSecret creates a new
	// SummarizationInferenceSecret or updates an existing one.
	UpsertSummarizationInferenceSecret(ctx context.Context, in *UpsertSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error)
	// DeleteSummarizationInferenceSecret deletes an existing
	// SummarizationInferenceSecret by name.
	DeleteSummarizationInferenceSecret(ctx context.Context, in *DeleteSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListSummarizationInferenceSecrets lists all SummarizationInferenceSecrets
	// that match the request.
	ListSummarizationInferenceSecrets(ctx context.Context, in *ListSummarizationInferenceSecretsRequest, opts ...grpc.CallOption) (*ListSummarizationInferenceSecretsResponse, error)
	// CreateSummarizationInferencePolicy creates a new
	// SummarizationInferencePolicy.
	CreateSummarizationInferencePolicy(ctx context.Context, in *CreateSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error)
	// GetSummarizationInferencePolicy retrieves an existing
	// SummarizationInferencePolicy by name.
	GetSummarizationInferencePolicy(ctx context.Context, in *GetSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error)
	// UpdateSummarizationInferencePolicy updates an existing
	// SummarizationInferencePolicy.
	UpdateSummarizationInferencePolicy(ctx context.Context, in *UpdateSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error)
	// UpsertSummarizationInferencePolicy creates a new
	// SummarizationInferencePolicy or updates an existing one.
	UpsertSummarizationInferencePolicy(ctx context.Context, in *UpsertSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error)
	// DeleteSummarizationInferencePolicy deletes an existing
	// SummarizationInferencePolicy by name.
	DeleteSummarizationInferencePolicy(ctx context.Context, in *DeleteSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListSummarizationInferencePolicies lists all
	// SummarizationInferencePolicies that match the request.
	ListSummarizationInferencePolicies(ctx context.Context, in *ListSummarizationInferencePoliciesRequest, opts ...grpc.CallOption) (*ListSummarizationInferencePoliciesResponse, error)
}

type summarizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummarizerServiceClient(cc grpc.ClientConnInterface) SummarizerServiceClient {
	return &summarizerServiceClient{cc}
}

func (c *summarizerServiceClient) CreateSummarizationInferenceModel(ctx context.Context, in *CreateSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceModel)
	err := c.cc.Invoke(ctx, SummarizerService_CreateSummarizationInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) GetSummarizationInferenceModel(ctx context.Context, in *GetSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceModel)
	err := c.cc.Invoke(ctx, SummarizerService_GetSummarizationInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpdateSummarizationInferenceModel(ctx context.Context, in *UpdateSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceModel)
	err := c.cc.Invoke(ctx, SummarizerService_UpdateSummarizationInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpsertSummarizationInferenceModel(ctx context.Context, in *UpsertSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*SummarizationInferenceModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceModel)
	err := c.cc.Invoke(ctx, SummarizerService_UpsertSummarizationInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) DeleteSummarizationInferenceModel(ctx context.Context, in *DeleteSummarizationInferenceModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SummarizerService_DeleteSummarizationInferenceModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) ListSummarizationInferenceModels(ctx context.Context, in *ListSummarizationInferenceModelsRequest, opts ...grpc.CallOption) (*ListSummarizationInferenceModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSummarizationInferenceModelsResponse)
	err := c.cc.Invoke(ctx, SummarizerService_ListSummarizationInferenceModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) CreateSummarizationInferenceSecret(ctx context.Context, in *CreateSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceSecret)
	err := c.cc.Invoke(ctx, SummarizerService_CreateSummarizationInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) GetSummarizationInferenceSecret(ctx context.Context, in *GetSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceSecret)
	err := c.cc.Invoke(ctx, SummarizerService_GetSummarizationInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpdateSummarizationInferenceSecret(ctx context.Context, in *UpdateSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceSecret)
	err := c.cc.Invoke(ctx, SummarizerService_UpdateSummarizationInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpsertSummarizationInferenceSecret(ctx context.Context, in *UpsertSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*SummarizationInferenceSecret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferenceSecret)
	err := c.cc.Invoke(ctx, SummarizerService_UpsertSummarizationInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) DeleteSummarizationInferenceSecret(ctx context.Context, in *DeleteSummarizationInferenceSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SummarizerService_DeleteSummarizationInferenceSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) ListSummarizationInferenceSecrets(ctx context.Context, in *ListSummarizationInferenceSecretsRequest, opts ...grpc.CallOption) (*ListSummarizationInferenceSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSummarizationInferenceSecretsResponse)
	err := c.cc.Invoke(ctx, SummarizerService_ListSummarizationInferenceSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) CreateSummarizationInferencePolicy(ctx context.Context, in *CreateSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferencePolicy)
	err := c.cc.Invoke(ctx, SummarizerService_CreateSummarizationInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) GetSummarizationInferencePolicy(ctx context.Context, in *GetSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferencePolicy)
	err := c.cc.Invoke(ctx, SummarizerService_GetSummarizationInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpdateSummarizationInferencePolicy(ctx context.Context, in *UpdateSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferencePolicy)
	err := c.cc.Invoke(ctx, SummarizerService_UpdateSummarizationInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) UpsertSummarizationInferencePolicy(ctx context.Context, in *UpsertSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*SummarizationInferencePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizationInferencePolicy)
	err := c.cc.Invoke(ctx, SummarizerService_UpsertSummarizationInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) DeleteSummarizationInferencePolicy(ctx context.Context, in *DeleteSummarizationInferencePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SummarizerService_DeleteSummarizationInferencePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summarizerServiceClient) ListSummarizationInferencePolicies(ctx context.Context, in *ListSummarizationInferencePoliciesRequest, opts ...grpc.CallOption) (*ListSummarizationInferencePoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSummarizationInferencePoliciesResponse)
	err := c.cc.Invoke(ctx, SummarizerService_ListSummarizationInferencePolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummarizerServiceServer is the server API for SummarizerService service.
// All implementations must embed UnimplementedSummarizerServiceServer
// for forward compatibility.
//
// SummarizerService is the service for managing summarization inference
// models, secrets, and policies. These objects configures the session
// recording summarizer.
type SummarizerServiceServer interface {
	// CreateSummarizationInferenceModel creates a new
	// SummarizationInferenceModel.
	CreateSummarizationInferenceModel(context.Context, *CreateSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error)
	// GetSummarizationInferenceModel retrieves an existing
	// SummarizationInferenceModel by name.
	GetSummarizationInferenceModel(context.Context, *GetSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error)
	// UpdateSummarizationInferenceModel updates an existing
	// SummarizationInferenceModel.
	UpdateSummarizationInferenceModel(context.Context, *UpdateSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error)
	// UpsertSummarizationInferenceModel creates a new
	// SummarizationInferenceModel or updates an existing one.
	UpsertSummarizationInferenceModel(context.Context, *UpsertSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error)
	// DeleteSummarizationInferenceModel deletes an existing
	// SummarizationInferenceModel by name.
	DeleteSummarizationInferenceModel(context.Context, *DeleteSummarizationInferenceModelRequest) (*emptypb.Empty, error)
	// ListSummarizationInferenceModels lists all SummarizationInferenceModels
	// that match the request.
	ListSummarizationInferenceModels(context.Context, *ListSummarizationInferenceModelsRequest) (*ListSummarizationInferenceModelsResponse, error)
	// CreateSummarizationInferenceSecret creates a new
	// SummarizationInferenceSecret.
	CreateSummarizationInferenceSecret(context.Context, *CreateSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error)
	// GetSummarizationInferenceSecret retrieves an existing
	// SummarizationInferenceSecret by name.
	GetSummarizationInferenceSecret(context.Context, *GetSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error)
	// UpdateSummarizationInferenceSecret updates an existing
	// SummarizationInferenceSecret.
	UpdateSummarizationInferenceSecret(context.Context, *UpdateSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error)
	// UpsertSummarizationInferenceSecret creates a new
	// SummarizationInferenceSecret or updates an existing one.
	UpsertSummarizationInferenceSecret(context.Context, *UpsertSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error)
	// DeleteSummarizationInferenceSecret deletes an existing
	// SummarizationInferenceSecret by name.
	DeleteSummarizationInferenceSecret(context.Context, *DeleteSummarizationInferenceSecretRequest) (*emptypb.Empty, error)
	// ListSummarizationInferenceSecrets lists all SummarizationInferenceSecrets
	// that match the request.
	ListSummarizationInferenceSecrets(context.Context, *ListSummarizationInferenceSecretsRequest) (*ListSummarizationInferenceSecretsResponse, error)
	// CreateSummarizationInferencePolicy creates a new
	// SummarizationInferencePolicy.
	CreateSummarizationInferencePolicy(context.Context, *CreateSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error)
	// GetSummarizationInferencePolicy retrieves an existing
	// SummarizationInferencePolicy by name.
	GetSummarizationInferencePolicy(context.Context, *GetSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error)
	// UpdateSummarizationInferencePolicy updates an existing
	// SummarizationInferencePolicy.
	UpdateSummarizationInferencePolicy(context.Context, *UpdateSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error)
	// UpsertSummarizationInferencePolicy creates a new
	// SummarizationInferencePolicy or updates an existing one.
	UpsertSummarizationInferencePolicy(context.Context, *UpsertSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error)
	// DeleteSummarizationInferencePolicy deletes an existing
	// SummarizationInferencePolicy by name.
	DeleteSummarizationInferencePolicy(context.Context, *DeleteSummarizationInferencePolicyRequest) (*emptypb.Empty, error)
	// ListSummarizationInferencePolicies lists all
	// SummarizationInferencePolicies that match the request.
	ListSummarizationInferencePolicies(context.Context, *ListSummarizationInferencePoliciesRequest) (*ListSummarizationInferencePoliciesResponse, error)
	mustEmbedUnimplementedSummarizerServiceServer()
}

// UnimplementedSummarizerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSummarizerServiceServer struct{}

func (UnimplementedSummarizerServiceServer) CreateSummarizationInferenceModel(context.Context, *CreateSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummarizationInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) GetSummarizationInferenceModel(context.Context, *GetSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummarizationInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) UpdateSummarizationInferenceModel(context.Context, *UpdateSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummarizationInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) UpsertSummarizationInferenceModel(context.Context, *UpsertSummarizationInferenceModelRequest) (*SummarizationInferenceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSummarizationInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) DeleteSummarizationInferenceModel(context.Context, *DeleteSummarizationInferenceModelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummarizationInferenceModel not implemented")
}
func (UnimplementedSummarizerServiceServer) ListSummarizationInferenceModels(context.Context, *ListSummarizationInferenceModelsRequest) (*ListSummarizationInferenceModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSummarizationInferenceModels not implemented")
}
func (UnimplementedSummarizerServiceServer) CreateSummarizationInferenceSecret(context.Context, *CreateSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummarizationInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) GetSummarizationInferenceSecret(context.Context, *GetSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummarizationInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) UpdateSummarizationInferenceSecret(context.Context, *UpdateSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummarizationInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) UpsertSummarizationInferenceSecret(context.Context, *UpsertSummarizationInferenceSecretRequest) (*SummarizationInferenceSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSummarizationInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) DeleteSummarizationInferenceSecret(context.Context, *DeleteSummarizationInferenceSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummarizationInferenceSecret not implemented")
}
func (UnimplementedSummarizerServiceServer) ListSummarizationInferenceSecrets(context.Context, *ListSummarizationInferenceSecretsRequest) (*ListSummarizationInferenceSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSummarizationInferenceSecrets not implemented")
}
func (UnimplementedSummarizerServiceServer) CreateSummarizationInferencePolicy(context.Context, *CreateSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummarizationInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) GetSummarizationInferencePolicy(context.Context, *GetSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummarizationInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) UpdateSummarizationInferencePolicy(context.Context, *UpdateSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummarizationInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) UpsertSummarizationInferencePolicy(context.Context, *UpsertSummarizationInferencePolicyRequest) (*SummarizationInferencePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSummarizationInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) DeleteSummarizationInferencePolicy(context.Context, *DeleteSummarizationInferencePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummarizationInferencePolicy not implemented")
}
func (UnimplementedSummarizerServiceServer) ListSummarizationInferencePolicies(context.Context, *ListSummarizationInferencePoliciesRequest) (*ListSummarizationInferencePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSummarizationInferencePolicies not implemented")
}
func (UnimplementedSummarizerServiceServer) mustEmbedUnimplementedSummarizerServiceServer() {}
func (UnimplementedSummarizerServiceServer) testEmbeddedByValue()                           {}

// UnsafeSummarizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummarizerServiceServer will
// result in compilation errors.
type UnsafeSummarizerServiceServer interface {
	mustEmbedUnimplementedSummarizerServiceServer()
}

func RegisterSummarizerServiceServer(s grpc.ServiceRegistrar, srv SummarizerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSummarizerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SummarizerService_ServiceDesc, srv)
}

func _SummarizerService_CreateSummarizationInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummarizationInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).CreateSummarizationInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_CreateSummarizationInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).CreateSummarizationInferenceModel(ctx, req.(*CreateSummarizationInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_GetSummarizationInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummarizationInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).GetSummarizationInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_GetSummarizationInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).GetSummarizationInferenceModel(ctx, req.(*GetSummarizationInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpdateSummarizationInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSummarizationInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpdateSummarizationInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpdateSummarizationInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpdateSummarizationInferenceModel(ctx, req.(*UpdateSummarizationInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpsertSummarizationInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSummarizationInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpsertSummarizationInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpsertSummarizationInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpsertSummarizationInferenceModel(ctx, req.(*UpsertSummarizationInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_DeleteSummarizationInferenceModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSummarizationInferenceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).DeleteSummarizationInferenceModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_DeleteSummarizationInferenceModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).DeleteSummarizationInferenceModel(ctx, req.(*DeleteSummarizationInferenceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_ListSummarizationInferenceModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSummarizationInferenceModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).ListSummarizationInferenceModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_ListSummarizationInferenceModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).ListSummarizationInferenceModels(ctx, req.(*ListSummarizationInferenceModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_CreateSummarizationInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummarizationInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).CreateSummarizationInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_CreateSummarizationInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).CreateSummarizationInferenceSecret(ctx, req.(*CreateSummarizationInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_GetSummarizationInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummarizationInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).GetSummarizationInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_GetSummarizationInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).GetSummarizationInferenceSecret(ctx, req.(*GetSummarizationInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpdateSummarizationInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSummarizationInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpdateSummarizationInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpdateSummarizationInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpdateSummarizationInferenceSecret(ctx, req.(*UpdateSummarizationInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpsertSummarizationInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSummarizationInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpsertSummarizationInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpsertSummarizationInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpsertSummarizationInferenceSecret(ctx, req.(*UpsertSummarizationInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_DeleteSummarizationInferenceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSummarizationInferenceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).DeleteSummarizationInferenceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_DeleteSummarizationInferenceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).DeleteSummarizationInferenceSecret(ctx, req.(*DeleteSummarizationInferenceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_ListSummarizationInferenceSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSummarizationInferenceSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).ListSummarizationInferenceSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_ListSummarizationInferenceSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).ListSummarizationInferenceSecrets(ctx, req.(*ListSummarizationInferenceSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_CreateSummarizationInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummarizationInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).CreateSummarizationInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_CreateSummarizationInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).CreateSummarizationInferencePolicy(ctx, req.(*CreateSummarizationInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_GetSummarizationInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummarizationInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).GetSummarizationInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_GetSummarizationInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).GetSummarizationInferencePolicy(ctx, req.(*GetSummarizationInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpdateSummarizationInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSummarizationInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpdateSummarizationInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpdateSummarizationInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpdateSummarizationInferencePolicy(ctx, req.(*UpdateSummarizationInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_UpsertSummarizationInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSummarizationInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).UpsertSummarizationInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_UpsertSummarizationInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).UpsertSummarizationInferencePolicy(ctx, req.(*UpsertSummarizationInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_DeleteSummarizationInferencePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSummarizationInferencePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).DeleteSummarizationInferencePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_DeleteSummarizationInferencePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).DeleteSummarizationInferencePolicy(ctx, req.(*DeleteSummarizationInferencePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummarizerService_ListSummarizationInferencePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSummarizationInferencePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizerServiceServer).ListSummarizationInferencePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummarizerService_ListSummarizationInferencePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizerServiceServer).ListSummarizationInferencePolicies(ctx, req.(*ListSummarizationInferencePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummarizerService_ServiceDesc is the grpc.ServiceDesc for SummarizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummarizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.summarizer.v1.SummarizerService",
	HandlerType: (*SummarizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSummarizationInferenceModel",
			Handler:    _SummarizerService_CreateSummarizationInferenceModel_Handler,
		},
		{
			MethodName: "GetSummarizationInferenceModel",
			Handler:    _SummarizerService_GetSummarizationInferenceModel_Handler,
		},
		{
			MethodName: "UpdateSummarizationInferenceModel",
			Handler:    _SummarizerService_UpdateSummarizationInferenceModel_Handler,
		},
		{
			MethodName: "UpsertSummarizationInferenceModel",
			Handler:    _SummarizerService_UpsertSummarizationInferenceModel_Handler,
		},
		{
			MethodName: "DeleteSummarizationInferenceModel",
			Handler:    _SummarizerService_DeleteSummarizationInferenceModel_Handler,
		},
		{
			MethodName: "ListSummarizationInferenceModels",
			Handler:    _SummarizerService_ListSummarizationInferenceModels_Handler,
		},
		{
			MethodName: "CreateSummarizationInferenceSecret",
			Handler:    _SummarizerService_CreateSummarizationInferenceSecret_Handler,
		},
		{
			MethodName: "GetSummarizationInferenceSecret",
			Handler:    _SummarizerService_GetSummarizationInferenceSecret_Handler,
		},
		{
			MethodName: "UpdateSummarizationInferenceSecret",
			Handler:    _SummarizerService_UpdateSummarizationInferenceSecret_Handler,
		},
		{
			MethodName: "UpsertSummarizationInferenceSecret",
			Handler:    _SummarizerService_UpsertSummarizationInferenceSecret_Handler,
		},
		{
			MethodName: "DeleteSummarizationInferenceSecret",
			Handler:    _SummarizerService_DeleteSummarizationInferenceSecret_Handler,
		},
		{
			MethodName: "ListSummarizationInferenceSecrets",
			Handler:    _SummarizerService_ListSummarizationInferenceSecrets_Handler,
		},
		{
			MethodName: "CreateSummarizationInferencePolicy",
			Handler:    _SummarizerService_CreateSummarizationInferencePolicy_Handler,
		},
		{
			MethodName: "GetSummarizationInferencePolicy",
			Handler:    _SummarizerService_GetSummarizationInferencePolicy_Handler,
		},
		{
			MethodName: "UpdateSummarizationInferencePolicy",
			Handler:    _SummarizerService_UpdateSummarizationInferencePolicy_Handler,
		},
		{
			MethodName: "UpsertSummarizationInferencePolicy",
			Handler:    _SummarizerService_UpsertSummarizationInferencePolicy_Handler,
		},
		{
			MethodName: "DeleteSummarizationInferencePolicy",
			Handler:    _SummarizerService_DeleteSummarizationInferencePolicy_Handler,
		},
		{
			MethodName: "ListSummarizationInferencePolicies",
			Handler:    _SummarizerService_ListSummarizationInferencePolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/summarizer/v1/summarizer_service.proto",
}
