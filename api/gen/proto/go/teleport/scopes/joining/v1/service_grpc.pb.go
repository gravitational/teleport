// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/scopes/joining/v1/service.proto

package joiningv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScopedJoiningService_GetScopedToken_FullMethodName    = "/teleport.scopes.joining.v1.ScopedJoiningService/GetScopedToken"
	ScopedJoiningService_ListScopedTokens_FullMethodName  = "/teleport.scopes.joining.v1.ScopedJoiningService/ListScopedTokens"
	ScopedJoiningService_CreateScopedToken_FullMethodName = "/teleport.scopes.joining.v1.ScopedJoiningService/CreateScopedToken"
	ScopedJoiningService_UpdateScopedToken_FullMethodName = "/teleport.scopes.joining.v1.ScopedJoiningService/UpdateScopedToken"
	ScopedJoiningService_DeleteScopedToken_FullMethodName = "/teleport.scopes.joining.v1.ScopedJoiningService/DeleteScopedToken"
)

// ScopedJoiningServiceClient is the client API for ScopedJoiningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ScopedJoiningService provides an API for managing scoped cluster joining resources.
type ScopedJoiningServiceClient interface {
	// GetScopedToken gets a scoped token by name.
	GetScopedToken(ctx context.Context, in *GetScopedTokenRequest, opts ...grpc.CallOption) (*GetScopedTokenResponse, error)
	// ListScopedTokens returns a paginated list of scoped tokens.
	ListScopedTokens(ctx context.Context, in *ListScopedTokensRequest, opts ...grpc.CallOption) (*ListScopedTokensResponse, error)
	// CreateScopedToken creates a new scoped token.
	CreateScopedToken(ctx context.Context, in *CreateScopedTokenRequest, opts ...grpc.CallOption) (*CreateScopedTokenResponse, error)
	// UpdateScopedToken updates a scoped token.
	UpdateScopedToken(ctx context.Context, in *UpdateScopedTokenRequest, opts ...grpc.CallOption) (*UpdateScopedTokenResponse, error)
	// DeleteScopedToken deletes a scoped token.
	DeleteScopedToken(ctx context.Context, in *DeleteScopedTokenRequest, opts ...grpc.CallOption) (*DeleteScopedTokenResponse, error)
}

type scopedJoiningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScopedJoiningServiceClient(cc grpc.ClientConnInterface) ScopedJoiningServiceClient {
	return &scopedJoiningServiceClient{cc}
}

func (c *scopedJoiningServiceClient) GetScopedToken(ctx context.Context, in *GetScopedTokenRequest, opts ...grpc.CallOption) (*GetScopedTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScopedTokenResponse)
	err := c.cc.Invoke(ctx, ScopedJoiningService_GetScopedToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedJoiningServiceClient) ListScopedTokens(ctx context.Context, in *ListScopedTokensRequest, opts ...grpc.CallOption) (*ListScopedTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScopedTokensResponse)
	err := c.cc.Invoke(ctx, ScopedJoiningService_ListScopedTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedJoiningServiceClient) CreateScopedToken(ctx context.Context, in *CreateScopedTokenRequest, opts ...grpc.CallOption) (*CreateScopedTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScopedTokenResponse)
	err := c.cc.Invoke(ctx, ScopedJoiningService_CreateScopedToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedJoiningServiceClient) UpdateScopedToken(ctx context.Context, in *UpdateScopedTokenRequest, opts ...grpc.CallOption) (*UpdateScopedTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScopedTokenResponse)
	err := c.cc.Invoke(ctx, ScopedJoiningService_UpdateScopedToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedJoiningServiceClient) DeleteScopedToken(ctx context.Context, in *DeleteScopedTokenRequest, opts ...grpc.CallOption) (*DeleteScopedTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScopedTokenResponse)
	err := c.cc.Invoke(ctx, ScopedJoiningService_DeleteScopedToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopedJoiningServiceServer is the server API for ScopedJoiningService service.
// All implementations must embed UnimplementedScopedJoiningServiceServer
// for forward compatibility.
//
// ScopedJoiningService provides an API for managing scoped cluster joining resources.
type ScopedJoiningServiceServer interface {
	// GetScopedToken gets a scoped token by name.
	GetScopedToken(context.Context, *GetScopedTokenRequest) (*GetScopedTokenResponse, error)
	// ListScopedTokens returns a paginated list of scoped tokens.
	ListScopedTokens(context.Context, *ListScopedTokensRequest) (*ListScopedTokensResponse, error)
	// CreateScopedToken creates a new scoped token.
	CreateScopedToken(context.Context, *CreateScopedTokenRequest) (*CreateScopedTokenResponse, error)
	// UpdateScopedToken updates a scoped token.
	UpdateScopedToken(context.Context, *UpdateScopedTokenRequest) (*UpdateScopedTokenResponse, error)
	// DeleteScopedToken deletes a scoped token.
	DeleteScopedToken(context.Context, *DeleteScopedTokenRequest) (*DeleteScopedTokenResponse, error)
	mustEmbedUnimplementedScopedJoiningServiceServer()
}

// UnimplementedScopedJoiningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScopedJoiningServiceServer struct{}

func (UnimplementedScopedJoiningServiceServer) GetScopedToken(context.Context, *GetScopedTokenRequest) (*GetScopedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopedToken not implemented")
}
func (UnimplementedScopedJoiningServiceServer) ListScopedTokens(context.Context, *ListScopedTokensRequest) (*ListScopedTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopedTokens not implemented")
}
func (UnimplementedScopedJoiningServiceServer) CreateScopedToken(context.Context, *CreateScopedTokenRequest) (*CreateScopedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScopedToken not implemented")
}
func (UnimplementedScopedJoiningServiceServer) UpdateScopedToken(context.Context, *UpdateScopedTokenRequest) (*UpdateScopedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScopedToken not implemented")
}
func (UnimplementedScopedJoiningServiceServer) DeleteScopedToken(context.Context, *DeleteScopedTokenRequest) (*DeleteScopedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopedToken not implemented")
}
func (UnimplementedScopedJoiningServiceServer) mustEmbedUnimplementedScopedJoiningServiceServer() {}
func (UnimplementedScopedJoiningServiceServer) testEmbeddedByValue()                              {}

// UnsafeScopedJoiningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScopedJoiningServiceServer will
// result in compilation errors.
type UnsafeScopedJoiningServiceServer interface {
	mustEmbedUnimplementedScopedJoiningServiceServer()
}

func RegisterScopedJoiningServiceServer(s grpc.ServiceRegistrar, srv ScopedJoiningServiceServer) {
	// If the following call pancis, it indicates UnimplementedScopedJoiningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScopedJoiningService_ServiceDesc, srv)
}

func _ScopedJoiningService_GetScopedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedJoiningServiceServer).GetScopedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedJoiningService_GetScopedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedJoiningServiceServer).GetScopedToken(ctx, req.(*GetScopedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedJoiningService_ListScopedTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopedTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedJoiningServiceServer).ListScopedTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedJoiningService_ListScopedTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedJoiningServiceServer).ListScopedTokens(ctx, req.(*ListScopedTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedJoiningService_CreateScopedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedJoiningServiceServer).CreateScopedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedJoiningService_CreateScopedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedJoiningServiceServer).CreateScopedToken(ctx, req.(*CreateScopedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedJoiningService_UpdateScopedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScopedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedJoiningServiceServer).UpdateScopedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedJoiningService_UpdateScopedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedJoiningServiceServer).UpdateScopedToken(ctx, req.(*UpdateScopedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedJoiningService_DeleteScopedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedJoiningServiceServer).DeleteScopedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedJoiningService_DeleteScopedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedJoiningServiceServer).DeleteScopedToken(ctx, req.(*DeleteScopedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScopedJoiningService_ServiceDesc is the grpc.ServiceDesc for ScopedJoiningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScopedJoiningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.scopes.joining.v1.ScopedJoiningService",
	HandlerType: (*ScopedJoiningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScopedToken",
			Handler:    _ScopedJoiningService_GetScopedToken_Handler,
		},
		{
			MethodName: "ListScopedTokens",
			Handler:    _ScopedJoiningService_ListScopedTokens_Handler,
		},
		{
			MethodName: "CreateScopedToken",
			Handler:    _ScopedJoiningService_CreateScopedToken_Handler,
		},
		{
			MethodName: "UpdateScopedToken",
			Handler:    _ScopedJoiningService_UpdateScopedToken_Handler,
		},
		{
			MethodName: "DeleteScopedToken",
			Handler:    _ScopedJoiningService_DeleteScopedToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/scopes/joining/v1/service.proto",
}
