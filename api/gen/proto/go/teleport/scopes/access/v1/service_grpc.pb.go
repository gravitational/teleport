// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/scopes/access/v1/service.proto

package accessv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScopedAccessService_GetScopedRole_FullMethodName              = "/teleport.scopes.access.v1.ScopedAccessService/GetScopedRole"
	ScopedAccessService_ListScopedRoles_FullMethodName            = "/teleport.scopes.access.v1.ScopedAccessService/ListScopedRoles"
	ScopedAccessService_CreateScopedRole_FullMethodName           = "/teleport.scopes.access.v1.ScopedAccessService/CreateScopedRole"
	ScopedAccessService_UpdateScopedRole_FullMethodName           = "/teleport.scopes.access.v1.ScopedAccessService/UpdateScopedRole"
	ScopedAccessService_DeleteScopedRole_FullMethodName           = "/teleport.scopes.access.v1.ScopedAccessService/DeleteScopedRole"
	ScopedAccessService_GetScopedRoleAssignment_FullMethodName    = "/teleport.scopes.access.v1.ScopedAccessService/GetScopedRoleAssignment"
	ScopedAccessService_ListScopedRoleAssignments_FullMethodName  = "/teleport.scopes.access.v1.ScopedAccessService/ListScopedRoleAssignments"
	ScopedAccessService_CreateScopedRoleAssignment_FullMethodName = "/teleport.scopes.access.v1.ScopedAccessService/CreateScopedRoleAssignment"
	ScopedAccessService_DeleteScopedRoleAssignment_FullMethodName = "/teleport.scopes.access.v1.ScopedAccessService/DeleteScopedRoleAssignment"
)

// ScopedAccessServiceClient is the client API for ScopedAccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ScopedAccessService provides an API for managing scoped access-control resources.
type ScopedAccessServiceClient interface {
	// GetScopedRole gets a scoped role by name.
	GetScopedRole(ctx context.Context, in *GetScopedRoleRequest, opts ...grpc.CallOption) (*GetScopedRoleResponse, error)
	// ListScopedRoles returns a paginated list of scoped roles.
	ListScopedRoles(ctx context.Context, in *ListScopedRolesRequest, opts ...grpc.CallOption) (*ListScopedRolesResponse, error)
	// CreateScopedRole creates a new scoped role.
	CreateScopedRole(ctx context.Context, in *CreateScopedRoleRequest, opts ...grpc.CallOption) (*CreateScopedRoleResponse, error)
	// UpdateScopedRole updates a scoped role.
	UpdateScopedRole(ctx context.Context, in *UpdateScopedRoleRequest, opts ...grpc.CallOption) (*UpdateScopedRoleResponse, error)
	// DeleteScopedRole deletes a scoped role.
	DeleteScopedRole(ctx context.Context, in *DeleteScopedRoleRequest, opts ...grpc.CallOption) (*DeleteScopedRoleResponse, error)
	// GetScopedRoleAssignment gets a scoped role assignment by name.
	GetScopedRoleAssignment(ctx context.Context, in *GetScopedRoleAssignmentRequest, opts ...grpc.CallOption) (*GetScopedRoleAssignmentResponse, error)
	// ListScopedRoleAssignments returns a paginated list of scoped role assignments.
	ListScopedRoleAssignments(ctx context.Context, in *ListScopedRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListScopedRoleAssignmentsResponse, error)
	// CreateScopedRoleAssignment creates a new scoped role assignment.
	CreateScopedRoleAssignment(ctx context.Context, in *CreateScopedRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateScopedRoleAssignmentResponse, error)
	// DeleteScopedRoleAssignment deletes a scoped role assignment.
	DeleteScopedRoleAssignment(ctx context.Context, in *DeleteScopedRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteScopedRoleAssignmentResponse, error)
}

type scopedAccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScopedAccessServiceClient(cc grpc.ClientConnInterface) ScopedAccessServiceClient {
	return &scopedAccessServiceClient{cc}
}

func (c *scopedAccessServiceClient) GetScopedRole(ctx context.Context, in *GetScopedRoleRequest, opts ...grpc.CallOption) (*GetScopedRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScopedRoleResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_GetScopedRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) ListScopedRoles(ctx context.Context, in *ListScopedRolesRequest, opts ...grpc.CallOption) (*ListScopedRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScopedRolesResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_ListScopedRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) CreateScopedRole(ctx context.Context, in *CreateScopedRoleRequest, opts ...grpc.CallOption) (*CreateScopedRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScopedRoleResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_CreateScopedRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) UpdateScopedRole(ctx context.Context, in *UpdateScopedRoleRequest, opts ...grpc.CallOption) (*UpdateScopedRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScopedRoleResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_UpdateScopedRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) DeleteScopedRole(ctx context.Context, in *DeleteScopedRoleRequest, opts ...grpc.CallOption) (*DeleteScopedRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScopedRoleResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_DeleteScopedRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) GetScopedRoleAssignment(ctx context.Context, in *GetScopedRoleAssignmentRequest, opts ...grpc.CallOption) (*GetScopedRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScopedRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_GetScopedRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) ListScopedRoleAssignments(ctx context.Context, in *ListScopedRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListScopedRoleAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScopedRoleAssignmentsResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_ListScopedRoleAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) CreateScopedRoleAssignment(ctx context.Context, in *CreateScopedRoleAssignmentRequest, opts ...grpc.CallOption) (*CreateScopedRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScopedRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_CreateScopedRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopedAccessServiceClient) DeleteScopedRoleAssignment(ctx context.Context, in *DeleteScopedRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteScopedRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScopedRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, ScopedAccessService_DeleteScopedRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopedAccessServiceServer is the server API for ScopedAccessService service.
// All implementations must embed UnimplementedScopedAccessServiceServer
// for forward compatibility.
//
// ScopedAccessService provides an API for managing scoped access-control resources.
type ScopedAccessServiceServer interface {
	// GetScopedRole gets a scoped role by name.
	GetScopedRole(context.Context, *GetScopedRoleRequest) (*GetScopedRoleResponse, error)
	// ListScopedRoles returns a paginated list of scoped roles.
	ListScopedRoles(context.Context, *ListScopedRolesRequest) (*ListScopedRolesResponse, error)
	// CreateScopedRole creates a new scoped role.
	CreateScopedRole(context.Context, *CreateScopedRoleRequest) (*CreateScopedRoleResponse, error)
	// UpdateScopedRole updates a scoped role.
	UpdateScopedRole(context.Context, *UpdateScopedRoleRequest) (*UpdateScopedRoleResponse, error)
	// DeleteScopedRole deletes a scoped role.
	DeleteScopedRole(context.Context, *DeleteScopedRoleRequest) (*DeleteScopedRoleResponse, error)
	// GetScopedRoleAssignment gets a scoped role assignment by name.
	GetScopedRoleAssignment(context.Context, *GetScopedRoleAssignmentRequest) (*GetScopedRoleAssignmentResponse, error)
	// ListScopedRoleAssignments returns a paginated list of scoped role assignments.
	ListScopedRoleAssignments(context.Context, *ListScopedRoleAssignmentsRequest) (*ListScopedRoleAssignmentsResponse, error)
	// CreateScopedRoleAssignment creates a new scoped role assignment.
	CreateScopedRoleAssignment(context.Context, *CreateScopedRoleAssignmentRequest) (*CreateScopedRoleAssignmentResponse, error)
	// DeleteScopedRoleAssignment deletes a scoped role assignment.
	DeleteScopedRoleAssignment(context.Context, *DeleteScopedRoleAssignmentRequest) (*DeleteScopedRoleAssignmentResponse, error)
	mustEmbedUnimplementedScopedAccessServiceServer()
}

// UnimplementedScopedAccessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScopedAccessServiceServer struct{}

func (UnimplementedScopedAccessServiceServer) GetScopedRole(context.Context, *GetScopedRoleRequest) (*GetScopedRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopedRole not implemented")
}
func (UnimplementedScopedAccessServiceServer) ListScopedRoles(context.Context, *ListScopedRolesRequest) (*ListScopedRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopedRoles not implemented")
}
func (UnimplementedScopedAccessServiceServer) CreateScopedRole(context.Context, *CreateScopedRoleRequest) (*CreateScopedRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScopedRole not implemented")
}
func (UnimplementedScopedAccessServiceServer) UpdateScopedRole(context.Context, *UpdateScopedRoleRequest) (*UpdateScopedRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScopedRole not implemented")
}
func (UnimplementedScopedAccessServiceServer) DeleteScopedRole(context.Context, *DeleteScopedRoleRequest) (*DeleteScopedRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopedRole not implemented")
}
func (UnimplementedScopedAccessServiceServer) GetScopedRoleAssignment(context.Context, *GetScopedRoleAssignmentRequest) (*GetScopedRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopedRoleAssignment not implemented")
}
func (UnimplementedScopedAccessServiceServer) ListScopedRoleAssignments(context.Context, *ListScopedRoleAssignmentsRequest) (*ListScopedRoleAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopedRoleAssignments not implemented")
}
func (UnimplementedScopedAccessServiceServer) CreateScopedRoleAssignment(context.Context, *CreateScopedRoleAssignmentRequest) (*CreateScopedRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScopedRoleAssignment not implemented")
}
func (UnimplementedScopedAccessServiceServer) DeleteScopedRoleAssignment(context.Context, *DeleteScopedRoleAssignmentRequest) (*DeleteScopedRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopedRoleAssignment not implemented")
}
func (UnimplementedScopedAccessServiceServer) mustEmbedUnimplementedScopedAccessServiceServer() {}
func (UnimplementedScopedAccessServiceServer) testEmbeddedByValue()                             {}

// UnsafeScopedAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScopedAccessServiceServer will
// result in compilation errors.
type UnsafeScopedAccessServiceServer interface {
	mustEmbedUnimplementedScopedAccessServiceServer()
}

func RegisterScopedAccessServiceServer(s grpc.ServiceRegistrar, srv ScopedAccessServiceServer) {
	// If the following call pancis, it indicates UnimplementedScopedAccessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScopedAccessService_ServiceDesc, srv)
}

func _ScopedAccessService_GetScopedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopedRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).GetScopedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_GetScopedRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).GetScopedRole(ctx, req.(*GetScopedRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_ListScopedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopedRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).ListScopedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_ListScopedRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).ListScopedRoles(ctx, req.(*ListScopedRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_CreateScopedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopedRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).CreateScopedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_CreateScopedRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).CreateScopedRole(ctx, req.(*CreateScopedRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_UpdateScopedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScopedRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).UpdateScopedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_UpdateScopedRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).UpdateScopedRole(ctx, req.(*UpdateScopedRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_DeleteScopedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopedRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).DeleteScopedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_DeleteScopedRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).DeleteScopedRole(ctx, req.(*DeleteScopedRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_GetScopedRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopedRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).GetScopedRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_GetScopedRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).GetScopedRoleAssignment(ctx, req.(*GetScopedRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_ListScopedRoleAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopedRoleAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).ListScopedRoleAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_ListScopedRoleAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).ListScopedRoleAssignments(ctx, req.(*ListScopedRoleAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_CreateScopedRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopedRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).CreateScopedRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_CreateScopedRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).CreateScopedRoleAssignment(ctx, req.(*CreateScopedRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopedAccessService_DeleteScopedRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopedRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedAccessServiceServer).DeleteScopedRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopedAccessService_DeleteScopedRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedAccessServiceServer).DeleteScopedRoleAssignment(ctx, req.(*DeleteScopedRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScopedAccessService_ServiceDesc is the grpc.ServiceDesc for ScopedAccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScopedAccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.scopes.access.v1.ScopedAccessService",
	HandlerType: (*ScopedAccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScopedRole",
			Handler:    _ScopedAccessService_GetScopedRole_Handler,
		},
		{
			MethodName: "ListScopedRoles",
			Handler:    _ScopedAccessService_ListScopedRoles_Handler,
		},
		{
			MethodName: "CreateScopedRole",
			Handler:    _ScopedAccessService_CreateScopedRole_Handler,
		},
		{
			MethodName: "UpdateScopedRole",
			Handler:    _ScopedAccessService_UpdateScopedRole_Handler,
		},
		{
			MethodName: "DeleteScopedRole",
			Handler:    _ScopedAccessService_DeleteScopedRole_Handler,
		},
		{
			MethodName: "GetScopedRoleAssignment",
			Handler:    _ScopedAccessService_GetScopedRoleAssignment_Handler,
		},
		{
			MethodName: "ListScopedRoleAssignments",
			Handler:    _ScopedAccessService_ListScopedRoleAssignments_Handler,
		},
		{
			MethodName: "CreateScopedRoleAssignment",
			Handler:    _ScopedAccessService_CreateScopedRoleAssignment_Handler,
		},
		{
			MethodName: "DeleteScopedRoleAssignment",
			Handler:    _ScopedAccessService_DeleteScopedRoleAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/scopes/access/v1/service.proto",
}
