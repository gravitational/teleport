// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/scopes/access/v1/assignment.proto

package accessv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ScopedRoleAssignment is a role assignment whose resource and permissions are scoped. A scoped role assignment
// assigns roles to users at scopes. One assignment may contain multiple roles at multiple scopes. Most assignments
// are stored at random IDs, but some assignments created by teleport may have special static names that are
// reserved for teleport's internal use (e.g. for managing the set of subassignments generated by a connector).
type ScopedRoleAssignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Kind is the resource kind.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// SubKind is the resource sub-kind.
	SubKind string `protobuf:"bytes,2,opt,name=sub_kind,json=subKind,proto3" json:"sub_kind,omitempty"`
	// Version is the resource version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Metadata contains the resource metadata.
	Metadata *v1.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Scope is the scope of the role assignment resource.
	Scope string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	// Spec is the role assignment specification.
	Spec          *ScopedRoleAssignmentSpec `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScopedRoleAssignment) Reset() {
	*x = ScopedRoleAssignment{}
	mi := &file_teleport_scopes_access_v1_assignment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScopedRoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopedRoleAssignment) ProtoMessage() {}

func (x *ScopedRoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_scopes_access_v1_assignment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopedRoleAssignment.ProtoReflect.Descriptor instead.
func (*ScopedRoleAssignment) Descriptor() ([]byte, []int) {
	return file_teleport_scopes_access_v1_assignment_proto_rawDescGZIP(), []int{0}
}

func (x *ScopedRoleAssignment) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ScopedRoleAssignment) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ScopedRoleAssignment) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ScopedRoleAssignment) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ScopedRoleAssignment) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ScopedRoleAssignment) GetSpec() *ScopedRoleAssignmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ScopedRoleAssignmentSpec is the specification of a scoped role.
type ScopedRoleAssignmentSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User is the user to whom all contained assignments apply.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Assignments is a list of individual role @ scope assignments.
	Assignments   []*Assignment `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScopedRoleAssignmentSpec) Reset() {
	*x = ScopedRoleAssignmentSpec{}
	mi := &file_teleport_scopes_access_v1_assignment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScopedRoleAssignmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopedRoleAssignmentSpec) ProtoMessage() {}

func (x *ScopedRoleAssignmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_scopes_access_v1_assignment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopedRoleAssignmentSpec.ProtoReflect.Descriptor instead.
func (*ScopedRoleAssignmentSpec) Descriptor() ([]byte, []int) {
	return file_teleport_scopes_access_v1_assignment_proto_rawDescGZIP(), []int{1}
}

func (x *ScopedRoleAssignmentSpec) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ScopedRoleAssignmentSpec) GetAssignments() []*Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

// Assignment is a role/scope pair that defines an individual assignment.
type Assignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Roles is the name of the role that is assigned by this assignment.
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// Scope is the scope to which the role is assigned. This must be a member/child
	// of the scope of the [ScopedRoleAssignment] in which this assignment is contained.
	Scope         string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	mi := &file_teleport_scopes_access_v1_assignment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_scopes_access_v1_assignment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_teleport_scopes_access_v1_assignment_proto_rawDescGZIP(), []int{2}
}

func (x *Assignment) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Assignment) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

var File_teleport_scopes_access_v1_assignment_proto protoreflect.FileDescriptor

const file_teleport_scopes_access_v1_assignment_proto_rawDesc = "" +
	"\n" +
	"*teleport/scopes/access/v1/assignment.proto\x12\x19teleport.scopes.access.v1\x1a!teleport/header/v1/metadata.proto\"\xf8\x01\n" +
	"\x14ScopedRoleAssignment\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x19\n" +
	"\bsub_kind\x18\x02 \x01(\tR\asubKind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x128\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1c.teleport.header.v1.MetadataR\bmetadata\x12\x14\n" +
	"\x05scope\x18\x05 \x01(\tR\x05scope\x12G\n" +
	"\x04spec\x18\x06 \x01(\v23.teleport.scopes.access.v1.ScopedRoleAssignmentSpecR\x04spec\"w\n" +
	"\x18ScopedRoleAssignmentSpec\x12\x12\n" +
	"\x04user\x18\x01 \x01(\tR\x04user\x12G\n" +
	"\vassignments\x18\x02 \x03(\v2%.teleport.scopes.access.v1.AssignmentR\vassignments\"6\n" +
	"\n" +
	"Assignment\x12\x12\n" +
	"\x04role\x18\x01 \x01(\tR\x04role\x12\x14\n" +
	"\x05scope\x18\x02 \x01(\tR\x05scopeBWZUgithub.com/gravitational/teleport/api/gen/proto/go/teleport/scopes/access/v1;accessv1b\x06proto3"

var (
	file_teleport_scopes_access_v1_assignment_proto_rawDescOnce sync.Once
	file_teleport_scopes_access_v1_assignment_proto_rawDescData []byte
)

func file_teleport_scopes_access_v1_assignment_proto_rawDescGZIP() []byte {
	file_teleport_scopes_access_v1_assignment_proto_rawDescOnce.Do(func() {
		file_teleport_scopes_access_v1_assignment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_scopes_access_v1_assignment_proto_rawDesc), len(file_teleport_scopes_access_v1_assignment_proto_rawDesc)))
	})
	return file_teleport_scopes_access_v1_assignment_proto_rawDescData
}

var file_teleport_scopes_access_v1_assignment_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_teleport_scopes_access_v1_assignment_proto_goTypes = []any{
	(*ScopedRoleAssignment)(nil),     // 0: teleport.scopes.access.v1.ScopedRoleAssignment
	(*ScopedRoleAssignmentSpec)(nil), // 1: teleport.scopes.access.v1.ScopedRoleAssignmentSpec
	(*Assignment)(nil),               // 2: teleport.scopes.access.v1.Assignment
	(*v1.Metadata)(nil),              // 3: teleport.header.v1.Metadata
}
var file_teleport_scopes_access_v1_assignment_proto_depIdxs = []int32{
	3, // 0: teleport.scopes.access.v1.ScopedRoleAssignment.metadata:type_name -> teleport.header.v1.Metadata
	1, // 1: teleport.scopes.access.v1.ScopedRoleAssignment.spec:type_name -> teleport.scopes.access.v1.ScopedRoleAssignmentSpec
	2, // 2: teleport.scopes.access.v1.ScopedRoleAssignmentSpec.assignments:type_name -> teleport.scopes.access.v1.Assignment
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_teleport_scopes_access_v1_assignment_proto_init() }
func file_teleport_scopes_access_v1_assignment_proto_init() {
	if File_teleport_scopes_access_v1_assignment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_scopes_access_v1_assignment_proto_rawDesc), len(file_teleport_scopes_access_v1_assignment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_scopes_access_v1_assignment_proto_goTypes,
		DependencyIndexes: file_teleport_scopes_access_v1_assignment_proto_depIdxs,
		MessageInfos:      file_teleport_scopes_access_v1_assignment_proto_msgTypes,
	}.Build()
	File_teleport_scopes_access_v1_assignment_proto = out.File
	file_teleport_scopes_access_v1_assignment_proto_goTypes = nil
	file_teleport_scopes_access_v1_assignment_proto_depIdxs = nil
}
