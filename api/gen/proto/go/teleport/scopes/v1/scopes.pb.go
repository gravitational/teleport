// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/scopes/v1/scopes.proto

package scopesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode determines the mode of scoping when a query specifies a scope. When a query specifies a scope,
// one of two questions is typically trying to be answered.  Either, what resources are "in" and/or "subject to"
// a given scope, or what policies are "applicable to" a given scope.
type Mode int32

const (
	// MODE_UNSPECIFIED indicates that no scope-based filtering has been specified.
	Mode_MODE_UNSPECIFIED Mode = 0
	// MODE_RESOURCES_SUBJECT_TO_SCOPE matches scopes by the resource subjugation rules. In the
	// terminology of scope comparison, this means Equivalent and Descendant scopes. This is the mode that most
	// user-facing scoped queries should use, as it intuitively answers the question of "what is the contents of
	// scope X?". See the 'lib/scopes' package for more detailed discussion of scope comparison/heirarchy.
	Mode_MODE_RESOURCES_SUBJECT_TO_SCOPE Mode = 1
	// MODE_POLICIES_APPLICABLE_TO_SCOPE matches scopes by the policy application rules. In the
	// terminology of scope comparison, this means Ancestor and Equivalent scopes. This is the mode that most caching
	// and access-control related queries should use as it answers the question "what policies might affect access to
	// this resource at scope X?". See the 'lib/scopes' package for more detailed discussion of scope comparison/heirarchy.
	Mode_MODE_POLICIES_APPLICABLE_TO_SCOPE Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_RESOURCES_SUBJECT_TO_SCOPE",
		2: "MODE_POLICIES_APPLICABLE_TO_SCOPE",
	}
	Mode_value = map[string]int32{
		"MODE_UNSPECIFIED":                  0,
		"MODE_RESOURCES_SUBJECT_TO_SCOPE":   1,
		"MODE_POLICIES_APPLICABLE_TO_SCOPE": 2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_scopes_v1_scopes_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_teleport_scopes_v1_scopes_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_teleport_scopes_v1_scopes_proto_rawDescGZIP(), []int{0}
}

// Pin is a marker that identifies a certificate/identity as being "pinned" to a target scope, and encodes relevant
// information for access-control evaluation at that scope.
type Pin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// scope is the target scope that this pin is associated with. This is the scope that the certificate/identity is
	// pinned to. Any resources in parent/orthogonal scopes are not necessarily subject to the privileges/policies
	// conveyed by this pin.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// assignments encodes the scoped role assignments relevant to access-control decisions about the pinned identity. This may
	// include assignments to parents of the pinned scope as well as assignments to equivalent/child scopes. Effectively, this
	// means all assignments that are not orthogonal to the pinned scope.
	Assignments   map[string]*PinnedAssignments `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pin) Reset() {
	*x = Pin{}
	mi := &file_teleport_scopes_v1_scopes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pin) ProtoMessage() {}

func (x *Pin) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_scopes_v1_scopes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pin.ProtoReflect.Descriptor instead.
func (*Pin) Descriptor() ([]byte, []int) {
	return file_teleport_scopes_v1_scopes_proto_rawDescGZIP(), []int{0}
}

func (x *Pin) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Pin) GetAssignments() map[string]*PinnedAssignments {
	if x != nil {
		return x.Assignments
	}
	return nil
}

// PinnedAssignments is a collection of scoped role assignments that are relevant to the pinned identity at the target scope.
type PinnedAssignments struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// roles is a list of scoped roles that are assigned to the pinned identity at the target scope.
	Roles         []string `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinnedAssignments) Reset() {
	*x = PinnedAssignments{}
	mi := &file_teleport_scopes_v1_scopes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinnedAssignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedAssignments) ProtoMessage() {}

func (x *PinnedAssignments) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_scopes_v1_scopes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedAssignments.ProtoReflect.Descriptor instead.
func (*PinnedAssignments) Descriptor() ([]byte, []int) {
	return file_teleport_scopes_v1_scopes_proto_rawDescGZIP(), []int{1}
}

func (x *PinnedAssignments) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Filter is a query parameter that matches other scopes based on a specified scope and mode. Used for
// filtering resources that are subject to or policies that apply to a given scope.
type Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Scope is the scope value to match against.
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// Mode determines the mode of matching.
	Mode          Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=teleport.scopes.v1.Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_teleport_scopes_v1_scopes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_scopes_v1_scopes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_teleport_scopes_v1_scopes_proto_rawDescGZIP(), []int{2}
}

func (x *Filter) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Filter) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MODE_UNSPECIFIED
}

var File_teleport_scopes_v1_scopes_proto protoreflect.FileDescriptor

const file_teleport_scopes_v1_scopes_proto_rawDesc = "" +
	"\n" +
	"\x1fteleport/scopes/v1/scopes.proto\x12\x12teleport.scopes.v1\"\xce\x01\n" +
	"\x03Pin\x12\x14\n" +
	"\x05scope\x18\x01 \x01(\tR\x05scope\x12J\n" +
	"\vassignments\x18\x02 \x03(\v2(.teleport.scopes.v1.Pin.AssignmentsEntryR\vassignments\x1ae\n" +
	"\x10AssignmentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12;\n" +
	"\x05value\x18\x02 \x01(\v2%.teleport.scopes.v1.PinnedAssignmentsR\x05value:\x028\x01\")\n" +
	"\x11PinnedAssignments\x12\x14\n" +
	"\x05roles\x18\x01 \x03(\tR\x05roles\"L\n" +
	"\x06Filter\x12\x14\n" +
	"\x05scope\x18\x01 \x01(\tR\x05scope\x12,\n" +
	"\x04mode\x18\x02 \x01(\x0e2\x18.teleport.scopes.v1.ModeR\x04mode*h\n" +
	"\x04Mode\x12\x14\n" +
	"\x10MODE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fMODE_RESOURCES_SUBJECT_TO_SCOPE\x10\x01\x12%\n" +
	"!MODE_POLICIES_APPLICABLE_TO_SCOPE\x10\x02BPZNgithub.com/gravitational/teleport/api/gen/proto/go/teleport/scopes/v1;scopesv1b\x06proto3"

var (
	file_teleport_scopes_v1_scopes_proto_rawDescOnce sync.Once
	file_teleport_scopes_v1_scopes_proto_rawDescData []byte
)

func file_teleport_scopes_v1_scopes_proto_rawDescGZIP() []byte {
	file_teleport_scopes_v1_scopes_proto_rawDescOnce.Do(func() {
		file_teleport_scopes_v1_scopes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_scopes_v1_scopes_proto_rawDesc), len(file_teleport_scopes_v1_scopes_proto_rawDesc)))
	})
	return file_teleport_scopes_v1_scopes_proto_rawDescData
}

var file_teleport_scopes_v1_scopes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_scopes_v1_scopes_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_teleport_scopes_v1_scopes_proto_goTypes = []any{
	(Mode)(0),                 // 0: teleport.scopes.v1.Mode
	(*Pin)(nil),               // 1: teleport.scopes.v1.Pin
	(*PinnedAssignments)(nil), // 2: teleport.scopes.v1.PinnedAssignments
	(*Filter)(nil),            // 3: teleport.scopes.v1.Filter
	nil,                       // 4: teleport.scopes.v1.Pin.AssignmentsEntry
}
var file_teleport_scopes_v1_scopes_proto_depIdxs = []int32{
	4, // 0: teleport.scopes.v1.Pin.assignments:type_name -> teleport.scopes.v1.Pin.AssignmentsEntry
	0, // 1: teleport.scopes.v1.Filter.mode:type_name -> teleport.scopes.v1.Mode
	2, // 2: teleport.scopes.v1.Pin.AssignmentsEntry.value:type_name -> teleport.scopes.v1.PinnedAssignments
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_teleport_scopes_v1_scopes_proto_init() }
func file_teleport_scopes_v1_scopes_proto_init() {
	if File_teleport_scopes_v1_scopes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_scopes_v1_scopes_proto_rawDesc), len(file_teleport_scopes_v1_scopes_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_scopes_v1_scopes_proto_goTypes,
		DependencyIndexes: file_teleport_scopes_v1_scopes_proto_depIdxs,
		EnumInfos:         file_teleport_scopes_v1_scopes_proto_enumTypes,
		MessageInfos:      file_teleport_scopes_v1_scopes_proto_msgTypes,
	}.Build()
	File_teleport_scopes_v1_scopes_proto = out.File
	file_teleport_scopes_v1_scopes_proto_goTypes = nil
	file_teleport_scopes_v1_scopes_proto_depIdxs = nil
}
