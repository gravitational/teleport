// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/transport/v1/transport_service.proto

package transportv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransportService_GetClusterDetails_FullMethodName = "/teleport.transport.v1.TransportService/GetClusterDetails"
	TransportService_ProxySSH_FullMethodName          = "/teleport.transport.v1.TransportService/ProxySSH"
	TransportService_ProxyCluster_FullMethodName      = "/teleport.transport.v1.TransportService/ProxyCluster"
)

// TransportServiceClient is the client API for TransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TransportService provides methods to proxy connections to various Teleport instances.
//
// All connections are operate on top of a bidirectional stream which transports
// raw payloads from higher level protocols (i.e. SSH). Clients must send an initial
// message on the stream to set up the connections accordingly. After the initial
// request either side may freely send data in any order until the stream is terminated.
type TransportServiceClient interface {
	// GetClusterDetails provides cluster information that may affect how transport
	// should occur.
	GetClusterDetails(ctx context.Context, in *GetClusterDetailsRequest, opts ...grpc.CallOption) (*GetClusterDetailsResponse, error)
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
	//
	// The client must first send a DialTarget before the connection is established. Agent frames
	// will be populated if SSH Agent forwarding is enabled for the connection. SSH frames contain
	// raw SSH payload to be processed by an x/crypto/ssh.Client or x/crypto/ssh.Server.
	ProxySSH(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxySSHRequest, ProxySSHResponse], error)
	// ProxyCluster establishes a connection to the target cluster.
	//
	// The client must first send a ProxyClusterRequest with the desired cluster name before the
	// connection is established. After which the connection can be used to construct a new
	// auth.Client to the tunneled cluster.
	ProxyCluster(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxyClusterRequest, ProxyClusterResponse], error)
}

type transportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportServiceClient(cc grpc.ClientConnInterface) TransportServiceClient {
	return &transportServiceClient{cc}
}

func (c *transportServiceClient) GetClusterDetails(ctx context.Context, in *GetClusterDetailsRequest, opts ...grpc.CallOption) (*GetClusterDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterDetailsResponse)
	err := c.cc.Invoke(ctx, TransportService_GetClusterDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) ProxySSH(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxySSHRequest, ProxySSHResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransportService_ServiceDesc.Streams[0], TransportService_ProxySSH_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxySSHRequest, ProxySSHResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportService_ProxySSHClient = grpc.BidiStreamingClient[ProxySSHRequest, ProxySSHResponse]

func (c *transportServiceClient) ProxyCluster(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxyClusterRequest, ProxyClusterResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransportService_ServiceDesc.Streams[1], TransportService_ProxyCluster_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxyClusterRequest, ProxyClusterResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportService_ProxyClusterClient = grpc.BidiStreamingClient[ProxyClusterRequest, ProxyClusterResponse]

// TransportServiceServer is the server API for TransportService service.
// All implementations must embed UnimplementedTransportServiceServer
// for forward compatibility.
//
// TransportService provides methods to proxy connections to various Teleport instances.
//
// All connections are operate on top of a bidirectional stream which transports
// raw payloads from higher level protocols (i.e. SSH). Clients must send an initial
// message on the stream to set up the connections accordingly. After the initial
// request either side may freely send data in any order until the stream is terminated.
type TransportServiceServer interface {
	// GetClusterDetails provides cluster information that may affect how transport
	// should occur.
	GetClusterDetails(context.Context, *GetClusterDetailsRequest) (*GetClusterDetailsResponse, error)
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
	//
	// The client must first send a DialTarget before the connection is established. Agent frames
	// will be populated if SSH Agent forwarding is enabled for the connection. SSH frames contain
	// raw SSH payload to be processed by an x/crypto/ssh.Client or x/crypto/ssh.Server.
	ProxySSH(grpc.BidiStreamingServer[ProxySSHRequest, ProxySSHResponse]) error
	// ProxyCluster establishes a connection to the target cluster.
	//
	// The client must first send a ProxyClusterRequest with the desired cluster name before the
	// connection is established. After which the connection can be used to construct a new
	// auth.Client to the tunneled cluster.
	ProxyCluster(grpc.BidiStreamingServer[ProxyClusterRequest, ProxyClusterResponse]) error
	mustEmbedUnimplementedTransportServiceServer()
}

// UnimplementedTransportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransportServiceServer struct{}

func (UnimplementedTransportServiceServer) GetClusterDetails(context.Context, *GetClusterDetailsRequest) (*GetClusterDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterDetails not implemented")
}
func (UnimplementedTransportServiceServer) ProxySSH(grpc.BidiStreamingServer[ProxySSHRequest, ProxySSHResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProxySSH not implemented")
}
func (UnimplementedTransportServiceServer) ProxyCluster(grpc.BidiStreamingServer[ProxyClusterRequest, ProxyClusterResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProxyCluster not implemented")
}
func (UnimplementedTransportServiceServer) mustEmbedUnimplementedTransportServiceServer() {}
func (UnimplementedTransportServiceServer) testEmbeddedByValue()                          {}

// UnsafeTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServiceServer will
// result in compilation errors.
type UnsafeTransportServiceServer interface {
	mustEmbedUnimplementedTransportServiceServer()
}

func RegisterTransportServiceServer(s grpc.ServiceRegistrar, srv TransportServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransportService_ServiceDesc, srv)
}

func _TransportService_GetClusterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).GetClusterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportService_GetClusterDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).GetClusterDetails(ctx, req.(*GetClusterDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_ProxySSH_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServiceServer).ProxySSH(&grpc.GenericServerStream[ProxySSHRequest, ProxySSHResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportService_ProxySSHServer = grpc.BidiStreamingServer[ProxySSHRequest, ProxySSHResponse]

func _TransportService_ProxyCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServiceServer).ProxyCluster(&grpc.GenericServerStream[ProxyClusterRequest, ProxyClusterResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportService_ProxyClusterServer = grpc.BidiStreamingServer[ProxyClusterRequest, ProxyClusterResponse]

// TransportService_ServiceDesc is the grpc.ServiceDesc for TransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.transport.v1.TransportService",
	HandlerType: (*TransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterDetails",
			Handler:    _TransportService_GetClusterDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxySSH",
			Handler:       _TransportService_ProxySSH_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProxyCluster",
			Handler:       _TransportService_ProxyCluster_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/transport/v1/transport_service.proto",
}
