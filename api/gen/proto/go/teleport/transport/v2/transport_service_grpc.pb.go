// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/transport/v2/transport_service.proto

package transportv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransportService_ProxySSH_FullMethodName = "/teleport.transport.v2.TransportService/ProxySSH"
)

// TransportServiceClient is the client API for TransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TransportService provides methods to proxy connections to various Teleport instances.
//
// All connections operate on top of a bidirectional stream which transports raw payloads from higher level protocols
// (i.e. SSH). This service supports in-band multi-factor authentication (MFA) enforcement. MFA challenges and
// responses are handled directly within the stream as part of the session establishment process. All RPCs support both
// MFA-required and MFA-optional flows, and the client determines if MFA is needed by inspecting the first response from
// the server. After any required MFA and the client's initial request, either side may freely send data in any order
// until the stream is terminated.
type TransportServiceClient interface {
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream. Upon stream establishment,
	// the server will send an MFAAuthenticateChallenge as the first message if MFA is required. If MFA is not required,
	// the server will not send a challenge and the client can send the dial_target directly. All SSH and agent frames are
	// sent as raw bytes and are not interpreted by the proxy.
	ProxySSH(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxySSHRequest, ProxySSHResponse], error)
}

type transportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportServiceClient(cc grpc.ClientConnInterface) TransportServiceClient {
	return &transportServiceClient{cc}
}

func (c *transportServiceClient) ProxySSH(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxySSHRequest, ProxySSHResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransportService_ServiceDesc.Streams[0], TransportService_ProxySSH_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxySSHRequest, ProxySSHResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportService_ProxySSHClient = grpc.BidiStreamingClient[ProxySSHRequest, ProxySSHResponse]

// TransportServiceServer is the server API for TransportService service.
// All implementations must embed UnimplementedTransportServiceServer
// for forward compatibility.
//
// TransportService provides methods to proxy connections to various Teleport instances.
//
// All connections operate on top of a bidirectional stream which transports raw payloads from higher level protocols
// (i.e. SSH). This service supports in-band multi-factor authentication (MFA) enforcement. MFA challenges and
// responses are handled directly within the stream as part of the session establishment process. All RPCs support both
// MFA-required and MFA-optional flows, and the client determines if MFA is needed by inspecting the first response from
// the server. After any required MFA and the client's initial request, either side may freely send data in any order
// until the stream is terminated.
type TransportServiceServer interface {
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream. Upon stream establishment,
	// the server will send an MFAAuthenticateChallenge as the first message if MFA is required. If MFA is not required,
	// the server will not send a challenge and the client can send the dial_target directly. All SSH and agent frames are
	// sent as raw bytes and are not interpreted by the proxy.
	ProxySSH(grpc.BidiStreamingServer[ProxySSHRequest, ProxySSHResponse]) error
	mustEmbedUnimplementedTransportServiceServer()
}

// UnimplementedTransportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransportServiceServer struct{}

func (UnimplementedTransportServiceServer) ProxySSH(grpc.BidiStreamingServer[ProxySSHRequest, ProxySSHResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProxySSH not implemented")
}
func (UnimplementedTransportServiceServer) mustEmbedUnimplementedTransportServiceServer() {}
func (UnimplementedTransportServiceServer) testEmbeddedByValue()                          {}

// UnsafeTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServiceServer will
// result in compilation errors.
type UnsafeTransportServiceServer interface {
	mustEmbedUnimplementedTransportServiceServer()
}

func RegisterTransportServiceServer(s grpc.ServiceRegistrar, srv TransportServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransportService_ServiceDesc, srv)
}

func _TransportService_ProxySSH_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServiceServer).ProxySSH(&grpc.GenericServerStream[ProxySSHRequest, ProxySSHResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportService_ProxySSHServer = grpc.BidiStreamingServer[ProxySSHRequest, ProxySSHResponse]

// TransportService_ServiceDesc is the grpc.ServiceDesc for TransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.transport.v2.TransportService",
	HandlerType: (*TransportServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxySSH",
			Handler:       _TransportService_ProxySSH_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/transport/v2/transport_service.proto",
}
