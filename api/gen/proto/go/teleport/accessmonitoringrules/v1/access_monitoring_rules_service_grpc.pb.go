// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/accessmonitoringrules/v1/access_monitoring_rules_service.proto

package accessmonitoringrulesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessMonitoringRulesService_CreateAccessMonitoringRule_FullMethodName          = "/teleport.accessmonitoringrules.v1.AccessMonitoringRulesService/CreateAccessMonitoringRule"
	AccessMonitoringRulesService_UpdateAccessMonitoringRule_FullMethodName          = "/teleport.accessmonitoringrules.v1.AccessMonitoringRulesService/UpdateAccessMonitoringRule"
	AccessMonitoringRulesService_UpsertAccessMonitoringRule_FullMethodName          = "/teleport.accessmonitoringrules.v1.AccessMonitoringRulesService/UpsertAccessMonitoringRule"
	AccessMonitoringRulesService_GetAccessMonitoringRule_FullMethodName             = "/teleport.accessmonitoringrules.v1.AccessMonitoringRulesService/GetAccessMonitoringRule"
	AccessMonitoringRulesService_DeleteAccessMonitoringRule_FullMethodName          = "/teleport.accessmonitoringrules.v1.AccessMonitoringRulesService/DeleteAccessMonitoringRule"
	AccessMonitoringRulesService_ListAccessMonitoringRules_FullMethodName           = "/teleport.accessmonitoringrules.v1.AccessMonitoringRulesService/ListAccessMonitoringRules"
	AccessMonitoringRulesService_ListAccessMonitoringRulesWithFilter_FullMethodName = "/teleport.accessmonitoringrules.v1.AccessMonitoringRulesService/ListAccessMonitoringRulesWithFilter"
)

// AccessMonitoringRulesServiceClient is the client API for AccessMonitoringRulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessMonitoringRulesServiceClient interface {
	// CreateAccessMonitoringRule creates the specified access monitoring rule.
	CreateAccessMonitoringRule(ctx context.Context, in *CreateAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error)
	// UpdateAccessMonitoringRule updates the specified access monitoring rule.
	UpdateAccessMonitoringRule(ctx context.Context, in *UpdateAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error)
	// UpsertAccessMonitoringRule upserts the specified access monitoring rule.
	UpsertAccessMonitoringRule(ctx context.Context, in *UpsertAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error)
	// GetAccessMonitoringRule gets the specified access monitoring rule.
	GetAccessMonitoringRule(ctx context.Context, in *GetAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error)
	// DeleteAccessMonitoringRule deletes the specified access monitoring rule.
	DeleteAccessMonitoringRule(ctx context.Context, in *DeleteAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListAccessMonitoringRules lists current access monitoring rules.
	ListAccessMonitoringRules(ctx context.Context, in *ListAccessMonitoringRulesRequest, opts ...grpc.CallOption) (*ListAccessMonitoringRulesResponse, error)
	// ListAccessMonitoringRulesWithFilter lists current access monitoring rules that match the provided filter.
	ListAccessMonitoringRulesWithFilter(ctx context.Context, in *ListAccessMonitoringRulesWithFilterRequest, opts ...grpc.CallOption) (*ListAccessMonitoringRulesWithFilterResponse, error)
}

type accessMonitoringRulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessMonitoringRulesServiceClient(cc grpc.ClientConnInterface) AccessMonitoringRulesServiceClient {
	return &accessMonitoringRulesServiceClient{cc}
}

func (c *accessMonitoringRulesServiceClient) CreateAccessMonitoringRule(ctx context.Context, in *CreateAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error) {
	out := new(AccessMonitoringRule)
	err := c.cc.Invoke(ctx, AccessMonitoringRulesService_CreateAccessMonitoringRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessMonitoringRulesServiceClient) UpdateAccessMonitoringRule(ctx context.Context, in *UpdateAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error) {
	out := new(AccessMonitoringRule)
	err := c.cc.Invoke(ctx, AccessMonitoringRulesService_UpdateAccessMonitoringRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessMonitoringRulesServiceClient) UpsertAccessMonitoringRule(ctx context.Context, in *UpsertAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error) {
	out := new(AccessMonitoringRule)
	err := c.cc.Invoke(ctx, AccessMonitoringRulesService_UpsertAccessMonitoringRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessMonitoringRulesServiceClient) GetAccessMonitoringRule(ctx context.Context, in *GetAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*AccessMonitoringRule, error) {
	out := new(AccessMonitoringRule)
	err := c.cc.Invoke(ctx, AccessMonitoringRulesService_GetAccessMonitoringRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessMonitoringRulesServiceClient) DeleteAccessMonitoringRule(ctx context.Context, in *DeleteAccessMonitoringRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessMonitoringRulesService_DeleteAccessMonitoringRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessMonitoringRulesServiceClient) ListAccessMonitoringRules(ctx context.Context, in *ListAccessMonitoringRulesRequest, opts ...grpc.CallOption) (*ListAccessMonitoringRulesResponse, error) {
	out := new(ListAccessMonitoringRulesResponse)
	err := c.cc.Invoke(ctx, AccessMonitoringRulesService_ListAccessMonitoringRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessMonitoringRulesServiceClient) ListAccessMonitoringRulesWithFilter(ctx context.Context, in *ListAccessMonitoringRulesWithFilterRequest, opts ...grpc.CallOption) (*ListAccessMonitoringRulesWithFilterResponse, error) {
	out := new(ListAccessMonitoringRulesWithFilterResponse)
	err := c.cc.Invoke(ctx, AccessMonitoringRulesService_ListAccessMonitoringRulesWithFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessMonitoringRulesServiceServer is the server API for AccessMonitoringRulesService service.
// All implementations must embed UnimplementedAccessMonitoringRulesServiceServer
// for forward compatibility
type AccessMonitoringRulesServiceServer interface {
	// CreateAccessMonitoringRule creates the specified access monitoring rule.
	CreateAccessMonitoringRule(context.Context, *CreateAccessMonitoringRuleRequest) (*AccessMonitoringRule, error)
	// UpdateAccessMonitoringRule updates the specified access monitoring rule.
	UpdateAccessMonitoringRule(context.Context, *UpdateAccessMonitoringRuleRequest) (*AccessMonitoringRule, error)
	// UpsertAccessMonitoringRule upserts the specified access monitoring rule.
	UpsertAccessMonitoringRule(context.Context, *UpsertAccessMonitoringRuleRequest) (*AccessMonitoringRule, error)
	// GetAccessMonitoringRule gets the specified access monitoring rule.
	GetAccessMonitoringRule(context.Context, *GetAccessMonitoringRuleRequest) (*AccessMonitoringRule, error)
	// DeleteAccessMonitoringRule deletes the specified access monitoring rule.
	DeleteAccessMonitoringRule(context.Context, *DeleteAccessMonitoringRuleRequest) (*emptypb.Empty, error)
	// ListAccessMonitoringRules lists current access monitoring rules.
	ListAccessMonitoringRules(context.Context, *ListAccessMonitoringRulesRequest) (*ListAccessMonitoringRulesResponse, error)
	// ListAccessMonitoringRulesWithFilter lists current access monitoring rules that match the provided filter.
	ListAccessMonitoringRulesWithFilter(context.Context, *ListAccessMonitoringRulesWithFilterRequest) (*ListAccessMonitoringRulesWithFilterResponse, error)
	mustEmbedUnimplementedAccessMonitoringRulesServiceServer()
}

// UnimplementedAccessMonitoringRulesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccessMonitoringRulesServiceServer struct {
}

func (UnimplementedAccessMonitoringRulesServiceServer) CreateAccessMonitoringRule(context.Context, *CreateAccessMonitoringRuleRequest) (*AccessMonitoringRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessMonitoringRule not implemented")
}
func (UnimplementedAccessMonitoringRulesServiceServer) UpdateAccessMonitoringRule(context.Context, *UpdateAccessMonitoringRuleRequest) (*AccessMonitoringRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessMonitoringRule not implemented")
}
func (UnimplementedAccessMonitoringRulesServiceServer) UpsertAccessMonitoringRule(context.Context, *UpsertAccessMonitoringRuleRequest) (*AccessMonitoringRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAccessMonitoringRule not implemented")
}
func (UnimplementedAccessMonitoringRulesServiceServer) GetAccessMonitoringRule(context.Context, *GetAccessMonitoringRuleRequest) (*AccessMonitoringRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessMonitoringRule not implemented")
}
func (UnimplementedAccessMonitoringRulesServiceServer) DeleteAccessMonitoringRule(context.Context, *DeleteAccessMonitoringRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessMonitoringRule not implemented")
}
func (UnimplementedAccessMonitoringRulesServiceServer) ListAccessMonitoringRules(context.Context, *ListAccessMonitoringRulesRequest) (*ListAccessMonitoringRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessMonitoringRules not implemented")
}
func (UnimplementedAccessMonitoringRulesServiceServer) ListAccessMonitoringRulesWithFilter(context.Context, *ListAccessMonitoringRulesWithFilterRequest) (*ListAccessMonitoringRulesWithFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessMonitoringRulesWithFilter not implemented")
}
func (UnimplementedAccessMonitoringRulesServiceServer) mustEmbedUnimplementedAccessMonitoringRulesServiceServer() {
}

// UnsafeAccessMonitoringRulesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessMonitoringRulesServiceServer will
// result in compilation errors.
type UnsafeAccessMonitoringRulesServiceServer interface {
	mustEmbedUnimplementedAccessMonitoringRulesServiceServer()
}

func RegisterAccessMonitoringRulesServiceServer(s grpc.ServiceRegistrar, srv AccessMonitoringRulesServiceServer) {
	s.RegisterService(&AccessMonitoringRulesService_ServiceDesc, srv)
}

func _AccessMonitoringRulesService_CreateAccessMonitoringRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessMonitoringRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessMonitoringRulesServiceServer).CreateAccessMonitoringRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessMonitoringRulesService_CreateAccessMonitoringRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessMonitoringRulesServiceServer).CreateAccessMonitoringRule(ctx, req.(*CreateAccessMonitoringRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessMonitoringRulesService_UpdateAccessMonitoringRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessMonitoringRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessMonitoringRulesServiceServer).UpdateAccessMonitoringRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessMonitoringRulesService_UpdateAccessMonitoringRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessMonitoringRulesServiceServer).UpdateAccessMonitoringRule(ctx, req.(*UpdateAccessMonitoringRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessMonitoringRulesService_UpsertAccessMonitoringRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAccessMonitoringRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessMonitoringRulesServiceServer).UpsertAccessMonitoringRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessMonitoringRulesService_UpsertAccessMonitoringRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessMonitoringRulesServiceServer).UpsertAccessMonitoringRule(ctx, req.(*UpsertAccessMonitoringRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessMonitoringRulesService_GetAccessMonitoringRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessMonitoringRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessMonitoringRulesServiceServer).GetAccessMonitoringRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessMonitoringRulesService_GetAccessMonitoringRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessMonitoringRulesServiceServer).GetAccessMonitoringRule(ctx, req.(*GetAccessMonitoringRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessMonitoringRulesService_DeleteAccessMonitoringRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessMonitoringRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessMonitoringRulesServiceServer).DeleteAccessMonitoringRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessMonitoringRulesService_DeleteAccessMonitoringRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessMonitoringRulesServiceServer).DeleteAccessMonitoringRule(ctx, req.(*DeleteAccessMonitoringRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessMonitoringRulesService_ListAccessMonitoringRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessMonitoringRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessMonitoringRulesServiceServer).ListAccessMonitoringRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessMonitoringRulesService_ListAccessMonitoringRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessMonitoringRulesServiceServer).ListAccessMonitoringRules(ctx, req.(*ListAccessMonitoringRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessMonitoringRulesService_ListAccessMonitoringRulesWithFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessMonitoringRulesWithFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessMonitoringRulesServiceServer).ListAccessMonitoringRulesWithFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessMonitoringRulesService_ListAccessMonitoringRulesWithFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessMonitoringRulesServiceServer).ListAccessMonitoringRulesWithFilter(ctx, req.(*ListAccessMonitoringRulesWithFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessMonitoringRulesService_ServiceDesc is the grpc.ServiceDesc for AccessMonitoringRulesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessMonitoringRulesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.accessmonitoringrules.v1.AccessMonitoringRulesService",
	HandlerType: (*AccessMonitoringRulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccessMonitoringRule",
			Handler:    _AccessMonitoringRulesService_CreateAccessMonitoringRule_Handler,
		},
		{
			MethodName: "UpdateAccessMonitoringRule",
			Handler:    _AccessMonitoringRulesService_UpdateAccessMonitoringRule_Handler,
		},
		{
			MethodName: "UpsertAccessMonitoringRule",
			Handler:    _AccessMonitoringRulesService_UpsertAccessMonitoringRule_Handler,
		},
		{
			MethodName: "GetAccessMonitoringRule",
			Handler:    _AccessMonitoringRulesService_GetAccessMonitoringRule_Handler,
		},
		{
			MethodName: "DeleteAccessMonitoringRule",
			Handler:    _AccessMonitoringRulesService_DeleteAccessMonitoringRule_Handler,
		},
		{
			MethodName: "ListAccessMonitoringRules",
			Handler:    _AccessMonitoringRulesService_ListAccessMonitoringRules_Handler,
		},
		{
			MethodName: "ListAccessMonitoringRulesWithFilter",
			Handler:    _AccessMonitoringRulesService_ListAccessMonitoringRulesWithFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/accessmonitoringrules/v1/access_monitoring_rules_service.proto",
}
