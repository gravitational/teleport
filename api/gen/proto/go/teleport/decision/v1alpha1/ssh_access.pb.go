// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: teleport/decision/v1alpha1/ssh_access.proto

package decisionpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SSHPortForwardMode describes the mode of port forwarding permitted.
type SSHPortForwardMode int32

const (
	SSHPortForwardMode_SSH_PORT_FORWARD_MODE_UNSPECIFIED SSHPortForwardMode = 0
	SSHPortForwardMode_SSH_PORT_FORWARD_MODE_OFF         SSHPortForwardMode = 1
	SSHPortForwardMode_SSH_PORT_FORWARD_MODE_ON          SSHPortForwardMode = 2
	SSHPortForwardMode_SSH_PORT_FORWARD_MODE_LOCAL       SSHPortForwardMode = 3
	SSHPortForwardMode_SSH_PORT_FORWARD_MODE_REMOTE      SSHPortForwardMode = 4
)

// Enum value maps for SSHPortForwardMode.
var (
	SSHPortForwardMode_name = map[int32]string{
		0: "SSH_PORT_FORWARD_MODE_UNSPECIFIED",
		1: "SSH_PORT_FORWARD_MODE_OFF",
		2: "SSH_PORT_FORWARD_MODE_ON",
		3: "SSH_PORT_FORWARD_MODE_LOCAL",
		4: "SSH_PORT_FORWARD_MODE_REMOTE",
	}
	SSHPortForwardMode_value = map[string]int32{
		"SSH_PORT_FORWARD_MODE_UNSPECIFIED": 0,
		"SSH_PORT_FORWARD_MODE_OFF":         1,
		"SSH_PORT_FORWARD_MODE_ON":          2,
		"SSH_PORT_FORWARD_MODE_LOCAL":       3,
		"SSH_PORT_FORWARD_MODE_REMOTE":      4,
	}
)

func (x SSHPortForwardMode) Enum() *SSHPortForwardMode {
	p := new(SSHPortForwardMode)
	*p = x
	return p
}

func (x SSHPortForwardMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSHPortForwardMode) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_decision_v1alpha1_ssh_access_proto_enumTypes[0].Descriptor()
}

func (SSHPortForwardMode) Type() protoreflect.EnumType {
	return &file_teleport_decision_v1alpha1_ssh_access_proto_enumTypes[0]
}

func (x SSHPortForwardMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSHPortForwardMode.Descriptor instead.
func (SSHPortForwardMode) EnumDescriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{0}
}

// HostUserMode determines how host users should be created.
type HostUserMode int32

const (
	// HostUserModeUnspecified is the default mode, for when the mode couldn't be
	// determined from a types.CreateHostUserMode.
	HostUserMode_HOST_USER_MODE_UNSPECIFIED HostUserMode = 0
	// HostUserModeKeep creates a home directory and persists after a session ends.
	HostUserMode_HOST_USER_MODE_KEEP HostUserMode = 1
	// HostUserModeDrop does not create a home directory, and it is removed after
	// a session ends.
	HostUserMode_HOST_USER_MODE_DROP HostUserMode = 2
	// HostUserModeStatic creates a home directory and exists independently of a
	// session.
	HostUserMode_HOST_USER_MODE_STATIC HostUserMode = 3
)

// Enum value maps for HostUserMode.
var (
	HostUserMode_name = map[int32]string{
		0: "HOST_USER_MODE_UNSPECIFIED",
		1: "HOST_USER_MODE_KEEP",
		2: "HOST_USER_MODE_DROP",
		3: "HOST_USER_MODE_STATIC",
	}
	HostUserMode_value = map[string]int32{
		"HOST_USER_MODE_UNSPECIFIED": 0,
		"HOST_USER_MODE_KEEP":        1,
		"HOST_USER_MODE_DROP":        2,
		"HOST_USER_MODE_STATIC":      3,
	}
)

func (x HostUserMode) Enum() *HostUserMode {
	p := new(HostUserMode)
	*p = x
	return p
}

func (x HostUserMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostUserMode) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_decision_v1alpha1_ssh_access_proto_enumTypes[1].Descriptor()
}

func (HostUserMode) Type() protoreflect.EnumType {
	return &file_teleport_decision_v1alpha1_ssh_access_proto_enumTypes[1]
}

func (x HostUserMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostUserMode.Descriptor instead.
func (HostUserMode) EnumDescriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{1}
}

// EvaluateSSHAccessRequest describes a request to evaluate whether or not a
// given ssh access attempt should be permitted.
type EvaluateSSHAccessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata holds common authorization decision request fields.
	Metadata *RequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// SshAuthority identifies the authority that issued the below identity.
	SshAuthority *SSHAuthority `protobuf:"bytes,2,opt,name=ssh_authority,json=sshAuthority,proto3" json:"ssh_authority,omitempty"`
	// SshIdentity describes the teleport user requesting access.
	SshIdentity *SSHIdentity `protobuf:"bytes,3,opt,name=ssh_identity,json=sshIdentity,proto3" json:"ssh_identity,omitempty"`
	// Node references the target node the user is attempting to access.
	Node *Resource `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
	// OSUser is the user on the target node the user is attempting to access.
	OsUser        string `protobuf:"bytes,5,opt,name=os_user,json=osUser,proto3" json:"os_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateSSHAccessRequest) Reset() {
	*x = EvaluateSSHAccessRequest{}
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateSSHAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateSSHAccessRequest) ProtoMessage() {}

func (x *EvaluateSSHAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateSSHAccessRequest.ProtoReflect.Descriptor instead.
func (*EvaluateSSHAccessRequest) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{0}
}

func (x *EvaluateSSHAccessRequest) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EvaluateSSHAccessRequest) GetSshAuthority() *SSHAuthority {
	if x != nil {
		return x.SshAuthority
	}
	return nil
}

func (x *EvaluateSSHAccessRequest) GetSshIdentity() *SSHIdentity {
	if x != nil {
		return x.SshIdentity
	}
	return nil
}

func (x *EvaluateSSHAccessRequest) GetNode() *Resource {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *EvaluateSSHAccessRequest) GetOsUser() string {
	if x != nil {
		return x.OsUser
	}
	return ""
}

// EvaluateSSHAccessResponse describes the result of an SSH access evaluation.
type EvaluateSSHAccessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Decision:
	//
	//	*EvaluateSSHAccessResponse_Permit
	//	*EvaluateSSHAccessResponse_Denial
	Decision      isEvaluateSSHAccessResponse_Decision `protobuf_oneof:"decision"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateSSHAccessResponse) Reset() {
	*x = EvaluateSSHAccessResponse{}
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateSSHAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateSSHAccessResponse) ProtoMessage() {}

func (x *EvaluateSSHAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateSSHAccessResponse.ProtoReflect.Descriptor instead.
func (*EvaluateSSHAccessResponse) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{1}
}

func (x *EvaluateSSHAccessResponse) GetDecision() isEvaluateSSHAccessResponse_Decision {
	if x != nil {
		return x.Decision
	}
	return nil
}

func (x *EvaluateSSHAccessResponse) GetPermit() *SSHAccessPermit {
	if x != nil {
		if x, ok := x.Decision.(*EvaluateSSHAccessResponse_Permit); ok {
			return x.Permit
		}
	}
	return nil
}

func (x *EvaluateSSHAccessResponse) GetDenial() *SSHAccessDenial {
	if x != nil {
		if x, ok := x.Decision.(*EvaluateSSHAccessResponse_Denial); ok {
			return x.Denial
		}
	}
	return nil
}

type isEvaluateSSHAccessResponse_Decision interface {
	isEvaluateSSHAccessResponse_Decision()
}

type EvaluateSSHAccessResponse_Permit struct {
	Permit *SSHAccessPermit `protobuf:"bytes,1,opt,name=permit,proto3,oneof"`
}

type EvaluateSSHAccessResponse_Denial struct {
	Denial *SSHAccessDenial `protobuf:"bytes,2,opt,name=denial,proto3,oneof"`
}

func (*EvaluateSSHAccessResponse_Permit) isEvaluateSSHAccessResponse_Decision() {}

func (*EvaluateSSHAccessResponse_Denial) isEvaluateSSHAccessResponse_Decision() {}

// SSHAccessPermit describes the parameters/constraints of a permissible SSH
// access attempt.
type SSHAccessPermit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata holds common authorization decision response fields.
	Metadata *PermitMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// ForwardAgent indicates whether or not the user is permitted to use SSH agent forwarding.
	ForwardAgent bool `protobuf:"varint,2,opt,name=forward_agent,json=forwardAgent,proto3" json:"forward_agent,omitempty"`
	// PortForwardMode describes the kind of port forwarding permitted during this access attempt.
	PortForwardMode SSHPortForwardMode `protobuf:"varint,3,opt,name=port_forward_mode,json=portForwardMode,proto3,enum=teleport.decision.v1alpha1.SSHPortForwardMode" json:"port_forward_mode,omitempty"`
	// ClientIdleTimeout is the time after which the server should disconnect the user for inactivity
	// (if unspecified, the server should not disconnect the user).
	ClientIdleTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=client_idle_timeout,json=clientIdleTimeout,proto3" json:"client_idle_timeout,omitempty"`
	// DisconnectExpiredCert is the time after which the server should disconnect the user (if
	// unspecified, the server should not disconnect the user).
	DisconnectExpiredCert *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=disconnect_expired_cert,json=disconnectExpiredCert,proto3" json:"disconnect_expired_cert,omitempty"`
	// BpfEvents is the list of BPF events that should be recorded for this SSH access attempt.
	BpfEvents []string `protobuf:"bytes,6,rep,name=bpf_events,json=bpfEvents,proto3" json:"bpf_events,omitempty"`
	// X11Forwarding indicates whether or not the user is permitted to use X11 forwarding.
	X11Forwarding bool `protobuf:"varint,7,opt,name=x11_forwarding,json=x11Forwarding,proto3" json:"x11_forwarding,omitempty"`
	// MaxConnections is the maximum number of concurrent connections to be enforced during access.
	MaxConnections int64 `protobuf:"varint,8,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// MaxSessions is the maximum number of ssh session channels to be permitted within the ssh
	// connection.
	MaxSessions int64 `protobuf:"varint,9,opt,name=max_sessions,json=maxSessions,proto3" json:"max_sessions,omitempty"`
	// SshFileCopy indicates whether or not the user is permitted to perform file copying.
	SshFileCopy bool `protobuf:"varint,10,opt,name=ssh_file_copy,json=sshFileCopy,proto3" json:"ssh_file_copy,omitempty"`
	// HostSudoers is the list of entries that should be included in the temporary sudoers file
	// for this ssh access attempt.
	HostSudoers []string `protobuf:"bytes,11,rep,name=host_sudoers,json=hostSudoers,proto3" json:"host_sudoers,omitempty"`
	// SessionRecordingMode indicates the kind of session recording strategy to be used during this access attempt.
	SessionRecordingMode string `protobuf:"bytes,12,opt,name=session_recording_mode,json=sessionRecordingMode,proto3" json:"session_recording_mode,omitempty"`
	// LockingMode indicates the kind of locking strategy to be used during this access attempt.
	LockingMode string `protobuf:"bytes,13,opt,name=locking_mode,json=lockingMode,proto3" json:"locking_mode,omitempty"`
	// PrivateKeyPolicy indicates the private key policy to be enforced for the user.
	PrivateKeyPolicy string `protobuf:"bytes,14,opt,name=private_key_policy,json=privateKeyPolicy,proto3" json:"private_key_policy,omitempty"`
	// LockTargets is the list of locks that must be obeyed in order for access to be permissible.
	LockTargets []*LockTarget `protobuf:"bytes,15,rep,name=lock_targets,json=lockTargets,proto3" json:"lock_targets,omitempty"`
	// MappedRoles is the list of cluster-local roles that the users identity maps to (NOTE: use of
	// this field should be avoided where possible, we would like to remove dependency on it in the
	// future).
	MappedRoles []string `protobuf:"bytes,16,rep,name=mapped_roles,json=mappedRoles,proto3" json:"mapped_roles,omitempty"`
	// HostUserInfo encodes relevant information for host user creation. Omitted if
	// host user creation  is not permitted.
	HostUsersInfo *HostUsersInfo `protobuf:"bytes,17,opt,name=host_users_info,json=hostUsersInfo,proto3" json:"host_users_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSHAccessPermit) Reset() {
	*x = SSHAccessPermit{}
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHAccessPermit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHAccessPermit) ProtoMessage() {}

func (x *SSHAccessPermit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHAccessPermit.ProtoReflect.Descriptor instead.
func (*SSHAccessPermit) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{2}
}

func (x *SSHAccessPermit) GetMetadata() *PermitMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SSHAccessPermit) GetForwardAgent() bool {
	if x != nil {
		return x.ForwardAgent
	}
	return false
}

func (x *SSHAccessPermit) GetPortForwardMode() SSHPortForwardMode {
	if x != nil {
		return x.PortForwardMode
	}
	return SSHPortForwardMode_SSH_PORT_FORWARD_MODE_UNSPECIFIED
}

func (x *SSHAccessPermit) GetClientIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.ClientIdleTimeout
	}
	return nil
}

func (x *SSHAccessPermit) GetDisconnectExpiredCert() *timestamppb.Timestamp {
	if x != nil {
		return x.DisconnectExpiredCert
	}
	return nil
}

func (x *SSHAccessPermit) GetBpfEvents() []string {
	if x != nil {
		return x.BpfEvents
	}
	return nil
}

func (x *SSHAccessPermit) GetX11Forwarding() bool {
	if x != nil {
		return x.X11Forwarding
	}
	return false
}

func (x *SSHAccessPermit) GetMaxConnections() int64 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *SSHAccessPermit) GetMaxSessions() int64 {
	if x != nil {
		return x.MaxSessions
	}
	return 0
}

func (x *SSHAccessPermit) GetSshFileCopy() bool {
	if x != nil {
		return x.SshFileCopy
	}
	return false
}

func (x *SSHAccessPermit) GetHostSudoers() []string {
	if x != nil {
		return x.HostSudoers
	}
	return nil
}

func (x *SSHAccessPermit) GetSessionRecordingMode() string {
	if x != nil {
		return x.SessionRecordingMode
	}
	return ""
}

func (x *SSHAccessPermit) GetLockingMode() string {
	if x != nil {
		return x.LockingMode
	}
	return ""
}

func (x *SSHAccessPermit) GetPrivateKeyPolicy() string {
	if x != nil {
		return x.PrivateKeyPolicy
	}
	return ""
}

func (x *SSHAccessPermit) GetLockTargets() []*LockTarget {
	if x != nil {
		return x.LockTargets
	}
	return nil
}

func (x *SSHAccessPermit) GetMappedRoles() []string {
	if x != nil {
		return x.MappedRoles
	}
	return nil
}

func (x *SSHAccessPermit) GetHostUsersInfo() *HostUsersInfo {
	if x != nil {
		return x.HostUsersInfo
	}
	return nil
}

// SSHAccessDenial describes an SSH access denial.
type SSHAccessDenial struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *DenialMetadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSHAccessDenial) Reset() {
	*x = SSHAccessDenial{}
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHAccessDenial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHAccessDenial) ProtoMessage() {}

func (x *SSHAccessDenial) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHAccessDenial.ProtoReflect.Descriptor instead.
func (*SSHAccessDenial) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{3}
}

func (x *SSHAccessDenial) GetMetadata() *DenialMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// LockTarget lists the attributes used to lock a resource. This type must
// be kept in sync with types.LockTarget.
type LockTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User specifies the name of a Teleport user.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Role specifies the name of an RBAC role known to the root cluster.
	// In remote clusters, this constraint is evaluated before translating to local roles.
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// Login specifies the name of a local UNIX user.
	Login string `protobuf:"bytes,3,opt,name=login,proto3" json:"login,omitempty"`
	// MFADevice specifies the UUID of a user MFA device.
	MfaDevice string `protobuf:"bytes,4,opt,name=mfa_device,json=mfaDevice,proto3" json:"mfa_device,omitempty"`
	// WindowsDesktop specifies the name of a Windows desktop.
	WindowsDesktop string `protobuf:"bytes,5,opt,name=windows_desktop,json=windowsDesktop,proto3" json:"windows_desktop,omitempty"`
	// AccessRequest specifies the UUID of an access request.
	AccessRequest string `protobuf:"bytes,6,opt,name=access_request,json=accessRequest,proto3" json:"access_request,omitempty"`
	// Device is the device ID of a trusted device.
	// Requires Teleport Enterprise.
	Device string `protobuf:"bytes,7,opt,name=device,proto3" json:"device,omitempty"`
	// ServerID is the host id of the Teleport instance.
	ServerId      string `protobuf:"bytes,8,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockTarget) Reset() {
	*x = LockTarget{}
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockTarget) ProtoMessage() {}

func (x *LockTarget) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockTarget.ProtoReflect.Descriptor instead.
func (*LockTarget) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{4}
}

func (x *LockTarget) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *LockTarget) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *LockTarget) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *LockTarget) GetMfaDevice() string {
	if x != nil {
		return x.MfaDevice
	}
	return ""
}

func (x *LockTarget) GetWindowsDesktop() string {
	if x != nil {
		return x.WindowsDesktop
	}
	return ""
}

func (x *LockTarget) GetAccessRequest() string {
	if x != nil {
		return x.AccessRequest
	}
	return ""
}

func (x *LockTarget) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *LockTarget) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

// HostUsersInfo keeps information about groups and sudoers entries
// for a particular host user
type HostUsersInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Groups is the list of groups to include host users in
	Groups []string `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	// Mode determines if a host user should be deleted after a session
	Mode HostUserMode `protobuf:"varint,2,opt,name=mode,proto3,enum=teleport.decision.v1alpha1.HostUserMode" json:"mode,omitempty"`
	// Uid is the UID that the host user will be created with
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Gid is the GID that the host user will be created with
	Gid string `protobuf:"bytes,4,opt,name=gid,proto3" json:"gid,omitempty"`
	// Shell is the default login shell for a host user
	Shell         string `protobuf:"bytes,5,opt,name=shell,proto3" json:"shell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostUsersInfo) Reset() {
	*x = HostUsersInfo{}
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostUsersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostUsersInfo) ProtoMessage() {}

func (x *HostUsersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostUsersInfo.ProtoReflect.Descriptor instead.
func (*HostUsersInfo) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP(), []int{5}
}

func (x *HostUsersInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *HostUsersInfo) GetMode() HostUserMode {
	if x != nil {
		return x.Mode
	}
	return HostUserMode_HOST_USER_MODE_UNSPECIFIED
}

func (x *HostUsersInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *HostUsersInfo) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *HostUsersInfo) GetShell() string {
	if x != nil {
		return x.Shell
	}
	return ""
}

var File_teleport_decision_v1alpha1_ssh_access_proto protoreflect.FileDescriptor

var file_teleport_decision_v1alpha1_ssh_access_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x73, 0x68,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x18,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x73, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x73, 0x73, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x55, 0x73, 0x65, 0x72, 0x22,
	0xb5, 0x01, 0x0a, 0x19, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x53, 0x48, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x07, 0x0a, 0x0f, 0x53, 0x53, 0x48, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x53, 0x48, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x52, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x70, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x70, 0x66, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x78, 0x31, 0x31, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x78, 0x31, 0x31, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x73,
	0x68, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x75, 0x64, 0x6f, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x64, 0x6f, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x0f, 0x53, 0x53, 0x48, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xee, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x66, 0x61, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x66, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x2a, 0xbb, 0x01, 0x0a, 0x12, 0x53, 0x53, 0x48, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x53, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x53, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x53, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x53, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x04,
	0x2a, 0x7b, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x42, 0x5a, 0x5a,
	0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_teleport_decision_v1alpha1_ssh_access_proto_rawDescOnce sync.Once
	file_teleport_decision_v1alpha1_ssh_access_proto_rawDescData []byte
)

func file_teleport_decision_v1alpha1_ssh_access_proto_rawDescGZIP() []byte {
	file_teleport_decision_v1alpha1_ssh_access_proto_rawDescOnce.Do(func() {
		file_teleport_decision_v1alpha1_ssh_access_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_decision_v1alpha1_ssh_access_proto_rawDesc), len(file_teleport_decision_v1alpha1_ssh_access_proto_rawDesc)))
	})
	return file_teleport_decision_v1alpha1_ssh_access_proto_rawDescData
}

var file_teleport_decision_v1alpha1_ssh_access_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_teleport_decision_v1alpha1_ssh_access_proto_goTypes = []any{
	(SSHPortForwardMode)(0),           // 0: teleport.decision.v1alpha1.SSHPortForwardMode
	(HostUserMode)(0),                 // 1: teleport.decision.v1alpha1.HostUserMode
	(*EvaluateSSHAccessRequest)(nil),  // 2: teleport.decision.v1alpha1.EvaluateSSHAccessRequest
	(*EvaluateSSHAccessResponse)(nil), // 3: teleport.decision.v1alpha1.EvaluateSSHAccessResponse
	(*SSHAccessPermit)(nil),           // 4: teleport.decision.v1alpha1.SSHAccessPermit
	(*SSHAccessDenial)(nil),           // 5: teleport.decision.v1alpha1.SSHAccessDenial
	(*LockTarget)(nil),                // 6: teleport.decision.v1alpha1.LockTarget
	(*HostUsersInfo)(nil),             // 7: teleport.decision.v1alpha1.HostUsersInfo
	(*RequestMetadata)(nil),           // 8: teleport.decision.v1alpha1.RequestMetadata
	(*SSHAuthority)(nil),              // 9: teleport.decision.v1alpha1.SSHAuthority
	(*SSHIdentity)(nil),               // 10: teleport.decision.v1alpha1.SSHIdentity
	(*Resource)(nil),                  // 11: teleport.decision.v1alpha1.Resource
	(*PermitMetadata)(nil),            // 12: teleport.decision.v1alpha1.PermitMetadata
	(*durationpb.Duration)(nil),       // 13: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),     // 14: google.protobuf.Timestamp
	(*DenialMetadata)(nil),            // 15: teleport.decision.v1alpha1.DenialMetadata
}
var file_teleport_decision_v1alpha1_ssh_access_proto_depIdxs = []int32{
	8,  // 0: teleport.decision.v1alpha1.EvaluateSSHAccessRequest.metadata:type_name -> teleport.decision.v1alpha1.RequestMetadata
	9,  // 1: teleport.decision.v1alpha1.EvaluateSSHAccessRequest.ssh_authority:type_name -> teleport.decision.v1alpha1.SSHAuthority
	10, // 2: teleport.decision.v1alpha1.EvaluateSSHAccessRequest.ssh_identity:type_name -> teleport.decision.v1alpha1.SSHIdentity
	11, // 3: teleport.decision.v1alpha1.EvaluateSSHAccessRequest.node:type_name -> teleport.decision.v1alpha1.Resource
	4,  // 4: teleport.decision.v1alpha1.EvaluateSSHAccessResponse.permit:type_name -> teleport.decision.v1alpha1.SSHAccessPermit
	5,  // 5: teleport.decision.v1alpha1.EvaluateSSHAccessResponse.denial:type_name -> teleport.decision.v1alpha1.SSHAccessDenial
	12, // 6: teleport.decision.v1alpha1.SSHAccessPermit.metadata:type_name -> teleport.decision.v1alpha1.PermitMetadata
	0,  // 7: teleport.decision.v1alpha1.SSHAccessPermit.port_forward_mode:type_name -> teleport.decision.v1alpha1.SSHPortForwardMode
	13, // 8: teleport.decision.v1alpha1.SSHAccessPermit.client_idle_timeout:type_name -> google.protobuf.Duration
	14, // 9: teleport.decision.v1alpha1.SSHAccessPermit.disconnect_expired_cert:type_name -> google.protobuf.Timestamp
	6,  // 10: teleport.decision.v1alpha1.SSHAccessPermit.lock_targets:type_name -> teleport.decision.v1alpha1.LockTarget
	7,  // 11: teleport.decision.v1alpha1.SSHAccessPermit.host_users_info:type_name -> teleport.decision.v1alpha1.HostUsersInfo
	15, // 12: teleport.decision.v1alpha1.SSHAccessDenial.metadata:type_name -> teleport.decision.v1alpha1.DenialMetadata
	1,  // 13: teleport.decision.v1alpha1.HostUsersInfo.mode:type_name -> teleport.decision.v1alpha1.HostUserMode
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_teleport_decision_v1alpha1_ssh_access_proto_init() }
func file_teleport_decision_v1alpha1_ssh_access_proto_init() {
	if File_teleport_decision_v1alpha1_ssh_access_proto != nil {
		return
	}
	file_teleport_decision_v1alpha1_denial_metadata_proto_init()
	file_teleport_decision_v1alpha1_permit_metadata_proto_init()
	file_teleport_decision_v1alpha1_request_metadata_proto_init()
	file_teleport_decision_v1alpha1_resource_proto_init()
	file_teleport_decision_v1alpha1_ssh_identity_proto_init()
	file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes[1].OneofWrappers = []any{
		(*EvaluateSSHAccessResponse_Permit)(nil),
		(*EvaluateSSHAccessResponse_Denial)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_decision_v1alpha1_ssh_access_proto_rawDesc), len(file_teleport_decision_v1alpha1_ssh_access_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_decision_v1alpha1_ssh_access_proto_goTypes,
		DependencyIndexes: file_teleport_decision_v1alpha1_ssh_access_proto_depIdxs,
		EnumInfos:         file_teleport_decision_v1alpha1_ssh_access_proto_enumTypes,
		MessageInfos:      file_teleport_decision_v1alpha1_ssh_access_proto_msgTypes,
	}.Build()
	File_teleport_decision_v1alpha1_ssh_access_proto = out.File
	file_teleport_decision_v1alpha1_ssh_access_proto_goTypes = nil
	file_teleport_decision_v1alpha1_ssh_access_proto_depIdxs = nil
}
