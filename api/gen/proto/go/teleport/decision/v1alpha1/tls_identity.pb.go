// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/decision/v1alpha1/tls_identity.proto

package decisionpb

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/trait/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TLSIdentity is the identity used for TLS connections.
// Must be kept in sync with tlsca.Identity.
type TLSIdentity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Username is the name of the user (for end-users/bots) or the Host ID (for
	// Teleport processes).
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Impersonator is a username of a user impersonating this user.
	Impersonator string `protobuf:"bytes,2,opt,name=impersonator,proto3" json:"impersonator,omitempty"`
	// Groups is a list of groups (Teleport roles) encoded in the identity.
	Groups []string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	// SystemRoles is a list of system roles (e.g. auth, proxy, node, etc) used in
	// "multi-role" certificates. Single-role certificates encode the system role
	// in `Groups` for back-compat reasons.
	SystemRoles []string `protobuf:"bytes,4,rep,name=system_roles,json=systemRoles,proto3" json:"system_roles,omitempty"`
	// Usage is a list of usage restrictions encoded in the identity.
	Usage []string `protobuf:"bytes,5,rep,name=usage,proto3" json:"usage,omitempty"`
	// Principals is a list of Unix logins allowed.
	Principals []string `protobuf:"bytes,6,rep,name=principals,proto3" json:"principals,omitempty"`
	// KubernetesGroups is a list of Kubernetes groups allowed.
	KubernetesGroups []string `protobuf:"bytes,7,rep,name=kubernetes_groups,json=kubernetesGroups,proto3" json:"kubernetes_groups,omitempty"`
	// KubernetesUsers is a list of Kubernetes users allowed.
	KubernetesUsers []string `protobuf:"bytes,8,rep,name=kubernetes_users,json=kubernetesUsers,proto3" json:"kubernetes_users,omitempty"`
	// Expires specifies whenever the session will expire.
	Expires *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expires,proto3" json:"expires,omitempty"`
	// RouteToCluster specifies the target cluster.
	RouteToCluster string `protobuf:"bytes,10,opt,name=route_to_cluster,json=routeToCluster,proto3" json:"route_to_cluster,omitempty"`
	// KubernetesCluster specifies the target kubernetes cluster for TLS
	// identities. This can be empty on older Teleport clients.
	KubernetesCluster string `protobuf:"bytes,11,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3" json:"kubernetes_cluster,omitempty"`
	// Traits hold claim data used to populate a role at runtime.
	Traits []*v1.Trait `protobuf:"bytes,12,rep,name=traits,proto3" json:"traits,omitempty"`
	// RouteToApp holds routing information for applications. Routing metadata
	// allows Teleport web proxy to route HTTP requests to the appropriate cluster
	// and Teleport application proxy within the cluster.
	RouteToApp *RouteToApp `protobuf:"bytes,13,opt,name=route_to_app,json=routeToApp,proto3" json:"route_to_app,omitempty"`
	// TeleportCluster is the name of the teleport cluster that this identity
	// originated from. For TLS certs this may not be the same as cert issuer, in
	// case of multi-hop requests that originate from a remote cluster.
	TeleportCluster string `protobuf:"bytes,14,opt,name=teleport_cluster,json=teleportCluster,proto3" json:"teleport_cluster,omitempty"`
	// RouteToDatabase contains routing information for databases.
	RouteToDatabase *RouteToDatabase `protobuf:"bytes,15,opt,name=route_to_database,json=routeToDatabase,proto3" json:"route_to_database,omitempty"`
	// DatabaseNames is a list of allowed database names.
	DatabaseNames []string `protobuf:"bytes,16,rep,name=database_names,json=databaseNames,proto3" json:"database_names,omitempty"`
	// DatabaseUsers is a list of allowed database users.
	DatabaseUsers []string `protobuf:"bytes,17,rep,name=database_users,json=databaseUsers,proto3" json:"database_users,omitempty"`
	// MfaVerified is the UUID of an MFA device when this Identity was
	// confirmed immediately after an MFA check.
	MfaVerified string `protobuf:"bytes,18,opt,name=mfa_verified,json=mfaVerified,proto3" json:"mfa_verified,omitempty"`
	// PreviousIdentityExpires is the expiry time of the identity/cert that this
	// identity/cert was derived from. It is used to determine a session's hard
	// deadline in cases where both require_session_mfa and
	// disconnect_expired_cert are enabled.
	// See https://github.com/gravitational/teleport/issues/18544.
	PreviousIdentityExpires *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=previous_identity_expires,json=previousIdentityExpires,proto3" json:"previous_identity_expires,omitempty"`
	// LoginIp is an observed IP of the client that this Identity represents.
	LoginIp string `protobuf:"bytes,20,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"`
	// PinnedIp is an IP the certificate is pinned to.
	PinnedIp string `protobuf:"bytes,21,opt,name=pinned_ip,json=pinnedIp,proto3" json:"pinned_ip,omitempty"`
	// AwsRoleArns is a list of allowed AWS role ARNs user can assume.
	AwsRoleArns []string `protobuf:"bytes,22,rep,name=aws_role_arns,json=awsRoleArns,proto3" json:"aws_role_arns,omitempty"`
	// AzureIdentities is a list of allowed Azure identities user can assume.
	AzureIdentities []string `protobuf:"bytes,23,rep,name=azure_identities,json=azureIdentities,proto3" json:"azure_identities,omitempty"`
	// GcpServiceAccounts is a list of allowed GCP service accounts that the user
	// can assume.
	GcpServiceAccounts []string `protobuf:"bytes,24,rep,name=gcp_service_accounts,json=gcpServiceAccounts,proto3" json:"gcp_service_accounts,omitempty"`
	// ActiveRequests is a list of UUIDs of active requests for this Identity.
	ActiveRequests []string `protobuf:"bytes,25,rep,name=active_requests,json=activeRequests,proto3" json:"active_requests,omitempty"`
	// DisallowReissue is a flag that, if set, instructs the auth server to deny
	// any attempts to reissue new certificates while authenticated with this
	// certificate.
	DisallowReissue bool `protobuf:"varint,26,opt,name=disallow_reissue,json=disallowReissue,proto3" json:"disallow_reissue,omitempty"`
	// Renewable indicates that this identity is allowed to renew it's own
	// credentials. This is only enabled for certificate renewal bots.
	Renewable bool `protobuf:"varint,27,opt,name=renewable,proto3" json:"renewable,omitempty"`
	// Generation counts the number of times this certificate has been renewed.
	Generation uint64 `protobuf:"varint,28,opt,name=generation,proto3" json:"generation,omitempty"`
	// BotName indicates the name of the Machine ID bot this identity was issued
	// to, if any.
	BotName string `protobuf:"bytes,29,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
	// BotInstanceId is a unique identifier for Machine ID bots that is persisted
	// through renewals.
	BotInstanceId string `protobuf:"bytes,30,opt,name=bot_instance_id,json=botInstanceId,proto3" json:"bot_instance_id,omitempty"`
	// AllowedResourceIds lists the resources the identity should be allowed to
	// access.
	AllowedResourceIds []*ResourceId `protobuf:"bytes,31,rep,name=allowed_resource_ids,json=allowedResourceIds,proto3" json:"allowed_resource_ids,omitempty"`
	// PrivateKeyPolicy is the private key policy supported by this identity.
	PrivateKeyPolicy string `protobuf:"bytes,32,opt,name=private_key_policy,json=privateKeyPolicy,proto3" json:"private_key_policy,omitempty"`
	// ConnectionDiagnosticId is used to add connection diagnostic messages when
	// Testing a Connection.
	ConnectionDiagnosticId string `protobuf:"bytes,33,opt,name=connection_diagnostic_id,json=connectionDiagnosticId,proto3" json:"connection_diagnostic_id,omitempty"`
	// DeviceExtensions holds device-aware extensions for the identity.
	DeviceExtensions *DeviceExtensions `protobuf:"bytes,34,opt,name=device_extensions,json=deviceExtensions,proto3" json:"device_extensions,omitempty"`
	// UserType indicates if the User was created by an SSO Provider or locally.
	UserType      string `protobuf:"bytes,35,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSIdentity) Reset() {
	*x = TLSIdentity{}
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSIdentity) ProtoMessage() {}

func (x *TLSIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSIdentity.ProtoReflect.Descriptor instead.
func (*TLSIdentity) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_tls_identity_proto_rawDescGZIP(), []int{0}
}

func (x *TLSIdentity) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TLSIdentity) GetImpersonator() string {
	if x != nil {
		return x.Impersonator
	}
	return ""
}

func (x *TLSIdentity) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *TLSIdentity) GetSystemRoles() []string {
	if x != nil {
		return x.SystemRoles
	}
	return nil
}

func (x *TLSIdentity) GetUsage() []string {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *TLSIdentity) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *TLSIdentity) GetKubernetesGroups() []string {
	if x != nil {
		return x.KubernetesGroups
	}
	return nil
}

func (x *TLSIdentity) GetKubernetesUsers() []string {
	if x != nil {
		return x.KubernetesUsers
	}
	return nil
}

func (x *TLSIdentity) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *TLSIdentity) GetRouteToCluster() string {
	if x != nil {
		return x.RouteToCluster
	}
	return ""
}

func (x *TLSIdentity) GetKubernetesCluster() string {
	if x != nil {
		return x.KubernetesCluster
	}
	return ""
}

func (x *TLSIdentity) GetTraits() []*v1.Trait {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *TLSIdentity) GetRouteToApp() *RouteToApp {
	if x != nil {
		return x.RouteToApp
	}
	return nil
}

func (x *TLSIdentity) GetTeleportCluster() string {
	if x != nil {
		return x.TeleportCluster
	}
	return ""
}

func (x *TLSIdentity) GetRouteToDatabase() *RouteToDatabase {
	if x != nil {
		return x.RouteToDatabase
	}
	return nil
}

func (x *TLSIdentity) GetDatabaseNames() []string {
	if x != nil {
		return x.DatabaseNames
	}
	return nil
}

func (x *TLSIdentity) GetDatabaseUsers() []string {
	if x != nil {
		return x.DatabaseUsers
	}
	return nil
}

func (x *TLSIdentity) GetMfaVerified() string {
	if x != nil {
		return x.MfaVerified
	}
	return ""
}

func (x *TLSIdentity) GetPreviousIdentityExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.PreviousIdentityExpires
	}
	return nil
}

func (x *TLSIdentity) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *TLSIdentity) GetPinnedIp() string {
	if x != nil {
		return x.PinnedIp
	}
	return ""
}

func (x *TLSIdentity) GetAwsRoleArns() []string {
	if x != nil {
		return x.AwsRoleArns
	}
	return nil
}

func (x *TLSIdentity) GetAzureIdentities() []string {
	if x != nil {
		return x.AzureIdentities
	}
	return nil
}

func (x *TLSIdentity) GetGcpServiceAccounts() []string {
	if x != nil {
		return x.GcpServiceAccounts
	}
	return nil
}

func (x *TLSIdentity) GetActiveRequests() []string {
	if x != nil {
		return x.ActiveRequests
	}
	return nil
}

func (x *TLSIdentity) GetDisallowReissue() bool {
	if x != nil {
		return x.DisallowReissue
	}
	return false
}

func (x *TLSIdentity) GetRenewable() bool {
	if x != nil {
		return x.Renewable
	}
	return false
}

func (x *TLSIdentity) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *TLSIdentity) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

func (x *TLSIdentity) GetBotInstanceId() string {
	if x != nil {
		return x.BotInstanceId
	}
	return ""
}

func (x *TLSIdentity) GetAllowedResourceIds() []*ResourceId {
	if x != nil {
		return x.AllowedResourceIds
	}
	return nil
}

func (x *TLSIdentity) GetPrivateKeyPolicy() string {
	if x != nil {
		return x.PrivateKeyPolicy
	}
	return ""
}

func (x *TLSIdentity) GetConnectionDiagnosticId() string {
	if x != nil {
		return x.ConnectionDiagnosticId
	}
	return ""
}

func (x *TLSIdentity) GetDeviceExtensions() *DeviceExtensions {
	if x != nil {
		return x.DeviceExtensions
	}
	return nil
}

func (x *TLSIdentity) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

// RouteToApp holds routing information for applications.
type RouteToApp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SessionId is an ID used to identify application sessions created by this
	// certificate.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// PublicAddr (and ClusterName) are used to route requests issued with this
	// certificate to the appropriate application proxy/cluster.
	PublicAddr string `protobuf:"bytes,2,opt,name=public_addr,json=publicAddr,proto3" json:"public_addr,omitempty"`
	// ClusterName (and PublicAddr) are used to route requests issued with this
	// certificate to the appropriate application proxy/cluster.
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Name is the app name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// AwsRoleArn is the AWS role to assume when accessing AWS console.
	AwsRoleArn string `protobuf:"bytes,5,opt,name=aws_role_arn,json=awsRoleArn,proto3" json:"aws_role_arn,omitempty"`
	// AzureIdentity is the Azure identity to assume when accessing Azure API.
	AzureIdentity string `protobuf:"bytes,6,opt,name=azure_identity,json=azureIdentity,proto3" json:"azure_identity,omitempty"`
	// GcpServiceAccount is the GCP service account to assume when accessing GCP
	// API.
	GcpServiceAccount string `protobuf:"bytes,7,opt,name=gcp_service_account,json=gcpServiceAccount,proto3" json:"gcp_service_account,omitempty"`
	// Uri is the URI of the app. This is the internal endpoint where the
	// application is running and isn't user-facing.
	Uri string `protobuf:"bytes,8,opt,name=uri,proto3" json:"uri,omitempty"`
	// TargetPort is the port to which connections should be routed to. Used only
	// for multi-port TCP apps. It is appended to the hostname from the URI in the
	// app spec, since the URI from RouteToApp is not used as the source of truth
	// for routing.
	TargetPort    int32 `protobuf:"varint,9,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteToApp) Reset() {
	*x = RouteToApp{}
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteToApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteToApp) ProtoMessage() {}

func (x *RouteToApp) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteToApp.ProtoReflect.Descriptor instead.
func (*RouteToApp) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_tls_identity_proto_rawDescGZIP(), []int{1}
}

func (x *RouteToApp) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RouteToApp) GetPublicAddr() string {
	if x != nil {
		return x.PublicAddr
	}
	return ""
}

func (x *RouteToApp) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RouteToApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteToApp) GetAwsRoleArn() string {
	if x != nil {
		return x.AwsRoleArn
	}
	return ""
}

func (x *RouteToApp) GetAzureIdentity() string {
	if x != nil {
		return x.AzureIdentity
	}
	return ""
}

func (x *RouteToApp) GetGcpServiceAccount() string {
	if x != nil {
		return x.GcpServiceAccount
	}
	return ""
}

func (x *RouteToApp) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RouteToApp) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

// RouteToDatabase contains routing information for databases.
type RouteToDatabase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ServiceName is the name of the Teleport database proxy service to route
	// requests to.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Protocol is the database protocol.
	//
	// It is embedded in identity so clients can understand what type of database
	// this is without contacting server.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Username is an optional database username to serve as a default username to
	// connect as.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Database is an optional database name to serve as a default database to
	// connect to.
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	// Roles is an optional list of database roles to use for a database session.
	// This list should be a subset of allowed database roles. If not specified,
	// Database Service will use all allowed database roles for this database.
	Roles         []string `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteToDatabase) Reset() {
	*x = RouteToDatabase{}
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteToDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteToDatabase) ProtoMessage() {}

func (x *RouteToDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteToDatabase.ProtoReflect.Descriptor instead.
func (*RouteToDatabase) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_tls_identity_proto_rawDescGZIP(), []int{2}
}

func (x *RouteToDatabase) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RouteToDatabase) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RouteToDatabase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RouteToDatabase) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RouteToDatabase) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// ResourceId is a unique identifier for a teleport resource.
// Must be kept in sync with types.ResourceID.
type ResourceId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClusterName is the name of the cluster the resource is in.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Kind is the resource kind.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name is the name of the specific resource.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// SubResourceName is the resource belonging to resource identified by "Name"
	// that the user is allowed to access to. When granting access to a
	// subresource, access to other resources is limited. Currently it just
	// supports resources of Kind=pod and the format is the following
	// "<kube_namespace>/<kube_pod>".
	SubResourceName string `protobuf:"bytes,4,opt,name=sub_resource_name,json=subResourceName,proto3" json:"sub_resource_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ResourceId) Reset() {
	*x = ResourceId{}
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceId) ProtoMessage() {}

func (x *ResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceId.ProtoReflect.Descriptor instead.
func (*ResourceId) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_tls_identity_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceId) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ResourceId) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceId) GetSubResourceName() string {
	if x != nil {
		return x.SubResourceName
	}
	return ""
}

// DeviceExtensions holds device-aware extensions for the identity.
type DeviceExtensions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DeviceId is the trusted device identifier.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// AssetTag is the device inventory identifier.
	AssetTag string `protobuf:"bytes,2,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	// CredentialId is the identifier for the credential used by the device to
	// authenticate itself.
	CredentialId  string `protobuf:"bytes,3,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceExtensions) Reset() {
	*x = DeviceExtensions{}
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceExtensions) ProtoMessage() {}

func (x *DeviceExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceExtensions.ProtoReflect.Descriptor instead.
func (*DeviceExtensions) Descriptor() ([]byte, []int) {
	return file_teleport_decision_v1alpha1_tls_identity_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceExtensions) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceExtensions) GetAssetTag() string {
	if x != nil {
		return x.AssetTag
	}
	return ""
}

func (x *DeviceExtensions) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

var File_teleport_decision_v1alpha1_tls_identity_proto protoreflect.FileDescriptor

const file_teleport_decision_v1alpha1_tls_identity_proto_rawDesc = "" +
	"\n" +
	"-teleport/decision/v1alpha1/tls_identity.proto\x12\x1ateleport.decision.v1alpha1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dteleport/trait/v1/trait.proto\"\xb6\f\n" +
	"\vTLSIdentity\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\"\n" +
	"\fimpersonator\x18\x02 \x01(\tR\fimpersonator\x12\x16\n" +
	"\x06groups\x18\x03 \x03(\tR\x06groups\x12!\n" +
	"\fsystem_roles\x18\x04 \x03(\tR\vsystemRoles\x12\x14\n" +
	"\x05usage\x18\x05 \x03(\tR\x05usage\x12\x1e\n" +
	"\n" +
	"principals\x18\x06 \x03(\tR\n" +
	"principals\x12+\n" +
	"\x11kubernetes_groups\x18\a \x03(\tR\x10kubernetesGroups\x12)\n" +
	"\x10kubernetes_users\x18\b \x03(\tR\x0fkubernetesUsers\x124\n" +
	"\aexpires\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\aexpires\x12(\n" +
	"\x10route_to_cluster\x18\n" +
	" \x01(\tR\x0erouteToCluster\x12-\n" +
	"\x12kubernetes_cluster\x18\v \x01(\tR\x11kubernetesCluster\x120\n" +
	"\x06traits\x18\f \x03(\v2\x18.teleport.trait.v1.TraitR\x06traits\x12H\n" +
	"\froute_to_app\x18\r \x01(\v2&.teleport.decision.v1alpha1.RouteToAppR\n" +
	"routeToApp\x12)\n" +
	"\x10teleport_cluster\x18\x0e \x01(\tR\x0fteleportCluster\x12W\n" +
	"\x11route_to_database\x18\x0f \x01(\v2+.teleport.decision.v1alpha1.RouteToDatabaseR\x0frouteToDatabase\x12%\n" +
	"\x0edatabase_names\x18\x10 \x03(\tR\rdatabaseNames\x12%\n" +
	"\x0edatabase_users\x18\x11 \x03(\tR\rdatabaseUsers\x12!\n" +
	"\fmfa_verified\x18\x12 \x01(\tR\vmfaVerified\x12V\n" +
	"\x19previous_identity_expires\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampR\x17previousIdentityExpires\x12\x19\n" +
	"\blogin_ip\x18\x14 \x01(\tR\aloginIp\x12\x1b\n" +
	"\tpinned_ip\x18\x15 \x01(\tR\bpinnedIp\x12\"\n" +
	"\raws_role_arns\x18\x16 \x03(\tR\vawsRoleArns\x12)\n" +
	"\x10azure_identities\x18\x17 \x03(\tR\x0fazureIdentities\x120\n" +
	"\x14gcp_service_accounts\x18\x18 \x03(\tR\x12gcpServiceAccounts\x12'\n" +
	"\x0factive_requests\x18\x19 \x03(\tR\x0eactiveRequests\x12)\n" +
	"\x10disallow_reissue\x18\x1a \x01(\bR\x0fdisallowReissue\x12\x1c\n" +
	"\trenewable\x18\x1b \x01(\bR\trenewable\x12\x1e\n" +
	"\n" +
	"generation\x18\x1c \x01(\x04R\n" +
	"generation\x12\x19\n" +
	"\bbot_name\x18\x1d \x01(\tR\abotName\x12&\n" +
	"\x0fbot_instance_id\x18\x1e \x01(\tR\rbotInstanceId\x12X\n" +
	"\x14allowed_resource_ids\x18\x1f \x03(\v2&.teleport.decision.v1alpha1.ResourceIdR\x12allowedResourceIds\x12,\n" +
	"\x12private_key_policy\x18  \x01(\tR\x10privateKeyPolicy\x128\n" +
	"\x18connection_diagnostic_id\x18! \x01(\tR\x16connectionDiagnosticId\x12Y\n" +
	"\x11device_extensions\x18\" \x01(\v2,.teleport.decision.v1alpha1.DeviceExtensionsR\x10deviceExtensions\x12\x1b\n" +
	"\tuser_type\x18# \x01(\tR\buserType\"\xaf\x02\n" +
	"\n" +
	"RouteToApp\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1f\n" +
	"\vpublic_addr\x18\x02 \x01(\tR\n" +
	"publicAddr\x12!\n" +
	"\fcluster_name\x18\x03 \x01(\tR\vclusterName\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\faws_role_arn\x18\x05 \x01(\tR\n" +
	"awsRoleArn\x12%\n" +
	"\x0eazure_identity\x18\x06 \x01(\tR\razureIdentity\x12.\n" +
	"\x13gcp_service_account\x18\a \x01(\tR\x11gcpServiceAccount\x12\x10\n" +
	"\x03uri\x18\b \x01(\tR\x03uri\x12\x1f\n" +
	"\vtarget_port\x18\t \x01(\x05R\n" +
	"targetPort\"\x9e\x01\n" +
	"\x0fRouteToDatabase\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bdatabase\x18\x04 \x01(\tR\bdatabase\x12\x14\n" +
	"\x05roles\x18\x05 \x03(\tR\x05roles\"\x83\x01\n" +
	"\n" +
	"ResourceId\x12!\n" +
	"\fcluster_name\x18\x01 \x01(\tR\vclusterName\x12\x12\n" +
	"\x04kind\x18\x02 \x01(\tR\x04kind\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12*\n" +
	"\x11sub_resource_name\x18\x04 \x01(\tR\x0fsubResourceName\"q\n" +
	"\x10DeviceExtensions\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12\x1b\n" +
	"\tasset_tag\x18\x02 \x01(\tR\bassetTag\x12#\n" +
	"\rcredential_id\x18\x03 \x01(\tR\fcredentialIdBZZXgithub.com/gravitational/teleport/api/gen/proto/go/teleport/decision/v1alpha1;decisionpbb\x06proto3"

var (
	file_teleport_decision_v1alpha1_tls_identity_proto_rawDescOnce sync.Once
	file_teleport_decision_v1alpha1_tls_identity_proto_rawDescData []byte
)

func file_teleport_decision_v1alpha1_tls_identity_proto_rawDescGZIP() []byte {
	file_teleport_decision_v1alpha1_tls_identity_proto_rawDescOnce.Do(func() {
		file_teleport_decision_v1alpha1_tls_identity_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_decision_v1alpha1_tls_identity_proto_rawDesc), len(file_teleport_decision_v1alpha1_tls_identity_proto_rawDesc)))
	})
	return file_teleport_decision_v1alpha1_tls_identity_proto_rawDescData
}

var file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_teleport_decision_v1alpha1_tls_identity_proto_goTypes = []any{
	(*TLSIdentity)(nil),           // 0: teleport.decision.v1alpha1.TLSIdentity
	(*RouteToApp)(nil),            // 1: teleport.decision.v1alpha1.RouteToApp
	(*RouteToDatabase)(nil),       // 2: teleport.decision.v1alpha1.RouteToDatabase
	(*ResourceId)(nil),            // 3: teleport.decision.v1alpha1.ResourceId
	(*DeviceExtensions)(nil),      // 4: teleport.decision.v1alpha1.DeviceExtensions
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*v1.Trait)(nil),              // 6: teleport.trait.v1.Trait
}
var file_teleport_decision_v1alpha1_tls_identity_proto_depIdxs = []int32{
	5, // 0: teleport.decision.v1alpha1.TLSIdentity.expires:type_name -> google.protobuf.Timestamp
	6, // 1: teleport.decision.v1alpha1.TLSIdentity.traits:type_name -> teleport.trait.v1.Trait
	1, // 2: teleport.decision.v1alpha1.TLSIdentity.route_to_app:type_name -> teleport.decision.v1alpha1.RouteToApp
	2, // 3: teleport.decision.v1alpha1.TLSIdentity.route_to_database:type_name -> teleport.decision.v1alpha1.RouteToDatabase
	5, // 4: teleport.decision.v1alpha1.TLSIdentity.previous_identity_expires:type_name -> google.protobuf.Timestamp
	3, // 5: teleport.decision.v1alpha1.TLSIdentity.allowed_resource_ids:type_name -> teleport.decision.v1alpha1.ResourceId
	4, // 6: teleport.decision.v1alpha1.TLSIdentity.device_extensions:type_name -> teleport.decision.v1alpha1.DeviceExtensions
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_teleport_decision_v1alpha1_tls_identity_proto_init() }
func file_teleport_decision_v1alpha1_tls_identity_proto_init() {
	if File_teleport_decision_v1alpha1_tls_identity_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_decision_v1alpha1_tls_identity_proto_rawDesc), len(file_teleport_decision_v1alpha1_tls_identity_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_decision_v1alpha1_tls_identity_proto_goTypes,
		DependencyIndexes: file_teleport_decision_v1alpha1_tls_identity_proto_depIdxs,
		MessageInfos:      file_teleport_decision_v1alpha1_tls_identity_proto_msgTypes,
	}.Build()
	File_teleport_decision_v1alpha1_tls_identity_proto = out.File
	file_teleport_decision_v1alpha1_tls_identity_proto_goTypes = nil
	file_teleport_decision_v1alpha1_tls_identity_proto_depIdxs = nil
}
