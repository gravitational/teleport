// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/delegation/v1/delegation_profile_service.proto

package delegationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DelegationProfileService_CreateDelegationProfile_FullMethodName = "/teleport.delegation.v1.DelegationProfileService/CreateDelegationProfile"
	DelegationProfileService_UpsertDelegationProfile_FullMethodName = "/teleport.delegation.v1.DelegationProfileService/UpsertDelegationProfile"
	DelegationProfileService_UpdateDelegationProfile_FullMethodName = "/teleport.delegation.v1.DelegationProfileService/UpdateDelegationProfile"
	DelegationProfileService_GetDelegationProfile_FullMethodName    = "/teleport.delegation.v1.DelegationProfileService/GetDelegationProfile"
	DelegationProfileService_DeleteDelegationProfile_FullMethodName = "/teleport.delegation.v1.DelegationProfileService/DeleteDelegationProfile"
	DelegationProfileService_ListDelegationProfiles_FullMethodName  = "/teleport.delegation.v1.DelegationProfileService/ListDelegationProfiles"
)

// DelegationProfileServiceClient is the client API for DelegationProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DelegationProfileService manages DelegationProfile resources.
type DelegationProfileServiceClient interface {
	// CreateDelegationProfile creates a delegation profile.
	CreateDelegationProfile(ctx context.Context, in *CreateDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error)
	// UpsertDelegationProfile creates or updates a delegation profile.
	//
	// You should prefer to call CreateDelegationProfile or UpdateDelegationProfile instead.
	UpsertDelegationProfile(ctx context.Context, in *UpsertDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error)
	// UpdateDelegationProfile updates an existing delegation profile. It will
	// refuse to update a delegation profile if one does not already exist with
	// the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided DelegationProfile matches the revision of
	// the existing DelegationProfile.
	UpdateDelegationProfile(ctx context.Context, in *UpdateDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error)
	// GetDelegationProfile gets a delegation profile by name.
	GetDelegationProfile(ctx context.Context, in *GetDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error)
	// DeleteDelegationProfile deletes a delegation profile by name.
	DeleteDelegationProfile(ctx context.Context, in *DeleteDelegationProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListDelegationProfiles returns a list of delegation profiles, pagination
	// semantics are applied.
	ListDelegationProfiles(ctx context.Context, in *ListDelegationProfilesRequest, opts ...grpc.CallOption) (*ListDelegationProfilesResponse, error)
}

type delegationProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDelegationProfileServiceClient(cc grpc.ClientConnInterface) DelegationProfileServiceClient {
	return &delegationProfileServiceClient{cc}
}

func (c *delegationProfileServiceClient) CreateDelegationProfile(ctx context.Context, in *CreateDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelegationProfile)
	err := c.cc.Invoke(ctx, DelegationProfileService_CreateDelegationProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delegationProfileServiceClient) UpsertDelegationProfile(ctx context.Context, in *UpsertDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelegationProfile)
	err := c.cc.Invoke(ctx, DelegationProfileService_UpsertDelegationProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delegationProfileServiceClient) UpdateDelegationProfile(ctx context.Context, in *UpdateDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelegationProfile)
	err := c.cc.Invoke(ctx, DelegationProfileService_UpdateDelegationProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delegationProfileServiceClient) GetDelegationProfile(ctx context.Context, in *GetDelegationProfileRequest, opts ...grpc.CallOption) (*DelegationProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelegationProfile)
	err := c.cc.Invoke(ctx, DelegationProfileService_GetDelegationProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delegationProfileServiceClient) DeleteDelegationProfile(ctx context.Context, in *DeleteDelegationProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DelegationProfileService_DeleteDelegationProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delegationProfileServiceClient) ListDelegationProfiles(ctx context.Context, in *ListDelegationProfilesRequest, opts ...grpc.CallOption) (*ListDelegationProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDelegationProfilesResponse)
	err := c.cc.Invoke(ctx, DelegationProfileService_ListDelegationProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelegationProfileServiceServer is the server API for DelegationProfileService service.
// All implementations must embed UnimplementedDelegationProfileServiceServer
// for forward compatibility.
//
// DelegationProfileService manages DelegationProfile resources.
type DelegationProfileServiceServer interface {
	// CreateDelegationProfile creates a delegation profile.
	CreateDelegationProfile(context.Context, *CreateDelegationProfileRequest) (*DelegationProfile, error)
	// UpsertDelegationProfile creates or updates a delegation profile.
	//
	// You should prefer to call CreateDelegationProfile or UpdateDelegationProfile instead.
	UpsertDelegationProfile(context.Context, *UpsertDelegationProfileRequest) (*DelegationProfile, error)
	// UpdateDelegationProfile updates an existing delegation profile. It will
	// refuse to update a delegation profile if one does not already exist with
	// the same name.
	//
	// ConditionalUpdate semantics are applied, e.g, the update will only succeed
	// if the revision of the provided DelegationProfile matches the revision of
	// the existing DelegationProfile.
	UpdateDelegationProfile(context.Context, *UpdateDelegationProfileRequest) (*DelegationProfile, error)
	// GetDelegationProfile gets a delegation profile by name.
	GetDelegationProfile(context.Context, *GetDelegationProfileRequest) (*DelegationProfile, error)
	// DeleteDelegationProfile deletes a delegation profile by name.
	DeleteDelegationProfile(context.Context, *DeleteDelegationProfileRequest) (*emptypb.Empty, error)
	// ListDelegationProfiles returns a list of delegation profiles, pagination
	// semantics are applied.
	ListDelegationProfiles(context.Context, *ListDelegationProfilesRequest) (*ListDelegationProfilesResponse, error)
	mustEmbedUnimplementedDelegationProfileServiceServer()
}

// UnimplementedDelegationProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDelegationProfileServiceServer struct{}

func (UnimplementedDelegationProfileServiceServer) CreateDelegationProfile(context.Context, *CreateDelegationProfileRequest) (*DelegationProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelegationProfile not implemented")
}
func (UnimplementedDelegationProfileServiceServer) UpsertDelegationProfile(context.Context, *UpsertDelegationProfileRequest) (*DelegationProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDelegationProfile not implemented")
}
func (UnimplementedDelegationProfileServiceServer) UpdateDelegationProfile(context.Context, *UpdateDelegationProfileRequest) (*DelegationProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDelegationProfile not implemented")
}
func (UnimplementedDelegationProfileServiceServer) GetDelegationProfile(context.Context, *GetDelegationProfileRequest) (*DelegationProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegationProfile not implemented")
}
func (UnimplementedDelegationProfileServiceServer) DeleteDelegationProfile(context.Context, *DeleteDelegationProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDelegationProfile not implemented")
}
func (UnimplementedDelegationProfileServiceServer) ListDelegationProfiles(context.Context, *ListDelegationProfilesRequest) (*ListDelegationProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDelegationProfiles not implemented")
}
func (UnimplementedDelegationProfileServiceServer) mustEmbedUnimplementedDelegationProfileServiceServer() {
}
func (UnimplementedDelegationProfileServiceServer) testEmbeddedByValue() {}

// UnsafeDelegationProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DelegationProfileServiceServer will
// result in compilation errors.
type UnsafeDelegationProfileServiceServer interface {
	mustEmbedUnimplementedDelegationProfileServiceServer()
}

func RegisterDelegationProfileServiceServer(s grpc.ServiceRegistrar, srv DelegationProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedDelegationProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DelegationProfileService_ServiceDesc, srv)
}

func _DelegationProfileService_CreateDelegationProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDelegationProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegationProfileServiceServer).CreateDelegationProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DelegationProfileService_CreateDelegationProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegationProfileServiceServer).CreateDelegationProfile(ctx, req.(*CreateDelegationProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelegationProfileService_UpsertDelegationProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDelegationProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegationProfileServiceServer).UpsertDelegationProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DelegationProfileService_UpsertDelegationProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegationProfileServiceServer).UpsertDelegationProfile(ctx, req.(*UpsertDelegationProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelegationProfileService_UpdateDelegationProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDelegationProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegationProfileServiceServer).UpdateDelegationProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DelegationProfileService_UpdateDelegationProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegationProfileServiceServer).UpdateDelegationProfile(ctx, req.(*UpdateDelegationProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelegationProfileService_GetDelegationProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegationProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegationProfileServiceServer).GetDelegationProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DelegationProfileService_GetDelegationProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegationProfileServiceServer).GetDelegationProfile(ctx, req.(*GetDelegationProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelegationProfileService_DeleteDelegationProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDelegationProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegationProfileServiceServer).DeleteDelegationProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DelegationProfileService_DeleteDelegationProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegationProfileServiceServer).DeleteDelegationProfile(ctx, req.(*DeleteDelegationProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelegationProfileService_ListDelegationProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDelegationProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegationProfileServiceServer).ListDelegationProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DelegationProfileService_ListDelegationProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegationProfileServiceServer).ListDelegationProfiles(ctx, req.(*ListDelegationProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DelegationProfileService_ServiceDesc is the grpc.ServiceDesc for DelegationProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DelegationProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.delegation.v1.DelegationProfileService",
	HandlerType: (*DelegationProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDelegationProfile",
			Handler:    _DelegationProfileService_CreateDelegationProfile_Handler,
		},
		{
			MethodName: "UpsertDelegationProfile",
			Handler:    _DelegationProfileService_UpsertDelegationProfile_Handler,
		},
		{
			MethodName: "UpdateDelegationProfile",
			Handler:    _DelegationProfileService_UpdateDelegationProfile_Handler,
		},
		{
			MethodName: "GetDelegationProfile",
			Handler:    _DelegationProfileService_GetDelegationProfile_Handler,
		},
		{
			MethodName: "DeleteDelegationProfile",
			Handler:    _DelegationProfileService_DeleteDelegationProfile_Handler,
		},
		{
			MethodName: "ListDelegationProfiles",
			Handler:    _DelegationProfileService_ListDelegationProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/delegation/v1/delegation_profile_service.proto",
}
