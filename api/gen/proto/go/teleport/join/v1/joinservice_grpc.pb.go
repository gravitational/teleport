// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/join/v1/joinservice.proto

package joinv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JoinService_Join_FullMethodName = "/teleport.join.v1.JoinService/Join"
)

// JoinServiceClient is the client API for JoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JoinService provides methods which allow Teleport nodes, proxies, and other
// services to "join" the Teleport cluster by completing a supported join flow
// in order to receive signed certificates issued by the cluster.
//
// It may be used in multiple cases:
//   - Teleport agents joining the cluster on their first start to receive their
//     initial certificates. These requests do not use mTLS and the client
//     authenticates itself using only the join flow and is assigned a new host
//     ID.
//   - Teleport agents that need certificates authenticated for an additional
//     system role allowed by a new provision token. These requests must be
//     authenticated with mTLS using their existing certificates so that the
//     existing host ID can be maintained.
//   - MachineID bots fetching their initial certificates.
//   - MachineID bots refreshing their certificates.
//
// It is implemented on both the Auth and Proxy servers to serve the needs of
//   - clients connecting to the proxy address for their initial join when they are
//     unauthenticated and unable to directly dial the auth service.
//   - clients connecting to the auth address for their initial join.
//   - clients refreshing existing certificates that are able to make an
//     authenticates dial to the auth service via proxy TLS routing.
type JoinServiceClient interface {
	// Join is a bidirectional streaming RPC that implements all join methods.
	// The client does not need to know the join method ahead of time, all it
	// needs is the token name.
	//
	// The client must send an ClientInit message on the JoinRequest stream to
	// initiate the join flow.
	//
	// The server will reply with a ServerInit message, and subsequent messages
	// on the stream will depend on the join method.
	Join(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[JoinRequest, JoinResponse], error)
}

type joinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinServiceClient(cc grpc.ClientConnInterface) JoinServiceClient {
	return &joinServiceClient{cc}
}

func (c *joinServiceClient) Join(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[JoinRequest, JoinResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[0], JoinService_Join_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinRequest, JoinResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_JoinClient = grpc.BidiStreamingClient[JoinRequest, JoinResponse]

// JoinServiceServer is the server API for JoinService service.
// All implementations must embed UnimplementedJoinServiceServer
// for forward compatibility.
//
// JoinService provides methods which allow Teleport nodes, proxies, and other
// services to "join" the Teleport cluster by completing a supported join flow
// in order to receive signed certificates issued by the cluster.
//
// It may be used in multiple cases:
//   - Teleport agents joining the cluster on their first start to receive their
//     initial certificates. These requests do not use mTLS and the client
//     authenticates itself using only the join flow and is assigned a new host
//     ID.
//   - Teleport agents that need certificates authenticated for an additional
//     system role allowed by a new provision token. These requests must be
//     authenticated with mTLS using their existing certificates so that the
//     existing host ID can be maintained.
//   - MachineID bots fetching their initial certificates.
//   - MachineID bots refreshing their certificates.
//
// It is implemented on both the Auth and Proxy servers to serve the needs of
//   - clients connecting to the proxy address for their initial join when they are
//     unauthenticated and unable to directly dial the auth service.
//   - clients connecting to the auth address for their initial join.
//   - clients refreshing existing certificates that are able to make an
//     authenticates dial to the auth service via proxy TLS routing.
type JoinServiceServer interface {
	// Join is a bidirectional streaming RPC that implements all join methods.
	// The client does not need to know the join method ahead of time, all it
	// needs is the token name.
	//
	// The client must send an ClientInit message on the JoinRequest stream to
	// initiate the join flow.
	//
	// The server will reply with a ServerInit message, and subsequent messages
	// on the stream will depend on the join method.
	Join(grpc.BidiStreamingServer[JoinRequest, JoinResponse]) error
	mustEmbedUnimplementedJoinServiceServer()
}

// UnimplementedJoinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJoinServiceServer struct{}

func (UnimplementedJoinServiceServer) Join(grpc.BidiStreamingServer[JoinRequest, JoinResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedJoinServiceServer) mustEmbedUnimplementedJoinServiceServer() {}
func (UnimplementedJoinServiceServer) testEmbeddedByValue()                     {}

// UnsafeJoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServiceServer will
// result in compilation errors.
type UnsafeJoinServiceServer interface {
	mustEmbedUnimplementedJoinServiceServer()
}

func RegisterJoinServiceServer(s grpc.ServiceRegistrar, srv JoinServiceServer) {
	// If the following call pancis, it indicates UnimplementedJoinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JoinService_ServiceDesc, srv)
}

func _JoinService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).Join(&grpc.GenericServerStream[JoinRequest, JoinResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_JoinServer = grpc.BidiStreamingServer[JoinRequest, JoinResponse]

// JoinService_ServiceDesc is the grpc.ServiceDesc for JoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.join.v1.JoinService",
	HandlerType: (*JoinServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _JoinService_Join_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/join/v1/joinservice.proto",
}
