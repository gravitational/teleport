// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: teleport/join/v1/joinservice.proto

package joinv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClientInit is the first message sent from the client during the join process, it
// holds parameters common to all join methods.
type ClientInit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// JoinMethod is the name of the join method that the client is configured to use.
	// This parameter is optional, the client can leave it empty to allow the
	// server to determine the join method based on the provision token named by
	// TokenName, it will be sent to the client in the ServerInit message.
	JoinMethod *string `protobuf:"bytes,1,opt,name=join_method,json=joinMethod,proto3,oneof" json:"join_method,omitempty"`
	// TokenName is the name of the join token.
	// This is a secret if using the token join method, otherwise it is a
	// non-secret name of a provision token resource.
	TokenName string `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	// SystemRole is the system role requested, e.g. Proxy, Node, Instance, Bot.
	SystemRole string `protobuf:"bytes,3,opt,name=system_role,json=systemRole,proto3" json:"system_role,omitempty"`
	// ForwardedByProxy will be set to true when the message is forwarded by the
	// Proxy service. When this is set the Auth service must ignore any
	// any credentials authenticating the request, except for the purpose of
	// accepting ProxySuppliedParams.
	ForwardedByProxy        bool                            `protobuf:"varint,4,opt,name=forwarded_by_proxy,json=forwardedByProxy,proto3" json:"forwarded_by_proxy,omitempty"`
	ProxySuppliedParameters *ClientInit_ProxySuppliedParams `protobuf:"bytes,5,opt,name=proxy_supplied_parameters,json=proxySuppliedParameters,proto3,oneof" json:"proxy_supplied_parameters,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ClientInit) Reset() {
	*x = ClientInit{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInit) ProtoMessage() {}

func (x *ClientInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInit.ProtoReflect.Descriptor instead.
func (*ClientInit) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{0}
}

func (x *ClientInit) GetJoinMethod() string {
	if x != nil && x.JoinMethod != nil {
		return *x.JoinMethod
	}
	return ""
}

func (x *ClientInit) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *ClientInit) GetSystemRole() string {
	if x != nil {
		return x.SystemRole
	}
	return ""
}

func (x *ClientInit) GetForwardedByProxy() bool {
	if x != nil {
		return x.ForwardedByProxy
	}
	return false
}

func (x *ClientInit) GetProxySuppliedParameters() *ClientInit_ProxySuppliedParams {
	if x != nil {
		return x.ProxySuppliedParameters
	}
	return nil
}

// PublicKeys holds public keys sent by the client requested subject keys for
// issued certificates.
type PublicKeys struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PublicTlsKey is the public key requested for the subject of the x509 certificate.
	// It must be encoded in PKIX, ASN.1 DER form.
	PublicTlsKey []byte `protobuf:"bytes,1,opt,name=public_tls_key,json=publicTlsKey,proto3" json:"public_tls_key,omitempty"`
	// PublicSshKey is the public key requested for the subject of the SSH certificate.
	// It must be encoded in SSH wire format.
	PublicSshKey  []byte `protobuf:"bytes,2,opt,name=public_ssh_key,json=publicSshKey,proto3" json:"public_ssh_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKeys) Reset() {
	*x = PublicKeys{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeys) ProtoMessage() {}

func (x *PublicKeys) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeys.ProtoReflect.Descriptor instead.
func (*PublicKeys) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{1}
}

func (x *PublicKeys) GetPublicTlsKey() []byte {
	if x != nil {
		return x.PublicTlsKey
	}
	return nil
}

func (x *PublicKeys) GetPublicSshKey() []byte {
	if x != nil {
		return x.PublicSshKey
	}
	return nil
}

// HostParams holds parameters required for host joining.
type HostParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PublicKeys holds the host public keys.
	PublicKeys *PublicKeys `protobuf:"bytes,1,opt,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// HostName is the user-friendly node name for the host. This comes from
	// teleport.nodename in the service configuration and defaults to the
	// hostname. It is encoded as a valid principal in issued certificates.
	HostName string `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// AdditionalPrincipals is a list of additional principals requested.
	AdditionalPrincipals []string `protobuf:"bytes,3,rep,name=additional_principals,json=additionalPrincipals,proto3" json:"additional_principals,omitempty"`
	// DnsNames is a list of DNS names requested for inclusion in the x509 certificate.
	DnsNames      []string `protobuf:"bytes,4,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostParams) Reset() {
	*x = HostParams{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostParams) ProtoMessage() {}

func (x *HostParams) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostParams.ProtoReflect.Descriptor instead.
func (*HostParams) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{2}
}

func (x *HostParams) GetPublicKeys() *PublicKeys {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *HostParams) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostParams) GetAdditionalPrincipals() []string {
	if x != nil {
		return x.AdditionalPrincipals
	}
	return nil
}

func (x *HostParams) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

// BotParams holds parameters required for bot joining.
type BotParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PublicKeys holds the bot public keys.
	PublicKeys *PublicKeys `protobuf:"bytes,1,opt,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// Expires is a desired time of the expiry of the returned certificates.
	Expires       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires,proto3,oneof" json:"expires,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BotParams) Reset() {
	*x = BotParams{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotParams) ProtoMessage() {}

func (x *BotParams) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotParams.ProtoReflect.Descriptor instead.
func (*BotParams) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{3}
}

func (x *BotParams) GetPublicKeys() *PublicKeys {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *BotParams) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

// ClientParams holds either host or bot join parameters.
type ClientParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ClientParams_HostParams
	//	*ClientParams_BotParams
	Payload       isClientParams_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientParams) Reset() {
	*x = ClientParams{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientParams) ProtoMessage() {}

func (x *ClientParams) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientParams.ProtoReflect.Descriptor instead.
func (*ClientParams) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{4}
}

func (x *ClientParams) GetPayload() isClientParams_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ClientParams) GetHostParams() *HostParams {
	if x != nil {
		if x, ok := x.Payload.(*ClientParams_HostParams); ok {
			return x.HostParams
		}
	}
	return nil
}

func (x *ClientParams) GetBotParams() *BotParams {
	if x != nil {
		if x, ok := x.Payload.(*ClientParams_BotParams); ok {
			return x.BotParams
		}
	}
	return nil
}

type isClientParams_Payload interface {
	isClientParams_Payload()
}

type ClientParams_HostParams struct {
	HostParams *HostParams `protobuf:"bytes,1,opt,name=host_params,json=hostParams,proto3,oneof"`
}

type ClientParams_BotParams struct {
	BotParams *BotParams `protobuf:"bytes,2,opt,name=bot_params,json=botParams,proto3,oneof"`
}

func (*ClientParams_HostParams) isClientParams_Payload() {}

func (*ClientParams_BotParams) isClientParams_Payload() {}

// TokenInit is sent by the client in response to the ServerInit message for
// the Token join method.
//
// The Token method join flow is:
// 1. client->server: ClientInit
// 2. server->client: ServerInit
// 3. client->server: TokenInit
// 4. server->client: Result
type TokenInit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientParams holds parameters for the specific type of client trying to join.
	ClientParams  *ClientParams `protobuf:"bytes,1,opt,name=client_params,json=clientParams,proto3" json:"client_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenInit) Reset() {
	*x = TokenInit{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInit) ProtoMessage() {}

func (x *TokenInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInit.ProtoReflect.Descriptor instead.
func (*TokenInit) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{5}
}

func (x *TokenInit) GetClientParams() *ClientParams {
	if x != nil {
		return x.ClientParams
	}
	return nil
}

// BoundKeypairInit is sent from the client in response to the ServerInit
// message for the bound keypair join method.
// The server is expected to respond with a BoundKeypairChallenge.
//
// The bound keypair method join flow is:
//  1. client->server: ClientInit
//  2. server->client: ServerInit
//  3. client->server: BoundKeypairInit
//  4. server->client: BoundKeypairChallenge
//  5. client->server: BoundKeypairChallengeSolution
//     (optional additional steps if keypair rotation is required)
//     server->client: BoundKeypairRotationRequest
//     client->server: BoundKeypairRotationResponse
//     server->client: BoundKeypairChallenge
//     client->server: BoundKeypairChallengeSolution
//  6. server->client: Result containing BoundKeypairResult
type BoundKeypairInit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientParams holds parameters for the specific type of client trying to join.
	ClientParams *ClientParams `protobuf:"bytes,1,opt,name=client_params,json=clientParams,proto3" json:"client_params,omitempty"`
	// If set, attempts to bind a new keypair using an initial join secret.
	// Any value set here will be ignored if a keypair is already bound.
	InitialJoinSecret string `protobuf:"bytes,2,opt,name=initial_join_secret,json=initialJoinSecret,proto3" json:"initial_join_secret,omitempty"`
	// A document signed by Auth containing join state parameters from the
	// previous join attempt. Not required on initial join; required on all
	// subsequent joins.
	PreviousJoinState []byte `protobuf:"bytes,3,opt,name=previous_join_state,json=previousJoinState,proto3" json:"previous_join_state,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BoundKeypairInit) Reset() {
	*x = BoundKeypairInit{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundKeypairInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundKeypairInit) ProtoMessage() {}

func (x *BoundKeypairInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundKeypairInit.ProtoReflect.Descriptor instead.
func (*BoundKeypairInit) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{6}
}

func (x *BoundKeypairInit) GetClientParams() *ClientParams {
	if x != nil {
		return x.ClientParams
	}
	return nil
}

func (x *BoundKeypairInit) GetInitialJoinSecret() string {
	if x != nil {
		return x.InitialJoinSecret
	}
	return ""
}

func (x *BoundKeypairInit) GetPreviousJoinState() []byte {
	if x != nil {
		return x.PreviousJoinState
	}
	return nil
}

// BoundKeypairChallenge is a challenge issued by the server that joining
// clients are expected to complete.
// The client is expected to respond with a BoundKeypairChallengeSolution.
type BoundKeypairChallenge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The desired public key corresponding to the private key that should be used
	// to sign this challenge, in SSH authorized keys format.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// A challenge to sign with the requested public key. During keypair rotation,
	// a second challenge will be provided to verify the new keypair before certs
	// are returned.
	Challenge     string `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoundKeypairChallenge) Reset() {
	*x = BoundKeypairChallenge{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundKeypairChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundKeypairChallenge) ProtoMessage() {}

func (x *BoundKeypairChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundKeypairChallenge.ProtoReflect.Descriptor instead.
func (*BoundKeypairChallenge) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{7}
}

func (x *BoundKeypairChallenge) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *BoundKeypairChallenge) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

// BoundKeypairChallengeSolution is sent from the client in response to the
// BoundKeypairChallenge.
// The server is expected to respond with either a Result or a
// BoundKeypairRotationRequest.
type BoundKeypairChallengeSolution struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A solution to a challenge from the server. This generated by signing the
	// challenge as a JWT using the keypair associated with the requested public
	// key.
	Solution      []byte `protobuf:"bytes,1,opt,name=solution,proto3" json:"solution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoundKeypairChallengeSolution) Reset() {
	*x = BoundKeypairChallengeSolution{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundKeypairChallengeSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundKeypairChallengeSolution) ProtoMessage() {}

func (x *BoundKeypairChallengeSolution) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundKeypairChallengeSolution.ProtoReflect.Descriptor instead.
func (*BoundKeypairChallengeSolution) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{8}
}

func (x *BoundKeypairChallengeSolution) GetSolution() []byte {
	if x != nil {
		return x.Solution
	}
	return nil
}

// BoundKeypairRotationRequest is sent by the server in response to a
// BoundKeypairChallenge when a keypair rotation is required. It acts like an
// additional challenge, the client is expected to respond with a
// BoundKeypairRotationResponse.
type BoundKeypairRotationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The signature algorithm suite in use by the cluster.
	SignatureAlgorithmSuite string `protobuf:"bytes,1,opt,name=signature_algorithm_suite,json=signatureAlgorithmSuite,proto3" json:"signature_algorithm_suite,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *BoundKeypairRotationRequest) Reset() {
	*x = BoundKeypairRotationRequest{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundKeypairRotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundKeypairRotationRequest) ProtoMessage() {}

func (x *BoundKeypairRotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundKeypairRotationRequest.ProtoReflect.Descriptor instead.
func (*BoundKeypairRotationRequest) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{9}
}

func (x *BoundKeypairRotationRequest) GetSignatureAlgorithmSuite() string {
	if x != nil {
		return x.SignatureAlgorithmSuite
	}
	return ""
}

// BoundKeypairRotationResponse is sent by the client in response to a
// BoundKeypairRotationRequest from the server.
// The server is expected to respond with an additional BoundKeypairChallenge
// for the new key.
type BoundKeypairRotationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The public key to be registered with auth. Clients should expect a
	// subsequent challenge against this public key to be sent. This is encoded in
	// SSH authorized keys format.
	PublicKey     []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoundKeypairRotationResponse) Reset() {
	*x = BoundKeypairRotationResponse{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundKeypairRotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundKeypairRotationResponse) ProtoMessage() {}

func (x *BoundKeypairRotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundKeypairRotationResponse.ProtoReflect.Descriptor instead.
func (*BoundKeypairRotationResponse) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{10}
}

func (x *BoundKeypairRotationResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// BoundKeypairResult holds additional result parameters relevant to the bound
// keypair join method.
type BoundKeypairResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A signed join state document to be provided on the next join attempt.
	JoinState []byte `protobuf:"bytes,2,opt,name=join_state,json=joinState,proto3" json:"join_state,omitempty"`
	// The public key registered with Auth at the end of the joining ceremony.
	// After a successful keypair rotation, this should reflect the newly
	// registered public key. This is encoded in SSH authorized keys format.
	PublicKey     []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoundKeypairResult) Reset() {
	*x = BoundKeypairResult{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundKeypairResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundKeypairResult) ProtoMessage() {}

func (x *BoundKeypairResult) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundKeypairResult.ProtoReflect.Descriptor instead.
func (*BoundKeypairResult) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{11}
}

func (x *BoundKeypairResult) GetJoinState() []byte {
	if x != nil {
		return x.JoinState
	}
	return nil
}

func (x *BoundKeypairResult) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// ChallengeSolution holds a solution to a challenge issued by the server.
type ChallengeSolution struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ChallengeSolution_BoundKeypairChallengeSolution
	//	*ChallengeSolution_BoundKeypairRotationResponse
	Payload       isChallengeSolution_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeSolution) Reset() {
	*x = ChallengeSolution{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSolution) ProtoMessage() {}

func (x *ChallengeSolution) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSolution.ProtoReflect.Descriptor instead.
func (*ChallengeSolution) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{12}
}

func (x *ChallengeSolution) GetPayload() isChallengeSolution_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ChallengeSolution) GetBoundKeypairChallengeSolution() *BoundKeypairChallengeSolution {
	if x != nil {
		if x, ok := x.Payload.(*ChallengeSolution_BoundKeypairChallengeSolution); ok {
			return x.BoundKeypairChallengeSolution
		}
	}
	return nil
}

func (x *ChallengeSolution) GetBoundKeypairRotationResponse() *BoundKeypairRotationResponse {
	if x != nil {
		if x, ok := x.Payload.(*ChallengeSolution_BoundKeypairRotationResponse); ok {
			return x.BoundKeypairRotationResponse
		}
	}
	return nil
}

type isChallengeSolution_Payload interface {
	isChallengeSolution_Payload()
}

type ChallengeSolution_BoundKeypairChallengeSolution struct {
	BoundKeypairChallengeSolution *BoundKeypairChallengeSolution `protobuf:"bytes,1,opt,name=bound_keypair_challenge_solution,json=boundKeypairChallengeSolution,proto3,oneof"`
}

type ChallengeSolution_BoundKeypairRotationResponse struct {
	BoundKeypairRotationResponse *BoundKeypairRotationResponse `protobuf:"bytes,2,opt,name=bound_keypair_rotation_response,json=boundKeypairRotationResponse,proto3,oneof"`
}

func (*ChallengeSolution_BoundKeypairChallengeSolution) isChallengeSolution_Payload() {}

func (*ChallengeSolution_BoundKeypairRotationResponse) isChallengeSolution_Payload() {}

// JoinRequest is the message type sent from the joining client to the server.
type JoinRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*JoinRequest_ClientInit
	//	*JoinRequest_TokenInit
	//	*JoinRequest_BoundKeypairInit
	//	*JoinRequest_Solution
	Payload       isJoinRequest_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{13}
}

func (x *JoinRequest) GetPayload() isJoinRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *JoinRequest) GetClientInit() *ClientInit {
	if x != nil {
		if x, ok := x.Payload.(*JoinRequest_ClientInit); ok {
			return x.ClientInit
		}
	}
	return nil
}

func (x *JoinRequest) GetTokenInit() *TokenInit {
	if x != nil {
		if x, ok := x.Payload.(*JoinRequest_TokenInit); ok {
			return x.TokenInit
		}
	}
	return nil
}

func (x *JoinRequest) GetBoundKeypairInit() *BoundKeypairInit {
	if x != nil {
		if x, ok := x.Payload.(*JoinRequest_BoundKeypairInit); ok {
			return x.BoundKeypairInit
		}
	}
	return nil
}

func (x *JoinRequest) GetSolution() *ChallengeSolution {
	if x != nil {
		if x, ok := x.Payload.(*JoinRequest_Solution); ok {
			return x.Solution
		}
	}
	return nil
}

type isJoinRequest_Payload interface {
	isJoinRequest_Payload()
}

type JoinRequest_ClientInit struct {
	ClientInit *ClientInit `protobuf:"bytes,1,opt,name=client_init,json=clientInit,proto3,oneof"`
}

type JoinRequest_TokenInit struct {
	TokenInit *TokenInit `protobuf:"bytes,2,opt,name=token_init,json=tokenInit,proto3,oneof"`
}

type JoinRequest_BoundKeypairInit struct {
	BoundKeypairInit *BoundKeypairInit `protobuf:"bytes,3,opt,name=bound_keypair_init,json=boundKeypairInit,proto3,oneof"`
}

type JoinRequest_Solution struct {
	Solution *ChallengeSolution `protobuf:"bytes,4,opt,name=solution,proto3,oneof"`
}

func (*JoinRequest_ClientInit) isJoinRequest_Payload() {}

func (*JoinRequest_TokenInit) isJoinRequest_Payload() {}

func (*JoinRequest_BoundKeypairInit) isJoinRequest_Payload() {}

func (*JoinRequest_Solution) isJoinRequest_Payload() {}

// ServerInit is the first message sent from the server in response to the
// ClientInit message.
type ServerInit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// JoinMethod is the name of the selected join method.
	JoinMethod string `protobuf:"bytes,1,opt,name=join_method,json=joinMethod,proto3" json:"join_method,omitempty"`
	// SignatureAlgorithmSuite is the name of the signature algorithm suite
	// currently configured for the cluster.
	SignatureAlgorithmSuite string `protobuf:"bytes,2,opt,name=signature_algorithm_suite,json=signatureAlgorithmSuite,proto3" json:"signature_algorithm_suite,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ServerInit) Reset() {
	*x = ServerInit{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInit) ProtoMessage() {}

func (x *ServerInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInit.ProtoReflect.Descriptor instead.
func (*ServerInit) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{14}
}

func (x *ServerInit) GetJoinMethod() string {
	if x != nil {
		return x.JoinMethod
	}
	return ""
}

func (x *ServerInit) GetSignatureAlgorithmSuite() string {
	if x != nil {
		return x.SignatureAlgorithmSuite
	}
	return ""
}

// Challenge is a challenge message sent from the server that the client must solve.
type Challenge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Challenge_BoundKeypairChallenge
	//	*Challenge_BoundKeypairRotationRequest
	Payload       isChallenge_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{15}
}

func (x *Challenge) GetPayload() isChallenge_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Challenge) GetBoundKeypairChallenge() *BoundKeypairChallenge {
	if x != nil {
		if x, ok := x.Payload.(*Challenge_BoundKeypairChallenge); ok {
			return x.BoundKeypairChallenge
		}
	}
	return nil
}

func (x *Challenge) GetBoundKeypairRotationRequest() *BoundKeypairRotationRequest {
	if x != nil {
		if x, ok := x.Payload.(*Challenge_BoundKeypairRotationRequest); ok {
			return x.BoundKeypairRotationRequest
		}
	}
	return nil
}

type isChallenge_Payload interface {
	isChallenge_Payload()
}

type Challenge_BoundKeypairChallenge struct {
	BoundKeypairChallenge *BoundKeypairChallenge `protobuf:"bytes,1,opt,name=bound_keypair_challenge,json=boundKeypairChallenge,proto3,oneof"`
}

type Challenge_BoundKeypairRotationRequest struct {
	BoundKeypairRotationRequest *BoundKeypairRotationRequest `protobuf:"bytes,2,opt,name=bound_keypair_rotation_request,json=boundKeypairRotationRequest,proto3,oneof"`
}

func (*Challenge_BoundKeypairChallenge) isChallenge_Payload() {}

func (*Challenge_BoundKeypairRotationRequest) isChallenge_Payload() {}

// Result is the final message sent from the cluster back to the client, it
// contains the result of the joining process including the assigned host ID
// and issued certificates.
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Result_HostResult
	//	*Result_BotResult
	Payload       isResult_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{16}
}

func (x *Result) GetPayload() isResult_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Result) GetHostResult() *HostResult {
	if x != nil {
		if x, ok := x.Payload.(*Result_HostResult); ok {
			return x.HostResult
		}
	}
	return nil
}

func (x *Result) GetBotResult() *BotResult {
	if x != nil {
		if x, ok := x.Payload.(*Result_BotResult); ok {
			return x.BotResult
		}
	}
	return nil
}

type isResult_Payload interface {
	isResult_Payload()
}

type Result_HostResult struct {
	HostResult *HostResult `protobuf:"bytes,1,opt,name=host_result,json=hostResult,proto3,oneof"`
}

type Result_BotResult struct {
	BotResult *BotResult `protobuf:"bytes,2,opt,name=bot_result,json=botResult,proto3,oneof"`
}

func (*Result_HostResult) isResult_Payload() {}

func (*Result_BotResult) isResult_Payload() {}

// Certificates holds issued certificates and cluster CAs.
type Certificates struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TlsCert is an X.509 certificate encoded in ASN.1 DER form.
	TlsCert []byte `protobuf:"bytes,1,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	// TlsCaCerts is a list of TLS certificate authorities that the client should trust.
	// Each certificate is encoding in ASN.1 DER form.
	TlsCaCerts [][]byte `protobuf:"bytes,2,rep,name=tls_ca_certs,json=tlsCaCerts,proto3" json:"tls_ca_certs,omitempty"`
	// SshCert is an SSH certificate encoded in SSH wire format.
	SshCert []byte `protobuf:"bytes,3,opt,name=ssh_cert,json=sshCert,proto3" json:"ssh_cert,omitempty"`
	// SshCaKey is a list of SSH certificate authority public keys that the client should trust.
	// Each CA key is encoded in SSH wire format.
	SshCaKeys     [][]byte `protobuf:"bytes,4,rep,name=ssh_ca_keys,json=sshCaKeys,proto3" json:"ssh_ca_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificates) Reset() {
	*x = Certificates{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificates) ProtoMessage() {}

func (x *Certificates) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificates.ProtoReflect.Descriptor instead.
func (*Certificates) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{17}
}

func (x *Certificates) GetTlsCert() []byte {
	if x != nil {
		return x.TlsCert
	}
	return nil
}

func (x *Certificates) GetTlsCaCerts() [][]byte {
	if x != nil {
		return x.TlsCaCerts
	}
	return nil
}

func (x *Certificates) GetSshCert() []byte {
	if x != nil {
		return x.SshCert
	}
	return nil
}

func (x *Certificates) GetSshCaKeys() [][]byte {
	if x != nil {
		return x.SshCaKeys
	}
	return nil
}

// HostResult holds results for host joining.
type HostResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Certificates holds issued certificates and cluster CAs.
	Certificates *Certificates `protobuf:"bytes,1,opt,name=certificates,proto3" json:"certificates,omitempty"`
	// HostId is the unique ID assigned to the host.
	HostId        string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostResult) Reset() {
	*x = HostResult{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostResult) ProtoMessage() {}

func (x *HostResult) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostResult.ProtoReflect.Descriptor instead.
func (*HostResult) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{18}
}

func (x *HostResult) GetCertificates() *Certificates {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *HostResult) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

// HostResult holds results for bot joining.
type BotResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Certificates holds issued certificates and cluster CAs.
	Certificates *Certificates `protobuf:"bytes,1,opt,name=certificates,proto3" json:"certificates,omitempty"`
	// BoundKeypairResult holds extra result parameters relevant to the bound keypair join method.
	BoundKeypairResult *BoundKeypairResult `protobuf:"bytes,2,opt,name=bound_keypair_result,json=boundKeypairResult,proto3,oneof" json:"bound_keypair_result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BotResult) Reset() {
	*x = BotResult{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotResult) ProtoMessage() {}

func (x *BotResult) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotResult.ProtoReflect.Descriptor instead.
func (*BotResult) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{19}
}

func (x *BotResult) GetCertificates() *Certificates {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *BotResult) GetBoundKeypairResult() *BoundKeypairResult {
	if x != nil {
		return x.BoundKeypairResult
	}
	return nil
}

// JoinResponse is the message type sent from the server to the joining client.
type JoinResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*JoinResponse_Init
	//	*JoinResponse_Challenge
	//	*JoinResponse_Result
	Payload       isJoinResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{20}
}

func (x *JoinResponse) GetPayload() isJoinResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *JoinResponse) GetInit() *ServerInit {
	if x != nil {
		if x, ok := x.Payload.(*JoinResponse_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *JoinResponse) GetChallenge() *Challenge {
	if x != nil {
		if x, ok := x.Payload.(*JoinResponse_Challenge); ok {
			return x.Challenge
		}
	}
	return nil
}

func (x *JoinResponse) GetResult() *Result {
	if x != nil {
		if x, ok := x.Payload.(*JoinResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

type isJoinResponse_Payload interface {
	isJoinResponse_Payload()
}

type JoinResponse_Init struct {
	// Init is the initial message sent from the server in response to the
	// ClientInit message. It specifies the join method used by the provision token.
	Init *ServerInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type JoinResponse_Challenge struct {
	// Challenge is a challenge issued by the server that the client must solve
	// in order to complete the join flow. The challenge type depends on the join method.
	// Each method may issue zero or more challenges that the client must solve.
	Challenge *Challenge `protobuf:"bytes,2,opt,name=challenge,proto3,oneof"`
}

type JoinResponse_Result struct {
	// Result is the result of the join flow, it is the final message sent from
	// the cluster when the join flow is successful.
	// For the token join method, it is sent immediately in response to the ClientInit request.
	Result *Result `protobuf:"bytes,3,opt,name=result,proto3,oneof"`
}

func (*JoinResponse_Init) isJoinResponse_Payload() {}

func (*JoinResponse_Challenge) isJoinResponse_Payload() {}

func (*JoinResponse_Result) isJoinResponse_Payload() {}

// ProxySuppliedParams holds parameters set by the Proxy when nodes join
// via the proxy address. They must only be trusted if the incoming join
// request is authenticated as the Proxy.
type ClientInit_ProxySuppliedParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RemoteAddr is the remote address of the host requesting a host certificate.
	// It replaces 0.0.0.0 in the list of additional principals.
	RemoteAddr string `protobuf:"bytes,1,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	// ClientVersion is the Teleport version of the client attempting to join.
	ClientVersion string `protobuf:"bytes,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientInit_ProxySuppliedParams) Reset() {
	*x = ClientInit_ProxySuppliedParams{}
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInit_ProxySuppliedParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInit_ProxySuppliedParams) ProtoMessage() {}

func (x *ClientInit_ProxySuppliedParams) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_join_v1_joinservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInit_ProxySuppliedParams.ProtoReflect.Descriptor instead.
func (*ClientInit_ProxySuppliedParams) Descriptor() ([]byte, []int) {
	return file_teleport_join_v1_joinservice_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClientInit_ProxySuppliedParams) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *ClientInit_ProxySuppliedParams) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

var File_teleport_join_v1_joinservice_proto protoreflect.FileDescriptor

const file_teleport_join_v1_joinservice_proto_rawDesc = "" +
	"\n" +
	"\"teleport/join/v1/joinservice.proto\x12\x10teleport.join.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa0\x03\n" +
	"\n" +
	"ClientInit\x12$\n" +
	"\vjoin_method\x18\x01 \x01(\tH\x00R\n" +
	"joinMethod\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"token_name\x18\x02 \x01(\tR\ttokenName\x12\x1f\n" +
	"\vsystem_role\x18\x03 \x01(\tR\n" +
	"systemRole\x12,\n" +
	"\x12forwarded_by_proxy\x18\x04 \x01(\bR\x10forwardedByProxy\x12q\n" +
	"\x19proxy_supplied_parameters\x18\x05 \x01(\v20.teleport.join.v1.ClientInit.ProxySuppliedParamsH\x01R\x17proxySuppliedParameters\x88\x01\x01\x1a]\n" +
	"\x13ProxySuppliedParams\x12\x1f\n" +
	"\vremote_addr\x18\x01 \x01(\tR\n" +
	"remoteAddr\x12%\n" +
	"\x0eclient_version\x18\x02 \x01(\tR\rclientVersionB\x0e\n" +
	"\f_join_methodB\x1c\n" +
	"\x1a_proxy_supplied_parameters\"X\n" +
	"\n" +
	"PublicKeys\x12$\n" +
	"\x0epublic_tls_key\x18\x01 \x01(\fR\fpublicTlsKey\x12$\n" +
	"\x0epublic_ssh_key\x18\x02 \x01(\fR\fpublicSshKey\"\xba\x01\n" +
	"\n" +
	"HostParams\x12=\n" +
	"\vpublic_keys\x18\x01 \x01(\v2\x1c.teleport.join.v1.PublicKeysR\n" +
	"publicKeys\x12\x1b\n" +
	"\thost_name\x18\x02 \x01(\tR\bhostName\x123\n" +
	"\x15additional_principals\x18\x03 \x03(\tR\x14additionalPrincipals\x12\x1b\n" +
	"\tdns_names\x18\x04 \x03(\tR\bdnsNames\"\x91\x01\n" +
	"\tBotParams\x12=\n" +
	"\vpublic_keys\x18\x01 \x01(\v2\x1c.teleport.join.v1.PublicKeysR\n" +
	"publicKeys\x129\n" +
	"\aexpires\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\aexpires\x88\x01\x01B\n" +
	"\n" +
	"\b_expires\"\x98\x01\n" +
	"\fClientParams\x12?\n" +
	"\vhost_params\x18\x01 \x01(\v2\x1c.teleport.join.v1.HostParamsH\x00R\n" +
	"hostParams\x12<\n" +
	"\n" +
	"bot_params\x18\x02 \x01(\v2\x1b.teleport.join.v1.BotParamsH\x00R\tbotParamsB\t\n" +
	"\apayload\"P\n" +
	"\tTokenInit\x12C\n" +
	"\rclient_params\x18\x01 \x01(\v2\x1e.teleport.join.v1.ClientParamsR\fclientParams\"\xb7\x01\n" +
	"\x10BoundKeypairInit\x12C\n" +
	"\rclient_params\x18\x01 \x01(\v2\x1e.teleport.join.v1.ClientParamsR\fclientParams\x12.\n" +
	"\x13initial_join_secret\x18\x02 \x01(\tR\x11initialJoinSecret\x12.\n" +
	"\x13previous_join_state\x18\x03 \x01(\fR\x11previousJoinState\"T\n" +
	"\x15BoundKeypairChallenge\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tchallenge\x18\x02 \x01(\tR\tchallenge\";\n" +
	"\x1dBoundKeypairChallengeSolution\x12\x1a\n" +
	"\bsolution\x18\x01 \x01(\fR\bsolution\"Y\n" +
	"\x1bBoundKeypairRotationRequest\x12:\n" +
	"\x19signature_algorithm_suite\x18\x01 \x01(\tR\x17signatureAlgorithmSuite\"=\n" +
	"\x1cBoundKeypairRotationResponse\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\"R\n" +
	"\x12BoundKeypairResult\x12\x1d\n" +
	"\n" +
	"join_state\x18\x02 \x01(\fR\tjoinState\x12\x1d\n" +
	"\n" +
	"public_key\x18\x03 \x01(\fR\tpublicKey\"\x93\x02\n" +
	"\x11ChallengeSolution\x12z\n" +
	" bound_keypair_challenge_solution\x18\x01 \x01(\v2/.teleport.join.v1.BoundKeypairChallengeSolutionH\x00R\x1dboundKeypairChallengeSolution\x12w\n" +
	"\x1fbound_keypair_rotation_response\x18\x02 \x01(\v2..teleport.join.v1.BoundKeypairRotationResponseH\x00R\x1cboundKeypairRotationResponseB\t\n" +
	"\apayload\"\xae\x02\n" +
	"\vJoinRequest\x12?\n" +
	"\vclient_init\x18\x01 \x01(\v2\x1c.teleport.join.v1.ClientInitH\x00R\n" +
	"clientInit\x12<\n" +
	"\n" +
	"token_init\x18\x02 \x01(\v2\x1b.teleport.join.v1.TokenInitH\x00R\ttokenInit\x12R\n" +
	"\x12bound_keypair_init\x18\x03 \x01(\v2\".teleport.join.v1.BoundKeypairInitH\x00R\x10boundKeypairInit\x12A\n" +
	"\bsolution\x18\x04 \x01(\v2#.teleport.join.v1.ChallengeSolutionH\x00R\bsolutionB\t\n" +
	"\apayload\"i\n" +
	"\n" +
	"ServerInit\x12\x1f\n" +
	"\vjoin_method\x18\x01 \x01(\tR\n" +
	"joinMethod\x12:\n" +
	"\x19signature_algorithm_suite\x18\x02 \x01(\tR\x17signatureAlgorithmSuite\"\xef\x01\n" +
	"\tChallenge\x12a\n" +
	"\x17bound_keypair_challenge\x18\x01 \x01(\v2'.teleport.join.v1.BoundKeypairChallengeH\x00R\x15boundKeypairChallenge\x12t\n" +
	"\x1ebound_keypair_rotation_request\x18\x02 \x01(\v2-.teleport.join.v1.BoundKeypairRotationRequestH\x00R\x1bboundKeypairRotationRequestB\t\n" +
	"\apayload\"\x92\x01\n" +
	"\x06Result\x12?\n" +
	"\vhost_result\x18\x01 \x01(\v2\x1c.teleport.join.v1.HostResultH\x00R\n" +
	"hostResult\x12<\n" +
	"\n" +
	"bot_result\x18\x02 \x01(\v2\x1b.teleport.join.v1.BotResultH\x00R\tbotResultB\t\n" +
	"\apayload\"\x86\x01\n" +
	"\fCertificates\x12\x19\n" +
	"\btls_cert\x18\x01 \x01(\fR\atlsCert\x12 \n" +
	"\ftls_ca_certs\x18\x02 \x03(\fR\n" +
	"tlsCaCerts\x12\x19\n" +
	"\bssh_cert\x18\x03 \x01(\fR\asshCert\x12\x1e\n" +
	"\vssh_ca_keys\x18\x04 \x03(\fR\tsshCaKeys\"i\n" +
	"\n" +
	"HostResult\x12B\n" +
	"\fcertificates\x18\x01 \x01(\v2\x1e.teleport.join.v1.CertificatesR\fcertificates\x12\x17\n" +
	"\ahost_id\x18\x02 \x01(\tR\x06hostId\"\xc5\x01\n" +
	"\tBotResult\x12B\n" +
	"\fcertificates\x18\x01 \x01(\v2\x1e.teleport.join.v1.CertificatesR\fcertificates\x12[\n" +
	"\x14bound_keypair_result\x18\x02 \x01(\v2$.teleport.join.v1.BoundKeypairResultH\x00R\x12boundKeypairResult\x88\x01\x01B\x17\n" +
	"\x15_bound_keypair_result\"\xbe\x01\n" +
	"\fJoinResponse\x122\n" +
	"\x04init\x18\x01 \x01(\v2\x1c.teleport.join.v1.ServerInitH\x00R\x04init\x12;\n" +
	"\tchallenge\x18\x02 \x01(\v2\x1b.teleport.join.v1.ChallengeH\x00R\tchallenge\x122\n" +
	"\x06result\x18\x03 \x01(\v2\x18.teleport.join.v1.ResultH\x00R\x06resultB\t\n" +
	"\apayload2X\n" +
	"\vJoinService\x12I\n" +
	"\x04Join\x12\x1d.teleport.join.v1.JoinRequest\x1a\x1e.teleport.join.v1.JoinResponse(\x010\x01BLZJgithub.com/gravitational/teleport/api/gen/proto/go/teleport/join/v1;joinv1b\x06proto3"

var (
	file_teleport_join_v1_joinservice_proto_rawDescOnce sync.Once
	file_teleport_join_v1_joinservice_proto_rawDescData []byte
)

func file_teleport_join_v1_joinservice_proto_rawDescGZIP() []byte {
	file_teleport_join_v1_joinservice_proto_rawDescOnce.Do(func() {
		file_teleport_join_v1_joinservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_join_v1_joinservice_proto_rawDesc), len(file_teleport_join_v1_joinservice_proto_rawDesc)))
	})
	return file_teleport_join_v1_joinservice_proto_rawDescData
}

var file_teleport_join_v1_joinservice_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_teleport_join_v1_joinservice_proto_goTypes = []any{
	(*ClientInit)(nil),                     // 0: teleport.join.v1.ClientInit
	(*PublicKeys)(nil),                     // 1: teleport.join.v1.PublicKeys
	(*HostParams)(nil),                     // 2: teleport.join.v1.HostParams
	(*BotParams)(nil),                      // 3: teleport.join.v1.BotParams
	(*ClientParams)(nil),                   // 4: teleport.join.v1.ClientParams
	(*TokenInit)(nil),                      // 5: teleport.join.v1.TokenInit
	(*BoundKeypairInit)(nil),               // 6: teleport.join.v1.BoundKeypairInit
	(*BoundKeypairChallenge)(nil),          // 7: teleport.join.v1.BoundKeypairChallenge
	(*BoundKeypairChallengeSolution)(nil),  // 8: teleport.join.v1.BoundKeypairChallengeSolution
	(*BoundKeypairRotationRequest)(nil),    // 9: teleport.join.v1.BoundKeypairRotationRequest
	(*BoundKeypairRotationResponse)(nil),   // 10: teleport.join.v1.BoundKeypairRotationResponse
	(*BoundKeypairResult)(nil),             // 11: teleport.join.v1.BoundKeypairResult
	(*ChallengeSolution)(nil),              // 12: teleport.join.v1.ChallengeSolution
	(*JoinRequest)(nil),                    // 13: teleport.join.v1.JoinRequest
	(*ServerInit)(nil),                     // 14: teleport.join.v1.ServerInit
	(*Challenge)(nil),                      // 15: teleport.join.v1.Challenge
	(*Result)(nil),                         // 16: teleport.join.v1.Result
	(*Certificates)(nil),                   // 17: teleport.join.v1.Certificates
	(*HostResult)(nil),                     // 18: teleport.join.v1.HostResult
	(*BotResult)(nil),                      // 19: teleport.join.v1.BotResult
	(*JoinResponse)(nil),                   // 20: teleport.join.v1.JoinResponse
	(*ClientInit_ProxySuppliedParams)(nil), // 21: teleport.join.v1.ClientInit.ProxySuppliedParams
	(*timestamppb.Timestamp)(nil),          // 22: google.protobuf.Timestamp
}
var file_teleport_join_v1_joinservice_proto_depIdxs = []int32{
	21, // 0: teleport.join.v1.ClientInit.proxy_supplied_parameters:type_name -> teleport.join.v1.ClientInit.ProxySuppliedParams
	1,  // 1: teleport.join.v1.HostParams.public_keys:type_name -> teleport.join.v1.PublicKeys
	1,  // 2: teleport.join.v1.BotParams.public_keys:type_name -> teleport.join.v1.PublicKeys
	22, // 3: teleport.join.v1.BotParams.expires:type_name -> google.protobuf.Timestamp
	2,  // 4: teleport.join.v1.ClientParams.host_params:type_name -> teleport.join.v1.HostParams
	3,  // 5: teleport.join.v1.ClientParams.bot_params:type_name -> teleport.join.v1.BotParams
	4,  // 6: teleport.join.v1.TokenInit.client_params:type_name -> teleport.join.v1.ClientParams
	4,  // 7: teleport.join.v1.BoundKeypairInit.client_params:type_name -> teleport.join.v1.ClientParams
	8,  // 8: teleport.join.v1.ChallengeSolution.bound_keypair_challenge_solution:type_name -> teleport.join.v1.BoundKeypairChallengeSolution
	10, // 9: teleport.join.v1.ChallengeSolution.bound_keypair_rotation_response:type_name -> teleport.join.v1.BoundKeypairRotationResponse
	0,  // 10: teleport.join.v1.JoinRequest.client_init:type_name -> teleport.join.v1.ClientInit
	5,  // 11: teleport.join.v1.JoinRequest.token_init:type_name -> teleport.join.v1.TokenInit
	6,  // 12: teleport.join.v1.JoinRequest.bound_keypair_init:type_name -> teleport.join.v1.BoundKeypairInit
	12, // 13: teleport.join.v1.JoinRequest.solution:type_name -> teleport.join.v1.ChallengeSolution
	7,  // 14: teleport.join.v1.Challenge.bound_keypair_challenge:type_name -> teleport.join.v1.BoundKeypairChallenge
	9,  // 15: teleport.join.v1.Challenge.bound_keypair_rotation_request:type_name -> teleport.join.v1.BoundKeypairRotationRequest
	18, // 16: teleport.join.v1.Result.host_result:type_name -> teleport.join.v1.HostResult
	19, // 17: teleport.join.v1.Result.bot_result:type_name -> teleport.join.v1.BotResult
	17, // 18: teleport.join.v1.HostResult.certificates:type_name -> teleport.join.v1.Certificates
	17, // 19: teleport.join.v1.BotResult.certificates:type_name -> teleport.join.v1.Certificates
	11, // 20: teleport.join.v1.BotResult.bound_keypair_result:type_name -> teleport.join.v1.BoundKeypairResult
	14, // 21: teleport.join.v1.JoinResponse.init:type_name -> teleport.join.v1.ServerInit
	15, // 22: teleport.join.v1.JoinResponse.challenge:type_name -> teleport.join.v1.Challenge
	16, // 23: teleport.join.v1.JoinResponse.result:type_name -> teleport.join.v1.Result
	13, // 24: teleport.join.v1.JoinService.Join:input_type -> teleport.join.v1.JoinRequest
	20, // 25: teleport.join.v1.JoinService.Join:output_type -> teleport.join.v1.JoinResponse
	25, // [25:26] is the sub-list for method output_type
	24, // [24:25] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_teleport_join_v1_joinservice_proto_init() }
func file_teleport_join_v1_joinservice_proto_init() {
	if File_teleport_join_v1_joinservice_proto != nil {
		return
	}
	file_teleport_join_v1_joinservice_proto_msgTypes[0].OneofWrappers = []any{}
	file_teleport_join_v1_joinservice_proto_msgTypes[3].OneofWrappers = []any{}
	file_teleport_join_v1_joinservice_proto_msgTypes[4].OneofWrappers = []any{
		(*ClientParams_HostParams)(nil),
		(*ClientParams_BotParams)(nil),
	}
	file_teleport_join_v1_joinservice_proto_msgTypes[12].OneofWrappers = []any{
		(*ChallengeSolution_BoundKeypairChallengeSolution)(nil),
		(*ChallengeSolution_BoundKeypairRotationResponse)(nil),
	}
	file_teleport_join_v1_joinservice_proto_msgTypes[13].OneofWrappers = []any{
		(*JoinRequest_ClientInit)(nil),
		(*JoinRequest_TokenInit)(nil),
		(*JoinRequest_BoundKeypairInit)(nil),
		(*JoinRequest_Solution)(nil),
	}
	file_teleport_join_v1_joinservice_proto_msgTypes[15].OneofWrappers = []any{
		(*Challenge_BoundKeypairChallenge)(nil),
		(*Challenge_BoundKeypairRotationRequest)(nil),
	}
	file_teleport_join_v1_joinservice_proto_msgTypes[16].OneofWrappers = []any{
		(*Result_HostResult)(nil),
		(*Result_BotResult)(nil),
	}
	file_teleport_join_v1_joinservice_proto_msgTypes[19].OneofWrappers = []any{}
	file_teleport_join_v1_joinservice_proto_msgTypes[20].OneofWrappers = []any{
		(*JoinResponse_Init)(nil),
		(*JoinResponse_Challenge)(nil),
		(*JoinResponse_Result)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_join_v1_joinservice_proto_rawDesc), len(file_teleport_join_v1_joinservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_join_v1_joinservice_proto_goTypes,
		DependencyIndexes: file_teleport_join_v1_joinservice_proto_depIdxs,
		MessageInfos:      file_teleport_join_v1_joinservice_proto_msgTypes,
	}.Build()
	File_teleport_join_v1_joinservice_proto = out.File
	file_teleport_join_v1_joinservice_proto_goTypes = nil
	file_teleport_join_v1_joinservice_proto_depIdxs = nil
}
