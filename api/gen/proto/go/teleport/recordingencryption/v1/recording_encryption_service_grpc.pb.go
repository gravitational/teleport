// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/recordingencryption/v1/recording_encryption_service.proto

package recordingencryptionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordingEncryptionService_CreateUpload_FullMethodName   = "/teleport.recordingencryption.v1.RecordingEncryptionService/CreateUpload"
	RecordingEncryptionService_UploadPart_FullMethodName     = "/teleport.recordingencryption.v1.RecordingEncryptionService/UploadPart"
	RecordingEncryptionService_CompleteUpload_FullMethodName = "/teleport.recordingencryption.v1.RecordingEncryptionService/CompleteUpload"
)

// RecordingEncryptionServiceClient is the client API for RecordingEncryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RecordingEncryption provides methods to manage cluster encryption configuration resources.
type RecordingEncryptionServiceClient interface {
	// CreateUpload begins a multipart upload for an encrypted recording. The
	// returned upload ID should be used while uploading parts.
	CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error)
	// UploadPart uploads a part to the given upload ID.
	UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error)
	// CompleteUploadRequest marks a multipart upload as complete.
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
}

type recordingEncryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingEncryptionServiceClient(cc grpc.ClientConnInterface) RecordingEncryptionServiceClient {
	return &recordingEncryptionServiceClient{cc}
}

func (c *recordingEncryptionServiceClient) CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadResponse)
	err := c.cc.Invoke(ctx, RecordingEncryptionService_CreateUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingEncryptionServiceClient) UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPartResponse)
	err := c.cc.Invoke(ctx, RecordingEncryptionService_UploadPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingEncryptionServiceClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, RecordingEncryptionService_CompleteUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordingEncryptionServiceServer is the server API for RecordingEncryptionService service.
// All implementations must embed UnimplementedRecordingEncryptionServiceServer
// for forward compatibility.
//
// RecordingEncryption provides methods to manage cluster encryption configuration resources.
type RecordingEncryptionServiceServer interface {
	// CreateUpload begins a multipart upload for an encrypted recording. The
	// returned upload ID should be used while uploading parts.
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error)
	// UploadPart uploads a part to the given upload ID.
	UploadPart(context.Context, *UploadPartRequest) (*UploadPartResponse, error)
	// CompleteUploadRequest marks a multipart upload as complete.
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	mustEmbedUnimplementedRecordingEncryptionServiceServer()
}

// UnimplementedRecordingEncryptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordingEncryptionServiceServer struct{}

func (UnimplementedRecordingEncryptionServiceServer) CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpload not implemented")
}
func (UnimplementedRecordingEncryptionServiceServer) UploadPart(context.Context, *UploadPartRequest) (*UploadPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedRecordingEncryptionServiceServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedRecordingEncryptionServiceServer) mustEmbedUnimplementedRecordingEncryptionServiceServer() {
}
func (UnimplementedRecordingEncryptionServiceServer) testEmbeddedByValue() {}

// UnsafeRecordingEncryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingEncryptionServiceServer will
// result in compilation errors.
type UnsafeRecordingEncryptionServiceServer interface {
	mustEmbedUnimplementedRecordingEncryptionServiceServer()
}

func RegisterRecordingEncryptionServiceServer(s grpc.ServiceRegistrar, srv RecordingEncryptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordingEncryptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordingEncryptionService_ServiceDesc, srv)
}

func _RecordingEncryptionService_CreateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingEncryptionServiceServer).CreateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordingEncryptionService_CreateUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingEncryptionServiceServer).CreateUpload(ctx, req.(*CreateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingEncryptionService_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingEncryptionServiceServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordingEncryptionService_UploadPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingEncryptionServiceServer).UploadPart(ctx, req.(*UploadPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingEncryptionService_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingEncryptionServiceServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordingEncryptionService_CompleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingEncryptionServiceServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordingEncryptionService_ServiceDesc is the grpc.ServiceDesc for RecordingEncryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingEncryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.recordingencryption.v1.RecordingEncryptionService",
	HandlerType: (*RecordingEncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUpload",
			Handler:    _RecordingEncryptionService_CreateUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _RecordingEncryptionService_UploadPart_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _RecordingEncryptionService_CompleteUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/recordingencryption/v1/recording_encryption_service.proto",
}
