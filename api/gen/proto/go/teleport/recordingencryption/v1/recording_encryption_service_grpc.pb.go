// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/recordingencryption/v1/recording_encryption_service.proto

package recordingencryptionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordingEncryptionService_RotateKeySet_FullMethodName             = "/teleport.recordingencryption.v1.RecordingEncryptionService/RotateKeySet"
	RecordingEncryptionService_GetRotationState_FullMethodName         = "/teleport.recordingencryption.v1.RecordingEncryptionService/GetRotationState"
	RecordingEncryptionService_CompleteRotation_FullMethodName         = "/teleport.recordingencryption.v1.RecordingEncryptionService/CompleteRotation"
	RecordingEncryptionService_UploadEncryptedRecording_FullMethodName = "/teleport.recordingencryption.v1.RecordingEncryptionService/UploadEncryptedRecording"
)

// RecordingEncryptionServiceClient is the client API for RecordingEncryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RecordingEncryption provides methods to manage cluster encryption
// configuration resources.
type RecordingEncryptionServiceClient interface {
	// RotateKeySets rotates the keys associated with the given keysets within
	// the encryption configuration.
	RotateKeySet(ctx context.Context, in *RotateKeySetRequest, opts ...grpc.CallOption) (*RotateKeySetResponse, error)
	// GetRotationState returns whether or not a key rotation is in progress.
	GetRotationState(ctx context.Context, in *GetRotationStateRequest, opts ...grpc.CallOption) (*GetRotationStateResponse, error)
	// CompleteRotation moves rotated keys out of the active set.
	CompleteRotation(ctx context.Context, in *CompleteRotationRequest, opts ...grpc.CallOption) (*CompleteRotationResponse, error)
	// UploadEncryptedRecording is used to upload encrypted .tar files
	// containing session recording events into long term storage.
	UploadEncryptedRecording(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse], error)
}

type recordingEncryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingEncryptionServiceClient(cc grpc.ClientConnInterface) RecordingEncryptionServiceClient {
	return &recordingEncryptionServiceClient{cc}
}

func (c *recordingEncryptionServiceClient) RotateKeySet(ctx context.Context, in *RotateKeySetRequest, opts ...grpc.CallOption) (*RotateKeySetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateKeySetResponse)
	err := c.cc.Invoke(ctx, RecordingEncryptionService_RotateKeySet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingEncryptionServiceClient) GetRotationState(ctx context.Context, in *GetRotationStateRequest, opts ...grpc.CallOption) (*GetRotationStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRotationStateResponse)
	err := c.cc.Invoke(ctx, RecordingEncryptionService_GetRotationState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingEncryptionServiceClient) CompleteRotation(ctx context.Context, in *CompleteRotationRequest, opts ...grpc.CallOption) (*CompleteRotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteRotationResponse)
	err := c.cc.Invoke(ctx, RecordingEncryptionService_CompleteRotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingEncryptionServiceClient) UploadEncryptedRecording(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordingEncryptionService_ServiceDesc.Streams[0], RecordingEncryptionService_UploadEncryptedRecording_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingEncryptionService_UploadEncryptedRecordingClient = grpc.ClientStreamingClient[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse]

// RecordingEncryptionServiceServer is the server API for RecordingEncryptionService service.
// All implementations must embed UnimplementedRecordingEncryptionServiceServer
// for forward compatibility.
//
// RecordingEncryption provides methods to manage cluster encryption
// configuration resources.
type RecordingEncryptionServiceServer interface {
	// RotateKeySets rotates the keys associated with the given keysets within
	// the encryption configuration.
	RotateKeySet(context.Context, *RotateKeySetRequest) (*RotateKeySetResponse, error)
	// GetRotationState returns whether or not a key rotation is in progress.
	GetRotationState(context.Context, *GetRotationStateRequest) (*GetRotationStateResponse, error)
	// CompleteRotation moves rotated keys out of the active set.
	CompleteRotation(context.Context, *CompleteRotationRequest) (*CompleteRotationResponse, error)
	// UploadEncryptedRecording is used to upload encrypted .tar files
	// containing session recording events into long term storage.
	UploadEncryptedRecording(grpc.ClientStreamingServer[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse]) error
	mustEmbedUnimplementedRecordingEncryptionServiceServer()
}

// UnimplementedRecordingEncryptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordingEncryptionServiceServer struct{}

func (UnimplementedRecordingEncryptionServiceServer) RotateKeySet(context.Context, *RotateKeySetRequest) (*RotateKeySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKeySet not implemented")
}
func (UnimplementedRecordingEncryptionServiceServer) GetRotationState(context.Context, *GetRotationStateRequest) (*GetRotationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRotationState not implemented")
}
func (UnimplementedRecordingEncryptionServiceServer) CompleteRotation(context.Context, *CompleteRotationRequest) (*CompleteRotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRotation not implemented")
}
func (UnimplementedRecordingEncryptionServiceServer) UploadEncryptedRecording(grpc.ClientStreamingServer[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadEncryptedRecording not implemented")
}
func (UnimplementedRecordingEncryptionServiceServer) mustEmbedUnimplementedRecordingEncryptionServiceServer() {
}
func (UnimplementedRecordingEncryptionServiceServer) testEmbeddedByValue() {}

// UnsafeRecordingEncryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingEncryptionServiceServer will
// result in compilation errors.
type UnsafeRecordingEncryptionServiceServer interface {
	mustEmbedUnimplementedRecordingEncryptionServiceServer()
}

func RegisterRecordingEncryptionServiceServer(s grpc.ServiceRegistrar, srv RecordingEncryptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordingEncryptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordingEncryptionService_ServiceDesc, srv)
}

func _RecordingEncryptionService_RotateKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingEncryptionServiceServer).RotateKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordingEncryptionService_RotateKeySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingEncryptionServiceServer).RotateKeySet(ctx, req.(*RotateKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingEncryptionService_GetRotationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRotationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingEncryptionServiceServer).GetRotationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordingEncryptionService_GetRotationState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingEncryptionServiceServer).GetRotationState(ctx, req.(*GetRotationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingEncryptionService_CompleteRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingEncryptionServiceServer).CompleteRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordingEncryptionService_CompleteRotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingEncryptionServiceServer).CompleteRotation(ctx, req.(*CompleteRotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingEncryptionService_UploadEncryptedRecording_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecordingEncryptionServiceServer).UploadEncryptedRecording(&grpc.GenericServerStream[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingEncryptionService_UploadEncryptedRecordingServer = grpc.ClientStreamingServer[UploadEncryptedRecordingRequest, UploadEncryptedRecordingResponse]

// RecordingEncryptionService_ServiceDesc is the grpc.ServiceDesc for RecordingEncryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingEncryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.recordingencryption.v1.RecordingEncryptionService",
	HandlerType: (*RecordingEncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RotateKeySet",
			Handler:    _RecordingEncryptionService_RotateKeySet_Handler,
		},
		{
			MethodName: "GetRotationState",
			Handler:    _RecordingEncryptionService_GetRotationState_Handler,
		},
		{
			MethodName: "CompleteRotation",
			Handler:    _RecordingEncryptionService_CompleteRotation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadEncryptedRecording",
			Handler:       _RecordingEncryptionService_UploadEncryptedRecording_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/recordingencryption/v1/recording_encryption_service.proto",
}
