// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/userintegrationtasks/v1/user_integration_tasks_service.proto

package userintegrationtasksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserIntegrationTaskService_CreateUserIntegrationTask_FullMethodName = "/teleport.userintegrationtasks.v1.UserIntegrationTaskService/CreateUserIntegrationTask"
	UserIntegrationTaskService_UpsertUserIntegrationTask_FullMethodName = "/teleport.userintegrationtasks.v1.UserIntegrationTaskService/UpsertUserIntegrationTask"
	UserIntegrationTaskService_GetUserIntegrationTask_FullMethodName    = "/teleport.userintegrationtasks.v1.UserIntegrationTaskService/GetUserIntegrationTask"
	UserIntegrationTaskService_ListUserIntegrationTasks_FullMethodName  = "/teleport.userintegrationtasks.v1.UserIntegrationTaskService/ListUserIntegrationTasks"
	UserIntegrationTaskService_UpdateUserIntegrationTask_FullMethodName = "/teleport.userintegrationtasks.v1.UserIntegrationTaskService/UpdateUserIntegrationTask"
	UserIntegrationTaskService_DeleteUserIntegrationTask_FullMethodName = "/teleport.userintegrationtasks.v1.UserIntegrationTaskService/DeleteUserIntegrationTask"
)

// UserIntegrationTaskServiceClient is the client API for UserIntegrationTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserIntegrationTaskService is a service that provides methods to manage User Integration Tasks.
type UserIntegrationTaskServiceClient interface {
	// CreateUserIntegrationTask creates a User Integration Task.
	CreateUserIntegrationTask(ctx context.Context, in *CreateUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error)
	// UpsertUserIntegrationTask creates or updates User Integration Task.
	UpsertUserIntegrationTask(ctx context.Context, in *UpsertUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error)
	// GetUserIntegrationTask gets a UserIntegrationTask by name.
	GetUserIntegrationTask(ctx context.Context, in *GetUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error)
	// ListUserIntegrationTasks returns a list of UserIntegrationTasks. It supports pagination and filters.
	ListUserIntegrationTasks(ctx context.Context, in *ListUserIntegrationTasksRequest, opts ...grpc.CallOption) (*ListUserIntegrationTasksResponse, error)
	// UpdateUserIntegrationTask updates an existing User Integration Task.
	UpdateUserIntegrationTask(ctx context.Context, in *UpdateUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error)
	// DeleteUserIntegrationTask deletes a User Integration Task.
	DeleteUserIntegrationTask(ctx context.Context, in *DeleteUserIntegrationTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userIntegrationTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserIntegrationTaskServiceClient(cc grpc.ClientConnInterface) UserIntegrationTaskServiceClient {
	return &userIntegrationTaskServiceClient{cc}
}

func (c *userIntegrationTaskServiceClient) CreateUserIntegrationTask(ctx context.Context, in *CreateUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIntegrationTask)
	err := c.cc.Invoke(ctx, UserIntegrationTaskService_CreateUserIntegrationTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userIntegrationTaskServiceClient) UpsertUserIntegrationTask(ctx context.Context, in *UpsertUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIntegrationTask)
	err := c.cc.Invoke(ctx, UserIntegrationTaskService_UpsertUserIntegrationTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userIntegrationTaskServiceClient) GetUserIntegrationTask(ctx context.Context, in *GetUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIntegrationTask)
	err := c.cc.Invoke(ctx, UserIntegrationTaskService_GetUserIntegrationTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userIntegrationTaskServiceClient) ListUserIntegrationTasks(ctx context.Context, in *ListUserIntegrationTasksRequest, opts ...grpc.CallOption) (*ListUserIntegrationTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserIntegrationTasksResponse)
	err := c.cc.Invoke(ctx, UserIntegrationTaskService_ListUserIntegrationTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userIntegrationTaskServiceClient) UpdateUserIntegrationTask(ctx context.Context, in *UpdateUserIntegrationTaskRequest, opts ...grpc.CallOption) (*UserIntegrationTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserIntegrationTask)
	err := c.cc.Invoke(ctx, UserIntegrationTaskService_UpdateUserIntegrationTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userIntegrationTaskServiceClient) DeleteUserIntegrationTask(ctx context.Context, in *DeleteUserIntegrationTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserIntegrationTaskService_DeleteUserIntegrationTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserIntegrationTaskServiceServer is the server API for UserIntegrationTaskService service.
// All implementations must embed UnimplementedUserIntegrationTaskServiceServer
// for forward compatibility.
//
// UserIntegrationTaskService is a service that provides methods to manage User Integration Tasks.
type UserIntegrationTaskServiceServer interface {
	// CreateUserIntegrationTask creates a User Integration Task.
	CreateUserIntegrationTask(context.Context, *CreateUserIntegrationTaskRequest) (*UserIntegrationTask, error)
	// UpsertUserIntegrationTask creates or updates User Integration Task.
	UpsertUserIntegrationTask(context.Context, *UpsertUserIntegrationTaskRequest) (*UserIntegrationTask, error)
	// GetUserIntegrationTask gets a UserIntegrationTask by name.
	GetUserIntegrationTask(context.Context, *GetUserIntegrationTaskRequest) (*UserIntegrationTask, error)
	// ListUserIntegrationTasks returns a list of UserIntegrationTasks. It supports pagination and filters.
	ListUserIntegrationTasks(context.Context, *ListUserIntegrationTasksRequest) (*ListUserIntegrationTasksResponse, error)
	// UpdateUserIntegrationTask updates an existing User Integration Task.
	UpdateUserIntegrationTask(context.Context, *UpdateUserIntegrationTaskRequest) (*UserIntegrationTask, error)
	// DeleteUserIntegrationTask deletes a User Integration Task.
	DeleteUserIntegrationTask(context.Context, *DeleteUserIntegrationTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserIntegrationTaskServiceServer()
}

// UnimplementedUserIntegrationTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserIntegrationTaskServiceServer struct{}

func (UnimplementedUserIntegrationTaskServiceServer) CreateUserIntegrationTask(context.Context, *CreateUserIntegrationTaskRequest) (*UserIntegrationTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserIntegrationTask not implemented")
}
func (UnimplementedUserIntegrationTaskServiceServer) UpsertUserIntegrationTask(context.Context, *UpsertUserIntegrationTaskRequest) (*UserIntegrationTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserIntegrationTask not implemented")
}
func (UnimplementedUserIntegrationTaskServiceServer) GetUserIntegrationTask(context.Context, *GetUserIntegrationTaskRequest) (*UserIntegrationTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIntegrationTask not implemented")
}
func (UnimplementedUserIntegrationTaskServiceServer) ListUserIntegrationTasks(context.Context, *ListUserIntegrationTasksRequest) (*ListUserIntegrationTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserIntegrationTasks not implemented")
}
func (UnimplementedUserIntegrationTaskServiceServer) UpdateUserIntegrationTask(context.Context, *UpdateUserIntegrationTaskRequest) (*UserIntegrationTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIntegrationTask not implemented")
}
func (UnimplementedUserIntegrationTaskServiceServer) DeleteUserIntegrationTask(context.Context, *DeleteUserIntegrationTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserIntegrationTask not implemented")
}
func (UnimplementedUserIntegrationTaskServiceServer) mustEmbedUnimplementedUserIntegrationTaskServiceServer() {
}
func (UnimplementedUserIntegrationTaskServiceServer) testEmbeddedByValue() {}

// UnsafeUserIntegrationTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserIntegrationTaskServiceServer will
// result in compilation errors.
type UnsafeUserIntegrationTaskServiceServer interface {
	mustEmbedUnimplementedUserIntegrationTaskServiceServer()
}

func RegisterUserIntegrationTaskServiceServer(s grpc.ServiceRegistrar, srv UserIntegrationTaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserIntegrationTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserIntegrationTaskService_ServiceDesc, srv)
}

func _UserIntegrationTaskService_CreateUserIntegrationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserIntegrationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIntegrationTaskServiceServer).CreateUserIntegrationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserIntegrationTaskService_CreateUserIntegrationTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIntegrationTaskServiceServer).CreateUserIntegrationTask(ctx, req.(*CreateUserIntegrationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserIntegrationTaskService_UpsertUserIntegrationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserIntegrationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIntegrationTaskServiceServer).UpsertUserIntegrationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserIntegrationTaskService_UpsertUserIntegrationTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIntegrationTaskServiceServer).UpsertUserIntegrationTask(ctx, req.(*UpsertUserIntegrationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserIntegrationTaskService_GetUserIntegrationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIntegrationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIntegrationTaskServiceServer).GetUserIntegrationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserIntegrationTaskService_GetUserIntegrationTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIntegrationTaskServiceServer).GetUserIntegrationTask(ctx, req.(*GetUserIntegrationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserIntegrationTaskService_ListUserIntegrationTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserIntegrationTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIntegrationTaskServiceServer).ListUserIntegrationTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserIntegrationTaskService_ListUserIntegrationTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIntegrationTaskServiceServer).ListUserIntegrationTasks(ctx, req.(*ListUserIntegrationTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserIntegrationTaskService_UpdateUserIntegrationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIntegrationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIntegrationTaskServiceServer).UpdateUserIntegrationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserIntegrationTaskService_UpdateUserIntegrationTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIntegrationTaskServiceServer).UpdateUserIntegrationTask(ctx, req.(*UpdateUserIntegrationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserIntegrationTaskService_DeleteUserIntegrationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserIntegrationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIntegrationTaskServiceServer).DeleteUserIntegrationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserIntegrationTaskService_DeleteUserIntegrationTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIntegrationTaskServiceServer).DeleteUserIntegrationTask(ctx, req.(*DeleteUserIntegrationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserIntegrationTaskService_ServiceDesc is the grpc.ServiceDesc for UserIntegrationTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserIntegrationTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.userintegrationtasks.v1.UserIntegrationTaskService",
	HandlerType: (*UserIntegrationTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserIntegrationTask",
			Handler:    _UserIntegrationTaskService_CreateUserIntegrationTask_Handler,
		},
		{
			MethodName: "UpsertUserIntegrationTask",
			Handler:    _UserIntegrationTaskService_UpsertUserIntegrationTask_Handler,
		},
		{
			MethodName: "GetUserIntegrationTask",
			Handler:    _UserIntegrationTaskService_GetUserIntegrationTask_Handler,
		},
		{
			MethodName: "ListUserIntegrationTasks",
			Handler:    _UserIntegrationTaskService_ListUserIntegrationTasks_Handler,
		},
		{
			MethodName: "UpdateUserIntegrationTask",
			Handler:    _UserIntegrationTaskService_UpdateUserIntegrationTask_Handler,
		},
		{
			MethodName: "DeleteUserIntegrationTask",
			Handler:    _UserIntegrationTaskService_DeleteUserIntegrationTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/userintegrationtasks/v1/user_integration_tasks_service.proto",
}
