// Copyright 2021-2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/legacy/client/proto/authservice.proto

package proto

import (
	context "context"
	types "github.com/gravitational/teleport/api/types"
	events "github.com/gravitational/teleport/api/types/events"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_InventoryControlStream_FullMethodName              = "/proto.AuthService/InventoryControlStream"
	AuthService_GetInventoryStatus_FullMethodName                  = "/proto.AuthService/GetInventoryStatus"
	AuthService_GetInventoryConnectedServiceCounts_FullMethodName  = "/proto.AuthService/GetInventoryConnectedServiceCounts"
	AuthService_PingInventory_FullMethodName                       = "/proto.AuthService/PingInventory"
	AuthService_GetInstances_FullMethodName                        = "/proto.AuthService/GetInstances"
	AuthService_GetClusterAlerts_FullMethodName                    = "/proto.AuthService/GetClusterAlerts"
	AuthService_UpsertClusterAlert_FullMethodName                  = "/proto.AuthService/UpsertClusterAlert"
	AuthService_CreateAlertAck_FullMethodName                      = "/proto.AuthService/CreateAlertAck"
	AuthService_GetAlertAcks_FullMethodName                        = "/proto.AuthService/GetAlertAcks"
	AuthService_ClearAlertAcks_FullMethodName                      = "/proto.AuthService/ClearAlertAcks"
	AuthService_MaintainSessionPresence_FullMethodName             = "/proto.AuthService/MaintainSessionPresence"
	AuthService_CreateSessionTracker_FullMethodName                = "/proto.AuthService/CreateSessionTracker"
	AuthService_GetSessionTracker_FullMethodName                   = "/proto.AuthService/GetSessionTracker"
	AuthService_GetActiveSessionTrackers_FullMethodName            = "/proto.AuthService/GetActiveSessionTrackers"
	AuthService_GetActiveSessionTrackersWithFilter_FullMethodName  = "/proto.AuthService/GetActiveSessionTrackersWithFilter"
	AuthService_RemoveSessionTracker_FullMethodName                = "/proto.AuthService/RemoveSessionTracker"
	AuthService_UpdateSessionTracker_FullMethodName                = "/proto.AuthService/UpdateSessionTracker"
	AuthService_SendKeepAlives_FullMethodName                      = "/proto.AuthService/SendKeepAlives"
	AuthService_WatchEvents_FullMethodName                         = "/proto.AuthService/WatchEvents"
	AuthService_GetNode_FullMethodName                             = "/proto.AuthService/GetNode"
	AuthService_UpsertNode_FullMethodName                          = "/proto.AuthService/UpsertNode"
	AuthService_DeleteNode_FullMethodName                          = "/proto.AuthService/DeleteNode"
	AuthService_DeleteAllNodes_FullMethodName                      = "/proto.AuthService/DeleteAllNodes"
	AuthService_GenerateUserCerts_FullMethodName                   = "/proto.AuthService/GenerateUserCerts"
	AuthService_GenerateHostCerts_FullMethodName                   = "/proto.AuthService/GenerateHostCerts"
	AuthService_GenerateUserSingleUseCerts_FullMethodName          = "/proto.AuthService/GenerateUserSingleUseCerts"
	AuthService_GenerateOpenSSHCert_FullMethodName                 = "/proto.AuthService/GenerateOpenSSHCert"
	AuthService_IsMFARequired_FullMethodName                       = "/proto.AuthService/IsMFARequired"
	AuthService_GetAccessRequestsV2_FullMethodName                 = "/proto.AuthService/GetAccessRequestsV2"
	AuthService_ListAccessRequests_FullMethodName                  = "/proto.AuthService/ListAccessRequests"
	AuthService_CreateAccessRequestV2_FullMethodName               = "/proto.AuthService/CreateAccessRequestV2"
	AuthService_DeleteAccessRequest_FullMethodName                 = "/proto.AuthService/DeleteAccessRequest"
	AuthService_SetAccessRequestState_FullMethodName               = "/proto.AuthService/SetAccessRequestState"
	AuthService_SubmitAccessReview_FullMethodName                  = "/proto.AuthService/SubmitAccessReview"
	AuthService_GetAccessCapabilities_FullMethodName               = "/proto.AuthService/GetAccessCapabilities"
	AuthService_GetAccessRequestAllowedPromotions_FullMethodName   = "/proto.AuthService/GetAccessRequestAllowedPromotions"
	AuthService_GetPluginData_FullMethodName                       = "/proto.AuthService/GetPluginData"
	AuthService_UpdatePluginData_FullMethodName                    = "/proto.AuthService/UpdatePluginData"
	AuthService_Ping_FullMethodName                                = "/proto.AuthService/Ping"
	AuthService_GetResetPasswordToken_FullMethodName               = "/proto.AuthService/GetResetPasswordToken"
	AuthService_CreateResetPasswordToken_FullMethodName            = "/proto.AuthService/CreateResetPasswordToken"
	AuthService_GetUser_FullMethodName                             = "/proto.AuthService/GetUser"
	AuthService_GetCurrentUser_FullMethodName                      = "/proto.AuthService/GetCurrentUser"
	AuthService_GetCurrentUserRoles_FullMethodName                 = "/proto.AuthService/GetCurrentUserRoles"
	AuthService_GetUsers_FullMethodName                            = "/proto.AuthService/GetUsers"
	AuthService_CreateUser_FullMethodName                          = "/proto.AuthService/CreateUser"
	AuthService_UpdateUser_FullMethodName                          = "/proto.AuthService/UpdateUser"
	AuthService_DeleteUser_FullMethodName                          = "/proto.AuthService/DeleteUser"
	AuthService_ChangePassword_FullMethodName                      = "/proto.AuthService/ChangePassword"
	AuthService_AcquireSemaphore_FullMethodName                    = "/proto.AuthService/AcquireSemaphore"
	AuthService_KeepAliveSemaphoreLease_FullMethodName             = "/proto.AuthService/KeepAliveSemaphoreLease"
	AuthService_CancelSemaphoreLease_FullMethodName                = "/proto.AuthService/CancelSemaphoreLease"
	AuthService_GetSemaphores_FullMethodName                       = "/proto.AuthService/GetSemaphores"
	AuthService_DeleteSemaphore_FullMethodName                     = "/proto.AuthService/DeleteSemaphore"
	AuthService_EmitAuditEvent_FullMethodName                      = "/proto.AuthService/EmitAuditEvent"
	AuthService_CreateAuditStream_FullMethodName                   = "/proto.AuthService/CreateAuditStream"
	AuthService_UpsertApplicationServer_FullMethodName             = "/proto.AuthService/UpsertApplicationServer"
	AuthService_DeleteApplicationServer_FullMethodName             = "/proto.AuthService/DeleteApplicationServer"
	AuthService_DeleteAllApplicationServers_FullMethodName         = "/proto.AuthService/DeleteAllApplicationServers"
	AuthService_GenerateAppToken_FullMethodName                    = "/proto.AuthService/GenerateAppToken"
	AuthService_GetAppSession_FullMethodName                       = "/proto.AuthService/GetAppSession"
	AuthService_ListAppSessions_FullMethodName                     = "/proto.AuthService/ListAppSessions"
	AuthService_CreateAppSession_FullMethodName                    = "/proto.AuthService/CreateAppSession"
	AuthService_DeleteAppSession_FullMethodName                    = "/proto.AuthService/DeleteAppSession"
	AuthService_DeleteAllAppSessions_FullMethodName                = "/proto.AuthService/DeleteAllAppSessions"
	AuthService_DeleteUserAppSessions_FullMethodName               = "/proto.AuthService/DeleteUserAppSessions"
	AuthService_CreateSnowflakeSession_FullMethodName              = "/proto.AuthService/CreateSnowflakeSession"
	AuthService_GetSnowflakeSession_FullMethodName                 = "/proto.AuthService/GetSnowflakeSession"
	AuthService_GetSnowflakeSessions_FullMethodName                = "/proto.AuthService/GetSnowflakeSessions"
	AuthService_DeleteSnowflakeSession_FullMethodName              = "/proto.AuthService/DeleteSnowflakeSession"
	AuthService_DeleteAllSnowflakeSessions_FullMethodName          = "/proto.AuthService/DeleteAllSnowflakeSessions"
	AuthService_CreateSAMLIdPSession_FullMethodName                = "/proto.AuthService/CreateSAMLIdPSession"
	AuthService_GetSAMLIdPSession_FullMethodName                   = "/proto.AuthService/GetSAMLIdPSession"
	AuthService_ListSAMLIdPSessions_FullMethodName                 = "/proto.AuthService/ListSAMLIdPSessions"
	AuthService_DeleteSAMLIdPSession_FullMethodName                = "/proto.AuthService/DeleteSAMLIdPSession"
	AuthService_DeleteAllSAMLIdPSessions_FullMethodName            = "/proto.AuthService/DeleteAllSAMLIdPSessions"
	AuthService_DeleteUserSAMLIdPSessions_FullMethodName           = "/proto.AuthService/DeleteUserSAMLIdPSessions"
	AuthService_GetWebSession_FullMethodName                       = "/proto.AuthService/GetWebSession"
	AuthService_GetWebSessions_FullMethodName                      = "/proto.AuthService/GetWebSessions"
	AuthService_StreamWebSessions_FullMethodName                   = "/proto.AuthService/StreamWebSessions"
	AuthService_DeleteWebSession_FullMethodName                    = "/proto.AuthService/DeleteWebSession"
	AuthService_DeleteAllWebSessions_FullMethodName                = "/proto.AuthService/DeleteAllWebSessions"
	AuthService_GetWebToken_FullMethodName                         = "/proto.AuthService/GetWebToken"
	AuthService_GetWebTokens_FullMethodName                        = "/proto.AuthService/GetWebTokens"
	AuthService_DeleteWebToken_FullMethodName                      = "/proto.AuthService/DeleteWebToken"
	AuthService_DeleteAllWebTokens_FullMethodName                  = "/proto.AuthService/DeleteAllWebTokens"
	AuthService_UpdateRemoteCluster_FullMethodName                 = "/proto.AuthService/UpdateRemoteCluster"
	AuthService_UpsertKubernetesServer_FullMethodName              = "/proto.AuthService/UpsertKubernetesServer"
	AuthService_DeleteKubernetesServer_FullMethodName              = "/proto.AuthService/DeleteKubernetesServer"
	AuthService_DeleteAllKubernetesServers_FullMethodName          = "/proto.AuthService/DeleteAllKubernetesServers"
	AuthService_UpsertDatabaseServer_FullMethodName                = "/proto.AuthService/UpsertDatabaseServer"
	AuthService_DeleteDatabaseServer_FullMethodName                = "/proto.AuthService/DeleteDatabaseServer"
	AuthService_DeleteAllDatabaseServers_FullMethodName            = "/proto.AuthService/DeleteAllDatabaseServers"
	AuthService_UpsertDatabaseService_FullMethodName               = "/proto.AuthService/UpsertDatabaseService"
	AuthService_DeleteDatabaseService_FullMethodName               = "/proto.AuthService/DeleteDatabaseService"
	AuthService_DeleteAllDatabaseServices_FullMethodName           = "/proto.AuthService/DeleteAllDatabaseServices"
	AuthService_SignDatabaseCSR_FullMethodName                     = "/proto.AuthService/SignDatabaseCSR"
	AuthService_GenerateDatabaseCert_FullMethodName                = "/proto.AuthService/GenerateDatabaseCert"
	AuthService_GenerateSnowflakeJWT_FullMethodName                = "/proto.AuthService/GenerateSnowflakeJWT"
	AuthService_GetRole_FullMethodName                             = "/proto.AuthService/GetRole"
	AuthService_ListRoles_FullMethodName                           = "/proto.AuthService/ListRoles"
	AuthService_CreateRole_FullMethodName                          = "/proto.AuthService/CreateRole"
	AuthService_UpdateRole_FullMethodName                          = "/proto.AuthService/UpdateRole"
	AuthService_UpsertRoleV2_FullMethodName                        = "/proto.AuthService/UpsertRoleV2"
	AuthService_UpsertRole_FullMethodName                          = "/proto.AuthService/UpsertRole"
	AuthService_DeleteRole_FullMethodName                          = "/proto.AuthService/DeleteRole"
	AuthService_AddMFADevice_FullMethodName                        = "/proto.AuthService/AddMFADevice"
	AuthService_DeleteMFADevice_FullMethodName                     = "/proto.AuthService/DeleteMFADevice"
	AuthService_AddMFADeviceSync_FullMethodName                    = "/proto.AuthService/AddMFADeviceSync"
	AuthService_DeleteMFADeviceSync_FullMethodName                 = "/proto.AuthService/DeleteMFADeviceSync"
	AuthService_GetMFADevices_FullMethodName                       = "/proto.AuthService/GetMFADevices"
	AuthService_CreateAuthenticateChallenge_FullMethodName         = "/proto.AuthService/CreateAuthenticateChallenge"
	AuthService_CreateRegisterChallenge_FullMethodName             = "/proto.AuthService/CreateRegisterChallenge"
	AuthService_GetOIDCConnector_FullMethodName                    = "/proto.AuthService/GetOIDCConnector"
	AuthService_GetOIDCConnectors_FullMethodName                   = "/proto.AuthService/GetOIDCConnectors"
	AuthService_CreateOIDCConnector_FullMethodName                 = "/proto.AuthService/CreateOIDCConnector"
	AuthService_UpdateOIDCConnector_FullMethodName                 = "/proto.AuthService/UpdateOIDCConnector"
	AuthService_UpsertOIDCConnector_FullMethodName                 = "/proto.AuthService/UpsertOIDCConnector"
	AuthService_UpsertOIDCConnectorV2_FullMethodName               = "/proto.AuthService/UpsertOIDCConnectorV2"
	AuthService_DeleteOIDCConnector_FullMethodName                 = "/proto.AuthService/DeleteOIDCConnector"
	AuthService_CreateOIDCAuthRequest_FullMethodName               = "/proto.AuthService/CreateOIDCAuthRequest"
	AuthService_GetOIDCAuthRequest_FullMethodName                  = "/proto.AuthService/GetOIDCAuthRequest"
	AuthService_GetSAMLConnector_FullMethodName                    = "/proto.AuthService/GetSAMLConnector"
	AuthService_GetSAMLConnectors_FullMethodName                   = "/proto.AuthService/GetSAMLConnectors"
	AuthService_CreateSAMLConnector_FullMethodName                 = "/proto.AuthService/CreateSAMLConnector"
	AuthService_UpdateSAMLConnector_FullMethodName                 = "/proto.AuthService/UpdateSAMLConnector"
	AuthService_UpsertSAMLConnector_FullMethodName                 = "/proto.AuthService/UpsertSAMLConnector"
	AuthService_UpsertSAMLConnectorV2_FullMethodName               = "/proto.AuthService/UpsertSAMLConnectorV2"
	AuthService_DeleteSAMLConnector_FullMethodName                 = "/proto.AuthService/DeleteSAMLConnector"
	AuthService_CreateSAMLAuthRequest_FullMethodName               = "/proto.AuthService/CreateSAMLAuthRequest"
	AuthService_GetSAMLAuthRequest_FullMethodName                  = "/proto.AuthService/GetSAMLAuthRequest"
	AuthService_GetGithubConnector_FullMethodName                  = "/proto.AuthService/GetGithubConnector"
	AuthService_GetGithubConnectors_FullMethodName                 = "/proto.AuthService/GetGithubConnectors"
	AuthService_CreateGithubConnector_FullMethodName               = "/proto.AuthService/CreateGithubConnector"
	AuthService_UpdateGithubConnector_FullMethodName               = "/proto.AuthService/UpdateGithubConnector"
	AuthService_UpsertGithubConnector_FullMethodName               = "/proto.AuthService/UpsertGithubConnector"
	AuthService_UpsertGithubConnectorV2_FullMethodName             = "/proto.AuthService/UpsertGithubConnectorV2"
	AuthService_DeleteGithubConnector_FullMethodName               = "/proto.AuthService/DeleteGithubConnector"
	AuthService_CreateGithubAuthRequest_FullMethodName             = "/proto.AuthService/CreateGithubAuthRequest"
	AuthService_GetGithubAuthRequest_FullMethodName                = "/proto.AuthService/GetGithubAuthRequest"
	AuthService_GetSSODiagnosticInfo_FullMethodName                = "/proto.AuthService/GetSSODiagnosticInfo"
	AuthService_GetServerInfos_FullMethodName                      = "/proto.AuthService/GetServerInfos"
	AuthService_GetServerInfo_FullMethodName                       = "/proto.AuthService/GetServerInfo"
	AuthService_UpsertServerInfo_FullMethodName                    = "/proto.AuthService/UpsertServerInfo"
	AuthService_DeleteServerInfo_FullMethodName                    = "/proto.AuthService/DeleteServerInfo"
	AuthService_DeleteAllServerInfos_FullMethodName                = "/proto.AuthService/DeleteAllServerInfos"
	AuthService_GetTrustedCluster_FullMethodName                   = "/proto.AuthService/GetTrustedCluster"
	AuthService_GetTrustedClusters_FullMethodName                  = "/proto.AuthService/GetTrustedClusters"
	AuthService_UpsertTrustedCluster_FullMethodName                = "/proto.AuthService/UpsertTrustedCluster"
	AuthService_DeleteTrustedCluster_FullMethodName                = "/proto.AuthService/DeleteTrustedCluster"
	AuthService_GetToken_FullMethodName                            = "/proto.AuthService/GetToken"
	AuthService_GetTokens_FullMethodName                           = "/proto.AuthService/GetTokens"
	AuthService_CreateTokenV2_FullMethodName                       = "/proto.AuthService/CreateTokenV2"
	AuthService_UpsertTokenV2_FullMethodName                       = "/proto.AuthService/UpsertTokenV2"
	AuthService_DeleteToken_FullMethodName                         = "/proto.AuthService/DeleteToken"
	AuthService_GetClusterAuditConfig_FullMethodName               = "/proto.AuthService/GetClusterAuditConfig"
	AuthService_GetClusterNetworkingConfig_FullMethodName          = "/proto.AuthService/GetClusterNetworkingConfig"
	AuthService_SetClusterNetworkingConfig_FullMethodName          = "/proto.AuthService/SetClusterNetworkingConfig"
	AuthService_ResetClusterNetworkingConfig_FullMethodName        = "/proto.AuthService/ResetClusterNetworkingConfig"
	AuthService_GetSessionRecordingConfig_FullMethodName           = "/proto.AuthService/GetSessionRecordingConfig"
	AuthService_SetSessionRecordingConfig_FullMethodName           = "/proto.AuthService/SetSessionRecordingConfig"
	AuthService_ResetSessionRecordingConfig_FullMethodName         = "/proto.AuthService/ResetSessionRecordingConfig"
	AuthService_GetAuthPreference_FullMethodName                   = "/proto.AuthService/GetAuthPreference"
	AuthService_SetAuthPreference_FullMethodName                   = "/proto.AuthService/SetAuthPreference"
	AuthService_ResetAuthPreference_FullMethodName                 = "/proto.AuthService/ResetAuthPreference"
	AuthService_GetUIConfig_FullMethodName                         = "/proto.AuthService/GetUIConfig"
	AuthService_SetUIConfig_FullMethodName                         = "/proto.AuthService/SetUIConfig"
	AuthService_DeleteUIConfig_FullMethodName                      = "/proto.AuthService/DeleteUIConfig"
	AuthService_GetEvents_FullMethodName                           = "/proto.AuthService/GetEvents"
	AuthService_GetSessionEvents_FullMethodName                    = "/proto.AuthService/GetSessionEvents"
	AuthService_GetLock_FullMethodName                             = "/proto.AuthService/GetLock"
	AuthService_GetLocks_FullMethodName                            = "/proto.AuthService/GetLocks"
	AuthService_UpsertLock_FullMethodName                          = "/proto.AuthService/UpsertLock"
	AuthService_DeleteLock_FullMethodName                          = "/proto.AuthService/DeleteLock"
	AuthService_ReplaceRemoteLocks_FullMethodName                  = "/proto.AuthService/ReplaceRemoteLocks"
	AuthService_StreamSessionEvents_FullMethodName                 = "/proto.AuthService/StreamSessionEvents"
	AuthService_GetNetworkRestrictions_FullMethodName              = "/proto.AuthService/GetNetworkRestrictions"
	AuthService_SetNetworkRestrictions_FullMethodName              = "/proto.AuthService/SetNetworkRestrictions"
	AuthService_DeleteNetworkRestrictions_FullMethodName           = "/proto.AuthService/DeleteNetworkRestrictions"
	AuthService_GetApps_FullMethodName                             = "/proto.AuthService/GetApps"
	AuthService_GetApp_FullMethodName                              = "/proto.AuthService/GetApp"
	AuthService_CreateApp_FullMethodName                           = "/proto.AuthService/CreateApp"
	AuthService_UpdateApp_FullMethodName                           = "/proto.AuthService/UpdateApp"
	AuthService_DeleteApp_FullMethodName                           = "/proto.AuthService/DeleteApp"
	AuthService_DeleteAllApps_FullMethodName                       = "/proto.AuthService/DeleteAllApps"
	AuthService_GetDatabases_FullMethodName                        = "/proto.AuthService/GetDatabases"
	AuthService_GetDatabase_FullMethodName                         = "/proto.AuthService/GetDatabase"
	AuthService_CreateDatabase_FullMethodName                      = "/proto.AuthService/CreateDatabase"
	AuthService_UpdateDatabase_FullMethodName                      = "/proto.AuthService/UpdateDatabase"
	AuthService_DeleteDatabase_FullMethodName                      = "/proto.AuthService/DeleteDatabase"
	AuthService_DeleteAllDatabases_FullMethodName                  = "/proto.AuthService/DeleteAllDatabases"
	AuthService_GetKubernetesClusters_FullMethodName               = "/proto.AuthService/GetKubernetesClusters"
	AuthService_GetKubernetesCluster_FullMethodName                = "/proto.AuthService/GetKubernetesCluster"
	AuthService_CreateKubernetesCluster_FullMethodName             = "/proto.AuthService/CreateKubernetesCluster"
	AuthService_UpdateKubernetesCluster_FullMethodName             = "/proto.AuthService/UpdateKubernetesCluster"
	AuthService_DeleteKubernetesCluster_FullMethodName             = "/proto.AuthService/DeleteKubernetesCluster"
	AuthService_DeleteAllKubernetesClusters_FullMethodName         = "/proto.AuthService/DeleteAllKubernetesClusters"
	AuthService_GetWindowsDesktopServices_FullMethodName           = "/proto.AuthService/GetWindowsDesktopServices"
	AuthService_GetWindowsDesktopService_FullMethodName            = "/proto.AuthService/GetWindowsDesktopService"
	AuthService_UpsertWindowsDesktopService_FullMethodName         = "/proto.AuthService/UpsertWindowsDesktopService"
	AuthService_DeleteWindowsDesktopService_FullMethodName         = "/proto.AuthService/DeleteWindowsDesktopService"
	AuthService_DeleteAllWindowsDesktopServices_FullMethodName     = "/proto.AuthService/DeleteAllWindowsDesktopServices"
	AuthService_GetWindowsDesktops_FullMethodName                  = "/proto.AuthService/GetWindowsDesktops"
	AuthService_CreateWindowsDesktop_FullMethodName                = "/proto.AuthService/CreateWindowsDesktop"
	AuthService_UpdateWindowsDesktop_FullMethodName                = "/proto.AuthService/UpdateWindowsDesktop"
	AuthService_UpsertWindowsDesktop_FullMethodName                = "/proto.AuthService/UpsertWindowsDesktop"
	AuthService_DeleteWindowsDesktop_FullMethodName                = "/proto.AuthService/DeleteWindowsDesktop"
	AuthService_DeleteAllWindowsDesktops_FullMethodName            = "/proto.AuthService/DeleteAllWindowsDesktops"
	AuthService_GenerateWindowsDesktopCert_FullMethodName          = "/proto.AuthService/GenerateWindowsDesktopCert"
	AuthService_GenerateCertAuthorityCRL_FullMethodName            = "/proto.AuthService/GenerateCertAuthorityCRL"
	AuthService_GetDesktopBootstrapScript_FullMethodName           = "/proto.AuthService/GetDesktopBootstrapScript"
	AuthService_CreateConnectionDiagnostic_FullMethodName          = "/proto.AuthService/CreateConnectionDiagnostic"
	AuthService_UpdateConnectionDiagnostic_FullMethodName          = "/proto.AuthService/UpdateConnectionDiagnostic"
	AuthService_GetConnectionDiagnostic_FullMethodName             = "/proto.AuthService/GetConnectionDiagnostic"
	AuthService_AppendDiagnosticTrace_FullMethodName               = "/proto.AuthService/AppendDiagnosticTrace"
	AuthService_ChangeUserAuthentication_FullMethodName            = "/proto.AuthService/ChangeUserAuthentication"
	AuthService_StartAccountRecovery_FullMethodName                = "/proto.AuthService/StartAccountRecovery"
	AuthService_VerifyAccountRecovery_FullMethodName               = "/proto.AuthService/VerifyAccountRecovery"
	AuthService_CompleteAccountRecovery_FullMethodName             = "/proto.AuthService/CompleteAccountRecovery"
	AuthService_CreateAccountRecoveryCodes_FullMethodName          = "/proto.AuthService/CreateAccountRecoveryCodes"
	AuthService_GetAccountRecoveryToken_FullMethodName             = "/proto.AuthService/GetAccountRecoveryToken"
	AuthService_GetAccountRecoveryCodes_FullMethodName             = "/proto.AuthService/GetAccountRecoveryCodes"
	AuthService_CreatePrivilegeToken_FullMethodName                = "/proto.AuthService/CreatePrivilegeToken"
	AuthService_GetInstaller_FullMethodName                        = "/proto.AuthService/GetInstaller"
	AuthService_GetInstallers_FullMethodName                       = "/proto.AuthService/GetInstallers"
	AuthService_SetInstaller_FullMethodName                        = "/proto.AuthService/SetInstaller"
	AuthService_DeleteInstaller_FullMethodName                     = "/proto.AuthService/DeleteInstaller"
	AuthService_DeleteAllInstallers_FullMethodName                 = "/proto.AuthService/DeleteAllInstallers"
	AuthService_ListResources_FullMethodName                       = "/proto.AuthService/ListResources"
	AuthService_ListUnifiedResources_FullMethodName                = "/proto.AuthService/ListUnifiedResources"
	AuthService_GetSSHTargets_FullMethodName                       = "/proto.AuthService/GetSSHTargets"
	AuthService_ResolveSSHTarget_FullMethodName                    = "/proto.AuthService/ResolveSSHTarget"
	AuthService_GetDomainName_FullMethodName                       = "/proto.AuthService/GetDomainName"
	AuthService_GetClusterCACert_FullMethodName                    = "/proto.AuthService/GetClusterCACert"
	AuthService_AssertSystemRole_FullMethodName                    = "/proto.AuthService/AssertSystemRole"
	AuthService_SubmitUsageEvent_FullMethodName                    = "/proto.AuthService/SubmitUsageEvent"
	AuthService_GetLicense_FullMethodName                          = "/proto.AuthService/GetLicense"
	AuthService_ListReleases_FullMethodName                        = "/proto.AuthService/ListReleases"
	AuthService_ListSAMLIdPServiceProviders_FullMethodName         = "/proto.AuthService/ListSAMLIdPServiceProviders"
	AuthService_GetSAMLIdPServiceProvider_FullMethodName           = "/proto.AuthService/GetSAMLIdPServiceProvider"
	AuthService_CreateSAMLIdPServiceProvider_FullMethodName        = "/proto.AuthService/CreateSAMLIdPServiceProvider"
	AuthService_UpdateSAMLIdPServiceProvider_FullMethodName        = "/proto.AuthService/UpdateSAMLIdPServiceProvider"
	AuthService_DeleteSAMLIdPServiceProvider_FullMethodName        = "/proto.AuthService/DeleteSAMLIdPServiceProvider"
	AuthService_DeleteAllSAMLIdPServiceProviders_FullMethodName    = "/proto.AuthService/DeleteAllSAMLIdPServiceProviders"
	AuthService_ListUserGroups_FullMethodName                      = "/proto.AuthService/ListUserGroups"
	AuthService_GetUserGroup_FullMethodName                        = "/proto.AuthService/GetUserGroup"
	AuthService_CreateUserGroup_FullMethodName                     = "/proto.AuthService/CreateUserGroup"
	AuthService_UpdateUserGroup_FullMethodName                     = "/proto.AuthService/UpdateUserGroup"
	AuthService_DeleteUserGroup_FullMethodName                     = "/proto.AuthService/DeleteUserGroup"
	AuthService_DeleteAllUserGroups_FullMethodName                 = "/proto.AuthService/DeleteAllUserGroups"
	AuthService_GetHeadlessAuthentication_FullMethodName           = "/proto.AuthService/GetHeadlessAuthentication"
	AuthService_WatchPendingHeadlessAuthentications_FullMethodName = "/proto.AuthService/WatchPendingHeadlessAuthentications"
	AuthService_UpdateHeadlessAuthenticationState_FullMethodName   = "/proto.AuthService/UpdateHeadlessAuthenticationState"
	AuthService_ExportUpgradeWindows_FullMethodName                = "/proto.AuthService/ExportUpgradeWindows"
	AuthService_GetClusterMaintenanceConfig_FullMethodName         = "/proto.AuthService/GetClusterMaintenanceConfig"
	AuthService_UpdateClusterMaintenanceConfig_FullMethodName      = "/proto.AuthService/UpdateClusterMaintenanceConfig"
	AuthService_DeleteClusterMaintenanceConfig_FullMethodName      = "/proto.AuthService/DeleteClusterMaintenanceConfig"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthService is authentication/authorization service implementation
type AuthServiceClient interface {
	// InventoryControlStream is the per-instance stream used to advertise teleport instance
	// presence/version/etc to the auth server.
	InventoryControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpstreamInventoryOneOf, DownstreamInventoryOneOf], error)
	// GetInventoryStatus gets information about current instance inventory.
	GetInventoryStatus(ctx context.Context, in *InventoryStatusRequest, opts ...grpc.CallOption) (*InventoryStatusSummary, error)
	// GetInventoryConnectedServiceCounts returns the counts of each connected service seen in the inventory.
	GetInventoryConnectedServiceCounts(ctx context.Context, in *InventoryConnectedServiceCountsRequest, opts ...grpc.CallOption) (*InventoryConnectedServiceCounts, error)
	// PingInventory attempts to trigger a downstream inventory ping (used in testing/debug).
	PingInventory(ctx context.Context, in *InventoryPingRequest, opts ...grpc.CallOption) (*InventoryPingResponse, error)
	// GetInstances streams all instances matching the specified filter.
	GetInstances(ctx context.Context, in *types.InstanceFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.InstanceV1], error)
	// GetClusterAlerts loads cluster-level alert messages.
	GetClusterAlerts(ctx context.Context, in *types.GetClusterAlertsRequest, opts ...grpc.CallOption) (*GetClusterAlertsResponse, error)
	// UpsertClusterAlert creates a cluster alert.
	UpsertClusterAlert(ctx context.Context, in *UpsertClusterAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateAlertAck marks a cluster alert as acknowledged.
	CreateAlertAck(ctx context.Context, in *types.AlertAcknowledgement, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAlertAcks gets active alert ackowledgements.
	GetAlertAcks(ctx context.Context, in *GetAlertAcksRequest, opts ...grpc.CallOption) (*GetAlertAcksResponse, error)
	// ClearAlertAcks clears alert acknowledgments.
	ClearAlertAcks(ctx context.Context, in *ClearAlertAcksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// MaintainSessionPresence establishes a channel used to continously verify the presence for a
	// session.
	MaintainSessionPresence(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PresenceMFAChallengeSend, MFAAuthenticateChallenge], error)
	// CreateSessionTracker creates a new session tracker resource.
	CreateSessionTracker(ctx context.Context, in *CreateSessionTrackerRequest, opts ...grpc.CallOption) (*types.SessionTrackerV1, error)
	// GetSessionTracker fetches a session tracker resource.
	GetSessionTracker(ctx context.Context, in *GetSessionTrackerRequest, opts ...grpc.CallOption) (*types.SessionTrackerV1, error)
	// GetActiveSessionTrackers returns a list of active sessions.
	GetActiveSessionTrackers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.SessionTrackerV1], error)
	// GetActiveSessionTrackersWithFilter returns a list of active sessions filtered by a filter.
	GetActiveSessionTrackersWithFilter(ctx context.Context, in *types.SessionTrackerFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.SessionTrackerV1], error)
	// RemoveSessionTracker removes a session tracker resource.
	RemoveSessionTracker(ctx context.Context, in *RemoveSessionTrackerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateSessionTracker updates some state of a session tracker.
	UpdateSessionTracker(ctx context.Context, in *UpdateSessionTrackerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SendKeepAlives allows node to send a stream of keep alive requests
	SendKeepAlives(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[types.KeepAlive, emptypb.Empty], error)
	// WatchEvents returns a new stream of cluster events
	WatchEvents(ctx context.Context, in *Watch, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	// GetNode retrieves a node described by the given request.
	GetNode(ctx context.Context, in *types.ResourceInNamespaceRequest, opts ...grpc.CallOption) (*types.ServerV2, error)
	// UpsertNode upserts a node in a backend.
	UpsertNode(ctx context.Context, in *types.ServerV2, opts ...grpc.CallOption) (*types.KeepAlive, error)
	// DeleteNode deletes an existing node in a backend described by the given request.
	DeleteNode(ctx context.Context, in *types.ResourceInNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllNodes deletes all nodes.
	DeleteAllNodes(ctx context.Context, in *types.ResourcesInNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GenerateUserCerts generates a set of user certificates.
	GenerateUserCerts(ctx context.Context, in *UserCertsRequest, opts ...grpc.CallOption) (*Certs, error)
	// GenerateHostCerts generates a set of host certificates.
	GenerateHostCerts(ctx context.Context, in *HostCertsRequest, opts ...grpc.CallOption) (*Certs, error)
	// Deprecated: Do not use.
	// Deprecated: Superseded by GenerateUserCerts.
	GenerateUserSingleUseCerts(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserSingleUseCertsRequest, UserSingleUseCertsResponse], error)
	// GenerateOpenSSHCert signs a SSH certificate that can be used
	// to connect to Agentless nodes.
	GenerateOpenSSHCert(ctx context.Context, in *OpenSSHCertRequest, opts ...grpc.CallOption) (*OpenSSHCert, error)
	// IsMFARequired checks whether MFA is required to access the specified
	// target.
	IsMFARequired(ctx context.Context, in *IsMFARequiredRequest, opts ...grpc.CallOption) (*IsMFARequiredResponse, error)
	// GetAccessRequestsV2 gets all pending access requests.
	GetAccessRequestsV2(ctx context.Context, in *types.AccessRequestFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.AccessRequestV3], error)
	// ListAccessRequests gets access requests with pagination and sorting.
	ListAccessRequests(ctx context.Context, in *ListAccessRequestsRequest, opts ...grpc.CallOption) (*ListAccessRequestsResponse, error)
	// CreateAccessRequestV2 creates a new access request.
	CreateAccessRequestV2(ctx context.Context, in *types.AccessRequestV3, opts ...grpc.CallOption) (*types.AccessRequestV3, error)
	// DeleteAccessRequest deletes an access request.
	DeleteAccessRequest(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetAccessRequestState sets the state of an access request.
	SetAccessRequestState(ctx context.Context, in *RequestStateSetter, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SubmitAccessReview applies a review to a request and returns the post-application state.
	SubmitAccessReview(ctx context.Context, in *types.AccessReviewSubmission, opts ...grpc.CallOption) (*types.AccessRequestV3, error)
	// GetAccessCapabilities requests the access capabilities of a user.
	GetAccessCapabilities(ctx context.Context, in *types.AccessCapabilitiesRequest, opts ...grpc.CallOption) (*types.AccessCapabilities, error)
	// GetAccessRequestAllowedPromotions returns a list of allowed promotions from an access request to an access list.
	GetAccessRequestAllowedPromotions(ctx context.Context, in *AccessRequestAllowedPromotionRequest, opts ...grpc.CallOption) (*AccessRequestAllowedPromotionResponse, error)
	// GetPluginData gets all plugin data matching the supplied filter.
	GetPluginData(ctx context.Context, in *types.PluginDataFilter, opts ...grpc.CallOption) (*PluginDataSeq, error)
	// UpdatePluginData updates a plugin's resource-specific datastore.
	UpdatePluginData(ctx context.Context, in *types.PluginDataUpdateParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping gets basic info about the auth server. This method is intended
	// to mimic the behavior of the proxy's Ping method, and may be used by
	// clients for verification or configuration on startup.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// GetResetPasswordToken returns a reset password token.
	GetResetPasswordToken(ctx context.Context, in *GetResetPasswordTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error)
	// CreateResetPasswordToken resets users current password and second factors and creates a reset
	// password token.
	//
	// Only local users may be reset.
	CreateResetPasswordToken(ctx context.Context, in *CreateResetPasswordTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error)
	// Deprecated: Do not use.
	// GetUser gets a user resource by name.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*types.UserV2, error)
	// Deprecated: Do not use.
	// GetCurrentUser returns current user as seen by the server.
	// Useful especially in the context of remote clusters which perform role and trait mapping.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.UserV2, error)
	// GetCurrentUserRoles returns current user's roles.
	GetCurrentUserRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.RoleV6], error)
	// Deprecated: Do not use.
	// GetUsers gets all current user resources.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.UserV2], error)
	// Deprecated: Do not use.
	// CreateUser inserts a new user entry to a backend.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	CreateUser(ctx context.Context, in *types.UserV2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// UpdateUser updates an existing user in a backend.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	UpdateUser(ctx context.Context, in *types.UserV2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DeleteUser deletes an existing user in a backend by username.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ChangePassword allows a user to change their own password.
	//
	// Only local users may change their password.
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AcquireSemaphore acquires lease with requested resources from semaphore.
	AcquireSemaphore(ctx context.Context, in *types.AcquireSemaphoreRequest, opts ...grpc.CallOption) (*types.SemaphoreLease, error)
	// KeepAliveSemaphoreLease updates semaphore lease.
	KeepAliveSemaphoreLease(ctx context.Context, in *types.SemaphoreLease, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CancelSemaphoreLease cancels semaphore lease early.
	CancelSemaphoreLease(ctx context.Context, in *types.SemaphoreLease, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetSemaphores returns a list of all semaphores matching the supplied filter.
	GetSemaphores(ctx context.Context, in *types.SemaphoreFilter, opts ...grpc.CallOption) (*Semaphores, error)
	// DeleteSemaphore deletes a semaphore matching the supplied filter.
	DeleteSemaphore(ctx context.Context, in *types.SemaphoreFilter, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EmitAuditEvent emits audit event
	EmitAuditEvent(ctx context.Context, in *events.OneOf, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateAuditStream creates or resumes audit events streams
	CreateAuditStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuditStreamRequest, events.StreamStatus], error)
	// UpsertApplicationServer adds an application server.
	UpsertApplicationServer(ctx context.Context, in *UpsertApplicationServerRequest, opts ...grpc.CallOption) (*types.KeepAlive, error)
	// DeleteApplicationServer removes an application server.
	DeleteApplicationServer(ctx context.Context, in *DeleteApplicationServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllApplicationServers removes all application servers.
	DeleteAllApplicationServers(ctx context.Context, in *DeleteAllApplicationServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GenerateAppToken will generate a JWT token for application access.
	GenerateAppToken(ctx context.Context, in *GenerateAppTokenRequest, opts ...grpc.CallOption) (*GenerateAppTokenResponse, error)
	// GetAppSession gets an application web session.
	GetAppSession(ctx context.Context, in *GetAppSessionRequest, opts ...grpc.CallOption) (*GetAppSessionResponse, error)
	// ListAppSessions gets all application web sessions.
	ListAppSessions(ctx context.Context, in *ListAppSessionsRequest, opts ...grpc.CallOption) (*ListAppSessionsResponse, error)
	// CreateAppSession creates an application web session. Application web
	// sessions represent a browser session the client holds.
	CreateAppSession(ctx context.Context, in *CreateAppSessionRequest, opts ...grpc.CallOption) (*CreateAppSessionResponse, error)
	// DeleteAppSession removes an application web session.
	DeleteAppSession(ctx context.Context, in *DeleteAppSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllAppSessions removes all application web sessions.
	DeleteAllAppSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteUserAppSessions deletes all user’s application sessions.
	DeleteUserAppSessions(ctx context.Context, in *DeleteUserAppSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSnowflakeSession creates web session with sub kind Snowflake used by Database access
	// Snowflake integration.
	CreateSnowflakeSession(ctx context.Context, in *CreateSnowflakeSessionRequest, opts ...grpc.CallOption) (*CreateSnowflakeSessionResponse, error)
	// GetSnowflakeSession returns a web session with sub kind Snowflake.
	GetSnowflakeSession(ctx context.Context, in *GetSnowflakeSessionRequest, opts ...grpc.CallOption) (*GetSnowflakeSessionResponse, error)
	// GetSnowflakeSessions gets all Snowflake web sessions.
	GetSnowflakeSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSnowflakeSessionsResponse, error)
	// DeleteSnowflakeSession removes a Snowflake web session.
	DeleteSnowflakeSession(ctx context.Context, in *DeleteSnowflakeSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllSnowflakeSessions removes all Snowflake web sessions.
	DeleteAllSnowflakeSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// CreateSAMLIdPSession creates web session with sub kind saml_idp used by the SAML IdP.
	CreateSAMLIdPSession(ctx context.Context, in *CreateSAMLIdPSessionRequest, opts ...grpc.CallOption) (*CreateSAMLIdPSessionResponse, error)
	// Deprecated: Do not use.
	// GetSAMLIdPSession returns a SAML IdP session with sub kind saml_idp.
	GetSAMLIdPSession(ctx context.Context, in *GetSAMLIdPSessionRequest, opts ...grpc.CallOption) (*GetSAMLIdPSessionResponse, error)
	// Deprecated: Do not use.
	// ListSAMLIdPSessions gets all SAML IdP sessions.
	ListSAMLIdPSessions(ctx context.Context, in *ListSAMLIdPSessionsRequest, opts ...grpc.CallOption) (*ListSAMLIdPSessionsResponse, error)
	// Deprecated: Do not use.
	// DeleteSAMLIdPSession removes a SAML IdP session.
	DeleteSAMLIdPSession(ctx context.Context, in *DeleteSAMLIdPSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DeleteAllSAMLIdPSessions removes all SAML IdP sessions.
	DeleteAllSAMLIdPSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DeleteUserSAMLIdPSessions deletes all user’s SAML IdP sessions.
	DeleteUserSAMLIdPSessions(ctx context.Context, in *DeleteUserSAMLIdPSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetWebSession gets a web session.
	GetWebSession(ctx context.Context, in *types.GetWebSessionRequest, opts ...grpc.CallOption) (*GetWebSessionResponse, error)
	// Deprecated: Do not use.
	// GetWebSessions gets all web sessions.
	GetWebSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWebSessionsResponse, error)
	// StreamWebSessions gets all web sessions in a stream.
	StreamWebSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.WebSessionV2], error)
	// DeleteWebSession deletes a web session.
	DeleteWebSession(ctx context.Context, in *types.DeleteWebSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllWebSessions deletes all web sessions.
	DeleteAllWebSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetWebToken gets a web token.
	GetWebToken(ctx context.Context, in *types.GetWebTokenRequest, opts ...grpc.CallOption) (*GetWebTokenResponse, error)
	// GetWebTokens gets all web tokens.
	GetWebTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWebTokensResponse, error)
	// DeleteWebToken deletes a web token.
	DeleteWebToken(ctx context.Context, in *types.DeleteWebTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllWebTokens deletes all web tokens.
	DeleteAllWebTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateRemoteCluster updates remote cluster
	UpdateRemoteCluster(ctx context.Context, in *types.RemoteClusterV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertKubernetesServer adds or updates a kubernetes server.
	UpsertKubernetesServer(ctx context.Context, in *UpsertKubernetesServerRequest, opts ...grpc.CallOption) (*types.KeepAlive, error)
	// DeleteKubernetesServer removes a kubernetes server.
	DeleteKubernetesServer(ctx context.Context, in *DeleteKubernetesServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllKubernetesServers removes all kubernetes servers.
	DeleteAllKubernetesServers(ctx context.Context, in *DeleteAllKubernetesServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertDatabaseServer registers a new database proxy server.
	UpsertDatabaseServer(ctx context.Context, in *UpsertDatabaseServerRequest, opts ...grpc.CallOption) (*types.KeepAlive, error)
	// DeleteDatabaseServer removes the specified database proxy server.
	DeleteDatabaseServer(ctx context.Context, in *DeleteDatabaseServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllDatabaseServers removes all registered database proxy servers.
	DeleteAllDatabaseServers(ctx context.Context, in *DeleteAllDatabaseServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertDatabaseService registers a new DatabaseService.
	UpsertDatabaseService(ctx context.Context, in *UpsertDatabaseServiceRequest, opts ...grpc.CallOption) (*types.KeepAlive, error)
	// DeleteDatabaseService removes the specified DatabaseService.
	DeleteDatabaseService(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllDatabaseServices removes all registered DatabaseServices.
	// If there's an error deleting the resources, there's no guarantee of a rollback.
	// A subset of resources might be deleted while others still exist.
	DeleteAllDatabaseServices(ctx context.Context, in *DeleteAllDatabaseServicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SignDatabaseCSR generates client certificate used by proxy to
	// authenticate with a remote database service.
	SignDatabaseCSR(ctx context.Context, in *DatabaseCSRRequest, opts ...grpc.CallOption) (*DatabaseCSRResponse, error)
	// GenerateDatabaseCert generates client certificate used by a database
	// service to authenticate with the database instance.
	GenerateDatabaseCert(ctx context.Context, in *DatabaseCertRequest, opts ...grpc.CallOption) (*DatabaseCertResponse, error)
	// / GenerateSnowflakeJWT generates JWT in the format required by Snowflake.
	GenerateSnowflakeJWT(ctx context.Context, in *SnowflakeJWTRequest, opts ...grpc.CallOption) (*SnowflakeJWTResponse, error)
	// GetRole retrieves a role described by the given request.
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error)
	// ListRoles is a paginated role getter.
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// CreateRole creates a new role.
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error)
	// UpdateRole updates an existing role.
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error)
	// UpsertRoleV2 creates or overwrites an existing role.
	UpsertRoleV2(ctx context.Context, in *UpsertRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error)
	// Deprecated: Do not use.
	// UpsertRole upserts a role in a backend.
	//
	// Deprecated: use UpsertRoleV2 instead.
	UpsertRole(ctx context.Context, in *types.RoleV6, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRole deletes an existing role in a backend described by the given request.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// AddMFADevice adds an MFA device for the user calling this RPC.
	//
	// The RPC is streaming both ways and the message sequence is:
	// (-> means client-to-server, <- means server-to-client)
	// -> Init
	// <- ExistingMFAChallenge
	// -> ExistingMFAResponse
	// <- NewMFARegisterChallenge
	// -> NewMFARegisterResponse
	// <- Ack
	//
	// Deprecated: Use [AddMFADeviceSync] instead.
	AddMFADevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AddMFADeviceRequest, AddMFADeviceResponse], error)
	// Deprecated: Do not use.
	// DeleteMFADevice deletes an MFA device for the user calling this RPC.
	//
	// The RPC is streaming both ways and the message sequence is:
	// (-> means client-to-server, <- means server-to-client)
	// -> Init
	// <- MFAChallenge
	// -> MFAResponse
	// <- Ack
	//
	// Deprecated: Use [DeleteMFADeviceSync] instead.
	DeleteMFADevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteMFADeviceRequest, DeleteMFADeviceResponse], error)
	// AddMFADeviceSync adds a new MFA device.
	//
	// A typical MFA registration sequence calls the following RPCs:
	//
	// 1. CreateAuthenticateChallenge (necessary for registration challenge)
	// 2. (optional) CreatePrivilegeToken
	// 3. CreateRegisterChallenge (uses authn challenge and optionally a token)
	// 4. AddMFADeviceSync
	AddMFADeviceSync(ctx context.Context, in *AddMFADeviceSyncRequest, opts ...grpc.CallOption) (*AddMFADeviceSyncResponse, error)
	// DeleteMFADeviceSync deletes a users MFA device (nonstream).
	//
	// A typical MFA deletion sequence calls the following RPCs:
	//
	//  1. (optional) CreateAuthenticateChallenge
	//     (may be skipped depending on the token used, but is usually called
	//     regardless)
	//  2. (optional) CreatePrivilegeToken
	//  3. DeleteMFADeviceSync (using either authn challenge or token)
	DeleteMFADeviceSync(ctx context.Context, in *DeleteMFADeviceSyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetMFADevices returns all MFA devices registered for the user calling
	// this RPC.
	GetMFADevices(ctx context.Context, in *GetMFADevicesRequest, opts ...grpc.CallOption) (*GetMFADevicesResponse, error)
	// CreateAuthenticateChallenge creates and returns MFA challenges for a users registered MFA
	// devices.
	CreateAuthenticateChallenge(ctx context.Context, in *CreateAuthenticateChallengeRequest, opts ...grpc.CallOption) (*MFAAuthenticateChallenge, error)
	// CreateRegisterChallenge creates and returns MFA register challenge for a new MFA device.
	CreateRegisterChallenge(ctx context.Context, in *CreateRegisterChallengeRequest, opts ...grpc.CallOption) (*MFARegisterChallenge, error)
	// GetOIDCConnector gets an OIDC connector resource by name.
	GetOIDCConnector(ctx context.Context, in *types.ResourceWithSecretsRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error)
	// GetOIDCConnectors gets all current OIDC connector resources.
	GetOIDCConnectors(ctx context.Context, in *types.ResourcesWithSecretsRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3List, error)
	// UpsertOIDCConnector creates a new OIDC connector in the backend.
	CreateOIDCConnector(ctx context.Context, in *CreateOIDCConnectorRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error)
	// UpsertOIDCConnector updates an existing OIDC connector in the backend.
	UpdateOIDCConnector(ctx context.Context, in *UpdateOIDCConnectorRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error)
	// Deprecated: Do not use.
	// UpsertOIDCConnector upserts an OIDC connector in a backend.
	//
	// Deprecated: Use UpsertOIDCConnectorV2 instead.
	UpsertOIDCConnector(ctx context.Context, in *types.OIDCConnectorV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertOIDCConnectorV2 upserts an OIDC connector in the backend.
	UpsertOIDCConnectorV2(ctx context.Context, in *UpsertOIDCConnectorRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error)
	// DeleteOIDCConnector deletes an existing OIDC connector in a backend by name.
	DeleteOIDCConnector(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateOIDCAuthRequest creates OIDCAuthRequest.
	CreateOIDCAuthRequest(ctx context.Context, in *types.OIDCAuthRequest, opts ...grpc.CallOption) (*types.OIDCAuthRequest, error)
	// GetOIDCAuthRequest returns OIDC auth request if found.
	GetOIDCAuthRequest(ctx context.Context, in *GetOIDCAuthRequestRequest, opts ...grpc.CallOption) (*types.OIDCAuthRequest, error)
	// GetSAMLConnector gets a SAML connector resource by name.
	GetSAMLConnector(ctx context.Context, in *types.ResourceWithSecretsRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error)
	// GetSAMLConnectors gets all current SAML connector resources.
	GetSAMLConnectors(ctx context.Context, in *types.ResourcesWithSecretsRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2List, error)
	// CreateSAMLConnector creates a new SAML connector in the backend.
	CreateSAMLConnector(ctx context.Context, in *CreateSAMLConnectorRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error)
	// UpdateSAMLConnector updates an existing SAML connector in the backend.
	UpdateSAMLConnector(ctx context.Context, in *UpdateSAMLConnectorRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error)
	// Deprecated: Do not use.
	// UpsertSAMLConnector upserts a SAML connector in a backend.
	//
	// Deprecated: Use UpsertSAMLConnectorV2 instead.
	UpsertSAMLConnector(ctx context.Context, in *types.SAMLConnectorV2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertSAMLConnectorV2 upserts a SAML connector in a backend.
	UpsertSAMLConnectorV2(ctx context.Context, in *UpsertSAMLConnectorRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error)
	// DeleteSAMLConnector deletes an existing SAML connector in a backend by name.
	DeleteSAMLConnector(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSAMLAuthRequest creates SAMLAuthRequest.
	CreateSAMLAuthRequest(ctx context.Context, in *types.SAMLAuthRequest, opts ...grpc.CallOption) (*types.SAMLAuthRequest, error)
	// GetSAMLAuthRequest returns SAML auth request if found.
	GetSAMLAuthRequest(ctx context.Context, in *GetSAMLAuthRequestRequest, opts ...grpc.CallOption) (*types.SAMLAuthRequest, error)
	// GetGithubConnector gets a Github connector resource by name.
	GetGithubConnector(ctx context.Context, in *types.ResourceWithSecretsRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error)
	// GetGithubConnectors gets all current Github connector resources.
	GetGithubConnectors(ctx context.Context, in *types.ResourcesWithSecretsRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3List, error)
	// CreateGithubConnector creates a new Github connector in the backend.
	CreateGithubConnector(ctx context.Context, in *CreateGithubConnectorRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error)
	// UpdateGithubConnector updates an existing Github connector in the backend.
	UpdateGithubConnector(ctx context.Context, in *UpdateGithubConnectorRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error)
	// Deprecated: Do not use.
	// UpsertGithubConnector upserts a Github connector in a backend.
	//
	// Deprecated: Use UpsertGithubConnectorV2 instead.
	UpsertGithubConnector(ctx context.Context, in *types.GithubConnectorV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertGithubConnectorV2 upserts a Github connector in a backend.
	UpsertGithubConnectorV2(ctx context.Context, in *UpsertGithubConnectorRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error)
	// DeleteGithubConnector deletes an existing Github connector in a backend by name.
	DeleteGithubConnector(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateGithubAuthRequest creates GithubAuthRequest.
	CreateGithubAuthRequest(ctx context.Context, in *types.GithubAuthRequest, opts ...grpc.CallOption) (*types.GithubAuthRequest, error)
	// GetGithubAuthRequest returns Github auth request if found.
	GetGithubAuthRequest(ctx context.Context, in *GetGithubAuthRequestRequest, opts ...grpc.CallOption) (*types.GithubAuthRequest, error)
	// GetSSODiagnosticInfo returns SSO diagnostic info records.
	GetSSODiagnosticInfo(ctx context.Context, in *GetSSODiagnosticInfoRequest, opts ...grpc.CallOption) (*types.SSODiagnosticInfo, error)
	// GetServerInfos returns a stream of ServerInfos.
	GetServerInfos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.ServerInfoV1], error)
	// GetServerInfo returns a ServerInfo by name.
	GetServerInfo(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.ServerInfoV1, error)
	// UpsertServerInfo upserts a ServerInfo.
	UpsertServerInfo(ctx context.Context, in *types.ServerInfoV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteServerInfo deletes a ServerInfo by name.
	DeleteServerInfo(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllServerInfos deletes all ServerInfos.
	DeleteAllServerInfos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTrustedCluster gets a Trusted Cluster resource by name.
	GetTrustedCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.TrustedClusterV2, error)
	// GetTrustedClusters gets all current Trusted Cluster resources.
	GetTrustedClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.TrustedClusterV2List, error)
	// Deprecated: Do not use.
	// UpsertTrustedCluster upserts a Trusted Cluster in a backend.
	//
	// Deprecated: Use [teleport.trust.v1.UpsertTrustedCluster] instead.
	UpsertTrustedCluster(ctx context.Context, in *types.TrustedClusterV2, opts ...grpc.CallOption) (*types.TrustedClusterV2, error)
	// DeleteTrustedCluster deletes an existing Trusted Cluster in a backend by name.
	DeleteTrustedCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetToken retrieves a token described by the given request.
	GetToken(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.ProvisionTokenV2, error)
	// GetToken retrieves all tokens.
	GetTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ProvisionTokenV2List, error)
	// CreateTokenV2 creates a token in a backend.
	CreateTokenV2(ctx context.Context, in *CreateTokenV2Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertTokenV2 upserts a token in a backend.
	UpsertTokenV2(ctx context.Context, in *UpsertTokenV2Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteToken deletes an existing token in a backend described by the given request.
	DeleteToken(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetClusterAuditConfig gets cluster audit configuration.
	GetClusterAuditConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ClusterAuditConfigV2, error)
	// Deprecated: Do not use.
	// GetClusterNetworkingConfig gets cluster networking configuration.
	// Deprecated: Use clusterconfigv1.Service.GetClusterNetworkingConfig instead.
	GetClusterNetworkingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ClusterNetworkingConfigV2, error)
	// Deprecated: Do not use.
	// SetClusterNetworkingConfig sets cluster networking configuration.
	// Deprecated: Use clusterconfigv1.Service.Update/UpsertClusterNetworkingConfig instead.
	SetClusterNetworkingConfig(ctx context.Context, in *types.ClusterNetworkingConfigV2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// ResetClusterNetworkingConfig resets cluster networking configuration to defaults.
	// Deprecated: Use clusterconfigv1.Service.ResetClusterNetworkingConfig instead.
	ResetClusterNetworkingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// GetSessionRecordingConfig gets session recording configuration.
	// Deprecated: Use clusterconfigv1.Service.GetSessionRecordingConfig instead.
	GetSessionRecordingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.SessionRecordingConfigV2, error)
	// Deprecated: Do not use.
	// SetSessionRecordingConfig sets session recording configuration.
	// Deprecated: Use clusterconfigv1.Service.Upsert/UpdateSessionRecordingConfig instead.
	SetSessionRecordingConfig(ctx context.Context, in *types.SessionRecordingConfigV2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// ResetSessionRecordingConfig resets session recording configuration to defaults.
	// Deprecated: Use clusterconfigv1.Service.ResetSessionRecordingConfig instead.
	ResetSessionRecordingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// GetAuthPreference gets cluster auth preference.
	// Deprecated: Use clusterconfigv1.Service.GetAuthPreference instead.
	GetAuthPreference(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.AuthPreferenceV2, error)
	// Deprecated: Do not use.
	// SetAuthPreference sets cluster auth preference.
	// Deprecated: Use clusterconfigv1.Service.Create/Update/UpsertAuthPreference instead.
	SetAuthPreference(ctx context.Context, in *types.AuthPreferenceV2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// ResetAuthPreference resets cluster auth preference to defaults.
	// Deprecated: Use clusterconfigv1.Service.ResetAuthPreference instead.
	ResetAuthPreference(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetUIConfig gets the configuration for the UI served by the proxy service
	GetUIConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.UIConfigV1, error)
	// SetUIConfig sets the configuration for the UI served by the proxy service
	SetUIConfig(ctx context.Context, in *types.UIConfigV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteUIConfig deletes the custom configuration for the UI served by the proxy service
	DeleteUIConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetEvents gets events from the audit log.
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error)
	// GetSessionEvents gets completed session events from the audit log.
	GetSessionEvents(ctx context.Context, in *GetSessionEventsRequest, opts ...grpc.CallOption) (*Events, error)
	// GetLock gets a lock by name.
	GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*types.LockV2, error)
	// GetLocks gets all/in-force locks that match at least one of the targets when specified.
	GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error)
	// UpsertLock upserts a lock.
	UpsertLock(ctx context.Context, in *types.LockV2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteLock deletes a lock.
	DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ReplaceRemoteLocks replaces the set of locks associated with a remote cluster.
	ReplaceRemoteLocks(ctx context.Context, in *ReplaceRemoteLocksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// StreamSessionEvents streams audit events from a given session recording.
	StreamSessionEvents(ctx context.Context, in *StreamSessionEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[events.OneOf], error)
	// GetNetworkRestrictions retrieves all the network restrictions (allow/deny lists).
	GetNetworkRestrictions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.NetworkRestrictionsV4, error)
	// SetNetworkRestrictions updates the network restrictions.
	SetNetworkRestrictions(ctx context.Context, in *types.NetworkRestrictionsV4, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteNetworkRestrictions delete the network restrictions.
	DeleteNetworkRestrictions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetApps returns all registered applications.
	GetApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.AppV3List, error)
	// GetApp returns an application by name.
	GetApp(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.AppV3, error)
	// CreateApp creates a new application resource.
	CreateApp(ctx context.Context, in *types.AppV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateApp updates existing application resource.
	UpdateApp(ctx context.Context, in *types.AppV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteApp removes specified application resource.
	DeleteApp(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllApps removes all application resources.
	DeleteAllApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetDatabases returns all registered databases.
	GetDatabases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.DatabaseV3List, error)
	// GetDatabase returns a database by name.
	GetDatabase(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.DatabaseV3, error)
	// CreateDatabase creates a new database resource.
	CreateDatabase(ctx context.Context, in *types.DatabaseV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateDatabase updates existing database resource.
	UpdateDatabase(ctx context.Context, in *types.DatabaseV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteDatabase removes specified database resource.
	DeleteDatabase(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllDatabases removes all database resources.
	DeleteAllDatabases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetKubernetesClusters returns all registered kubernetes clusters.
	GetKubernetesClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.KubernetesClusterV3List, error)
	// GetKubernetesCluster returns a kubernetes cluster by name.
	GetKubernetesCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.KubernetesClusterV3, error)
	// CreateKubernetesCluster creates a new kubernetes cluster resource.
	CreateKubernetesCluster(ctx context.Context, in *types.KubernetesClusterV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateKubernetesCluster updates existing kubernetes cluster resource.
	UpdateKubernetesCluster(ctx context.Context, in *types.KubernetesClusterV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteKubernetesCluster removes specified kubernetes cluster resource.
	DeleteKubernetesCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllKubernetesClusters removes all kubernetes cluster resources.
	DeleteAllKubernetesClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetWindowsDesktopServices returns all registered Windows desktop services.
	GetWindowsDesktopServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWindowsDesktopServicesResponse, error)
	// GetWindowsDesktopService gets a Windows desktop service by name.
	GetWindowsDesktopService(ctx context.Context, in *GetWindowsDesktopServiceRequest, opts ...grpc.CallOption) (*GetWindowsDesktopServiceResponse, error)
	// UpsertWindowsDesktopService registers a new Windows desktop service.
	UpsertWindowsDesktopService(ctx context.Context, in *types.WindowsDesktopServiceV3, opts ...grpc.CallOption) (*types.KeepAlive, error)
	// DeleteWindowsDesktopService removes the specified Windows desktop service.
	DeleteWindowsDesktopService(ctx context.Context, in *DeleteWindowsDesktopServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllWindowsDesktopServices removes all registered Windows desktop services.
	DeleteAllWindowsDesktopServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetWindowsDesktops returns all registered Windows desktop hosts matching the supplied filter.
	GetWindowsDesktops(ctx context.Context, in *types.WindowsDesktopFilter, opts ...grpc.CallOption) (*GetWindowsDesktopsResponse, error)
	// CreateWindowsDesktop registers a new Windows desktop host.
	CreateWindowsDesktop(ctx context.Context, in *types.WindowsDesktopV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateWindowsDesktop updates an existing Windows desktop host.
	UpdateWindowsDesktop(ctx context.Context, in *types.WindowsDesktopV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertWindowsDesktop updates a Windows desktop host, creating it if it doesn't exist.
	UpsertWindowsDesktop(ctx context.Context, in *types.WindowsDesktopV3, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteWindowsDesktop removes the specified Windows desktop host.
	// Unlike GetWindowsDesktops, this call will delete at-most 1 desktop.
	// To delete all desktops, use DeleteAllWindowsDesktops.
	DeleteWindowsDesktop(ctx context.Context, in *DeleteWindowsDesktopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllWindowsDesktops removes all registered Windows desktop hosts.
	DeleteAllWindowsDesktops(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GenerateWindowsDesktopCert generates client smartcard certificate used
	// by an RDP client to authenticate with Windows.
	GenerateWindowsDesktopCert(ctx context.Context, in *WindowsDesktopCertRequest, opts ...grpc.CallOption) (*WindowsDesktopCertResponse, error)
	// GenerateCertAuthorityCRL creates an empty CRL for the specified CA.
	GenerateCertAuthorityCRL(ctx context.Context, in *CertAuthorityRequest, opts ...grpc.CallOption) (*CRL, error)
	// GetDesktopBootstrapScript returns a PowerShell script to bootstrap Active Directory.
	GetDesktopBootstrapScript(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DesktopBootstrapScriptResponse, error)
	// CreateConnectionDiagnostic creates a new connection diagnostic.
	CreateConnectionDiagnostic(ctx context.Context, in *types.ConnectionDiagnosticV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateConnectionDiagnostic updates a connection diagnostic.
	UpdateConnectionDiagnostic(ctx context.Context, in *types.ConnectionDiagnosticV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetConnectionDiagnostic reads a connection diagnostic.
	GetConnectionDiagnostic(ctx context.Context, in *GetConnectionDiagnosticRequest, opts ...grpc.CallOption) (*types.ConnectionDiagnosticV1, error)
	// AppendDiagnosticTrace appends a Trace to the ConnectionDiagnostic.
	AppendDiagnosticTrace(ctx context.Context, in *AppendDiagnosticTraceRequest, opts ...grpc.CallOption) (*types.ConnectionDiagnosticV1, error)
	// ChangeUserAuthentication allows a user to change their password and if enabled,
	// also adds a new MFA device. After successful invocation, a new web session is created as well
	// as a new set of recovery codes (if user meets the requirements to receive them), invalidating
	// any existing codes the user previously had.
	//
	// Only local users may be targeted by this RPC.
	ChangeUserAuthentication(ctx context.Context, in *ChangeUserAuthenticationRequest, opts ...grpc.CallOption) (*ChangeUserAuthenticationResponse, error)
	// StartAccountRecovery (exclusive to cloud users) is the first out of two step user
	// verification needed to allow a user to recover their account. The first form of verification
	// is a user's username and a recovery code. After successful verification, a recovery start
	// token is created for the user which its ID will be used as part of a URL that will be emailed
	// to the user (not done in this request). The user will be able to finish their second form of
	// verification by clicking on this URL and following the prompts.
	//
	// If a valid user fails to provide correct recovery code for MaxAccountRecoveryAttempts,
	// user account gets temporarily locked from further recovery attempts and from logging in.
	//
	// Start tokens last RecoveryStartTokenTTL.
	//
	// Only local users may perform account recovery
	StartAccountRecovery(ctx context.Context, in *StartAccountRecoveryRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error)
	// VerifyAccountRecovery (exclusive to cloud users) is the second step of the two step
	// verification needed to allow a user to recover their account, after RPC StartAccountRecovery.
	// The second form of verification is a user's password or their second factor (depending on
	// what authentication they needed to recover). After successful verification, a recovery
	// approved token is created which allows a user to request protected actions while not logged
	// in e.g: setting a new password or a mfa device, viewing their MFA devices, deleting their MFA
	// devices, and generating new recovery codes.
	//
	// The recovery start token to verify this request becomes deleted before
	// creating a recovery approved token, which invalidates the recovery link users received
	// to finish their verification.
	//
	// If user fails to verify themselves for MaxAccountRecoveryAttempts
	// (combined attempts with RPC StartAccountRecovery), users account will be temporarily locked
	// from logging in. If users still have unused recovery codes left, they still have
	// opportunities to recover their account. To allow this, users recovery attempts are also
	// deleted along with all user tokens which will force the user to restart the recovery process
	// from step 1 (RPC StartAccountRecovery).
	//
	// Recovery approved tokens last RecoveryApprovedTokenTTL.
	VerifyAccountRecovery(ctx context.Context, in *VerifyAccountRecoveryRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error)
	// CompleteAccountRecovery (exclusive to cloud users) is the last step in account
	// recovery, after RPC's StartAccountRecovery and VerifyAccountRecovery. This step sets a new
	// password or adds a new mfa device, allowing the user to regain access to their account with
	// the new credentials. When the new authentication is successfully set, any user lock is
	// removed so the user can login immediately afterwards.
	CompleteAccountRecovery(ctx context.Context, in *CompleteAccountRecoveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateAccountRecoveryCodes (exclusive to cloud users) creates new set of recovery codes for a
	// user, replacing and invalidating any previously owned codes. Users can only get recovery
	// codes if their username is in a valid email format.
	CreateAccountRecoveryCodes(ctx context.Context, in *CreateAccountRecoveryCodesRequest, opts ...grpc.CallOption) (*RecoveryCodes, error)
	// GetAccountRecoveryToken (exclusive to cloud users) returns a user token resource after
	// verifying that the token requested has not expired and is of the correct recovery kind.
	// Besides checking for validity of a token ID, it is also used to get basic information from
	// the token e.g: username, state of recovery (started or approved) and the type of recovery
	// requested (password or second factor).
	GetAccountRecoveryToken(ctx context.Context, in *GetAccountRecoveryTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error)
	// GetAccountRecoveryCodes (exclusive to cloud users) is a request to return the user in context
	// their recovery codes. This request will not return any secrets (the values of recovery
	// codes), but instead returns non-sensitive data eg. when the recovery codes were created.
	GetAccountRecoveryCodes(ctx context.Context, in *GetAccountRecoveryCodesRequest, opts ...grpc.CallOption) (*RecoveryCodes, error)
	// CreatePrivilegeToken returns a new privilege token after a logged in user successfully
	// re-authenticates with their second factor device. Privilege token lasts PrivilegeTokenTTL and
	// is used to gain access to privileged actions eg: deleting/adding a MFA device.
	CreatePrivilegeToken(ctx context.Context, in *CreatePrivilegeTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error)
	// GetInstaller retrieves the installer script resource
	GetInstaller(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.InstallerV1, error)
	// GetInstallers retrieves all of installer script resources.
	GetInstallers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.InstallerV1List, error)
	// SetInstaller sets the installer script resource
	SetInstaller(ctx context.Context, in *types.InstallerV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteInstaller removes the specified installer script resource
	DeleteInstaller(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllInstallers removes all installer script resources
	DeleteAllInstallers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListResources retrieves a paginated list of resources.
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	// ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
	ListUnifiedResources(ctx context.Context, in *ListUnifiedResourcesRequest, opts ...grpc.CallOption) (*ListUnifiedResourcesResponse, error)
	// GetSSHTargets gets all servers that would match an equivalent ssh dial request. Note that this method
	// returns all resources directly accessible to the user *and* all resources available via 'SearchAsRoles',
	// which is what we want when handling things like ambiguous host errors and resource-based access requests,
	// but may result in confusing behavior if it is used outside of those contexts.
	GetSSHTargets(ctx context.Context, in *GetSSHTargetsRequest, opts ...grpc.CallOption) (*GetSSHTargetsResponse, error)
	// ResolveSSHTarget returns the server that would be resolved in an equivalent ssh dial request.
	ResolveSSHTarget(ctx context.Context, in *ResolveSSHTargetRequest, opts ...grpc.CallOption) (*ResolveSSHTargetResponse, error)
	// GetDomainName returns local auth domain of the current auth server
	GetDomainName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDomainNameResponse, error)
	// GetClusterCACert returns the PEM-encoded TLS certs for the local cluster
	// without signing keys. If the cluster has multiple TLS certs, they will
	// all be appended.
	GetClusterCACert(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClusterCACertResponse, error)
	// AssertSystemRole is used by agents to prove that they have a given system role when their
	// credentials originate from multiple separate join tokens so that they can be issued an instance
	// certificate that encompasses all of their capabilities. This method will be deprecated once we
	// have a more comprehensive model for join token joining/replacement.
	AssertSystemRole(ctx context.Context, in *SystemRoleAssertion, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SubmitUsageEvent submits an external usage event.
	SubmitUsageEvent(ctx context.Context, in *SubmitUsageEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetLicense returns the license used to start the auth server.
	GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error)
	// ListReleases returns a list of Teleport Enterprise releases.
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error)
	// ListSAMLIdPServiceProviders returns a paginated list of SAML IdP service provider resources.
	ListSAMLIdPServiceProviders(ctx context.Context, in *ListSAMLIdPServiceProvidersRequest, opts ...grpc.CallOption) (*ListSAMLIdPServiceProvidersResponse, error)
	// GetSAMLIdPServiceProvider returns the specified SAML IdP service provider resources.
	GetSAMLIdPServiceProvider(ctx context.Context, in *GetSAMLIdPServiceProviderRequest, opts ...grpc.CallOption) (*types.SAMLIdPServiceProviderV1, error)
	// CreateSAMLIdPServiceProvider creates a new SAML IdP service provider resource.
	CreateSAMLIdPServiceProvider(ctx context.Context, in *types.SAMLIdPServiceProviderV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateSAMLIdPServiceProvider updates an existing SAML IdP service provider resource.
	UpdateSAMLIdPServiceProvider(ctx context.Context, in *types.SAMLIdPServiceProviderV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteSAMLIdPServiceProvider removes the specified SAML IdP service provider resource.
	DeleteSAMLIdPServiceProvider(ctx context.Context, in *DeleteSAMLIdPServiceProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllSAMLIdPServiceProviders removes all SAML IdP service providers.
	DeleteAllSAMLIdPServiceProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListUserGroups returns a paginated list of user group resources.
	ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	// GetUserGroup returns the specified user group resource.
	GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*types.UserGroupV1, error)
	// CreateUserGroup creates a new user group resource.
	CreateUserGroup(ctx context.Context, in *types.UserGroupV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateUserGroup updates an existing user group resource.
	UpdateUserGroup(ctx context.Context, in *types.UserGroupV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteUserGroup removes the specified user group resource.
	DeleteUserGroup(ctx context.Context, in *DeleteUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAllUserGroups removes all user groups.
	DeleteAllUserGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetHeadlessAuthentication is a request to retrieve a headless authentication from the backend.
	GetHeadlessAuthentication(ctx context.Context, in *GetHeadlessAuthenticationRequest, opts ...grpc.CallOption) (*types.HeadlessAuthentication, error)
	// WatchPendingHeadlessAuthentications watches the backend for pending headless authentication requests for the user.
	WatchPendingHeadlessAuthentications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	// UpdateHeadlessAuthenticationState is a request to update a headless authentication's state.
	UpdateHeadlessAuthenticationState(ctx context.Context, in *UpdateHeadlessAuthenticationStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ExportUpgradeWindows is used to load derived maintenance window values for agents that
	// need to export schedules to external upgraders.
	ExportUpgradeWindows(ctx context.Context, in *ExportUpgradeWindowsRequest, opts ...grpc.CallOption) (*ExportUpgradeWindowsResponse, error)
	// GetClusterMaintenanceConfig gets the current maintenance window config singleton.
	GetClusterMaintenanceConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ClusterMaintenanceConfigV1, error)
	// UpdateClusterMaintenanceConfig updates the current maintenance window config singleton.
	UpdateClusterMaintenanceConfig(ctx context.Context, in *types.ClusterMaintenanceConfigV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteClusterMaintenanceConfig deletes the current maintenance window config singleton.
	DeleteClusterMaintenanceConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) InventoryControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpstreamInventoryOneOf, DownstreamInventoryOneOf], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[0], AuthService_InventoryControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpstreamInventoryOneOf, DownstreamInventoryOneOf]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_InventoryControlStreamClient = grpc.BidiStreamingClient[UpstreamInventoryOneOf, DownstreamInventoryOneOf]

func (c *authServiceClient) GetInventoryStatus(ctx context.Context, in *InventoryStatusRequest, opts ...grpc.CallOption) (*InventoryStatusSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryStatusSummary)
	err := c.cc.Invoke(ctx, AuthService_GetInventoryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetInventoryConnectedServiceCounts(ctx context.Context, in *InventoryConnectedServiceCountsRequest, opts ...grpc.CallOption) (*InventoryConnectedServiceCounts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryConnectedServiceCounts)
	err := c.cc.Invoke(ctx, AuthService_GetInventoryConnectedServiceCounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) PingInventory(ctx context.Context, in *InventoryPingRequest, opts ...grpc.CallOption) (*InventoryPingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryPingResponse)
	err := c.cc.Invoke(ctx, AuthService_PingInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetInstances(ctx context.Context, in *types.InstanceFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.InstanceV1], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[1], AuthService_GetInstances_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[types.InstanceFilter, types.InstanceV1]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetInstancesClient = grpc.ServerStreamingClient[types.InstanceV1]

func (c *authServiceClient) GetClusterAlerts(ctx context.Context, in *types.GetClusterAlertsRequest, opts ...grpc.CallOption) (*GetClusterAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterAlertsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetClusterAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertClusterAlert(ctx context.Context, in *UpsertClusterAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertClusterAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAlertAck(ctx context.Context, in *types.AlertAcknowledgement, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateAlertAck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAlertAcks(ctx context.Context, in *GetAlertAcksRequest, opts ...grpc.CallOption) (*GetAlertAcksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertAcksResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAlertAcks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ClearAlertAcks(ctx context.Context, in *ClearAlertAcksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ClearAlertAcks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MaintainSessionPresence(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PresenceMFAChallengeSend, MFAAuthenticateChallenge], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[2], AuthService_MaintainSessionPresence_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PresenceMFAChallengeSend, MFAAuthenticateChallenge]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_MaintainSessionPresenceClient = grpc.BidiStreamingClient[PresenceMFAChallengeSend, MFAAuthenticateChallenge]

func (c *authServiceClient) CreateSessionTracker(ctx context.Context, in *CreateSessionTrackerRequest, opts ...grpc.CallOption) (*types.SessionTrackerV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SessionTrackerV1)
	err := c.cc.Invoke(ctx, AuthService_CreateSessionTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSessionTracker(ctx context.Context, in *GetSessionTrackerRequest, opts ...grpc.CallOption) (*types.SessionTrackerV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SessionTrackerV1)
	err := c.cc.Invoke(ctx, AuthService_GetSessionTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetActiveSessionTrackers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.SessionTrackerV1], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[3], AuthService_GetActiveSessionTrackers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, types.SessionTrackerV1]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetActiveSessionTrackersClient = grpc.ServerStreamingClient[types.SessionTrackerV1]

func (c *authServiceClient) GetActiveSessionTrackersWithFilter(ctx context.Context, in *types.SessionTrackerFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.SessionTrackerV1], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[4], AuthService_GetActiveSessionTrackersWithFilter_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[types.SessionTrackerFilter, types.SessionTrackerV1]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetActiveSessionTrackersWithFilterClient = grpc.ServerStreamingClient[types.SessionTrackerV1]

func (c *authServiceClient) RemoveSessionTracker(ctx context.Context, in *RemoveSessionTrackerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_RemoveSessionTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSessionTracker(ctx context.Context, in *UpdateSessionTrackerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateSessionTracker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SendKeepAlives(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[types.KeepAlive, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[5], AuthService_SendKeepAlives_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[types.KeepAlive, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_SendKeepAlivesClient = grpc.ClientStreamingClient[types.KeepAlive, emptypb.Empty]

func (c *authServiceClient) WatchEvents(ctx context.Context, in *Watch, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[6], AuthService_WatchEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Watch, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_WatchEventsClient = grpc.ServerStreamingClient[Event]

func (c *authServiceClient) GetNode(ctx context.Context, in *types.ResourceInNamespaceRequest, opts ...grpc.CallOption) (*types.ServerV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ServerV2)
	err := c.cc.Invoke(ctx, AuthService_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertNode(ctx context.Context, in *types.ServerV2, opts ...grpc.CallOption) (*types.KeepAlive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KeepAlive)
	err := c.cc.Invoke(ctx, AuthService_UpsertNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteNode(ctx context.Context, in *types.ResourceInNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllNodes(ctx context.Context, in *types.ResourcesInNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateUserCerts(ctx context.Context, in *UserCertsRequest, opts ...grpc.CallOption) (*Certs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Certs)
	err := c.cc.Invoke(ctx, AuthService_GenerateUserCerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateHostCerts(ctx context.Context, in *HostCertsRequest, opts ...grpc.CallOption) (*Certs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Certs)
	err := c.cc.Invoke(ctx, AuthService_GenerateHostCerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GenerateUserSingleUseCerts(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserSingleUseCertsRequest, UserSingleUseCertsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[7], AuthService_GenerateUserSingleUseCerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserSingleUseCertsRequest, UserSingleUseCertsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GenerateUserSingleUseCertsClient = grpc.BidiStreamingClient[UserSingleUseCertsRequest, UserSingleUseCertsResponse]

func (c *authServiceClient) GenerateOpenSSHCert(ctx context.Context, in *OpenSSHCertRequest, opts ...grpc.CallOption) (*OpenSSHCert, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenSSHCert)
	err := c.cc.Invoke(ctx, AuthService_GenerateOpenSSHCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) IsMFARequired(ctx context.Context, in *IsMFARequiredRequest, opts ...grpc.CallOption) (*IsMFARequiredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMFARequiredResponse)
	err := c.cc.Invoke(ctx, AuthService_IsMFARequired_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAccessRequestsV2(ctx context.Context, in *types.AccessRequestFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.AccessRequestV3], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[8], AuthService_GetAccessRequestsV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[types.AccessRequestFilter, types.AccessRequestV3]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetAccessRequestsV2Client = grpc.ServerStreamingClient[types.AccessRequestV3]

func (c *authServiceClient) ListAccessRequests(ctx context.Context, in *ListAccessRequestsRequest, opts ...grpc.CallOption) (*ListAccessRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessRequestsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListAccessRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAccessRequestV2(ctx context.Context, in *types.AccessRequestV3, opts ...grpc.CallOption) (*types.AccessRequestV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AccessRequestV3)
	err := c.cc.Invoke(ctx, AuthService_CreateAccessRequestV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAccessRequest(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAccessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetAccessRequestState(ctx context.Context, in *RequestStateSetter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SetAccessRequestState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SubmitAccessReview(ctx context.Context, in *types.AccessReviewSubmission, opts ...grpc.CallOption) (*types.AccessRequestV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AccessRequestV3)
	err := c.cc.Invoke(ctx, AuthService_SubmitAccessReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAccessCapabilities(ctx context.Context, in *types.AccessCapabilitiesRequest, opts ...grpc.CallOption) (*types.AccessCapabilities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AccessCapabilities)
	err := c.cc.Invoke(ctx, AuthService_GetAccessCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAccessRequestAllowedPromotions(ctx context.Context, in *AccessRequestAllowedPromotionRequest, opts ...grpc.CallOption) (*AccessRequestAllowedPromotionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessRequestAllowedPromotionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAccessRequestAllowedPromotions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetPluginData(ctx context.Context, in *types.PluginDataFilter, opts ...grpc.CallOption) (*PluginDataSeq, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginDataSeq)
	err := c.cc.Invoke(ctx, AuthService_GetPluginData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdatePluginData(ctx context.Context, in *types.PluginDataUpdateParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdatePluginData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, AuthService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetResetPasswordToken(ctx context.Context, in *GetResetPasswordTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserTokenV3)
	err := c.cc.Invoke(ctx, AuthService_GetResetPasswordToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateResetPasswordToken(ctx context.Context, in *CreateResetPasswordTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserTokenV3)
	err := c.cc.Invoke(ctx, AuthService_CreateResetPasswordToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*types.UserV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserV2)
	err := c.cc.Invoke(ctx, AuthService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.UserV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserV2)
	err := c.cc.Invoke(ctx, AuthService_GetCurrentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetCurrentUserRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.RoleV6], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[9], AuthService_GetCurrentUserRoles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, types.RoleV6]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetCurrentUserRolesClient = grpc.ServerStreamingClient[types.RoleV6]

// Deprecated: Do not use.
func (c *authServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.UserV2], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[10], AuthService_GetUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUsersRequest, types.UserV2]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetUsersClient = grpc.ServerStreamingClient[types.UserV2]

// Deprecated: Do not use.
func (c *authServiceClient) CreateUser(ctx context.Context, in *types.UserV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) UpdateUser(ctx context.Context, in *types.UserV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AcquireSemaphore(ctx context.Context, in *types.AcquireSemaphoreRequest, opts ...grpc.CallOption) (*types.SemaphoreLease, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SemaphoreLease)
	err := c.cc.Invoke(ctx, AuthService_AcquireSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) KeepAliveSemaphoreLease(ctx context.Context, in *types.SemaphoreLease, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_KeepAliveSemaphoreLease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CancelSemaphoreLease(ctx context.Context, in *types.SemaphoreLease, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CancelSemaphoreLease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSemaphores(ctx context.Context, in *types.SemaphoreFilter, opts ...grpc.CallOption) (*Semaphores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Semaphores)
	err := c.cc.Invoke(ctx, AuthService_GetSemaphores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSemaphore(ctx context.Context, in *types.SemaphoreFilter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteSemaphore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EmitAuditEvent(ctx context.Context, in *events.OneOf, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EmitAuditEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAuditStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuditStreamRequest, events.StreamStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[11], AuthService_CreateAuditStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AuditStreamRequest, events.StreamStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_CreateAuditStreamClient = grpc.BidiStreamingClient[AuditStreamRequest, events.StreamStatus]

func (c *authServiceClient) UpsertApplicationServer(ctx context.Context, in *UpsertApplicationServerRequest, opts ...grpc.CallOption) (*types.KeepAlive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KeepAlive)
	err := c.cc.Invoke(ctx, AuthService_UpsertApplicationServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteApplicationServer(ctx context.Context, in *DeleteApplicationServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteApplicationServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllApplicationServers(ctx context.Context, in *DeleteAllApplicationServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllApplicationServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateAppToken(ctx context.Context, in *GenerateAppTokenRequest, opts ...grpc.CallOption) (*GenerateAppTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateAppTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateAppToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAppSession(ctx context.Context, in *GetAppSessionRequest, opts ...grpc.CallOption) (*GetAppSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAppSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListAppSessions(ctx context.Context, in *ListAppSessionsRequest, opts ...grpc.CallOption) (*ListAppSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppSessionsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListAppSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAppSession(ctx context.Context, in *CreateAppSessionRequest, opts ...grpc.CallOption) (*CreateAppSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateAppSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAppSession(ctx context.Context, in *DeleteAppSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAppSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllAppSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllAppSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUserAppSessions(ctx context.Context, in *DeleteUserAppSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteUserAppSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateSnowflakeSession(ctx context.Context, in *CreateSnowflakeSessionRequest, opts ...grpc.CallOption) (*CreateSnowflakeSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnowflakeSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateSnowflakeSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSnowflakeSession(ctx context.Context, in *GetSnowflakeSessionRequest, opts ...grpc.CallOption) (*GetSnowflakeSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSnowflakeSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSnowflakeSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSnowflakeSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSnowflakeSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSnowflakeSessionsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSnowflakeSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSnowflakeSession(ctx context.Context, in *DeleteSnowflakeSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteSnowflakeSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllSnowflakeSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllSnowflakeSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) CreateSAMLIdPSession(ctx context.Context, in *CreateSAMLIdPSessionRequest, opts ...grpc.CallOption) (*CreateSAMLIdPSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSAMLIdPSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateSAMLIdPSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GetSAMLIdPSession(ctx context.Context, in *GetSAMLIdPSessionRequest, opts ...grpc.CallOption) (*GetSAMLIdPSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSAMLIdPSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSAMLIdPSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) ListSAMLIdPSessions(ctx context.Context, in *ListSAMLIdPSessionsRequest, opts ...grpc.CallOption) (*ListSAMLIdPSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLIdPSessionsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListSAMLIdPSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) DeleteSAMLIdPSession(ctx context.Context, in *DeleteSAMLIdPSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteSAMLIdPSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) DeleteAllSAMLIdPSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllSAMLIdPSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) DeleteUserSAMLIdPSessions(ctx context.Context, in *DeleteUserSAMLIdPSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteUserSAMLIdPSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetWebSession(ctx context.Context, in *types.GetWebSessionRequest, opts ...grpc.CallOption) (*GetWebSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebSessionResponse)
	err := c.cc.Invoke(ctx, AuthService_GetWebSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GetWebSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWebSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebSessionsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetWebSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) StreamWebSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.WebSessionV2], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[12], AuthService_StreamWebSessions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, types.WebSessionV2]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_StreamWebSessionsClient = grpc.ServerStreamingClient[types.WebSessionV2]

func (c *authServiceClient) DeleteWebSession(ctx context.Context, in *types.DeleteWebSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteWebSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllWebSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllWebSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetWebToken(ctx context.Context, in *types.GetWebTokenRequest, opts ...grpc.CallOption) (*GetWebTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_GetWebToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetWebTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWebTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebTokensResponse)
	err := c.cc.Invoke(ctx, AuthService_GetWebTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteWebToken(ctx context.Context, in *types.DeleteWebTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteWebToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllWebTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllWebTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateRemoteCluster(ctx context.Context, in *types.RemoteClusterV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateRemoteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertKubernetesServer(ctx context.Context, in *UpsertKubernetesServerRequest, opts ...grpc.CallOption) (*types.KeepAlive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KeepAlive)
	err := c.cc.Invoke(ctx, AuthService_UpsertKubernetesServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteKubernetesServer(ctx context.Context, in *DeleteKubernetesServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteKubernetesServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllKubernetesServers(ctx context.Context, in *DeleteAllKubernetesServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllKubernetesServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertDatabaseServer(ctx context.Context, in *UpsertDatabaseServerRequest, opts ...grpc.CallOption) (*types.KeepAlive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KeepAlive)
	err := c.cc.Invoke(ctx, AuthService_UpsertDatabaseServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteDatabaseServer(ctx context.Context, in *DeleteDatabaseServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteDatabaseServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllDatabaseServers(ctx context.Context, in *DeleteAllDatabaseServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllDatabaseServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertDatabaseService(ctx context.Context, in *UpsertDatabaseServiceRequest, opts ...grpc.CallOption) (*types.KeepAlive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KeepAlive)
	err := c.cc.Invoke(ctx, AuthService_UpsertDatabaseService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteDatabaseService(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteDatabaseService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllDatabaseServices(ctx context.Context, in *DeleteAllDatabaseServicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllDatabaseServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignDatabaseCSR(ctx context.Context, in *DatabaseCSRRequest, opts ...grpc.CallOption) (*DatabaseCSRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseCSRResponse)
	err := c.cc.Invoke(ctx, AuthService_SignDatabaseCSR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateDatabaseCert(ctx context.Context, in *DatabaseCertRequest, opts ...grpc.CallOption) (*DatabaseCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseCertResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateDatabaseCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateSnowflakeJWT(ctx context.Context, in *SnowflakeJWTRequest, opts ...grpc.CallOption) (*SnowflakeJWTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnowflakeJWTResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateSnowflakeJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.RoleV6)
	err := c.cc.Invoke(ctx, AuthService_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, AuthService_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.RoleV6)
	err := c.cc.Invoke(ctx, AuthService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.RoleV6)
	err := c.cc.Invoke(ctx, AuthService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertRoleV2(ctx context.Context, in *UpsertRoleRequest, opts ...grpc.CallOption) (*types.RoleV6, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.RoleV6)
	err := c.cc.Invoke(ctx, AuthService_UpsertRoleV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) UpsertRole(ctx context.Context, in *types.RoleV6, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) AddMFADevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AddMFADeviceRequest, AddMFADeviceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[13], AuthService_AddMFADevice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AddMFADeviceRequest, AddMFADeviceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_AddMFADeviceClient = grpc.BidiStreamingClient[AddMFADeviceRequest, AddMFADeviceResponse]

// Deprecated: Do not use.
func (c *authServiceClient) DeleteMFADevice(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteMFADeviceRequest, DeleteMFADeviceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[14], AuthService_DeleteMFADevice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeleteMFADeviceRequest, DeleteMFADeviceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_DeleteMFADeviceClient = grpc.BidiStreamingClient[DeleteMFADeviceRequest, DeleteMFADeviceResponse]

func (c *authServiceClient) AddMFADeviceSync(ctx context.Context, in *AddMFADeviceSyncRequest, opts ...grpc.CallOption) (*AddMFADeviceSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMFADeviceSyncResponse)
	err := c.cc.Invoke(ctx, AuthService_AddMFADeviceSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteMFADeviceSync(ctx context.Context, in *DeleteMFADeviceSyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteMFADeviceSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMFADevices(ctx context.Context, in *GetMFADevicesRequest, opts ...grpc.CallOption) (*GetMFADevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMFADevicesResponse)
	err := c.cc.Invoke(ctx, AuthService_GetMFADevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAuthenticateChallenge(ctx context.Context, in *CreateAuthenticateChallengeRequest, opts ...grpc.CallOption) (*MFAAuthenticateChallenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MFAAuthenticateChallenge)
	err := c.cc.Invoke(ctx, AuthService_CreateAuthenticateChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateRegisterChallenge(ctx context.Context, in *CreateRegisterChallengeRequest, opts ...grpc.CallOption) (*MFARegisterChallenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MFARegisterChallenge)
	err := c.cc.Invoke(ctx, AuthService_CreateRegisterChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetOIDCConnector(ctx context.Context, in *types.ResourceWithSecretsRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.OIDCConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_GetOIDCConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetOIDCConnectors(ctx context.Context, in *types.ResourcesWithSecretsRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.OIDCConnectorV3List)
	err := c.cc.Invoke(ctx, AuthService_GetOIDCConnectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateOIDCConnector(ctx context.Context, in *CreateOIDCConnectorRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.OIDCConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_CreateOIDCConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateOIDCConnector(ctx context.Context, in *UpdateOIDCConnectorRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.OIDCConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_UpdateOIDCConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) UpsertOIDCConnector(ctx context.Context, in *types.OIDCConnectorV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertOIDCConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertOIDCConnectorV2(ctx context.Context, in *UpsertOIDCConnectorRequest, opts ...grpc.CallOption) (*types.OIDCConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.OIDCConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_UpsertOIDCConnectorV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteOIDCConnector(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteOIDCConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateOIDCAuthRequest(ctx context.Context, in *types.OIDCAuthRequest, opts ...grpc.CallOption) (*types.OIDCAuthRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.OIDCAuthRequest)
	err := c.cc.Invoke(ctx, AuthService_CreateOIDCAuthRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetOIDCAuthRequest(ctx context.Context, in *GetOIDCAuthRequestRequest, opts ...grpc.CallOption) (*types.OIDCAuthRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.OIDCAuthRequest)
	err := c.cc.Invoke(ctx, AuthService_GetOIDCAuthRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSAMLConnector(ctx context.Context, in *types.ResourceWithSecretsRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLConnectorV2)
	err := c.cc.Invoke(ctx, AuthService_GetSAMLConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSAMLConnectors(ctx context.Context, in *types.ResourcesWithSecretsRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLConnectorV2List)
	err := c.cc.Invoke(ctx, AuthService_GetSAMLConnectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateSAMLConnector(ctx context.Context, in *CreateSAMLConnectorRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLConnectorV2)
	err := c.cc.Invoke(ctx, AuthService_CreateSAMLConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSAMLConnector(ctx context.Context, in *UpdateSAMLConnectorRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLConnectorV2)
	err := c.cc.Invoke(ctx, AuthService_UpdateSAMLConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) UpsertSAMLConnector(ctx context.Context, in *types.SAMLConnectorV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertSAMLConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertSAMLConnectorV2(ctx context.Context, in *UpsertSAMLConnectorRequest, opts ...grpc.CallOption) (*types.SAMLConnectorV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLConnectorV2)
	err := c.cc.Invoke(ctx, AuthService_UpsertSAMLConnectorV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSAMLConnector(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteSAMLConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateSAMLAuthRequest(ctx context.Context, in *types.SAMLAuthRequest, opts ...grpc.CallOption) (*types.SAMLAuthRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLAuthRequest)
	err := c.cc.Invoke(ctx, AuthService_CreateSAMLAuthRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSAMLAuthRequest(ctx context.Context, in *GetSAMLAuthRequestRequest, opts ...grpc.CallOption) (*types.SAMLAuthRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLAuthRequest)
	err := c.cc.Invoke(ctx, AuthService_GetSAMLAuthRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetGithubConnector(ctx context.Context, in *types.ResourceWithSecretsRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GithubConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_GetGithubConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetGithubConnectors(ctx context.Context, in *types.ResourcesWithSecretsRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GithubConnectorV3List)
	err := c.cc.Invoke(ctx, AuthService_GetGithubConnectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateGithubConnector(ctx context.Context, in *CreateGithubConnectorRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GithubConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_CreateGithubConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateGithubConnector(ctx context.Context, in *UpdateGithubConnectorRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GithubConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_UpdateGithubConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) UpsertGithubConnector(ctx context.Context, in *types.GithubConnectorV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertGithubConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertGithubConnectorV2(ctx context.Context, in *UpsertGithubConnectorRequest, opts ...grpc.CallOption) (*types.GithubConnectorV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GithubConnectorV3)
	err := c.cc.Invoke(ctx, AuthService_UpsertGithubConnectorV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteGithubConnector(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteGithubConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateGithubAuthRequest(ctx context.Context, in *types.GithubAuthRequest, opts ...grpc.CallOption) (*types.GithubAuthRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GithubAuthRequest)
	err := c.cc.Invoke(ctx, AuthService_CreateGithubAuthRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetGithubAuthRequest(ctx context.Context, in *GetGithubAuthRequestRequest, opts ...grpc.CallOption) (*types.GithubAuthRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.GithubAuthRequest)
	err := c.cc.Invoke(ctx, AuthService_GetGithubAuthRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSSODiagnosticInfo(ctx context.Context, in *GetSSODiagnosticInfoRequest, opts ...grpc.CallOption) (*types.SSODiagnosticInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SSODiagnosticInfo)
	err := c.cc.Invoke(ctx, AuthService_GetSSODiagnosticInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetServerInfos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[types.ServerInfoV1], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[15], AuthService_GetServerInfos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, types.ServerInfoV1]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetServerInfosClient = grpc.ServerStreamingClient[types.ServerInfoV1]

func (c *authServiceClient) GetServerInfo(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.ServerInfoV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ServerInfoV1)
	err := c.cc.Invoke(ctx, AuthService_GetServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertServerInfo(ctx context.Context, in *types.ServerInfoV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteServerInfo(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllServerInfos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllServerInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTrustedCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.TrustedClusterV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.TrustedClusterV2)
	err := c.cc.Invoke(ctx, AuthService_GetTrustedCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTrustedClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.TrustedClusterV2List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.TrustedClusterV2List)
	err := c.cc.Invoke(ctx, AuthService_GetTrustedClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) UpsertTrustedCluster(ctx context.Context, in *types.TrustedClusterV2, opts ...grpc.CallOption) (*types.TrustedClusterV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.TrustedClusterV2)
	err := c.cc.Invoke(ctx, AuthService_UpsertTrustedCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteTrustedCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteTrustedCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetToken(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.ProvisionTokenV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ProvisionTokenV2)
	err := c.cc.Invoke(ctx, AuthService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ProvisionTokenV2List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ProvisionTokenV2List)
	err := c.cc.Invoke(ctx, AuthService_GetTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateTokenV2(ctx context.Context, in *CreateTokenV2Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateTokenV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertTokenV2(ctx context.Context, in *UpsertTokenV2Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertTokenV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteToken(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetClusterAuditConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ClusterAuditConfigV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ClusterAuditConfigV2)
	err := c.cc.Invoke(ctx, AuthService_GetClusterAuditConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GetClusterNetworkingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ClusterNetworkingConfigV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ClusterNetworkingConfigV2)
	err := c.cc.Invoke(ctx, AuthService_GetClusterNetworkingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) SetClusterNetworkingConfig(ctx context.Context, in *types.ClusterNetworkingConfigV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SetClusterNetworkingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) ResetClusterNetworkingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ResetClusterNetworkingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GetSessionRecordingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.SessionRecordingConfigV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SessionRecordingConfigV2)
	err := c.cc.Invoke(ctx, AuthService_GetSessionRecordingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) SetSessionRecordingConfig(ctx context.Context, in *types.SessionRecordingConfigV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SetSessionRecordingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) ResetSessionRecordingConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ResetSessionRecordingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) GetAuthPreference(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.AuthPreferenceV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AuthPreferenceV2)
	err := c.cc.Invoke(ctx, AuthService_GetAuthPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) SetAuthPreference(ctx context.Context, in *types.AuthPreferenceV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SetAuthPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *authServiceClient) ResetAuthPreference(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ResetAuthPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUIConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.UIConfigV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UIConfigV1)
	err := c.cc.Invoke(ctx, AuthService_GetUIConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetUIConfig(ctx context.Context, in *types.UIConfigV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SetUIConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUIConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteUIConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, AuthService_GetEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSessionEvents(ctx context.Context, in *GetSessionEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, AuthService_GetSessionEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*types.LockV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.LockV2)
	err := c.cc.Invoke(ctx, AuthService_GetLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocksResponse)
	err := c.cc.Invoke(ctx, AuthService_GetLocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertLock(ctx context.Context, in *types.LockV2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReplaceRemoteLocks(ctx context.Context, in *ReplaceRemoteLocksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ReplaceRemoteLocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) StreamSessionEvents(ctx context.Context, in *StreamSessionEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[events.OneOf], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[16], AuthService_StreamSessionEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSessionEventsRequest, events.OneOf]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_StreamSessionEventsClient = grpc.ServerStreamingClient[events.OneOf]

func (c *authServiceClient) GetNetworkRestrictions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.NetworkRestrictionsV4, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.NetworkRestrictionsV4)
	err := c.cc.Invoke(ctx, AuthService_GetNetworkRestrictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetNetworkRestrictions(ctx context.Context, in *types.NetworkRestrictionsV4, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SetNetworkRestrictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteNetworkRestrictions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteNetworkRestrictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.AppV3List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AppV3List)
	err := c.cc.Invoke(ctx, AuthService_GetApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetApp(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.AppV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AppV3)
	err := c.cc.Invoke(ctx, AuthService_GetApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateApp(ctx context.Context, in *types.AppV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateApp(ctx context.Context, in *types.AppV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteApp(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetDatabases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.DatabaseV3List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DatabaseV3List)
	err := c.cc.Invoke(ctx, AuthService_GetDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetDatabase(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.DatabaseV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.DatabaseV3)
	err := c.cc.Invoke(ctx, AuthService_GetDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateDatabase(ctx context.Context, in *types.DatabaseV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateDatabase(ctx context.Context, in *types.DatabaseV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteDatabase(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllDatabases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetKubernetesClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.KubernetesClusterV3List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KubernetesClusterV3List)
	err := c.cc.Invoke(ctx, AuthService_GetKubernetesClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetKubernetesCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.KubernetesClusterV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KubernetesClusterV3)
	err := c.cc.Invoke(ctx, AuthService_GetKubernetesCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateKubernetesCluster(ctx context.Context, in *types.KubernetesClusterV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateKubernetesCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateKubernetesCluster(ctx context.Context, in *types.KubernetesClusterV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateKubernetesCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteKubernetesCluster(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteKubernetesCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllKubernetesClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllKubernetesClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetWindowsDesktopServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWindowsDesktopServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWindowsDesktopServicesResponse)
	err := c.cc.Invoke(ctx, AuthService_GetWindowsDesktopServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetWindowsDesktopService(ctx context.Context, in *GetWindowsDesktopServiceRequest, opts ...grpc.CallOption) (*GetWindowsDesktopServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWindowsDesktopServiceResponse)
	err := c.cc.Invoke(ctx, AuthService_GetWindowsDesktopService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertWindowsDesktopService(ctx context.Context, in *types.WindowsDesktopServiceV3, opts ...grpc.CallOption) (*types.KeepAlive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.KeepAlive)
	err := c.cc.Invoke(ctx, AuthService_UpsertWindowsDesktopService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteWindowsDesktopService(ctx context.Context, in *DeleteWindowsDesktopServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteWindowsDesktopService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllWindowsDesktopServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllWindowsDesktopServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetWindowsDesktops(ctx context.Context, in *types.WindowsDesktopFilter, opts ...grpc.CallOption) (*GetWindowsDesktopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWindowsDesktopsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetWindowsDesktops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateWindowsDesktop(ctx context.Context, in *types.WindowsDesktopV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateWindowsDesktop(ctx context.Context, in *types.WindowsDesktopV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertWindowsDesktop(ctx context.Context, in *types.WindowsDesktopV3, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpsertWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteWindowsDesktop(ctx context.Context, in *DeleteWindowsDesktopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteWindowsDesktop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllWindowsDesktops(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllWindowsDesktops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateWindowsDesktopCert(ctx context.Context, in *WindowsDesktopCertRequest, opts ...grpc.CallOption) (*WindowsDesktopCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WindowsDesktopCertResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateWindowsDesktopCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateCertAuthorityCRL(ctx context.Context, in *CertAuthorityRequest, opts ...grpc.CallOption) (*CRL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CRL)
	err := c.cc.Invoke(ctx, AuthService_GenerateCertAuthorityCRL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetDesktopBootstrapScript(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DesktopBootstrapScriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DesktopBootstrapScriptResponse)
	err := c.cc.Invoke(ctx, AuthService_GetDesktopBootstrapScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateConnectionDiagnostic(ctx context.Context, in *types.ConnectionDiagnosticV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateConnectionDiagnostic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateConnectionDiagnostic(ctx context.Context, in *types.ConnectionDiagnosticV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateConnectionDiagnostic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetConnectionDiagnostic(ctx context.Context, in *GetConnectionDiagnosticRequest, opts ...grpc.CallOption) (*types.ConnectionDiagnosticV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ConnectionDiagnosticV1)
	err := c.cc.Invoke(ctx, AuthService_GetConnectionDiagnostic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AppendDiagnosticTrace(ctx context.Context, in *AppendDiagnosticTraceRequest, opts ...grpc.CallOption) (*types.ConnectionDiagnosticV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ConnectionDiagnosticV1)
	err := c.cc.Invoke(ctx, AuthService_AppendDiagnosticTrace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeUserAuthentication(ctx context.Context, in *ChangeUserAuthenticationRequest, opts ...grpc.CallOption) (*ChangeUserAuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserAuthenticationResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangeUserAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) StartAccountRecovery(ctx context.Context, in *StartAccountRecoveryRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserTokenV3)
	err := c.cc.Invoke(ctx, AuthService_StartAccountRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyAccountRecovery(ctx context.Context, in *VerifyAccountRecoveryRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserTokenV3)
	err := c.cc.Invoke(ctx, AuthService_VerifyAccountRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CompleteAccountRecovery(ctx context.Context, in *CompleteAccountRecoveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CompleteAccountRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAccountRecoveryCodes(ctx context.Context, in *CreateAccountRecoveryCodesRequest, opts ...grpc.CallOption) (*RecoveryCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoveryCodes)
	err := c.cc.Invoke(ctx, AuthService_CreateAccountRecoveryCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAccountRecoveryToken(ctx context.Context, in *GetAccountRecoveryTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserTokenV3)
	err := c.cc.Invoke(ctx, AuthService_GetAccountRecoveryToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAccountRecoveryCodes(ctx context.Context, in *GetAccountRecoveryCodesRequest, opts ...grpc.CallOption) (*RecoveryCodes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoveryCodes)
	err := c.cc.Invoke(ctx, AuthService_GetAccountRecoveryCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreatePrivilegeToken(ctx context.Context, in *CreatePrivilegeTokenRequest, opts ...grpc.CallOption) (*types.UserTokenV3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserTokenV3)
	err := c.cc.Invoke(ctx, AuthService_CreatePrivilegeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetInstaller(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*types.InstallerV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.InstallerV1)
	err := c.cc.Invoke(ctx, AuthService_GetInstaller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetInstallers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.InstallerV1List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.InstallerV1List)
	err := c.cc.Invoke(ctx, AuthService_GetInstallers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetInstaller(ctx context.Context, in *types.InstallerV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SetInstaller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteInstaller(ctx context.Context, in *types.ResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteInstaller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllInstallers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllInstallers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, AuthService_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListUnifiedResources(ctx context.Context, in *ListUnifiedResourcesRequest, opts ...grpc.CallOption) (*ListUnifiedResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnifiedResourcesResponse)
	err := c.cc.Invoke(ctx, AuthService_ListUnifiedResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSSHTargets(ctx context.Context, in *GetSSHTargetsRequest, opts ...grpc.CallOption) (*GetSSHTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSSHTargetsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSSHTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResolveSSHTarget(ctx context.Context, in *ResolveSSHTargetRequest, opts ...grpc.CallOption) (*ResolveSSHTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveSSHTargetResponse)
	err := c.cc.Invoke(ctx, AuthService_ResolveSSHTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetDomainName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDomainNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDomainNameResponse)
	err := c.cc.Invoke(ctx, AuthService_GetDomainName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetClusterCACert(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetClusterCACertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterCACertResponse)
	err := c.cc.Invoke(ctx, AuthService_GetClusterCACert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AssertSystemRole(ctx context.Context, in *SystemRoleAssertion, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_AssertSystemRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SubmitUsageEvent(ctx context.Context, in *SubmitUsageEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_SubmitUsageEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLicenseResponse)
	err := c.cc.Invoke(ctx, AuthService_GetLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReleasesResponse)
	err := c.cc.Invoke(ctx, AuthService_ListReleases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListSAMLIdPServiceProviders(ctx context.Context, in *ListSAMLIdPServiceProvidersRequest, opts ...grpc.CallOption) (*ListSAMLIdPServiceProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSAMLIdPServiceProvidersResponse)
	err := c.cc.Invoke(ctx, AuthService_ListSAMLIdPServiceProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSAMLIdPServiceProvider(ctx context.Context, in *GetSAMLIdPServiceProviderRequest, opts ...grpc.CallOption) (*types.SAMLIdPServiceProviderV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.SAMLIdPServiceProviderV1)
	err := c.cc.Invoke(ctx, AuthService_GetSAMLIdPServiceProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateSAMLIdPServiceProvider(ctx context.Context, in *types.SAMLIdPServiceProviderV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateSAMLIdPServiceProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSAMLIdPServiceProvider(ctx context.Context, in *types.SAMLIdPServiceProviderV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateSAMLIdPServiceProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSAMLIdPServiceProvider(ctx context.Context, in *DeleteSAMLIdPServiceProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteSAMLIdPServiceProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllSAMLIdPServiceProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllSAMLIdPServiceProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserGroupsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListUserGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*types.UserGroupV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.UserGroupV1)
	err := c.cc.Invoke(ctx, AuthService_GetUserGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateUserGroup(ctx context.Context, in *types.UserGroupV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_CreateUserGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUserGroup(ctx context.Context, in *types.UserGroupV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateUserGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUserGroup(ctx context.Context, in *DeleteUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteUserGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllUserGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAllUserGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetHeadlessAuthentication(ctx context.Context, in *GetHeadlessAuthenticationRequest, opts ...grpc.CallOption) (*types.HeadlessAuthentication, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.HeadlessAuthentication)
	err := c.cc.Invoke(ctx, AuthService_GetHeadlessAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) WatchPendingHeadlessAuthentications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuthService_ServiceDesc.Streams[17], AuthService_WatchPendingHeadlessAuthentications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_WatchPendingHeadlessAuthenticationsClient = grpc.ServerStreamingClient[Event]

func (c *authServiceClient) UpdateHeadlessAuthenticationState(ctx context.Context, in *UpdateHeadlessAuthenticationStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateHeadlessAuthenticationState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExportUpgradeWindows(ctx context.Context, in *ExportUpgradeWindowsRequest, opts ...grpc.CallOption) (*ExportUpgradeWindowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportUpgradeWindowsResponse)
	err := c.cc.Invoke(ctx, AuthService_ExportUpgradeWindows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetClusterMaintenanceConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*types.ClusterMaintenanceConfigV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.ClusterMaintenanceConfigV1)
	err := c.cc.Invoke(ctx, AuthService_GetClusterMaintenanceConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateClusterMaintenanceConfig(ctx context.Context, in *types.ClusterMaintenanceConfigV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateClusterMaintenanceConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteClusterMaintenanceConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteClusterMaintenanceConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations should embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// AuthService is authentication/authorization service implementation
type AuthServiceServer interface {
	// InventoryControlStream is the per-instance stream used to advertise teleport instance
	// presence/version/etc to the auth server.
	InventoryControlStream(grpc.BidiStreamingServer[UpstreamInventoryOneOf, DownstreamInventoryOneOf]) error
	// GetInventoryStatus gets information about current instance inventory.
	GetInventoryStatus(context.Context, *InventoryStatusRequest) (*InventoryStatusSummary, error)
	// GetInventoryConnectedServiceCounts returns the counts of each connected service seen in the inventory.
	GetInventoryConnectedServiceCounts(context.Context, *InventoryConnectedServiceCountsRequest) (*InventoryConnectedServiceCounts, error)
	// PingInventory attempts to trigger a downstream inventory ping (used in testing/debug).
	PingInventory(context.Context, *InventoryPingRequest) (*InventoryPingResponse, error)
	// GetInstances streams all instances matching the specified filter.
	GetInstances(*types.InstanceFilter, grpc.ServerStreamingServer[types.InstanceV1]) error
	// GetClusterAlerts loads cluster-level alert messages.
	GetClusterAlerts(context.Context, *types.GetClusterAlertsRequest) (*GetClusterAlertsResponse, error)
	// UpsertClusterAlert creates a cluster alert.
	UpsertClusterAlert(context.Context, *UpsertClusterAlertRequest) (*emptypb.Empty, error)
	// CreateAlertAck marks a cluster alert as acknowledged.
	CreateAlertAck(context.Context, *types.AlertAcknowledgement) (*emptypb.Empty, error)
	// GetAlertAcks gets active alert ackowledgements.
	GetAlertAcks(context.Context, *GetAlertAcksRequest) (*GetAlertAcksResponse, error)
	// ClearAlertAcks clears alert acknowledgments.
	ClearAlertAcks(context.Context, *ClearAlertAcksRequest) (*emptypb.Empty, error)
	// MaintainSessionPresence establishes a channel used to continously verify the presence for a
	// session.
	MaintainSessionPresence(grpc.BidiStreamingServer[PresenceMFAChallengeSend, MFAAuthenticateChallenge]) error
	// CreateSessionTracker creates a new session tracker resource.
	CreateSessionTracker(context.Context, *CreateSessionTrackerRequest) (*types.SessionTrackerV1, error)
	// GetSessionTracker fetches a session tracker resource.
	GetSessionTracker(context.Context, *GetSessionTrackerRequest) (*types.SessionTrackerV1, error)
	// GetActiveSessionTrackers returns a list of active sessions.
	GetActiveSessionTrackers(*emptypb.Empty, grpc.ServerStreamingServer[types.SessionTrackerV1]) error
	// GetActiveSessionTrackersWithFilter returns a list of active sessions filtered by a filter.
	GetActiveSessionTrackersWithFilter(*types.SessionTrackerFilter, grpc.ServerStreamingServer[types.SessionTrackerV1]) error
	// RemoveSessionTracker removes a session tracker resource.
	RemoveSessionTracker(context.Context, *RemoveSessionTrackerRequest) (*emptypb.Empty, error)
	// UpdateSessionTracker updates some state of a session tracker.
	UpdateSessionTracker(context.Context, *UpdateSessionTrackerRequest) (*emptypb.Empty, error)
	// SendKeepAlives allows node to send a stream of keep alive requests
	SendKeepAlives(grpc.ClientStreamingServer[types.KeepAlive, emptypb.Empty]) error
	// WatchEvents returns a new stream of cluster events
	WatchEvents(*Watch, grpc.ServerStreamingServer[Event]) error
	// GetNode retrieves a node described by the given request.
	GetNode(context.Context, *types.ResourceInNamespaceRequest) (*types.ServerV2, error)
	// UpsertNode upserts a node in a backend.
	UpsertNode(context.Context, *types.ServerV2) (*types.KeepAlive, error)
	// DeleteNode deletes an existing node in a backend described by the given request.
	DeleteNode(context.Context, *types.ResourceInNamespaceRequest) (*emptypb.Empty, error)
	// DeleteAllNodes deletes all nodes.
	DeleteAllNodes(context.Context, *types.ResourcesInNamespaceRequest) (*emptypb.Empty, error)
	// GenerateUserCerts generates a set of user certificates.
	GenerateUserCerts(context.Context, *UserCertsRequest) (*Certs, error)
	// GenerateHostCerts generates a set of host certificates.
	GenerateHostCerts(context.Context, *HostCertsRequest) (*Certs, error)
	// Deprecated: Do not use.
	// Deprecated: Superseded by GenerateUserCerts.
	GenerateUserSingleUseCerts(grpc.BidiStreamingServer[UserSingleUseCertsRequest, UserSingleUseCertsResponse]) error
	// GenerateOpenSSHCert signs a SSH certificate that can be used
	// to connect to Agentless nodes.
	GenerateOpenSSHCert(context.Context, *OpenSSHCertRequest) (*OpenSSHCert, error)
	// IsMFARequired checks whether MFA is required to access the specified
	// target.
	IsMFARequired(context.Context, *IsMFARequiredRequest) (*IsMFARequiredResponse, error)
	// GetAccessRequestsV2 gets all pending access requests.
	GetAccessRequestsV2(*types.AccessRequestFilter, grpc.ServerStreamingServer[types.AccessRequestV3]) error
	// ListAccessRequests gets access requests with pagination and sorting.
	ListAccessRequests(context.Context, *ListAccessRequestsRequest) (*ListAccessRequestsResponse, error)
	// CreateAccessRequestV2 creates a new access request.
	CreateAccessRequestV2(context.Context, *types.AccessRequestV3) (*types.AccessRequestV3, error)
	// DeleteAccessRequest deletes an access request.
	DeleteAccessRequest(context.Context, *RequestID) (*emptypb.Empty, error)
	// SetAccessRequestState sets the state of an access request.
	SetAccessRequestState(context.Context, *RequestStateSetter) (*emptypb.Empty, error)
	// SubmitAccessReview applies a review to a request and returns the post-application state.
	SubmitAccessReview(context.Context, *types.AccessReviewSubmission) (*types.AccessRequestV3, error)
	// GetAccessCapabilities requests the access capabilities of a user.
	GetAccessCapabilities(context.Context, *types.AccessCapabilitiesRequest) (*types.AccessCapabilities, error)
	// GetAccessRequestAllowedPromotions returns a list of allowed promotions from an access request to an access list.
	GetAccessRequestAllowedPromotions(context.Context, *AccessRequestAllowedPromotionRequest) (*AccessRequestAllowedPromotionResponse, error)
	// GetPluginData gets all plugin data matching the supplied filter.
	GetPluginData(context.Context, *types.PluginDataFilter) (*PluginDataSeq, error)
	// UpdatePluginData updates a plugin's resource-specific datastore.
	UpdatePluginData(context.Context, *types.PluginDataUpdateParams) (*emptypb.Empty, error)
	// Ping gets basic info about the auth server. This method is intended
	// to mimic the behavior of the proxy's Ping method, and may be used by
	// clients for verification or configuration on startup.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// GetResetPasswordToken returns a reset password token.
	GetResetPasswordToken(context.Context, *GetResetPasswordTokenRequest) (*types.UserTokenV3, error)
	// CreateResetPasswordToken resets users current password and second factors and creates a reset
	// password token.
	//
	// Only local users may be reset.
	CreateResetPasswordToken(context.Context, *CreateResetPasswordTokenRequest) (*types.UserTokenV3, error)
	// Deprecated: Do not use.
	// GetUser gets a user resource by name.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	GetUser(context.Context, *GetUserRequest) (*types.UserV2, error)
	// Deprecated: Do not use.
	// GetCurrentUser returns current user as seen by the server.
	// Useful especially in the context of remote clusters which perform role and trait mapping.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	GetCurrentUser(context.Context, *emptypb.Empty) (*types.UserV2, error)
	// GetCurrentUserRoles returns current user's roles.
	GetCurrentUserRoles(*emptypb.Empty, grpc.ServerStreamingServer[types.RoleV6]) error
	// Deprecated: Do not use.
	// GetUsers gets all current user resources.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	GetUsers(*GetUsersRequest, grpc.ServerStreamingServer[types.UserV2]) error
	// Deprecated: Do not use.
	// CreateUser inserts a new user entry to a backend.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	CreateUser(context.Context, *types.UserV2) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// UpdateUser updates an existing user in a backend.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	UpdateUser(context.Context, *types.UserV2) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DeleteUser deletes an existing user in a backend by username.
	//
	// Deprecated: Use [teleport.users.v1.UsersService] instead.
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// ChangePassword allows a user to change their own password.
	//
	// Only local users may change their password.
	ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error)
	// AcquireSemaphore acquires lease with requested resources from semaphore.
	AcquireSemaphore(context.Context, *types.AcquireSemaphoreRequest) (*types.SemaphoreLease, error)
	// KeepAliveSemaphoreLease updates semaphore lease.
	KeepAliveSemaphoreLease(context.Context, *types.SemaphoreLease) (*emptypb.Empty, error)
	// CancelSemaphoreLease cancels semaphore lease early.
	CancelSemaphoreLease(context.Context, *types.SemaphoreLease) (*emptypb.Empty, error)
	// GetSemaphores returns a list of all semaphores matching the supplied filter.
	GetSemaphores(context.Context, *types.SemaphoreFilter) (*Semaphores, error)
	// DeleteSemaphore deletes a semaphore matching the supplied filter.
	DeleteSemaphore(context.Context, *types.SemaphoreFilter) (*emptypb.Empty, error)
	// EmitAuditEvent emits audit event
	EmitAuditEvent(context.Context, *events.OneOf) (*emptypb.Empty, error)
	// CreateAuditStream creates or resumes audit events streams
	CreateAuditStream(grpc.BidiStreamingServer[AuditStreamRequest, events.StreamStatus]) error
	// UpsertApplicationServer adds an application server.
	UpsertApplicationServer(context.Context, *UpsertApplicationServerRequest) (*types.KeepAlive, error)
	// DeleteApplicationServer removes an application server.
	DeleteApplicationServer(context.Context, *DeleteApplicationServerRequest) (*emptypb.Empty, error)
	// DeleteAllApplicationServers removes all application servers.
	DeleteAllApplicationServers(context.Context, *DeleteAllApplicationServersRequest) (*emptypb.Empty, error)
	// GenerateAppToken will generate a JWT token for application access.
	GenerateAppToken(context.Context, *GenerateAppTokenRequest) (*GenerateAppTokenResponse, error)
	// GetAppSession gets an application web session.
	GetAppSession(context.Context, *GetAppSessionRequest) (*GetAppSessionResponse, error)
	// ListAppSessions gets all application web sessions.
	ListAppSessions(context.Context, *ListAppSessionsRequest) (*ListAppSessionsResponse, error)
	// CreateAppSession creates an application web session. Application web
	// sessions represent a browser session the client holds.
	CreateAppSession(context.Context, *CreateAppSessionRequest) (*CreateAppSessionResponse, error)
	// DeleteAppSession removes an application web session.
	DeleteAppSession(context.Context, *DeleteAppSessionRequest) (*emptypb.Empty, error)
	// DeleteAllAppSessions removes all application web sessions.
	DeleteAllAppSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DeleteUserAppSessions deletes all user’s application sessions.
	DeleteUserAppSessions(context.Context, *DeleteUserAppSessionsRequest) (*emptypb.Empty, error)
	// CreateSnowflakeSession creates web session with sub kind Snowflake used by Database access
	// Snowflake integration.
	CreateSnowflakeSession(context.Context, *CreateSnowflakeSessionRequest) (*CreateSnowflakeSessionResponse, error)
	// GetSnowflakeSession returns a web session with sub kind Snowflake.
	GetSnowflakeSession(context.Context, *GetSnowflakeSessionRequest) (*GetSnowflakeSessionResponse, error)
	// GetSnowflakeSessions gets all Snowflake web sessions.
	GetSnowflakeSessions(context.Context, *emptypb.Empty) (*GetSnowflakeSessionsResponse, error)
	// DeleteSnowflakeSession removes a Snowflake web session.
	DeleteSnowflakeSession(context.Context, *DeleteSnowflakeSessionRequest) (*emptypb.Empty, error)
	// DeleteAllSnowflakeSessions removes all Snowflake web sessions.
	DeleteAllSnowflakeSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// CreateSAMLIdPSession creates web session with sub kind saml_idp used by the SAML IdP.
	CreateSAMLIdPSession(context.Context, *CreateSAMLIdPSessionRequest) (*CreateSAMLIdPSessionResponse, error)
	// Deprecated: Do not use.
	// GetSAMLIdPSession returns a SAML IdP session with sub kind saml_idp.
	GetSAMLIdPSession(context.Context, *GetSAMLIdPSessionRequest) (*GetSAMLIdPSessionResponse, error)
	// Deprecated: Do not use.
	// ListSAMLIdPSessions gets all SAML IdP sessions.
	ListSAMLIdPSessions(context.Context, *ListSAMLIdPSessionsRequest) (*ListSAMLIdPSessionsResponse, error)
	// Deprecated: Do not use.
	// DeleteSAMLIdPSession removes a SAML IdP session.
	DeleteSAMLIdPSession(context.Context, *DeleteSAMLIdPSessionRequest) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DeleteAllSAMLIdPSessions removes all SAML IdP sessions.
	DeleteAllSAMLIdPSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DeleteUserSAMLIdPSessions deletes all user’s SAML IdP sessions.
	DeleteUserSAMLIdPSessions(context.Context, *DeleteUserSAMLIdPSessionsRequest) (*emptypb.Empty, error)
	// GetWebSession gets a web session.
	GetWebSession(context.Context, *types.GetWebSessionRequest) (*GetWebSessionResponse, error)
	// Deprecated: Do not use.
	// GetWebSessions gets all web sessions.
	GetWebSessions(context.Context, *emptypb.Empty) (*GetWebSessionsResponse, error)
	// StreamWebSessions gets all web sessions in a stream.
	StreamWebSessions(*emptypb.Empty, grpc.ServerStreamingServer[types.WebSessionV2]) error
	// DeleteWebSession deletes a web session.
	DeleteWebSession(context.Context, *types.DeleteWebSessionRequest) (*emptypb.Empty, error)
	// DeleteAllWebSessions deletes all web sessions.
	DeleteAllWebSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetWebToken gets a web token.
	GetWebToken(context.Context, *types.GetWebTokenRequest) (*GetWebTokenResponse, error)
	// GetWebTokens gets all web tokens.
	GetWebTokens(context.Context, *emptypb.Empty) (*GetWebTokensResponse, error)
	// DeleteWebToken deletes a web token.
	DeleteWebToken(context.Context, *types.DeleteWebTokenRequest) (*emptypb.Empty, error)
	// DeleteAllWebTokens deletes all web tokens.
	DeleteAllWebTokens(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// UpdateRemoteCluster updates remote cluster
	UpdateRemoteCluster(context.Context, *types.RemoteClusterV3) (*emptypb.Empty, error)
	// UpsertKubernetesServer adds or updates a kubernetes server.
	UpsertKubernetesServer(context.Context, *UpsertKubernetesServerRequest) (*types.KeepAlive, error)
	// DeleteKubernetesServer removes a kubernetes server.
	DeleteKubernetesServer(context.Context, *DeleteKubernetesServerRequest) (*emptypb.Empty, error)
	// DeleteAllKubernetesServers removes all kubernetes servers.
	DeleteAllKubernetesServers(context.Context, *DeleteAllKubernetesServersRequest) (*emptypb.Empty, error)
	// UpsertDatabaseServer registers a new database proxy server.
	UpsertDatabaseServer(context.Context, *UpsertDatabaseServerRequest) (*types.KeepAlive, error)
	// DeleteDatabaseServer removes the specified database proxy server.
	DeleteDatabaseServer(context.Context, *DeleteDatabaseServerRequest) (*emptypb.Empty, error)
	// DeleteAllDatabaseServers removes all registered database proxy servers.
	DeleteAllDatabaseServers(context.Context, *DeleteAllDatabaseServersRequest) (*emptypb.Empty, error)
	// UpsertDatabaseService registers a new DatabaseService.
	UpsertDatabaseService(context.Context, *UpsertDatabaseServiceRequest) (*types.KeepAlive, error)
	// DeleteDatabaseService removes the specified DatabaseService.
	DeleteDatabaseService(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// DeleteAllDatabaseServices removes all registered DatabaseServices.
	// If there's an error deleting the resources, there's no guarantee of a rollback.
	// A subset of resources might be deleted while others still exist.
	DeleteAllDatabaseServices(context.Context, *DeleteAllDatabaseServicesRequest) (*emptypb.Empty, error)
	// SignDatabaseCSR generates client certificate used by proxy to
	// authenticate with a remote database service.
	SignDatabaseCSR(context.Context, *DatabaseCSRRequest) (*DatabaseCSRResponse, error)
	// GenerateDatabaseCert generates client certificate used by a database
	// service to authenticate with the database instance.
	GenerateDatabaseCert(context.Context, *DatabaseCertRequest) (*DatabaseCertResponse, error)
	// / GenerateSnowflakeJWT generates JWT in the format required by Snowflake.
	GenerateSnowflakeJWT(context.Context, *SnowflakeJWTRequest) (*SnowflakeJWTResponse, error)
	// GetRole retrieves a role described by the given request.
	GetRole(context.Context, *GetRoleRequest) (*types.RoleV6, error)
	// ListRoles is a paginated role getter.
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// CreateRole creates a new role.
	CreateRole(context.Context, *CreateRoleRequest) (*types.RoleV6, error)
	// UpdateRole updates an existing role.
	UpdateRole(context.Context, *UpdateRoleRequest) (*types.RoleV6, error)
	// UpsertRoleV2 creates or overwrites an existing role.
	UpsertRoleV2(context.Context, *UpsertRoleRequest) (*types.RoleV6, error)
	// Deprecated: Do not use.
	// UpsertRole upserts a role in a backend.
	//
	// Deprecated: use UpsertRoleV2 instead.
	UpsertRole(context.Context, *types.RoleV6) (*emptypb.Empty, error)
	// DeleteRole deletes an existing role in a backend described by the given request.
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// AddMFADevice adds an MFA device for the user calling this RPC.
	//
	// The RPC is streaming both ways and the message sequence is:
	// (-> means client-to-server, <- means server-to-client)
	// -> Init
	// <- ExistingMFAChallenge
	// -> ExistingMFAResponse
	// <- NewMFARegisterChallenge
	// -> NewMFARegisterResponse
	// <- Ack
	//
	// Deprecated: Use [AddMFADeviceSync] instead.
	AddMFADevice(grpc.BidiStreamingServer[AddMFADeviceRequest, AddMFADeviceResponse]) error
	// Deprecated: Do not use.
	// DeleteMFADevice deletes an MFA device for the user calling this RPC.
	//
	// The RPC is streaming both ways and the message sequence is:
	// (-> means client-to-server, <- means server-to-client)
	// -> Init
	// <- MFAChallenge
	// -> MFAResponse
	// <- Ack
	//
	// Deprecated: Use [DeleteMFADeviceSync] instead.
	DeleteMFADevice(grpc.BidiStreamingServer[DeleteMFADeviceRequest, DeleteMFADeviceResponse]) error
	// AddMFADeviceSync adds a new MFA device.
	//
	// A typical MFA registration sequence calls the following RPCs:
	//
	// 1. CreateAuthenticateChallenge (necessary for registration challenge)
	// 2. (optional) CreatePrivilegeToken
	// 3. CreateRegisterChallenge (uses authn challenge and optionally a token)
	// 4. AddMFADeviceSync
	AddMFADeviceSync(context.Context, *AddMFADeviceSyncRequest) (*AddMFADeviceSyncResponse, error)
	// DeleteMFADeviceSync deletes a users MFA device (nonstream).
	//
	// A typical MFA deletion sequence calls the following RPCs:
	//
	//  1. (optional) CreateAuthenticateChallenge
	//     (may be skipped depending on the token used, but is usually called
	//     regardless)
	//  2. (optional) CreatePrivilegeToken
	//  3. DeleteMFADeviceSync (using either authn challenge or token)
	DeleteMFADeviceSync(context.Context, *DeleteMFADeviceSyncRequest) (*emptypb.Empty, error)
	// GetMFADevices returns all MFA devices registered for the user calling
	// this RPC.
	GetMFADevices(context.Context, *GetMFADevicesRequest) (*GetMFADevicesResponse, error)
	// CreateAuthenticateChallenge creates and returns MFA challenges for a users registered MFA
	// devices.
	CreateAuthenticateChallenge(context.Context, *CreateAuthenticateChallengeRequest) (*MFAAuthenticateChallenge, error)
	// CreateRegisterChallenge creates and returns MFA register challenge for a new MFA device.
	CreateRegisterChallenge(context.Context, *CreateRegisterChallengeRequest) (*MFARegisterChallenge, error)
	// GetOIDCConnector gets an OIDC connector resource by name.
	GetOIDCConnector(context.Context, *types.ResourceWithSecretsRequest) (*types.OIDCConnectorV3, error)
	// GetOIDCConnectors gets all current OIDC connector resources.
	GetOIDCConnectors(context.Context, *types.ResourcesWithSecretsRequest) (*types.OIDCConnectorV3List, error)
	// UpsertOIDCConnector creates a new OIDC connector in the backend.
	CreateOIDCConnector(context.Context, *CreateOIDCConnectorRequest) (*types.OIDCConnectorV3, error)
	// UpsertOIDCConnector updates an existing OIDC connector in the backend.
	UpdateOIDCConnector(context.Context, *UpdateOIDCConnectorRequest) (*types.OIDCConnectorV3, error)
	// Deprecated: Do not use.
	// UpsertOIDCConnector upserts an OIDC connector in a backend.
	//
	// Deprecated: Use UpsertOIDCConnectorV2 instead.
	UpsertOIDCConnector(context.Context, *types.OIDCConnectorV3) (*emptypb.Empty, error)
	// UpsertOIDCConnectorV2 upserts an OIDC connector in the backend.
	UpsertOIDCConnectorV2(context.Context, *UpsertOIDCConnectorRequest) (*types.OIDCConnectorV3, error)
	// DeleteOIDCConnector deletes an existing OIDC connector in a backend by name.
	DeleteOIDCConnector(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// CreateOIDCAuthRequest creates OIDCAuthRequest.
	CreateOIDCAuthRequest(context.Context, *types.OIDCAuthRequest) (*types.OIDCAuthRequest, error)
	// GetOIDCAuthRequest returns OIDC auth request if found.
	GetOIDCAuthRequest(context.Context, *GetOIDCAuthRequestRequest) (*types.OIDCAuthRequest, error)
	// GetSAMLConnector gets a SAML connector resource by name.
	GetSAMLConnector(context.Context, *types.ResourceWithSecretsRequest) (*types.SAMLConnectorV2, error)
	// GetSAMLConnectors gets all current SAML connector resources.
	GetSAMLConnectors(context.Context, *types.ResourcesWithSecretsRequest) (*types.SAMLConnectorV2List, error)
	// CreateSAMLConnector creates a new SAML connector in the backend.
	CreateSAMLConnector(context.Context, *CreateSAMLConnectorRequest) (*types.SAMLConnectorV2, error)
	// UpdateSAMLConnector updates an existing SAML connector in the backend.
	UpdateSAMLConnector(context.Context, *UpdateSAMLConnectorRequest) (*types.SAMLConnectorV2, error)
	// Deprecated: Do not use.
	// UpsertSAMLConnector upserts a SAML connector in a backend.
	//
	// Deprecated: Use UpsertSAMLConnectorV2 instead.
	UpsertSAMLConnector(context.Context, *types.SAMLConnectorV2) (*emptypb.Empty, error)
	// UpsertSAMLConnectorV2 upserts a SAML connector in a backend.
	UpsertSAMLConnectorV2(context.Context, *UpsertSAMLConnectorRequest) (*types.SAMLConnectorV2, error)
	// DeleteSAMLConnector deletes an existing SAML connector in a backend by name.
	DeleteSAMLConnector(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// CreateSAMLAuthRequest creates SAMLAuthRequest.
	CreateSAMLAuthRequest(context.Context, *types.SAMLAuthRequest) (*types.SAMLAuthRequest, error)
	// GetSAMLAuthRequest returns SAML auth request if found.
	GetSAMLAuthRequest(context.Context, *GetSAMLAuthRequestRequest) (*types.SAMLAuthRequest, error)
	// GetGithubConnector gets a Github connector resource by name.
	GetGithubConnector(context.Context, *types.ResourceWithSecretsRequest) (*types.GithubConnectorV3, error)
	// GetGithubConnectors gets all current Github connector resources.
	GetGithubConnectors(context.Context, *types.ResourcesWithSecretsRequest) (*types.GithubConnectorV3List, error)
	// CreateGithubConnector creates a new Github connector in the backend.
	CreateGithubConnector(context.Context, *CreateGithubConnectorRequest) (*types.GithubConnectorV3, error)
	// UpdateGithubConnector updates an existing Github connector in the backend.
	UpdateGithubConnector(context.Context, *UpdateGithubConnectorRequest) (*types.GithubConnectorV3, error)
	// Deprecated: Do not use.
	// UpsertGithubConnector upserts a Github connector in a backend.
	//
	// Deprecated: Use UpsertGithubConnectorV2 instead.
	UpsertGithubConnector(context.Context, *types.GithubConnectorV3) (*emptypb.Empty, error)
	// UpsertGithubConnectorV2 upserts a Github connector in a backend.
	UpsertGithubConnectorV2(context.Context, *UpsertGithubConnectorRequest) (*types.GithubConnectorV3, error)
	// DeleteGithubConnector deletes an existing Github connector in a backend by name.
	DeleteGithubConnector(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// CreateGithubAuthRequest creates GithubAuthRequest.
	CreateGithubAuthRequest(context.Context, *types.GithubAuthRequest) (*types.GithubAuthRequest, error)
	// GetGithubAuthRequest returns Github auth request if found.
	GetGithubAuthRequest(context.Context, *GetGithubAuthRequestRequest) (*types.GithubAuthRequest, error)
	// GetSSODiagnosticInfo returns SSO diagnostic info records.
	GetSSODiagnosticInfo(context.Context, *GetSSODiagnosticInfoRequest) (*types.SSODiagnosticInfo, error)
	// GetServerInfos returns a stream of ServerInfos.
	GetServerInfos(*emptypb.Empty, grpc.ServerStreamingServer[types.ServerInfoV1]) error
	// GetServerInfo returns a ServerInfo by name.
	GetServerInfo(context.Context, *types.ResourceRequest) (*types.ServerInfoV1, error)
	// UpsertServerInfo upserts a ServerInfo.
	UpsertServerInfo(context.Context, *types.ServerInfoV1) (*emptypb.Empty, error)
	// DeleteServerInfo deletes a ServerInfo by name.
	DeleteServerInfo(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// DeleteAllServerInfos deletes all ServerInfos.
	DeleteAllServerInfos(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetTrustedCluster gets a Trusted Cluster resource by name.
	GetTrustedCluster(context.Context, *types.ResourceRequest) (*types.TrustedClusterV2, error)
	// GetTrustedClusters gets all current Trusted Cluster resources.
	GetTrustedClusters(context.Context, *emptypb.Empty) (*types.TrustedClusterV2List, error)
	// Deprecated: Do not use.
	// UpsertTrustedCluster upserts a Trusted Cluster in a backend.
	//
	// Deprecated: Use [teleport.trust.v1.UpsertTrustedCluster] instead.
	UpsertTrustedCluster(context.Context, *types.TrustedClusterV2) (*types.TrustedClusterV2, error)
	// DeleteTrustedCluster deletes an existing Trusted Cluster in a backend by name.
	DeleteTrustedCluster(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// GetToken retrieves a token described by the given request.
	GetToken(context.Context, *types.ResourceRequest) (*types.ProvisionTokenV2, error)
	// GetToken retrieves all tokens.
	GetTokens(context.Context, *emptypb.Empty) (*types.ProvisionTokenV2List, error)
	// CreateTokenV2 creates a token in a backend.
	CreateTokenV2(context.Context, *CreateTokenV2Request) (*emptypb.Empty, error)
	// UpsertTokenV2 upserts a token in a backend.
	UpsertTokenV2(context.Context, *UpsertTokenV2Request) (*emptypb.Empty, error)
	// DeleteToken deletes an existing token in a backend described by the given request.
	DeleteToken(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// GetClusterAuditConfig gets cluster audit configuration.
	GetClusterAuditConfig(context.Context, *emptypb.Empty) (*types.ClusterAuditConfigV2, error)
	// Deprecated: Do not use.
	// GetClusterNetworkingConfig gets cluster networking configuration.
	// Deprecated: Use clusterconfigv1.Service.GetClusterNetworkingConfig instead.
	GetClusterNetworkingConfig(context.Context, *emptypb.Empty) (*types.ClusterNetworkingConfigV2, error)
	// Deprecated: Do not use.
	// SetClusterNetworkingConfig sets cluster networking configuration.
	// Deprecated: Use clusterconfigv1.Service.Update/UpsertClusterNetworkingConfig instead.
	SetClusterNetworkingConfig(context.Context, *types.ClusterNetworkingConfigV2) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// ResetClusterNetworkingConfig resets cluster networking configuration to defaults.
	// Deprecated: Use clusterconfigv1.Service.ResetClusterNetworkingConfig instead.
	ResetClusterNetworkingConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// GetSessionRecordingConfig gets session recording configuration.
	// Deprecated: Use clusterconfigv1.Service.GetSessionRecordingConfig instead.
	GetSessionRecordingConfig(context.Context, *emptypb.Empty) (*types.SessionRecordingConfigV2, error)
	// Deprecated: Do not use.
	// SetSessionRecordingConfig sets session recording configuration.
	// Deprecated: Use clusterconfigv1.Service.Upsert/UpdateSessionRecordingConfig instead.
	SetSessionRecordingConfig(context.Context, *types.SessionRecordingConfigV2) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// ResetSessionRecordingConfig resets session recording configuration to defaults.
	// Deprecated: Use clusterconfigv1.Service.ResetSessionRecordingConfig instead.
	ResetSessionRecordingConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// GetAuthPreference gets cluster auth preference.
	// Deprecated: Use clusterconfigv1.Service.GetAuthPreference instead.
	GetAuthPreference(context.Context, *emptypb.Empty) (*types.AuthPreferenceV2, error)
	// Deprecated: Do not use.
	// SetAuthPreference sets cluster auth preference.
	// Deprecated: Use clusterconfigv1.Service.Create/Update/UpsertAuthPreference instead.
	SetAuthPreference(context.Context, *types.AuthPreferenceV2) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// ResetAuthPreference resets cluster auth preference to defaults.
	// Deprecated: Use clusterconfigv1.Service.ResetAuthPreference instead.
	ResetAuthPreference(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetUIConfig gets the configuration for the UI served by the proxy service
	GetUIConfig(context.Context, *emptypb.Empty) (*types.UIConfigV1, error)
	// SetUIConfig sets the configuration for the UI served by the proxy service
	SetUIConfig(context.Context, *types.UIConfigV1) (*emptypb.Empty, error)
	// DeleteUIConfig deletes the custom configuration for the UI served by the proxy service
	DeleteUIConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetEvents gets events from the audit log.
	GetEvents(context.Context, *GetEventsRequest) (*Events, error)
	// GetSessionEvents gets completed session events from the audit log.
	GetSessionEvents(context.Context, *GetSessionEventsRequest) (*Events, error)
	// GetLock gets a lock by name.
	GetLock(context.Context, *GetLockRequest) (*types.LockV2, error)
	// GetLocks gets all/in-force locks that match at least one of the targets when specified.
	GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error)
	// UpsertLock upserts a lock.
	UpsertLock(context.Context, *types.LockV2) (*emptypb.Empty, error)
	// DeleteLock deletes a lock.
	DeleteLock(context.Context, *DeleteLockRequest) (*emptypb.Empty, error)
	// ReplaceRemoteLocks replaces the set of locks associated with a remote cluster.
	ReplaceRemoteLocks(context.Context, *ReplaceRemoteLocksRequest) (*emptypb.Empty, error)
	// StreamSessionEvents streams audit events from a given session recording.
	StreamSessionEvents(*StreamSessionEventsRequest, grpc.ServerStreamingServer[events.OneOf]) error
	// GetNetworkRestrictions retrieves all the network restrictions (allow/deny lists).
	GetNetworkRestrictions(context.Context, *emptypb.Empty) (*types.NetworkRestrictionsV4, error)
	// SetNetworkRestrictions updates the network restrictions.
	SetNetworkRestrictions(context.Context, *types.NetworkRestrictionsV4) (*emptypb.Empty, error)
	// DeleteNetworkRestrictions delete the network restrictions.
	DeleteNetworkRestrictions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetApps returns all registered applications.
	GetApps(context.Context, *emptypb.Empty) (*types.AppV3List, error)
	// GetApp returns an application by name.
	GetApp(context.Context, *types.ResourceRequest) (*types.AppV3, error)
	// CreateApp creates a new application resource.
	CreateApp(context.Context, *types.AppV3) (*emptypb.Empty, error)
	// UpdateApp updates existing application resource.
	UpdateApp(context.Context, *types.AppV3) (*emptypb.Empty, error)
	// DeleteApp removes specified application resource.
	DeleteApp(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// DeleteAllApps removes all application resources.
	DeleteAllApps(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetDatabases returns all registered databases.
	GetDatabases(context.Context, *emptypb.Empty) (*types.DatabaseV3List, error)
	// GetDatabase returns a database by name.
	GetDatabase(context.Context, *types.ResourceRequest) (*types.DatabaseV3, error)
	// CreateDatabase creates a new database resource.
	CreateDatabase(context.Context, *types.DatabaseV3) (*emptypb.Empty, error)
	// UpdateDatabase updates existing database resource.
	UpdateDatabase(context.Context, *types.DatabaseV3) (*emptypb.Empty, error)
	// DeleteDatabase removes specified database resource.
	DeleteDatabase(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// DeleteAllDatabases removes all database resources.
	DeleteAllDatabases(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetKubernetesClusters returns all registered kubernetes clusters.
	GetKubernetesClusters(context.Context, *emptypb.Empty) (*types.KubernetesClusterV3List, error)
	// GetKubernetesCluster returns a kubernetes cluster by name.
	GetKubernetesCluster(context.Context, *types.ResourceRequest) (*types.KubernetesClusterV3, error)
	// CreateKubernetesCluster creates a new kubernetes cluster resource.
	CreateKubernetesCluster(context.Context, *types.KubernetesClusterV3) (*emptypb.Empty, error)
	// UpdateKubernetesCluster updates existing kubernetes cluster resource.
	UpdateKubernetesCluster(context.Context, *types.KubernetesClusterV3) (*emptypb.Empty, error)
	// DeleteKubernetesCluster removes specified kubernetes cluster resource.
	DeleteKubernetesCluster(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// DeleteAllKubernetesClusters removes all kubernetes cluster resources.
	DeleteAllKubernetesClusters(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetWindowsDesktopServices returns all registered Windows desktop services.
	GetWindowsDesktopServices(context.Context, *emptypb.Empty) (*GetWindowsDesktopServicesResponse, error)
	// GetWindowsDesktopService gets a Windows desktop service by name.
	GetWindowsDesktopService(context.Context, *GetWindowsDesktopServiceRequest) (*GetWindowsDesktopServiceResponse, error)
	// UpsertWindowsDesktopService registers a new Windows desktop service.
	UpsertWindowsDesktopService(context.Context, *types.WindowsDesktopServiceV3) (*types.KeepAlive, error)
	// DeleteWindowsDesktopService removes the specified Windows desktop service.
	DeleteWindowsDesktopService(context.Context, *DeleteWindowsDesktopServiceRequest) (*emptypb.Empty, error)
	// DeleteAllWindowsDesktopServices removes all registered Windows desktop services.
	DeleteAllWindowsDesktopServices(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetWindowsDesktops returns all registered Windows desktop hosts matching the supplied filter.
	GetWindowsDesktops(context.Context, *types.WindowsDesktopFilter) (*GetWindowsDesktopsResponse, error)
	// CreateWindowsDesktop registers a new Windows desktop host.
	CreateWindowsDesktop(context.Context, *types.WindowsDesktopV3) (*emptypb.Empty, error)
	// UpdateWindowsDesktop updates an existing Windows desktop host.
	UpdateWindowsDesktop(context.Context, *types.WindowsDesktopV3) (*emptypb.Empty, error)
	// UpsertWindowsDesktop updates a Windows desktop host, creating it if it doesn't exist.
	UpsertWindowsDesktop(context.Context, *types.WindowsDesktopV3) (*emptypb.Empty, error)
	// DeleteWindowsDesktop removes the specified Windows desktop host.
	// Unlike GetWindowsDesktops, this call will delete at-most 1 desktop.
	// To delete all desktops, use DeleteAllWindowsDesktops.
	DeleteWindowsDesktop(context.Context, *DeleteWindowsDesktopRequest) (*emptypb.Empty, error)
	// DeleteAllWindowsDesktops removes all registered Windows desktop hosts.
	DeleteAllWindowsDesktops(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GenerateWindowsDesktopCert generates client smartcard certificate used
	// by an RDP client to authenticate with Windows.
	GenerateWindowsDesktopCert(context.Context, *WindowsDesktopCertRequest) (*WindowsDesktopCertResponse, error)
	// GenerateCertAuthorityCRL creates an empty CRL for the specified CA.
	GenerateCertAuthorityCRL(context.Context, *CertAuthorityRequest) (*CRL, error)
	// GetDesktopBootstrapScript returns a PowerShell script to bootstrap Active Directory.
	GetDesktopBootstrapScript(context.Context, *emptypb.Empty) (*DesktopBootstrapScriptResponse, error)
	// CreateConnectionDiagnostic creates a new connection diagnostic.
	CreateConnectionDiagnostic(context.Context, *types.ConnectionDiagnosticV1) (*emptypb.Empty, error)
	// UpdateConnectionDiagnostic updates a connection diagnostic.
	UpdateConnectionDiagnostic(context.Context, *types.ConnectionDiagnosticV1) (*emptypb.Empty, error)
	// GetConnectionDiagnostic reads a connection diagnostic.
	GetConnectionDiagnostic(context.Context, *GetConnectionDiagnosticRequest) (*types.ConnectionDiagnosticV1, error)
	// AppendDiagnosticTrace appends a Trace to the ConnectionDiagnostic.
	AppendDiagnosticTrace(context.Context, *AppendDiagnosticTraceRequest) (*types.ConnectionDiagnosticV1, error)
	// ChangeUserAuthentication allows a user to change their password and if enabled,
	// also adds a new MFA device. After successful invocation, a new web session is created as well
	// as a new set of recovery codes (if user meets the requirements to receive them), invalidating
	// any existing codes the user previously had.
	//
	// Only local users may be targeted by this RPC.
	ChangeUserAuthentication(context.Context, *ChangeUserAuthenticationRequest) (*ChangeUserAuthenticationResponse, error)
	// StartAccountRecovery (exclusive to cloud users) is the first out of two step user
	// verification needed to allow a user to recover their account. The first form of verification
	// is a user's username and a recovery code. After successful verification, a recovery start
	// token is created for the user which its ID will be used as part of a URL that will be emailed
	// to the user (not done in this request). The user will be able to finish their second form of
	// verification by clicking on this URL and following the prompts.
	//
	// If a valid user fails to provide correct recovery code for MaxAccountRecoveryAttempts,
	// user account gets temporarily locked from further recovery attempts and from logging in.
	//
	// Start tokens last RecoveryStartTokenTTL.
	//
	// Only local users may perform account recovery
	StartAccountRecovery(context.Context, *StartAccountRecoveryRequest) (*types.UserTokenV3, error)
	// VerifyAccountRecovery (exclusive to cloud users) is the second step of the two step
	// verification needed to allow a user to recover their account, after RPC StartAccountRecovery.
	// The second form of verification is a user's password or their second factor (depending on
	// what authentication they needed to recover). After successful verification, a recovery
	// approved token is created which allows a user to request protected actions while not logged
	// in e.g: setting a new password or a mfa device, viewing their MFA devices, deleting their MFA
	// devices, and generating new recovery codes.
	//
	// The recovery start token to verify this request becomes deleted before
	// creating a recovery approved token, which invalidates the recovery link users received
	// to finish their verification.
	//
	// If user fails to verify themselves for MaxAccountRecoveryAttempts
	// (combined attempts with RPC StartAccountRecovery), users account will be temporarily locked
	// from logging in. If users still have unused recovery codes left, they still have
	// opportunities to recover their account. To allow this, users recovery attempts are also
	// deleted along with all user tokens which will force the user to restart the recovery process
	// from step 1 (RPC StartAccountRecovery).
	//
	// Recovery approved tokens last RecoveryApprovedTokenTTL.
	VerifyAccountRecovery(context.Context, *VerifyAccountRecoveryRequest) (*types.UserTokenV3, error)
	// CompleteAccountRecovery (exclusive to cloud users) is the last step in account
	// recovery, after RPC's StartAccountRecovery and VerifyAccountRecovery. This step sets a new
	// password or adds a new mfa device, allowing the user to regain access to their account with
	// the new credentials. When the new authentication is successfully set, any user lock is
	// removed so the user can login immediately afterwards.
	CompleteAccountRecovery(context.Context, *CompleteAccountRecoveryRequest) (*emptypb.Empty, error)
	// CreateAccountRecoveryCodes (exclusive to cloud users) creates new set of recovery codes for a
	// user, replacing and invalidating any previously owned codes. Users can only get recovery
	// codes if their username is in a valid email format.
	CreateAccountRecoveryCodes(context.Context, *CreateAccountRecoveryCodesRequest) (*RecoveryCodes, error)
	// GetAccountRecoveryToken (exclusive to cloud users) returns a user token resource after
	// verifying that the token requested has not expired and is of the correct recovery kind.
	// Besides checking for validity of a token ID, it is also used to get basic information from
	// the token e.g: username, state of recovery (started or approved) and the type of recovery
	// requested (password or second factor).
	GetAccountRecoveryToken(context.Context, *GetAccountRecoveryTokenRequest) (*types.UserTokenV3, error)
	// GetAccountRecoveryCodes (exclusive to cloud users) is a request to return the user in context
	// their recovery codes. This request will not return any secrets (the values of recovery
	// codes), but instead returns non-sensitive data eg. when the recovery codes were created.
	GetAccountRecoveryCodes(context.Context, *GetAccountRecoveryCodesRequest) (*RecoveryCodes, error)
	// CreatePrivilegeToken returns a new privilege token after a logged in user successfully
	// re-authenticates with their second factor device. Privilege token lasts PrivilegeTokenTTL and
	// is used to gain access to privileged actions eg: deleting/adding a MFA device.
	CreatePrivilegeToken(context.Context, *CreatePrivilegeTokenRequest) (*types.UserTokenV3, error)
	// GetInstaller retrieves the installer script resource
	GetInstaller(context.Context, *types.ResourceRequest) (*types.InstallerV1, error)
	// GetInstallers retrieves all of installer script resources.
	GetInstallers(context.Context, *emptypb.Empty) (*types.InstallerV1List, error)
	// SetInstaller sets the installer script resource
	SetInstaller(context.Context, *types.InstallerV1) (*emptypb.Empty, error)
	// DeleteInstaller removes the specified installer script resource
	DeleteInstaller(context.Context, *types.ResourceRequest) (*emptypb.Empty, error)
	// DeleteAllInstallers removes all installer script resources
	DeleteAllInstallers(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// ListResources retrieves a paginated list of resources.
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	// ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
	ListUnifiedResources(context.Context, *ListUnifiedResourcesRequest) (*ListUnifiedResourcesResponse, error)
	// GetSSHTargets gets all servers that would match an equivalent ssh dial request. Note that this method
	// returns all resources directly accessible to the user *and* all resources available via 'SearchAsRoles',
	// which is what we want when handling things like ambiguous host errors and resource-based access requests,
	// but may result in confusing behavior if it is used outside of those contexts.
	GetSSHTargets(context.Context, *GetSSHTargetsRequest) (*GetSSHTargetsResponse, error)
	// ResolveSSHTarget returns the server that would be resolved in an equivalent ssh dial request.
	ResolveSSHTarget(context.Context, *ResolveSSHTargetRequest) (*ResolveSSHTargetResponse, error)
	// GetDomainName returns local auth domain of the current auth server
	GetDomainName(context.Context, *emptypb.Empty) (*GetDomainNameResponse, error)
	// GetClusterCACert returns the PEM-encoded TLS certs for the local cluster
	// without signing keys. If the cluster has multiple TLS certs, they will
	// all be appended.
	GetClusterCACert(context.Context, *emptypb.Empty) (*GetClusterCACertResponse, error)
	// AssertSystemRole is used by agents to prove that they have a given system role when their
	// credentials originate from multiple separate join tokens so that they can be issued an instance
	// certificate that encompasses all of their capabilities. This method will be deprecated once we
	// have a more comprehensive model for join token joining/replacement.
	AssertSystemRole(context.Context, *SystemRoleAssertion) (*emptypb.Empty, error)
	// SubmitUsageEvent submits an external usage event.
	SubmitUsageEvent(context.Context, *SubmitUsageEventRequest) (*emptypb.Empty, error)
	// GetLicense returns the license used to start the auth server.
	GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error)
	// ListReleases returns a list of Teleport Enterprise releases.
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error)
	// ListSAMLIdPServiceProviders returns a paginated list of SAML IdP service provider resources.
	ListSAMLIdPServiceProviders(context.Context, *ListSAMLIdPServiceProvidersRequest) (*ListSAMLIdPServiceProvidersResponse, error)
	// GetSAMLIdPServiceProvider returns the specified SAML IdP service provider resources.
	GetSAMLIdPServiceProvider(context.Context, *GetSAMLIdPServiceProviderRequest) (*types.SAMLIdPServiceProviderV1, error)
	// CreateSAMLIdPServiceProvider creates a new SAML IdP service provider resource.
	CreateSAMLIdPServiceProvider(context.Context, *types.SAMLIdPServiceProviderV1) (*emptypb.Empty, error)
	// UpdateSAMLIdPServiceProvider updates an existing SAML IdP service provider resource.
	UpdateSAMLIdPServiceProvider(context.Context, *types.SAMLIdPServiceProviderV1) (*emptypb.Empty, error)
	// DeleteSAMLIdPServiceProvider removes the specified SAML IdP service provider resource.
	DeleteSAMLIdPServiceProvider(context.Context, *DeleteSAMLIdPServiceProviderRequest) (*emptypb.Empty, error)
	// DeleteAllSAMLIdPServiceProviders removes all SAML IdP service providers.
	DeleteAllSAMLIdPServiceProviders(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// ListUserGroups returns a paginated list of user group resources.
	ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error)
	// GetUserGroup returns the specified user group resource.
	GetUserGroup(context.Context, *GetUserGroupRequest) (*types.UserGroupV1, error)
	// CreateUserGroup creates a new user group resource.
	CreateUserGroup(context.Context, *types.UserGroupV1) (*emptypb.Empty, error)
	// UpdateUserGroup updates an existing user group resource.
	UpdateUserGroup(context.Context, *types.UserGroupV1) (*emptypb.Empty, error)
	// DeleteUserGroup removes the specified user group resource.
	DeleteUserGroup(context.Context, *DeleteUserGroupRequest) (*emptypb.Empty, error)
	// DeleteAllUserGroups removes all user groups.
	DeleteAllUserGroups(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetHeadlessAuthentication is a request to retrieve a headless authentication from the backend.
	GetHeadlessAuthentication(context.Context, *GetHeadlessAuthenticationRequest) (*types.HeadlessAuthentication, error)
	// WatchPendingHeadlessAuthentications watches the backend for pending headless authentication requests for the user.
	WatchPendingHeadlessAuthentications(*emptypb.Empty, grpc.ServerStreamingServer[Event]) error
	// UpdateHeadlessAuthenticationState is a request to update a headless authentication's state.
	UpdateHeadlessAuthenticationState(context.Context, *UpdateHeadlessAuthenticationStateRequest) (*emptypb.Empty, error)
	// ExportUpgradeWindows is used to load derived maintenance window values for agents that
	// need to export schedules to external upgraders.
	ExportUpgradeWindows(context.Context, *ExportUpgradeWindowsRequest) (*ExportUpgradeWindowsResponse, error)
	// GetClusterMaintenanceConfig gets the current maintenance window config singleton.
	GetClusterMaintenanceConfig(context.Context, *emptypb.Empty) (*types.ClusterMaintenanceConfigV1, error)
	// UpdateClusterMaintenanceConfig updates the current maintenance window config singleton.
	UpdateClusterMaintenanceConfig(context.Context, *types.ClusterMaintenanceConfigV1) (*emptypb.Empty, error)
	// DeleteClusterMaintenanceConfig deletes the current maintenance window config singleton.
	DeleteClusterMaintenanceConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedAuthServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) InventoryControlStream(grpc.BidiStreamingServer[UpstreamInventoryOneOf, DownstreamInventoryOneOf]) error {
	return status.Errorf(codes.Unimplemented, "method InventoryControlStream not implemented")
}
func (UnimplementedAuthServiceServer) GetInventoryStatus(context.Context, *InventoryStatusRequest) (*InventoryStatusSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryStatus not implemented")
}
func (UnimplementedAuthServiceServer) GetInventoryConnectedServiceCounts(context.Context, *InventoryConnectedServiceCountsRequest) (*InventoryConnectedServiceCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryConnectedServiceCounts not implemented")
}
func (UnimplementedAuthServiceServer) PingInventory(context.Context, *InventoryPingRequest) (*InventoryPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingInventory not implemented")
}
func (UnimplementedAuthServiceServer) GetInstances(*types.InstanceFilter, grpc.ServerStreamingServer[types.InstanceV1]) error {
	return status.Errorf(codes.Unimplemented, "method GetInstances not implemented")
}
func (UnimplementedAuthServiceServer) GetClusterAlerts(context.Context, *types.GetClusterAlertsRequest) (*GetClusterAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterAlerts not implemented")
}
func (UnimplementedAuthServiceServer) UpsertClusterAlert(context.Context, *UpsertClusterAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertClusterAlert not implemented")
}
func (UnimplementedAuthServiceServer) CreateAlertAck(context.Context, *types.AlertAcknowledgement) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertAck not implemented")
}
func (UnimplementedAuthServiceServer) GetAlertAcks(context.Context, *GetAlertAcksRequest) (*GetAlertAcksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertAcks not implemented")
}
func (UnimplementedAuthServiceServer) ClearAlertAcks(context.Context, *ClearAlertAcksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAlertAcks not implemented")
}
func (UnimplementedAuthServiceServer) MaintainSessionPresence(grpc.BidiStreamingServer[PresenceMFAChallengeSend, MFAAuthenticateChallenge]) error {
	return status.Errorf(codes.Unimplemented, "method MaintainSessionPresence not implemented")
}
func (UnimplementedAuthServiceServer) CreateSessionTracker(context.Context, *CreateSessionTrackerRequest) (*types.SessionTrackerV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSessionTracker not implemented")
}
func (UnimplementedAuthServiceServer) GetSessionTracker(context.Context, *GetSessionTrackerRequest) (*types.SessionTrackerV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionTracker not implemented")
}
func (UnimplementedAuthServiceServer) GetActiveSessionTrackers(*emptypb.Empty, grpc.ServerStreamingServer[types.SessionTrackerV1]) error {
	return status.Errorf(codes.Unimplemented, "method GetActiveSessionTrackers not implemented")
}
func (UnimplementedAuthServiceServer) GetActiveSessionTrackersWithFilter(*types.SessionTrackerFilter, grpc.ServerStreamingServer[types.SessionTrackerV1]) error {
	return status.Errorf(codes.Unimplemented, "method GetActiveSessionTrackersWithFilter not implemented")
}
func (UnimplementedAuthServiceServer) RemoveSessionTracker(context.Context, *RemoveSessionTrackerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSessionTracker not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSessionTracker(context.Context, *UpdateSessionTrackerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionTracker not implemented")
}
func (UnimplementedAuthServiceServer) SendKeepAlives(grpc.ClientStreamingServer[types.KeepAlive, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendKeepAlives not implemented")
}
func (UnimplementedAuthServiceServer) WatchEvents(*Watch, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method WatchEvents not implemented")
}
func (UnimplementedAuthServiceServer) GetNode(context.Context, *types.ResourceInNamespaceRequest) (*types.ServerV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedAuthServiceServer) UpsertNode(context.Context, *types.ServerV2) (*types.KeepAlive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertNode not implemented")
}
func (UnimplementedAuthServiceServer) DeleteNode(context.Context, *types.ResourceInNamespaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllNodes(context.Context, *types.ResourcesInNamespaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllNodes not implemented")
}
func (UnimplementedAuthServiceServer) GenerateUserCerts(context.Context, *UserCertsRequest) (*Certs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUserCerts not implemented")
}
func (UnimplementedAuthServiceServer) GenerateHostCerts(context.Context, *HostCertsRequest) (*Certs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHostCerts not implemented")
}
func (UnimplementedAuthServiceServer) GenerateUserSingleUseCerts(grpc.BidiStreamingServer[UserSingleUseCertsRequest, UserSingleUseCertsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateUserSingleUseCerts not implemented")
}
func (UnimplementedAuthServiceServer) GenerateOpenSSHCert(context.Context, *OpenSSHCertRequest) (*OpenSSHCert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOpenSSHCert not implemented")
}
func (UnimplementedAuthServiceServer) IsMFARequired(context.Context, *IsMFARequiredRequest) (*IsMFARequiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMFARequired not implemented")
}
func (UnimplementedAuthServiceServer) GetAccessRequestsV2(*types.AccessRequestFilter, grpc.ServerStreamingServer[types.AccessRequestV3]) error {
	return status.Errorf(codes.Unimplemented, "method GetAccessRequestsV2 not implemented")
}
func (UnimplementedAuthServiceServer) ListAccessRequests(context.Context, *ListAccessRequestsRequest) (*ListAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessRequests not implemented")
}
func (UnimplementedAuthServiceServer) CreateAccessRequestV2(context.Context, *types.AccessRequestV3) (*types.AccessRequestV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessRequestV2 not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAccessRequest(context.Context, *RequestID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessRequest not implemented")
}
func (UnimplementedAuthServiceServer) SetAccessRequestState(context.Context, *RequestStateSetter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessRequestState not implemented")
}
func (UnimplementedAuthServiceServer) SubmitAccessReview(context.Context, *types.AccessReviewSubmission) (*types.AccessRequestV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAccessReview not implemented")
}
func (UnimplementedAuthServiceServer) GetAccessCapabilities(context.Context, *types.AccessCapabilitiesRequest) (*types.AccessCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessCapabilities not implemented")
}
func (UnimplementedAuthServiceServer) GetAccessRequestAllowedPromotions(context.Context, *AccessRequestAllowedPromotionRequest) (*AccessRequestAllowedPromotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessRequestAllowedPromotions not implemented")
}
func (UnimplementedAuthServiceServer) GetPluginData(context.Context, *types.PluginDataFilter) (*PluginDataSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginData not implemented")
}
func (UnimplementedAuthServiceServer) UpdatePluginData(context.Context, *types.PluginDataUpdateParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePluginData not implemented")
}
func (UnimplementedAuthServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAuthServiceServer) GetResetPasswordToken(context.Context, *GetResetPasswordTokenRequest) (*types.UserTokenV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResetPasswordToken not implemented")
}
func (UnimplementedAuthServiceServer) CreateResetPasswordToken(context.Context, *CreateResetPasswordTokenRequest) (*types.UserTokenV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResetPasswordToken not implemented")
}
func (UnimplementedAuthServiceServer) GetUser(context.Context, *GetUserRequest) (*types.UserV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServiceServer) GetCurrentUser(context.Context, *emptypb.Empty) (*types.UserV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedAuthServiceServer) GetCurrentUserRoles(*emptypb.Empty, grpc.ServerStreamingServer[types.RoleV6]) error {
	return status.Errorf(codes.Unimplemented, "method GetCurrentUserRoles not implemented")
}
func (UnimplementedAuthServiceServer) GetUsers(*GetUsersRequest, grpc.ServerStreamingServer[types.UserV2]) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAuthServiceServer) CreateUser(context.Context, *types.UserV2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUser(context.Context, *types.UserV2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) AcquireSemaphore(context.Context, *types.AcquireSemaphoreRequest) (*types.SemaphoreLease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireSemaphore not implemented")
}
func (UnimplementedAuthServiceServer) KeepAliveSemaphoreLease(context.Context, *types.SemaphoreLease) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAliveSemaphoreLease not implemented")
}
func (UnimplementedAuthServiceServer) CancelSemaphoreLease(context.Context, *types.SemaphoreLease) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSemaphoreLease not implemented")
}
func (UnimplementedAuthServiceServer) GetSemaphores(context.Context, *types.SemaphoreFilter) (*Semaphores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemaphores not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSemaphore(context.Context, *types.SemaphoreFilter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSemaphore not implemented")
}
func (UnimplementedAuthServiceServer) EmitAuditEvent(context.Context, *events.OneOf) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitAuditEvent not implemented")
}
func (UnimplementedAuthServiceServer) CreateAuditStream(grpc.BidiStreamingServer[AuditStreamRequest, events.StreamStatus]) error {
	return status.Errorf(codes.Unimplemented, "method CreateAuditStream not implemented")
}
func (UnimplementedAuthServiceServer) UpsertApplicationServer(context.Context, *UpsertApplicationServerRequest) (*types.KeepAlive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertApplicationServer not implemented")
}
func (UnimplementedAuthServiceServer) DeleteApplicationServer(context.Context, *DeleteApplicationServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationServer not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllApplicationServers(context.Context, *DeleteAllApplicationServersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllApplicationServers not implemented")
}
func (UnimplementedAuthServiceServer) GenerateAppToken(context.Context, *GenerateAppTokenRequest) (*GenerateAppTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAppToken not implemented")
}
func (UnimplementedAuthServiceServer) GetAppSession(context.Context, *GetAppSessionRequest) (*GetAppSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSession not implemented")
}
func (UnimplementedAuthServiceServer) ListAppSessions(context.Context, *ListAppSessionsRequest) (*ListAppSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppSessions not implemented")
}
func (UnimplementedAuthServiceServer) CreateAppSession(context.Context, *CreateAppSessionRequest) (*CreateAppSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAppSession(context.Context, *DeleteAppSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllAppSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllAppSessions not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUserAppSessions(context.Context, *DeleteUserAppSessionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAppSessions not implemented")
}
func (UnimplementedAuthServiceServer) CreateSnowflakeSession(context.Context, *CreateSnowflakeSessionRequest) (*CreateSnowflakeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnowflakeSession not implemented")
}
func (UnimplementedAuthServiceServer) GetSnowflakeSession(context.Context, *GetSnowflakeSessionRequest) (*GetSnowflakeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnowflakeSession not implemented")
}
func (UnimplementedAuthServiceServer) GetSnowflakeSessions(context.Context, *emptypb.Empty) (*GetSnowflakeSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnowflakeSessions not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSnowflakeSession(context.Context, *DeleteSnowflakeSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnowflakeSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllSnowflakeSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSnowflakeSessions not implemented")
}
func (UnimplementedAuthServiceServer) CreateSAMLIdPSession(context.Context, *CreateSAMLIdPSessionRequest) (*CreateSAMLIdPSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLIdPSession not implemented")
}
func (UnimplementedAuthServiceServer) GetSAMLIdPSession(context.Context, *GetSAMLIdPSessionRequest) (*GetSAMLIdPSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLIdPSession not implemented")
}
func (UnimplementedAuthServiceServer) ListSAMLIdPSessions(context.Context, *ListSAMLIdPSessionsRequest) (*ListSAMLIdPSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLIdPSessions not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSAMLIdPSession(context.Context, *DeleteSAMLIdPSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSAMLIdPSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllSAMLIdPSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSAMLIdPSessions not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUserSAMLIdPSessions(context.Context, *DeleteUserSAMLIdPSessionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSAMLIdPSessions not implemented")
}
func (UnimplementedAuthServiceServer) GetWebSession(context.Context, *types.GetWebSessionRequest) (*GetWebSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebSession not implemented")
}
func (UnimplementedAuthServiceServer) GetWebSessions(context.Context, *emptypb.Empty) (*GetWebSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebSessions not implemented")
}
func (UnimplementedAuthServiceServer) StreamWebSessions(*emptypb.Empty, grpc.ServerStreamingServer[types.WebSessionV2]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWebSessions not implemented")
}
func (UnimplementedAuthServiceServer) DeleteWebSession(context.Context, *types.DeleteWebSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebSession not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllWebSessions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllWebSessions not implemented")
}
func (UnimplementedAuthServiceServer) GetWebToken(context.Context, *types.GetWebTokenRequest) (*GetWebTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebToken not implemented")
}
func (UnimplementedAuthServiceServer) GetWebTokens(context.Context, *emptypb.Empty) (*GetWebTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebTokens not implemented")
}
func (UnimplementedAuthServiceServer) DeleteWebToken(context.Context, *types.DeleteWebTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebToken not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllWebTokens(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllWebTokens not implemented")
}
func (UnimplementedAuthServiceServer) UpdateRemoteCluster(context.Context, *types.RemoteClusterV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemoteCluster not implemented")
}
func (UnimplementedAuthServiceServer) UpsertKubernetesServer(context.Context, *UpsertKubernetesServerRequest) (*types.KeepAlive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertKubernetesServer not implemented")
}
func (UnimplementedAuthServiceServer) DeleteKubernetesServer(context.Context, *DeleteKubernetesServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesServer not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllKubernetesServers(context.Context, *DeleteAllKubernetesServersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllKubernetesServers not implemented")
}
func (UnimplementedAuthServiceServer) UpsertDatabaseServer(context.Context, *UpsertDatabaseServerRequest) (*types.KeepAlive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDatabaseServer not implemented")
}
func (UnimplementedAuthServiceServer) DeleteDatabaseServer(context.Context, *DeleteDatabaseServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabaseServer not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllDatabaseServers(context.Context, *DeleteAllDatabaseServersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllDatabaseServers not implemented")
}
func (UnimplementedAuthServiceServer) UpsertDatabaseService(context.Context, *UpsertDatabaseServiceRequest) (*types.KeepAlive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDatabaseService not implemented")
}
func (UnimplementedAuthServiceServer) DeleteDatabaseService(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabaseService not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllDatabaseServices(context.Context, *DeleteAllDatabaseServicesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllDatabaseServices not implemented")
}
func (UnimplementedAuthServiceServer) SignDatabaseCSR(context.Context, *DatabaseCSRRequest) (*DatabaseCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignDatabaseCSR not implemented")
}
func (UnimplementedAuthServiceServer) GenerateDatabaseCert(context.Context, *DatabaseCertRequest) (*DatabaseCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDatabaseCert not implemented")
}
func (UnimplementedAuthServiceServer) GenerateSnowflakeJWT(context.Context, *SnowflakeJWTRequest) (*SnowflakeJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSnowflakeJWT not implemented")
}
func (UnimplementedAuthServiceServer) GetRole(context.Context, *GetRoleRequest) (*types.RoleV6, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAuthServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedAuthServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*types.RoleV6, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*types.RoleV6, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthServiceServer) UpsertRoleV2(context.Context, *UpsertRoleRequest) (*types.RoleV6, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRoleV2 not implemented")
}
func (UnimplementedAuthServiceServer) UpsertRole(context.Context, *types.RoleV6) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRole not implemented")
}
func (UnimplementedAuthServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthServiceServer) AddMFADevice(grpc.BidiStreamingServer[AddMFADeviceRequest, AddMFADeviceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddMFADevice not implemented")
}
func (UnimplementedAuthServiceServer) DeleteMFADevice(grpc.BidiStreamingServer[DeleteMFADeviceRequest, DeleteMFADeviceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeleteMFADevice not implemented")
}
func (UnimplementedAuthServiceServer) AddMFADeviceSync(context.Context, *AddMFADeviceSyncRequest) (*AddMFADeviceSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMFADeviceSync not implemented")
}
func (UnimplementedAuthServiceServer) DeleteMFADeviceSync(context.Context, *DeleteMFADeviceSyncRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMFADeviceSync not implemented")
}
func (UnimplementedAuthServiceServer) GetMFADevices(context.Context, *GetMFADevicesRequest) (*GetMFADevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMFADevices not implemented")
}
func (UnimplementedAuthServiceServer) CreateAuthenticateChallenge(context.Context, *CreateAuthenticateChallengeRequest) (*MFAAuthenticateChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthenticateChallenge not implemented")
}
func (UnimplementedAuthServiceServer) CreateRegisterChallenge(context.Context, *CreateRegisterChallengeRequest) (*MFARegisterChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegisterChallenge not implemented")
}
func (UnimplementedAuthServiceServer) GetOIDCConnector(context.Context, *types.ResourceWithSecretsRequest) (*types.OIDCConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCConnector not implemented")
}
func (UnimplementedAuthServiceServer) GetOIDCConnectors(context.Context, *types.ResourcesWithSecretsRequest) (*types.OIDCConnectorV3List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCConnectors not implemented")
}
func (UnimplementedAuthServiceServer) CreateOIDCConnector(context.Context, *CreateOIDCConnectorRequest) (*types.OIDCConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOIDCConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpdateOIDCConnector(context.Context, *UpdateOIDCConnectorRequest) (*types.OIDCConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOIDCConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpsertOIDCConnector(context.Context, *types.OIDCConnectorV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertOIDCConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpsertOIDCConnectorV2(context.Context, *UpsertOIDCConnectorRequest) (*types.OIDCConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertOIDCConnectorV2 not implemented")
}
func (UnimplementedAuthServiceServer) DeleteOIDCConnector(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOIDCConnector not implemented")
}
func (UnimplementedAuthServiceServer) CreateOIDCAuthRequest(context.Context, *types.OIDCAuthRequest) (*types.OIDCAuthRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOIDCAuthRequest not implemented")
}
func (UnimplementedAuthServiceServer) GetOIDCAuthRequest(context.Context, *GetOIDCAuthRequestRequest) (*types.OIDCAuthRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCAuthRequest not implemented")
}
func (UnimplementedAuthServiceServer) GetSAMLConnector(context.Context, *types.ResourceWithSecretsRequest) (*types.SAMLConnectorV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLConnector not implemented")
}
func (UnimplementedAuthServiceServer) GetSAMLConnectors(context.Context, *types.ResourcesWithSecretsRequest) (*types.SAMLConnectorV2List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLConnectors not implemented")
}
func (UnimplementedAuthServiceServer) CreateSAMLConnector(context.Context, *CreateSAMLConnectorRequest) (*types.SAMLConnectorV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSAMLConnector(context.Context, *UpdateSAMLConnectorRequest) (*types.SAMLConnectorV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpsertSAMLConnector(context.Context, *types.SAMLConnectorV2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSAMLConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpsertSAMLConnectorV2(context.Context, *UpsertSAMLConnectorRequest) (*types.SAMLConnectorV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSAMLConnectorV2 not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSAMLConnector(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSAMLConnector not implemented")
}
func (UnimplementedAuthServiceServer) CreateSAMLAuthRequest(context.Context, *types.SAMLAuthRequest) (*types.SAMLAuthRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLAuthRequest not implemented")
}
func (UnimplementedAuthServiceServer) GetSAMLAuthRequest(context.Context, *GetSAMLAuthRequestRequest) (*types.SAMLAuthRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLAuthRequest not implemented")
}
func (UnimplementedAuthServiceServer) GetGithubConnector(context.Context, *types.ResourceWithSecretsRequest) (*types.GithubConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubConnector not implemented")
}
func (UnimplementedAuthServiceServer) GetGithubConnectors(context.Context, *types.ResourcesWithSecretsRequest) (*types.GithubConnectorV3List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubConnectors not implemented")
}
func (UnimplementedAuthServiceServer) CreateGithubConnector(context.Context, *CreateGithubConnectorRequest) (*types.GithubConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGithubConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpdateGithubConnector(context.Context, *UpdateGithubConnectorRequest) (*types.GithubConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGithubConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpsertGithubConnector(context.Context, *types.GithubConnectorV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertGithubConnector not implemented")
}
func (UnimplementedAuthServiceServer) UpsertGithubConnectorV2(context.Context, *UpsertGithubConnectorRequest) (*types.GithubConnectorV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertGithubConnectorV2 not implemented")
}
func (UnimplementedAuthServiceServer) DeleteGithubConnector(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGithubConnector not implemented")
}
func (UnimplementedAuthServiceServer) CreateGithubAuthRequest(context.Context, *types.GithubAuthRequest) (*types.GithubAuthRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGithubAuthRequest not implemented")
}
func (UnimplementedAuthServiceServer) GetGithubAuthRequest(context.Context, *GetGithubAuthRequestRequest) (*types.GithubAuthRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubAuthRequest not implemented")
}
func (UnimplementedAuthServiceServer) GetSSODiagnosticInfo(context.Context, *GetSSODiagnosticInfoRequest) (*types.SSODiagnosticInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSODiagnosticInfo not implemented")
}
func (UnimplementedAuthServiceServer) GetServerInfos(*emptypb.Empty, grpc.ServerStreamingServer[types.ServerInfoV1]) error {
	return status.Errorf(codes.Unimplemented, "method GetServerInfos not implemented")
}
func (UnimplementedAuthServiceServer) GetServerInfo(context.Context, *types.ResourceRequest) (*types.ServerInfoV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedAuthServiceServer) UpsertServerInfo(context.Context, *types.ServerInfoV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertServerInfo not implemented")
}
func (UnimplementedAuthServiceServer) DeleteServerInfo(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServerInfo not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllServerInfos(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllServerInfos not implemented")
}
func (UnimplementedAuthServiceServer) GetTrustedCluster(context.Context, *types.ResourceRequest) (*types.TrustedClusterV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustedCluster not implemented")
}
func (UnimplementedAuthServiceServer) GetTrustedClusters(context.Context, *emptypb.Empty) (*types.TrustedClusterV2List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustedClusters not implemented")
}
func (UnimplementedAuthServiceServer) UpsertTrustedCluster(context.Context, *types.TrustedClusterV2) (*types.TrustedClusterV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTrustedCluster not implemented")
}
func (UnimplementedAuthServiceServer) DeleteTrustedCluster(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrustedCluster not implemented")
}
func (UnimplementedAuthServiceServer) GetToken(context.Context, *types.ResourceRequest) (*types.ProvisionTokenV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthServiceServer) GetTokens(context.Context, *emptypb.Empty) (*types.ProvisionTokenV2List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedAuthServiceServer) CreateTokenV2(context.Context, *CreateTokenV2Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenV2 not implemented")
}
func (UnimplementedAuthServiceServer) UpsertTokenV2(context.Context, *UpsertTokenV2Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTokenV2 not implemented")
}
func (UnimplementedAuthServiceServer) DeleteToken(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedAuthServiceServer) GetClusterAuditConfig(context.Context, *emptypb.Empty) (*types.ClusterAuditConfigV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterAuditConfig not implemented")
}
func (UnimplementedAuthServiceServer) GetClusterNetworkingConfig(context.Context, *emptypb.Empty) (*types.ClusterNetworkingConfigV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterNetworkingConfig not implemented")
}
func (UnimplementedAuthServiceServer) SetClusterNetworkingConfig(context.Context, *types.ClusterNetworkingConfigV2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClusterNetworkingConfig not implemented")
}
func (UnimplementedAuthServiceServer) ResetClusterNetworkingConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetClusterNetworkingConfig not implemented")
}
func (UnimplementedAuthServiceServer) GetSessionRecordingConfig(context.Context, *emptypb.Empty) (*types.SessionRecordingConfigV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionRecordingConfig not implemented")
}
func (UnimplementedAuthServiceServer) SetSessionRecordingConfig(context.Context, *types.SessionRecordingConfigV2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSessionRecordingConfig not implemented")
}
func (UnimplementedAuthServiceServer) ResetSessionRecordingConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSessionRecordingConfig not implemented")
}
func (UnimplementedAuthServiceServer) GetAuthPreference(context.Context, *emptypb.Empty) (*types.AuthPreferenceV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthPreference not implemented")
}
func (UnimplementedAuthServiceServer) SetAuthPreference(context.Context, *types.AuthPreferenceV2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthPreference not implemented")
}
func (UnimplementedAuthServiceServer) ResetAuthPreference(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAuthPreference not implemented")
}
func (UnimplementedAuthServiceServer) GetUIConfig(context.Context, *emptypb.Empty) (*types.UIConfigV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUIConfig not implemented")
}
func (UnimplementedAuthServiceServer) SetUIConfig(context.Context, *types.UIConfigV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUIConfig not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUIConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUIConfig not implemented")
}
func (UnimplementedAuthServiceServer) GetEvents(context.Context, *GetEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedAuthServiceServer) GetSessionEvents(context.Context, *GetSessionEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionEvents not implemented")
}
func (UnimplementedAuthServiceServer) GetLock(context.Context, *GetLockRequest) (*types.LockV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedAuthServiceServer) GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocks not implemented")
}
func (UnimplementedAuthServiceServer) UpsertLock(context.Context, *types.LockV2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLock not implemented")
}
func (UnimplementedAuthServiceServer) DeleteLock(context.Context, *DeleteLockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLock not implemented")
}
func (UnimplementedAuthServiceServer) ReplaceRemoteLocks(context.Context, *ReplaceRemoteLocksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceRemoteLocks not implemented")
}
func (UnimplementedAuthServiceServer) StreamSessionEvents(*StreamSessionEventsRequest, grpc.ServerStreamingServer[events.OneOf]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSessionEvents not implemented")
}
func (UnimplementedAuthServiceServer) GetNetworkRestrictions(context.Context, *emptypb.Empty) (*types.NetworkRestrictionsV4, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkRestrictions not implemented")
}
func (UnimplementedAuthServiceServer) SetNetworkRestrictions(context.Context, *types.NetworkRestrictionsV4) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetworkRestrictions not implemented")
}
func (UnimplementedAuthServiceServer) DeleteNetworkRestrictions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkRestrictions not implemented")
}
func (UnimplementedAuthServiceServer) GetApps(context.Context, *emptypb.Empty) (*types.AppV3List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (UnimplementedAuthServiceServer) GetApp(context.Context, *types.ResourceRequest) (*types.AppV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedAuthServiceServer) CreateApp(context.Context, *types.AppV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAuthServiceServer) UpdateApp(context.Context, *types.AppV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAuthServiceServer) DeleteApp(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllApps(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllApps not implemented")
}
func (UnimplementedAuthServiceServer) GetDatabases(context.Context, *emptypb.Empty) (*types.DatabaseV3List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabases not implemented")
}
func (UnimplementedAuthServiceServer) GetDatabase(context.Context, *types.ResourceRequest) (*types.DatabaseV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabase not implemented")
}
func (UnimplementedAuthServiceServer) CreateDatabase(context.Context, *types.DatabaseV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedAuthServiceServer) UpdateDatabase(context.Context, *types.DatabaseV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabase not implemented")
}
func (UnimplementedAuthServiceServer) DeleteDatabase(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabase not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllDatabases(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllDatabases not implemented")
}
func (UnimplementedAuthServiceServer) GetKubernetesClusters(context.Context, *emptypb.Empty) (*types.KubernetesClusterV3List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesClusters not implemented")
}
func (UnimplementedAuthServiceServer) GetKubernetesCluster(context.Context, *types.ResourceRequest) (*types.KubernetesClusterV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesCluster not implemented")
}
func (UnimplementedAuthServiceServer) CreateKubernetesCluster(context.Context, *types.KubernetesClusterV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesCluster not implemented")
}
func (UnimplementedAuthServiceServer) UpdateKubernetesCluster(context.Context, *types.KubernetesClusterV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubernetesCluster not implemented")
}
func (UnimplementedAuthServiceServer) DeleteKubernetesCluster(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesCluster not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllKubernetesClusters(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllKubernetesClusters not implemented")
}
func (UnimplementedAuthServiceServer) GetWindowsDesktopServices(context.Context, *emptypb.Empty) (*GetWindowsDesktopServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWindowsDesktopServices not implemented")
}
func (UnimplementedAuthServiceServer) GetWindowsDesktopService(context.Context, *GetWindowsDesktopServiceRequest) (*GetWindowsDesktopServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWindowsDesktopService not implemented")
}
func (UnimplementedAuthServiceServer) UpsertWindowsDesktopService(context.Context, *types.WindowsDesktopServiceV3) (*types.KeepAlive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWindowsDesktopService not implemented")
}
func (UnimplementedAuthServiceServer) DeleteWindowsDesktopService(context.Context, *DeleteWindowsDesktopServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWindowsDesktopService not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllWindowsDesktopServices(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllWindowsDesktopServices not implemented")
}
func (UnimplementedAuthServiceServer) GetWindowsDesktops(context.Context, *types.WindowsDesktopFilter) (*GetWindowsDesktopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWindowsDesktops not implemented")
}
func (UnimplementedAuthServiceServer) CreateWindowsDesktop(context.Context, *types.WindowsDesktopV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWindowsDesktop not implemented")
}
func (UnimplementedAuthServiceServer) UpdateWindowsDesktop(context.Context, *types.WindowsDesktopV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWindowsDesktop not implemented")
}
func (UnimplementedAuthServiceServer) UpsertWindowsDesktop(context.Context, *types.WindowsDesktopV3) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWindowsDesktop not implemented")
}
func (UnimplementedAuthServiceServer) DeleteWindowsDesktop(context.Context, *DeleteWindowsDesktopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWindowsDesktop not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllWindowsDesktops(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllWindowsDesktops not implemented")
}
func (UnimplementedAuthServiceServer) GenerateWindowsDesktopCert(context.Context, *WindowsDesktopCertRequest) (*WindowsDesktopCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWindowsDesktopCert not implemented")
}
func (UnimplementedAuthServiceServer) GenerateCertAuthorityCRL(context.Context, *CertAuthorityRequest) (*CRL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCertAuthorityCRL not implemented")
}
func (UnimplementedAuthServiceServer) GetDesktopBootstrapScript(context.Context, *emptypb.Empty) (*DesktopBootstrapScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesktopBootstrapScript not implemented")
}
func (UnimplementedAuthServiceServer) CreateConnectionDiagnostic(context.Context, *types.ConnectionDiagnosticV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectionDiagnostic not implemented")
}
func (UnimplementedAuthServiceServer) UpdateConnectionDiagnostic(context.Context, *types.ConnectionDiagnosticV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionDiagnostic not implemented")
}
func (UnimplementedAuthServiceServer) GetConnectionDiagnostic(context.Context, *GetConnectionDiagnosticRequest) (*types.ConnectionDiagnosticV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionDiagnostic not implemented")
}
func (UnimplementedAuthServiceServer) AppendDiagnosticTrace(context.Context, *AppendDiagnosticTraceRequest) (*types.ConnectionDiagnosticV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendDiagnosticTrace not implemented")
}
func (UnimplementedAuthServiceServer) ChangeUserAuthentication(context.Context, *ChangeUserAuthenticationRequest) (*ChangeUserAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserAuthentication not implemented")
}
func (UnimplementedAuthServiceServer) StartAccountRecovery(context.Context, *StartAccountRecoveryRequest) (*types.UserTokenV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAccountRecovery not implemented")
}
func (UnimplementedAuthServiceServer) VerifyAccountRecovery(context.Context, *VerifyAccountRecoveryRequest) (*types.UserTokenV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccountRecovery not implemented")
}
func (UnimplementedAuthServiceServer) CompleteAccountRecovery(context.Context, *CompleteAccountRecoveryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAccountRecovery not implemented")
}
func (UnimplementedAuthServiceServer) CreateAccountRecoveryCodes(context.Context, *CreateAccountRecoveryCodesRequest) (*RecoveryCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountRecoveryCodes not implemented")
}
func (UnimplementedAuthServiceServer) GetAccountRecoveryToken(context.Context, *GetAccountRecoveryTokenRequest) (*types.UserTokenV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRecoveryToken not implemented")
}
func (UnimplementedAuthServiceServer) GetAccountRecoveryCodes(context.Context, *GetAccountRecoveryCodesRequest) (*RecoveryCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRecoveryCodes not implemented")
}
func (UnimplementedAuthServiceServer) CreatePrivilegeToken(context.Context, *CreatePrivilegeTokenRequest) (*types.UserTokenV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivilegeToken not implemented")
}
func (UnimplementedAuthServiceServer) GetInstaller(context.Context, *types.ResourceRequest) (*types.InstallerV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstaller not implemented")
}
func (UnimplementedAuthServiceServer) GetInstallers(context.Context, *emptypb.Empty) (*types.InstallerV1List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallers not implemented")
}
func (UnimplementedAuthServiceServer) SetInstaller(context.Context, *types.InstallerV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInstaller not implemented")
}
func (UnimplementedAuthServiceServer) DeleteInstaller(context.Context, *types.ResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstaller not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllInstallers(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllInstallers not implemented")
}
func (UnimplementedAuthServiceServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedAuthServiceServer) ListUnifiedResources(context.Context, *ListUnifiedResourcesRequest) (*ListUnifiedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnifiedResources not implemented")
}
func (UnimplementedAuthServiceServer) GetSSHTargets(context.Context, *GetSSHTargetsRequest) (*GetSSHTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSHTargets not implemented")
}
func (UnimplementedAuthServiceServer) ResolveSSHTarget(context.Context, *ResolveSSHTargetRequest) (*ResolveSSHTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveSSHTarget not implemented")
}
func (UnimplementedAuthServiceServer) GetDomainName(context.Context, *emptypb.Empty) (*GetDomainNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainName not implemented")
}
func (UnimplementedAuthServiceServer) GetClusterCACert(context.Context, *emptypb.Empty) (*GetClusterCACertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterCACert not implemented")
}
func (UnimplementedAuthServiceServer) AssertSystemRole(context.Context, *SystemRoleAssertion) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssertSystemRole not implemented")
}
func (UnimplementedAuthServiceServer) SubmitUsageEvent(context.Context, *SubmitUsageEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUsageEvent not implemented")
}
func (UnimplementedAuthServiceServer) GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedAuthServiceServer) ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedAuthServiceServer) ListSAMLIdPServiceProviders(context.Context, *ListSAMLIdPServiceProvidersRequest) (*ListSAMLIdPServiceProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSAMLIdPServiceProviders not implemented")
}
func (UnimplementedAuthServiceServer) GetSAMLIdPServiceProvider(context.Context, *GetSAMLIdPServiceProviderRequest) (*types.SAMLIdPServiceProviderV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLIdPServiceProvider not implemented")
}
func (UnimplementedAuthServiceServer) CreateSAMLIdPServiceProvider(context.Context, *types.SAMLIdPServiceProviderV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLIdPServiceProvider not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSAMLIdPServiceProvider(context.Context, *types.SAMLIdPServiceProviderV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLIdPServiceProvider not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSAMLIdPServiceProvider(context.Context, *DeleteSAMLIdPServiceProviderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSAMLIdPServiceProvider not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllSAMLIdPServiceProviders(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSAMLIdPServiceProviders not implemented")
}
func (UnimplementedAuthServiceServer) ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedAuthServiceServer) GetUserGroup(context.Context, *GetUserGroupRequest) (*types.UserGroupV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroup not implemented")
}
func (UnimplementedAuthServiceServer) CreateUserGroup(context.Context, *types.UserGroupV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGroup not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUserGroup(context.Context, *types.UserGroupV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroup not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUserGroup(context.Context, *DeleteUserGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroup not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAllUserGroups(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllUserGroups not implemented")
}
func (UnimplementedAuthServiceServer) GetHeadlessAuthentication(context.Context, *GetHeadlessAuthenticationRequest) (*types.HeadlessAuthentication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadlessAuthentication not implemented")
}
func (UnimplementedAuthServiceServer) WatchPendingHeadlessAuthentications(*emptypb.Empty, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method WatchPendingHeadlessAuthentications not implemented")
}
func (UnimplementedAuthServiceServer) UpdateHeadlessAuthenticationState(context.Context, *UpdateHeadlessAuthenticationStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHeadlessAuthenticationState not implemented")
}
func (UnimplementedAuthServiceServer) ExportUpgradeWindows(context.Context, *ExportUpgradeWindowsRequest) (*ExportUpgradeWindowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUpgradeWindows not implemented")
}
func (UnimplementedAuthServiceServer) GetClusterMaintenanceConfig(context.Context, *emptypb.Empty) (*types.ClusterMaintenanceConfigV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterMaintenanceConfig not implemented")
}
func (UnimplementedAuthServiceServer) UpdateClusterMaintenanceConfig(context.Context, *types.ClusterMaintenanceConfigV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterMaintenanceConfig not implemented")
}
func (UnimplementedAuthServiceServer) DeleteClusterMaintenanceConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterMaintenanceConfig not implemented")
}
func (UnimplementedAuthServiceServer) testEmbeddedByValue() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_InventoryControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).InventoryControlStream(&grpc.GenericServerStream[UpstreamInventoryOneOf, DownstreamInventoryOneOf]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_InventoryControlStreamServer = grpc.BidiStreamingServer[UpstreamInventoryOneOf, DownstreamInventoryOneOf]

func _AuthService_GetInventoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetInventoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetInventoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetInventoryStatus(ctx, req.(*InventoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetInventoryConnectedServiceCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryConnectedServiceCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetInventoryConnectedServiceCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetInventoryConnectedServiceCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetInventoryConnectedServiceCounts(ctx, req.(*InventoryConnectedServiceCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_PingInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PingInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_PingInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PingInventory(ctx, req.(*InventoryPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.InstanceFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetInstances(m, &grpc.GenericServerStream[types.InstanceFilter, types.InstanceV1]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetInstancesServer = grpc.ServerStreamingServer[types.InstanceV1]

func _AuthService_GetClusterAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetClusterAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetClusterAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetClusterAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetClusterAlerts(ctx, req.(*types.GetClusterAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertClusterAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertClusterAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertClusterAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertClusterAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertClusterAlert(ctx, req.(*UpsertClusterAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAlertAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AlertAcknowledgement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAlertAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAlertAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAlertAck(ctx, req.(*types.AlertAcknowledgement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAlertAcks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertAcksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAlertAcks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAlertAcks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAlertAcks(ctx, req.(*GetAlertAcksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ClearAlertAcks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAlertAcksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ClearAlertAcks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ClearAlertAcks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ClearAlertAcks(ctx, req.(*ClearAlertAcksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MaintainSessionPresence_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).MaintainSessionPresence(&grpc.GenericServerStream[PresenceMFAChallengeSend, MFAAuthenticateChallenge]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_MaintainSessionPresenceServer = grpc.BidiStreamingServer[PresenceMFAChallengeSend, MFAAuthenticateChallenge]

func _AuthService_CreateSessionTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSessionTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSessionTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSessionTracker(ctx, req.(*CreateSessionTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSessionTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSessionTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSessionTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSessionTracker(ctx, req.(*GetSessionTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetActiveSessionTrackers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetActiveSessionTrackers(m, &grpc.GenericServerStream[emptypb.Empty, types.SessionTrackerV1]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetActiveSessionTrackersServer = grpc.ServerStreamingServer[types.SessionTrackerV1]

func _AuthService_GetActiveSessionTrackersWithFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.SessionTrackerFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetActiveSessionTrackersWithFilter(m, &grpc.GenericServerStream[types.SessionTrackerFilter, types.SessionTrackerV1]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetActiveSessionTrackersWithFilterServer = grpc.ServerStreamingServer[types.SessionTrackerV1]

func _AuthService_RemoveSessionTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSessionTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RemoveSessionTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RemoveSessionTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RemoveSessionTracker(ctx, req.(*RemoveSessionTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSessionTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSessionTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateSessionTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSessionTracker(ctx, req.(*UpdateSessionTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SendKeepAlives_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).SendKeepAlives(&grpc.GenericServerStream[types.KeepAlive, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_SendKeepAlivesServer = grpc.ClientStreamingServer[types.KeepAlive, emptypb.Empty]

func _AuthService_WatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Watch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).WatchEvents(m, &grpc.GenericServerStream[Watch, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_WatchEventsServer = grpc.ServerStreamingServer[Event]

func _AuthService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceInNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetNode(ctx, req.(*types.ResourceInNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ServerV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertNode(ctx, req.(*types.ServerV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceInNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteNode(ctx, req.(*types.ResourceInNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourcesInNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllNodes(ctx, req.(*types.ResourcesInNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateUserCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateUserCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateUserCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateUserCerts(ctx, req.(*UserCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateHostCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateHostCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateHostCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateHostCerts(ctx, req.(*HostCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateUserSingleUseCerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).GenerateUserSingleUseCerts(&grpc.GenericServerStream[UserSingleUseCertsRequest, UserSingleUseCertsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GenerateUserSingleUseCertsServer = grpc.BidiStreamingServer[UserSingleUseCertsRequest, UserSingleUseCertsResponse]

func _AuthService_GenerateOpenSSHCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSSHCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateOpenSSHCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateOpenSSHCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateOpenSSHCert(ctx, req.(*OpenSSHCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_IsMFARequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMFARequiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).IsMFARequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_IsMFARequired_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).IsMFARequired(ctx, req.(*IsMFARequiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAccessRequestsV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.AccessRequestFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetAccessRequestsV2(m, &grpc.GenericServerStream[types.AccessRequestFilter, types.AccessRequestV3]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetAccessRequestsV2Server = grpc.ServerStreamingServer[types.AccessRequestV3]

func _AuthService_ListAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListAccessRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListAccessRequests(ctx, req.(*ListAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAccessRequestV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AccessRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAccessRequestV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAccessRequestV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAccessRequestV2(ctx, req.(*types.AccessRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAccessRequest(ctx, req.(*RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetAccessRequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStateSetter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetAccessRequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetAccessRequestState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetAccessRequestState(ctx, req.(*RequestStateSetter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SubmitAccessReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AccessReviewSubmission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SubmitAccessReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SubmitAccessReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SubmitAccessReview(ctx, req.(*types.AccessReviewSubmission))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAccessCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AccessCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAccessCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAccessCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAccessCapabilities(ctx, req.(*types.AccessCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAccessRequestAllowedPromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequestAllowedPromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAccessRequestAllowedPromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAccessRequestAllowedPromotions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAccessRequestAllowedPromotions(ctx, req.(*AccessRequestAllowedPromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetPluginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PluginDataFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPluginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetPluginData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPluginData(ctx, req.(*types.PluginDataFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdatePluginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PluginDataUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdatePluginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdatePluginData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdatePluginData(ctx, req.(*types.PluginDataUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetResetPasswordToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetResetPasswordToken(ctx, req.(*GetResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateResetPasswordToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateResetPasswordToken(ctx, req.(*CreateResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetCurrentUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetCurrentUserRoles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetCurrentUserRoles(m, &grpc.GenericServerStream[emptypb.Empty, types.RoleV6]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetCurrentUserRolesServer = grpc.ServerStreamingServer[types.RoleV6]

func _AuthService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetUsers(m, &grpc.GenericServerStream[GetUsersRequest, types.UserV2]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetUsersServer = grpc.ServerStreamingServer[types.UserV2]

func _AuthService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateUser(ctx, req.(*types.UserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*types.UserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AcquireSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AcquireSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AcquireSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AcquireSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AcquireSemaphore(ctx, req.(*types.AcquireSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_KeepAliveSemaphoreLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SemaphoreLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).KeepAliveSemaphoreLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_KeepAliveSemaphoreLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).KeepAliveSemaphoreLease(ctx, req.(*types.SemaphoreLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CancelSemaphoreLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SemaphoreLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CancelSemaphoreLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CancelSemaphoreLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CancelSemaphoreLease(ctx, req.(*types.SemaphoreLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSemaphores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SemaphoreFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSemaphores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSemaphores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSemaphores(ctx, req.(*types.SemaphoreFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SemaphoreFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSemaphore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSemaphore(ctx, req.(*types.SemaphoreFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EmitAuditEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.OneOf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EmitAuditEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EmitAuditEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EmitAuditEvent(ctx, req.(*events.OneOf))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAuditStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).CreateAuditStream(&grpc.GenericServerStream[AuditStreamRequest, events.StreamStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_CreateAuditStreamServer = grpc.BidiStreamingServer[AuditStreamRequest, events.StreamStatus]

func _AuthService_UpsertApplicationServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertApplicationServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertApplicationServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertApplicationServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertApplicationServer(ctx, req.(*UpsertApplicationServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteApplicationServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteApplicationServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteApplicationServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteApplicationServer(ctx, req.(*DeleteApplicationServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllApplicationServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllApplicationServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllApplicationServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllApplicationServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllApplicationServers(ctx, req.(*DeleteAllApplicationServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateAppToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateAppToken(ctx, req.(*GenerateAppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAppSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAppSession(ctx, req.(*GetAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListAppSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListAppSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListAppSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListAppSessions(ctx, req.(*ListAppSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAppSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAppSession(ctx, req.(*CreateAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAppSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAppSession(ctx, req.(*DeleteAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllAppSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllAppSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllAppSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllAppSessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUserAppSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAppSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUserAppSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUserAppSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUserAppSessions(ctx, req.(*DeleteUserAppSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSnowflakeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnowflakeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSnowflakeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSnowflakeSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSnowflakeSession(ctx, req.(*CreateSnowflakeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSnowflakeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnowflakeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSnowflakeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSnowflakeSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSnowflakeSession(ctx, req.(*GetSnowflakeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSnowflakeSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSnowflakeSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSnowflakeSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSnowflakeSessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSnowflakeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnowflakeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSnowflakeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSnowflakeSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSnowflakeSession(ctx, req.(*DeleteSnowflakeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllSnowflakeSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllSnowflakeSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllSnowflakeSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllSnowflakeSessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSAMLIdPSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSAMLIdPSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSAMLIdPSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSAMLIdPSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSAMLIdPSession(ctx, req.(*CreateSAMLIdPSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSAMLIdPSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLIdPSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSAMLIdPSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSAMLIdPSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSAMLIdPSession(ctx, req.(*GetSAMLIdPSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListSAMLIdPSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLIdPSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListSAMLIdPSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListSAMLIdPSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListSAMLIdPSessions(ctx, req.(*ListSAMLIdPSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSAMLIdPSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSAMLIdPSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSAMLIdPSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSAMLIdPSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSAMLIdPSession(ctx, req.(*DeleteSAMLIdPSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllSAMLIdPSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllSAMLIdPSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllSAMLIdPSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllSAMLIdPSessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUserSAMLIdPSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSAMLIdPSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUserSAMLIdPSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUserSAMLIdPSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUserSAMLIdPSessions(ctx, req.(*DeleteUserSAMLIdPSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWebSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetWebSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWebSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWebSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWebSession(ctx, req.(*types.GetWebSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWebSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWebSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWebSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWebSessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_StreamWebSessions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).StreamWebSessions(m, &grpc.GenericServerStream[emptypb.Empty, types.WebSessionV2]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_StreamWebSessionsServer = grpc.ServerStreamingServer[types.WebSessionV2]

func _AuthService_DeleteWebSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DeleteWebSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteWebSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteWebSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteWebSession(ctx, req.(*types.DeleteWebSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllWebSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllWebSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllWebSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllWebSessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWebToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GetWebTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWebToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWebToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWebToken(ctx, req.(*types.GetWebTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWebTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWebTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWebTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWebTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteWebToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DeleteWebTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteWebToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteWebToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteWebToken(ctx, req.(*types.DeleteWebTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllWebTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllWebTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllWebTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllWebTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateRemoteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RemoteClusterV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateRemoteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateRemoteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateRemoteCluster(ctx, req.(*types.RemoteClusterV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertKubernetesServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertKubernetesServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertKubernetesServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertKubernetesServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertKubernetesServer(ctx, req.(*UpsertKubernetesServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteKubernetesServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubernetesServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteKubernetesServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteKubernetesServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteKubernetesServer(ctx, req.(*DeleteKubernetesServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllKubernetesServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllKubernetesServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllKubernetesServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllKubernetesServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllKubernetesServers(ctx, req.(*DeleteAllKubernetesServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertDatabaseServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDatabaseServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertDatabaseServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertDatabaseServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertDatabaseServer(ctx, req.(*UpsertDatabaseServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteDatabaseServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteDatabaseServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteDatabaseServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteDatabaseServer(ctx, req.(*DeleteDatabaseServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllDatabaseServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllDatabaseServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllDatabaseServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllDatabaseServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllDatabaseServers(ctx, req.(*DeleteAllDatabaseServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertDatabaseService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDatabaseServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertDatabaseService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertDatabaseService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertDatabaseService(ctx, req.(*UpsertDatabaseServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteDatabaseService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteDatabaseService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteDatabaseService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteDatabaseService(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllDatabaseServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllDatabaseServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllDatabaseServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllDatabaseServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllDatabaseServices(ctx, req.(*DeleteAllDatabaseServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignDatabaseCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignDatabaseCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignDatabaseCSR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignDatabaseCSR(ctx, req.(*DatabaseCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateDatabaseCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateDatabaseCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateDatabaseCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateDatabaseCert(ctx, req.(*DatabaseCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateSnowflakeJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnowflakeJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateSnowflakeJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateSnowflakeJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateSnowflakeJWT(ctx, req.(*SnowflakeJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertRoleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertRoleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertRoleV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertRoleV2(ctx, req.(*UpsertRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RoleV6)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertRole(ctx, req.(*types.RoleV6))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddMFADevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).AddMFADevice(&grpc.GenericServerStream[AddMFADeviceRequest, AddMFADeviceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_AddMFADeviceServer = grpc.BidiStreamingServer[AddMFADeviceRequest, AddMFADeviceResponse]

func _AuthService_DeleteMFADevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).DeleteMFADevice(&grpc.GenericServerStream[DeleteMFADeviceRequest, DeleteMFADeviceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_DeleteMFADeviceServer = grpc.BidiStreamingServer[DeleteMFADeviceRequest, DeleteMFADeviceResponse]

func _AuthService_AddMFADeviceSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMFADeviceSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddMFADeviceSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AddMFADeviceSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddMFADeviceSync(ctx, req.(*AddMFADeviceSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteMFADeviceSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMFADeviceSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteMFADeviceSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteMFADeviceSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteMFADeviceSync(ctx, req.(*DeleteMFADeviceSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMFADevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMFADevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMFADevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetMFADevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMFADevices(ctx, req.(*GetMFADevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAuthenticateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthenticateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAuthenticateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAuthenticateChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAuthenticateChallenge(ctx, req.(*CreateAuthenticateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateRegisterChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegisterChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateRegisterChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateRegisterChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateRegisterChallenge(ctx, req.(*CreateRegisterChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetOIDCConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceWithSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetOIDCConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetOIDCConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetOIDCConnector(ctx, req.(*types.ResourceWithSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetOIDCConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourcesWithSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetOIDCConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetOIDCConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetOIDCConnectors(ctx, req.(*types.ResourcesWithSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateOIDCConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOIDCConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateOIDCConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateOIDCConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateOIDCConnector(ctx, req.(*CreateOIDCConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateOIDCConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOIDCConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateOIDCConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateOIDCConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateOIDCConnector(ctx, req.(*UpdateOIDCConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertOIDCConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.OIDCConnectorV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertOIDCConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertOIDCConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertOIDCConnector(ctx, req.(*types.OIDCConnectorV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertOIDCConnectorV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertOIDCConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertOIDCConnectorV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertOIDCConnectorV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertOIDCConnectorV2(ctx, req.(*UpsertOIDCConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteOIDCConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteOIDCConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteOIDCConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteOIDCConnector(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateOIDCAuthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.OIDCAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateOIDCAuthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateOIDCAuthRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateOIDCAuthRequest(ctx, req.(*types.OIDCAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetOIDCAuthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOIDCAuthRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetOIDCAuthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetOIDCAuthRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetOIDCAuthRequest(ctx, req.(*GetOIDCAuthRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSAMLConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceWithSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSAMLConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSAMLConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSAMLConnector(ctx, req.(*types.ResourceWithSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSAMLConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourcesWithSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSAMLConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSAMLConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSAMLConnectors(ctx, req.(*types.ResourcesWithSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSAMLConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSAMLConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSAMLConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSAMLConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSAMLConnector(ctx, req.(*CreateSAMLConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSAMLConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSAMLConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSAMLConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateSAMLConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSAMLConnector(ctx, req.(*UpdateSAMLConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertSAMLConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SAMLConnectorV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertSAMLConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertSAMLConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertSAMLConnector(ctx, req.(*types.SAMLConnectorV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertSAMLConnectorV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSAMLConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertSAMLConnectorV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertSAMLConnectorV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertSAMLConnectorV2(ctx, req.(*UpsertSAMLConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSAMLConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSAMLConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSAMLConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSAMLConnector(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSAMLAuthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SAMLAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSAMLAuthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSAMLAuthRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSAMLAuthRequest(ctx, req.(*types.SAMLAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSAMLAuthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLAuthRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSAMLAuthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSAMLAuthRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSAMLAuthRequest(ctx, req.(*GetSAMLAuthRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetGithubConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceWithSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetGithubConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetGithubConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetGithubConnector(ctx, req.(*types.ResourceWithSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetGithubConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourcesWithSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetGithubConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetGithubConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetGithubConnectors(ctx, req.(*types.ResourcesWithSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateGithubConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGithubConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateGithubConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateGithubConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateGithubConnector(ctx, req.(*CreateGithubConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateGithubConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGithubConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateGithubConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateGithubConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateGithubConnector(ctx, req.(*UpdateGithubConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertGithubConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GithubConnectorV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertGithubConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertGithubConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertGithubConnector(ctx, req.(*types.GithubConnectorV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertGithubConnectorV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertGithubConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertGithubConnectorV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertGithubConnectorV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertGithubConnectorV2(ctx, req.(*UpsertGithubConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteGithubConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteGithubConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteGithubConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteGithubConnector(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateGithubAuthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GithubAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateGithubAuthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateGithubAuthRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateGithubAuthRequest(ctx, req.(*types.GithubAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetGithubAuthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGithubAuthRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetGithubAuthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetGithubAuthRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetGithubAuthRequest(ctx, req.(*GetGithubAuthRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSSODiagnosticInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSODiagnosticInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSSODiagnosticInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSSODiagnosticInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSSODiagnosticInfo(ctx, req.(*GetSSODiagnosticInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetServerInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetServerInfos(m, &grpc.GenericServerStream[emptypb.Empty, types.ServerInfoV1]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_GetServerInfosServer = grpc.ServerStreamingServer[types.ServerInfoV1]

func _AuthService_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetServerInfo(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ServerInfoV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertServerInfo(ctx, req.(*types.ServerInfoV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteServerInfo(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllServerInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllServerInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllServerInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllServerInfos(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTrustedCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTrustedCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetTrustedCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTrustedCluster(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTrustedClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTrustedClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetTrustedClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTrustedClusters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertTrustedCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.TrustedClusterV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertTrustedCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertTrustedCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertTrustedCluster(ctx, req.(*types.TrustedClusterV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteTrustedCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteTrustedCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteTrustedCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteTrustedCluster(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetToken(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateTokenV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateTokenV2(ctx, req.(*CreateTokenV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTokenV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertTokenV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertTokenV2(ctx, req.(*UpsertTokenV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteToken(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetClusterAuditConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetClusterAuditConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetClusterAuditConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetClusterAuditConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetClusterNetworkingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetClusterNetworkingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetClusterNetworkingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetClusterNetworkingConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetClusterNetworkingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ClusterNetworkingConfigV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetClusterNetworkingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetClusterNetworkingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetClusterNetworkingConfig(ctx, req.(*types.ClusterNetworkingConfigV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetClusterNetworkingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetClusterNetworkingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResetClusterNetworkingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetClusterNetworkingConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSessionRecordingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSessionRecordingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSessionRecordingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSessionRecordingConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetSessionRecordingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SessionRecordingConfigV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetSessionRecordingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetSessionRecordingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetSessionRecordingConfig(ctx, req.(*types.SessionRecordingConfigV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetSessionRecordingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetSessionRecordingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResetSessionRecordingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetSessionRecordingConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAuthPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAuthPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAuthPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAuthPreference(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetAuthPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AuthPreferenceV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetAuthPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetAuthPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetAuthPreference(ctx, req.(*types.AuthPreferenceV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetAuthPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetAuthPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResetAuthPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetAuthPreference(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUIConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUIConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUIConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUIConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetUIConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UIConfigV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetUIConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetUIConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetUIConfig(ctx, req.(*types.UIConfigV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUIConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUIConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUIConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUIConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSessionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSessionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSessionEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSessionEvents(ctx, req.(*GetSessionEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetLock(ctx, req.(*GetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetLocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetLocks(ctx, req.(*GetLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.LockV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertLock(ctx, req.(*types.LockV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteLock(ctx, req.(*DeleteLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReplaceRemoteLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRemoteLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReplaceRemoteLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ReplaceRemoteLocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReplaceRemoteLocks(ctx, req.(*ReplaceRemoteLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_StreamSessionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSessionEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).StreamSessionEvents(m, &grpc.GenericServerStream[StreamSessionEventsRequest, events.OneOf]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_StreamSessionEventsServer = grpc.ServerStreamingServer[events.OneOf]

func _AuthService_GetNetworkRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetNetworkRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetNetworkRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetNetworkRestrictions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetNetworkRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.NetworkRestrictionsV4)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetNetworkRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetNetworkRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetNetworkRestrictions(ctx, req.(*types.NetworkRestrictionsV4))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteNetworkRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteNetworkRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteNetworkRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteNetworkRestrictions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetApps(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetApp(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AppV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateApp(ctx, req.(*types.AppV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AppV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateApp(ctx, req.(*types.AppV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteApp(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllApps(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetDatabases(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetDatabase(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DatabaseV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateDatabase(ctx, req.(*types.DatabaseV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.DatabaseV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateDatabase(ctx, req.(*types.DatabaseV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteDatabase(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllDatabases(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetKubernetesClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetKubernetesClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetKubernetesClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetKubernetesClusters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetKubernetesCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetKubernetesCluster(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.KubernetesClusterV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateKubernetesCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateKubernetesCluster(ctx, req.(*types.KubernetesClusterV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.KubernetesClusterV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateKubernetesCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateKubernetesCluster(ctx, req.(*types.KubernetesClusterV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteKubernetesCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteKubernetesCluster(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllKubernetesClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllKubernetesClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllKubernetesClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllKubernetesClusters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWindowsDesktopServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWindowsDesktopServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWindowsDesktopServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWindowsDesktopServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWindowsDesktopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWindowsDesktopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWindowsDesktopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWindowsDesktopService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWindowsDesktopService(ctx, req.(*GetWindowsDesktopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertWindowsDesktopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WindowsDesktopServiceV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertWindowsDesktopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertWindowsDesktopService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertWindowsDesktopService(ctx, req.(*types.WindowsDesktopServiceV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteWindowsDesktopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWindowsDesktopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteWindowsDesktopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteWindowsDesktopService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteWindowsDesktopService(ctx, req.(*DeleteWindowsDesktopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllWindowsDesktopServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllWindowsDesktopServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllWindowsDesktopServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllWindowsDesktopServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWindowsDesktops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WindowsDesktopFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWindowsDesktops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWindowsDesktops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWindowsDesktops(ctx, req.(*types.WindowsDesktopFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WindowsDesktopV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateWindowsDesktop(ctx, req.(*types.WindowsDesktopV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WindowsDesktopV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateWindowsDesktop(ctx, req.(*types.WindowsDesktopV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WindowsDesktopV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpsertWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertWindowsDesktop(ctx, req.(*types.WindowsDesktopV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteWindowsDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWindowsDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteWindowsDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteWindowsDesktop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteWindowsDesktop(ctx, req.(*DeleteWindowsDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllWindowsDesktops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllWindowsDesktops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllWindowsDesktops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllWindowsDesktops(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateWindowsDesktopCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowsDesktopCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateWindowsDesktopCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateWindowsDesktopCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateWindowsDesktopCert(ctx, req.(*WindowsDesktopCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateCertAuthorityCRL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateCertAuthorityCRL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateCertAuthorityCRL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateCertAuthorityCRL(ctx, req.(*CertAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetDesktopBootstrapScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetDesktopBootstrapScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetDesktopBootstrapScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetDesktopBootstrapScript(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateConnectionDiagnostic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ConnectionDiagnosticV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateConnectionDiagnostic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateConnectionDiagnostic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateConnectionDiagnostic(ctx, req.(*types.ConnectionDiagnosticV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateConnectionDiagnostic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ConnectionDiagnosticV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateConnectionDiagnostic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateConnectionDiagnostic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateConnectionDiagnostic(ctx, req.(*types.ConnectionDiagnosticV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetConnectionDiagnostic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionDiagnosticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetConnectionDiagnostic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetConnectionDiagnostic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetConnectionDiagnostic(ctx, req.(*GetConnectionDiagnosticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AppendDiagnosticTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendDiagnosticTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AppendDiagnosticTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AppendDiagnosticTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AppendDiagnosticTrace(ctx, req.(*AppendDiagnosticTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeUserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeUserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangeUserAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeUserAuthentication(ctx, req.(*ChangeUserAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_StartAccountRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAccountRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).StartAccountRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_StartAccountRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).StartAccountRecovery(ctx, req.(*StartAccountRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyAccountRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyAccountRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyAccountRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyAccountRecovery(ctx, req.(*VerifyAccountRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CompleteAccountRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteAccountRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CompleteAccountRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CompleteAccountRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CompleteAccountRecovery(ctx, req.(*CompleteAccountRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAccountRecoveryCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRecoveryCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAccountRecoveryCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAccountRecoveryCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAccountRecoveryCodes(ctx, req.(*CreateAccountRecoveryCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAccountRecoveryToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRecoveryTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAccountRecoveryToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAccountRecoveryToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAccountRecoveryToken(ctx, req.(*GetAccountRecoveryTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAccountRecoveryCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRecoveryCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAccountRecoveryCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAccountRecoveryCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAccountRecoveryCodes(ctx, req.(*GetAccountRecoveryCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreatePrivilegeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivilegeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreatePrivilegeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreatePrivilegeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreatePrivilegeToken(ctx, req.(*CreatePrivilegeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetInstaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetInstaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetInstaller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetInstaller(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetInstallers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetInstallers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetInstallers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetInstallers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetInstaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.InstallerV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetInstaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SetInstaller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetInstaller(ctx, req.(*types.InstallerV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteInstaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteInstaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteInstaller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteInstaller(ctx, req.(*types.ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllInstallers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllInstallers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllInstallers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllInstallers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListUnifiedResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnifiedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListUnifiedResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListUnifiedResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListUnifiedResources(ctx, req.(*ListUnifiedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSSHTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSHTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSSHTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSSHTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSSHTargets(ctx, req.(*GetSSHTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResolveSSHTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveSSHTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResolveSSHTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResolveSSHTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResolveSSHTarget(ctx, req.(*ResolveSSHTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetDomainName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetDomainName(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetClusterCACert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetClusterCACert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetClusterCACert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetClusterCACert(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AssertSystemRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRoleAssertion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssertSystemRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AssertSystemRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssertSystemRole(ctx, req.(*SystemRoleAssertion))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SubmitUsageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUsageEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SubmitUsageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SubmitUsageEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SubmitUsageEvent(ctx, req.(*SubmitUsageEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetLicense(ctx, req.(*GetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListSAMLIdPServiceProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSAMLIdPServiceProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListSAMLIdPServiceProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListSAMLIdPServiceProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListSAMLIdPServiceProviders(ctx, req.(*ListSAMLIdPServiceProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSAMLIdPServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLIdPServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSAMLIdPServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSAMLIdPServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSAMLIdPServiceProvider(ctx, req.(*GetSAMLIdPServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSAMLIdPServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SAMLIdPServiceProviderV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSAMLIdPServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSAMLIdPServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSAMLIdPServiceProvider(ctx, req.(*types.SAMLIdPServiceProviderV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSAMLIdPServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SAMLIdPServiceProviderV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSAMLIdPServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateSAMLIdPServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSAMLIdPServiceProvider(ctx, req.(*types.SAMLIdPServiceProviderV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSAMLIdPServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSAMLIdPServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSAMLIdPServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSAMLIdPServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSAMLIdPServiceProvider(ctx, req.(*DeleteSAMLIdPServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllSAMLIdPServiceProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllSAMLIdPServiceProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllSAMLIdPServiceProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllSAMLIdPServiceProviders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListUserGroups(ctx, req.(*ListUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserGroup(ctx, req.(*GetUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserGroupV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateUserGroup(ctx, req.(*types.UserGroupV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserGroupV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUserGroup(ctx, req.(*types.UserGroupV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUserGroup(ctx, req.(*DeleteUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAllUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllUserGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetHeadlessAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadlessAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetHeadlessAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetHeadlessAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetHeadlessAuthentication(ctx, req.(*GetHeadlessAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_WatchPendingHeadlessAuthentications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).WatchPendingHeadlessAuthentications(m, &grpc.GenericServerStream[emptypb.Empty, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuthService_WatchPendingHeadlessAuthenticationsServer = grpc.ServerStreamingServer[Event]

func _AuthService_UpdateHeadlessAuthenticationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHeadlessAuthenticationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateHeadlessAuthenticationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateHeadlessAuthenticationState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateHeadlessAuthenticationState(ctx, req.(*UpdateHeadlessAuthenticationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExportUpgradeWindows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUpgradeWindowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExportUpgradeWindows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ExportUpgradeWindows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExportUpgradeWindows(ctx, req.(*ExportUpgradeWindowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetClusterMaintenanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetClusterMaintenanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetClusterMaintenanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetClusterMaintenanceConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateClusterMaintenanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ClusterMaintenanceConfigV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateClusterMaintenanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateClusterMaintenanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateClusterMaintenanceConfig(ctx, req.(*types.ClusterMaintenanceConfigV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteClusterMaintenanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteClusterMaintenanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteClusterMaintenanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteClusterMaintenanceConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventoryStatus",
			Handler:    _AuthService_GetInventoryStatus_Handler,
		},
		{
			MethodName: "GetInventoryConnectedServiceCounts",
			Handler:    _AuthService_GetInventoryConnectedServiceCounts_Handler,
		},
		{
			MethodName: "PingInventory",
			Handler:    _AuthService_PingInventory_Handler,
		},
		{
			MethodName: "GetClusterAlerts",
			Handler:    _AuthService_GetClusterAlerts_Handler,
		},
		{
			MethodName: "UpsertClusterAlert",
			Handler:    _AuthService_UpsertClusterAlert_Handler,
		},
		{
			MethodName: "CreateAlertAck",
			Handler:    _AuthService_CreateAlertAck_Handler,
		},
		{
			MethodName: "GetAlertAcks",
			Handler:    _AuthService_GetAlertAcks_Handler,
		},
		{
			MethodName: "ClearAlertAcks",
			Handler:    _AuthService_ClearAlertAcks_Handler,
		},
		{
			MethodName: "CreateSessionTracker",
			Handler:    _AuthService_CreateSessionTracker_Handler,
		},
		{
			MethodName: "GetSessionTracker",
			Handler:    _AuthService_GetSessionTracker_Handler,
		},
		{
			MethodName: "RemoveSessionTracker",
			Handler:    _AuthService_RemoveSessionTracker_Handler,
		},
		{
			MethodName: "UpdateSessionTracker",
			Handler:    _AuthService_UpdateSessionTracker_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _AuthService_GetNode_Handler,
		},
		{
			MethodName: "UpsertNode",
			Handler:    _AuthService_UpsertNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _AuthService_DeleteNode_Handler,
		},
		{
			MethodName: "DeleteAllNodes",
			Handler:    _AuthService_DeleteAllNodes_Handler,
		},
		{
			MethodName: "GenerateUserCerts",
			Handler:    _AuthService_GenerateUserCerts_Handler,
		},
		{
			MethodName: "GenerateHostCerts",
			Handler:    _AuthService_GenerateHostCerts_Handler,
		},
		{
			MethodName: "GenerateOpenSSHCert",
			Handler:    _AuthService_GenerateOpenSSHCert_Handler,
		},
		{
			MethodName: "IsMFARequired",
			Handler:    _AuthService_IsMFARequired_Handler,
		},
		{
			MethodName: "ListAccessRequests",
			Handler:    _AuthService_ListAccessRequests_Handler,
		},
		{
			MethodName: "CreateAccessRequestV2",
			Handler:    _AuthService_CreateAccessRequestV2_Handler,
		},
		{
			MethodName: "DeleteAccessRequest",
			Handler:    _AuthService_DeleteAccessRequest_Handler,
		},
		{
			MethodName: "SetAccessRequestState",
			Handler:    _AuthService_SetAccessRequestState_Handler,
		},
		{
			MethodName: "SubmitAccessReview",
			Handler:    _AuthService_SubmitAccessReview_Handler,
		},
		{
			MethodName: "GetAccessCapabilities",
			Handler:    _AuthService_GetAccessCapabilities_Handler,
		},
		{
			MethodName: "GetAccessRequestAllowedPromotions",
			Handler:    _AuthService_GetAccessRequestAllowedPromotions_Handler,
		},
		{
			MethodName: "GetPluginData",
			Handler:    _AuthService_GetPluginData_Handler,
		},
		{
			MethodName: "UpdatePluginData",
			Handler:    _AuthService_UpdatePluginData_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AuthService_Ping_Handler,
		},
		{
			MethodName: "GetResetPasswordToken",
			Handler:    _AuthService_GetResetPasswordToken_Handler,
		},
		{
			MethodName: "CreateResetPasswordToken",
			Handler:    _AuthService_CreateResetPasswordToken_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _AuthService_GetCurrentUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthService_ChangePassword_Handler,
		},
		{
			MethodName: "AcquireSemaphore",
			Handler:    _AuthService_AcquireSemaphore_Handler,
		},
		{
			MethodName: "KeepAliveSemaphoreLease",
			Handler:    _AuthService_KeepAliveSemaphoreLease_Handler,
		},
		{
			MethodName: "CancelSemaphoreLease",
			Handler:    _AuthService_CancelSemaphoreLease_Handler,
		},
		{
			MethodName: "GetSemaphores",
			Handler:    _AuthService_GetSemaphores_Handler,
		},
		{
			MethodName: "DeleteSemaphore",
			Handler:    _AuthService_DeleteSemaphore_Handler,
		},
		{
			MethodName: "EmitAuditEvent",
			Handler:    _AuthService_EmitAuditEvent_Handler,
		},
		{
			MethodName: "UpsertApplicationServer",
			Handler:    _AuthService_UpsertApplicationServer_Handler,
		},
		{
			MethodName: "DeleteApplicationServer",
			Handler:    _AuthService_DeleteApplicationServer_Handler,
		},
		{
			MethodName: "DeleteAllApplicationServers",
			Handler:    _AuthService_DeleteAllApplicationServers_Handler,
		},
		{
			MethodName: "GenerateAppToken",
			Handler:    _AuthService_GenerateAppToken_Handler,
		},
		{
			MethodName: "GetAppSession",
			Handler:    _AuthService_GetAppSession_Handler,
		},
		{
			MethodName: "ListAppSessions",
			Handler:    _AuthService_ListAppSessions_Handler,
		},
		{
			MethodName: "CreateAppSession",
			Handler:    _AuthService_CreateAppSession_Handler,
		},
		{
			MethodName: "DeleteAppSession",
			Handler:    _AuthService_DeleteAppSession_Handler,
		},
		{
			MethodName: "DeleteAllAppSessions",
			Handler:    _AuthService_DeleteAllAppSessions_Handler,
		},
		{
			MethodName: "DeleteUserAppSessions",
			Handler:    _AuthService_DeleteUserAppSessions_Handler,
		},
		{
			MethodName: "CreateSnowflakeSession",
			Handler:    _AuthService_CreateSnowflakeSession_Handler,
		},
		{
			MethodName: "GetSnowflakeSession",
			Handler:    _AuthService_GetSnowflakeSession_Handler,
		},
		{
			MethodName: "GetSnowflakeSessions",
			Handler:    _AuthService_GetSnowflakeSessions_Handler,
		},
		{
			MethodName: "DeleteSnowflakeSession",
			Handler:    _AuthService_DeleteSnowflakeSession_Handler,
		},
		{
			MethodName: "DeleteAllSnowflakeSessions",
			Handler:    _AuthService_DeleteAllSnowflakeSessions_Handler,
		},
		{
			MethodName: "CreateSAMLIdPSession",
			Handler:    _AuthService_CreateSAMLIdPSession_Handler,
		},
		{
			MethodName: "GetSAMLIdPSession",
			Handler:    _AuthService_GetSAMLIdPSession_Handler,
		},
		{
			MethodName: "ListSAMLIdPSessions",
			Handler:    _AuthService_ListSAMLIdPSessions_Handler,
		},
		{
			MethodName: "DeleteSAMLIdPSession",
			Handler:    _AuthService_DeleteSAMLIdPSession_Handler,
		},
		{
			MethodName: "DeleteAllSAMLIdPSessions",
			Handler:    _AuthService_DeleteAllSAMLIdPSessions_Handler,
		},
		{
			MethodName: "DeleteUserSAMLIdPSessions",
			Handler:    _AuthService_DeleteUserSAMLIdPSessions_Handler,
		},
		{
			MethodName: "GetWebSession",
			Handler:    _AuthService_GetWebSession_Handler,
		},
		{
			MethodName: "GetWebSessions",
			Handler:    _AuthService_GetWebSessions_Handler,
		},
		{
			MethodName: "DeleteWebSession",
			Handler:    _AuthService_DeleteWebSession_Handler,
		},
		{
			MethodName: "DeleteAllWebSessions",
			Handler:    _AuthService_DeleteAllWebSessions_Handler,
		},
		{
			MethodName: "GetWebToken",
			Handler:    _AuthService_GetWebToken_Handler,
		},
		{
			MethodName: "GetWebTokens",
			Handler:    _AuthService_GetWebTokens_Handler,
		},
		{
			MethodName: "DeleteWebToken",
			Handler:    _AuthService_DeleteWebToken_Handler,
		},
		{
			MethodName: "DeleteAllWebTokens",
			Handler:    _AuthService_DeleteAllWebTokens_Handler,
		},
		{
			MethodName: "UpdateRemoteCluster",
			Handler:    _AuthService_UpdateRemoteCluster_Handler,
		},
		{
			MethodName: "UpsertKubernetesServer",
			Handler:    _AuthService_UpsertKubernetesServer_Handler,
		},
		{
			MethodName: "DeleteKubernetesServer",
			Handler:    _AuthService_DeleteKubernetesServer_Handler,
		},
		{
			MethodName: "DeleteAllKubernetesServers",
			Handler:    _AuthService_DeleteAllKubernetesServers_Handler,
		},
		{
			MethodName: "UpsertDatabaseServer",
			Handler:    _AuthService_UpsertDatabaseServer_Handler,
		},
		{
			MethodName: "DeleteDatabaseServer",
			Handler:    _AuthService_DeleteDatabaseServer_Handler,
		},
		{
			MethodName: "DeleteAllDatabaseServers",
			Handler:    _AuthService_DeleteAllDatabaseServers_Handler,
		},
		{
			MethodName: "UpsertDatabaseService",
			Handler:    _AuthService_UpsertDatabaseService_Handler,
		},
		{
			MethodName: "DeleteDatabaseService",
			Handler:    _AuthService_DeleteDatabaseService_Handler,
		},
		{
			MethodName: "DeleteAllDatabaseServices",
			Handler:    _AuthService_DeleteAllDatabaseServices_Handler,
		},
		{
			MethodName: "SignDatabaseCSR",
			Handler:    _AuthService_SignDatabaseCSR_Handler,
		},
		{
			MethodName: "GenerateDatabaseCert",
			Handler:    _AuthService_GenerateDatabaseCert_Handler,
		},
		{
			MethodName: "GenerateSnowflakeJWT",
			Handler:    _AuthService_GenerateSnowflakeJWT_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AuthService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AuthService_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AuthService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AuthService_UpdateRole_Handler,
		},
		{
			MethodName: "UpsertRoleV2",
			Handler:    _AuthService_UpsertRoleV2_Handler,
		},
		{
			MethodName: "UpsertRole",
			Handler:    _AuthService_UpsertRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AuthService_DeleteRole_Handler,
		},
		{
			MethodName: "AddMFADeviceSync",
			Handler:    _AuthService_AddMFADeviceSync_Handler,
		},
		{
			MethodName: "DeleteMFADeviceSync",
			Handler:    _AuthService_DeleteMFADeviceSync_Handler,
		},
		{
			MethodName: "GetMFADevices",
			Handler:    _AuthService_GetMFADevices_Handler,
		},
		{
			MethodName: "CreateAuthenticateChallenge",
			Handler:    _AuthService_CreateAuthenticateChallenge_Handler,
		},
		{
			MethodName: "CreateRegisterChallenge",
			Handler:    _AuthService_CreateRegisterChallenge_Handler,
		},
		{
			MethodName: "GetOIDCConnector",
			Handler:    _AuthService_GetOIDCConnector_Handler,
		},
		{
			MethodName: "GetOIDCConnectors",
			Handler:    _AuthService_GetOIDCConnectors_Handler,
		},
		{
			MethodName: "CreateOIDCConnector",
			Handler:    _AuthService_CreateOIDCConnector_Handler,
		},
		{
			MethodName: "UpdateOIDCConnector",
			Handler:    _AuthService_UpdateOIDCConnector_Handler,
		},
		{
			MethodName: "UpsertOIDCConnector",
			Handler:    _AuthService_UpsertOIDCConnector_Handler,
		},
		{
			MethodName: "UpsertOIDCConnectorV2",
			Handler:    _AuthService_UpsertOIDCConnectorV2_Handler,
		},
		{
			MethodName: "DeleteOIDCConnector",
			Handler:    _AuthService_DeleteOIDCConnector_Handler,
		},
		{
			MethodName: "CreateOIDCAuthRequest",
			Handler:    _AuthService_CreateOIDCAuthRequest_Handler,
		},
		{
			MethodName: "GetOIDCAuthRequest",
			Handler:    _AuthService_GetOIDCAuthRequest_Handler,
		},
		{
			MethodName: "GetSAMLConnector",
			Handler:    _AuthService_GetSAMLConnector_Handler,
		},
		{
			MethodName: "GetSAMLConnectors",
			Handler:    _AuthService_GetSAMLConnectors_Handler,
		},
		{
			MethodName: "CreateSAMLConnector",
			Handler:    _AuthService_CreateSAMLConnector_Handler,
		},
		{
			MethodName: "UpdateSAMLConnector",
			Handler:    _AuthService_UpdateSAMLConnector_Handler,
		},
		{
			MethodName: "UpsertSAMLConnector",
			Handler:    _AuthService_UpsertSAMLConnector_Handler,
		},
		{
			MethodName: "UpsertSAMLConnectorV2",
			Handler:    _AuthService_UpsertSAMLConnectorV2_Handler,
		},
		{
			MethodName: "DeleteSAMLConnector",
			Handler:    _AuthService_DeleteSAMLConnector_Handler,
		},
		{
			MethodName: "CreateSAMLAuthRequest",
			Handler:    _AuthService_CreateSAMLAuthRequest_Handler,
		},
		{
			MethodName: "GetSAMLAuthRequest",
			Handler:    _AuthService_GetSAMLAuthRequest_Handler,
		},
		{
			MethodName: "GetGithubConnector",
			Handler:    _AuthService_GetGithubConnector_Handler,
		},
		{
			MethodName: "GetGithubConnectors",
			Handler:    _AuthService_GetGithubConnectors_Handler,
		},
		{
			MethodName: "CreateGithubConnector",
			Handler:    _AuthService_CreateGithubConnector_Handler,
		},
		{
			MethodName: "UpdateGithubConnector",
			Handler:    _AuthService_UpdateGithubConnector_Handler,
		},
		{
			MethodName: "UpsertGithubConnector",
			Handler:    _AuthService_UpsertGithubConnector_Handler,
		},
		{
			MethodName: "UpsertGithubConnectorV2",
			Handler:    _AuthService_UpsertGithubConnectorV2_Handler,
		},
		{
			MethodName: "DeleteGithubConnector",
			Handler:    _AuthService_DeleteGithubConnector_Handler,
		},
		{
			MethodName: "CreateGithubAuthRequest",
			Handler:    _AuthService_CreateGithubAuthRequest_Handler,
		},
		{
			MethodName: "GetGithubAuthRequest",
			Handler:    _AuthService_GetGithubAuthRequest_Handler,
		},
		{
			MethodName: "GetSSODiagnosticInfo",
			Handler:    _AuthService_GetSSODiagnosticInfo_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _AuthService_GetServerInfo_Handler,
		},
		{
			MethodName: "UpsertServerInfo",
			Handler:    _AuthService_UpsertServerInfo_Handler,
		},
		{
			MethodName: "DeleteServerInfo",
			Handler:    _AuthService_DeleteServerInfo_Handler,
		},
		{
			MethodName: "DeleteAllServerInfos",
			Handler:    _AuthService_DeleteAllServerInfos_Handler,
		},
		{
			MethodName: "GetTrustedCluster",
			Handler:    _AuthService_GetTrustedCluster_Handler,
		},
		{
			MethodName: "GetTrustedClusters",
			Handler:    _AuthService_GetTrustedClusters_Handler,
		},
		{
			MethodName: "UpsertTrustedCluster",
			Handler:    _AuthService_UpsertTrustedCluster_Handler,
		},
		{
			MethodName: "DeleteTrustedCluster",
			Handler:    _AuthService_DeleteTrustedCluster_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _AuthService_GetToken_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _AuthService_GetTokens_Handler,
		},
		{
			MethodName: "CreateTokenV2",
			Handler:    _AuthService_CreateTokenV2_Handler,
		},
		{
			MethodName: "UpsertTokenV2",
			Handler:    _AuthService_UpsertTokenV2_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _AuthService_DeleteToken_Handler,
		},
		{
			MethodName: "GetClusterAuditConfig",
			Handler:    _AuthService_GetClusterAuditConfig_Handler,
		},
		{
			MethodName: "GetClusterNetworkingConfig",
			Handler:    _AuthService_GetClusterNetworkingConfig_Handler,
		},
		{
			MethodName: "SetClusterNetworkingConfig",
			Handler:    _AuthService_SetClusterNetworkingConfig_Handler,
		},
		{
			MethodName: "ResetClusterNetworkingConfig",
			Handler:    _AuthService_ResetClusterNetworkingConfig_Handler,
		},
		{
			MethodName: "GetSessionRecordingConfig",
			Handler:    _AuthService_GetSessionRecordingConfig_Handler,
		},
		{
			MethodName: "SetSessionRecordingConfig",
			Handler:    _AuthService_SetSessionRecordingConfig_Handler,
		},
		{
			MethodName: "ResetSessionRecordingConfig",
			Handler:    _AuthService_ResetSessionRecordingConfig_Handler,
		},
		{
			MethodName: "GetAuthPreference",
			Handler:    _AuthService_GetAuthPreference_Handler,
		},
		{
			MethodName: "SetAuthPreference",
			Handler:    _AuthService_SetAuthPreference_Handler,
		},
		{
			MethodName: "ResetAuthPreference",
			Handler:    _AuthService_ResetAuthPreference_Handler,
		},
		{
			MethodName: "GetUIConfig",
			Handler:    _AuthService_GetUIConfig_Handler,
		},
		{
			MethodName: "SetUIConfig",
			Handler:    _AuthService_SetUIConfig_Handler,
		},
		{
			MethodName: "DeleteUIConfig",
			Handler:    _AuthService_DeleteUIConfig_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _AuthService_GetEvents_Handler,
		},
		{
			MethodName: "GetSessionEvents",
			Handler:    _AuthService_GetSessionEvents_Handler,
		},
		{
			MethodName: "GetLock",
			Handler:    _AuthService_GetLock_Handler,
		},
		{
			MethodName: "GetLocks",
			Handler:    _AuthService_GetLocks_Handler,
		},
		{
			MethodName: "UpsertLock",
			Handler:    _AuthService_UpsertLock_Handler,
		},
		{
			MethodName: "DeleteLock",
			Handler:    _AuthService_DeleteLock_Handler,
		},
		{
			MethodName: "ReplaceRemoteLocks",
			Handler:    _AuthService_ReplaceRemoteLocks_Handler,
		},
		{
			MethodName: "GetNetworkRestrictions",
			Handler:    _AuthService_GetNetworkRestrictions_Handler,
		},
		{
			MethodName: "SetNetworkRestrictions",
			Handler:    _AuthService_SetNetworkRestrictions_Handler,
		},
		{
			MethodName: "DeleteNetworkRestrictions",
			Handler:    _AuthService_DeleteNetworkRestrictions_Handler,
		},
		{
			MethodName: "GetApps",
			Handler:    _AuthService_GetApps_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _AuthService_GetApp_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AuthService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AuthService_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AuthService_DeleteApp_Handler,
		},
		{
			MethodName: "DeleteAllApps",
			Handler:    _AuthService_DeleteAllApps_Handler,
		},
		{
			MethodName: "GetDatabases",
			Handler:    _AuthService_GetDatabases_Handler,
		},
		{
			MethodName: "GetDatabase",
			Handler:    _AuthService_GetDatabase_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _AuthService_CreateDatabase_Handler,
		},
		{
			MethodName: "UpdateDatabase",
			Handler:    _AuthService_UpdateDatabase_Handler,
		},
		{
			MethodName: "DeleteDatabase",
			Handler:    _AuthService_DeleteDatabase_Handler,
		},
		{
			MethodName: "DeleteAllDatabases",
			Handler:    _AuthService_DeleteAllDatabases_Handler,
		},
		{
			MethodName: "GetKubernetesClusters",
			Handler:    _AuthService_GetKubernetesClusters_Handler,
		},
		{
			MethodName: "GetKubernetesCluster",
			Handler:    _AuthService_GetKubernetesCluster_Handler,
		},
		{
			MethodName: "CreateKubernetesCluster",
			Handler:    _AuthService_CreateKubernetesCluster_Handler,
		},
		{
			MethodName: "UpdateKubernetesCluster",
			Handler:    _AuthService_UpdateKubernetesCluster_Handler,
		},
		{
			MethodName: "DeleteKubernetesCluster",
			Handler:    _AuthService_DeleteKubernetesCluster_Handler,
		},
		{
			MethodName: "DeleteAllKubernetesClusters",
			Handler:    _AuthService_DeleteAllKubernetesClusters_Handler,
		},
		{
			MethodName: "GetWindowsDesktopServices",
			Handler:    _AuthService_GetWindowsDesktopServices_Handler,
		},
		{
			MethodName: "GetWindowsDesktopService",
			Handler:    _AuthService_GetWindowsDesktopService_Handler,
		},
		{
			MethodName: "UpsertWindowsDesktopService",
			Handler:    _AuthService_UpsertWindowsDesktopService_Handler,
		},
		{
			MethodName: "DeleteWindowsDesktopService",
			Handler:    _AuthService_DeleteWindowsDesktopService_Handler,
		},
		{
			MethodName: "DeleteAllWindowsDesktopServices",
			Handler:    _AuthService_DeleteAllWindowsDesktopServices_Handler,
		},
		{
			MethodName: "GetWindowsDesktops",
			Handler:    _AuthService_GetWindowsDesktops_Handler,
		},
		{
			MethodName: "CreateWindowsDesktop",
			Handler:    _AuthService_CreateWindowsDesktop_Handler,
		},
		{
			MethodName: "UpdateWindowsDesktop",
			Handler:    _AuthService_UpdateWindowsDesktop_Handler,
		},
		{
			MethodName: "UpsertWindowsDesktop",
			Handler:    _AuthService_UpsertWindowsDesktop_Handler,
		},
		{
			MethodName: "DeleteWindowsDesktop",
			Handler:    _AuthService_DeleteWindowsDesktop_Handler,
		},
		{
			MethodName: "DeleteAllWindowsDesktops",
			Handler:    _AuthService_DeleteAllWindowsDesktops_Handler,
		},
		{
			MethodName: "GenerateWindowsDesktopCert",
			Handler:    _AuthService_GenerateWindowsDesktopCert_Handler,
		},
		{
			MethodName: "GenerateCertAuthorityCRL",
			Handler:    _AuthService_GenerateCertAuthorityCRL_Handler,
		},
		{
			MethodName: "GetDesktopBootstrapScript",
			Handler:    _AuthService_GetDesktopBootstrapScript_Handler,
		},
		{
			MethodName: "CreateConnectionDiagnostic",
			Handler:    _AuthService_CreateConnectionDiagnostic_Handler,
		},
		{
			MethodName: "UpdateConnectionDiagnostic",
			Handler:    _AuthService_UpdateConnectionDiagnostic_Handler,
		},
		{
			MethodName: "GetConnectionDiagnostic",
			Handler:    _AuthService_GetConnectionDiagnostic_Handler,
		},
		{
			MethodName: "AppendDiagnosticTrace",
			Handler:    _AuthService_AppendDiagnosticTrace_Handler,
		},
		{
			MethodName: "ChangeUserAuthentication",
			Handler:    _AuthService_ChangeUserAuthentication_Handler,
		},
		{
			MethodName: "StartAccountRecovery",
			Handler:    _AuthService_StartAccountRecovery_Handler,
		},
		{
			MethodName: "VerifyAccountRecovery",
			Handler:    _AuthService_VerifyAccountRecovery_Handler,
		},
		{
			MethodName: "CompleteAccountRecovery",
			Handler:    _AuthService_CompleteAccountRecovery_Handler,
		},
		{
			MethodName: "CreateAccountRecoveryCodes",
			Handler:    _AuthService_CreateAccountRecoveryCodes_Handler,
		},
		{
			MethodName: "GetAccountRecoveryToken",
			Handler:    _AuthService_GetAccountRecoveryToken_Handler,
		},
		{
			MethodName: "GetAccountRecoveryCodes",
			Handler:    _AuthService_GetAccountRecoveryCodes_Handler,
		},
		{
			MethodName: "CreatePrivilegeToken",
			Handler:    _AuthService_CreatePrivilegeToken_Handler,
		},
		{
			MethodName: "GetInstaller",
			Handler:    _AuthService_GetInstaller_Handler,
		},
		{
			MethodName: "GetInstallers",
			Handler:    _AuthService_GetInstallers_Handler,
		},
		{
			MethodName: "SetInstaller",
			Handler:    _AuthService_SetInstaller_Handler,
		},
		{
			MethodName: "DeleteInstaller",
			Handler:    _AuthService_DeleteInstaller_Handler,
		},
		{
			MethodName: "DeleteAllInstallers",
			Handler:    _AuthService_DeleteAllInstallers_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _AuthService_ListResources_Handler,
		},
		{
			MethodName: "ListUnifiedResources",
			Handler:    _AuthService_ListUnifiedResources_Handler,
		},
		{
			MethodName: "GetSSHTargets",
			Handler:    _AuthService_GetSSHTargets_Handler,
		},
		{
			MethodName: "ResolveSSHTarget",
			Handler:    _AuthService_ResolveSSHTarget_Handler,
		},
		{
			MethodName: "GetDomainName",
			Handler:    _AuthService_GetDomainName_Handler,
		},
		{
			MethodName: "GetClusterCACert",
			Handler:    _AuthService_GetClusterCACert_Handler,
		},
		{
			MethodName: "AssertSystemRole",
			Handler:    _AuthService_AssertSystemRole_Handler,
		},
		{
			MethodName: "SubmitUsageEvent",
			Handler:    _AuthService_SubmitUsageEvent_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _AuthService_GetLicense_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _AuthService_ListReleases_Handler,
		},
		{
			MethodName: "ListSAMLIdPServiceProviders",
			Handler:    _AuthService_ListSAMLIdPServiceProviders_Handler,
		},
		{
			MethodName: "GetSAMLIdPServiceProvider",
			Handler:    _AuthService_GetSAMLIdPServiceProvider_Handler,
		},
		{
			MethodName: "CreateSAMLIdPServiceProvider",
			Handler:    _AuthService_CreateSAMLIdPServiceProvider_Handler,
		},
		{
			MethodName: "UpdateSAMLIdPServiceProvider",
			Handler:    _AuthService_UpdateSAMLIdPServiceProvider_Handler,
		},
		{
			MethodName: "DeleteSAMLIdPServiceProvider",
			Handler:    _AuthService_DeleteSAMLIdPServiceProvider_Handler,
		},
		{
			MethodName: "DeleteAllSAMLIdPServiceProviders",
			Handler:    _AuthService_DeleteAllSAMLIdPServiceProviders_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _AuthService_ListUserGroups_Handler,
		},
		{
			MethodName: "GetUserGroup",
			Handler:    _AuthService_GetUserGroup_Handler,
		},
		{
			MethodName: "CreateUserGroup",
			Handler:    _AuthService_CreateUserGroup_Handler,
		},
		{
			MethodName: "UpdateUserGroup",
			Handler:    _AuthService_UpdateUserGroup_Handler,
		},
		{
			MethodName: "DeleteUserGroup",
			Handler:    _AuthService_DeleteUserGroup_Handler,
		},
		{
			MethodName: "DeleteAllUserGroups",
			Handler:    _AuthService_DeleteAllUserGroups_Handler,
		},
		{
			MethodName: "GetHeadlessAuthentication",
			Handler:    _AuthService_GetHeadlessAuthentication_Handler,
		},
		{
			MethodName: "UpdateHeadlessAuthenticationState",
			Handler:    _AuthService_UpdateHeadlessAuthenticationState_Handler,
		},
		{
			MethodName: "ExportUpgradeWindows",
			Handler:    _AuthService_ExportUpgradeWindows_Handler,
		},
		{
			MethodName: "GetClusterMaintenanceConfig",
			Handler:    _AuthService_GetClusterMaintenanceConfig_Handler,
		},
		{
			MethodName: "UpdateClusterMaintenanceConfig",
			Handler:    _AuthService_UpdateClusterMaintenanceConfig_Handler,
		},
		{
			MethodName: "DeleteClusterMaintenanceConfig",
			Handler:    _AuthService_DeleteClusterMaintenanceConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InventoryControlStream",
			Handler:       _AuthService_InventoryControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetInstances",
			Handler:       _AuthService_GetInstances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MaintainSessionPresence",
			Handler:       _AuthService_MaintainSessionPresence_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetActiveSessionTrackers",
			Handler:       _AuthService_GetActiveSessionTrackers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetActiveSessionTrackersWithFilter",
			Handler:       _AuthService_GetActiveSessionTrackersWithFilter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendKeepAlives",
			Handler:       _AuthService_SendKeepAlives_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchEvents",
			Handler:       _AuthService_WatchEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateUserSingleUseCerts",
			Handler:       _AuthService_GenerateUserSingleUseCerts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAccessRequestsV2",
			Handler:       _AuthService_GetAccessRequestsV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCurrentUserRoles",
			Handler:       _AuthService_GetCurrentUserRoles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _AuthService_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateAuditStream",
			Handler:       _AuthService_CreateAuditStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamWebSessions",
			Handler:       _AuthService_StreamWebSessions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddMFADevice",
			Handler:       _AuthService_AddMFADevice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteMFADevice",
			Handler:       _AuthService_DeleteMFADevice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetServerInfos",
			Handler:       _AuthService_GetServerInfos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSessionEvents",
			Handler:       _AuthService_StreamSessionEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPendingHeadlessAuthentications",
			Handler:       _AuthService_WatchPendingHeadlessAuthentications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "teleport/legacy/client/proto/authservice.proto",
}
