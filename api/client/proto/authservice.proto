// Copyright 2021-2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package proto;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "certs.proto";

import "github.com/gravitational/teleport/api/types/types.proto";
import "github.com/gravitational/teleport/api/types/webauthn/webauthn.proto";
import "github.com/gravitational/teleport/api/types/wrappers/wrappers.proto";
import "github.com/gravitational/teleport/api/types/events/events.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;

// Operation identifies type of operation
enum Operation {
    // INIT is sent as a first sentinel event
    // on the watch channel
    INIT = 0;
    // PUT identifies created or updated object
    PUT = 1;
    // DELETE identifies deleted object
    DELETE = 2;
}

// Event returns cluster event
message Event {
    reserved 7;

    // Operation identifies operation
    Operation Type = 1 [ (gogoproto.jsontag) = "type,omitempty" ];
    // Resource contains the updated resource
    oneof Resource {
        // ResourceHeader is specified in delete events,
        // the full object is not available, so resource
        // header is used to provide information about object type
        types.ResourceHeader ResourceHeader = 2 [ (gogoproto.jsontag) = "resource,omitempty" ];
        // CertAuthority is filled in certificate-authority related events
        types.CertAuthorityV2 CertAuthority = 3
            [ (gogoproto.jsontag) = "cert_authority,omitempty" ];
        // StaticTokens is filled in static-tokens related events
        types.StaticTokensV2 StaticTokens = 4 [ (gogoproto.jsontag) = "static_tokens,omitempty" ];
        // ProvisionToken is filled in provision-token related events
        types.ProvisionTokenV2 ProvisionToken = 5
            [ (gogoproto.jsontag) = "provision_token,omitempty" ];
        // ClusterNameV2 is a cluster name resource
        types.ClusterNameV2 ClusterName = 6 [ (gogoproto.jsontag) = "cluster_name,omitempty" ];
        // User is a user resource
        types.UserV2 User = 8 [ (gogoproto.jsontag) = "user,omitempty" ];
        // Role is a role resource
        types.RoleV5 Role = 9 [ (gogoproto.jsontag) = "role,omitempty" ];
        // Namespace is a namespace resource
        types.Namespace Namespace = 10 [ (gogoproto.jsontag) = "namespace,omitempty" ];
        // Server is a node or proxy resource
        types.ServerV2 Server = 11 [ (gogoproto.jsontag) = "server,omitempty" ];
        // ReverseTunnel is a resource with reverse tunnel
        types.ReverseTunnelV2 ReverseTunnel = 12
            [ (gogoproto.jsontag) = "reverse_tunnel,omitempty" ];
        // TunnelConnection is a resource for tunnel connnections
        types.TunnelConnectionV2 TunnelConnection = 13
            [ (gogoproto.jsontag) = "tunnel_connection,omitempty" ];
        // AccessRequest is a resource for access requests
        types.AccessRequestV3 AccessRequest = 14
            [ (gogoproto.jsontag) = "access_request,omitempty" ];
        // AppSession is an application web session.
        types.WebSessionV2 AppSession = 15 [ (gogoproto.jsontag) = "app_session,omitempty" ];
        // RemoteCluster is a resource for remote clusters
        types.RemoteClusterV3 RemoteCluster = 16
            [ (gogoproto.jsontag) = "remote_cluster,omitempty" ];
        // DatabaseServer is a resource for database servers.
        types.DatabaseServerV3 DatabaseServer = 17
            [ (gogoproto.jsontag) = "database_server,omitempty" ];
        // WebSession is a regular web session.
        types.WebSessionV2 WebSession = 18 [ (gogoproto.jsontag) = "web_session,omitempty" ];
        // WebToken is a web token.
        types.WebTokenV3 WebToken = 19 [ (gogoproto.jsontag) = "web_token,omitempty" ];
        // ClusterNetworkingConfig is a resource for cluster networking configuration.
        types.ClusterNetworkingConfigV2 ClusterNetworkingConfig = 20
            [ (gogoproto.jsontag) = "cluster_networking_config,omitempty" ];
        // SessionRecordingConfig is a resource for session recording configuration.
        types.SessionRecordingConfigV2 SessionRecordingConfig = 21
            [ (gogoproto.jsontag) = "session_recording_config,omitempty" ];
        // AuthPreference is cluster auth preference.
        types.AuthPreferenceV2 AuthPreference = 22
            [ (gogoproto.jsontag) = "auth_preference,omitempty" ];
        // ClusterAuditConfig is a resource for cluster audit configuration.
        types.ClusterAuditConfigV2 ClusterAuditConfig = 23
            [ (gogoproto.jsontag) = "cluster_audit_config,omitempty" ];
        // Lock is a lock resource.
        types.LockV2 Lock = 24 [ (gogoproto.jsontag) = "lock,omitempty" ];
        // NetworkRestrictions is a resource for network restrictions
        types.NetworkRestrictionsV4 NetworkRestrictions = 25
            [ (gogoproto.jsontag) = "network_restrictions,omitempty" ];
        // WindowsDesktopService is a resource for Windows desktop services.
        types.WindowsDesktopServiceV3 WindowsDesktopService = 26
            [ (gogoproto.jsontag) = "windows_desktop_service,omitempty" ];
        // WindowsDesktop is a resource for Windows desktop host.
        types.WindowsDesktopV3 WindowsDesktop = 27
            [ (gogoproto.jsontag) = "windows_desktop,omitempty" ];
        // Database is a database resource.
        types.DatabaseV3 Database = 28 [ (gogoproto.jsontag) = "database,omitempty" ];
        // AppServer is an application server resource.
        types.AppServerV3 AppServer = 29 [ (gogoproto.jsontag) = "app_server,omitempty" ];
        // App is an application resource.
        types.AppV3 App = 30 [ (gogoproto.jsontag) = "app,omitempty" ];
    }
}

// Watch specifies watch parameters
message Watch {
    // Kinds specifies object kinds to watch
    repeated WatchKind Kinds = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "kinds,omitempty" ];
}

// WatchKind specifies resource kind to watch
message WatchKind {
    // Kind is a resource kind to watch
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // LoadSecrets specifies whether to load secrets
    bool LoadSecrets = 2 [ (gogoproto.jsontag) = "load_secrets" ];
    // Name is an optional specific resource type to watch,
    // if specified only the events with a specific resource
    // name will be sent
    string Name = 3 [ (gogoproto.jsontag) = "name" ];
    // Filter is an optional mapping of custom filter parameters.
    // Valid values vary by resource kind.
    map<string, string> Filter = 4 [ (gogoproto.jsontag) = "filter,omitempty" ];
    // SubKind is a resource subkind to watch
    string SubKind = 5 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
}

// HostCertsRequest specifies certificate-generation parameters
// for a server.
message HostCertsRequest {
    // HostID is a unique ID of the host.
    string HostID = 1 [ (gogoproto.jsontag) = "host_id" ];
    // NodeName is a user-friendly host name.
    string NodeName = 2 [ (gogoproto.jsontag) = "node_name" ];
    // Role is a system role assigned to the host.
    string Role = 3 [
        (gogoproto.jsontag) = "role",
        (gogoproto.casttype) = "github.com/gravitational/teleport/api/types.SystemRole"
    ];
    // AdditionalPrincipals is a list of additional principals
    // to include in OpenSSH and X509 certificates
    repeated string AdditionalPrincipals = 4
        [ (gogoproto.jsontag) = "additional_principals,omitempty" ];
    // DNSNames is a list of DNS names to include in x509 certificates.
    repeated string DNSNames = 5 [ (gogoproto.jsontag) = "dns_names,omitempty" ];
    // PublicTLSKey is a PEM encoded public key, which the auth server will use
    // to create a signed TLS certificate. This field is required.
    bytes PublicTLSKey = 6 [ (gogoproto.jsontag) = "public_tls_key" ];
    // PublicSSHKey is a SSH encoded public key, which the auth server will use
    // to create a signed SSH certificate. This field is required.
    bytes PublicSSHKey = 7 [ (gogoproto.jsontag) = "public_ssh_key" ];
    // RemoteAddr is the IP address of the remote host requesting a certificate.
    // RemoteAddr is used to replace 0.0.0.0 in the list of additional principals.
    string RemoteAddr = 8 [ (gogoproto.jsontag) = "remote_addr" ];
    // Rotation allows clients to send the certificate authority rotation state
    // expected by the client so that auth servers can avoid the situation when
    // clients request certs assuming one state and auth servers issue another.
    types.Rotation Rotation = 9 [ (gogoproto.jsontag) = "rotation,omitempty" ];
    // NoCache is argument that only local callers can supply to bypass cache
    bool NoCache = 10 [ (gogoproto.jsontag) = "-" ];
}

// UserCertRequest specifies certificate-generation parameters
// for a user.
message UserCertsRequest {
    // PublicKey is a public key to be signed.
    bytes PublicKey = 1 [ (gogoproto.jsontag) = "public_key" ];
    // Username of key owner.
    string Username = 2 [ (gogoproto.jsontag) = "username" ];
    // Expires is a desired time of the expiry of the certificate, could
    // be adjusted based on the permissions
    google.protobuf.Timestamp Expires = 3 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires,omitempty"
    ];
    // Format encodes the desired SSH Certificate format (either old ssh
    // compatibility
    // format to remove some metadata causing trouble with old SSH servers)
    // or standard SSH cert format with custom extensions
    string Format = 4 [ (gogoproto.jsontag) = "format,omitempty" ];
    // RouteToCluster is an optional cluster name to add to the certificate,
    // so that requests originating with this certificate will be redirected
    // to this cluster
    string RouteToCluster = 5 [ (gogoproto.jsontag) = "route_to_cluster,omitempty" ];
    // AccessRequests is an optional list of request IDs indicating requests whose
    // escalated privileges should be added to the certificate.
    repeated string AccessRequests = 6 [ (gogoproto.jsontag) = "access_requests,omitempty" ];
    // KubernetesCluster specifies the target kubernetes cluster for TLS
    // identities. This can be empty on older Teleport clients.
    string KubernetesCluster = 7 [ (gogoproto.jsontag) = "kubernetes_cluster,omitempty" ];
    // RouteToDatabase specifies the target database proxy name to encode into
    // certificate so database client requests are routed appropriately.
    RouteToDatabase RouteToDatabase = 8
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "route_to_database,omitempty" ];

    // NodeName is the name of the SSH node that this user certificate will be
    // scoped to.
    string NodeName = 9 [ (gogoproto.jsontag) = "node_name,omitempty" ];

    enum CertUsage {
        // All means a request for both SSH and TLS certificates for the
        // overall user session. These certificates are not specific to any SSH
        // node, Kubernetes cluster, database or web app.
        All = 0;
        // SSH means a request for an SSH certificate for access to a specific
        // SSH node, as specified by NodeName.
        SSH = 1;
        // Kubernetes means a request for a TLS certificate for access to a
        // specific Kubernetes cluster, as specified by KubernetesCluster.
        Kubernetes = 2;
        // Database means a request for a TLS certificate for access to a
        // specific database, as specified by RouteToDatabase.
        Database = 3;
        // App means a request for a TLS certificate for access to a specific
        // web app, as specified by RouteToApp.
        App = 4;
    }
    // CertUsage limits the resulting user certificate to a single protocol.
    CertUsage Usage = 10 [ (gogoproto.jsontag) = "usage,omitempty" ];

    // RouteToApp specifies application to issue certificate for.
    RouteToApp RouteToApp = 11
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "route_to_app,omitempty" ];

    // RoleRequests specify an alternative set of named roles to apply to the
    // certificate, assuming the requestor is allowed to impersonate said roles
    // directly. An empty set of requests returns the user's normal set of
    // roles.
    repeated string RoleRequests = 12 [ (gogoproto.jsontag) = "role_requests,omitempty" ];
}

// RouteToDatabase combines parameters for database service routing information.
message RouteToDatabase {
    // ServiceName is the Teleport database proxy service name the cert is for.
    string ServiceName = 1 [ (gogoproto.jsontag) = "service_name" ];
    // Protocol is the type of the database the cert is for.
    string Protocol = 2 [ (gogoproto.jsontag) = "protocol" ];
    // Username is an optional database username to embed.
    string Username = 3 [ (gogoproto.jsontag) = "username,omitempty" ];
    // Database is an optional database name to embed.
    string Database = 4 [ (gogoproto.jsontag) = "database,omitempty" ];
}

// RouteToApp contains parameters for application access certificate requests.
message RouteToApp {
    // Name is the application name certificate is being requested for.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // SessionID is the ID of the application session.
    string SessionID = 2 [ (gogoproto.jsontag) = "session_id" ];
    // PublicAddr is the application public address.
    string PublicAddr = 3 [ (gogoproto.jsontag) = "public_addr" ];
    // ClusterName is the cluster where the application resides.
    string ClusterName = 4 [ (gogoproto.jsontag) = "cluster_name" ];
    // AWSRoleARN is the AWS role to assume when accessing AWS API.
    string AWSRoleARN = 5 [ (gogoproto.jsontag) = "aws_role_arn,omitempty" ];
}

// GetUserRequest specifies parameters for the GetUser method.
message GetUserRequest {
    // Name is the name of the desired user.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 2 [ (gogoproto.jsontag) = "with_secrets,omitempty" ];
}

// GetUsersRequest specifies parameters for the GetUsers method.
message GetUsersRequest {
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 1 [ (gogoproto.jsontag) = "with_secrets" ];
}

// AccessRequests is a collection of AccessRequest values.
message AccessRequests {
    repeated types.AccessRequestV3 AccessRequests = 1 [ (gogoproto.jsontag) = "access_requests" ];
}

// PluginDataSeq is a sequence of plugin data.
message PluginDataSeq {
    repeated types.PluginDataV3 PluginData = 1 [ (gogoproto.jsontag) = "plugin_data" ];
}

// RequestStateSetter encodes the paramters necessary to update the
// state of a privilege escalation request.
message RequestStateSetter {
    // ID is the request ID being targeted
    string ID = 1 [ (gogoproto.jsontag) = "id" ];
    // State is the desired state to be set
    types.RequestState State = 2 [ (gogoproto.jsontag) = "state" ];
    // Delegator is an optional indicator of who delegated this
    // state update (used by plugins to indicate which user approved
    // or denied the request).
    string Delegator = 3 [ (gogoproto.jsontag) = "delegator,omitempty" ];
    // Reason is an optional message indicating the reason for the
    // resolution (approval, denail , etc...).
    string Reason = 4 [ (gogoproto.jsontag) = "reason,omitempty" ];
    // Annotations are key/value pairs received from plugins during request
    // resolution.  They are currently only used to provide additional logging
    // information.
    wrappers.LabelValues Annotations = 5 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "annotations,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Traits"
    ];
    // Roles, if present, overrides the existing set of roles associated
    // with the access request.
    repeated string Roles = 6 [ (gogoproto.jsontag) = "roles,omitempty" ];
}

// RequestID is the unique identifier of an access request.
message RequestID { string ID = 1 [ (gogoproto.jsontag) = "id" ]; }

// RotateUserTokenSecretsRequest is a request to rotate token secrets.
message RotateUserTokenSecretsRequest { string TokenID = 1 [ (gogoproto.jsontag) = "token" ]; }

// GetResetPasswordTokenRequest is a request to get a reset password token.
message GetResetPasswordTokenRequest { string TokenID = 1 [ (gogoproto.jsontag) = "token" ]; }

// CreateResetPasswordTokenRequest is a request to create a reset password token.
message CreateResetPasswordTokenRequest {
    // Name is the user name.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // Type is a token type.
    string Type = 2 [ (gogoproto.jsontag) = "type" ];
    // TTL specifies how long the generated token is valid for.
    int64 TTL = 3 [ (gogoproto.jsontag) = "ttl", (gogoproto.casttype) = "Duration" ];
}

// PingRequest is the input value for the Ping method.
message PingRequest {
    // Ping method currently takes no parameters
}

// PingResponse contains data about the teleport auth server.
message PingResponse {
    // ClusterName is the name of the teleport cluster.
    string ClusterName = 1 [ (gogoproto.jsontag) = "cluster_name" ];
    // ServerVersion is the version of the auth server.
    string ServerVersion = 2 [ (gogoproto.jsontag) = "server_version" ];
    // ServerFeatures are the features supported by the auth server.
    Features ServerFeatures = 3 [ (gogoproto.jsontag) = "server_features" ];
    // ProxyPublicAddr is the server's public proxy address.
    string ProxyPublicAddr = 4 [ (gogoproto.jsontag) = "proxy_public_addr" ];
}

// Features are auth server features.
message Features {
    // Kubernetes enables Kubernetes Access product
    bool Kubernetes = 1 [ (gogoproto.jsontag) = "kubernetes" ];
    // App enables Application Access product
    bool App = 2 [ (gogoproto.jsontag) = "app" ];
    // DB enables database access product
    bool DB = 3 [ (gogoproto.jsontag) = "db" ];
    // OIDC enables OIDC connectors
    bool OIDC = 4 [ (gogoproto.jsontag) = "oidc" ];
    // SAML enables SAML connectors
    bool SAML = 5 [ (gogoproto.jsontag) = "saml" ];
    // AccessControls enables FIPS access controls
    bool AccessControls = 6 [ (gogoproto.jsontag) = "access_controls" ];
    // AdvancedAccessWorkflows enables advanced access workflows
    bool AdvancedAccessWorkflows = 7 [ (gogoproto.jsontag) = "advanced_access_workflows" ];
    // Cloud enables some cloud-related features
    bool Cloud = 8 [ (gogoproto.jsontag) = "cloud" ];
    // HSM enables PKCS#11 HSM support
    bool HSM = 9 [ (gogoproto.jsontag) = "hsm" ];
    // Desktop enables desktop access product
    bool Desktop = 10 [ (gogoproto.jsontag) = "desktop" ];
}

// DeleteUserRequest is the input value for the DeleteUser method.
message DeleteUserRequest {
    // Name is the user name to delete.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// Semaphores is a sequence of Semaphore resources.
message Semaphores {
    repeated types.SemaphoreV3 Semaphores = 1 [ (gogoproto.jsontag) = "semaphores" ];
}

// AuditStreamRequest contains stream request - event or stream control request
message AuditStreamRequest {
    // Request is either stream request - create, resume or complete stream
    // or event submitted as a part of the stream
    oneof Request {
        // CreateStream creates the stream for session ID
        // should be the first message sent to the stream
        CreateStream CreateStream = 1;
        // ResumeStream resumes existing stream, should be the
        // first message sent to the stream
        ResumeStream ResumeStream = 2;
        // CompleteStream completes the stream
        CompleteStream CompleteStream = 3;
        // FlushAndClose flushes and closes the stream
        FlushAndCloseStream FlushAndCloseStream = 4;
        // Event contains the stream event
        events.OneOf Event = 5;
    }
}

// AuditStreamStatus returns audit stream status
// with corresponding upload ID
message AuditStreamStatus {
    // UploadID is upload ID associated with the stream,
    // can be used to resume the stream
    string UploadID = 1;
}

// CreateStream creates stream for a new session ID
message CreateStream { string SessionID = 1; }

// ResumeStream resumes stream that was previously created
message ResumeStream {
    // SessionID is a session ID of the stream
    string SessionID = 1;
    // UploadID is upload ID to resume
    string UploadID = 2;
}

// CompleteStream completes the stream
// and uploads it to the session server
message CompleteStream {}

// FlushAndCloseStream flushes the stream data and closes the stream
message FlushAndCloseStream {}

// GetApplicationServersRequest is a request to fetch all registered apps.
// DELETE IN 10.0.
message GetApplicationServersRequest {
    // Namespace is the app servers namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
}

// GetApplicationServersResponse contains all registered app servers.
// DELETE IN 10.0.
message GetApplicationServersResponse {
    // Servers is a list of proxied applications.
    repeated types.AppServerV3 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertApplicationServerRequest upserts an app server.
message UpsertApplicationServerRequest {
    // Server is an app server resource to register.
    types.AppServerV3 Server = 1 [ (gogoproto.jsontag) = "server" ];
}

// DeleteApplicationServerRequest is a request to delete an app server.
message DeleteApplicationServerRequest {
    // Namespace is the app server namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // HostID is the app server host uuid.
    string HostID = 2 [ (gogoproto.jsontag) = "host_id" ];
    // Name is the name of the application to delete.
    string Name = 3 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllApplicationServersRequest are the parameters used to remove all applications.
message DeleteAllApplicationServersRequest {
    // Namespace is the app servers namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
}

// GetAppServersRequest are the parameters used to request application servers.
//
// DELETE IN 9.0. Deprecated, use GetApplicationServersRequest.
message GetAppServersRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // DEPRECATED: SkipValidation is used to skip JSON schema validation.
    bool SkipValidation = 2 [ deprecated = true, (gogoproto.jsontag) = "skip_validation" ];
}

// GetAppServersResponse contains all requested application servers.
//
// DELETE IN 9.0. Deprecated, use GetApplicationServersResponse.
message GetAppServersResponse {
    // Servers is a slice of types.Server that represent applications.
    repeated types.ServerV2 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertAppServerRequest are the parameters used to add an application.
//
// DELETE IN 9.0. Deprecated, use UpsertApplicationServerRequest.
message UpsertAppServerRequest { types.ServerV2 Server = 1 [ (gogoproto.jsontag) = "server" ]; }

// DeleteAppServerRequest are the parameters used to remove an application.
//
// DELETE IN 9.0. Deprecated, use DeleteApplicationServerRequest.
message DeleteAppServerRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // Name is the name of the application to delete.
    string Name = 2 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllAppServersRequest are the parameters used to remove all applications.
//
// DELETE IN 9.0. Deprecated, use DeleteAllApplicationServersRequest.
message DeleteAllAppServersRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
}

// GenerateAppTokenRequest are the parameters used to request an application
// token.
message GenerateAppTokenRequest {
    // Username is the Teleport username.
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    // Roles is a list of Teleport roles assigned to the user.
    repeated string Roles = 2 [ (gogoproto.jsontag) = "roles" ];
    // URI is the URI of the application this token is targeting.
    string URI = 3 [ (gogoproto.jsontag) = "uri" ];
    // Expires is the time this token expires.
    google.protobuf.Timestamp Expires = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
}

// GenerateAppTokenResponse contains a signed application token.
message GenerateAppTokenResponse { string Token = 1 [ (gogoproto.jsontag) = "token" ]; }

// GetAppSessionRequest are the parameters used to request an application web session.
message GetAppSessionRequest {
    // SessionID is the ID of the session being requested.
    string SessionID = 1 [ (gogoproto.jsontag) = "session_id" ];
}

// GetAppSessionResponse contains the requested application web session.
message GetAppSessionResponse {
    // Session is the application web session.
    types.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// GetAppSessionsResponse contains all the requested application web sessions.
message GetAppSessionsResponse {
    // Sessions is a list of application web sessions.
    repeated types.WebSessionV2 Sessions = 1 [ (gogoproto.jsontag) = "sessions" ];
}

// CreateAppSessionRequest contains the parameters to request a application web session.
message CreateAppSessionRequest {
    reserved 2;
    // Username is the name of the user requesting the session.
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    // PublicAddr is the public address the application.
    string PublicAddr = 3 [ (gogoproto.jsontag) = "public_addr" ];
    // ClusterName is cluster within which the application is running.
    string ClusterName = 4 [ (gogoproto.jsontag) = "cluster_name" ];
    // AWSRoleARN is AWS role the user wants to assume.
    string AWSRoleARN = 5 [ (gogoproto.jsontag) = "aws_role_arn" ];
}

// CreateAppSessionResponse contains the requested application web session.
message CreateAppSessionResponse {
    // Session is the application web session.
    types.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// DeleteAppSessionRequest contains the parameters used to remove an application web session.
message DeleteAppSessionRequest { string SessionID = 1 [ (gogoproto.jsontag) = "session_id" ]; }

// GetWebSessionResponse contains the requested web session.
message GetWebSessionResponse {
    // Session is the web session.
    types.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// GetWebSessionsResponse contains all the requested web sessions.
message GetWebSessionsResponse {
    // Sessions is a list of web sessions.
    repeated types.WebSessionV2 Sessions = 1 [ (gogoproto.jsontag) = "sessions" ];
}

// GetWebTokenResponse contains the requested web token.
message GetWebTokenResponse {
    // Token is the web token being requested.
    types.WebTokenV3 Token = 1 [ (gogoproto.jsontag) = "token" ];
}

// GetWebTokensResponse contains all the requested web tokens.
message GetWebTokensResponse {
    // Tokens is a list of web tokens.
    repeated types.WebTokenV3 Tokens = 1 [ (gogoproto.jsontag) = "tokens" ];
}

// GetKubeServicesRequest are the parameters used to request kubernetes services.
// DELETE IN 10.0
message GetKubeServicesRequest {}

// GetKubeServicesResponse contains all requested kubernetes services.
// DELETE IN 10.0
message GetKubeServicesResponse {
    // Servers is a slice of types.Server that represent kubernetes
    // services.
    repeated types.ServerV2 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertKubeServiceRequest are the parameters used to add or update a
// kubernetes service.
message UpsertKubeServiceRequest { types.ServerV2 Server = 1 [ (gogoproto.jsontag) = "server" ]; }

// DeleteKubeServiceRequest are the parameters used to remove a kubernetes service.
message DeleteKubeServiceRequest {
    // Name is the name of the kubernetes service to delete.
    string Name = 2 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllKubeServicesRequest are the parameters used to remove all kubernetes services.
message DeleteAllKubeServicesRequest {}

// GetDatabaseServersRequest is a request to return all registered database servers.
// DELETE IN 10.0.
message GetDatabaseServersRequest {
    // Namespace is the database server namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // DEPRECATED: SkipValidation allows to turn off JSON schema validation.
    bool SkipValidation = 2 [ deprecated = true, (gogoproto.jsontag) = "skip_validation" ];
}

// GetDatabaseServersResponse contains all registered database servers.
// DELETE IN 10.0.
message GetDatabaseServersResponse {
    // Servers is a list of database proxy servers.
    repeated types.DatabaseServerV3 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertDatabaseServerRequest is a request to register database server.
message UpsertDatabaseServerRequest {
    // Server is the database proxy server to register.
    types.DatabaseServerV3 Server = 1 [ (gogoproto.jsontag) = "server" ];
}

// DeleteDatabaseServerRequest is a request to delete a database server.
message DeleteDatabaseServerRequest {
    // Namespace is the database server namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // HostID is the ID of the host database server is running on.
    string HostID = 2 [ (gogoproto.jsontag) = "host_id" ];
    // Name is the database server name.
    string Name = 3 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllDatabaseServersRequest is a request to delete all database servers.
message DeleteAllDatabaseServersRequest {
    // Namespace is the database servers namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
}

// DatabaseCSRRequest is a request to generate a client certificate used
// by the proxy to authenticate with a remote database service.
message DatabaseCSRRequest {
    // CSR is the request to sign.
    bytes CSR = 1 [ (gogoproto.jsontag) = "csr" ];
    // ClusterName is the name of the cluster the request is for.
    string ClusterName = 2 [ (gogoproto.jsontag) = "cluster_name" ];
    // SignWithDatabaseCA if set to true will use Database CA to sign the created certificate.
    // This flag was created to enable Database CA for new proxies and don't break old one that
    // are still using UserCA.
    bool SignWithDatabaseCA = 3 [ (gogoproto.jsontag) = "sign_with_database_ca" ];
}

// DatabaseCSRResponse contains the signed database certificate.
message DatabaseCSRResponse {
    // Cert is the signed certificate.
    bytes Cert = 1 [ (gogoproto.jsontag) = "cert" ];
    // CACerts is a list of certificate authorities.
    repeated bytes CACerts = 2 [ (gogoproto.jsontag) = "ca_certs" ];
}

// DatabaseCertRequest is a request to generate a client certificate used
// by a database service to authenticate with a database instance.
message DatabaseCertRequest {
    // CSR is the request to sign.
    bytes CSR = 1 [ (gogoproto.jsontag) = "csr" ];
    // ServerName is the SAN to include in the certificate.
    // DEPRECATED: Replaced by ServerNames.
    string ServerName = 2 [ (gogoproto.jsontag) = "server_name", deprecated = true ];
    // TTL is the certificate validity period.
    int64 TTL = 3 [ (gogoproto.jsontag) = "ttl", (gogoproto.casttype) = "Duration" ];
    // ServerNames are SANs to include in the certificate.
    repeated string ServerNames = 4 [ (gogoproto.jsontag) = "server_names" ];
}

// DatabaseCertResponse contains the signed certificate.
message DatabaseCertResponse {
    // Cert is the signed certificate.
    bytes Cert = 1 [ (gogoproto.jsontag) = "cert" ];
    // CACerts is a list of certificate authorities.
    repeated bytes CACerts = 2 [ (gogoproto.jsontag) = "ca_certs" ];
}

// GetRoleRequest is a request to query a role.
message GetRoleRequest {
    // Name is the name of the role to get.
    string Name = 1;
}

// GetRolesResponse is a response to querying for all roles.
message GetRolesResponse {
    // Roles is a list of roles.
    repeated types.RoleV5 Roles = 1;
}

// DeleteRoleRequest is a request to delete a role.
message DeleteRoleRequest {
    // Name is the role name to delete.
    string Name = 1;
}

// DeviceType describes supported MFA device types.
enum DeviceType {
    DEVICE_TYPE_UNSPECIFIED = 0;
    // TOTP is a Time-based One-Time Password device.
    DEVICE_TYPE_TOTP = 1;
    // U2F is a U2F/CTAP1 capable device registered via U2F APIs.
    DEVICE_TYPE_U2F = 2;
    // Webauthn is a device compatible with the Web Authentication
    // specification, registered via Webauthn APIs.
    // Supports various kinds of devices: U2F/CTAP1, CTAP2, platform
    // authenticators (Touch ID), etc.
    DEVICE_TYPE_WEBAUTHN = 3;
}

// MFAAuthenticateChallenge is a challenge for all MFA devices registered for a
// user.
message MFAAuthenticateChallenge {
    // U2F contains one U2FChallenge per U2F device registered for a
    // user. Each challenge is unique.
    repeated U2FChallenge U2F = 1;
    // TOTP is a challenge for all TOTP devices registered for a user. When
    // this field is set, any TOTP device a user has registered can be used to
    // respond.
    TOTPChallenge TOTP = 2;
    // WebauthnChallenge contains a Webauthn credential assertion used for
    // login/authentication ceremonies.
    // Credential assertions hold, among other information, a list of allowed
    // credentials for the ceremony (one for each U2F or Webauthn device
    // registered by the user).
    webauthn.CredentialAssertion WebauthnChallenge = 3;
}

// MFAAuthenticateResponse is a response to MFAAuthenticateChallenge using one
// of the MFA devices registered for a user.
message MFAAuthenticateResponse {
    oneof Response {
        U2FResponse U2F = 1;
        TOTPResponse TOTP = 2;
        webauthn.CredentialAssertionResponse Webauthn = 3;
    }
}

// U2FChallenge is a U2F auth challenge.
message U2FChallenge {
    string KeyHandle = 1;
    string Challenge = 2;
    string AppID = 3;
    string Version = 4;
}

// U2FResponse is a U2F auth challenge response.
message U2FResponse {
    string KeyHandle = 1;
    string ClientData = 2;
    string Signature = 3;
}

// TOTPChallenge is a challenge for all TOTP devices registered for a user.
message TOTPChallenge {
    // TOTP protocol has no challenge per se, but the user has to provide a
    // valid token in response. TOTPChallenge exists only to signal to the user
    // that TOTP MFA is supported, which means that the user has a TOTP device
    // registered.
}

// TOTPResponse is a response to TOTPChallenge.
message TOTPResponse { string Code = 1; }

// MFARegisterChallenge is a challenge for registering a new MFA device.
message MFARegisterChallenge {
    // Request depends on the type of the MFA device being registered.
    oneof Request {
        U2FRegisterChallenge U2F = 1;
        TOTPRegisterChallenge TOTP = 2;
        webauthn.CredentialCreation Webauthn = 3;
    }
}

// MFARegisterResponse is a response to MFARegisterChallenge.
message MFARegisterResponse {
    oneof Response {
        U2FRegisterResponse U2F = 1;
        TOTPRegisterResponse TOTP = 2;
        webauthn.CredentialCreationResponse Webauthn = 3;
    }
}

// U2FRegisterChallenge is a challenge for registering a new U2F device.
message U2FRegisterChallenge {
    string Challenge = 1;
    string AppID = 2;
    string Version = 3;
}

// U2FRegisterResponse is a response to U2FRegisterChallenge.
message U2FRegisterResponse {
    string RegistrationData = 1;
    string ClientData = 2;
}

// TOTPRegisterChallenge is a challenge for registering a new TOTP device.
message TOTPRegisterChallenge {
    // Secret is a secret shared by client and server to generate codes.
    string Secret = 1;
    // Issuer is the name of the Teleport cluster.
    string Issuer = 2;
    // PeriodSeconds is a period for TOTP code rotation, in seconds.
    uint32 PeriodSeconds = 3;
    // Algorithm is the TOTP hashing algorithm.
    string Algorithm = 4;
    // Digits is the number of digits in the TOTP code.
    uint32 Digits = 5;
    // Account is the account name for this user.
    string Account = 6;
    // QRCode is an optional field for the QR code in PNG format. Used to display a QR code
    // image in the UI.
    bytes QRCode = 7;
}

// TOTPRegisterResponse is a response to TOTPRegisterChallenge.
message TOTPRegisterResponse { string Code = 1; }

// AddMFADeviceRequest is a message sent by the client during AddMFADevice RPC.
message AddMFADeviceRequest {
    oneof Request {
        // Init describes the new device.
        AddMFADeviceRequestInit Init = 1;
        // ExistingMFAResponse is a response to ExistingMFAChallenge auth
        // challenge.
        MFAAuthenticateResponse ExistingMFAResponse = 2;
        // NewMFARegisterResponse is a response to NewMFARegisterChallenge
        // registration challenge.
        MFARegisterResponse NewMFARegisterResponse = 3;
    }
}

// AddMFADeviceResponse is a message sent by the server during AddMFADevice
// RPC.
message AddMFADeviceResponse {
    oneof Response {
        // ExistingMFAChallenge is an auth challenge using an existing MFA
        // device.
        MFAAuthenticateChallenge ExistingMFAChallenge = 1;
        // NewMFARegisterChallenge is a registration challenge for a new MFA
        // device.
        MFARegisterChallenge NewMFARegisterChallenge = 2;
        // Ack is a confirmation of successful device registration.
        AddMFADeviceResponseAck Ack = 3;
    }
}

// AddMFADeviceRequestInit describes the new MFA device.
message AddMFADeviceRequestInit {
    // DELETE IN 9.x, superseded by DeviceType (codingllama).
    // LegacyDeviceType is deprecated in favor of DeviceType.
    enum LegacyDeviceType {
        TOTP = 0;
        U2F = 1;
        Webauthn = 2;
    }
    // LegacyType is deprecated in favor of DeviceType.
    LegacyDeviceType LegacyType = 2 [ deprecated = true ];

    string DeviceName = 1;
    DeviceType DeviceType = 3;
}

// AddMFADeviceResponseAck is a confirmation of successful device registration.
message AddMFADeviceResponseAck { types.MFADevice Device = 1; }

// DeleteMFADeviceRequest is a message sent by the client during
// DeleteMFADevice RPC.
message DeleteMFADeviceRequest {
    oneof Request {
        // Init describes the device to be deleted.
        DeleteMFADeviceRequestInit Init = 1;
        // MFAResponse is a response to MFAChallenge auth challenge.
        MFAAuthenticateResponse MFAResponse = 2;
    }
}

message DeleteMFADeviceResponse {
    oneof Response {
        // MFAChallenge is an auth challenge using any existing MFA device.
        MFAAuthenticateChallenge MFAChallenge = 1;
        // Ack is a confirmation of successful device deletion.
        DeleteMFADeviceResponseAck Ack = 2;
    }
}

// DeleteMFADeviceRequestInit describes the device to be deleted.
message DeleteMFADeviceRequestInit {
    // DeviceName is an MFA device name or ID to be deleted.
    string DeviceName = 1;
}

// DeleteMFADeviceResponseAck is a confirmation of successful device deletion.
message DeleteMFADeviceResponseAck {}

// DeleteMFADeviceSyncRequest is a request to delete a MFA device (nonstream).
message DeleteMFADeviceSyncRequest {
    // TokenID is the ID of a user token that will be used to verify this request.
    // Token types accepted are:
    //   - Recovery approved token that is obtained with RPC VerifyAccountRecovery
    //   - Privilege token that is obtained with RPC CreatePrivilegeToken
    string TokenID = 1 [ (gogoproto.jsontag) = "token_id" ];
    // DeviceName is the name of the device to delete.
    string DeviceName = 2 [ (gogoproto.jsontag) = "device_name" ];
}

// AddMFADeviceSyncRequest is a request to add a MFA device (nonstream).
message AddMFADeviceSyncRequest {
    // TokenID is the ID of a user token that will be used to verify this request.
    // Token types accepted are:
    //  - Privilege token that is obtained with RPC CreatePrivilegeToken
    string TokenID = 1 [ (gogoproto.jsontag) = "token_id" ];
    // NewDeviceName is the name of a new mfa device.
    string NewDeviceName = 2 [ (gogoproto.jsontag) = "new_device_name,omitempty" ];
    // NewMFAResponse is a user's new mfa response to a mfa register challenge.
    MFARegisterResponse NewMFAResponse = 3 [ (gogoproto.jsontag) = "new_mfa_response,omitempty" ];
}

// AddMFADeviceSyncResponse is a response to AddMFADeviceSyncRequest.
message AddMFADeviceSyncResponse { types.MFADevice Device = 1 [ (gogoproto.jsontag) = "device" ]; }

// GetMFADeviceRequest is a request for MFA devices for the calling user.
message GetMFADevicesRequest {
    // TokenID is an optional field for the ID of a user token that will be used to
    // verify this request. Token is only required if an unauthenticated user wants to view their
    // list of devices eg: during account recovery process. An empty field implies the logged in
    // user wants to view their devices.
    // Token types accepted are:
    //  - Recovery approved token that is obtained after successful invocation of RPC
    //  VerifyAccountRecovery
    string TokenID = 1 [ (gogoproto.jsontag) = "token_id,omitempty" ];
}

// GetMFADeviceResponse is a response for GetMFADevices RPC.
message GetMFADevicesResponse { repeated types.MFADevice Devices = 1; }

// UserSingleUseCertsRequest is a request for a single-use user certificate.
message UserSingleUseCertsRequest {
    oneof Request {
        UserCertsRequest Init = 1;
        MFAAuthenticateResponse MFAResponse = 2;
    }
}

// UserSingleUseCertsResponse is a response with a single-use user certificate.
message UserSingleUseCertsResponse {
    oneof Response {
        MFAAuthenticateChallenge MFAChallenge = 1;
        SingleUseUserCert Cert = 2;
    }
}

// IsMFARequiredRequest is a request to check whether MFA is required to access
// the Target.
message IsMFARequiredRequest {
    oneof Target {
        // KubernetesCluster specifies the target kubernetes cluster.
        string KubernetesCluster = 1;
        // RouteToDatabase specifies the target database proxy name.
        RouteToDatabase Database = 2;
        // Node specifies the target SSH node.
        NodeLogin Node = 3;
    }
}

// StreamSessionEventsRequest is a request containing needed data to fetch a session recording.
message StreamSessionEventsRequest {
    // SessionID is the ID for a given session in an UUIDv4 format.
    string SessionID = 1;
    // StartIndex is the index of the event to resume the stream after.
    // A StartIndex of 0 creates a new stream.
    int32 StartIndex = 2;
}

// NodeLogin specifies an SSH node and OS login.
message NodeLogin {
    // Node can be node's hostname or UUID.
    string Node = 1;
    // Login is the OS login name.
    string Login = 2;
}

// IsMFARequiredResponse is a response for MFA requirement check.
message IsMFARequiredResponse { bool Required = 1; }

// SingleUseUserCert is a single-use user certificate, either SSH or TLS.
message SingleUseUserCert {
    oneof Cert {
        bytes SSH = 1;
        bytes TLS = 2;
    }
}

// Order specifies any ordering of some objects as returned in regards to some aspect
// of said objects which may be trivially ordered such as a timestamp.
enum Order {
    DESCENDING = 0;
    ASCENDING = 1;
}

message GetEventsRequest {
    // Namespace, if not set, defaults to 'default'
    string Namespace = 1;
    // StartDate is the oldest date of returned events
    google.protobuf.Timestamp StartDate = 2
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // EndDate is the newest date of returned events
    google.protobuf.Timestamp EndDate = 3
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // EventTypes is optional, if not set, returns all events
    repeated string EventTypes = 4;
    // Limit is the maximum amount of events returned
    int32 Limit = 5;
    // StartKey is used to resume a query in order to enable pagination.
    // If the previous response had LastKey set then this should be
    // set to its value. Otherwise leave empty.
    string StartKey = 6;
    // Order specifies an ascending or descending order of events.
    // A value of 0 means a descending order and a value of 1 means an ascending order.
    Order Order = 7;
}

message GetSessionEventsRequest {
    // StartDate is the oldest date of returned events
    google.protobuf.Timestamp StartDate = 1
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // EndDate is the newest date of returned events
    google.protobuf.Timestamp EndDate = 2
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // Limit is the maximum amount of events to retrieve.
    int32 Limit = 3;
    // StartKey is used to resume a query in order to enable pagination.
    // If the previous response had LastKey set then this should be
    // set to its value. Otherwise leave empty.
    string StartKey = 4;
    // Order specifies an ascending or descending order of events.
    // A value of 0 means a descending order and a value of 1 means an ascending order.
    Order Order = 5;
}

message Events {
    // Items is a list of typed gRPC formatted audit events.
    repeated events.OneOf Items = 1;
    // the key of the last event if the returned set did not contain all events found i.e limit <
    // actual amount. this is the key clients can supply in another API request to continue fetching
    // events from the previous last position
    string LastKey = 2;
}

// DELETE IN 10.0
message ListNodesRequest {
    // Namespace is the namespace of resources.
    string Namespace = 1;
    // Limit is the maximum amount of nodes to retrieve.
    int32 Limit = 2;
    // StartKey is used to start listing nodes from a specific spot. This should
    // be set to the previous NextKey value if using pagination, or left empty.
    string StartKey = 3;
    // Labels is a label-based matcher if non-empty.
    map<string, string> Labels = 4;
}

// DELETE IN 10.0
message ListNodesResponse {
    // Servers is a list of servers.
    repeated types.ServerV2 Servers = 1;
    // NextKey is the next Key to use as StartKey in a ListNodesRequest to continue
    // retrieving pages of nodes. If NextKey is empty, there are no more pages.
    string NextKey = 2;
}

message GetLocksRequest {
    // Targets is a list of targets. Every returned lock must match at least
    // one of the targets.
    repeated types.LockTarget Targets = 1;
    // InForceOnly specifies whether to return only those locks that are in force.
    bool InForceOnly = 2;
}

message GetLocksResponse {
    // Locks is a list of locks.
    repeated types.LockV2 Locks = 1;
}

message GetLockRequest {
    // Name is the name of the lock to get.
    string Name = 1;
}

message DeleteLockRequest {
    // Name is the name of the lock to delete.
    string Name = 1;
}

message ReplaceRemoteLocksRequest {
    // ClusterName identifies the cluster from which the locks originate.
    string ClusterName = 1;
    // Locks is a list of new remote locks to store.
    repeated types.LockV2 Locks = 2;
}

// GetWindowsDesktopServicesResponse contains all registered Windows desktop services.
message GetWindowsDesktopServicesResponse {
    // Servers is a list of Windows desktop services.
    repeated types.WindowsDesktopServiceV3 services = 1 [ (gogoproto.jsontag) = "services" ];
}

// DeleteWindowsDesktopServiceRequest is a request to delete a Windows desktop service.
message DeleteWindowsDesktopServiceRequest {
    // Name is the Windows desktop service name.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// GetWindowsDesktopsResponse contains all registered Windows desktop hosts.
message GetWindowsDesktopsResponse {
    // Servers is a list of Windows desktop hosts.
    repeated types.WindowsDesktopV3 Desktops = 1 [ (gogoproto.jsontag) = "desktops" ];
}

// GetWindowsDesktopRequest is a request for a single Windows desktop host.
message GetWindowsDesktopRequest {
    // Name is the name of the Windows desktop host.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// DeleteWindowsDesktopRequest is a request to delete a Windows desktop host.
message DeleteWindowsDesktopRequest {
    // Name is the name of the Windows desktop host.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// WindowsDesktopCertRequest is a request to generate a client certificate used
// for Windows RDP authentication.
message WindowsDesktopCertRequest {
    // CSR is the request to sign in PEM format.
    bytes CSR = 1;
    // CRLEndpoint is the address of the CRL for this certificate.
    string CRLEndpoint = 2;
    // TTL is the certificate validity period.
    int64 TTL = 3 [ (gogoproto.casttype) = "Duration" ];
}

// WindowsDesktopCertResponse contains the signed Windows RDP certificate.
message WindowsDesktopCertResponse {
    // Cert is the signed certificate in PEM format.
    bytes Cert = 1;
}

// CertAuthorityRequest is a request that identifies a Teleport CA.
message CertAuthorityRequest {
    // Type is either user or host certificate authority.
    string Type = 1
        [ (gogoproto.casttype) = "github.com/gravitational/teleport/api/types.CertAuthType" ];
}

// CRL is the X.509 Certificate Revocation List.
message CRL {
    // CRL is the Certificate Revocation List in DER format.
    bytes CRL = 1;
}

// ChangeUserAuthenticationRequest defines a request to change a password and if enabled
// also adds a new MFA device from a user reset or from a new user invite. After successful changing
// of authentications a new web session is created. Users may also receive new recovery codes if the
// user meets the requirement to receive recovery codes. If a user previously had recovery codes,
// the previous codes become invalid as it is replaced with newly generated ones.
message ChangeUserAuthenticationRequest {
    // TokenID is the ID of a reset or invite token.
    // The token allows the user to change their credentials without being logged
    // in.
    string TokenID = 1 [ (gogoproto.jsontag) = "token_id" ];
    // NewPassword is the new password in plain text.
    bytes NewPassword = 2 [ (gogoproto.jsontag) = "new_password" ];
    // NewMFARegisterResponse is a MFA response to a MFA authentication challenge.
    // This field can be empty which implies that user chose not to add a new device (allowable when
    // cluster settings enable optional second factor), or cluster settings disabled second factor.
    MFARegisterResponse NewMFARegisterResponse = 3
        [ (gogoproto.jsontag) = "new_mfa_register_response,omitempty" ];
}

// ChangeUserAuthenticationResponse is a response for ChangeUserAuthentication.
message ChangeUserAuthenticationResponse {
    // WebSession is a user's web sesssion created from successful changing of password.
    types.WebSessionV2 WebSession = 1 [ (gogoproto.jsontag) = "web_session" ];
    // Recovery holds user's new recovery related fields. Previous recovery codes become invalid.
    // This field can be empty if a user does not meet the following
    // requirements to receive recovery codes:
    //  - cloud feature is enabled
    //  - username is in valid email format
    RecoveryCodes Recovery = 2 [ (gogoproto.jsontag) = "recovery,omitempty" ];
}

// StartAccountRecoveryRequest defines a request to create a recovery start token for a user who is
// allowed to recover their account. The tokens ID is used as part of a URL that will be emailed to
// the user (not done in this request). Represents step 1 of the account recovery process, next step
// is RPC VerifyAccountRecovery.
message StartAccountRecoveryRequest {
    // Username is the requesting user. The username must meet the following requirements to be
    // allowed to recover their account:
    //  - cloud feature is enabled
    //  - username is in valid email format
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    // RecoveryCode is one of the user's recovery code in plain text.
    bytes RecoveryCode = 2 [ (gogoproto.jsontag) = "recovery_code" ];
    // RecoverType defines what type of authentication user needs to recover.
    types.UserTokenUsage RecoverType = 3 [ (gogoproto.jsontag) = "recover_type" ];
}

// VerifyAccountRecoveryRequest is a request to create a recovery approved token that allows users
// to perform protected actions while not logged in. Represents step 2 of the account recovery
// process after RPC StartAccountRecovery, next step is RPC CompleteAccountRecovery.
message VerifyAccountRecoveryRequest {
    // RecoveryStartTokenID is the ID of a recovery start token that's required to verify this
    // request.
    string RecoveryStartTokenID = 1 [ (gogoproto.jsontag) = "recovery_start_token_id" ];
    // Username is the name of the user that the token belongs to, used to verify that this name
    // is the same as defined in token for use with emails.
    string Username = 2 [ (gogoproto.jsontag) = "username" ];
    // AuthnCred is the authentication cred that needs to be verified.
    oneof AuthnCred {
        // Password is users password in plain text.
        bytes Password = 3 [ (gogoproto.jsontag) = "password,omitempty" ];
        // MFAAuthenticateResponse is a response to a MFA challenge.
        MFAAuthenticateResponse MFAAuthenticateResponse = 4
            [ (gogoproto.jsontag) = "mfa_authenticate_response,omitempty" ];
    }
}

// CompleteAccountRecoveryRequest is a request to set either a new password or
// add a new mfa device, allowing the user to regain access to their account with the new
// credentials. Represents the last step in the account recovery process after RPC's
// StartAccountRecovery and VerifyAccountRecovery.
message CompleteAccountRecoveryRequest {
    // RecoveryApprovedTokenID is the ID of a recovery approved token that's required to verify this
    // request.
    string RecoveryApprovedTokenID = 1 [ (gogoproto.jsontag) = "recovery_approved_token_id" ];
    // NewDeviceName is the name of a new mfa device.
    // Optional if NewPassword is used.
    string NewDeviceName = 2 [ (gogoproto.jsontag) = "new_device_name,omitempty" ];
    // NewAuthnCred contains the new authentication credential.
    oneof NewAuthnCred {
        // NewPassword is user's new password in plain text.
        bytes NewPassword = 3 [ (gogoproto.jsontag) = "new_password,omitempty" ];
        // NewMFAResponse is a user's new mfa response to a mfa register challenge.
        MFARegisterResponse NewMFAResponse = 4
            [ (gogoproto.jsontag) = "new_mfa_response,omitempty" ];
    }
}

// RecoveryCodes describes account recovery fields. Used as a RPC
// response or as part of a RPC response that requires any of these fields.
message RecoveryCodes {
    // Codes holds the list of recovery phrase words.
    // Field is only used when new recovery codes are generated and returned to user.
    repeated string Codes = 1 [ (gogoproto.jsontag) = "codes,omitempty" ];
    // Created is the date the recovery codes were created.
    google.protobuf.Timestamp Created = 2 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "created"
    ];
}

// CreateAccountRecoveryCodesRequest is a request to create new set of recovery codes for a user,
// replacing and invalidating any previously existing codes. Recovery codes can only be given to
// users who meet the following requirements:
//  - cloud feature is enabled
//  - username is in valid email format
message CreateAccountRecoveryCodesRequest {
    // TokenID is the ID of a user token that will be used to verify this request.
    // Token types accepted are:
    //   - Recovery approved token that is obtained with RPC VerifyAccountRecovery
    //   - Privilege token that is obtained with RPC CreatePrivilegeToken
    string TokenID = 1 [ (gogoproto.jsontag) = "token_id" ];
}

// GetAccountRecoveryTokenRequest is a request to return a user token resource after verifying that
// the token in the request is not expired and is of the recovery kind.
message GetAccountRecoveryTokenRequest {
    // RecoveryTokenID is the ID of a recovery token to verify.
    // Recovery tokens are obtained with RPC StartAccountRecovery or VerifyAccountRecovery.
    string RecoveryTokenID = 1 [ (gogoproto.jsontag) = "recovery_token_id" ];
}

// GetAccountRecoveryCodesRequest is a request to return the user in context their
// recovery codes. This request will not return any secrets (the values of recovery codes).
message GetAccountRecoveryCodesRequest {}

// UserCredentials describes fields for a user's username and password.
message UserCredentials {
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    bytes Password = 2 [ (gogoproto.jsontag) = "password" ];
}

// CreateAuthenticateChallengeRequest is a request for creating MFA authentication challenges for a
// users mfa devices.
message CreateAuthenticateChallengeRequest {
    // Request defines how the request will be verified before creating challenges.
    // This field can be empty, which implies the request is to create challenges for the
    // user in context (logged in user).
    oneof Request {
        // UserCredentials verifies request with username and password. Used with logins or
        // when the logged in user wants to change their password.
        UserCredentials UserCredentials = 1 [ (gogoproto.jsontag) = "user_credentials,omitempty" ];
        // RecoveryStartTokenID is the ID of a recovery start token obtained with RPC
        // StartAccountRecovery. This token allows a user to retrieve their MFA challenges for RPC
        // VerifyAccountRecovery (step 2 of the recovery process after RPC StartAccountRecovery).
        string RecoveryStartTokenID = 2
            [ (gogoproto.jsontag) = "recovery_start_token_id,omitempty" ];
    }
}

// CreatePrivilegeTokenRequest defines a request to obtain a privilege token.
// Only logged in users are allowed to obtain privilege tokens after they have successfully
// re-authenticated with their second factor.
message CreatePrivilegeTokenRequest {
    // ExistingMFAResponse is a response to a challenge from the user's existing MFA devices.
    // This field can be empty to create a UserTokenTypePrivilegeException token that
    // allows a user to bypass second factor re-authentication eg: allowing a user
    // with no mfa devices to add a device without re-authenticating.
    MFAAuthenticateResponse ExistingMFAResponse = 1
        [ (gogoproto.jsontag) = "existing_mfa_response,omitempty" ];
}

// CreateRegisterChallengeRequest is a request for creating MFA register challenge for a
// new MFA device.
message CreateRegisterChallengeRequest {
    // TokenID is the ID of a user token that will be used to verify this request.
    // All user token types are accepted except UserTokenTypeRecoveryStart.
    string TokenID = 1 [ (gogoproto.jsontag) = "token_id" ];
    // DeviceType is the type of MFA device to make a register challenge for.
    DeviceType DeviceType = 2 [ (gogoproto.jsontag) = "device_type" ];
}

// PaginatedResource represents one of the supported resources.
message PaginatedResource {
    // Resource is the resource itself.
    oneof resource {
        // DatabaseServer represents a DatabaseServer resource.
        types.DatabaseServerV3 DatabaseServer = 1;
        // AppServer represents a AppServer resource.
        types.AppServerV3 AppServer = 2;
        // Nodes represents a Server resource.
        types.ServerV2 Node = 3 [ (gogoproto.jsontag) = "node,omitempty" ];
        // KubeService represents a KubernetesService resource.
        types.ServerV2 KubeService = 4 [ (gogoproto.jsontag) = "kube_service,omitempty" ];
    }
}

// ListResourcesRequest defines a request to retrieve resources paginated. Only
// one type of resource can be retrieved per request.
message ListResourcesRequest {
    // ResourceType is the resource that is going to be retrieved.
    string ResourceType = 1 [ (gogoproto.jsontag) = "resource_type,omitempty" ];
    // Namespace is the namespace of resources.
    string Namespace = 2 [ (gogoproto.jsontag) = "namespace,omitempty" ];
    // Limit is the maximum amount of resources to retrieve.
    int32 Limit = 3 [ (gogoproto.jsontag) = "limit,omitempty" ];
    // StartKey is used to start listing resources from a specific spot. It
    // should be set to the previous NextKey value if using pagination, or
    // left empty.
    string StartKey = 4 [ (gogoproto.jsontag) = "start_key,omitempty" ];
    // Labels is a label-based matcher if non-empty.
    map<string, string> Labels = 5 [ (gogoproto.jsontag) = "labels,omitempty" ];
    // PredicateExpression defines boolean conditions that will be matched against the resource.
    string PredicateExpression = 6 [ (gogoproto.jsontag) = "predicate_expression,omitempty" ];
    // SearchKeywords is a list of search keywords to match against resource field values.
    repeated string SearchKeywords = 7 [ (gogoproto.jsontag) = "search_keywords,omitempty" ];
}

// ListResourceResponse response of ListResources.
message ListResourcesResponse {
    // Resources is a list of resource.
    repeated PaginatedResource Resources = 1 [ (gogoproto.jsontag) = "resources,omitempty" ];
    // NextKey is the next Key to use as StartKey in a ListResourcesRequest to
    // continue retrieving pages of resource. If NextKey is empty, there are no
    // more pages.
    string NextKey = 2 [ (gogoproto.jsontag) = "next_key,omitempty" ];
}

// CreateSessionTrackerRequest is a request to create a new session.
//
// This is not specific to any session type. Relevant fields should be set for a given session type.
message CreateSessionTrackerRequest {
    // Namespace is a session namespace, separating sessions from each other.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace,omitempty" ];

    // Type describes what type of session this is.
    string Type = 2 [ (gogoproto.jsontag) = "type,omitempty" ];

    // Reason is an arbitrary string that may be used to describe the session and/or it's
    // purpose.
    string Reason = 3 [ (gogoproto.jsontag) = "reason,omitempty" ];

    // Invited is a list of invited users, this field is interpreted by different
    // clients on a best-effort basis and used for delivering notifications to invited users.
    repeated string Invited = 4 [ (gogoproto.jsontag) = "invited,omitempty" ];

    // Hostname is the address of the target this session is connected to.
    string Hostname = 5 [ (gogoproto.jsontag) = "target_hostname,omitempty" ];

    // Address is the address of the target this session is connected to.
    string Address = 6 [ (gogoproto.jsontag) = "target_address,omitempty" ];

    // ClusterName is the name of cluster that this session belongs to.
    string ClusterName = 7 [ (gogoproto.jsontag) = "cluster_name,omitempty" ];

    // Login is the local login/user on the target used by the session.
    string Login = 8 [ (gogoproto.jsontag) = "login,omitempty" ];

    // Initiator is the participant that initiated the session.
    types.Participant Initiator = 9 [ (gogoproto.jsontag) = "initiator,omitempty" ];

    // Expires encodes the time at which this session expires and becomes invalid.
    google.protobuf.Timestamp Expires = 10 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires,omitempty"
    ];

    // The Kubernetes cluster this session belongs to.
    string KubernetesCluster = 11 [ (gogoproto.jsontag) = "kubernetes_cluster,omitempty" ];

    // HostUser is the user regarded as the owner of this session, RBAC checks are performed
    // against the require policies of this user.
    string HostUser = 12 [ (gogoproto.jsontag) = "host_user,omitempty" ];

    // ID is the ID of the session.
    string ID = 13 [ (gogoproto.jsontag) = "id,omitempty" ];

    // HostPolicies is a list of RBAC policy sets held by the host user at the time of session
    // creation.
    repeated types.SessionTrackerPolicySet HostPolicies = 14
        [ (gogoproto.jsontag) = "host_policies,omitempty" ];
}

// GetSessionTrackerRequest is a request to fetch a session resource.
message GetSessionTrackerRequest {
    // SessionID is unique identifier of this session.
    string SessionID = 1 [ (gogoproto.jsontag) = "session_id,omitempty" ];
}

// RemoveSessionTrackerRequest is a request to remove a session.
message RemoveSessionTrackerRequest {
    // SessionID is unique identifier of this session.
    string SessionID = 1 [ (gogoproto.jsontag) = "session_id,omitempty" ];
}

message SessionTrackerUpdateState {
    // State is the new state of the session tracker.
    types.SessionState State = 2 [ (gogoproto.jsontag) = "state,omitempty" ];
}

message SessionTrackerAddParticipant {
    // Participant is the participant to be added to the session.
    types.Participant Participant = 2 [ (gogoproto.jsontag) = "participant,omitempty" ];
}

message SessionTrackerRemoveParticipant {
    // ParticipantID is unique identifier of the participant.
    string ParticipantID = 2 [ (gogoproto.jsontag) = "participant_id,omitempty" ];
}

// UpdateSessionTrackerRequest is a request to update some state of a session.
message UpdateSessionTrackerRequest {
    // SessionID is unique identifier of this session.
    string SessionID = 1 [ (gogoproto.jsontag) = "session_id,omitempty" ];

    oneof Update {
        SessionTrackerUpdateState UpdateState = 2
            [ (gogoproto.jsontag) = "update_state,omitempty" ];
        SessionTrackerAddParticipant AddParticipant = 3
            [ (gogoproto.jsontag) = "add_participant,omitempty" ];
        SessionTrackerRemoveParticipant RemoveParticipant = 4
            [ (gogoproto.jsontag) = "remove_participant,omitempty" ];
    }
}

// PresenceMFAChallengeRequest is a request for a presence MFA challenge.
message PresenceMFAChallengeRequest {
    // SessionID is unique identifier of the session you want to request presence for.
    string SessionID = 1 [ (gogoproto.jsontag) = "session_id,omitempty" ];
}

// PresenceMFAChallengeSend is a presence challenge request or response.
message PresenceMFAChallengeSend {
    oneof Request {
        PresenceMFAChallengeRequest ChallengeRequest = 1;
        MFAAuthenticateResponse ChallengeResponse = 2;
    }
}

// AuthService is authentication/authorization service implementation
service AuthService {
    // MaintainSessionPresence establishes a channel used to continously verify the presence for a
    // session.
    rpc MaintainSessionPresence(stream PresenceMFAChallengeSend)
        returns (stream MFAAuthenticateChallenge);

    // CreateSessionTracker creates a new session tracker resource.
    rpc CreateSessionTracker(CreateSessionTrackerRequest) returns (types.SessionTrackerV1);

    // GetSessionTrackerRequest fetches a session tracker resource.
    rpc GetSessionTracker(GetSessionTrackerRequest) returns (types.SessionTrackerV1);

    // GetActiveSessionTrackers returns a list of active sessions.
    rpc GetActiveSessionTrackers(google.protobuf.Empty) returns (stream types.SessionTrackerV1);

    // RemoveSessionTracker removes a session tracker resource.
    rpc RemoveSessionTracker(RemoveSessionTrackerRequest) returns (google.protobuf.Empty);

    // UpdateSessionTracker updates some state of a session tracker.
    rpc UpdateSessionTracker(UpdateSessionTrackerRequest) returns (google.protobuf.Empty);

    // SendKeepAlives allows node to send a stream of keep alive requests
    rpc SendKeepAlives(stream types.KeepAlive) returns (google.protobuf.Empty);
    // WatchEvents returns a new stream of cluster events
    rpc WatchEvents(Watch) returns (stream Event);

    // GetNode retrieves a node described by the given request.
    rpc GetNode(types.ResourceInNamespaceRequest) returns (types.ServerV2);
    // GetNodes retrieves all nodes.
    // DELETE IN 8.0.0 in favor of ListNodes
    rpc GetNodes(types.ResourcesInNamespaceRequest) returns (types.ServerV2List);
    // ListNodes retrieves a paginated list of nodes.
    // DELETE IN 10.0. Deprecated, use ListResources.
    rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) { option deprecated = true; };
    // UpsertNode upserts a node in a backend.
    rpc UpsertNode(types.ServerV2) returns (types.KeepAlive);
    // DeleteNode deletes an existing node in a backend described by the given request.
    rpc DeleteNode(types.ResourceInNamespaceRequest) returns (google.protobuf.Empty);
    // DeleteAllNodes deletes all nodes.
    rpc DeleteAllNodes(types.ResourcesInNamespaceRequest) returns (google.protobuf.Empty);

    // GenerateUserCerts generates a set of user certificates.
    rpc GenerateUserCerts(UserCertsRequest) returns (Certs);
    // GenerateHostCerts generates a set of host certificates.
    rpc GenerateHostCerts(HostCertsRequest) returns (Certs);
    // GenerateUserSingleUseCerts generates a set of single-use user
    // certificates.
    rpc GenerateUserSingleUseCerts(stream UserSingleUseCertsRequest)
        returns (stream UserSingleUseCertsResponse);
    // IsMFARequired checks whether MFA is required to access the specified
    // target.
    rpc IsMFARequired(IsMFARequiredRequest) returns (IsMFARequiredResponse);

    // GetAccessRequests gets all pending access requests.
    rpc GetAccessRequests(types.AccessRequestFilter) returns (AccessRequests);
    // CreateAccessRequest creates a new access request.
    rpc CreateAccessRequest(types.AccessRequestV3) returns (google.protobuf.Empty);
    // DeleteAccessRequest deletes an access request.
    rpc DeleteAccessRequest(RequestID) returns (google.protobuf.Empty);
    // SetAccessRequestState sets the state of an access request.
    rpc SetAccessRequestState(RequestStateSetter) returns (google.protobuf.Empty);
    // SubmitAccessReview applies a review to a request and returns the post-application state.
    rpc SubmitAccessReview(types.AccessReviewSubmission) returns (types.AccessRequestV3);
    // GetAccessCapabilities requests the access capabilites of a user.
    rpc GetAccessCapabilities(types.AccessCapabilitiesRequest) returns (types.AccessCapabilities);

    // GetPluginData gets all plugin data matching the supplied filter.
    rpc GetPluginData(types.PluginDataFilter) returns (PluginDataSeq);
    // UpdatePluginData updates a plugin's resource-specific datastore.
    rpc UpdatePluginData(types.PluginDataUpdateParams) returns (google.protobuf.Empty);
    // Ping gets basic info about the auth server. This method is intended
    // to mimic the behavior of the proxy's Ping method, and may be used by
    // clients for verification or configuration on startup.
    rpc Ping(PingRequest) returns (PingResponse);

    // RotateResetPasswordTokenSecrets rotates token secrets for a given tokenID.
    // DELETE IN: 9.0.0 in favor of CreateRegisterChallenge.
    rpc RotateResetPasswordTokenSecrets(RotateUserTokenSecretsRequest)
        returns (types.UserTokenSecretsV3);
    // GetResetPasswordToken returns a reset password token.
    rpc GetResetPasswordToken(GetResetPasswordTokenRequest) returns (types.UserTokenV3);
    // CreateResetPasswordToken resets users current password and second factors and creates a reset
    // password token.
    rpc CreateResetPasswordToken(CreateResetPasswordTokenRequest) returns (types.UserTokenV3);

    // GetUser gets a user resource by name.
    rpc GetUser(GetUserRequest) returns (types.UserV2);
    // GetUsers gets all current user resources.
    rpc GetUsers(GetUsersRequest) returns (stream types.UserV2);
    // CreateUser inserts a new user entry to a backend.
    rpc CreateUser(types.UserV2) returns (google.protobuf.Empty);
    // UpdateUser updates an existing user in a backend.
    rpc UpdateUser(types.UserV2) returns (google.protobuf.Empty);
    // DeleteUser deletes an existing user in a backend by username.
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

    // AcquireSemaphore acquires lease with requested resources from semaphore.
    rpc AcquireSemaphore(types.AcquireSemaphoreRequest) returns (types.SemaphoreLease);
    // KeepAliveSemaphoreLease updates semaphore lease.
    rpc KeepAliveSemaphoreLease(types.SemaphoreLease) returns (google.protobuf.Empty);
    // CancelSemaphoreLease cancels semaphore lease early.
    rpc CancelSemaphoreLease(types.SemaphoreLease) returns (google.protobuf.Empty);
    // GetSemaphores returns a list of all semaphores matching the supplied filter.
    rpc GetSemaphores(types.SemaphoreFilter) returns (Semaphores);
    // DeleteSemaphore deletes a semaphore matching the supplied filter.
    rpc DeleteSemaphore(types.SemaphoreFilter) returns (google.protobuf.Empty);

    // EmitAuditEvent emits audit event
    rpc EmitAuditEvent(events.OneOf) returns (google.protobuf.Empty);
    // CreateAuditStream creates or resumes audit events streams
    rpc CreateAuditStream(stream AuditStreamRequest) returns (stream events.StreamStatus);

    // GetApplicationServers gets all application servers.
    // DELETE IN 10.0. Deprecated, use ListResources.
    rpc GetApplicationServers(GetApplicationServersRequest)
        returns (GetApplicationServersResponse) {
        option deprecated = true;
    };
    // UpsertApplicationServer adds an application server.
    rpc UpsertApplicationServer(UpsertApplicationServerRequest) returns (types.KeepAlive);
    // DeleteApplicationServer removes an application server.
    rpc DeleteApplicationServer(DeleteApplicationServerRequest) returns (google.protobuf.Empty);
    // DeleteAllApplicationServers removes all application servers.
    rpc DeleteAllApplicationServers(DeleteAllApplicationServersRequest)
        returns (google.protobuf.Empty);

    // GetAppServers gets all application servers.
    //
    // DELETE IN 9.0. Deprecated, use GetApplicationServers.
    rpc GetAppServers(GetAppServersRequest) returns (GetAppServersResponse) {
        option deprecated = true;
    };
    // UpsertAppServer adds an application server.
    //
    // DELETE IN 9.0. Deprecated, use UpsertApplicationServer.
    rpc UpsertAppServer(UpsertAppServerRequest) returns (types.KeepAlive) {
        option deprecated = true;
    };
    // DeleteAppServer removes an application server.
    //
    // DELETE IN 9.0. Deprecated, use DeleteApplicationServer.
    rpc DeleteAppServer(DeleteAppServerRequest) returns (google.protobuf.Empty) {
        option deprecated = true;
    };
    // DeleteAllAppServers removes all application servers.
    //
    // DELETE IN 9.0. Deprecated, use DeleteAllApplicationServers.
    rpc DeleteAllAppServers(DeleteAllAppServersRequest) returns (google.protobuf.Empty) {
        option deprecated = true;
    };

    // GenerateAppToken will generate a JWT token for application access.
    rpc GenerateAppToken(GenerateAppTokenRequest) returns (GenerateAppTokenResponse);

    // GetAppSession gets an application web session.
    rpc GetAppSession(GetAppSessionRequest) returns (GetAppSessionResponse);
    // GetAppSessions gets all application web sessions.
    rpc GetAppSessions(google.protobuf.Empty) returns (GetAppSessionsResponse);
    // CreateAppSession creates an application web session. Application web
    // sessions represent a browser session the client holds.
    rpc CreateAppSession(CreateAppSessionRequest) returns (CreateAppSessionResponse);
    // DeleteAppSession removes an application web session.
    rpc DeleteAppSession(DeleteAppSessionRequest) returns (google.protobuf.Empty);
    // DeleteAllAppSessions removes all application web sessions.
    rpc DeleteAllAppSessions(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetWebSession gets a web session.
    rpc GetWebSession(types.GetWebSessionRequest) returns (GetWebSessionResponse);
    // GetWebSessions gets all web sessions.
    rpc GetWebSessions(google.protobuf.Empty) returns (GetWebSessionsResponse);
    // DeleteWebSession deletes a web session.
    rpc DeleteWebSession(types.DeleteWebSessionRequest) returns (google.protobuf.Empty);
    // DeleteAllWebSessions deletes all web sessions.
    rpc DeleteAllWebSessions(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetWebToken gets a web token.
    rpc GetWebToken(types.GetWebTokenRequest) returns (GetWebTokenResponse);
    // GetWebTokens gets all web tokens.
    rpc GetWebTokens(google.protobuf.Empty) returns (GetWebTokensResponse);
    // DeleteWebToken deletes a web token.
    rpc DeleteWebToken(types.DeleteWebTokenRequest) returns (google.protobuf.Empty);
    // DeleteAllWebTokens deletes all web tokens.
    rpc DeleteAllWebTokens(google.protobuf.Empty) returns (google.protobuf.Empty);

    // UpdateRemoteCluster updates remote cluster
    rpc UpdateRemoteCluster(types.RemoteClusterV3) returns (google.protobuf.Empty);

    // GetKubeServices gets all kubernetes services.
    // DELETE IN 10.0. Deprecated, use ListResources.
    rpc GetKubeServices(GetKubeServicesRequest) returns (GetKubeServicesResponse) {
        option deprecated = true;
    };
    // UpsertKubeService adds or updates a kubernetes service.
    // DELETE IN 11.0. Deprecated, use UpsertKubeServiceV2
    rpc UpsertKubeService(UpsertKubeServiceRequest) returns (google.protobuf.Empty) {
        option deprecated = true;
    };
    // UpsertKubeServiceV2 adds or updates a kubernetes service.
    rpc UpsertKubeServiceV2(UpsertKubeServiceRequest) returns (types.KeepAlive);
    // DeleteKubeService removes a kubernetes service.
    rpc DeleteKubeService(DeleteKubeServiceRequest) returns (google.protobuf.Empty);
    // DeleteAllKubeServices removes all kubernetes services.
    rpc DeleteAllKubeServices(DeleteAllKubeServicesRequest) returns (google.protobuf.Empty);

    // GetDatabaseServers returns all registered database proxy servers.
    // DELETE IN 10.0. Deprecated, use ListResources.
    rpc GetDatabaseServers(GetDatabaseServersRequest) returns (GetDatabaseServersResponse) {
        option deprecated = true;
    };
    // UpsertDatabaseServer registers a new database proxy server.
    rpc UpsertDatabaseServer(UpsertDatabaseServerRequest) returns (types.KeepAlive);
    // DeleteDatabaseServer removes the specified database proxy server.
    rpc DeleteDatabaseServer(DeleteDatabaseServerRequest) returns (google.protobuf.Empty);
    // DeleteAllDatabaseServers removes all registered database proxy servers.
    rpc DeleteAllDatabaseServers(DeleteAllDatabaseServersRequest) returns (google.protobuf.Empty);

    // SignDatabaseCSR generates client certificate used by proxy to
    // authenticate with a remote database service.
    rpc SignDatabaseCSR(DatabaseCSRRequest) returns (DatabaseCSRResponse);
    // GenerateDatabaseCert generates client certificate used by a database
    // service to authenticate with the database instance.
    rpc GenerateDatabaseCert(DatabaseCertRequest) returns (DatabaseCertResponse);

    // GetRole retrieves a role described by the given request.
    rpc GetRole(GetRoleRequest) returns (types.RoleV5);
    // GetRole retrieves all roles.
    rpc GetRoles(google.protobuf.Empty) returns (GetRolesResponse);
    // UpsertRole upserts a role in a backend.
    rpc UpsertRole(types.RoleV5) returns (google.protobuf.Empty);
    // DeleteRole deletes an existing role in a backend described by the given request.
    rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty);

    // AddMFADevice adds an MFA device for the user calling this RPC.
    //
    // The RPC is streaming both ways and the message sequence is:
    // (-> means client-to-server, <- means server-to-client)
    // -> Init
    // <- ExistingMFAChallenge
    // -> ExistingMFAResponse
    // <- NewMFARegisterChallenge
    // -> NewMFARegisterResponse
    // <- Ack
    rpc AddMFADevice(stream AddMFADeviceRequest) returns (stream AddMFADeviceResponse);
    // DeleteMFADevice deletes an MFA device for the user calling this RPC.
    //
    // The RPC is streaming both ways and the message sequence is:
    // (-> means client-to-server, <- means server-to-client)
    // -> Init
    // <- MFAChallenge
    // -> MFAResponse
    // <- Ack
    rpc DeleteMFADevice(stream DeleteMFADeviceRequest) returns (stream DeleteMFADeviceResponse);
    // AddMFADeviceSync adds a new MFA device (nonstream).
    rpc AddMFADeviceSync(AddMFADeviceSyncRequest) returns (AddMFADeviceSyncResponse);
    // DeleteMFADeviceSync deletes a users MFA device (nonstream).
    rpc DeleteMFADeviceSync(DeleteMFADeviceSyncRequest) returns (google.protobuf.Empty);
    // GetMFADevices returns all MFA devices registered for the user calling
    // this RPC.
    rpc GetMFADevices(GetMFADevicesRequest) returns (GetMFADevicesResponse);
    // CreateAuthenticateChallenge creates and returns MFA challenges for a users registered MFA
    // devices.
    rpc CreateAuthenticateChallenge(CreateAuthenticateChallengeRequest)
        returns (MFAAuthenticateChallenge);
    // CreateRegisterChallenge creates and returns MFA register challenge for a new MFA device.
    rpc CreateRegisterChallenge(CreateRegisterChallengeRequest) returns (MFARegisterChallenge);

    // GetOIDCConnector gets an OIDC connector resource by name.
    rpc GetOIDCConnector(types.ResourceWithSecretsRequest) returns (types.OIDCConnectorV3);
    // GetOIDCConnectors gets all current OIDC connector resources.
    rpc GetOIDCConnectors(types.ResourcesWithSecretsRequest) returns (types.OIDCConnectorV3List);
    // UpsertOIDCConnector upserts an OIDC connector in a backend.
    rpc UpsertOIDCConnector(types.OIDCConnectorV3) returns (google.protobuf.Empty);
    // DeleteOIDCConnector deletes an existing OIDC connector in a backend by name.
    rpc DeleteOIDCConnector(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetSAMLConnector gets a SAML connector resource by name.
    rpc GetSAMLConnector(types.ResourceWithSecretsRequest) returns (types.SAMLConnectorV2);
    // GetSAMLConnectors gets all current SAML connector resources.
    rpc GetSAMLConnectors(types.ResourcesWithSecretsRequest) returns (types.SAMLConnectorV2List);
    // UpsertSAMLConnector upserts a SAML connector in a backend.
    rpc UpsertSAMLConnector(types.SAMLConnectorV2) returns (google.protobuf.Empty);
    // DeleteSAMLConnector deletes an existing SAML connector in a backend by name.
    rpc DeleteSAMLConnector(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetGithubConnector gets a Github connector resource by name.
    rpc GetGithubConnector(types.ResourceWithSecretsRequest) returns (types.GithubConnectorV3);
    // GetGithubConnectors gets all current Github connector resources.
    rpc GetGithubConnectors(types.ResourcesWithSecretsRequest)
        returns (types.GithubConnectorV3List);
    // UpsertGithubConnector upserts a Github connector in a backend.
    rpc UpsertGithubConnector(types.GithubConnectorV3) returns (google.protobuf.Empty);
    // DeleteGithubConnector deletes an existing Github connector in a backend by name.
    rpc DeleteGithubConnector(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetTrustedCluster gets a Trusted Cluster resource by name.
    rpc GetTrustedCluster(types.ResourceRequest) returns (types.TrustedClusterV2);
    // GetTrustedClusters gets all current Trusted Cluster resources.
    rpc GetTrustedClusters(google.protobuf.Empty) returns (types.TrustedClusterV2List);
    // UpsertTrustedCluster upserts a Trusted Cluster in a backend.
    rpc UpsertTrustedCluster(types.TrustedClusterV2) returns (types.TrustedClusterV2);
    // DeleteTrustedCluster deletes an existing Trusted Cluster in a backend by name.
    rpc DeleteTrustedCluster(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetToken retrieves a token described by the given request.
    rpc GetToken(types.ResourceRequest) returns (types.ProvisionTokenV2);
    // GetToken retrieves all tokens.
    rpc GetTokens(google.protobuf.Empty) returns (types.ProvisionTokenV2List);
    // UpsertToken upserts a token in a backend.
    rpc UpsertToken(types.ProvisionTokenV2) returns (google.protobuf.Empty);
    // DeleteToken deletes an existing token in a backend described by the given request.
    rpc DeleteToken(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetClusterAuditConfig gets cluster audit configuration.
    rpc GetClusterAuditConfig(google.protobuf.Empty) returns (types.ClusterAuditConfigV2);

    // GetClusterNetworkingConfig gets cluster networking configuration.
    rpc GetClusterNetworkingConfig(google.protobuf.Empty) returns (types.ClusterNetworkingConfigV2);
    // SetClusterNetworkingConfig sets cluster networking configuration.
    rpc SetClusterNetworkingConfig(types.ClusterNetworkingConfigV2) returns (google.protobuf.Empty);
    // ResetClusterNetworkingConfig resets cluster networking configuration to defaults.
    rpc ResetClusterNetworkingConfig(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetSessionRecordingConfig gets session recording configuration.
    rpc GetSessionRecordingConfig(google.protobuf.Empty) returns (types.SessionRecordingConfigV2);
    // SetSessionRecordingConfig sets session recording configuration.
    rpc SetSessionRecordingConfig(types.SessionRecordingConfigV2) returns (google.protobuf.Empty);
    // ResetSessionRecordingConfig resets session recording configuration to defaults.
    rpc ResetSessionRecordingConfig(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetAuthPreference gets cluster auth preference.
    rpc GetAuthPreference(google.protobuf.Empty) returns (types.AuthPreferenceV2);
    // SetAuthPreference sets cluster auth preference.
    rpc SetAuthPreference(types.AuthPreferenceV2) returns (google.protobuf.Empty);
    // ResetAuthPreference resets cluster auth preference to defaults.
    rpc ResetAuthPreference(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetEvents gets events from the audit log.
    rpc GetEvents(GetEventsRequest) returns (Events);
    // GetSessionEvents gets completed session events from the audit log.
    rpc GetSessionEvents(GetSessionEventsRequest) returns (Events);

    // GetLock gets a lock by name.
    rpc GetLock(GetLockRequest) returns (types.LockV2);
    // GetLocks gets all/in-force locks that match at least one of the targets when specified.
    rpc GetLocks(GetLocksRequest) returns (GetLocksResponse);
    // UpsertLock upserts a lock.
    rpc UpsertLock(types.LockV2) returns (google.protobuf.Empty);
    // DeleteLock deletes a lock.
    rpc DeleteLock(DeleteLockRequest) returns (google.protobuf.Empty);
    // ReplaceRemoteLocks replaces the set of locks associated with a remote cluster.
    rpc ReplaceRemoteLocks(ReplaceRemoteLocksRequest) returns (google.protobuf.Empty);

    // StreamSessionEvents streams audit events from a given session recording.
    rpc StreamSessionEvents(StreamSessionEventsRequest) returns (stream events.OneOf);

    // GetNetworkRestrictions retrieves all the network restrictions (allow/deny lists).
    rpc GetNetworkRestrictions(google.protobuf.Empty) returns (types.NetworkRestrictionsV4);
    // SetNetworkRestrictions updates the network restrictions.
    rpc SetNetworkRestrictions(types.NetworkRestrictionsV4) returns (google.protobuf.Empty);
    // DeleteNetworkRestrictions delete the network restrictions.
    rpc DeleteNetworkRestrictions(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetApps returns all registered applications.
    rpc GetApps(google.protobuf.Empty) returns (types.AppV3List);
    // GetApp returns an application by name.
    rpc GetApp(types.ResourceRequest) returns (types.AppV3);
    // CreateApp creates a new application resource.
    rpc CreateApp(types.AppV3) returns (google.protobuf.Empty);
    // UpdateApp updates existing application resource.
    rpc UpdateApp(types.AppV3) returns (google.protobuf.Empty);
    // DeleteApp removes specified application resource.
    rpc DeleteApp(types.ResourceRequest) returns (google.protobuf.Empty);
    // DeleteAllApps removes all application resources.
    rpc DeleteAllApps(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetDatabases returns all registered databases.
    rpc GetDatabases(google.protobuf.Empty) returns (types.DatabaseV3List);
    // GetDatabase returns a database by name.
    rpc GetDatabase(types.ResourceRequest) returns (types.DatabaseV3);
    // CreateDatabase creates a new database resource.
    rpc CreateDatabase(types.DatabaseV3) returns (google.protobuf.Empty);
    // UpdateDatabase updates existing database resource.
    rpc UpdateDatabase(types.DatabaseV3) returns (google.protobuf.Empty);
    // DeleteDatabase removes specified database resource.
    rpc DeleteDatabase(types.ResourceRequest) returns (google.protobuf.Empty);
    // DeleteAllDatabases removes all database resources.
    rpc DeleteAllDatabases(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetWindowsDesktopServices returns all registered Windows desktop services.
    rpc GetWindowsDesktopServices(google.protobuf.Empty)
        returns (GetWindowsDesktopServicesResponse);
    // UpsertWindowsDesktopService registers a new Windows desktop service.
    rpc UpsertWindowsDesktopService(types.WindowsDesktopServiceV3) returns (types.KeepAlive);
    // DeleteWindowsDesktopService removes the specified Windows desktop service.
    rpc DeleteWindowsDesktopService(DeleteWindowsDesktopServiceRequest)
        returns (google.protobuf.Empty);
    // DeleteAllWindowsDesktopServices removes all registered Windows desktop services.
    rpc DeleteAllWindowsDesktopServices(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetWindowsDesktops returns all registered Windows desktop hosts.
    rpc GetWindowsDesktops(google.protobuf.Empty) returns (GetWindowsDesktopsResponse);
    // GetWindowsDesktop returns a registered Windows desktop host.
    rpc GetWindowsDesktop(GetWindowsDesktopRequest) returns (types.WindowsDesktopV3);
    // CreateWindowsDesktop registers a new Windows desktop host.
    rpc CreateWindowsDesktop(types.WindowsDesktopV3) returns (google.protobuf.Empty);
    // UpdateWindowsDesktop updates an existing Windows desktop host.
    rpc UpdateWindowsDesktop(types.WindowsDesktopV3) returns (google.protobuf.Empty);
    // UpsertWindowsDesktop updates a Windows desktop host, creating it if it doesn't exist.
    rpc UpsertWindowsDesktop(types.WindowsDesktopV3) returns (google.protobuf.Empty);
    // DeleteWindowsDesktop removes the specified Windows desktop host.
    rpc DeleteWindowsDesktop(DeleteWindowsDesktopRequest) returns (google.protobuf.Empty);
    // DeleteAllWindowsDesktops removes all registered Windows desktop hosts.
    rpc DeleteAllWindowsDesktops(google.protobuf.Empty) returns (google.protobuf.Empty);
    // GenerateWindowsDesktopCert generates client smartcard certificate used
    // by an RDP client to authenticate with Windows.
    rpc GenerateWindowsDesktopCert(WindowsDesktopCertRequest) returns (WindowsDesktopCertResponse);
    // GenerateCertAuthorityCRL creates an empty CRL for the specified CA.
    rpc GenerateCertAuthorityCRL(CertAuthorityRequest) returns (CRL);

    // ChangeUserAuthentication allows a user to change their password and if enabled,
    // also adds a new MFA device. After successful invocation, a new web session is created as well
    // as a new set of recovery codes (if user meets the requirements to receive them), invalidating
    // any existing codes the user previously had.
    rpc ChangeUserAuthentication(ChangeUserAuthenticationRequest)
        returns (ChangeUserAuthenticationResponse);

    // StartAccountRecovery (exclusive to cloud users) is the first out of two step user
    // verification needed to allow a user to recover their account. The first form of verification
    // is a user's username and a recovery code. After successful verification, a recovery start
    // token is created for the user which its ID will be used as part of a URL that will be emailed
    // to the user (not done in this request). The user will be able to finish their second form of
    // verification by clicking on this URL and following the prompts.
    //
    // If a valid user fails to provide correct recovery code for MaxAccountRecoveryAttempts,
    // user account gets temporarily locked from further recovery attempts and from logging in.
    //
    // Start tokens last RecoveryStartTokenTTL.
    rpc StartAccountRecovery(StartAccountRecoveryRequest) returns (types.UserTokenV3);
    // VerifyAccountRecovery (exclusive to cloud users) is the second step of the two step
    // verification needed to allow a user to recover their account, after RPC StartAccountRecovery.
    // The second form of verification is a user's password or their second factor (depending on
    // what authentication they needed to recover). After successful verification, a recovery
    // approved token is created which allows a user to request protected actions while not logged
    // in e.g: setting a new password or a mfa device, viewing their MFA devices, deleting their MFA
    // devices, and generating new recovery codes.
    //
    // The recovery start token to verify this request becomes deleted before
    // creating a recovery approved token, which invalidates the recovery link users received
    // to finish their verification.
    //
    // If user fails to verify themselves for MaxAccountRecoveryAttempts
    // (combined attempts with RPC StartAccountRecovery), users account will be temporarily locked
    // from logging in. If users still have unused recovery codes left, they still have
    // opportunities to recover their account. To allow this, users recovery attempts are also
    // deleted along with all user tokens which will force the user to restart the recovery process
    // from step 1 (RPC StartAccountRecovery).
    //
    // Recovery approved tokens last RecoveryApprovedTokenTTL.
    rpc VerifyAccountRecovery(VerifyAccountRecoveryRequest) returns (types.UserTokenV3);
    // CompleteAccountRecovery (exclusive to cloud users) is the last step in account
    // recovery, after RPC's StartAccountRecovery and VerifyAccountRecovery. This step sets a new
    // password or adds a new mfa device, allowing the user to regain access to their account with
    // the new credentials. When the new authentication is successfully set, any user lock is
    // removed so the user can login immediately afterwards.
    rpc CompleteAccountRecovery(CompleteAccountRecoveryRequest) returns (google.protobuf.Empty);

    // CreateAccountRecoveryCodes (exclusive to cloud users) creates new set of recovery codes for a
    // user, replacing and invalidating any previously owned codes. Users can only get recovery
    // codes if their username is in a valid email format.
    rpc CreateAccountRecoveryCodes(CreateAccountRecoveryCodesRequest) returns (RecoveryCodes);
    // GetAccountRecoveryToken (exclusive to cloud users) returns a user token resource after
    // verifying that the token requested has not expired and is of the correct recovery kind.
    // Besides checking for validity of a token ID, it is also used to get basic information from
    // the token e.g: username, state of recovery (started or approved) and the type of recovery
    // requested (password or second factor).
    rpc GetAccountRecoveryToken(GetAccountRecoveryTokenRequest) returns (types.UserTokenV3);
    // GetAccountRecoveryCodes (exclusive to cloud users) is a request to return the user in context
    // their recovery codes. This request will not return any secrets (the values of recovery
    // codes), but instead returns non-sensitive data eg. when the recovery codes were created.
    rpc GetAccountRecoveryCodes(GetAccountRecoveryCodesRequest) returns (RecoveryCodes);

    // CreatePrivilegeToken returns a new privilege token after a logged in user successfully
    // re-authenticates with their second factor device. Privilege token lasts PrivilegeTokenTTL and
    // is used to gain access to privileged actions eg: deleting/adding a MFA device.
    rpc CreatePrivilegeToken(CreatePrivilegeTokenRequest) returns (types.UserTokenV3);

    // ListResources retrieves a paginated list of resources.
    rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse);
}
