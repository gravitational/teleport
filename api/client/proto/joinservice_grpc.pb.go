// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/legacy/client/proto/joinservice.proto

package proto

import (
	context "context"
	types "github.com/gravitational/teleport/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JoinService_RegisterUsingIAMMethod_FullMethodName          = "/proto.JoinService/RegisterUsingIAMMethod"
	JoinService_RegisterUsingAzureMethod_FullMethodName        = "/proto.JoinService/RegisterUsingAzureMethod"
	JoinService_RegisterUsingTPMMethod_FullMethodName          = "/proto.JoinService/RegisterUsingTPMMethod"
	JoinService_RegisterUsingOracleMethod_FullMethodName       = "/proto.JoinService/RegisterUsingOracleMethod"
	JoinService_RegisterUsingBoundKeypairMethod_FullMethodName = "/proto.JoinService/RegisterUsingBoundKeypairMethod"
	JoinService_RegisterUsingToken_FullMethodName              = "/proto.JoinService/RegisterUsingToken"
)

// JoinServiceClient is the client API for JoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JoinService provides methods which allow Teleport nodes, proxies, and other
// services to join the Teleport cluster by fetching signed cluster
// certificates. It is implemented on both the Auth and Proxy servers to serve
// the needs of both nodes connecting directly to the Auth server and IoT mode
// nodes connecting only to the Proxy.
type JoinServiceClient interface {
	// RegisterUsingIAMMethod is used to register a new node to the cluster using
	// the IAM join method.
	RegisterUsingIAMMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse], error)
	// RegisterUsingAzureMethod is used to register a new node to the cluster
	// using the Azure join method.
	RegisterUsingAzureMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse], error)
	// RegisterUsingTPMMethod allows registration of a new agent or Bot to the
	// cluster using a known TPM.
	RegisterUsingTPMMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse], error)
	// RegisterUsingOracleMethod allows registration of a new node to the cluster
	// using the Oracle join method.
	RegisterUsingOracleMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse], error)
	// RegisterUsingBoundKeypairMethod allows registration of a new node to the
	// cluster using the bound-keypair join method.
	RegisterUsingBoundKeypairMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse], error)
	// RegisterUsingToken is used to register a new node to the cluster using one
	// of the legacy join methods which do not yet have their own gRPC method.
	RegisterUsingToken(ctx context.Context, in *types.RegisterUsingTokenRequest, opts ...grpc.CallOption) (*Certs, error)
}

type joinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinServiceClient(cc grpc.ClientConnInterface) JoinServiceClient {
	return &joinServiceClient{cc}
}

func (c *joinServiceClient) RegisterUsingIAMMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[0], JoinService_RegisterUsingIAMMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingIAMMethodClient = grpc.BidiStreamingClient[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse]

func (c *joinServiceClient) RegisterUsingAzureMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[1], JoinService_RegisterUsingAzureMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingAzureMethodClient = grpc.BidiStreamingClient[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse]

func (c *joinServiceClient) RegisterUsingTPMMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[2], JoinService_RegisterUsingTPMMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingTPMMethodClient = grpc.BidiStreamingClient[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse]

func (c *joinServiceClient) RegisterUsingOracleMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[3], JoinService_RegisterUsingOracleMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingOracleMethodClient = grpc.BidiStreamingClient[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse]

func (c *joinServiceClient) RegisterUsingBoundKeypairMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[4], JoinService_RegisterUsingBoundKeypairMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingBoundKeypairMethodClient = grpc.BidiStreamingClient[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse]

func (c *joinServiceClient) RegisterUsingToken(ctx context.Context, in *types.RegisterUsingTokenRequest, opts ...grpc.CallOption) (*Certs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Certs)
	err := c.cc.Invoke(ctx, JoinService_RegisterUsingToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoinServiceServer is the server API for JoinService service.
// All implementations should embed UnimplementedJoinServiceServer
// for forward compatibility.
//
// JoinService provides methods which allow Teleport nodes, proxies, and other
// services to join the Teleport cluster by fetching signed cluster
// certificates. It is implemented on both the Auth and Proxy servers to serve
// the needs of both nodes connecting directly to the Auth server and IoT mode
// nodes connecting only to the Proxy.
type JoinServiceServer interface {
	// RegisterUsingIAMMethod is used to register a new node to the cluster using
	// the IAM join method.
	RegisterUsingIAMMethod(grpc.BidiStreamingServer[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse]) error
	// RegisterUsingAzureMethod is used to register a new node to the cluster
	// using the Azure join method.
	RegisterUsingAzureMethod(grpc.BidiStreamingServer[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse]) error
	// RegisterUsingTPMMethod allows registration of a new agent or Bot to the
	// cluster using a known TPM.
	RegisterUsingTPMMethod(grpc.BidiStreamingServer[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse]) error
	// RegisterUsingOracleMethod allows registration of a new node to the cluster
	// using the Oracle join method.
	RegisterUsingOracleMethod(grpc.BidiStreamingServer[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse]) error
	// RegisterUsingBoundKeypairMethod allows registration of a new node to the
	// cluster using the bound-keypair join method.
	RegisterUsingBoundKeypairMethod(grpc.BidiStreamingServer[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse]) error
	// RegisterUsingToken is used to register a new node to the cluster using one
	// of the legacy join methods which do not yet have their own gRPC method.
	RegisterUsingToken(context.Context, *types.RegisterUsingTokenRequest) (*Certs, error)
}

// UnimplementedJoinServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJoinServiceServer struct{}

func (UnimplementedJoinServiceServer) RegisterUsingIAMMethod(grpc.BidiStreamingServer[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingIAMMethod not implemented")
}
func (UnimplementedJoinServiceServer) RegisterUsingAzureMethod(grpc.BidiStreamingServer[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingAzureMethod not implemented")
}
func (UnimplementedJoinServiceServer) RegisterUsingTPMMethod(grpc.BidiStreamingServer[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingTPMMethod not implemented")
}
func (UnimplementedJoinServiceServer) RegisterUsingOracleMethod(grpc.BidiStreamingServer[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingOracleMethod not implemented")
}
func (UnimplementedJoinServiceServer) RegisterUsingBoundKeypairMethod(grpc.BidiStreamingServer[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingBoundKeypairMethod not implemented")
}
func (UnimplementedJoinServiceServer) RegisterUsingToken(context.Context, *types.RegisterUsingTokenRequest) (*Certs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUsingToken not implemented")
}
func (UnimplementedJoinServiceServer) testEmbeddedByValue() {}

// UnsafeJoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServiceServer will
// result in compilation errors.
type UnsafeJoinServiceServer interface {
	mustEmbedUnimplementedJoinServiceServer()
}

func RegisterJoinServiceServer(s grpc.ServiceRegistrar, srv JoinServiceServer) {
	// If the following call pancis, it indicates UnimplementedJoinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JoinService_ServiceDesc, srv)
}

func _JoinService_RegisterUsingIAMMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingIAMMethod(&grpc.GenericServerStream[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingIAMMethodServer = grpc.BidiStreamingServer[RegisterUsingIAMMethodRequest, RegisterUsingIAMMethodResponse]

func _JoinService_RegisterUsingAzureMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingAzureMethod(&grpc.GenericServerStream[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingAzureMethodServer = grpc.BidiStreamingServer[RegisterUsingAzureMethodRequest, RegisterUsingAzureMethodResponse]

func _JoinService_RegisterUsingTPMMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingTPMMethod(&grpc.GenericServerStream[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingTPMMethodServer = grpc.BidiStreamingServer[RegisterUsingTPMMethodRequest, RegisterUsingTPMMethodResponse]

func _JoinService_RegisterUsingOracleMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingOracleMethod(&grpc.GenericServerStream[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingOracleMethodServer = grpc.BidiStreamingServer[RegisterUsingOracleMethodRequest, RegisterUsingOracleMethodResponse]

func _JoinService_RegisterUsingBoundKeypairMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingBoundKeypairMethod(&grpc.GenericServerStream[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JoinService_RegisterUsingBoundKeypairMethodServer = grpc.BidiStreamingServer[RegisterUsingBoundKeypairMethodRequest, RegisterUsingBoundKeypairMethodResponse]

func _JoinService_RegisterUsingToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RegisterUsingTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServiceServer).RegisterUsingToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoinService_RegisterUsingToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServiceServer).RegisterUsingToken(ctx, req.(*types.RegisterUsingTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JoinService_ServiceDesc is the grpc.ServiceDesc for JoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JoinService",
	HandlerType: (*JoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUsingToken",
			Handler:    _JoinService_RegisterUsingToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterUsingIAMMethod",
			Handler:       _JoinService_RegisterUsingIAMMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterUsingAzureMethod",
			Handler:       _JoinService_RegisterUsingAzureMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterUsingTPMMethod",
			Handler:       _JoinService_RegisterUsingTPMMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterUsingOracleMethod",
			Handler:       _JoinService_RegisterUsingOracleMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterUsingBoundKeypairMethod",
			Handler:       _JoinService_RegisterUsingBoundKeypairMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/legacy/client/proto/joinservice.proto",
}
