// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/legacy/client/proto/joinservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JoinService_RegisterUsingIAMMethod_FullMethodName   = "/proto.JoinService/RegisterUsingIAMMethod"
	JoinService_RegisterUsingAzureMethod_FullMethodName = "/proto.JoinService/RegisterUsingAzureMethod"
	JoinService_RegisterUsingTPMMethod_FullMethodName   = "/proto.JoinService/RegisterUsingTPMMethod"
)

// JoinServiceClient is the client API for JoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoinServiceClient interface {
	// RegisterUsingIAMMethod is used to register a new node to the cluster using
	// the IAM join method.
	RegisterUsingIAMMethod(ctx context.Context, opts ...grpc.CallOption) (JoinService_RegisterUsingIAMMethodClient, error)
	// RegisterUsingAzureMethod is used to register a new node to the cluster
	// using the Azure join method.
	RegisterUsingAzureMethod(ctx context.Context, opts ...grpc.CallOption) (JoinService_RegisterUsingAzureMethodClient, error)
	// RegisterUsingTPMMethod allows registration of a new agent or Bot to the
	// cluster using a known TPM.
	RegisterUsingTPMMethod(ctx context.Context, opts ...grpc.CallOption) (JoinService_RegisterUsingTPMMethodClient, error)
}

type joinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinServiceClient(cc grpc.ClientConnInterface) JoinServiceClient {
	return &joinServiceClient{cc}
}

func (c *joinServiceClient) RegisterUsingIAMMethod(ctx context.Context, opts ...grpc.CallOption) (JoinService_RegisterUsingIAMMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[0], JoinService_RegisterUsingIAMMethod_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joinServiceRegisterUsingIAMMethodClient{stream}
	return x, nil
}

type JoinService_RegisterUsingIAMMethodClient interface {
	Send(*RegisterUsingIAMMethodRequest) error
	Recv() (*RegisterUsingIAMMethodResponse, error)
	grpc.ClientStream
}

type joinServiceRegisterUsingIAMMethodClient struct {
	grpc.ClientStream
}

func (x *joinServiceRegisterUsingIAMMethodClient) Send(m *RegisterUsingIAMMethodRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *joinServiceRegisterUsingIAMMethodClient) Recv() (*RegisterUsingIAMMethodResponse, error) {
	m := new(RegisterUsingIAMMethodResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *joinServiceClient) RegisterUsingAzureMethod(ctx context.Context, opts ...grpc.CallOption) (JoinService_RegisterUsingAzureMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[1], JoinService_RegisterUsingAzureMethod_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joinServiceRegisterUsingAzureMethodClient{stream}
	return x, nil
}

type JoinService_RegisterUsingAzureMethodClient interface {
	Send(*RegisterUsingAzureMethodRequest) error
	Recv() (*RegisterUsingAzureMethodResponse, error)
	grpc.ClientStream
}

type joinServiceRegisterUsingAzureMethodClient struct {
	grpc.ClientStream
}

func (x *joinServiceRegisterUsingAzureMethodClient) Send(m *RegisterUsingAzureMethodRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *joinServiceRegisterUsingAzureMethodClient) Recv() (*RegisterUsingAzureMethodResponse, error) {
	m := new(RegisterUsingAzureMethodResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *joinServiceClient) RegisterUsingTPMMethod(ctx context.Context, opts ...grpc.CallOption) (JoinService_RegisterUsingTPMMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &JoinService_ServiceDesc.Streams[2], JoinService_RegisterUsingTPMMethod_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &joinServiceRegisterUsingTPMMethodClient{stream}
	return x, nil
}

type JoinService_RegisterUsingTPMMethodClient interface {
	Send(*RegisterUsingTPMMethodRequest) error
	Recv() (*RegisterUsingTPMMethodResponse, error)
	grpc.ClientStream
}

type joinServiceRegisterUsingTPMMethodClient struct {
	grpc.ClientStream
}

func (x *joinServiceRegisterUsingTPMMethodClient) Send(m *RegisterUsingTPMMethodRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *joinServiceRegisterUsingTPMMethodClient) Recv() (*RegisterUsingTPMMethodResponse, error) {
	m := new(RegisterUsingTPMMethodResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JoinServiceServer is the server API for JoinService service.
// All implementations should embed UnimplementedJoinServiceServer
// for forward compatibility
type JoinServiceServer interface {
	// RegisterUsingIAMMethod is used to register a new node to the cluster using
	// the IAM join method.
	RegisterUsingIAMMethod(JoinService_RegisterUsingIAMMethodServer) error
	// RegisterUsingAzureMethod is used to register a new node to the cluster
	// using the Azure join method.
	RegisterUsingAzureMethod(JoinService_RegisterUsingAzureMethodServer) error
	// RegisterUsingTPMMethod allows registration of a new agent or Bot to the
	// cluster using a known TPM.
	RegisterUsingTPMMethod(JoinService_RegisterUsingTPMMethodServer) error
}

// UnimplementedJoinServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJoinServiceServer struct {
}

func (UnimplementedJoinServiceServer) RegisterUsingIAMMethod(JoinService_RegisterUsingIAMMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingIAMMethod not implemented")
}
func (UnimplementedJoinServiceServer) RegisterUsingAzureMethod(JoinService_RegisterUsingAzureMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingAzureMethod not implemented")
}
func (UnimplementedJoinServiceServer) RegisterUsingTPMMethod(JoinService_RegisterUsingTPMMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUsingTPMMethod not implemented")
}

// UnsafeJoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServiceServer will
// result in compilation errors.
type UnsafeJoinServiceServer interface {
	mustEmbedUnimplementedJoinServiceServer()
}

func RegisterJoinServiceServer(s grpc.ServiceRegistrar, srv JoinServiceServer) {
	s.RegisterService(&JoinService_ServiceDesc, srv)
}

func _JoinService_RegisterUsingIAMMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingIAMMethod(&joinServiceRegisterUsingIAMMethodServer{stream})
}

type JoinService_RegisterUsingIAMMethodServer interface {
	Send(*RegisterUsingIAMMethodResponse) error
	Recv() (*RegisterUsingIAMMethodRequest, error)
	grpc.ServerStream
}

type joinServiceRegisterUsingIAMMethodServer struct {
	grpc.ServerStream
}

func (x *joinServiceRegisterUsingIAMMethodServer) Send(m *RegisterUsingIAMMethodResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *joinServiceRegisterUsingIAMMethodServer) Recv() (*RegisterUsingIAMMethodRequest, error) {
	m := new(RegisterUsingIAMMethodRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JoinService_RegisterUsingAzureMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingAzureMethod(&joinServiceRegisterUsingAzureMethodServer{stream})
}

type JoinService_RegisterUsingAzureMethodServer interface {
	Send(*RegisterUsingAzureMethodResponse) error
	Recv() (*RegisterUsingAzureMethodRequest, error)
	grpc.ServerStream
}

type joinServiceRegisterUsingAzureMethodServer struct {
	grpc.ServerStream
}

func (x *joinServiceRegisterUsingAzureMethodServer) Send(m *RegisterUsingAzureMethodResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *joinServiceRegisterUsingAzureMethodServer) Recv() (*RegisterUsingAzureMethodRequest, error) {
	m := new(RegisterUsingAzureMethodRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JoinService_RegisterUsingTPMMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JoinServiceServer).RegisterUsingTPMMethod(&joinServiceRegisterUsingTPMMethodServer{stream})
}

type JoinService_RegisterUsingTPMMethodServer interface {
	Send(*RegisterUsingTPMMethodResponse) error
	Recv() (*RegisterUsingTPMMethodRequest, error)
	grpc.ServerStream
}

type joinServiceRegisterUsingTPMMethodServer struct {
	grpc.ServerStream
}

func (x *joinServiceRegisterUsingTPMMethodServer) Send(m *RegisterUsingTPMMethodResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *joinServiceRegisterUsingTPMMethodServer) Recv() (*RegisterUsingTPMMethodRequest, error) {
	m := new(RegisterUsingTPMMethodRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JoinService_ServiceDesc is the grpc.ServiceDesc for JoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JoinService",
	HandlerType: (*JoinServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterUsingIAMMethod",
			Handler:       _JoinService_RegisterUsingIAMMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterUsingAzureMethod",
			Handler:       _JoinService_RegisterUsingAzureMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterUsingTPMMethod",
			Handler:       _JoinService_RegisterUsingTPMMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/legacy/client/proto/joinservice.proto",
}
