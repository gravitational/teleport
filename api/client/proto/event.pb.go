// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: teleport/legacy/client/proto/event.proto

package proto

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/accesslist/v1"
	v14 "github.com/gravitational/teleport/api/gen/proto/go/teleport/accessmonitoringrules/v1"
	v111 "github.com/gravitational/teleport/api/gen/proto/go/teleport/autoupdate/v1"
	v110 "github.com/gravitational/teleport/api/gen/proto/go/teleport/clusterconfig/v1"
	v17 "github.com/gravitational/teleport/api/gen/proto/go/teleport/crownjewel/v1"
	v18 "github.com/gravitational/teleport/api/gen/proto/go/teleport/dbobject/v1"
	v12 "github.com/gravitational/teleport/api/gen/proto/go/teleport/discoveryconfig/v1"
	v116 "github.com/gravitational/teleport/api/gen/proto/go/teleport/healthcheckconfig/v1"
	v114 "github.com/gravitational/teleport/api/gen/proto/go/teleport/identitycenter/v1"
	v15 "github.com/gravitational/teleport/api/gen/proto/go/teleport/kubewaitingcontainer/v1"
	v19 "github.com/gravitational/teleport/api/gen/proto/go/teleport/machineid/v1"
	v16 "github.com/gravitational/teleport/api/gen/proto/go/teleport/notifications/v1"
	v113 "github.com/gravitational/teleport/api/gen/proto/go/teleport/provisioning/v1"
	v13 "github.com/gravitational/teleport/api/gen/proto/go/teleport/secreports/v1"
	v11 "github.com/gravitational/teleport/api/gen/proto/go/teleport/userloginstate/v1"
	v2 "github.com/gravitational/teleport/api/gen/proto/go/teleport/userprovisioning/v2"
	v112 "github.com/gravitational/teleport/api/gen/proto/go/teleport/usertasks/v1"
	v115 "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1"
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operation identifies type of operation
type Operation int32

const (
	// INIT is sent as a first sentinel event
	// on the watch channel
	Operation_INIT Operation = 0
	// PUT identifies created or updated object
	Operation_PUT Operation = 1
	// DELETE identifies deleted object
	Operation_DELETE Operation = 2
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "INIT",
		1: "PUT",
		2: "DELETE",
	}
	Operation_value = map[string]int32{
		"INIT":   0,
		"PUT":    1,
		"DELETE": 2,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_legacy_client_proto_event_proto_enumTypes[0].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_teleport_legacy_client_proto_event_proto_enumTypes[0]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_teleport_legacy_client_proto_event_proto_rawDescGZIP(), []int{0}
}

// Event returns cluster event
type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation identifies operation
	Type Operation `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.Operation" json:"Type,omitempty"`
	// Resource contains the updated resource
	//
	// Types that are valid to be assigned to Resource:
	//
	//	*Event_ResourceHeader
	//	*Event_CertAuthority
	//	*Event_StaticTokens
	//	*Event_ProvisionToken
	//	*Event_ClusterName
	//	*Event_User
	//	*Event_Role
	//	*Event_Namespace
	//	*Event_Server
	//	*Event_ReverseTunnel
	//	*Event_TunnelConnection
	//	*Event_AccessRequest
	//	*Event_AppSession
	//	*Event_RemoteCluster
	//	*Event_DatabaseServer
	//	*Event_WebSession
	//	*Event_WebToken
	//	*Event_ClusterNetworkingConfig
	//	*Event_SessionRecordingConfig
	//	*Event_AuthPreference
	//	*Event_ClusterAuditConfig
	//	*Event_Lock
	//	*Event_NetworkRestrictions
	//	*Event_WindowsDesktopService
	//	*Event_WindowsDesktop
	//	*Event_Database
	//	*Event_AppServer
	//	*Event_App
	//	*Event_SnowflakeSession
	//	*Event_KubernetesServer
	//	*Event_KubernetesCluster
	//	*Event_Installer
	//	*Event_DatabaseService
	//	*Event_SAMLIdPServiceProvider
	//	*Event_SAMLIdPSession
	//	*Event_UserGroup
	//	*Event_UIConfig
	//	*Event_OktaImportRule
	//	*Event_OktaAssignment
	//	*Event_Integration
	//	*Event_WatchStatus
	//	*Event_HeadlessAuthentication
	//	*Event_AccessList
	//	*Event_UserLoginState
	//	*Event_AccessListMember
	//	*Event_DiscoveryConfig
	//	*Event_AuditQuery
	//	*Event_Report
	//	*Event_ReportState
	//	*Event_AccessListReview
	//	*Event_AccessMonitoringRule
	//	*Event_KubernetesWaitingContainer
	//	*Event_UserNotification
	//	*Event_GlobalNotification
	//	*Event_CrownJewel
	//	*Event_DatabaseObject
	//	*Event_BotInstance
	//	*Event_AccessGraphSettings
	//	*Event_SPIFFEFederation
	//	*Event_AutoUpdateConfig
	//	*Event_AutoUpdateVersion
	//	*Event_StaticHostUserV2
	//	*Event_UserTask
	//	*Event_DynamicWindowsDesktop
	//	*Event_ProvisioningPrincipalState
	//	*Event_AutoUpdateAgentRollout
	//	*Event_IdentityCenterAccount
	//	*Event_IdentityCenterPrincipalAssignment
	//	*Event_IdentityCenterAccountAssignment
	//	*Event_PluginStaticCredentials
	//	*Event_WorkloadIdentity
	//	*Event_WorkloadIdentityX509Revocation
	//	*Event_HealthCheckConfig
	Resource      isEvent_Resource `protobuf_oneof:"Resource"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_teleport_legacy_client_proto_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_legacy_client_proto_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_teleport_legacy_client_proto_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetType() Operation {
	if x != nil {
		return x.Type
	}
	return Operation_INIT
}

func (x *Event) GetResource() isEvent_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Event) GetResourceHeader() *types.ResourceHeader {
	if x != nil {
		if x, ok := x.Resource.(*Event_ResourceHeader); ok {
			return x.ResourceHeader
		}
	}
	return nil
}

func (x *Event) GetCertAuthority() *types.CertAuthorityV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_CertAuthority); ok {
			return x.CertAuthority
		}
	}
	return nil
}

func (x *Event) GetStaticTokens() *types.StaticTokensV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_StaticTokens); ok {
			return x.StaticTokens
		}
	}
	return nil
}

func (x *Event) GetProvisionToken() *types.ProvisionTokenV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_ProvisionToken); ok {
			return x.ProvisionToken
		}
	}
	return nil
}

func (x *Event) GetClusterName() *types.ClusterNameV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_ClusterName); ok {
			return x.ClusterName
		}
	}
	return nil
}

func (x *Event) GetUser() *types.UserV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_User); ok {
			return x.User
		}
	}
	return nil
}

func (x *Event) GetRole() *types.RoleV6 {
	if x != nil {
		if x, ok := x.Resource.(*Event_Role); ok {
			return x.Role
		}
	}
	return nil
}

func (x *Event) GetNamespace() *types.Namespace {
	if x != nil {
		if x, ok := x.Resource.(*Event_Namespace); ok {
			return x.Namespace
		}
	}
	return nil
}

func (x *Event) GetServer() *types.ServerV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_Server); ok {
			return x.Server
		}
	}
	return nil
}

func (x *Event) GetReverseTunnel() *types.ReverseTunnelV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_ReverseTunnel); ok {
			return x.ReverseTunnel
		}
	}
	return nil
}

func (x *Event) GetTunnelConnection() *types.TunnelConnectionV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_TunnelConnection); ok {
			return x.TunnelConnection
		}
	}
	return nil
}

func (x *Event) GetAccessRequest() *types.AccessRequestV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_AccessRequest); ok {
			return x.AccessRequest
		}
	}
	return nil
}

func (x *Event) GetAppSession() *types.WebSessionV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_AppSession); ok {
			return x.AppSession
		}
	}
	return nil
}

func (x *Event) GetRemoteCluster() *types.RemoteClusterV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_RemoteCluster); ok {
			return x.RemoteCluster
		}
	}
	return nil
}

func (x *Event) GetDatabaseServer() *types.DatabaseServerV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_DatabaseServer); ok {
			return x.DatabaseServer
		}
	}
	return nil
}

func (x *Event) GetWebSession() *types.WebSessionV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_WebSession); ok {
			return x.WebSession
		}
	}
	return nil
}

func (x *Event) GetWebToken() *types.WebTokenV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_WebToken); ok {
			return x.WebToken
		}
	}
	return nil
}

func (x *Event) GetClusterNetworkingConfig() *types.ClusterNetworkingConfigV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_ClusterNetworkingConfig); ok {
			return x.ClusterNetworkingConfig
		}
	}
	return nil
}

func (x *Event) GetSessionRecordingConfig() *types.SessionRecordingConfigV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_SessionRecordingConfig); ok {
			return x.SessionRecordingConfig
		}
	}
	return nil
}

func (x *Event) GetAuthPreference() *types.AuthPreferenceV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_AuthPreference); ok {
			return x.AuthPreference
		}
	}
	return nil
}

func (x *Event) GetClusterAuditConfig() *types.ClusterAuditConfigV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_ClusterAuditConfig); ok {
			return x.ClusterAuditConfig
		}
	}
	return nil
}

func (x *Event) GetLock() *types.LockV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_Lock); ok {
			return x.Lock
		}
	}
	return nil
}

func (x *Event) GetNetworkRestrictions() *types.NetworkRestrictionsV4 {
	if x != nil {
		if x, ok := x.Resource.(*Event_NetworkRestrictions); ok {
			return x.NetworkRestrictions
		}
	}
	return nil
}

func (x *Event) GetWindowsDesktopService() *types.WindowsDesktopServiceV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_WindowsDesktopService); ok {
			return x.WindowsDesktopService
		}
	}
	return nil
}

func (x *Event) GetWindowsDesktop() *types.WindowsDesktopV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_WindowsDesktop); ok {
			return x.WindowsDesktop
		}
	}
	return nil
}

func (x *Event) GetDatabase() *types.DatabaseV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_Database); ok {
			return x.Database
		}
	}
	return nil
}

func (x *Event) GetAppServer() *types.AppServerV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_AppServer); ok {
			return x.AppServer
		}
	}
	return nil
}

func (x *Event) GetApp() *types.AppV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_App); ok {
			return x.App
		}
	}
	return nil
}

func (x *Event) GetSnowflakeSession() *types.WebSessionV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_SnowflakeSession); ok {
			return x.SnowflakeSession
		}
	}
	return nil
}

func (x *Event) GetKubernetesServer() *types.KubernetesServerV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_KubernetesServer); ok {
			return x.KubernetesServer
		}
	}
	return nil
}

func (x *Event) GetKubernetesCluster() *types.KubernetesClusterV3 {
	if x != nil {
		if x, ok := x.Resource.(*Event_KubernetesCluster); ok {
			return x.KubernetesCluster
		}
	}
	return nil
}

func (x *Event) GetInstaller() *types.InstallerV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_Installer); ok {
			return x.Installer
		}
	}
	return nil
}

func (x *Event) GetDatabaseService() *types.DatabaseServiceV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_DatabaseService); ok {
			return x.DatabaseService
		}
	}
	return nil
}

func (x *Event) GetSAMLIdPServiceProvider() *types.SAMLIdPServiceProviderV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_SAMLIdPServiceProvider); ok {
			return x.SAMLIdPServiceProvider
		}
	}
	return nil
}

func (x *Event) GetSAMLIdPSession() *types.WebSessionV2 {
	if x != nil {
		if x, ok := x.Resource.(*Event_SAMLIdPSession); ok {
			return x.SAMLIdPSession
		}
	}
	return nil
}

func (x *Event) GetUserGroup() *types.UserGroupV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_UserGroup); ok {
			return x.UserGroup
		}
	}
	return nil
}

func (x *Event) GetUIConfig() *types.UIConfigV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_UIConfig); ok {
			return x.UIConfig
		}
	}
	return nil
}

func (x *Event) GetOktaImportRule() *types.OktaImportRuleV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_OktaImportRule); ok {
			return x.OktaImportRule
		}
	}
	return nil
}

func (x *Event) GetOktaAssignment() *types.OktaAssignmentV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_OktaAssignment); ok {
			return x.OktaAssignment
		}
	}
	return nil
}

func (x *Event) GetIntegration() *types.IntegrationV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_Integration); ok {
			return x.Integration
		}
	}
	return nil
}

func (x *Event) GetWatchStatus() *types.WatchStatusV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_WatchStatus); ok {
			return x.WatchStatus
		}
	}
	return nil
}

func (x *Event) GetHeadlessAuthentication() *types.HeadlessAuthentication {
	if x != nil {
		if x, ok := x.Resource.(*Event_HeadlessAuthentication); ok {
			return x.HeadlessAuthentication
		}
	}
	return nil
}

func (x *Event) GetAccessList() *v1.AccessList {
	if x != nil {
		if x, ok := x.Resource.(*Event_AccessList); ok {
			return x.AccessList
		}
	}
	return nil
}

func (x *Event) GetUserLoginState() *v11.UserLoginState {
	if x != nil {
		if x, ok := x.Resource.(*Event_UserLoginState); ok {
			return x.UserLoginState
		}
	}
	return nil
}

func (x *Event) GetAccessListMember() *v1.Member {
	if x != nil {
		if x, ok := x.Resource.(*Event_AccessListMember); ok {
			return x.AccessListMember
		}
	}
	return nil
}

func (x *Event) GetDiscoveryConfig() *v12.DiscoveryConfig {
	if x != nil {
		if x, ok := x.Resource.(*Event_DiscoveryConfig); ok {
			return x.DiscoveryConfig
		}
	}
	return nil
}

func (x *Event) GetAuditQuery() *v13.AuditQuery {
	if x != nil {
		if x, ok := x.Resource.(*Event_AuditQuery); ok {
			return x.AuditQuery
		}
	}
	return nil
}

func (x *Event) GetReport() *v13.Report {
	if x != nil {
		if x, ok := x.Resource.(*Event_Report); ok {
			return x.Report
		}
	}
	return nil
}

func (x *Event) GetReportState() *v13.ReportState {
	if x != nil {
		if x, ok := x.Resource.(*Event_ReportState); ok {
			return x.ReportState
		}
	}
	return nil
}

func (x *Event) GetAccessListReview() *v1.Review {
	if x != nil {
		if x, ok := x.Resource.(*Event_AccessListReview); ok {
			return x.AccessListReview
		}
	}
	return nil
}

func (x *Event) GetAccessMonitoringRule() *v14.AccessMonitoringRule {
	if x != nil {
		if x, ok := x.Resource.(*Event_AccessMonitoringRule); ok {
			return x.AccessMonitoringRule
		}
	}
	return nil
}

func (x *Event) GetKubernetesWaitingContainer() *v15.KubernetesWaitingContainer {
	if x != nil {
		if x, ok := x.Resource.(*Event_KubernetesWaitingContainer); ok {
			return x.KubernetesWaitingContainer
		}
	}
	return nil
}

func (x *Event) GetUserNotification() *v16.Notification {
	if x != nil {
		if x, ok := x.Resource.(*Event_UserNotification); ok {
			return x.UserNotification
		}
	}
	return nil
}

func (x *Event) GetGlobalNotification() *v16.GlobalNotification {
	if x != nil {
		if x, ok := x.Resource.(*Event_GlobalNotification); ok {
			return x.GlobalNotification
		}
	}
	return nil
}

func (x *Event) GetCrownJewel() *v17.CrownJewel {
	if x != nil {
		if x, ok := x.Resource.(*Event_CrownJewel); ok {
			return x.CrownJewel
		}
	}
	return nil
}

func (x *Event) GetDatabaseObject() *v18.DatabaseObject {
	if x != nil {
		if x, ok := x.Resource.(*Event_DatabaseObject); ok {
			return x.DatabaseObject
		}
	}
	return nil
}

func (x *Event) GetBotInstance() *v19.BotInstance {
	if x != nil {
		if x, ok := x.Resource.(*Event_BotInstance); ok {
			return x.BotInstance
		}
	}
	return nil
}

func (x *Event) GetAccessGraphSettings() *v110.AccessGraphSettings {
	if x != nil {
		if x, ok := x.Resource.(*Event_AccessGraphSettings); ok {
			return x.AccessGraphSettings
		}
	}
	return nil
}

func (x *Event) GetSPIFFEFederation() *v19.SPIFFEFederation {
	if x != nil {
		if x, ok := x.Resource.(*Event_SPIFFEFederation); ok {
			return x.SPIFFEFederation
		}
	}
	return nil
}

func (x *Event) GetAutoUpdateConfig() *v111.AutoUpdateConfig {
	if x != nil {
		if x, ok := x.Resource.(*Event_AutoUpdateConfig); ok {
			return x.AutoUpdateConfig
		}
	}
	return nil
}

func (x *Event) GetAutoUpdateVersion() *v111.AutoUpdateVersion {
	if x != nil {
		if x, ok := x.Resource.(*Event_AutoUpdateVersion); ok {
			return x.AutoUpdateVersion
		}
	}
	return nil
}

func (x *Event) GetStaticHostUserV2() *v2.StaticHostUser {
	if x != nil {
		if x, ok := x.Resource.(*Event_StaticHostUserV2); ok {
			return x.StaticHostUserV2
		}
	}
	return nil
}

func (x *Event) GetUserTask() *v112.UserTask {
	if x != nil {
		if x, ok := x.Resource.(*Event_UserTask); ok {
			return x.UserTask
		}
	}
	return nil
}

func (x *Event) GetDynamicWindowsDesktop() *types.DynamicWindowsDesktopV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_DynamicWindowsDesktop); ok {
			return x.DynamicWindowsDesktop
		}
	}
	return nil
}

func (x *Event) GetProvisioningPrincipalState() *v113.PrincipalState {
	if x != nil {
		if x, ok := x.Resource.(*Event_ProvisioningPrincipalState); ok {
			return x.ProvisioningPrincipalState
		}
	}
	return nil
}

func (x *Event) GetAutoUpdateAgentRollout() *v111.AutoUpdateAgentRollout {
	if x != nil {
		if x, ok := x.Resource.(*Event_AutoUpdateAgentRollout); ok {
			return x.AutoUpdateAgentRollout
		}
	}
	return nil
}

func (x *Event) GetIdentityCenterAccount() *v114.Account {
	if x != nil {
		if x, ok := x.Resource.(*Event_IdentityCenterAccount); ok {
			return x.IdentityCenterAccount
		}
	}
	return nil
}

func (x *Event) GetIdentityCenterPrincipalAssignment() *v114.PrincipalAssignment {
	if x != nil {
		if x, ok := x.Resource.(*Event_IdentityCenterPrincipalAssignment); ok {
			return x.IdentityCenterPrincipalAssignment
		}
	}
	return nil
}

func (x *Event) GetIdentityCenterAccountAssignment() *v114.AccountAssignment {
	if x != nil {
		if x, ok := x.Resource.(*Event_IdentityCenterAccountAssignment); ok {
			return x.IdentityCenterAccountAssignment
		}
	}
	return nil
}

func (x *Event) GetPluginStaticCredentials() *types.PluginStaticCredentialsV1 {
	if x != nil {
		if x, ok := x.Resource.(*Event_PluginStaticCredentials); ok {
			return x.PluginStaticCredentials
		}
	}
	return nil
}

func (x *Event) GetWorkloadIdentity() *v115.WorkloadIdentity {
	if x != nil {
		if x, ok := x.Resource.(*Event_WorkloadIdentity); ok {
			return x.WorkloadIdentity
		}
	}
	return nil
}

func (x *Event) GetWorkloadIdentityX509Revocation() *v115.WorkloadIdentityX509Revocation {
	if x != nil {
		if x, ok := x.Resource.(*Event_WorkloadIdentityX509Revocation); ok {
			return x.WorkloadIdentityX509Revocation
		}
	}
	return nil
}

func (x *Event) GetHealthCheckConfig() *v116.HealthCheckConfig {
	if x != nil {
		if x, ok := x.Resource.(*Event_HealthCheckConfig); ok {
			return x.HealthCheckConfig
		}
	}
	return nil
}

type isEvent_Resource interface {
	isEvent_Resource()
}

type Event_ResourceHeader struct {
	// ResourceHeader is specified in delete events,
	// the full object is not available, so resource
	// header is used to provide information about object type
	ResourceHeader *types.ResourceHeader `protobuf:"bytes,2,opt,name=ResourceHeader,proto3,oneof"`
}

type Event_CertAuthority struct {
	// CertAuthority is filled in certificate-authority related events
	CertAuthority *types.CertAuthorityV2 `protobuf:"bytes,3,opt,name=CertAuthority,proto3,oneof"`
}

type Event_StaticTokens struct {
	// StaticTokens is filled in static-tokens related events
	StaticTokens *types.StaticTokensV2 `protobuf:"bytes,4,opt,name=StaticTokens,proto3,oneof"`
}

type Event_ProvisionToken struct {
	// ProvisionToken is filled in provision-token related events
	ProvisionToken *types.ProvisionTokenV2 `protobuf:"bytes,5,opt,name=ProvisionToken,proto3,oneof"`
}

type Event_ClusterName struct {
	// ClusterNameV2 is a cluster name resource
	ClusterName *types.ClusterNameV2 `protobuf:"bytes,6,opt,name=ClusterName,proto3,oneof"`
}

type Event_User struct {
	// User is a user resource
	User *types.UserV2 `protobuf:"bytes,8,opt,name=User,proto3,oneof"`
}

type Event_Role struct {
	// Role is a role resource
	Role *types.RoleV6 `protobuf:"bytes,9,opt,name=Role,proto3,oneof"`
}

type Event_Namespace struct {
	// Namespace is a namespace resource
	Namespace *types.Namespace `protobuf:"bytes,10,opt,name=Namespace,proto3,oneof"`
}

type Event_Server struct {
	// Server is a node or proxy resource
	Server *types.ServerV2 `protobuf:"bytes,11,opt,name=Server,proto3,oneof"`
}

type Event_ReverseTunnel struct {
	// ReverseTunnel is a resource with reverse tunnel
	ReverseTunnel *types.ReverseTunnelV2 `protobuf:"bytes,12,opt,name=ReverseTunnel,proto3,oneof"`
}

type Event_TunnelConnection struct {
	// TunnelConnection is a resource for tunnel connnections
	TunnelConnection *types.TunnelConnectionV2 `protobuf:"bytes,13,opt,name=TunnelConnection,proto3,oneof"`
}

type Event_AccessRequest struct {
	// AccessRequest is a resource for access requests
	AccessRequest *types.AccessRequestV3 `protobuf:"bytes,14,opt,name=AccessRequest,proto3,oneof"`
}

type Event_AppSession struct {
	// AppSession is an application web session.
	AppSession *types.WebSessionV2 `protobuf:"bytes,15,opt,name=AppSession,proto3,oneof"`
}

type Event_RemoteCluster struct {
	// RemoteCluster is a resource for remote clusters
	RemoteCluster *types.RemoteClusterV3 `protobuf:"bytes,16,opt,name=RemoteCluster,proto3,oneof"`
}

type Event_DatabaseServer struct {
	// DatabaseServer is a resource for database servers.
	DatabaseServer *types.DatabaseServerV3 `protobuf:"bytes,17,opt,name=DatabaseServer,proto3,oneof"`
}

type Event_WebSession struct {
	// WebSession is a regular web session.
	WebSession *types.WebSessionV2 `protobuf:"bytes,18,opt,name=WebSession,proto3,oneof"`
}

type Event_WebToken struct {
	// WebToken is a web token.
	WebToken *types.WebTokenV3 `protobuf:"bytes,19,opt,name=WebToken,proto3,oneof"`
}

type Event_ClusterNetworkingConfig struct {
	// ClusterNetworkingConfig is a resource for cluster networking configuration.
	ClusterNetworkingConfig *types.ClusterNetworkingConfigV2 `protobuf:"bytes,20,opt,name=ClusterNetworkingConfig,proto3,oneof"`
}

type Event_SessionRecordingConfig struct {
	// SessionRecordingConfig is a resource for session recording configuration.
	SessionRecordingConfig *types.SessionRecordingConfigV2 `protobuf:"bytes,21,opt,name=SessionRecordingConfig,proto3,oneof"`
}

type Event_AuthPreference struct {
	// AuthPreference is cluster auth preference.
	AuthPreference *types.AuthPreferenceV2 `protobuf:"bytes,22,opt,name=AuthPreference,proto3,oneof"`
}

type Event_ClusterAuditConfig struct {
	// ClusterAuditConfig is a resource for cluster audit configuration.
	ClusterAuditConfig *types.ClusterAuditConfigV2 `protobuf:"bytes,23,opt,name=ClusterAuditConfig,proto3,oneof"`
}

type Event_Lock struct {
	// Lock is a lock resource.
	Lock *types.LockV2 `protobuf:"bytes,24,opt,name=Lock,proto3,oneof"`
}

type Event_NetworkRestrictions struct {
	// NetworkRestrictions is a resource for network restrictions
	NetworkRestrictions *types.NetworkRestrictionsV4 `protobuf:"bytes,25,opt,name=NetworkRestrictions,proto3,oneof"`
}

type Event_WindowsDesktopService struct {
	// WindowsDesktopService is a resource for Windows desktop services.
	WindowsDesktopService *types.WindowsDesktopServiceV3 `protobuf:"bytes,26,opt,name=WindowsDesktopService,proto3,oneof"`
}

type Event_WindowsDesktop struct {
	// WindowsDesktop is a resource for Windows desktop host.
	WindowsDesktop *types.WindowsDesktopV3 `protobuf:"bytes,27,opt,name=WindowsDesktop,proto3,oneof"`
}

type Event_Database struct {
	// Database is a database resource.
	Database *types.DatabaseV3 `protobuf:"bytes,28,opt,name=Database,proto3,oneof"`
}

type Event_AppServer struct {
	// AppServer is an application server resource.
	AppServer *types.AppServerV3 `protobuf:"bytes,29,opt,name=AppServer,proto3,oneof"`
}

type Event_App struct {
	// App is an application resource.
	App *types.AppV3 `protobuf:"bytes,30,opt,name=App,proto3,oneof"`
}

type Event_SnowflakeSession struct {
	// SnowflakeSession is a Snowflake web session.
	SnowflakeSession *types.WebSessionV2 `protobuf:"bytes,31,opt,name=SnowflakeSession,proto3,oneof"`
}

type Event_KubernetesServer struct {
	// KubernetesServer is an Kubernetes server resource.
	KubernetesServer *types.KubernetesServerV3 `protobuf:"bytes,32,opt,name=KubernetesServer,proto3,oneof"`
}

type Event_KubernetesCluster struct {
	// KubernetesCluster is an Kubernetes cluster resource.
	KubernetesCluster *types.KubernetesClusterV3 `protobuf:"bytes,33,opt,name=KubernetesCluster,proto3,oneof"`
}

type Event_Installer struct {
	// Installer is an installer resource
	Installer *types.InstallerV1 `protobuf:"bytes,34,opt,name=Installer,proto3,oneof"`
}

type Event_DatabaseService struct {
	// DatabaseService is a DatabaseService resource
	DatabaseService *types.DatabaseServiceV1 `protobuf:"bytes,35,opt,name=DatabaseService,proto3,oneof"`
}

type Event_SAMLIdPServiceProvider struct {
	// SAMLIdPServiceProvider is a SAMLIdPServiceProvider resource
	SAMLIdPServiceProvider *types.SAMLIdPServiceProviderV1 `protobuf:"bytes,36,opt,name=SAMLIdPServiceProvider,proto3,oneof"`
}

type Event_SAMLIdPSession struct {
	// SAMLIdPSession is a SAML IdP session.
	SAMLIdPSession *types.WebSessionV2 `protobuf:"bytes,37,opt,name=SAMLIdPSession,proto3,oneof"`
}

type Event_UserGroup struct {
	// UserGroup is a UserGroup resource
	UserGroup *types.UserGroupV1 `protobuf:"bytes,38,opt,name=UserGroup,proto3,oneof"`
}

type Event_UIConfig struct {
	// UIConfig provides a way for users to adjust settings of the UI served by the proxy service.
	UIConfig *types.UIConfigV1 `protobuf:"bytes,39,opt,name=UIConfig,proto3,oneof"`
}

type Event_OktaImportRule struct {
	// OktaImportRule is an OktaImportRule resource.
	OktaImportRule *types.OktaImportRuleV1 `protobuf:"bytes,40,opt,name=OktaImportRule,proto3,oneof"`
}

type Event_OktaAssignment struct {
	// OktaAssignment is an OktaAssignment resource.
	OktaAssignment *types.OktaAssignmentV1 `protobuf:"bytes,41,opt,name=OktaAssignment,proto3,oneof"`
}

type Event_Integration struct {
	// Integration is an Integration resource.
	Integration *types.IntegrationV1 `protobuf:"bytes,42,opt,name=Integration,proto3,oneof"`
}

type Event_WatchStatus struct {
	// WatchStatus is an WatchStatus resource.
	WatchStatus *types.WatchStatusV1 `protobuf:"bytes,43,opt,name=WatchStatus,proto3,oneof"`
}

type Event_HeadlessAuthentication struct {
	// HeadlessAuthentication is a HeadlessAuthentication resource.
	HeadlessAuthentication *types.HeadlessAuthentication `protobuf:"bytes,44,opt,name=HeadlessAuthentication,proto3,oneof"`
}

type Event_AccessList struct {
	// AccessList is an AccessList resource.
	AccessList *v1.AccessList `protobuf:"bytes,45,opt,name=AccessList,proto3,oneof"`
}

type Event_UserLoginState struct {
	// UserLoginState is a UserLoginState resource.
	UserLoginState *v11.UserLoginState `protobuf:"bytes,46,opt,name=UserLoginState,proto3,oneof"`
}

type Event_AccessListMember struct {
	// AccessListMember is an access list member resource.
	AccessListMember *v1.Member `protobuf:"bytes,47,opt,name=AccessListMember,proto3,oneof"`
}

type Event_DiscoveryConfig struct {
	// DiscoveryConfig contains a list of matchers to be loaded dynamically by Discovery Services.
	DiscoveryConfig *v12.DiscoveryConfig `protobuf:"bytes,48,opt,name=DiscoveryConfig,proto3,oneof"`
}

type Event_AuditQuery struct {
	// AuditQuery is an audit query resource.
	AuditQuery *v13.AuditQuery `protobuf:"bytes,50,opt,name=AuditQuery,proto3,oneof"`
}

type Event_Report struct {
	// SecurityReport is a security report resource.
	Report *v13.Report `protobuf:"bytes,51,opt,name=Report,proto3,oneof"`
}

type Event_ReportState struct {
	// SecurityReportState is a security report state resource.
	ReportState *v13.ReportState `protobuf:"bytes,52,opt,name=ReportState,proto3,oneof"`
}

type Event_AccessListReview struct {
	// AccessListReview is an access list review resource.
	AccessListReview *v1.Review `protobuf:"bytes,53,opt,name=AccessListReview,proto3,oneof"`
}

type Event_AccessMonitoringRule struct {
	// AccessMonitoringRule is an access monitoring rule resource.
	AccessMonitoringRule *v14.AccessMonitoringRule `protobuf:"bytes,54,opt,name=AccessMonitoringRule,proto3,oneof"`
}

type Event_KubernetesWaitingContainer struct {
	// KubernetesWaitingContainer is a Kubernetes ephemeral container
	// waiting to be created.
	KubernetesWaitingContainer *v15.KubernetesWaitingContainer `protobuf:"bytes,55,opt,name=KubernetesWaitingContainer,proto3,oneof"`
}

type Event_UserNotification struct {
	// UserNotification is a user notification resource.
	UserNotification *v16.Notification `protobuf:"bytes,56,opt,name=UserNotification,proto3,oneof"`
}

type Event_GlobalNotification struct {
	// GlobalNotification is a global notification resource.
	GlobalNotification *v16.GlobalNotification `protobuf:"bytes,57,opt,name=GlobalNotification,proto3,oneof"`
}

type Event_CrownJewel struct {
	// CrownJewel is a Crown Jewel resource.
	CrownJewel *v17.CrownJewel `protobuf:"bytes,58,opt,name=CrownJewel,proto3,oneof"`
}

type Event_DatabaseObject struct {
	// DatabaseObject is a database object resource.
	DatabaseObject *v18.DatabaseObject `protobuf:"bytes,59,opt,name=DatabaseObject,proto3,oneof"`
}

type Event_BotInstance struct {
	// BotInstance is a Machine ID bot instance.
	BotInstance *v19.BotInstance `protobuf:"bytes,60,opt,name=BotInstance,proto3,oneof"`
}

type Event_AccessGraphSettings struct {
	// AccessGraphSettings is a resource for access graph settings.
	AccessGraphSettings *v110.AccessGraphSettings `protobuf:"bytes,61,opt,name=AccessGraphSettings,proto3,oneof"`
}

type Event_SPIFFEFederation struct {
	// SPIFFEFederation is a resource for SPIFFE federation.
	SPIFFEFederation *v19.SPIFFEFederation `protobuf:"bytes,62,opt,name=SPIFFEFederation,proto3,oneof"`
}

type Event_AutoUpdateConfig struct {
	// AutoUpdateConfig is a resource for autoupdate config.
	AutoUpdateConfig *v111.AutoUpdateConfig `protobuf:"bytes,64,opt,name=AutoUpdateConfig,proto3,oneof"`
}

type Event_AutoUpdateVersion struct {
	// AutoUpdateVersion is a resource for autoupdate version.
	AutoUpdateVersion *v111.AutoUpdateVersion `protobuf:"bytes,65,opt,name=AutoUpdateVersion,proto3,oneof"`
}

type Event_StaticHostUserV2 struct {
	// StaticHostUserV2 is a resource for static host users.
	StaticHostUserV2 *v2.StaticHostUser `protobuf:"bytes,66,opt,name=StaticHostUserV2,proto3,oneof"`
}

type Event_UserTask struct {
	// UserTask is a resource for user task.
	UserTask *v112.UserTask `protobuf:"bytes,67,opt,name=UserTask,proto3,oneof"`
}

type Event_DynamicWindowsDesktop struct {
	// DynamicWindowsDesktop is a resource for dynamic Windows desktop host.
	DynamicWindowsDesktop *types.DynamicWindowsDesktopV1 `protobuf:"bytes,69,opt,name=DynamicWindowsDesktop,proto3,oneof"`
}

type Event_ProvisioningPrincipalState struct {
	// ProvisioningPrincipalState is a resource for tracking the provisioning of
	// users and groups into downstream systems.
	ProvisioningPrincipalState *v113.PrincipalState `protobuf:"bytes,70,opt,name=ProvisioningPrincipalState,proto3,oneof"`
}

type Event_AutoUpdateAgentRollout struct {
	// AutoUpdateVersion is a resource for controlling the autoupdate agent rollout.
	AutoUpdateAgentRollout *v111.AutoUpdateAgentRollout `protobuf:"bytes,71,opt,name=AutoUpdateAgentRollout,proto3,oneof"`
}

type Event_IdentityCenterAccount struct {
	// IdentityCenterAccount is a resource for tracking Identity Center accounts
	IdentityCenterAccount *v114.Account `protobuf:"bytes,72,opt,name=IdentityCenterAccount,proto3,oneof"`
}

type Event_IdentityCenterPrincipalAssignment struct {
	// IdentityCenterPrincipalAssignment is a resource for tracking the AWS
	// Permission Sets assigned to a Teleport user or AAccess List
	IdentityCenterPrincipalAssignment *v114.PrincipalAssignment `protobuf:"bytes,73,opt,name=IdentityCenterPrincipalAssignment,proto3,oneof"`
}

type Event_IdentityCenterAccountAssignment struct {
	// IdentityCenterAccountlAssignment is a resource representing a potential
	// Permission Set grant on a specific AWS account.
	IdentityCenterAccountAssignment *v114.AccountAssignment `protobuf:"bytes,74,opt,name=IdentityCenterAccountAssignment,proto3,oneof"`
}

type Event_PluginStaticCredentials struct {
	// PluginStaticCredentials is filled in PluginStaticCredentials related events
	PluginStaticCredentials *types.PluginStaticCredentialsV1 `protobuf:"bytes,75,opt,name=PluginStaticCredentials,proto3,oneof"`
}

type Event_WorkloadIdentity struct {
	// WorkloadIdentity is a resource for workload identity.
	WorkloadIdentity *v115.WorkloadIdentity `protobuf:"bytes,76,opt,name=WorkloadIdentity,proto3,oneof"`
}

type Event_WorkloadIdentityX509Revocation struct {
	// WorkloadIdentityX509Revocation is a resource for workload identity x509 revocation.
	WorkloadIdentityX509Revocation *v115.WorkloadIdentityX509Revocation `protobuf:"bytes,77,opt,name=WorkloadIdentityX509Revocation,proto3,oneof"`
}

type Event_HealthCheckConfig struct {
	// HealthCheckConfig is a resource for configuring health checks.
	HealthCheckConfig *v116.HealthCheckConfig `protobuf:"bytes,78,opt,name=HealthCheckConfig,proto3,oneof"`
}

func (*Event_ResourceHeader) isEvent_Resource() {}

func (*Event_CertAuthority) isEvent_Resource() {}

func (*Event_StaticTokens) isEvent_Resource() {}

func (*Event_ProvisionToken) isEvent_Resource() {}

func (*Event_ClusterName) isEvent_Resource() {}

func (*Event_User) isEvent_Resource() {}

func (*Event_Role) isEvent_Resource() {}

func (*Event_Namespace) isEvent_Resource() {}

func (*Event_Server) isEvent_Resource() {}

func (*Event_ReverseTunnel) isEvent_Resource() {}

func (*Event_TunnelConnection) isEvent_Resource() {}

func (*Event_AccessRequest) isEvent_Resource() {}

func (*Event_AppSession) isEvent_Resource() {}

func (*Event_RemoteCluster) isEvent_Resource() {}

func (*Event_DatabaseServer) isEvent_Resource() {}

func (*Event_WebSession) isEvent_Resource() {}

func (*Event_WebToken) isEvent_Resource() {}

func (*Event_ClusterNetworkingConfig) isEvent_Resource() {}

func (*Event_SessionRecordingConfig) isEvent_Resource() {}

func (*Event_AuthPreference) isEvent_Resource() {}

func (*Event_ClusterAuditConfig) isEvent_Resource() {}

func (*Event_Lock) isEvent_Resource() {}

func (*Event_NetworkRestrictions) isEvent_Resource() {}

func (*Event_WindowsDesktopService) isEvent_Resource() {}

func (*Event_WindowsDesktop) isEvent_Resource() {}

func (*Event_Database) isEvent_Resource() {}

func (*Event_AppServer) isEvent_Resource() {}

func (*Event_App) isEvent_Resource() {}

func (*Event_SnowflakeSession) isEvent_Resource() {}

func (*Event_KubernetesServer) isEvent_Resource() {}

func (*Event_KubernetesCluster) isEvent_Resource() {}

func (*Event_Installer) isEvent_Resource() {}

func (*Event_DatabaseService) isEvent_Resource() {}

func (*Event_SAMLIdPServiceProvider) isEvent_Resource() {}

func (*Event_SAMLIdPSession) isEvent_Resource() {}

func (*Event_UserGroup) isEvent_Resource() {}

func (*Event_UIConfig) isEvent_Resource() {}

func (*Event_OktaImportRule) isEvent_Resource() {}

func (*Event_OktaAssignment) isEvent_Resource() {}

func (*Event_Integration) isEvent_Resource() {}

func (*Event_WatchStatus) isEvent_Resource() {}

func (*Event_HeadlessAuthentication) isEvent_Resource() {}

func (*Event_AccessList) isEvent_Resource() {}

func (*Event_UserLoginState) isEvent_Resource() {}

func (*Event_AccessListMember) isEvent_Resource() {}

func (*Event_DiscoveryConfig) isEvent_Resource() {}

func (*Event_AuditQuery) isEvent_Resource() {}

func (*Event_Report) isEvent_Resource() {}

func (*Event_ReportState) isEvent_Resource() {}

func (*Event_AccessListReview) isEvent_Resource() {}

func (*Event_AccessMonitoringRule) isEvent_Resource() {}

func (*Event_KubernetesWaitingContainer) isEvent_Resource() {}

func (*Event_UserNotification) isEvent_Resource() {}

func (*Event_GlobalNotification) isEvent_Resource() {}

func (*Event_CrownJewel) isEvent_Resource() {}

func (*Event_DatabaseObject) isEvent_Resource() {}

func (*Event_BotInstance) isEvent_Resource() {}

func (*Event_AccessGraphSettings) isEvent_Resource() {}

func (*Event_SPIFFEFederation) isEvent_Resource() {}

func (*Event_AutoUpdateConfig) isEvent_Resource() {}

func (*Event_AutoUpdateVersion) isEvent_Resource() {}

func (*Event_StaticHostUserV2) isEvent_Resource() {}

func (*Event_UserTask) isEvent_Resource() {}

func (*Event_DynamicWindowsDesktop) isEvent_Resource() {}

func (*Event_ProvisioningPrincipalState) isEvent_Resource() {}

func (*Event_AutoUpdateAgentRollout) isEvent_Resource() {}

func (*Event_IdentityCenterAccount) isEvent_Resource() {}

func (*Event_IdentityCenterPrincipalAssignment) isEvent_Resource() {}

func (*Event_IdentityCenterAccountAssignment) isEvent_Resource() {}

func (*Event_PluginStaticCredentials) isEvent_Resource() {}

func (*Event_WorkloadIdentity) isEvent_Resource() {}

func (*Event_WorkloadIdentityX509Revocation) isEvent_Resource() {}

func (*Event_HealthCheckConfig) isEvent_Resource() {}

var File_teleport_legacy_client_proto_event_proto protoreflect.FileDescriptor

const file_teleport_legacy_client_proto_event_proto_rawDesc = "" +
	"\n" +
	"(teleport/legacy/client/proto/event.proto\x12\x05proto\x1a'teleport/accesslist/v1/accesslist.proto\x1a?teleport/accessmonitoringrules/v1/access_monitoring_rules.proto\x1a'teleport/autoupdate/v1/autoupdate.proto\x1a5teleport/clusterconfig/v1/access_graph_settings.proto\x1a'teleport/crownjewel/v1/crownjewel.proto\x1a#teleport/dbobject/v1/dbobject.proto\x1a1teleport/discoveryconfig/v1/discoveryconfig.proto\x1a7teleport/healthcheckconfig/v1/health_check_config.proto\x1a/teleport/identitycenter/v1/identitycenter.proto\x1a;teleport/kubewaitingcontainer/v1/kubewaitingcontainer.proto\x1a!teleport/legacy/types/types.proto\x1a(teleport/machineid/v1/bot_instance.proto\x1a&teleport/machineid/v1/federation.proto\x1a-teleport/notifications/v1/notifications.proto\x1a+teleport/provisioning/v1/provisioning.proto\x1a'teleport/secreports/v1/secreports.proto\x1a/teleport/userloginstate/v1/userloginstate.proto\x1a1teleport/userprovisioning/v2/statichostuser.proto\x1a&teleport/usertasks/v1/user_tasks.proto\x1a+teleport/workloadidentity/v1/resource.proto\x1a6teleport/workloadidentity/v1/revocation_resource.proto\"\xf6+\n" +
	"\x05Event\x12$\n" +
	"\x04Type\x18\x01 \x01(\x0e2\x10.proto.OperationR\x04Type\x12?\n" +
	"\x0eResourceHeader\x18\x02 \x01(\v2\x15.types.ResourceHeaderH\x00R\x0eResourceHeader\x12>\n" +
	"\rCertAuthority\x18\x03 \x01(\v2\x16.types.CertAuthorityV2H\x00R\rCertAuthority\x12;\n" +
	"\fStaticTokens\x18\x04 \x01(\v2\x15.types.StaticTokensV2H\x00R\fStaticTokens\x12A\n" +
	"\x0eProvisionToken\x18\x05 \x01(\v2\x17.types.ProvisionTokenV2H\x00R\x0eProvisionToken\x128\n" +
	"\vClusterName\x18\x06 \x01(\v2\x14.types.ClusterNameV2H\x00R\vClusterName\x12#\n" +
	"\x04User\x18\b \x01(\v2\r.types.UserV2H\x00R\x04User\x12#\n" +
	"\x04Role\x18\t \x01(\v2\r.types.RoleV6H\x00R\x04Role\x120\n" +
	"\tNamespace\x18\n" +
	" \x01(\v2\x10.types.NamespaceH\x00R\tNamespace\x12)\n" +
	"\x06Server\x18\v \x01(\v2\x0f.types.ServerV2H\x00R\x06Server\x12>\n" +
	"\rReverseTunnel\x18\f \x01(\v2\x16.types.ReverseTunnelV2H\x00R\rReverseTunnel\x12G\n" +
	"\x10TunnelConnection\x18\r \x01(\v2\x19.types.TunnelConnectionV2H\x00R\x10TunnelConnection\x12>\n" +
	"\rAccessRequest\x18\x0e \x01(\v2\x16.types.AccessRequestV3H\x00R\rAccessRequest\x125\n" +
	"\n" +
	"AppSession\x18\x0f \x01(\v2\x13.types.WebSessionV2H\x00R\n" +
	"AppSession\x12>\n" +
	"\rRemoteCluster\x18\x10 \x01(\v2\x16.types.RemoteClusterV3H\x00R\rRemoteCluster\x12A\n" +
	"\x0eDatabaseServer\x18\x11 \x01(\v2\x17.types.DatabaseServerV3H\x00R\x0eDatabaseServer\x125\n" +
	"\n" +
	"WebSession\x18\x12 \x01(\v2\x13.types.WebSessionV2H\x00R\n" +
	"WebSession\x12/\n" +
	"\bWebToken\x18\x13 \x01(\v2\x11.types.WebTokenV3H\x00R\bWebToken\x12\\\n" +
	"\x17ClusterNetworkingConfig\x18\x14 \x01(\v2 .types.ClusterNetworkingConfigV2H\x00R\x17ClusterNetworkingConfig\x12Y\n" +
	"\x16SessionRecordingConfig\x18\x15 \x01(\v2\x1f.types.SessionRecordingConfigV2H\x00R\x16SessionRecordingConfig\x12A\n" +
	"\x0eAuthPreference\x18\x16 \x01(\v2\x17.types.AuthPreferenceV2H\x00R\x0eAuthPreference\x12M\n" +
	"\x12ClusterAuditConfig\x18\x17 \x01(\v2\x1b.types.ClusterAuditConfigV2H\x00R\x12ClusterAuditConfig\x12#\n" +
	"\x04Lock\x18\x18 \x01(\v2\r.types.LockV2H\x00R\x04Lock\x12P\n" +
	"\x13NetworkRestrictions\x18\x19 \x01(\v2\x1c.types.NetworkRestrictionsV4H\x00R\x13NetworkRestrictions\x12V\n" +
	"\x15WindowsDesktopService\x18\x1a \x01(\v2\x1e.types.WindowsDesktopServiceV3H\x00R\x15WindowsDesktopService\x12A\n" +
	"\x0eWindowsDesktop\x18\x1b \x01(\v2\x17.types.WindowsDesktopV3H\x00R\x0eWindowsDesktop\x12/\n" +
	"\bDatabase\x18\x1c \x01(\v2\x11.types.DatabaseV3H\x00R\bDatabase\x122\n" +
	"\tAppServer\x18\x1d \x01(\v2\x12.types.AppServerV3H\x00R\tAppServer\x12 \n" +
	"\x03App\x18\x1e \x01(\v2\f.types.AppV3H\x00R\x03App\x12A\n" +
	"\x10SnowflakeSession\x18\x1f \x01(\v2\x13.types.WebSessionV2H\x00R\x10SnowflakeSession\x12G\n" +
	"\x10KubernetesServer\x18  \x01(\v2\x19.types.KubernetesServerV3H\x00R\x10KubernetesServer\x12J\n" +
	"\x11KubernetesCluster\x18! \x01(\v2\x1a.types.KubernetesClusterV3H\x00R\x11KubernetesCluster\x122\n" +
	"\tInstaller\x18\" \x01(\v2\x12.types.InstallerV1H\x00R\tInstaller\x12D\n" +
	"\x0fDatabaseService\x18# \x01(\v2\x18.types.DatabaseServiceV1H\x00R\x0fDatabaseService\x12Y\n" +
	"\x16SAMLIdPServiceProvider\x18$ \x01(\v2\x1f.types.SAMLIdPServiceProviderV1H\x00R\x16SAMLIdPServiceProvider\x12=\n" +
	"\x0eSAMLIdPSession\x18% \x01(\v2\x13.types.WebSessionV2H\x00R\x0eSAMLIdPSession\x122\n" +
	"\tUserGroup\x18& \x01(\v2\x12.types.UserGroupV1H\x00R\tUserGroup\x12/\n" +
	"\bUIConfig\x18' \x01(\v2\x11.types.UIConfigV1H\x00R\bUIConfig\x12A\n" +
	"\x0eOktaImportRule\x18( \x01(\v2\x17.types.OktaImportRuleV1H\x00R\x0eOktaImportRule\x12A\n" +
	"\x0eOktaAssignment\x18) \x01(\v2\x17.types.OktaAssignmentV1H\x00R\x0eOktaAssignment\x128\n" +
	"\vIntegration\x18* \x01(\v2\x14.types.IntegrationV1H\x00R\vIntegration\x128\n" +
	"\vWatchStatus\x18+ \x01(\v2\x14.types.WatchStatusV1H\x00R\vWatchStatus\x12W\n" +
	"\x16HeadlessAuthentication\x18, \x01(\v2\x1d.types.HeadlessAuthenticationH\x00R\x16HeadlessAuthentication\x12D\n" +
	"\n" +
	"AccessList\x18- \x01(\v2\".teleport.accesslist.v1.AccessListH\x00R\n" +
	"AccessList\x12T\n" +
	"\x0eUserLoginState\x18. \x01(\v2*.teleport.userloginstate.v1.UserLoginStateH\x00R\x0eUserLoginState\x12L\n" +
	"\x10AccessListMember\x18/ \x01(\v2\x1e.teleport.accesslist.v1.MemberH\x00R\x10AccessListMember\x12X\n" +
	"\x0fDiscoveryConfig\x180 \x01(\v2,.teleport.discoveryconfig.v1.DiscoveryConfigH\x00R\x0fDiscoveryConfig\x12D\n" +
	"\n" +
	"AuditQuery\x182 \x01(\v2\".teleport.secreports.v1.AuditQueryH\x00R\n" +
	"AuditQuery\x128\n" +
	"\x06Report\x183 \x01(\v2\x1e.teleport.secreports.v1.ReportH\x00R\x06Report\x12G\n" +
	"\vReportState\x184 \x01(\v2#.teleport.secreports.v1.ReportStateH\x00R\vReportState\x12L\n" +
	"\x10AccessListReview\x185 \x01(\v2\x1e.teleport.accesslist.v1.ReviewH\x00R\x10AccessListReview\x12m\n" +
	"\x14AccessMonitoringRule\x186 \x01(\v27.teleport.accessmonitoringrules.v1.AccessMonitoringRuleH\x00R\x14AccessMonitoringRule\x12~\n" +
	"\x1aKubernetesWaitingContainer\x187 \x01(\v2<.teleport.kubewaitingcontainer.v1.KubernetesWaitingContainerH\x00R\x1aKubernetesWaitingContainer\x12U\n" +
	"\x10UserNotification\x188 \x01(\v2'.teleport.notifications.v1.NotificationH\x00R\x10UserNotification\x12_\n" +
	"\x12GlobalNotification\x189 \x01(\v2-.teleport.notifications.v1.GlobalNotificationH\x00R\x12GlobalNotification\x12D\n" +
	"\n" +
	"CrownJewel\x18: \x01(\v2\".teleport.crownjewel.v1.CrownJewelH\x00R\n" +
	"CrownJewel\x12N\n" +
	"\x0eDatabaseObject\x18; \x01(\v2$.teleport.dbobject.v1.DatabaseObjectH\x00R\x0eDatabaseObject\x12F\n" +
	"\vBotInstance\x18< \x01(\v2\".teleport.machineid.v1.BotInstanceH\x00R\vBotInstance\x12b\n" +
	"\x13AccessGraphSettings\x18= \x01(\v2..teleport.clusterconfig.v1.AccessGraphSettingsH\x00R\x13AccessGraphSettings\x12U\n" +
	"\x10SPIFFEFederation\x18> \x01(\v2'.teleport.machineid.v1.SPIFFEFederationH\x00R\x10SPIFFEFederation\x12V\n" +
	"\x10AutoUpdateConfig\x18@ \x01(\v2(.teleport.autoupdate.v1.AutoUpdateConfigH\x00R\x10AutoUpdateConfig\x12Y\n" +
	"\x11AutoUpdateVersion\x18A \x01(\v2).teleport.autoupdate.v1.AutoUpdateVersionH\x00R\x11AutoUpdateVersion\x12Z\n" +
	"\x10StaticHostUserV2\x18B \x01(\v2,.teleport.userprovisioning.v2.StaticHostUserH\x00R\x10StaticHostUserV2\x12=\n" +
	"\bUserTask\x18C \x01(\v2\x1f.teleport.usertasks.v1.UserTaskH\x00R\bUserTask\x12V\n" +
	"\x15DynamicWindowsDesktop\x18E \x01(\v2\x1e.types.DynamicWindowsDesktopV1H\x00R\x15DynamicWindowsDesktop\x12j\n" +
	"\x1aProvisioningPrincipalState\x18F \x01(\v2(.teleport.provisioning.v1.PrincipalStateH\x00R\x1aProvisioningPrincipalState\x12h\n" +
	"\x16AutoUpdateAgentRollout\x18G \x01(\v2..teleport.autoupdate.v1.AutoUpdateAgentRolloutH\x00R\x16AutoUpdateAgentRollout\x12[\n" +
	"\x15IdentityCenterAccount\x18H \x01(\v2#.teleport.identitycenter.v1.AccountH\x00R\x15IdentityCenterAccount\x12\x7f\n" +
	"!IdentityCenterPrincipalAssignment\x18I \x01(\v2/.teleport.identitycenter.v1.PrincipalAssignmentH\x00R!IdentityCenterPrincipalAssignment\x12y\n" +
	"\x1fIdentityCenterAccountAssignment\x18J \x01(\v2-.teleport.identitycenter.v1.AccountAssignmentH\x00R\x1fIdentityCenterAccountAssignment\x12\\\n" +
	"\x17PluginStaticCredentials\x18K \x01(\v2 .types.PluginStaticCredentialsV1H\x00R\x17PluginStaticCredentials\x12\\\n" +
	"\x10WorkloadIdentity\x18L \x01(\v2..teleport.workloadidentity.v1.WorkloadIdentityH\x00R\x10WorkloadIdentity\x12\x86\x01\n" +
	"\x1eWorkloadIdentityX509Revocation\x18M \x01(\v2<.teleport.workloadidentity.v1.WorkloadIdentityX509RevocationH\x00R\x1eWorkloadIdentityX509Revocation\x12`\n" +
	"\x11HealthCheckConfig\x18N \x01(\v20.teleport.healthcheckconfig.v1.HealthCheckConfigH\x00R\x11HealthCheckConfigB\n" +
	"\n" +
	"\bResourceJ\x04\b\a\x10\bJ\x04\b1\x102J\x04\b?\x10@J\x04\bD\x10ER\x12ExternalCloudAuditR\x0eStaticHostUserR\x13AutoUpdateAgentPlan**\n" +
	"\tOperation\x12\b\n" +
	"\x04INIT\x10\x00\x12\a\n" +
	"\x03PUT\x10\x01\x12\n" +
	"\n" +
	"\x06DELETE\x10\x02B4Z2github.com/gravitational/teleport/api/client/protob\x06proto3"

var (
	file_teleport_legacy_client_proto_event_proto_rawDescOnce sync.Once
	file_teleport_legacy_client_proto_event_proto_rawDescData []byte
)

func file_teleport_legacy_client_proto_event_proto_rawDescGZIP() []byte {
	file_teleport_legacy_client_proto_event_proto_rawDescOnce.Do(func() {
		file_teleport_legacy_client_proto_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_teleport_legacy_client_proto_event_proto_rawDesc), len(file_teleport_legacy_client_proto_event_proto_rawDesc)))
	})
	return file_teleport_legacy_client_proto_event_proto_rawDescData
}

var file_teleport_legacy_client_proto_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_legacy_client_proto_event_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teleport_legacy_client_proto_event_proto_goTypes = []any{
	(Operation)(0),                              // 0: proto.Operation
	(*Event)(nil),                               // 1: proto.Event
	(*types.ResourceHeader)(nil),                // 2: types.ResourceHeader
	(*types.CertAuthorityV2)(nil),               // 3: types.CertAuthorityV2
	(*types.StaticTokensV2)(nil),                // 4: types.StaticTokensV2
	(*types.ProvisionTokenV2)(nil),              // 5: types.ProvisionTokenV2
	(*types.ClusterNameV2)(nil),                 // 6: types.ClusterNameV2
	(*types.UserV2)(nil),                        // 7: types.UserV2
	(*types.RoleV6)(nil),                        // 8: types.RoleV6
	(*types.Namespace)(nil),                     // 9: types.Namespace
	(*types.ServerV2)(nil),                      // 10: types.ServerV2
	(*types.ReverseTunnelV2)(nil),               // 11: types.ReverseTunnelV2
	(*types.TunnelConnectionV2)(nil),            // 12: types.TunnelConnectionV2
	(*types.AccessRequestV3)(nil),               // 13: types.AccessRequestV3
	(*types.WebSessionV2)(nil),                  // 14: types.WebSessionV2
	(*types.RemoteClusterV3)(nil),               // 15: types.RemoteClusterV3
	(*types.DatabaseServerV3)(nil),              // 16: types.DatabaseServerV3
	(*types.WebTokenV3)(nil),                    // 17: types.WebTokenV3
	(*types.ClusterNetworkingConfigV2)(nil),     // 18: types.ClusterNetworkingConfigV2
	(*types.SessionRecordingConfigV2)(nil),      // 19: types.SessionRecordingConfigV2
	(*types.AuthPreferenceV2)(nil),              // 20: types.AuthPreferenceV2
	(*types.ClusterAuditConfigV2)(nil),          // 21: types.ClusterAuditConfigV2
	(*types.LockV2)(nil),                        // 22: types.LockV2
	(*types.NetworkRestrictionsV4)(nil),         // 23: types.NetworkRestrictionsV4
	(*types.WindowsDesktopServiceV3)(nil),       // 24: types.WindowsDesktopServiceV3
	(*types.WindowsDesktopV3)(nil),              // 25: types.WindowsDesktopV3
	(*types.DatabaseV3)(nil),                    // 26: types.DatabaseV3
	(*types.AppServerV3)(nil),                   // 27: types.AppServerV3
	(*types.AppV3)(nil),                         // 28: types.AppV3
	(*types.KubernetesServerV3)(nil),            // 29: types.KubernetesServerV3
	(*types.KubernetesClusterV3)(nil),           // 30: types.KubernetesClusterV3
	(*types.InstallerV1)(nil),                   // 31: types.InstallerV1
	(*types.DatabaseServiceV1)(nil),             // 32: types.DatabaseServiceV1
	(*types.SAMLIdPServiceProviderV1)(nil),      // 33: types.SAMLIdPServiceProviderV1
	(*types.UserGroupV1)(nil),                   // 34: types.UserGroupV1
	(*types.UIConfigV1)(nil),                    // 35: types.UIConfigV1
	(*types.OktaImportRuleV1)(nil),              // 36: types.OktaImportRuleV1
	(*types.OktaAssignmentV1)(nil),              // 37: types.OktaAssignmentV1
	(*types.IntegrationV1)(nil),                 // 38: types.IntegrationV1
	(*types.WatchStatusV1)(nil),                 // 39: types.WatchStatusV1
	(*types.HeadlessAuthentication)(nil),        // 40: types.HeadlessAuthentication
	(*v1.AccessList)(nil),                       // 41: teleport.accesslist.v1.AccessList
	(*v11.UserLoginState)(nil),                  // 42: teleport.userloginstate.v1.UserLoginState
	(*v1.Member)(nil),                           // 43: teleport.accesslist.v1.Member
	(*v12.DiscoveryConfig)(nil),                 // 44: teleport.discoveryconfig.v1.DiscoveryConfig
	(*v13.AuditQuery)(nil),                      // 45: teleport.secreports.v1.AuditQuery
	(*v13.Report)(nil),                          // 46: teleport.secreports.v1.Report
	(*v13.ReportState)(nil),                     // 47: teleport.secreports.v1.ReportState
	(*v1.Review)(nil),                           // 48: teleport.accesslist.v1.Review
	(*v14.AccessMonitoringRule)(nil),            // 49: teleport.accessmonitoringrules.v1.AccessMonitoringRule
	(*v15.KubernetesWaitingContainer)(nil),      // 50: teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer
	(*v16.Notification)(nil),                    // 51: teleport.notifications.v1.Notification
	(*v16.GlobalNotification)(nil),              // 52: teleport.notifications.v1.GlobalNotification
	(*v17.CrownJewel)(nil),                      // 53: teleport.crownjewel.v1.CrownJewel
	(*v18.DatabaseObject)(nil),                  // 54: teleport.dbobject.v1.DatabaseObject
	(*v19.BotInstance)(nil),                     // 55: teleport.machineid.v1.BotInstance
	(*v110.AccessGraphSettings)(nil),            // 56: teleport.clusterconfig.v1.AccessGraphSettings
	(*v19.SPIFFEFederation)(nil),                // 57: teleport.machineid.v1.SPIFFEFederation
	(*v111.AutoUpdateConfig)(nil),               // 58: teleport.autoupdate.v1.AutoUpdateConfig
	(*v111.AutoUpdateVersion)(nil),              // 59: teleport.autoupdate.v1.AutoUpdateVersion
	(*v2.StaticHostUser)(nil),                   // 60: teleport.userprovisioning.v2.StaticHostUser
	(*v112.UserTask)(nil),                       // 61: teleport.usertasks.v1.UserTask
	(*types.DynamicWindowsDesktopV1)(nil),       // 62: types.DynamicWindowsDesktopV1
	(*v113.PrincipalState)(nil),                 // 63: teleport.provisioning.v1.PrincipalState
	(*v111.AutoUpdateAgentRollout)(nil),         // 64: teleport.autoupdate.v1.AutoUpdateAgentRollout
	(*v114.Account)(nil),                        // 65: teleport.identitycenter.v1.Account
	(*v114.PrincipalAssignment)(nil),            // 66: teleport.identitycenter.v1.PrincipalAssignment
	(*v114.AccountAssignment)(nil),              // 67: teleport.identitycenter.v1.AccountAssignment
	(*types.PluginStaticCredentialsV1)(nil),     // 68: types.PluginStaticCredentialsV1
	(*v115.WorkloadIdentity)(nil),               // 69: teleport.workloadidentity.v1.WorkloadIdentity
	(*v115.WorkloadIdentityX509Revocation)(nil), // 70: teleport.workloadidentity.v1.WorkloadIdentityX509Revocation
	(*v116.HealthCheckConfig)(nil),              // 71: teleport.healthcheckconfig.v1.HealthCheckConfig
}
var file_teleport_legacy_client_proto_event_proto_depIdxs = []int32{
	0,  // 0: proto.Event.Type:type_name -> proto.Operation
	2,  // 1: proto.Event.ResourceHeader:type_name -> types.ResourceHeader
	3,  // 2: proto.Event.CertAuthority:type_name -> types.CertAuthorityV2
	4,  // 3: proto.Event.StaticTokens:type_name -> types.StaticTokensV2
	5,  // 4: proto.Event.ProvisionToken:type_name -> types.ProvisionTokenV2
	6,  // 5: proto.Event.ClusterName:type_name -> types.ClusterNameV2
	7,  // 6: proto.Event.User:type_name -> types.UserV2
	8,  // 7: proto.Event.Role:type_name -> types.RoleV6
	9,  // 8: proto.Event.Namespace:type_name -> types.Namespace
	10, // 9: proto.Event.Server:type_name -> types.ServerV2
	11, // 10: proto.Event.ReverseTunnel:type_name -> types.ReverseTunnelV2
	12, // 11: proto.Event.TunnelConnection:type_name -> types.TunnelConnectionV2
	13, // 12: proto.Event.AccessRequest:type_name -> types.AccessRequestV3
	14, // 13: proto.Event.AppSession:type_name -> types.WebSessionV2
	15, // 14: proto.Event.RemoteCluster:type_name -> types.RemoteClusterV3
	16, // 15: proto.Event.DatabaseServer:type_name -> types.DatabaseServerV3
	14, // 16: proto.Event.WebSession:type_name -> types.WebSessionV2
	17, // 17: proto.Event.WebToken:type_name -> types.WebTokenV3
	18, // 18: proto.Event.ClusterNetworkingConfig:type_name -> types.ClusterNetworkingConfigV2
	19, // 19: proto.Event.SessionRecordingConfig:type_name -> types.SessionRecordingConfigV2
	20, // 20: proto.Event.AuthPreference:type_name -> types.AuthPreferenceV2
	21, // 21: proto.Event.ClusterAuditConfig:type_name -> types.ClusterAuditConfigV2
	22, // 22: proto.Event.Lock:type_name -> types.LockV2
	23, // 23: proto.Event.NetworkRestrictions:type_name -> types.NetworkRestrictionsV4
	24, // 24: proto.Event.WindowsDesktopService:type_name -> types.WindowsDesktopServiceV3
	25, // 25: proto.Event.WindowsDesktop:type_name -> types.WindowsDesktopV3
	26, // 26: proto.Event.Database:type_name -> types.DatabaseV3
	27, // 27: proto.Event.AppServer:type_name -> types.AppServerV3
	28, // 28: proto.Event.App:type_name -> types.AppV3
	14, // 29: proto.Event.SnowflakeSession:type_name -> types.WebSessionV2
	29, // 30: proto.Event.KubernetesServer:type_name -> types.KubernetesServerV3
	30, // 31: proto.Event.KubernetesCluster:type_name -> types.KubernetesClusterV3
	31, // 32: proto.Event.Installer:type_name -> types.InstallerV1
	32, // 33: proto.Event.DatabaseService:type_name -> types.DatabaseServiceV1
	33, // 34: proto.Event.SAMLIdPServiceProvider:type_name -> types.SAMLIdPServiceProviderV1
	14, // 35: proto.Event.SAMLIdPSession:type_name -> types.WebSessionV2
	34, // 36: proto.Event.UserGroup:type_name -> types.UserGroupV1
	35, // 37: proto.Event.UIConfig:type_name -> types.UIConfigV1
	36, // 38: proto.Event.OktaImportRule:type_name -> types.OktaImportRuleV1
	37, // 39: proto.Event.OktaAssignment:type_name -> types.OktaAssignmentV1
	38, // 40: proto.Event.Integration:type_name -> types.IntegrationV1
	39, // 41: proto.Event.WatchStatus:type_name -> types.WatchStatusV1
	40, // 42: proto.Event.HeadlessAuthentication:type_name -> types.HeadlessAuthentication
	41, // 43: proto.Event.AccessList:type_name -> teleport.accesslist.v1.AccessList
	42, // 44: proto.Event.UserLoginState:type_name -> teleport.userloginstate.v1.UserLoginState
	43, // 45: proto.Event.AccessListMember:type_name -> teleport.accesslist.v1.Member
	44, // 46: proto.Event.DiscoveryConfig:type_name -> teleport.discoveryconfig.v1.DiscoveryConfig
	45, // 47: proto.Event.AuditQuery:type_name -> teleport.secreports.v1.AuditQuery
	46, // 48: proto.Event.Report:type_name -> teleport.secreports.v1.Report
	47, // 49: proto.Event.ReportState:type_name -> teleport.secreports.v1.ReportState
	48, // 50: proto.Event.AccessListReview:type_name -> teleport.accesslist.v1.Review
	49, // 51: proto.Event.AccessMonitoringRule:type_name -> teleport.accessmonitoringrules.v1.AccessMonitoringRule
	50, // 52: proto.Event.KubernetesWaitingContainer:type_name -> teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer
	51, // 53: proto.Event.UserNotification:type_name -> teleport.notifications.v1.Notification
	52, // 54: proto.Event.GlobalNotification:type_name -> teleport.notifications.v1.GlobalNotification
	53, // 55: proto.Event.CrownJewel:type_name -> teleport.crownjewel.v1.CrownJewel
	54, // 56: proto.Event.DatabaseObject:type_name -> teleport.dbobject.v1.DatabaseObject
	55, // 57: proto.Event.BotInstance:type_name -> teleport.machineid.v1.BotInstance
	56, // 58: proto.Event.AccessGraphSettings:type_name -> teleport.clusterconfig.v1.AccessGraphSettings
	57, // 59: proto.Event.SPIFFEFederation:type_name -> teleport.machineid.v1.SPIFFEFederation
	58, // 60: proto.Event.AutoUpdateConfig:type_name -> teleport.autoupdate.v1.AutoUpdateConfig
	59, // 61: proto.Event.AutoUpdateVersion:type_name -> teleport.autoupdate.v1.AutoUpdateVersion
	60, // 62: proto.Event.StaticHostUserV2:type_name -> teleport.userprovisioning.v2.StaticHostUser
	61, // 63: proto.Event.UserTask:type_name -> teleport.usertasks.v1.UserTask
	62, // 64: proto.Event.DynamicWindowsDesktop:type_name -> types.DynamicWindowsDesktopV1
	63, // 65: proto.Event.ProvisioningPrincipalState:type_name -> teleport.provisioning.v1.PrincipalState
	64, // 66: proto.Event.AutoUpdateAgentRollout:type_name -> teleport.autoupdate.v1.AutoUpdateAgentRollout
	65, // 67: proto.Event.IdentityCenterAccount:type_name -> teleport.identitycenter.v1.Account
	66, // 68: proto.Event.IdentityCenterPrincipalAssignment:type_name -> teleport.identitycenter.v1.PrincipalAssignment
	67, // 69: proto.Event.IdentityCenterAccountAssignment:type_name -> teleport.identitycenter.v1.AccountAssignment
	68, // 70: proto.Event.PluginStaticCredentials:type_name -> types.PluginStaticCredentialsV1
	69, // 71: proto.Event.WorkloadIdentity:type_name -> teleport.workloadidentity.v1.WorkloadIdentity
	70, // 72: proto.Event.WorkloadIdentityX509Revocation:type_name -> teleport.workloadidentity.v1.WorkloadIdentityX509Revocation
	71, // 73: proto.Event.HealthCheckConfig:type_name -> teleport.healthcheckconfig.v1.HealthCheckConfig
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_teleport_legacy_client_proto_event_proto_init() }
func file_teleport_legacy_client_proto_event_proto_init() {
	if File_teleport_legacy_client_proto_event_proto != nil {
		return
	}
	file_teleport_legacy_client_proto_event_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_ResourceHeader)(nil),
		(*Event_CertAuthority)(nil),
		(*Event_StaticTokens)(nil),
		(*Event_ProvisionToken)(nil),
		(*Event_ClusterName)(nil),
		(*Event_User)(nil),
		(*Event_Role)(nil),
		(*Event_Namespace)(nil),
		(*Event_Server)(nil),
		(*Event_ReverseTunnel)(nil),
		(*Event_TunnelConnection)(nil),
		(*Event_AccessRequest)(nil),
		(*Event_AppSession)(nil),
		(*Event_RemoteCluster)(nil),
		(*Event_DatabaseServer)(nil),
		(*Event_WebSession)(nil),
		(*Event_WebToken)(nil),
		(*Event_ClusterNetworkingConfig)(nil),
		(*Event_SessionRecordingConfig)(nil),
		(*Event_AuthPreference)(nil),
		(*Event_ClusterAuditConfig)(nil),
		(*Event_Lock)(nil),
		(*Event_NetworkRestrictions)(nil),
		(*Event_WindowsDesktopService)(nil),
		(*Event_WindowsDesktop)(nil),
		(*Event_Database)(nil),
		(*Event_AppServer)(nil),
		(*Event_App)(nil),
		(*Event_SnowflakeSession)(nil),
		(*Event_KubernetesServer)(nil),
		(*Event_KubernetesCluster)(nil),
		(*Event_Installer)(nil),
		(*Event_DatabaseService)(nil),
		(*Event_SAMLIdPServiceProvider)(nil),
		(*Event_SAMLIdPSession)(nil),
		(*Event_UserGroup)(nil),
		(*Event_UIConfig)(nil),
		(*Event_OktaImportRule)(nil),
		(*Event_OktaAssignment)(nil),
		(*Event_Integration)(nil),
		(*Event_WatchStatus)(nil),
		(*Event_HeadlessAuthentication)(nil),
		(*Event_AccessList)(nil),
		(*Event_UserLoginState)(nil),
		(*Event_AccessListMember)(nil),
		(*Event_DiscoveryConfig)(nil),
		(*Event_AuditQuery)(nil),
		(*Event_Report)(nil),
		(*Event_ReportState)(nil),
		(*Event_AccessListReview)(nil),
		(*Event_AccessMonitoringRule)(nil),
		(*Event_KubernetesWaitingContainer)(nil),
		(*Event_UserNotification)(nil),
		(*Event_GlobalNotification)(nil),
		(*Event_CrownJewel)(nil),
		(*Event_DatabaseObject)(nil),
		(*Event_BotInstance)(nil),
		(*Event_AccessGraphSettings)(nil),
		(*Event_SPIFFEFederation)(nil),
		(*Event_AutoUpdateConfig)(nil),
		(*Event_AutoUpdateVersion)(nil),
		(*Event_StaticHostUserV2)(nil),
		(*Event_UserTask)(nil),
		(*Event_DynamicWindowsDesktop)(nil),
		(*Event_ProvisioningPrincipalState)(nil),
		(*Event_AutoUpdateAgentRollout)(nil),
		(*Event_IdentityCenterAccount)(nil),
		(*Event_IdentityCenterPrincipalAssignment)(nil),
		(*Event_IdentityCenterAccountAssignment)(nil),
		(*Event_PluginStaticCredentials)(nil),
		(*Event_WorkloadIdentity)(nil),
		(*Event_WorkloadIdentityX509Revocation)(nil),
		(*Event_HealthCheckConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teleport_legacy_client_proto_event_proto_rawDesc), len(file_teleport_legacy_client_proto_event_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_legacy_client_proto_event_proto_goTypes,
		DependencyIndexes: file_teleport_legacy_client_proto_event_proto_depIdxs,
		EnumInfos:         file_teleport_legacy_client_proto_event_proto_enumTypes,
		MessageInfos:      file_teleport_legacy_client_proto_event_proto_msgTypes,
	}.Build()
	File_teleport_legacy_client_proto_event_proto = out.File
	file_teleport_legacy_client_proto_event_proto_goTypes = nil
	file_teleport_legacy_client_proto_event_proto_depIdxs = nil
}
