// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: teleport/legacy/client/proto/event.proto

package proto

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/accesslist/v1"
	v14 "github.com/gravitational/teleport/api/gen/proto/go/teleport/accessmonitoringrules/v1"
	v110 "github.com/gravitational/teleport/api/gen/proto/go/teleport/clusterconfig/v1"
	v17 "github.com/gravitational/teleport/api/gen/proto/go/teleport/crownjewel/v1"
	v18 "github.com/gravitational/teleport/api/gen/proto/go/teleport/dbobject/v1"
	v12 "github.com/gravitational/teleport/api/gen/proto/go/teleport/discoveryconfig/v1"
	v15 "github.com/gravitational/teleport/api/gen/proto/go/teleport/kubewaitingcontainer/v1"
	v19 "github.com/gravitational/teleport/api/gen/proto/go/teleport/machineid/v1"
	v16 "github.com/gravitational/teleport/api/gen/proto/go/teleport/notifications/v1"
	v13 "github.com/gravitational/teleport/api/gen/proto/go/teleport/secreports/v1"
	v11 "github.com/gravitational/teleport/api/gen/proto/go/teleport/userloginstate/v1"
	types "github.com/gravitational/teleport/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operation identifies type of operation
type Operation int32

const (
	// INIT is sent as a first sentinel event
	// on the watch channel
	Operation_INIT Operation = 0
	// PUT identifies created or updated object
	Operation_PUT Operation = 1
	// DELETE identifies deleted object
	Operation_DELETE Operation = 2
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "INIT",
		1: "PUT",
		2: "DELETE",
	}
	Operation_value = map[string]int32{
		"INIT":   0,
		"PUT":    1,
		"DELETE": 2,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_teleport_legacy_client_proto_event_proto_enumTypes[0].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_teleport_legacy_client_proto_event_proto_enumTypes[0]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_teleport_legacy_client_proto_event_proto_rawDescGZIP(), []int{0}
}

// Event returns cluster event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation identifies operation
	Type Operation `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.Operation" json:"Type,omitempty"`
	// Resource contains the updated resource
	//
	// Types that are assignable to Resource:
	//
	//	*Event_ResourceHeader
	//	*Event_CertAuthority
	//	*Event_StaticTokens
	//	*Event_ProvisionToken
	//	*Event_ClusterName
	//	*Event_User
	//	*Event_Role
	//	*Event_Namespace
	//	*Event_Server
	//	*Event_ReverseTunnel
	//	*Event_TunnelConnection
	//	*Event_AccessRequest
	//	*Event_AppSession
	//	*Event_RemoteCluster
	//	*Event_DatabaseServer
	//	*Event_WebSession
	//	*Event_WebToken
	//	*Event_ClusterNetworkingConfig
	//	*Event_SessionRecordingConfig
	//	*Event_AuthPreference
	//	*Event_ClusterAuditConfig
	//	*Event_Lock
	//	*Event_NetworkRestrictions
	//	*Event_WindowsDesktopService
	//	*Event_WindowsDesktop
	//	*Event_Database
	//	*Event_AppServer
	//	*Event_App
	//	*Event_SnowflakeSession
	//	*Event_KubernetesServer
	//	*Event_KubernetesCluster
	//	*Event_Installer
	//	*Event_DatabaseService
	//	*Event_SAMLIdPServiceProvider
	//	*Event_SAMLIdPSession
	//	*Event_UserGroup
	//	*Event_UIConfig
	//	*Event_OktaImportRule
	//	*Event_OktaAssignment
	//	*Event_Integration
	//	*Event_WatchStatus
	//	*Event_HeadlessAuthentication
	//	*Event_AccessList
	//	*Event_UserLoginState
	//	*Event_AccessListMember
	//	*Event_DiscoveryConfig
	//	*Event_AuditQuery
	//	*Event_Report
	//	*Event_ReportState
	//	*Event_AccessListReview
	//	*Event_AccessMonitoringRule
	//	*Event_KubernetesWaitingContainer
	//	*Event_UserNotification
	//	*Event_GlobalNotification
	//	*Event_CrownJewel
	//	*Event_DatabaseObject
	//	*Event_BotInstance
	//	*Event_AccessGraphSettings
	//	*Event_SPIFFEFederation
	Resource isEvent_Resource `protobuf_oneof:"Resource"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_legacy_client_proto_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_legacy_client_proto_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_teleport_legacy_client_proto_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetType() Operation {
	if x != nil {
		return x.Type
	}
	return Operation_INIT
}

func (m *Event) GetResource() isEvent_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Event) GetResourceHeader() *types.ResourceHeader {
	if x, ok := x.GetResource().(*Event_ResourceHeader); ok {
		return x.ResourceHeader
	}
	return nil
}

func (x *Event) GetCertAuthority() *types.CertAuthorityV2 {
	if x, ok := x.GetResource().(*Event_CertAuthority); ok {
		return x.CertAuthority
	}
	return nil
}

func (x *Event) GetStaticTokens() *types.StaticTokensV2 {
	if x, ok := x.GetResource().(*Event_StaticTokens); ok {
		return x.StaticTokens
	}
	return nil
}

func (x *Event) GetProvisionToken() *types.ProvisionTokenV2 {
	if x, ok := x.GetResource().(*Event_ProvisionToken); ok {
		return x.ProvisionToken
	}
	return nil
}

func (x *Event) GetClusterName() *types.ClusterNameV2 {
	if x, ok := x.GetResource().(*Event_ClusterName); ok {
		return x.ClusterName
	}
	return nil
}

func (x *Event) GetUser() *types.UserV2 {
	if x, ok := x.GetResource().(*Event_User); ok {
		return x.User
	}
	return nil
}

func (x *Event) GetRole() *types.RoleV6 {
	if x, ok := x.GetResource().(*Event_Role); ok {
		return x.Role
	}
	return nil
}

func (x *Event) GetNamespace() *types.Namespace {
	if x, ok := x.GetResource().(*Event_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (x *Event) GetServer() *types.ServerV2 {
	if x, ok := x.GetResource().(*Event_Server); ok {
		return x.Server
	}
	return nil
}

func (x *Event) GetReverseTunnel() *types.ReverseTunnelV2 {
	if x, ok := x.GetResource().(*Event_ReverseTunnel); ok {
		return x.ReverseTunnel
	}
	return nil
}

func (x *Event) GetTunnelConnection() *types.TunnelConnectionV2 {
	if x, ok := x.GetResource().(*Event_TunnelConnection); ok {
		return x.TunnelConnection
	}
	return nil
}

func (x *Event) GetAccessRequest() *types.AccessRequestV3 {
	if x, ok := x.GetResource().(*Event_AccessRequest); ok {
		return x.AccessRequest
	}
	return nil
}

func (x *Event) GetAppSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_AppSession); ok {
		return x.AppSession
	}
	return nil
}

func (x *Event) GetRemoteCluster() *types.RemoteClusterV3 {
	if x, ok := x.GetResource().(*Event_RemoteCluster); ok {
		return x.RemoteCluster
	}
	return nil
}

func (x *Event) GetDatabaseServer() *types.DatabaseServerV3 {
	if x, ok := x.GetResource().(*Event_DatabaseServer); ok {
		return x.DatabaseServer
	}
	return nil
}

func (x *Event) GetWebSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_WebSession); ok {
		return x.WebSession
	}
	return nil
}

func (x *Event) GetWebToken() *types.WebTokenV3 {
	if x, ok := x.GetResource().(*Event_WebToken); ok {
		return x.WebToken
	}
	return nil
}

func (x *Event) GetClusterNetworkingConfig() *types.ClusterNetworkingConfigV2 {
	if x, ok := x.GetResource().(*Event_ClusterNetworkingConfig); ok {
		return x.ClusterNetworkingConfig
	}
	return nil
}

func (x *Event) GetSessionRecordingConfig() *types.SessionRecordingConfigV2 {
	if x, ok := x.GetResource().(*Event_SessionRecordingConfig); ok {
		return x.SessionRecordingConfig
	}
	return nil
}

func (x *Event) GetAuthPreference() *types.AuthPreferenceV2 {
	if x, ok := x.GetResource().(*Event_AuthPreference); ok {
		return x.AuthPreference
	}
	return nil
}

func (x *Event) GetClusterAuditConfig() *types.ClusterAuditConfigV2 {
	if x, ok := x.GetResource().(*Event_ClusterAuditConfig); ok {
		return x.ClusterAuditConfig
	}
	return nil
}

func (x *Event) GetLock() *types.LockV2 {
	if x, ok := x.GetResource().(*Event_Lock); ok {
		return x.Lock
	}
	return nil
}

func (x *Event) GetNetworkRestrictions() *types.NetworkRestrictionsV4 {
	if x, ok := x.GetResource().(*Event_NetworkRestrictions); ok {
		return x.NetworkRestrictions
	}
	return nil
}

func (x *Event) GetWindowsDesktopService() *types.WindowsDesktopServiceV3 {
	if x, ok := x.GetResource().(*Event_WindowsDesktopService); ok {
		return x.WindowsDesktopService
	}
	return nil
}

func (x *Event) GetWindowsDesktop() *types.WindowsDesktopV3 {
	if x, ok := x.GetResource().(*Event_WindowsDesktop); ok {
		return x.WindowsDesktop
	}
	return nil
}

func (x *Event) GetDatabase() *types.DatabaseV3 {
	if x, ok := x.GetResource().(*Event_Database); ok {
		return x.Database
	}
	return nil
}

func (x *Event) GetAppServer() *types.AppServerV3 {
	if x, ok := x.GetResource().(*Event_AppServer); ok {
		return x.AppServer
	}
	return nil
}

func (x *Event) GetApp() *types.AppV3 {
	if x, ok := x.GetResource().(*Event_App); ok {
		return x.App
	}
	return nil
}

func (x *Event) GetSnowflakeSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_SnowflakeSession); ok {
		return x.SnowflakeSession
	}
	return nil
}

func (x *Event) GetKubernetesServer() *types.KubernetesServerV3 {
	if x, ok := x.GetResource().(*Event_KubernetesServer); ok {
		return x.KubernetesServer
	}
	return nil
}

func (x *Event) GetKubernetesCluster() *types.KubernetesClusterV3 {
	if x, ok := x.GetResource().(*Event_KubernetesCluster); ok {
		return x.KubernetesCluster
	}
	return nil
}

func (x *Event) GetInstaller() *types.InstallerV1 {
	if x, ok := x.GetResource().(*Event_Installer); ok {
		return x.Installer
	}
	return nil
}

func (x *Event) GetDatabaseService() *types.DatabaseServiceV1 {
	if x, ok := x.GetResource().(*Event_DatabaseService); ok {
		return x.DatabaseService
	}
	return nil
}

func (x *Event) GetSAMLIdPServiceProvider() *types.SAMLIdPServiceProviderV1 {
	if x, ok := x.GetResource().(*Event_SAMLIdPServiceProvider); ok {
		return x.SAMLIdPServiceProvider
	}
	return nil
}

func (x *Event) GetSAMLIdPSession() *types.WebSessionV2 {
	if x, ok := x.GetResource().(*Event_SAMLIdPSession); ok {
		return x.SAMLIdPSession
	}
	return nil
}

func (x *Event) GetUserGroup() *types.UserGroupV1 {
	if x, ok := x.GetResource().(*Event_UserGroup); ok {
		return x.UserGroup
	}
	return nil
}

func (x *Event) GetUIConfig() *types.UIConfigV1 {
	if x, ok := x.GetResource().(*Event_UIConfig); ok {
		return x.UIConfig
	}
	return nil
}

func (x *Event) GetOktaImportRule() *types.OktaImportRuleV1 {
	if x, ok := x.GetResource().(*Event_OktaImportRule); ok {
		return x.OktaImportRule
	}
	return nil
}

func (x *Event) GetOktaAssignment() *types.OktaAssignmentV1 {
	if x, ok := x.GetResource().(*Event_OktaAssignment); ok {
		return x.OktaAssignment
	}
	return nil
}

func (x *Event) GetIntegration() *types.IntegrationV1 {
	if x, ok := x.GetResource().(*Event_Integration); ok {
		return x.Integration
	}
	return nil
}

func (x *Event) GetWatchStatus() *types.WatchStatusV1 {
	if x, ok := x.GetResource().(*Event_WatchStatus); ok {
		return x.WatchStatus
	}
	return nil
}

func (x *Event) GetHeadlessAuthentication() *types.HeadlessAuthentication {
	if x, ok := x.GetResource().(*Event_HeadlessAuthentication); ok {
		return x.HeadlessAuthentication
	}
	return nil
}

func (x *Event) GetAccessList() *v1.AccessList {
	if x, ok := x.GetResource().(*Event_AccessList); ok {
		return x.AccessList
	}
	return nil
}

func (x *Event) GetUserLoginState() *v11.UserLoginState {
	if x, ok := x.GetResource().(*Event_UserLoginState); ok {
		return x.UserLoginState
	}
	return nil
}

func (x *Event) GetAccessListMember() *v1.Member {
	if x, ok := x.GetResource().(*Event_AccessListMember); ok {
		return x.AccessListMember
	}
	return nil
}

func (x *Event) GetDiscoveryConfig() *v12.DiscoveryConfig {
	if x, ok := x.GetResource().(*Event_DiscoveryConfig); ok {
		return x.DiscoveryConfig
	}
	return nil
}

func (x *Event) GetAuditQuery() *v13.AuditQuery {
	if x, ok := x.GetResource().(*Event_AuditQuery); ok {
		return x.AuditQuery
	}
	return nil
}

func (x *Event) GetReport() *v13.Report {
	if x, ok := x.GetResource().(*Event_Report); ok {
		return x.Report
	}
	return nil
}

func (x *Event) GetReportState() *v13.ReportState {
	if x, ok := x.GetResource().(*Event_ReportState); ok {
		return x.ReportState
	}
	return nil
}

func (x *Event) GetAccessListReview() *v1.Review {
	if x, ok := x.GetResource().(*Event_AccessListReview); ok {
		return x.AccessListReview
	}
	return nil
}

func (x *Event) GetAccessMonitoringRule() *v14.AccessMonitoringRule {
	if x, ok := x.GetResource().(*Event_AccessMonitoringRule); ok {
		return x.AccessMonitoringRule
	}
	return nil
}

func (x *Event) GetKubernetesWaitingContainer() *v15.KubernetesWaitingContainer {
	if x, ok := x.GetResource().(*Event_KubernetesWaitingContainer); ok {
		return x.KubernetesWaitingContainer
	}
	return nil
}

func (x *Event) GetUserNotification() *v16.Notification {
	if x, ok := x.GetResource().(*Event_UserNotification); ok {
		return x.UserNotification
	}
	return nil
}

func (x *Event) GetGlobalNotification() *v16.GlobalNotification {
	if x, ok := x.GetResource().(*Event_GlobalNotification); ok {
		return x.GlobalNotification
	}
	return nil
}

func (x *Event) GetCrownJewel() *v17.CrownJewel {
	if x, ok := x.GetResource().(*Event_CrownJewel); ok {
		return x.CrownJewel
	}
	return nil
}

func (x *Event) GetDatabaseObject() *v18.DatabaseObject {
	if x, ok := x.GetResource().(*Event_DatabaseObject); ok {
		return x.DatabaseObject
	}
	return nil
}

func (x *Event) GetBotInstance() *v19.BotInstance {
	if x, ok := x.GetResource().(*Event_BotInstance); ok {
		return x.BotInstance
	}
	return nil
}

func (x *Event) GetAccessGraphSettings() *v110.AccessGraphSettings {
	if x, ok := x.GetResource().(*Event_AccessGraphSettings); ok {
		return x.AccessGraphSettings
	}
	return nil
}

func (x *Event) GetSPIFFEFederation() *v19.SPIFFEFederation {
	if x, ok := x.GetResource().(*Event_SPIFFEFederation); ok {
		return x.SPIFFEFederation
	}
	return nil
}

type isEvent_Resource interface {
	isEvent_Resource()
}

type Event_ResourceHeader struct {
	// ResourceHeader is specified in delete events,
	// the full object is not available, so resource
	// header is used to provide information about object type
	ResourceHeader *types.ResourceHeader `protobuf:"bytes,2,opt,name=ResourceHeader,proto3,oneof"`
}

type Event_CertAuthority struct {
	// CertAuthority is filled in certificate-authority related events
	CertAuthority *types.CertAuthorityV2 `protobuf:"bytes,3,opt,name=CertAuthority,proto3,oneof"`
}

type Event_StaticTokens struct {
	// StaticTokens is filled in static-tokens related events
	StaticTokens *types.StaticTokensV2 `protobuf:"bytes,4,opt,name=StaticTokens,proto3,oneof"`
}

type Event_ProvisionToken struct {
	// ProvisionToken is filled in provision-token related events
	ProvisionToken *types.ProvisionTokenV2 `protobuf:"bytes,5,opt,name=ProvisionToken,proto3,oneof"`
}

type Event_ClusterName struct {
	// ClusterNameV2 is a cluster name resource
	ClusterName *types.ClusterNameV2 `protobuf:"bytes,6,opt,name=ClusterName,proto3,oneof"`
}

type Event_User struct {
	// User is a user resource
	User *types.UserV2 `protobuf:"bytes,8,opt,name=User,proto3,oneof"`
}

type Event_Role struct {
	// Role is a role resource
	Role *types.RoleV6 `protobuf:"bytes,9,opt,name=Role,proto3,oneof"`
}

type Event_Namespace struct {
	// Namespace is a namespace resource
	Namespace *types.Namespace `protobuf:"bytes,10,opt,name=Namespace,proto3,oneof"`
}

type Event_Server struct {
	// Server is a node or proxy resource
	Server *types.ServerV2 `protobuf:"bytes,11,opt,name=Server,proto3,oneof"`
}

type Event_ReverseTunnel struct {
	// ReverseTunnel is a resource with reverse tunnel
	ReverseTunnel *types.ReverseTunnelV2 `protobuf:"bytes,12,opt,name=ReverseTunnel,proto3,oneof"`
}

type Event_TunnelConnection struct {
	// TunnelConnection is a resource for tunnel connnections
	TunnelConnection *types.TunnelConnectionV2 `protobuf:"bytes,13,opt,name=TunnelConnection,proto3,oneof"`
}

type Event_AccessRequest struct {
	// AccessRequest is a resource for access requests
	AccessRequest *types.AccessRequestV3 `protobuf:"bytes,14,opt,name=AccessRequest,proto3,oneof"`
}

type Event_AppSession struct {
	// AppSession is an application web session.
	AppSession *types.WebSessionV2 `protobuf:"bytes,15,opt,name=AppSession,proto3,oneof"`
}

type Event_RemoteCluster struct {
	// RemoteCluster is a resource for remote clusters
	RemoteCluster *types.RemoteClusterV3 `protobuf:"bytes,16,opt,name=RemoteCluster,proto3,oneof"`
}

type Event_DatabaseServer struct {
	// DatabaseServer is a resource for database servers.
	DatabaseServer *types.DatabaseServerV3 `protobuf:"bytes,17,opt,name=DatabaseServer,proto3,oneof"`
}

type Event_WebSession struct {
	// WebSession is a regular web session.
	WebSession *types.WebSessionV2 `protobuf:"bytes,18,opt,name=WebSession,proto3,oneof"`
}

type Event_WebToken struct {
	// WebToken is a web token.
	WebToken *types.WebTokenV3 `protobuf:"bytes,19,opt,name=WebToken,proto3,oneof"`
}

type Event_ClusterNetworkingConfig struct {
	// ClusterNetworkingConfig is a resource for cluster networking configuration.
	ClusterNetworkingConfig *types.ClusterNetworkingConfigV2 `protobuf:"bytes,20,opt,name=ClusterNetworkingConfig,proto3,oneof"`
}

type Event_SessionRecordingConfig struct {
	// SessionRecordingConfig is a resource for session recording configuration.
	SessionRecordingConfig *types.SessionRecordingConfigV2 `protobuf:"bytes,21,opt,name=SessionRecordingConfig,proto3,oneof"`
}

type Event_AuthPreference struct {
	// AuthPreference is cluster auth preference.
	AuthPreference *types.AuthPreferenceV2 `protobuf:"bytes,22,opt,name=AuthPreference,proto3,oneof"`
}

type Event_ClusterAuditConfig struct {
	// ClusterAuditConfig is a resource for cluster audit configuration.
	ClusterAuditConfig *types.ClusterAuditConfigV2 `protobuf:"bytes,23,opt,name=ClusterAuditConfig,proto3,oneof"`
}

type Event_Lock struct {
	// Lock is a lock resource.
	Lock *types.LockV2 `protobuf:"bytes,24,opt,name=Lock,proto3,oneof"`
}

type Event_NetworkRestrictions struct {
	// NetworkRestrictions is a resource for network restrictions
	NetworkRestrictions *types.NetworkRestrictionsV4 `protobuf:"bytes,25,opt,name=NetworkRestrictions,proto3,oneof"`
}

type Event_WindowsDesktopService struct {
	// WindowsDesktopService is a resource for Windows desktop services.
	WindowsDesktopService *types.WindowsDesktopServiceV3 `protobuf:"bytes,26,opt,name=WindowsDesktopService,proto3,oneof"`
}

type Event_WindowsDesktop struct {
	// WindowsDesktop is a resource for Windows desktop host.
	WindowsDesktop *types.WindowsDesktopV3 `protobuf:"bytes,27,opt,name=WindowsDesktop,proto3,oneof"`
}

type Event_Database struct {
	// Database is a database resource.
	Database *types.DatabaseV3 `protobuf:"bytes,28,opt,name=Database,proto3,oneof"`
}

type Event_AppServer struct {
	// AppServer is an application server resource.
	AppServer *types.AppServerV3 `protobuf:"bytes,29,opt,name=AppServer,proto3,oneof"`
}

type Event_App struct {
	// App is an application resource.
	App *types.AppV3 `protobuf:"bytes,30,opt,name=App,proto3,oneof"`
}

type Event_SnowflakeSession struct {
	// SnowflakeSession is a Snowflake web session.
	SnowflakeSession *types.WebSessionV2 `protobuf:"bytes,31,opt,name=SnowflakeSession,proto3,oneof"`
}

type Event_KubernetesServer struct {
	// KubernetesServer is an Kubernetes server resource.
	KubernetesServer *types.KubernetesServerV3 `protobuf:"bytes,32,opt,name=KubernetesServer,proto3,oneof"`
}

type Event_KubernetesCluster struct {
	// KubernetesCluster is an Kubernetes cluster resource.
	KubernetesCluster *types.KubernetesClusterV3 `protobuf:"bytes,33,opt,name=KubernetesCluster,proto3,oneof"`
}

type Event_Installer struct {
	// Installer is an installer resource
	Installer *types.InstallerV1 `protobuf:"bytes,34,opt,name=Installer,proto3,oneof"`
}

type Event_DatabaseService struct {
	// DatabaseService is a DatabaseService resource
	DatabaseService *types.DatabaseServiceV1 `protobuf:"bytes,35,opt,name=DatabaseService,proto3,oneof"`
}

type Event_SAMLIdPServiceProvider struct {
	// SAMLIdPServiceProvider is a SAMLIdPServiceProvider resource
	SAMLIdPServiceProvider *types.SAMLIdPServiceProviderV1 `protobuf:"bytes,36,opt,name=SAMLIdPServiceProvider,proto3,oneof"`
}

type Event_SAMLIdPSession struct {
	// SAMLIdPSession is a SAML IdP session.
	SAMLIdPSession *types.WebSessionV2 `protobuf:"bytes,37,opt,name=SAMLIdPSession,proto3,oneof"`
}

type Event_UserGroup struct {
	// UserGroup is a UserGroup resource
	UserGroup *types.UserGroupV1 `protobuf:"bytes,38,opt,name=UserGroup,proto3,oneof"`
}

type Event_UIConfig struct {
	// UIConfig provides a way for users to adjust settings of the UI served by the proxy service.
	UIConfig *types.UIConfigV1 `protobuf:"bytes,39,opt,name=UIConfig,proto3,oneof"`
}

type Event_OktaImportRule struct {
	// OktaImportRule is an OktaImportRule resource.
	OktaImportRule *types.OktaImportRuleV1 `protobuf:"bytes,40,opt,name=OktaImportRule,proto3,oneof"`
}

type Event_OktaAssignment struct {
	// OktaAssignment is an OktaAssignment resource.
	OktaAssignment *types.OktaAssignmentV1 `protobuf:"bytes,41,opt,name=OktaAssignment,proto3,oneof"`
}

type Event_Integration struct {
	// Integration is an Integration resource.
	Integration *types.IntegrationV1 `protobuf:"bytes,42,opt,name=Integration,proto3,oneof"`
}

type Event_WatchStatus struct {
	// WatchStatus is an WatchStatus resource.
	WatchStatus *types.WatchStatusV1 `protobuf:"bytes,43,opt,name=WatchStatus,proto3,oneof"`
}

type Event_HeadlessAuthentication struct {
	// HeadlessAuthentication is a HeadlessAuthentication resource.
	HeadlessAuthentication *types.HeadlessAuthentication `protobuf:"bytes,44,opt,name=HeadlessAuthentication,proto3,oneof"`
}

type Event_AccessList struct {
	// AccessList is an AccessList resource.
	AccessList *v1.AccessList `protobuf:"bytes,45,opt,name=AccessList,proto3,oneof"`
}

type Event_UserLoginState struct {
	// UserLoginState is a UserLoginState resource.
	UserLoginState *v11.UserLoginState `protobuf:"bytes,46,opt,name=UserLoginState,proto3,oneof"`
}

type Event_AccessListMember struct {
	// AccessListMember is an access list member resource.
	AccessListMember *v1.Member `protobuf:"bytes,47,opt,name=AccessListMember,proto3,oneof"`
}

type Event_DiscoveryConfig struct {
	// DiscoveryConfig contains a list of matchers to be loaded dynamically by Discovery Services.
	DiscoveryConfig *v12.DiscoveryConfig `protobuf:"bytes,48,opt,name=DiscoveryConfig,proto3,oneof"`
}

type Event_AuditQuery struct {
	// AuditQuery is an audit query resource.
	AuditQuery *v13.AuditQuery `protobuf:"bytes,50,opt,name=AuditQuery,proto3,oneof"`
}

type Event_Report struct {
	// SecurityReport is a security report resource.
	Report *v13.Report `protobuf:"bytes,51,opt,name=Report,proto3,oneof"`
}

type Event_ReportState struct {
	// SecurityReportState is a security report state resource.
	ReportState *v13.ReportState `protobuf:"bytes,52,opt,name=ReportState,proto3,oneof"`
}

type Event_AccessListReview struct {
	// AccessListReview is an access list review resource.
	AccessListReview *v1.Review `protobuf:"bytes,53,opt,name=AccessListReview,proto3,oneof"`
}

type Event_AccessMonitoringRule struct {
	// AccessMonitoringRule is an access monitoring rule resource.
	AccessMonitoringRule *v14.AccessMonitoringRule `protobuf:"bytes,54,opt,name=AccessMonitoringRule,proto3,oneof"`
}

type Event_KubernetesWaitingContainer struct {
	// KubernetesWaitingContainer is a Kubernetes ephemeral container
	// waiting to be created.
	KubernetesWaitingContainer *v15.KubernetesWaitingContainer `protobuf:"bytes,55,opt,name=KubernetesWaitingContainer,proto3,oneof"`
}

type Event_UserNotification struct {
	// UserNotification is a user notification resource.
	UserNotification *v16.Notification `protobuf:"bytes,56,opt,name=UserNotification,proto3,oneof"`
}

type Event_GlobalNotification struct {
	// GlobalNotification is a global notification resource.
	GlobalNotification *v16.GlobalNotification `protobuf:"bytes,57,opt,name=GlobalNotification,proto3,oneof"`
}

type Event_CrownJewel struct {
	// CrownJewel is a Crown Jewel resource.
	CrownJewel *v17.CrownJewel `protobuf:"bytes,58,opt,name=CrownJewel,proto3,oneof"`
}

type Event_DatabaseObject struct {
	// DatabaseObject is a database object resource.
	DatabaseObject *v18.DatabaseObject `protobuf:"bytes,59,opt,name=DatabaseObject,proto3,oneof"`
}

type Event_BotInstance struct {
	// BotInstance is a Machine ID bot instance.
	BotInstance *v19.BotInstance `protobuf:"bytes,60,opt,name=BotInstance,proto3,oneof"`
}

type Event_AccessGraphSettings struct {
	// AccessGraphSettings is a resource for access graph settings.
	AccessGraphSettings *v110.AccessGraphSettings `protobuf:"bytes,61,opt,name=AccessGraphSettings,proto3,oneof"`
}

type Event_SPIFFEFederation struct {
	// SPIFFEFederation is a resource for SPIFFE federation.
	SPIFFEFederation *v19.SPIFFEFederation `protobuf:"bytes,62,opt,name=SPIFFEFederation,proto3,oneof"`
}

func (*Event_ResourceHeader) isEvent_Resource() {}

func (*Event_CertAuthority) isEvent_Resource() {}

func (*Event_StaticTokens) isEvent_Resource() {}

func (*Event_ProvisionToken) isEvent_Resource() {}

func (*Event_ClusterName) isEvent_Resource() {}

func (*Event_User) isEvent_Resource() {}

func (*Event_Role) isEvent_Resource() {}

func (*Event_Namespace) isEvent_Resource() {}

func (*Event_Server) isEvent_Resource() {}

func (*Event_ReverseTunnel) isEvent_Resource() {}

func (*Event_TunnelConnection) isEvent_Resource() {}

func (*Event_AccessRequest) isEvent_Resource() {}

func (*Event_AppSession) isEvent_Resource() {}

func (*Event_RemoteCluster) isEvent_Resource() {}

func (*Event_DatabaseServer) isEvent_Resource() {}

func (*Event_WebSession) isEvent_Resource() {}

func (*Event_WebToken) isEvent_Resource() {}

func (*Event_ClusterNetworkingConfig) isEvent_Resource() {}

func (*Event_SessionRecordingConfig) isEvent_Resource() {}

func (*Event_AuthPreference) isEvent_Resource() {}

func (*Event_ClusterAuditConfig) isEvent_Resource() {}

func (*Event_Lock) isEvent_Resource() {}

func (*Event_NetworkRestrictions) isEvent_Resource() {}

func (*Event_WindowsDesktopService) isEvent_Resource() {}

func (*Event_WindowsDesktop) isEvent_Resource() {}

func (*Event_Database) isEvent_Resource() {}

func (*Event_AppServer) isEvent_Resource() {}

func (*Event_App) isEvent_Resource() {}

func (*Event_SnowflakeSession) isEvent_Resource() {}

func (*Event_KubernetesServer) isEvent_Resource() {}

func (*Event_KubernetesCluster) isEvent_Resource() {}

func (*Event_Installer) isEvent_Resource() {}

func (*Event_DatabaseService) isEvent_Resource() {}

func (*Event_SAMLIdPServiceProvider) isEvent_Resource() {}

func (*Event_SAMLIdPSession) isEvent_Resource() {}

func (*Event_UserGroup) isEvent_Resource() {}

func (*Event_UIConfig) isEvent_Resource() {}

func (*Event_OktaImportRule) isEvent_Resource() {}

func (*Event_OktaAssignment) isEvent_Resource() {}

func (*Event_Integration) isEvent_Resource() {}

func (*Event_WatchStatus) isEvent_Resource() {}

func (*Event_HeadlessAuthentication) isEvent_Resource() {}

func (*Event_AccessList) isEvent_Resource() {}

func (*Event_UserLoginState) isEvent_Resource() {}

func (*Event_AccessListMember) isEvent_Resource() {}

func (*Event_DiscoveryConfig) isEvent_Resource() {}

func (*Event_AuditQuery) isEvent_Resource() {}

func (*Event_Report) isEvent_Resource() {}

func (*Event_ReportState) isEvent_Resource() {}

func (*Event_AccessListReview) isEvent_Resource() {}

func (*Event_AccessMonitoringRule) isEvent_Resource() {}

func (*Event_KubernetesWaitingContainer) isEvent_Resource() {}

func (*Event_UserNotification) isEvent_Resource() {}

func (*Event_GlobalNotification) isEvent_Resource() {}

func (*Event_CrownJewel) isEvent_Resource() {}

func (*Event_DatabaseObject) isEvent_Resource() {}

func (*Event_BotInstance) isEvent_Resource() {}

func (*Event_AccessGraphSettings) isEvent_Resource() {}

func (*Event_SPIFFEFederation) isEvent_Resource() {}

var File_teleport_legacy_client_proto_event_proto protoreflect.FileDescriptor

var file_teleport_legacy_client_proto_event_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x72, 0x6f,
	0x77, 0x6e, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x77, 0x6e,
	0x6a, 0x65, 0x77, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x31, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6b, 0x75,
	0x62, 0x65, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9,
	0x20, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52,
	0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x38, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x48, 0x00, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x36, 0x48, 0x00, 0x52, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x32, 0x48, 0x00, 0x52, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x32, 0x48,
	0x00, 0x52, 0x0d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x47, 0x0a, 0x10, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x10, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x48, 0x00, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x48, 0x00, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x33, 0x48,
	0x00, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x33, 0x48, 0x00, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0a,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x57, 0x65,
	0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x33, 0x48,
	0x00, 0x52, 0x08, 0x57, 0x65, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x17, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x16, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x48, 0x00, 0x52, 0x16, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32,
	0x48, 0x00, 0x52, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x56, 0x32, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x13, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x34, 0x48, 0x00, 0x52, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a,
	0x15, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x33, 0x48, 0x00, 0x52, 0x15,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x56, 0x33, 0x48, 0x00, 0x52, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x33, 0x48, 0x00, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x33,
	0x48, 0x00, 0x52, 0x09, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x03, 0x41, 0x70, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x33, 0x48, 0x00, 0x52, 0x03, 0x41, 0x70, 0x70, 0x12,
	0x41, 0x0a, 0x10, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x10, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x33, 0x48, 0x00, 0x52, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x33, 0x48, 0x00, 0x52, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x59, 0x0a, 0x16, 0x53, 0x41, 0x4d, 0x4c, 0x49, 0x64, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x41, 0x4d, 0x4c, 0x49, 0x64,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x56, 0x31, 0x48, 0x00, 0x52, 0x16, 0x53, 0x41, 0x4d, 0x4c, 0x49, 0x64, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0e,
	0x53, 0x41, 0x4d, 0x4c, 0x49, 0x64, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0e, 0x53, 0x41, 0x4d,
	0x4c, 0x49, 0x64, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x56, 0x31, 0x48, 0x00, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x2f, 0x0a, 0x08, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x41, 0x0a, 0x0e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x56,
	0x31, 0x48, 0x00, 0x52, 0x0e, 0x4f, 0x6b, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x4f, 0x6b, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x31, 0x48, 0x00, 0x52, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x48, 0x65, 0x61,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a,
	0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4c, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x10, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x6d,
	0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x7e, 0x0a,
	0x1a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x1a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x55, 0x0a,
	0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x4a, 0x65,
	0x77, 0x65, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x72, 0x6f, 0x77, 0x6e, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64,
	0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x42,
	0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x50, 0x49, 0x46, 0x46,
	0x45, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x53, 0x50,
	0x49, 0x46, 0x46, 0x45, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x4a, 0x04, 0x08, 0x31, 0x10, 0x32, 0x52, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2a, 0x2a, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_legacy_client_proto_event_proto_rawDescOnce sync.Once
	file_teleport_legacy_client_proto_event_proto_rawDescData = file_teleport_legacy_client_proto_event_proto_rawDesc
)

func file_teleport_legacy_client_proto_event_proto_rawDescGZIP() []byte {
	file_teleport_legacy_client_proto_event_proto_rawDescOnce.Do(func() {
		file_teleport_legacy_client_proto_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_legacy_client_proto_event_proto_rawDescData)
	})
	return file_teleport_legacy_client_proto_event_proto_rawDescData
}

var file_teleport_legacy_client_proto_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teleport_legacy_client_proto_event_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teleport_legacy_client_proto_event_proto_goTypes = []any{
	(Operation)(0),                          // 0: proto.Operation
	(*Event)(nil),                           // 1: proto.Event
	(*types.ResourceHeader)(nil),            // 2: types.ResourceHeader
	(*types.CertAuthorityV2)(nil),           // 3: types.CertAuthorityV2
	(*types.StaticTokensV2)(nil),            // 4: types.StaticTokensV2
	(*types.ProvisionTokenV2)(nil),          // 5: types.ProvisionTokenV2
	(*types.ClusterNameV2)(nil),             // 6: types.ClusterNameV2
	(*types.UserV2)(nil),                    // 7: types.UserV2
	(*types.RoleV6)(nil),                    // 8: types.RoleV6
	(*types.Namespace)(nil),                 // 9: types.Namespace
	(*types.ServerV2)(nil),                  // 10: types.ServerV2
	(*types.ReverseTunnelV2)(nil),           // 11: types.ReverseTunnelV2
	(*types.TunnelConnectionV2)(nil),        // 12: types.TunnelConnectionV2
	(*types.AccessRequestV3)(nil),           // 13: types.AccessRequestV3
	(*types.WebSessionV2)(nil),              // 14: types.WebSessionV2
	(*types.RemoteClusterV3)(nil),           // 15: types.RemoteClusterV3
	(*types.DatabaseServerV3)(nil),          // 16: types.DatabaseServerV3
	(*types.WebTokenV3)(nil),                // 17: types.WebTokenV3
	(*types.ClusterNetworkingConfigV2)(nil), // 18: types.ClusterNetworkingConfigV2
	(*types.SessionRecordingConfigV2)(nil),  // 19: types.SessionRecordingConfigV2
	(*types.AuthPreferenceV2)(nil),          // 20: types.AuthPreferenceV2
	(*types.ClusterAuditConfigV2)(nil),      // 21: types.ClusterAuditConfigV2
	(*types.LockV2)(nil),                    // 22: types.LockV2
	(*types.NetworkRestrictionsV4)(nil),     // 23: types.NetworkRestrictionsV4
	(*types.WindowsDesktopServiceV3)(nil),   // 24: types.WindowsDesktopServiceV3
	(*types.WindowsDesktopV3)(nil),          // 25: types.WindowsDesktopV3
	(*types.DatabaseV3)(nil),                // 26: types.DatabaseV3
	(*types.AppServerV3)(nil),               // 27: types.AppServerV3
	(*types.AppV3)(nil),                     // 28: types.AppV3
	(*types.KubernetesServerV3)(nil),        // 29: types.KubernetesServerV3
	(*types.KubernetesClusterV3)(nil),       // 30: types.KubernetesClusterV3
	(*types.InstallerV1)(nil),               // 31: types.InstallerV1
	(*types.DatabaseServiceV1)(nil),         // 32: types.DatabaseServiceV1
	(*types.SAMLIdPServiceProviderV1)(nil),  // 33: types.SAMLIdPServiceProviderV1
	(*types.UserGroupV1)(nil),               // 34: types.UserGroupV1
	(*types.UIConfigV1)(nil),                // 35: types.UIConfigV1
	(*types.OktaImportRuleV1)(nil),          // 36: types.OktaImportRuleV1
	(*types.OktaAssignmentV1)(nil),          // 37: types.OktaAssignmentV1
	(*types.IntegrationV1)(nil),             // 38: types.IntegrationV1
	(*types.WatchStatusV1)(nil),             // 39: types.WatchStatusV1
	(*types.HeadlessAuthentication)(nil),    // 40: types.HeadlessAuthentication
	(*v1.AccessList)(nil),                   // 41: teleport.accesslist.v1.AccessList
	(*v11.UserLoginState)(nil),              // 42: teleport.userloginstate.v1.UserLoginState
	(*v1.Member)(nil),                       // 43: teleport.accesslist.v1.Member
	(*v12.DiscoveryConfig)(nil),             // 44: teleport.discoveryconfig.v1.DiscoveryConfig
	(*v13.AuditQuery)(nil),                  // 45: teleport.secreports.v1.AuditQuery
	(*v13.Report)(nil),                      // 46: teleport.secreports.v1.Report
	(*v13.ReportState)(nil),                 // 47: teleport.secreports.v1.ReportState
	(*v1.Review)(nil),                       // 48: teleport.accesslist.v1.Review
	(*v14.AccessMonitoringRule)(nil),        // 49: teleport.accessmonitoringrules.v1.AccessMonitoringRule
	(*v15.KubernetesWaitingContainer)(nil),  // 50: teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer
	(*v16.Notification)(nil),                // 51: teleport.notifications.v1.Notification
	(*v16.GlobalNotification)(nil),          // 52: teleport.notifications.v1.GlobalNotification
	(*v17.CrownJewel)(nil),                  // 53: teleport.crownjewel.v1.CrownJewel
	(*v18.DatabaseObject)(nil),              // 54: teleport.dbobject.v1.DatabaseObject
	(*v19.BotInstance)(nil),                 // 55: teleport.machineid.v1.BotInstance
	(*v110.AccessGraphSettings)(nil),        // 56: teleport.clusterconfig.v1.AccessGraphSettings
	(*v19.SPIFFEFederation)(nil),            // 57: teleport.machineid.v1.SPIFFEFederation
}
var file_teleport_legacy_client_proto_event_proto_depIdxs = []int32{
	0,  // 0: proto.Event.Type:type_name -> proto.Operation
	2,  // 1: proto.Event.ResourceHeader:type_name -> types.ResourceHeader
	3,  // 2: proto.Event.CertAuthority:type_name -> types.CertAuthorityV2
	4,  // 3: proto.Event.StaticTokens:type_name -> types.StaticTokensV2
	5,  // 4: proto.Event.ProvisionToken:type_name -> types.ProvisionTokenV2
	6,  // 5: proto.Event.ClusterName:type_name -> types.ClusterNameV2
	7,  // 6: proto.Event.User:type_name -> types.UserV2
	8,  // 7: proto.Event.Role:type_name -> types.RoleV6
	9,  // 8: proto.Event.Namespace:type_name -> types.Namespace
	10, // 9: proto.Event.Server:type_name -> types.ServerV2
	11, // 10: proto.Event.ReverseTunnel:type_name -> types.ReverseTunnelV2
	12, // 11: proto.Event.TunnelConnection:type_name -> types.TunnelConnectionV2
	13, // 12: proto.Event.AccessRequest:type_name -> types.AccessRequestV3
	14, // 13: proto.Event.AppSession:type_name -> types.WebSessionV2
	15, // 14: proto.Event.RemoteCluster:type_name -> types.RemoteClusterV3
	16, // 15: proto.Event.DatabaseServer:type_name -> types.DatabaseServerV3
	14, // 16: proto.Event.WebSession:type_name -> types.WebSessionV2
	17, // 17: proto.Event.WebToken:type_name -> types.WebTokenV3
	18, // 18: proto.Event.ClusterNetworkingConfig:type_name -> types.ClusterNetworkingConfigV2
	19, // 19: proto.Event.SessionRecordingConfig:type_name -> types.SessionRecordingConfigV2
	20, // 20: proto.Event.AuthPreference:type_name -> types.AuthPreferenceV2
	21, // 21: proto.Event.ClusterAuditConfig:type_name -> types.ClusterAuditConfigV2
	22, // 22: proto.Event.Lock:type_name -> types.LockV2
	23, // 23: proto.Event.NetworkRestrictions:type_name -> types.NetworkRestrictionsV4
	24, // 24: proto.Event.WindowsDesktopService:type_name -> types.WindowsDesktopServiceV3
	25, // 25: proto.Event.WindowsDesktop:type_name -> types.WindowsDesktopV3
	26, // 26: proto.Event.Database:type_name -> types.DatabaseV3
	27, // 27: proto.Event.AppServer:type_name -> types.AppServerV3
	28, // 28: proto.Event.App:type_name -> types.AppV3
	14, // 29: proto.Event.SnowflakeSession:type_name -> types.WebSessionV2
	29, // 30: proto.Event.KubernetesServer:type_name -> types.KubernetesServerV3
	30, // 31: proto.Event.KubernetesCluster:type_name -> types.KubernetesClusterV3
	31, // 32: proto.Event.Installer:type_name -> types.InstallerV1
	32, // 33: proto.Event.DatabaseService:type_name -> types.DatabaseServiceV1
	33, // 34: proto.Event.SAMLIdPServiceProvider:type_name -> types.SAMLIdPServiceProviderV1
	14, // 35: proto.Event.SAMLIdPSession:type_name -> types.WebSessionV2
	34, // 36: proto.Event.UserGroup:type_name -> types.UserGroupV1
	35, // 37: proto.Event.UIConfig:type_name -> types.UIConfigV1
	36, // 38: proto.Event.OktaImportRule:type_name -> types.OktaImportRuleV1
	37, // 39: proto.Event.OktaAssignment:type_name -> types.OktaAssignmentV1
	38, // 40: proto.Event.Integration:type_name -> types.IntegrationV1
	39, // 41: proto.Event.WatchStatus:type_name -> types.WatchStatusV1
	40, // 42: proto.Event.HeadlessAuthentication:type_name -> types.HeadlessAuthentication
	41, // 43: proto.Event.AccessList:type_name -> teleport.accesslist.v1.AccessList
	42, // 44: proto.Event.UserLoginState:type_name -> teleport.userloginstate.v1.UserLoginState
	43, // 45: proto.Event.AccessListMember:type_name -> teleport.accesslist.v1.Member
	44, // 46: proto.Event.DiscoveryConfig:type_name -> teleport.discoveryconfig.v1.DiscoveryConfig
	45, // 47: proto.Event.AuditQuery:type_name -> teleport.secreports.v1.AuditQuery
	46, // 48: proto.Event.Report:type_name -> teleport.secreports.v1.Report
	47, // 49: proto.Event.ReportState:type_name -> teleport.secreports.v1.ReportState
	48, // 50: proto.Event.AccessListReview:type_name -> teleport.accesslist.v1.Review
	49, // 51: proto.Event.AccessMonitoringRule:type_name -> teleport.accessmonitoringrules.v1.AccessMonitoringRule
	50, // 52: proto.Event.KubernetesWaitingContainer:type_name -> teleport.kubewaitingcontainer.v1.KubernetesWaitingContainer
	51, // 53: proto.Event.UserNotification:type_name -> teleport.notifications.v1.Notification
	52, // 54: proto.Event.GlobalNotification:type_name -> teleport.notifications.v1.GlobalNotification
	53, // 55: proto.Event.CrownJewel:type_name -> teleport.crownjewel.v1.CrownJewel
	54, // 56: proto.Event.DatabaseObject:type_name -> teleport.dbobject.v1.DatabaseObject
	55, // 57: proto.Event.BotInstance:type_name -> teleport.machineid.v1.BotInstance
	56, // 58: proto.Event.AccessGraphSettings:type_name -> teleport.clusterconfig.v1.AccessGraphSettings
	57, // 59: proto.Event.SPIFFEFederation:type_name -> teleport.machineid.v1.SPIFFEFederation
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_teleport_legacy_client_proto_event_proto_init() }
func file_teleport_legacy_client_proto_event_proto_init() {
	if File_teleport_legacy_client_proto_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teleport_legacy_client_proto_event_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teleport_legacy_client_proto_event_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_ResourceHeader)(nil),
		(*Event_CertAuthority)(nil),
		(*Event_StaticTokens)(nil),
		(*Event_ProvisionToken)(nil),
		(*Event_ClusterName)(nil),
		(*Event_User)(nil),
		(*Event_Role)(nil),
		(*Event_Namespace)(nil),
		(*Event_Server)(nil),
		(*Event_ReverseTunnel)(nil),
		(*Event_TunnelConnection)(nil),
		(*Event_AccessRequest)(nil),
		(*Event_AppSession)(nil),
		(*Event_RemoteCluster)(nil),
		(*Event_DatabaseServer)(nil),
		(*Event_WebSession)(nil),
		(*Event_WebToken)(nil),
		(*Event_ClusterNetworkingConfig)(nil),
		(*Event_SessionRecordingConfig)(nil),
		(*Event_AuthPreference)(nil),
		(*Event_ClusterAuditConfig)(nil),
		(*Event_Lock)(nil),
		(*Event_NetworkRestrictions)(nil),
		(*Event_WindowsDesktopService)(nil),
		(*Event_WindowsDesktop)(nil),
		(*Event_Database)(nil),
		(*Event_AppServer)(nil),
		(*Event_App)(nil),
		(*Event_SnowflakeSession)(nil),
		(*Event_KubernetesServer)(nil),
		(*Event_KubernetesCluster)(nil),
		(*Event_Installer)(nil),
		(*Event_DatabaseService)(nil),
		(*Event_SAMLIdPServiceProvider)(nil),
		(*Event_SAMLIdPSession)(nil),
		(*Event_UserGroup)(nil),
		(*Event_UIConfig)(nil),
		(*Event_OktaImportRule)(nil),
		(*Event_OktaAssignment)(nil),
		(*Event_Integration)(nil),
		(*Event_WatchStatus)(nil),
		(*Event_HeadlessAuthentication)(nil),
		(*Event_AccessList)(nil),
		(*Event_UserLoginState)(nil),
		(*Event_AccessListMember)(nil),
		(*Event_DiscoveryConfig)(nil),
		(*Event_AuditQuery)(nil),
		(*Event_Report)(nil),
		(*Event_ReportState)(nil),
		(*Event_AccessListReview)(nil),
		(*Event_AccessMonitoringRule)(nil),
		(*Event_KubernetesWaitingContainer)(nil),
		(*Event_UserNotification)(nil),
		(*Event_GlobalNotification)(nil),
		(*Event_CrownJewel)(nil),
		(*Event_DatabaseObject)(nil),
		(*Event_BotInstance)(nil),
		(*Event_AccessGraphSettings)(nil),
		(*Event_SPIFFEFederation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_legacy_client_proto_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teleport_legacy_client_proto_event_proto_goTypes,
		DependencyIndexes: file_teleport_legacy_client_proto_event_proto_depIdxs,
		EnumInfos:         file_teleport_legacy_client_proto_event_proto_enumTypes,
		MessageInfos:      file_teleport_legacy_client_proto_event_proto_msgTypes,
	}.Build()
	File_teleport_legacy_client_proto_event_proto = out.File
	file_teleport_legacy_client_proto_event_proto_rawDesc = nil
	file_teleport_legacy_client_proto_event_proto_goTypes = nil
	file_teleport_legacy_client_proto_event_proto_depIdxs = nil
}
