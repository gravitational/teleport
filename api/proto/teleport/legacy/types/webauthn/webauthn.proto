// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Package WebAuthn maps WebAuthn messages to protocol buffers.
//
// The mapping is designed to match both the WebAuthn specification and the
// capabilities of current browser implementations.
//
// REST-based Teleport APIs will make an effort to transmit or embed JSON
// messages matching the github.com/go-webauthn/webauthn reference implementation,
// to allow for easy browser integration. gRPC APIs are not meant for REST use
// and thus make no such promises, although the correspondence should be
// obvious.
//
// Note that, ordinarily, various fields in WebAuthn messages are encoded using
// "RawURLEncoding" (aka, base64 URL encoding without padding). This is not the
// case for _any_ of the fields mapped here, all bytes fields are transmitted
// raw/unencoded.
package webauthn;

import "gogoproto/gogo.proto";

option go_package = "github.com/gravitational/teleport/api/types/webauthn;webauthnpb";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// -----------------------------------------------------------------------------
// Assertion (aka login).
// -----------------------------------------------------------------------------

// Credential assertion used for login ceremonies.
message CredentialAssertion {
  PublicKeyCredentialRequestOptions public_key = 1;
}

// Request options necessary for credential assertions, aka login ceremonies.
// See https://www.w3.org/TR/webauthn-2/#dictionary-assertion-options or
// refer to navigator.credentials.get in your browser.
message PublicKeyCredentialRequestOptions {
  // Raw challenge used for assertion.
  bytes challenge = 1;
  // Timeout in milliseconds.
  int64 timeout_ms = 2;
  // Relying Party ID.
  string rp_id = 3;
  // Allowed credentials for assertion.
  repeated CredentialDescriptor allow_credentials = 4;
  // Extensions supplied by the Relying Party.
  AuthenticationExtensionsClientInputs extensions = 5;
  // User verification requirement.
  string user_verification = 6;
}

// Assertion response returned by the authenticator.
// Refer to navigator.credentials.get in your browser.
message CredentialAssertionResponse {
  // Note: assertion responses return both "rawId" and "id" (RawURLEncoding of
  // "id"), but it seemed pointless to have both here.

  // Type of the credential, usually "public-key".
  string type = 1;
  // Raw Credential ID.
  bytes raw_id = 2;
  // Assertion response from the authenticator.
  AuthenticatorAssertionResponse response = 3;
  // Extensions supplied by the authenticator.
  AuthenticationExtensionsClientOutputs extensions = 4;
}

// Authenticator assertion response.
// https://www.w3.org/TR/webauthn-2/#authenticatorassertionresponse
message AuthenticatorAssertionResponse {
  // Raw client data JSON, exactly as signed by the authenticator.
  // https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata.
  bytes client_data_json = 1;
  // Raw authenticator data, exactly as signed by the authenticator.
  // https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data.
  bytes authenticator_data = 2;
  // Raw assertion signature performed authenticatorData|clientDataJSON.
  // https://www.w3.org/TR/webauthn-2/#assertion-signature.
  bytes signature = 3;
  // Raw user handle returned by the authenticator, if any.
  bytes user_handle = 4;
}

// -----------------------------------------------------------------------------
// Creation (aka registration).
// -----------------------------------------------------------------------------

// Credential creation used for registration ceremonies.
message CredentialCreation {
  PublicKeyCredentialCreationOptions public_key = 1;
}

// Request options necessary for credential creation, aka registration
// ceremonies.
// See
// https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialcreationoptions
// or refer to navigator.credentials.create in your browser.
message PublicKeyCredentialCreationOptions {
  // Raw challenge used for creation.
  bytes challenge = 1;
  // Relying party information.
  RelyingPartyEntity rp = 2;
  // User information.
  UserEntity user = 3;
  // Desired properties for the credential to be created, from most to least
  // preferred.
  repeated CredentialParameter credential_parameters = 4;
  // Timeout in milliseconds.
  int64 timeout_ms = 5;
  // Credentials excluded from the ceremony.
  repeated CredentialDescriptor exclude_credentials = 6;
  // Attestation requested, defaulting to "none".
  // https://www.w3.org/TR/webauthn-2/#enumdef-attestationconveyancepreference.
  string attestation = 7;
  // Extensions supplied by the Relying Party.
  AuthenticationExtensionsClientInputs extensions = 8;
  // Authenticator selection criteria for the new credential.
  AuthenticatorSelection authenticator_selection = 9;
}

// Credential creation response returned by the authenticator.
// Refer to navigator.credentials.create in your browser.
message CredentialCreationResponse {
  // Note: creation responses return both "rawId" and "id" (RawURLEncoding of
  // "id"), but it seemed pointless to have both here.

  // Type of the credential, usually "public-key".
  string type = 1;
  // Raw Credential ID.
  bytes raw_id = 2;
  // Attestation response from the authenticator.
  AuthenticatorAttestationResponse response = 3;
  // Extensions supplied by the authenticator.
  AuthenticationExtensionsClientOutputs extensions = 4;
}

// Attestation response from the authentication, ie, the response to a
// credential creation request.
// https://www.w3.org/TR/webauthn-2/#authenticatorattestationresponse.
message AuthenticatorAttestationResponse {
  // Raw client data JSON, exactly as signed by the authenticator.
  // https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata.
  bytes client_data_json = 1;
  // Raw attestation object.
  // https://www.w3.org/TR/webauthn-2/#attestation-object
  bytes attestation_object = 2;
}

// -----------------------------------------------------------------------------
// Common WebAuthn objects.
// -----------------------------------------------------------------------------

// Extensions supplied by the Relying Party during credential assertion or
// creation.
// https://www.w3.org/TR/webauthn-2/#client-extension-input
message AuthenticationExtensionsClientInputs {
  // U2F application ID to be used by the authenticator, if any.
  // Only available if using U2F compatibility mode.
  // https://www.w3.org/TR/webauthn-2/#sctn-appid-extension.
  string app_id = 1;
}

// Extensions supplied by the authenticator to the Relying Party, during
// credential assertion or creation.
// https://www.w3.org/TR/webauthn-2/#client-extension-output.
message AuthenticationExtensionsClientOutputs {
  // If true, the AppID extension was used by the authenticator, which changes
  // the rpIdHash accordingly.
  // https://www.w3.org/TR/webauthn-2/#sctn-appid-extension.
  bool app_id = 1;
}

// Authenticator selection criteria.
// Restricts the choice of authenticator for credential creation.
message AuthenticatorSelection {
  // Authenticator attachment, empty means no particular attachment is
  // required.
  string authenticator_attachment = 1;
  // Resident key requirement, if true the authenticator must create a resident
  // key.
  bool require_resident_key = 2;
  // User verification requirement for authenticators.
  string user_verification = 3;
}

// Public key credential descriptor.
// https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor.
message CredentialDescriptor {
  // Type of the credential, usually "public-key".
  string type = 1;
  // Raw Credential ID.
  bytes id = 2;

  // Notes:
  // * Transport hints omitted (assume no restrictions).
}

// Parameters for credential creation.
// https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialparameters.
message CredentialParameter {
  // Credential type, usually "public-key".
  // https://www.w3.org/TR/webauthn-2/#enumdef-publickeycredentialtype.
  string type = 1;
  // COSE algorithm specifier.
  // Most authenticators support exclusively ES256(-7).
  // https://www.w3.org/TR/webauthn-2/#typedefdef-cosealgorithmidentifier.
  int32 alg = 2;
}

// Relying Party information.
// See https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialrpentity and
// https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/rp.
message RelyingPartyEntity {
  string id = 1;
  string name = 2;

  reserved 3; // string icon
  reserved "icon";
}

// User information.
// See https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialuserentity
// and
// https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/user.
message UserEntity {
  // Raw ID of the user.
  bytes id = 1;
  // Human-palatable name for a user account.
  // The Relying Party _may_ let the user choose this value.
  string name = 2;
  // Human-palatable name for the user account, intended only for display.
  // The Relying Party _should_ let the user choose this value.
  string display_name = 3;

  reserved 4; // string icon
  reserved "icon";
}
