// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.scopedrole.v1;

import "teleport/header/v1/metadata.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/scopedrole/v1;scopedrole";

// ScopedRoleAssignment is a role assignment whose resource and permissions are scoped. A scoped role assignment
// assigns roles to users at scopes. One assignment may contain multiple roles at multiple scopes. Most assignments
// are stored at random IDs, but some assignments created by teleport may have special static names that are
// reserved for teleport's internal use (e.g. for managing the set of subassignments generated by a connector).
message ScopedRoleAssignment {
  // Kind is the resource kind.
  string kind = 1;

  // SubKind is the resource sub-kind.
  string sub_kind = 2;

  // Version is the resource version.
  string version = 3;

  // Metadata contains the resource metadata.
  teleport.header.v1.Metadata metadata = 4;

  // Scope is the scope of the role assignment resource.
  string scope = 5;

  // Spec is the role assignment specification.
  ScopedRoleAssignmentSpec spec = 6;
}

// ScopedRoleAssignmentSpec is the specification of a scoped role.
message ScopedRoleAssignmentSpec {
  // User is the user to whom all contained assignments apply.
  string user = 1;

  // Assignments is a list of individual role @ scope assignments.
  repeated Assignment assignments = 2;
}

// Assignment is a role/scope pair that defines an individual assignment.
message Assignment {
  // Roles is the name of the role that is assigned by this assignment.
  string role = 1;

  // Scope is the scope to which the role is assigned. This must be a member/child
  // of the scope of the [ScopedRoleAssignment] in which this assignment is contained.
  string scope = 2;
}
