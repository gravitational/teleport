// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.access_graph.v1;

import "teleport/access_graph/v1/authorized_key.proto";
import "teleport/access_graph/v1/private_key.proto";
import "teleport/devicetrust/v1/assert.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/accessgraph/v1;accessgraphv1";

// SecretsScannerService provides methods for Access Graph Secret Scanner functionality.
service SecretsScannerService {
  // ReportAuthorizedKeys is used by Teleport SSH nodes to report authorized keys
  // that could be used to bypass Teleport.
  // The client (Teleport SSH Node) should authenticate using the certificate-key pair signed by Teleport HostCA.
  rpc ReportAuthorizedKeys(stream ReportAuthorizedKeysRequest) returns (stream ReportAuthorizedKeysResponse) {}

  // ReportSecrets is used by trusted devices to report secrets found on the host that could be used to bypass Teleport.
  // The client (device) should first authenticate using the [ReportSecretsRequest.device_assertion] flow. Please refer to
  // the [teleport.devicetrust.v1.AssertDeviceRequest] and [teleport.devicetrust.v1.AssertDeviceResponse] messages for more details.
  //
  // Once the device is asserted, the client can send the secrets using the [ReportSecretsRequest.private_keys] field
  // and then close the client side of the stream.
  //
  // -> ReportSecrets (client) [1 or more]
  // -> CloseStream (client)
  // <- TerminateStream (server)
  //
  // Any failure in the assertion ceremony will result in the stream being terminated by the server. All secrets
  // reported by the client before the assertion terminates will be ignored and result in the stream being terminated.
  rpc ReportSecrets(stream ReportSecretsRequest) returns (stream ReportSecretsResponse) {}
}

// ReportAuthorizedKeysRequest is used by Teleport nodes to report authorized keys
// that could be used to bypass Teleport.
message ReportAuthorizedKeysRequest {
  // keys is a list of authorized keys that could be used to bypass Teleport.
  repeated teleport.access_graph.v1.AuthorizedKey keys = 1;
  // operation indicates the operation that the client wants to perform.
  OperationType operation = 2;
}

// ReportAuthorizedKeysResponse is the response from ReportAuthorizedKeys
// RPC method.
message ReportAuthorizedKeysResponse {}

// ReportSecretsRequest is used by trusted devices to report secrets found on the host
// that could be used to bypass Teleport.
message ReportSecretsRequest {
  oneof payload {
    // The device should initiate the device assertion ceremony by sending the
    // AssertDeviceRequest. Please refer to the [teleport.devicetrust.v1.AssertDeviceRequest]
    // message for more details.
    teleport.devicetrust.v1.AssertDeviceRequest device_assertion = 1;
    // private_keys is a list of private keys that were found on the device.
    ReportPrivateKeys private_keys = 4;
  }
}

// ReportPrivateKeys is used by trusted devices to report private keys found on the host
// that could be used to bypass Teleport.
message ReportPrivateKeys {
  // keys is a list of private keys that could be used to bypass Teleport.
  repeated teleport.access_graph.v1.PrivateKey keys = 1;
}

// ReportSecretsResponse is the response from the ReportSecrets
// RPC method.
message ReportSecretsResponse {
  oneof payload {
    // device_assertion is the response from the device assertion ceremony.
    // Please refer to the [teleport.devicetrust.v1.AssertDeviceResponse]
    // message for more details
    teleport.devicetrust.v1.AssertDeviceResponse device_assertion = 1;
  }
}

// OperationType is an enum that indicates the operation that the client wants to perform.
enum OperationType {
  // OPERATION_TYPE_UNSPECIFIED is an unknown operation.
  OPERATION_TYPE_UNSPECIFIED = 0;
  // OPERATION_TYPE_ADD is an operation that indicates that the client wants to add keys to the list.
  OPERATION_TYPE_ADD = 1;
  // OPERATION_TYPE_SYNC is an operation that indicates that the client has sent all the keys and
  // the server can proceed with the analysis.
  OPERATION_TYPE_SYNC = 2;
}
