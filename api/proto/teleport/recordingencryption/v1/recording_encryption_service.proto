// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.recordingencryption.v1;

import "teleport/recordingencryption/v1/recording_encryption.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/recordingencryption/v1;recordingencryptionv1";

// RecordingEncryption provides methods to manage cluster encryption
// configuration resources.
service RecordingEncryptionService {
  // RotateKeySets rotates the keys associated with the given keysets within
  // the encryption configuration.
  rpc RotateKeySet(RotateKeySetRequest) returns (RotateKeySetResponse);
  // GetRotationState returns whether or not a key rotation is in progress.
  rpc GetRotationState(GetRotationStateRequest) returns (GetRotationStateResponse);
  // CompleteRotation moves rotated keys out of the active set.
  rpc CompleteRotation(CompleteRotationRequest) returns (CompleteRotationResponse);
  // UploadEncryptedRecording is used to upload encrypted .tar files
  // containing session recording events into long term storage.
  rpc UploadEncryptedRecording(stream UploadEncryptedRecordingRequest) returns (UploadEncryptedRecordingResponse);
}

// RotateKeySetRequest
message RotateKeySetRequest {}

// RotateKeySetResponse
message RotateKeySetResponse {}

// GetRotationStateRequest
message GetRotationStateRequest {}

// GetRotationStateResponse contains the current KeyState of all WrappedKeys
// in the EncryptedSessionRecordingConfig.
message GetRotationStateResponse {
  repeated teleport.recordingencryption.v1.KeyState key_states = 1;
}

// CompleteRotationRequest
message CompleteRotationRequest {}

// CompleteRotationResponse
message CompleteRotationResponse {}

// UploadEncryptedRecordingRequest is an individual part of an encrypted session
// recording .tar file.
message UploadEncryptedRecordingRequest {
  // SessionID the recording relates to.
  string session_id = 1;
  // PartIndex is the ordered index applied to the chunk.
  int64 part_index = 2;
  // Part is the encrypted part of session recording data being uploaded.
  bytes part = 3;
}

// UploadEncryptedRecordingResponse
message UploadEncryptedRecordingResponse {}
