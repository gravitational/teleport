// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.recordingencryption.v1;

import "teleport/header/v1/metadata.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/recordingencryption/v1;recordingencryptionv1";

// WrappedKey wraps the private key of a recording encryption key pair using a
// separate asymmetric keypair.
message WrappedKey {
  // RecordingEncryptionPair is the asymmetric keypair used with age to encrypt
  // and decrypt filekeys. The private key is encrypted using the KeyEncryptionPair's
  // public key and has to be decrypted before recording decryption operations can
  // be fulfilled.
  types.EncryptionKeyPair recording_encryption_pair = 1;
  // KeyEncryptionPair is the asymmetric keypair used to wrap (encrypt) the
  // RecordingEncryptionPair's private key.
  types.EncryptionKeyPair key_encryption_pair = 2;
}

// RecordingEncryptionSpec contains the active key set for encrypted session recording.
message RecordingEncryptionSpec {
  // AciveKeys is a list of active, wrapped X25519 keypairs. The unique set of RecordingEncryptionPair
  // public keys are used as recipients during age encryption of session recordings. This
  // allows any active private key to be used during decryption which guards against recordings
  // being inaccessible to auth servers waiting for their key to rotate.
  repeated WrappedKey active_keys = 1;
}

// RecordingEncryptionStatus contains the status of the RecordingEncryption resource.
message RecordingEncryptionStatus {}

// RecordingEncryption contains cluster state for encrypted session recordings.
message RecordingEncryption {
  string kind = 1;
  string sub_kind = 2;
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  RecordingEncryptionSpec spec = 5;
  RecordingEncryptionStatus status = 6;
}
