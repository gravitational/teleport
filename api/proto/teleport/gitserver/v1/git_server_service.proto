// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.gitserver.v1;

import "google/protobuf/empty.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/gitserver/v1;gitserverv1";

// GitServerService provides methods to manage Git server.
service GitServerService {
  // CreateGitServer is used to create a Git server object.
  rpc CreateGitServer(CreateGitServerRequest) returns (types.ServerV2);
  // GetGitServer is used to retrieve a Git server object.
  rpc GetGitServer(GetGitServerRequest) returns (types.ServerV2);
  // ListGitServers is used to query Git servers.
  rpc ListGitServers(ListGitServersRequest) returns (ListGitServersResponse);
  // UpdateGitServer is used to update a Git server object.
  rpc UpdateGitServer(UpdateGitServerRequest) returns (types.ServerV2);
  // UpsertGitServer is used to create or replace a Git server object.
  rpc UpsertGitServer(UpsertGitServerRequest) returns (types.ServerV2);
  // DeleteGitServer is used to delete a Git server object.
  rpc DeleteGitServer(DeleteGitServerRequest) returns (google.protobuf.Empty);

  // CreateGitHubAuthRequest starts GitHub OAuth flow for authenticated user.
  rpc CreateGitHubAuthRequest(CreateGitHubAuthRequestRequest) returns (types.GithubAuthRequest);
}

// CreateGitServerRequest is a request to create a Git server.
message CreateGitServerRequest {
  // Server is the Git server to create.
  types.ServerV2 server = 1;
}

// GetGitServerRequest is a request to get a Git server.
message GetGitServerRequest {
  // Name is the uuid of the server.
  string name = 1;
}

// ListGitServersRequest is the request to list Git servers.
message ListGitServersRequest {
  // The maximum number of items to return.
  // The server may impose a different page size at its discretion.
  int32 page_size = 1;
  // The page_token is the next_page_token value returned from a previous List request, if any.
  string page_token = 2;
}

// ListGitServersResponse is the response to ListGitServers.
message ListGitServersResponse {
  // The page of Git servers that matched the request.
  repeated types.ServerV2 servers = 1;
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// UpdateGitServerRequest is the request to update a Git server.
message UpdateGitServerRequest {
  // Server is the Git server to update.
  types.ServerV2 server = 1;
}

// UpsertGitServerRequest is the request to upsert a Git server.
message UpsertGitServerRequest {
  // Server is the Git server to upsert.
  types.ServerV2 server = 1;
}

// DeleteGitServerRequest is the request to delete a Git server.
message DeleteGitServerRequest {
  // Name is the uuid of the server.
  string name = 1;
}

// CreateGitHubAuthRequestRequest is the request for CreateGitHubAuthRequest.
message CreateGitHubAuthRequestRequest {
  // Request is the basic GitHub auth request.
  types.GithubAuthRequest request = 1;
  // Organization is the GitHub organization that the user is accessing.
  string organization = 2;
}
