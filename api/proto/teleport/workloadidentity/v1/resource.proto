// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.workloadidentity.v1;

import "teleport/header/v1/metadata.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1";

// WorkloadIdentity represents a single, or group of similar, workload
// identities and configures the structure of workload identity credentials and
// authorization rules. is a resource that represents the configuration of a trust
// domain federation.
message WorkloadIdentity {
  // The kind of resource represented.
  string kind = 1;
  // Differentiates variations of the same kind. All resources should
  // contain one, even if it is never populated.
  string sub_kind = 2;
  // The version of the resource being represented.
  string version = 3;
  // Common metadata that all resources share.
  teleport.header.v1.Metadata metadata = 4;
  // The configured properties of the WorkloadIdentity
  WorkloadIdentitySpec spec = 5;
}

// The attribute casted to a string must be equal to the value.
message WorkloadIdentityConditionEq {
  // The value to compare the attribute against.
  string value = 1;
}

// The attribute casted to a string must not be equal to the value.
message WorkloadIdentityConditionNotEq {
  // The value to compare the attribute against.
  string value = 1;
}

// The attribute casted to a string must be in the list of values.
message WorkloadIdentityConditionIn {
  // The list of values to compare the attribute against.
  repeated string values = 1;
}

// The attribute casted to a string must not be in the list of values.
message WorkloadIdentityConditionNotIn {
  // The list of values to compare the attribute against.
  repeated string values = 1;
}

// The individual conditions that make up a rule.
message WorkloadIdentityCondition {
  reserved 2;
  reserved "equals";
  // The name of the attribute to evaluate the condition against.
  string attribute = 1;
  oneof operator {
    // The attribute casted to a string must be equal to the value.
    WorkloadIdentityConditionEq eq = 3;
    // The attribute casted to a string must not be equal to the value.
    WorkloadIdentityConditionNotEq not_eq = 4;
    // The attribute casted to a string must be in the list of values.
    WorkloadIdentityConditionIn in = 5;
    // The attribute casted to a string must not be in the list of values.
    WorkloadIdentityConditionNotIn not_in = 6;
  }
}

// An individual rule that is evaluated during the issuance of a WorkloadIdentity.
message WorkloadIdentityRule {
  // The conditions that must be met for this rule to be considered passed.
  repeated WorkloadIdentityCondition conditions = 1;
}

// The rules which are evaluated before the WorkloadIdentity can be issued.
message WorkloadIdentityRules {
  // A list of rules used to determine if a WorkloadIdentity can be issued.
  // If none are provided, it will be considered a pass. If any are provided,
  // then at least one must pass for the rules to be considered passed.
  repeated WorkloadIdentityRule allow = 1;
}

// Template for an X509 Distinguished Name (DN).
// Each field is optional, and, if provided, supports templating using attributes.
message X509DistinguishedNameTemplate {
  // Common Name (CN) - 2.5.4.3
  // If empty, the RDN will be omitted from the DN.
  string common_name = 1;
  // Organization (O) - 2.5.4.10
  // If empty, the RDN will be omitted from the DN.
  string organization = 2;
  // Organizational Unit (OU) - 2.5.4.11
  // If empty, the RDN will be omitted from the DN.
  string organizational_unit = 3;
}

// Configuration specific to the issuance of X509-SVIDs.
message WorkloadIdentitySPIFFEX509 {
  // The DNS Subject Alternative Names (SANs) that should be included in an
  // X509-SVID issued using this WorkloadIdentity.
  //
  // Each entry in this list supports templating using attributes.
  repeated string dns_sans = 1;

  // Used to configure the Subject Distinguished Name (DN) of the X509-SVID.
  //
  // In most circumstances, it is recommended to prefer relying on the SPIFFE ID
  // encoded in the URI SAN. However, the Subject DN may be needed to support
  // legacy systems designed for X509 and not SPIFFE/WIMSE.
  //
  // If not provided, the X509-SVID will be issued with an empty Subject DN.
  X509DistinguishedNameTemplate subject_template = 2;
}

// Configuration pertaining to the issuance of SPIFFE-compatible workload
// identity credentials.
message WorkloadIdentitySPIFFE {
  // The path of the SPIFFE ID that will be issued to the workload.
  //
  // This should be prefixed with a forward-slash ("/").
  //
  // This field supports templating using attributes.
  string id = 1;
  // A freeform text field which is provided to workloads along with a
  // credential produced by this WorkloadIdentity. This can be used to provide
  // additional context that can be used to select between multiple credentials.
  string hint = 2;
  // Configuration specific to X509-SVIDs.
  WorkloadIdentitySPIFFEX509 x509 = 3;
}

// The spec for the WorkloadIdentity resource.
message WorkloadIdentitySpec {
  // The rules which are evaluated before the WorkloadIdentity can be issued.
  WorkloadIdentityRules rules = 1;
  // Configuration pertaining to the issuance of SPIFFE-compatible workload
  // identity credentials.
  WorkloadIdentitySPIFFE spiffe = 2;
}
