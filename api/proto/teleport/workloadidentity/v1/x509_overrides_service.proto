// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.workloadidentity.v1;

import "google/protobuf/empty.proto";
import "teleport/workloadidentity/v1/x509_overrides.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1";

// This service contains RPCs for the configuration resources related to X.509
// issuer overrides, and for operations that require the auth's help or
// involvement in generating overrides.
service X509OverridesService {
  // Create a CSR with the key associated with an internal X.509 SPIFFE issuer.
  rpc SignX509IssuerCSR(SignX509IssuerCSRRequest) returns (SignX509IssuerCSRResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Get a workload_identity_x509_issuer_override by name.
  rpc GetX509IssuerOverride(GetX509IssuerOverrideRequest) returns (X509IssuerOverride) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // List a page of workload_identity_x509_issuer_override items.
  rpc ListX509IssuerOverrides(ListX509IssuerOverridesRequest) returns (ListX509IssuerOverridesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Create a new workload_identity_x509_issuer_override. An ALREADY_EXISTS
  // error will be returned if an item with the same name already exists in the
  // cluster state storage.
  rpc CreateX509IssuerOverride(CreateX509IssuerOverrideRequest) returns (X509IssuerOverride);
  // Update a workload_identity_x509_issuer_override; an item with the same name
  // must exist and the revision of the new item must match the revision of the
  // existing item. A FAILED_PRECONDITION error will be returned otherwise.
  rpc UpdateX509IssuerOverride(UpdateX509IssuerOverrideRequest) returns (X509IssuerOverride);
  // Create a new workload_identity_x509_issuer_override or overwrite an
  // existing one with the same name.
  rpc UpsertX509IssuerOverride(UpsertX509IssuerOverrideRequest) returns (X509IssuerOverride) {
    option idempotency_level = IDEMPOTENT;
  }
  // Delete an existing workload_identity_x509_issuer_override that has a given
  // name. A NOT_FOUND error is returned if the item didn't exist.
  rpc DeleteX509IssuerOverride(DeleteX509IssuerOverrideRequest) returns (google.protobuf.Empty);
}

// The CSR creation mode for SignX509IssuerCSRRequest.
enum CSRCreationMode {
  CSR_CREATION_MODE_UNSPECIFIED = 0;
  // CSR with an empty subject and no extensions.
  CSR_CREATION_MODE_EMPTY = 1;
  // CSR with the same subject as the original self-signed certificate.
  CSR_CREATION_MODE_SAME = 2;
}

// Request message for SignX509IssuerCSR.
message SignX509IssuerCSRRequest {
  // ASN.1 DER certificate, the X.509 certificate in the spiffe cert_authority
  // whose key we want to use for the CSR.
  bytes issuer = 1;

  // The request mode defines how the CSR should be filled in based on the
  // content of the original issuer.
  CSRCreationMode csr_creation_mode = 2;

  // this can be extended with a "bool supports_async" field that would result,
  // if necessary, in the auth queuing the request for another auth to pick up
  // (for HSM support); the client would then poll the same request or maybe use
  // a different RPC with an identifier returned by this RPC to poll for the
  // signature
}

// Response message for SignX509IssuerCSR.
message SignX509IssuerCSRResponse {
  // ASN.1 DER certificate request.
  bytes csr = 1;
}

// Request message for GetX509IssuerOverride.
message GetX509IssuerOverrideRequest {
  string name = 1;
}

// Response message for GetX509IssuerOverride.
message ListX509IssuerOverridesRequest {
  int32 page_size = 1;
  string page_token = 2;
}

// Request message for ListX509IssuerOverrides.
message ListX509IssuerOverridesResponse {
  repeated X509IssuerOverride x509_issuer_overrides = 1;
  string next_page_token = 2;
}

// Request message for CreateX509IssuerOverride.
message CreateX509IssuerOverrideRequest {
  X509IssuerOverride x509_issuer_override = 1;
}

// Request message for UpdateX509IssuerOverride.
message UpdateX509IssuerOverrideRequest {
  X509IssuerOverride x509_issuer_override = 1;
}

// Request message for UpsertX509IssuerOverride.
message UpsertX509IssuerOverrideRequest {
  X509IssuerOverride x509_issuer_override = 1;
}

// Request message for DeleteX509IssuerOverride.
message DeleteX509IssuerOverrideRequest {
  string name = 1;
}
