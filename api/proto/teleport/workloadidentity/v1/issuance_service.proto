// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.workloadidentity.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "teleport/workloadidentity/v1/attrs.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1pb";

// WorkloadIdentityIssuanceService is the service that issues workload identity
// credentials.
service WorkloadIdentityIssuanceService {
  // IssueWorkloadIdentity issues a workload identity credential for the named
  // WorkloadIdentity resource. If it is unable to issue a credential,
  // an error will be returned.
  rpc IssueWorkloadIdentity(IssueWorkloadIdentityRequest) returns (IssueWorkloadIdentityResponse);
  // IssueWorkloadIdentities can issue multiple workload identity credentials
  // based on label selectors for the WorkloadIdentity resources.
  rpc IssueWorkloadIdentities(IssueWorkloadIdentitiesRequest) returns (IssueWorkloadIdentitiesResponse);
}

// The parameters for issuing an X509 SVID.
message X509SVIDParams {
  // The PKIX, ASN.1 DER public key to encode into the X509 SVID.
  bytes public_key = 1;
}

// The parameters for issuing a JWT SVID.
message JWTSVIDParams {
  // The audiences to encode into the JWT SVID as the `aud` claim.
  repeated string audiences = 1;
}

// A credential, and its metadata, that has been issued by Teleport Workload
// Identity.
message Credential {
  // The TTL that was chosen by the server.
  google.protobuf.Duration ttl = 1;
  // The time that the TTL is reached for this credential.
  google.protobuf.Timestamp expiry = 2;
  // The hint configured for this Workload Identity - if any. This is provided
  // to workloads using the SPIFFE Workload API to fetch credentials.
  string hint = 3;
  // The name of the Workload Identity resource used to issue this credential.
  string workload_identity_name = 4;
  // The revision of the Workload Identity resource used to issue this
  // credential.
  string workload_identity_revision = 5;
  // The fully qualified SPIFFE ID that was encoded into the SVID.
  string spiffe_id = 6;

  oneof credential {
    // The X509 SVID that was issued.
    // ASN.1 DER encoded X.509 certificate. No PEM.
    bytes x509_svid = 7;
    // The JWT SVID that was issued.
    string jwt_svid = 8;
  }
}

// The request for the IssueWorkloadIdentity RPC.
message IssueWorkloadIdentityRequest {
  // The name of the WorkloadIdentity resource to use for issuing the credential.
  string name = 1;
  // The parameters for issuing the credential, varying by credential type.
  oneof credential {
    // The parameters for issuing an X509 SVID.
    X509SVIDParams x509_svid_params = 2;
    // The parameters for issuing a JWT SVID.
    JWTSVIDParams jwt_svid_params = 3;
  }
  // The workload attributes to encode into the credential.
  WorkloadAttrs workload_attrs = 4;
  // The TTL that the client is requesting for the resulting credentials.
  // This may be adjusted by the server and therefore the client MUST check the
  // returned TTL rather than assuming that the requested TTL was granted.
  google.protobuf.Duration requested_ttl = 5;
}

// The response for the IssueWorkloadIdentity RPC.
message IssueWorkloadIdentityResponse {
  // The issued credential.
  Credential credential = 1;
}

// A key-values pair for selecting WorkloadIdentity resources based on their
// labels.
message LabelSelector {
  // The key to match.
  // If this is wildcard, then a single value of wildcard must also be provided.
  string key = 1;
  // Any of the acceptable matching values.
  repeated string values = 2;
}

// The request for the IssueWorkloadIdentities RPC.
message IssueWorkloadIdentitiesRequest {
  // The label selectors to use for selecting WorkloadIdentity resources.
  // At least one selector must be provided.
  repeated LabelSelector label_selectors = 1;
  // The parameters for issuing the credentials, varying by credential type.
  oneof credential {
    // The parameters for issuing an X509 SVID.
    X509SVIDParams x509_svid_params = 2;
    // The parameters for issuing a JWT SVID.
    JWTSVIDParams jwt_svid_params = 3;
  }
  // The workload attributes to encode into the credentials.
  WorkloadAttrs workload_attrs = 4;
  // The TTL that the client is requesting for the resulting credentials.
  // This may be adjusted by the server and therefore the client MUST check the
  // returned TTL rather than assuming that the requested TTL was granted.
  google.protobuf.Duration requested_ttl = 5;
}

// The response for the IssueWorkloadIdentities RPC.
message IssueWorkloadIdentitiesResponse {
  // The issued credentials.
  repeated Credential credentials = 1;
}
