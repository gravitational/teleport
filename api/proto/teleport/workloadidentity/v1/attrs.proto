// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.workloadidentity.v1;

import "teleport/trait/v1/trait.proto";
import "teleport/workloadidentity/v1/join_attrs.proto";
import "teleport/workloadidentity/v1/sigstore.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1";

// Attributes sourced from the Kubernetes workload attestor.
message WorkloadAttrsKubernetes {
  // Whether the workload passed Kubernetes attestation.
  bool attested = 1;
  // The namespace of the workload pod.
  string namespace = 2;
  // The name of the workload pod.
  string pod_name = 3;
  // The service account of the workload pod.
  string service_account = 4;
  // The UID of the workload pod.
  string pod_uid = 5;
  // The labels of the workload pod.
  map<string, string> labels = 6;
  // Details of the workload container.
  optional WorkloadAttrsKubernetesContainer container = 7;
}

// Attributes of the container sourced from the Kubernetes workload attestation.
message WorkloadAttrsKubernetesContainer {
  // The name of the container.
  string name = 1;
  // The name of the image the container is running.
  string image = 2;
  // The exact image digest the container is running.
  string image_digest = 3;
}

// Attributes sourced from the Unix workload attestor.
message WorkloadAttrsUnix {
  // Whether the workload passed Unix attestation.
  bool attested = 1;
  // The PID of the workload process.
  int32 pid = 2;
  // The primary user ID of the workload process.
  uint32 gid = 3;
  // The primary group ID of the workload process.
  uint32 uid = 4;
  // The path to the workload process binary.
  optional string binary_path = 5;
  // The hex-encoded SHA256 hash of the workload process binary.
  optional string binary_hash = 6;
}

// Attributes sourced from the Podman workload attestor.
message WorkloadAttrsPodman {
  // Whether the workload passed Podman attestation.
  bool attested = 1;
  // Attributes of the container.
  WorkloadAttrsPodmanContainer container = 2;
  // Attributes of the pod, if the container is in one.
  optional WorkloadAttrsPodmanPod pod = 3;
}

// Attributes of the container sourced from the Podman workload attestation.
message WorkloadAttrsPodmanContainer {
  // The name of the container.
  string name = 1;
  // The image the container is running.
  string image = 2;
  // The labels attached to the container.
  map<string, string> labels = 3;
  // The exact image digest the container is running.
  string image_digest = 4;
}

// Attributes of the pod sourced from the Podman workload attestation.
message WorkloadAttrsPodmanPod {
  // The name of the pod.
  string name = 1;
  // The labels attached to the pod.
  map<string, string> labels = 2;
}

// Attributes sourced from the Docker workload attestor.
message WorkloadAttrsDocker {
  // Whether the workload passed Docker attestation.
  bool attested = 1;
  // Attributes of the container.
  WorkloadAttrsDockerContainer container = 2;
}

// Attributes of the container sourced from the Docker workload attestation.
message WorkloadAttrsDockerContainer {
  // The name of the container.
  string name = 1;
  // The image the container is running.
  string image = 2;
  // The labels attached to the container.
  map<string, string> labels = 3;
  // The exact image digest the container is running.
  string image_digest = 4;
}

// Attributes sourced from the Systemd workload attestor.
message WorkloadAttrsSystemd {
  // Whether the workload passed Systemd attestation.
  bool attested = 1;
  // The systemd service name.
  string service = 2;
}

// Attributes sourced from the Sigstore workload attestor.
message WorkloadAttrsSigstore {
  // Verificiation payloads.
  repeated SigstoreVerificationPayload payloads = 1;
}

// The attributes provided by `tbot` regarding the workload's attestation.
// This will be mostly unset if the workload has not requested credentials via
// the SPIFFE Workload API.
message WorkloadAttrs {
  // The Unix-specific attributes.
  WorkloadAttrsUnix unix = 1;
  // The Kubernetes-specific attributes.
  WorkloadAttrsKubernetes kubernetes = 2;
  // The Podman-specific attributes.
  WorkloadAttrsPodman podman = 3;
  // The Docker-specific attributes.
  WorkloadAttrsDocker docker = 4;
  // The Systemd-specific attributes.
  WorkloadAttrsSystemd systemd = 5;
  // The Sigstore-specific attributes.
  WorkloadAttrsSigstore sigstore = 6;
}

// Attributes related to the user/bot making the request for a workload
// identity.
message UserAttrs {
  // The name of the user.
  string name = 1;
  // Whether the user is a bot.
  bool is_bot = 2;
  // If the user is a bot, the name of the bot.
  string bot_name = 3;
  // If the user is a bot, the instance ID of the bot.
  string bot_instance_id = 4;
  // Labels of the user.
  map<string, string> labels = 5;
  // Traits of the user.
  repeated teleport.trait.v1.Trait traits = 6;
}

// The attributes of a principal requesting a workload identity. These
// attributes can be leveraged in rules, expressions and templating within the
// WorkloadIdentity resource.
message Attrs {
  // Attributes sourced by workload attestation performed by `tbot`.
  WorkloadAttrs workload = 1;
  // Attributes sourced from the user/bot making the request for a workload
  // identity credential.
  UserAttrs user = 2;
  // Attributes sourced from the join process that the Bot underwent. This will
  // be unset if the principal making the request is not a Bot.
  JoinAttrs join = 3;
}
