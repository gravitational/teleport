// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.transport.v2;

import "teleport/legacy/client/proto/authservice.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/transport/v2;transportv2";

// TransportService provides methods to proxy connections to various Teleport instances.
//
// All connections operate on top of a bidirectional stream which transports raw payloads from higher level protocols
// (i.e. SSH). This service supports in-band multi-factor authentication (MFA) enforcement. MFA challenges and
// responses are handled directly within the stream as part of the session establishment process. All RPCs support both
// MFA-required and MFA-optional flows, and the client determines if MFA is needed by inspecting the first response from
// the server. After any required MFA and the client's initial request, either side may freely send data in any order
// until the stream is terminated.
service TransportService {
  // ProxySSH establishes an SSH connection to the target host over a bidirectional stream. Upon stream establishment,
  // the server will send an MFAAuthenticateChallenge as the first message if MFA is required. If MFA is not required,
  // the server will not send a challenge and the client can send the dial_target directly. All SSH and agent frames are
  // sent as raw bytes and are not interpreted by the proxy.
  rpc ProxySSH(stream ProxySSHRequest) returns (stream ProxySSHResponse);
}

// Request for ProxySSH
//
// In order for proxying to begin the client must send either an MFAAuthenticateResponse (if MFA is required) or a
// TargetHost (if MFA is not required) as the first message. Creating the stream doesn't actually open the SSH
// connection. Any attempts to exchange SSH or agent frames prior to the client sending one of these initial messages
// will result in the stream being terminated.
message ProxySSHRequest {
  // Only one of these fields should be set per message.
  // - If MFA is required, client sends MFAAuthenticateResponse after receiving challenge.
  // - If MFA is not required, client sends dial_target directly.
  // - After connection is established, client sends SSH or agent frames as raw bytes.
  //
  // Validation: The server MUST validate that exactly one field in the oneof payload is set per message.
  // If zero or more than one field is set, the server MUST reject the message and terminate the stream with an error.
  oneof payload {
    proto.MFAAuthenticateResponse mfa_response = 1; // Sent by client after receiving MFA challenge (if required)
    TargetHost dial_target = 2; // Sent by client after successful MFA or if MFA is not required
    Frame ssh = 3; // SSH payload
    Frame agent = 4; // SSH Agent payload
  }
}

// Response for ProxySSH
//
// The first message from the server will be either an MFAAuthenticateChallenge (if MFA is required) or ClusterDetails
// (if MFA is not required). After any required MFA, the server will send ClusterDetails and then SSH/agent frames as
// raw bytes.
message ProxySSHResponse {
  // Only one of these fields will be set per message.
  // The first message from the server will be:
  // - MFAAuthenticateChallenge if MFA is required (client must respond with MFAAuthenticateResponse)
  // - ClusterDetails if MFA is not required (client can send dial_target immediately)
  // After MFA (or if not required), server sends ClusterDetails and then SSH/agent frames.
  oneof payload {
    proto.MFAAuthenticateChallenge mfa_challenge = 1; // Sent by server as first message if MFA is required
    ClusterDetails details = 2; // Sent by server as first message if MFA is not required, and after MFA if required
    Frame ssh = 3; // SSH payload
    Frame agent = 4; // SSH Agent payload
  }
}

// Encapsulates protocol specific payloads
message Frame {
  // The raw packet of data
  bytes payload = 1;
}

// TargetHost indicates which server the connection is for
message TargetHost {
  // The hostname/ip/uuid:port of the remote host.
  string host_port = 1;
  // The cluster the server is a member of
  string cluster = 2;
  // The OS login name to use when connecting to the host.
  string login_name = 3;
}

// ClusterDetails contains cluster configuration information
message ClusterDetails {
  // If the cluster is running in FIPS mode
  bool fips_enabled = 1;
}
