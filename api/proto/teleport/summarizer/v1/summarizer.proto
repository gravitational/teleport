// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.summarizer.v1;

import "teleport/header/v1/metadata.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/summarizer/v1;summarizerv1";

// InferenceModel resource specifies a session summarization inference model
// configuration. It tells Teleport how to use a specific provider and model to
// summarize sessions.
message InferenceModel {
  // Kind is the resource kind. Should always be set to "inference_model".
  string kind = 1;
  // SubKind is the resource sub-kind. Should be empty.
  string sub_kind = 2;
  // Version is the resource version. Should be set to "v1".
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  InferenceModelSpec spec = 5;
}

// InferenceModelSpec specifies the inference provider and provider-specific
// parameters.
message InferenceModelSpec {
  oneof provider {
    // Openai indicates that this model uses OpenAI as the inference provider
    // and specifies OpenAI-specific parameters.
    OpenAIProvider openai = 1;
  }
}

// OpenAIProvider specifies OpenAI-specific parameters. It can be used to
// configure OpenAI or an OpenAI-compatible API, such as LiteLLM.
message OpenAIProvider {
  // OpenaiModelId specifies the model ID, as understood by the OpenAI API.
  string openai_model_id = 1;
  // Temperature controls the randomness of the model's output.
  double temperature = 2;
  // ApiKeySecretRef is a reference to an InferenceSecret that contains the
  // OpenAI API key.
  string api_key_secret_ref = 3;
  // BaseUrl is the OpenAI API base URL. Optional, defaults to the public
  // OpenAI API URL. May be used to point to a custom OpenAI-compatible API,
  // such as LiteLLM. In such case, the `api_key_secret_ref` must point to a
  // secret that contains the API key for that custom API.
  string base_url = 4;
}

// InferenceSecret resource stores session summarization inference provider
// secrets, such as API keys. They need to be referenced by appropriate
// provider configuration inside `InferenceModelSpec`.
message InferenceSecret {
  // Kind is the resource kind. Should always be set to "inference_secret".
  string kind = 1;
  // SubKind is the resource sub-kind. Should be empty.
  string sub_kind = 2;
  // Version is the resource version. Should be set to "v1".
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  // Spec contains the secret value. Once set, it can only be read by Teleport
  // itself; it will not be returned in API responses.
  InferenceSecretSpec spec = 5;
}

// InferenceSecretSpec defines the secret value for the inference model.
message InferenceSecretSpec {
  // Value is the secret value, such as an API key.
  string value = 1;
}

// InferencePolicy resource maps sessions to summarization models.
message InferencePolicy {
  // Kind is the resource kind. Should always be set to "inference_policy".
  string kind = 1;
  // SubKind is the resource sub-kind. Should be empty.
  string sub_kind = 2;
  // Version is the resource version. Should be set to "v1".
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  InferencePolicySpec spec = 5;
}

// InferencePolicySpec maps sessions to summarization models using a filter.
message InferencePolicySpec {
  // Kinds are session kinds matched by this policy, e.g., "ssh", "k8s", "db"
  repeated string kinds = 1;
  // Model is the name of the `InferenceModel` resource to be used for
  // summarization.
  string model = 2;
  // Filter is an optional filter expression using Teleport Predicate Language
  // to select sessions for summarization. If it's empty, all sessions that
  // match the list of kinds will be summarized using this model.
  string filter = 3;
}
