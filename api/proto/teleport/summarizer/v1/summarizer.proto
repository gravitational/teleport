// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.summarizer.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "teleport/header/v1/metadata.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/summarizer/v1;summarizerv1";

// InferenceModel resource specifies a session summarization inference model
// configuration. It tells Teleport how to use a specific provider and model to
// summarize sessions.
message InferenceModel {
  // Kind is the resource kind. Should always be set to "inference_model".
  string kind = 1;
  // SubKind is the resource sub-kind. Should be empty.
  string sub_kind = 2;
  // Version is the resource version. Should be set to "v1".
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  InferenceModelSpec spec = 5;
}

// InferenceModelSpec specifies the inference provider and provider-specific
// parameters.
message InferenceModelSpec {
  oneof provider {
    // Openai indicates that this model uses OpenAI as the inference provider
    // and specifies OpenAI-specific parameters.
    OpenAIProvider openai = 1;
  }
  // MaxSessionLengthBytes is the maximum session length that can be sent to
  // inference provider. Currently, it's determined by the size of model's
  // context window; future versions of Teleport will allow summarizing larger
  // sessions by splitting them.
  //
  // Inference providers will reject requests that are larger than given
  // model's context window. Since context windows are usually sized in tokens,
  // this value is an approximation. Assuming 2 bytes per input token should be
  // safe.
  //
  // Currently, Teleport will outright reject sessions larger than this limit;
  // future versions will split sessions in chunks, treating this size as a
  // maximum.
  //
  // If unset or set to 0, defaults to 1MB.
  int64 max_session_length_bytes = 2;
}

// OpenAIProvider specifies OpenAI-specific parameters. It can be used to
// configure OpenAI or an OpenAI-compatible API, such as LiteLLM.
message OpenAIProvider {
  // OpenaiModelId specifies the model ID, as understood by the OpenAI API.
  string openai_model_id = 1;
  // Temperature controls the randomness of the model's output.
  double temperature = 2;
  // ApiKeySecretRef is a reference to an InferenceSecret that contains the
  // OpenAI API key.
  string api_key_secret_ref = 3;
  // BaseUrl is the OpenAI API base URL. Optional, defaults to the public
  // OpenAI API URL. May be used to point to a custom OpenAI-compatible API,
  // such as LiteLLM. In such case, the `api_key_secret_ref` must point to a
  // secret that contains the API key for that custom API.
  string base_url = 4;
}

// InferenceSecret resource stores session summarization inference provider
// secrets, such as API keys. They need to be referenced by appropriate
// provider configuration inside `InferenceModelSpec`.
message InferenceSecret {
  // Kind is the resource kind. Should always be set to "inference_secret".
  string kind = 1;
  // SubKind is the resource sub-kind. Should be empty.
  string sub_kind = 2;
  // Version is the resource version. Should be set to "v1".
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  // Spec contains the secret value. Once set, it can only be read by Teleport
  // itself; it will not be returned in API responses.
  InferenceSecretSpec spec = 5;
}

// InferenceSecretSpec defines the secret value for the inference model.
message InferenceSecretSpec {
  // Value is the secret value, such as an API key.
  string value = 1;
}

// InferencePolicy resource maps sessions to summarization models.
message InferencePolicy {
  // Kind is the resource kind. Should always be set to "inference_policy".
  string kind = 1;
  // SubKind is the resource sub-kind. Should be empty.
  string sub_kind = 2;
  // Version is the resource version. Should be set to "v1".
  string version = 3;
  teleport.header.v1.Metadata metadata = 4;
  InferencePolicySpec spec = 5;
}

// InferencePolicySpec maps sessions to summarization models using a filter.
message InferencePolicySpec {
  // Kinds are session kinds matched by this policy, e.g., "ssh", "k8s", "db"
  repeated string kinds = 1;
  // Model is the name of the `InferenceModel` resource to be used for
  // summarization.
  string model = 2;
  // Filter is an optional filter expression using Teleport Predicate Language
  // to select sessions for summarization. If it's empty, all sessions that
  // match the list of kinds will be summarized using this model.
  string filter = 3;
}

// SummaryState is the state of the summarization process.
enum SummaryState {
  SUMMARY_STATE_UNSPECIFIED = 0;
  SUMMARY_STATE_PENDING = 1;
  SUMMARY_STATE_SUCCESS = 2;
  SUMMARY_STATE_ERROR = 3;
}

// Summary represents a summary of a session recording. This format is used to
// store the summaries in the session storage and return it with gRPC.
message Summary {
  // sessionId is an ID of the session whose recording got summarized.
  string session_id = 1;
  // State is the state of the summarization process.
  SummaryState state = 2;
  // InferenceStartedAt is the time when the summarization process started.
  google.protobuf.Timestamp inference_started_at = 3;
  // InferenceFinishedAt is the time when the summarization process finished.
  google.protobuf.Timestamp inference_finished_at = 4;
  // Content is the main text content of the summary, stored in Markdown
  // format. Available if the state is SUMMARY_STATE_SUCCESS.
  string content = 5;
  // ModelName is the name of the `InferenceModel` resource that was used to
  // generate this summary.
  string model_name = 6;
  // SessionEndEvent is the event that ended the summarized session. Session
  // end events carry the most complete set of data that Teleport has about a
  // given session. Used for checking access based on RBAC rule "where"
  // filters.
  //
  // The event is stored in an unstructured form, as storing an instance of
  // events.OneOf posed a number of technical challenges with JSON
  // serialization as a subcomponent of this message. These challenges stem
  // from the fact that audit events have gogoproto extensions.
  google.protobuf.Struct session_end_event = 7;
  // ErrorMessage is an error message if the summarization failed. Available if
  // the state is SUMMARY_STATE_ERROR.
  string error_message = 8;
  repeated string loading_messages = 9;
  // RiskLevel is the highest risk level identified in the timeline items.
  RiskLevel risk_level = 10;
  SessionSummary extended_summary = 11;
}

// RiskLevel represents the risk level associated with a timeline item.
enum RiskLevel {
  // RISK_LEVEL_UNSPECIFIED is the default value, indicating no specific risk level.
  RISK_LEVEL_UNSPECIFIED = 0;
  // RISK_LEVEL_LOW indicates a low risk level.
  RISK_LEVEL_LOW = 1;
  // RISK_LEVEL_MEDIUM indicates a medium risk level.
  RISK_LEVEL_MEDIUM = 2;
  // RISK_LEVEL_HIGH indicates a high risk level.
  RISK_LEVEL_HIGH = 3;
  // RISK_LEVEL_CRITICAL indicates a critical risk level.
  RISK_LEVEL_CRITICAL = 4;
}

// CommandStatus represents the status of a command executed during a session.
enum CommandStatus {
  // COMMAND_STATUS_UNSPECIFIED is the default value, indicating an unspecified status.
  COMMAND_STATUS_UNSPECIFIED = 0;
  // COMMAND_STATUS_SUCCESS indicates that the command executed successfully.
  COMMAND_STATUS_SUCCESS = 1;
  // COMMAND_STATUS_FAILED indicates that the command execution failed.
  COMMAND_STATUS_FAILED = 2;
  // COMMAND_STATUS_UNKNOWN indicates that the command status is unknown.
  COMMAND_STATUS_UNKNOWN = 3;
}

// CommandCategory represents the category of a command executed during a session.
enum CommandCategory {
  // COMMAND_CATEGORY_UNSPECIFIED is the default value, indicating an unspecified category.
  COMMAND_CATEGORY_UNSPECIFIED = 0;
  // COMMAND_CATEGORY_FILE indicates that the command is related to file operations.
  COMMAND_CATEGORY_FILE = 1;
  // COMMAND_CATEGORY_NETWORK indicates that the command is related to network operations.
  COMMAND_CATEGORY_NETWORK = 2;
  // COMMAND_CATEGORY_SYSTEM indicates that the command is related to system operations.
  COMMAND_CATEGORY_SYSTEM = 3;
  // COMMAND_CATEGORY_USER_MANAGEMENT indicates that the command is related to user management operations.
  COMMAND_CATEGORY_USER_MANAGEMENT = 4;
  // COMMAND_CATEGORY_PROCESS_MANAGEMENT indicates that the command is related to process management operations.
  COMMAND_CATEGORY_PROCESS_MANAGEMENT = 5;
  // COMMAND_CATEGORY_PACKAGE_MANAGEMENT indicates that the command is related to package management operations.
  COMMAND_CATEGORY_PACKAGE_MANAGEMENT = 6;
  // COMMAND_CATEGORY_SHELL_BUILTIN indicates that the command is a shell builtin command.
  COMMAND_CATEGORY_SHELL_BUILTIN = 7;
  // COMMAND_CATEGORY_DEVELOPMENT indicates that the command is related to development operations.
  COMMAND_CATEGORY_DEVELOPMENT = 8;
  // COMMAND_CATEGORY_DATABASE indicates that the command is related to database operations.
  COMMAND_CATEGORY_DATABASE = 9;
  // COMMAND_CATEGORY_MALICIOUS indicates that the command is potentially malicious.
  COMMAND_CATEGORY_MALICIOUS = 10;
  // COMMAND_CATEGORY_RECONNAISSANCE indicates that the command is related to reconnaissance activities.
  COMMAND_CATEGORY_RECONNAISSANCE = 11;
  // COMMAND_CATEGORY_PRIVILEGE_ESCALATION indicates that the command is related to privilege escalation activities.
  COMMAND_CATEGORY_PRIVILEGE_ESCALATION = 12;
  // COMMAND_CATEGORY_PERSISTENCE indicates that the command is related to persistence mechanisms.
  COMMAND_CATEGORY_PERSISTENCE = 13;
  // COMMAND_CATEGORY_EXFILTRATION indicates that the command is related to data exfiltration activities.
  COMMAND_CATEGORY_EXFILTRATION = 14;
  // COMMAND_CATEGORY_LATERAL_MOVEMENT indicates that the command is related to lateral movement activities
  COMMAND_CATEGORY_LATERAL_MOVEMENT = 15;
  // COMMAND_CATEGORY_DEFENSE_EVASION indicates that the command is related to defense evasion
  COMMAND_CATEGORY_DEFENSE_EVASION = 16;
  // COMMAND_CATEGORY_OTHER indicates that the command does not fit into any other category.
  COMMAND_CATEGORY_OTHER = 17;
}

// CommandSummary represents a structured summary of a command.
message CommandSummary {
  // Command is the actual command that was executed.
  string command = 1;
  // TimelineTitle is a short catchy title for timeline display.
  string timeline_title = 2;
  // ShortDescription is a brief one-line summary for display.
  string short_description = 3;
  // Description is a detailed description of what the command did and its output.
  string description = 4;
  // Success indicates whether the command executed successfully.
  bool success = 5;
  // ErrorMessages contains any error messages from the command execution.
  repeated string error_messages = 6;
  // SuspiciousFlags contains security concerns detected.
  repeated string suspicious_flags = 7;
  // RiskLevel indicates the risk level of the command.
  RiskLevel risk_level = 8;
  // Category indicates the category of the command.
  CommandCategory category = 9;
}

// SecurityAnalysis represents security-related findings.
message SecurityAnalysis {
  // HasSensitiveData indicates whether sensitive data was found.
  bool has_sensitive_data = 1;
  // SensitiveItems lists specific sensitive data found (IPs, passwords, keys, etc).
  repeated string sensitive_items = 2;
  // SuspiciousPatterns lists suspicious behaviors detected.
  repeated string suspicious_patterns = 3;
  // IOCs lists indicators of compromise.
  repeated string iocs = 4;
  // PrivilegeEscalation indicates attempted privilege escalation.
  bool privilege_escalation = 5;
  // DataExfiltration indicates potential data exfiltration.
  bool data_exfiltration = 6;
  // Persistence indicates persistence mechanisms detected.
  bool persistence = 7;
}

// TechnicalMetrics represents technical metrics and artifacts extracted from the output.
message TechnicalMetrics {
  // ExecutionTime is the time taken to execute the command.
  string execution_time = 1;
  // NetworkConnections lists IPs, domains, ports accessed.
  repeated string network_connections = 2;
  // FileAccess lists files read/written/executed.
  repeated string file_access = 3;
  // ProcessActivity lists processes spawned/killed.
  repeated string process_activity = 4;
  // SystemChanges lists system configuration changes.
  repeated string system_changes = 5;
}

// AnalysisResult contains all analysis outputs.
message AnalysisResult {
  // Summary contains the command summary.
  CommandSummary summary = 1;
  // Security contains security analysis findings.
  SecurityAnalysis security = 2;
  // TechnicalMetrics contains technical metrics and artifacts.
  TechnicalMetrics technical_metrics = 3;
  // RawAnalysis contains the raw analysis output.
  string raw_analysis = 4;
  // StartTime is when the command started (as duration from session start).
  google.protobuf.Duration start_time = 5;
  // EndTime is when the command ended (as duration from session start).
  google.protobuf.Duration end_time = 6;
}

// SessionSummary represents an overall summary of a session with multiple commands.
message SessionSummary {
  // Username is the username of the person whose session this was.
  string username = 1;
  // TotalCommands is the total number of commands executed in the session.
  int32 total_commands = 2;
  // CommandCategories maps command categories to their counts.
  repeated CommandCategory command_categories = 3;
  // OverallRiskLevel is the overall risk level of the session.
  RiskLevel overall_risk_level = 4;
  // SessionDescription is a plain language description of what happened.
  string session_description = 5;
  // SuspiciousActivities lists concerning behaviors.
  repeated string suspicious_activities = 6;
  // SecurityIncidents lists potential security incidents.
  repeated string security_incidents = 7;
  // SensitiveDataFound indicates whether sensitive data was found in the session.
  bool sensitive_data_found = 8;
  // CompromiseIndicators indicates if session shows signs of compromise.
  bool compromise_indicators = 9;
  // NotableCommandIndexes contains indexes of most important/interesting commands to highlight.
  repeated int32 notable_command_indexes = 10;
  // CommandAnalyses contains analyses for each command in the session.
  repeated AnalysisResult command_analyses = 11;
}
