// Copyright 2025 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.summarizer.v1;

import "google/protobuf/empty.proto";
import "teleport/summarizer/v1/summarizer.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/summarizer/v1;summarizerv1";

// SummarizerService is the service for managing summarization inference
// models, secrets, and policies. These objects configures the session
// recording summarizer.
service SummarizerService {
  // CreateInferenceModel creates a new InferenceModel.
  rpc CreateInferenceModel(CreateInferenceModelRequest) returns (InferenceModel);
  // GetInferenceModel retrieves an existing InferenceModel by name.
  rpc GetInferenceModel(GetInferenceModelRequest) returns (InferenceModel);
  // UpdateInferenceModel updates an existing InferenceModel.
  rpc UpdateInferenceModel(UpdateInferenceModelRequest) returns (InferenceModel);
  // UpsertInferenceModel creates a new InferenceModel or updates an existing
  // one.
  rpc UpsertInferenceModel(UpsertInferenceModelRequest) returns (InferenceModel);
  // DeleteInferenceModel deletes an existing InferenceModel by name.
  rpc DeleteInferenceModel(DeleteInferenceModelRequest) returns (google.protobuf.Empty);
  // ListInferenceModels lists all InferenceModels that match the request.
  rpc ListInferenceModels(ListInferenceModelsRequest) returns (ListInferenceModelsResponse);

  // CreateInferenceSecret creates a new InferenceSecret.
  rpc CreateInferenceSecret(CreateInferenceSecretRequest) returns (InferenceSecret);
  // GetInferenceSecret retrieves an existing InferenceSecret by name.
  rpc GetInferenceSecret(GetInferenceSecretRequest) returns (InferenceSecret);
  // UpdateInferenceSecret updates an existing InferenceSecret.
  rpc UpdateInferenceSecret(UpdateInferenceSecretRequest) returns (InferenceSecret);
  // UpsertInferenceSecret creates a new InferenceSecret or updates an existing
  // one.
  rpc UpsertInferenceSecret(UpsertInferenceSecretRequest) returns (InferenceSecret);
  // DeleteInferenceSecret deletes an existing InferenceSecret by name.
  rpc DeleteInferenceSecret(DeleteInferenceSecretRequest) returns (google.protobuf.Empty);
  // ListInferenceSecrets lists all InferenceSecrets that match the request.
  rpc ListInferenceSecrets(ListInferenceSecretsRequest) returns (ListInferenceSecretsResponse);

  // CreateInferencePolicy creates a new InferencePolicy.
  rpc CreateInferencePolicy(CreateInferencePolicyRequest) returns (InferencePolicy);
  // GetInferencePolicy retrieves an existing InferencePolicy by name.
  rpc GetInferencePolicy(GetInferencePolicyRequest) returns (InferencePolicy);
  // UpdateInferencePolicy updates an existing InferencePolicy.
  rpc UpdateInferencePolicy(UpdateInferencePolicyRequest) returns (InferencePolicy);
  // UpsertInferencePolicy creates a new InferencePolicy or updates an existing
  // one.
  rpc UpsertInferencePolicy(UpsertInferencePolicyRequest) returns (InferencePolicy);
  // DeleteInferencePolicy deletes an existing InferencePolicy by name.
  rpc DeleteInferencePolicy(DeleteInferencePolicyRequest) returns (google.protobuf.Empty);
  // ListInferencePolicies lists all InferencePolicies that match the request.
  rpc ListInferencePolicies(ListInferencePoliciesRequest) returns (ListInferencePoliciesResponse);
}

// Summarization inference models

// CreateInferenceModelRequest is a request for creating a InferenceModel.
message CreateInferenceModelRequest {
  // InferenceModel is the InferenceModel resource to create.
  InferenceModel model = 1;
}

// GetInferenceModelRequest is a request for retrieving a InferenceModel.
message GetInferenceModelRequest {
  // Name is the resource name of the InferenceModel to retrieve.
  string name = 1;
}

// UpdateInferenceModelRequest is a request for updating a InferenceModel.
message UpdateInferenceModelRequest {
  // Model is the InferenceModel resource to update.
  InferenceModel model = 1;
}

// UpsertInferenceModelRequest is a request for updating a InferenceModel.
message UpsertInferenceModelRequest {
  // Model is the InferenceModel resource to create or update.
  InferenceModel model = 1;
}

// DeleteInferenceModelRequest is a request for deleting a InferenceModel.
message DeleteInferenceModelRequest {
  // Name is the resource name of the InferenceModel to delete.
  string name = 1;
}

// ListInferenceModelsRequest is a request for listing InferenceModels.
message ListInferenceModelsRequest {
  // PageSize is the maximum number of items to return. The server may use a
  // different page size at its discretion.
  int32 page_size = 1;
  // PageToken is the next_page_token value returned from a previous List
  // request, if any.
  string page_token = 2;
}

// ListInferenceModelsResponse is the response for listing InferenceModels.
message ListInferenceModelsResponse {
  // Models is the page of InferenceModels that matched the request.
  repeated InferenceModel models = 1;
  // NextPageToken is the token to retrieve the next page of results, or empty
  // if there are no more results in the list.
  string next_page_token = 2;
}

// Summarization inference secrets

// CreateInferenceSecretRequest is a request for creating a InferenceSecret.
message CreateInferenceSecretRequest {
  // InferenceSecret is the InferenceSecret resource
  // to create.
  InferenceSecret secret = 1;
}

// GetInferenceSecretRequest is a request for retrieving a InferenceSecret.
message GetInferenceSecretRequest {
  // Name is the resource name of the InferenceSecret to retrieve.
  string name = 1;
}

// UpdateInferenceSecretRequest is a request for updating a InferenceSecret.
message UpdateInferenceSecretRequest {
  // Secret is the InferenceSecret resource to update.
  InferenceSecret secret = 1;
}

// UpsertInferenceSecretRequest is a request for updating a InferenceSecret.
message UpsertInferenceSecretRequest {
  // Secret is the InferenceSecret resource to create or update.
  InferenceSecret secret = 1;
}

// DeleteInferenceSecretRequest is a request for deleting a InferenceSecret.
message DeleteInferenceSecretRequest {
  // Name is the resource name of the InferenceSecret to delete.
  string name = 1;
}

// ListInferenceSecretsRequest is a request for listing InferenceSecrets.
message ListInferenceSecretsRequest {
  // PageSize is the maximum number of items to return. The server may use a
  // different page size at its discretion.
  int32 page_size = 1;
  // PageToken is the next_page_token value returned from a previous List
  // request, if any.
  string page_token = 2;
}

// ListInferenceSecretsResponse is the response for listing InferenceSecrets.
message ListInferenceSecretsResponse {
  // Secrets is the page of InferenceSecrets that matched the
  // request.
  repeated InferenceSecret secrets = 1;
  // NextPageToken is the token to retrieve the next page of results, or empty
  // if there are no more results in the list.
  string next_page_token = 2;
}

// Summarization inference policies

// CreateInferencePolicyRequest is a request for creating a InferencePolicy.
message CreateInferencePolicyRequest {
  // InferencePolicy is the InferencePolicy resource to create.
  InferencePolicy policy = 1;
}

// GetInferencePolicyRequest is a request for retrieving a InferencePolicy.
message GetInferencePolicyRequest {
  // Name is the resource name of the InferencePolicy to retrieve.
  string name = 1;
}

// UpdateInferencePolicyRequest is a request for updating a InferencePolicy.
message UpdateInferencePolicyRequest {
  // Policy is the InferencePolicy resource to update.
  InferencePolicy policy = 1;
}

// UpsertInferencePolicyRequest is a request for updating a InferencePolicy.
message UpsertInferencePolicyRequest {
  // Policy is the InferencePolicy resource to create or update.
  InferencePolicy policy = 1;
}

// DeleteInferencePolicyRequest is a request for deleting a InferencePolicy.
message DeleteInferencePolicyRequest {
  // Name is the resource name of the InferencePolicy to delete.
  string name = 1;
}

// ListInferencePoliciesRequest is a request for listing InferencePolicies.
message ListInferencePoliciesRequest {
  // PageSize is the maximum number of items to return. The server may use a
  // different page size at its discretion.
  int32 page_size = 1;
  // PageToken is the next_page_token value returned from a previous List
  // request, if any.
  string page_token = 2;
}

// ListInferencePoliciesResponse is the response for listing InferencePolicies.
message ListInferencePoliciesResponse {
  // Policies is the page of InferencePolicies that matched the
  // request.
  repeated InferencePolicy policies = 1;
  // NextPageToken is the token to retrieve the next page of results, or empty
  // if there are no more results in the list.
  string next_page_token = 2;
}
