// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.discoveryconfig.v1;

import "google/protobuf/timestamp.proto";
import "teleport/header/v1/resourceheader.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/discoveryconfig/v1;discoveryconfigv1";

// DiscoveryConfig is a resource that has Discovery Resource Matchers and a Discovery Group.
//
// Teleport Discovery Services will load the dynamic DiscoveryConfigs whose Discovery Group matches the discovery_group defined in their configuration.
message DiscoveryConfig {
  // Header is the resource header.
  teleport.header.v1.ResourceHeader header = 1;

  // Spec is an DiscoveryConfig specification.
  DiscoveryConfigSpec spec = 2;

  // Status is the resource Status
  DiscoveryConfigStatus status = 3;
}

// DiscoveryConfigSpec contains properties required to create matchers to be used by discovery_service.
// Those matchers are used by discovery_service to watch for cloud resources and create them in Teleport.
message DiscoveryConfigSpec {
  // DiscoveryGroup is used by discovery_service to add extra matchers.
  // All the discovery_services that have the same discovery_group, will load the matchers of this resource.
  string discovery_group = 1;

  // AWS is a list of AWS Matchers.
  repeated types.AWSMatcher aws = 2;
  // Azure is a list of Azure Matchers.
  repeated types.AzureMatcher azure = 3;
  // GCP is a list of GCP Matchers.
  repeated types.GCPMatcher gcp = 4;
  // Kube is a list of Kubernetes Matchers.
  repeated types.KubernetesMatcher kube = 5;
  // AccessGraph is the configurations for syncing Cloud accounts into Access Graph.
  types.AccessGraphSync access_graph = 6;
}

// DiscoveryConfigStatus holds dynamic information about the discovery configuration
// running status such as errors, state and count of the resources.
message DiscoveryConfigStatus {
  // State reports the Discovery config state.
  DiscoveryConfigState state = 1;
  // error_message holds the error message when state is DISCOVERY_CONFIG_STATE_ERROR.
  optional string error_message = 2;
  // discovered_resources holds the count of the discovered resources in the previous iteration.
  uint64 discovered_resources = 3;
  // last_sync_time is the timestamp when the Discovery Config was last sync.
  google.protobuf.Timestamp last_sync_time = 4;
  // AWSEC2InstancesDiscovered contains all the EC2 Instances Discovered.
  // Does not include the AWS resources from Access Graph.
  repeated AWSEC2InstancesDiscovered aws_ec2_instances_discovered = 5;
}

// DiscoveryConfigState is the state of the discovery config resource.
enum DiscoveryConfigState {
  DISCOVERY_CONFIG_STATE_UNSPECIFIED = 0;
  // DISCOVERY_CONFIG_STATE_RUNNING is used when the operation doesn't report
  // incidents.
  DISCOVERY_CONFIG_STATE_RUNNING = 1;
  // DISCOVERY_CONFIG_STATE_ERROR is used when the operation reports
  // incidents.
  DISCOVERY_CONFIG_STATE_ERROR = 2;
  // DISCOVERY_CONFIG_STATE_SYNCING is used when the discovery process has started but didn't finished yet.
  DISCOVERY_CONFIG_STATE_SYNCING = 3;
}

// AWSEC2InstancesDiscovered represents an AWS EC2 Instance that was discovered.
message AWSEC2InstancesDiscovered {
  // Region is the AWS Region.
  string region = 1;
  // Integration is the AWS OIDC Integration name used to fetch the resource.
  string integration = 2;
  // InstanceID is the instance ID which uniquely identifies this resource in AWS.
  string instance_id = 3;
  // EnrollMode indicates the enroll mode used to auto-enroll this instance.
  // Either using the EICE or the Script mode.
  types.InstallParamEnrollMode enroll_mode = 4;
  // EnrollStatus indicates whether the instance was successfully enrolled or if it failed.
  AWSEC2EnrollmentStatus enroll_status = 5;
  // EnrollMessage is an informational message used to further expand on the result of auto-enrolling this instance.
  string enroll_message = 6;
  // Name is the friendly name of the resource.
  // Might be empty.
  string name = 7;
  // SSMInvocationURL is the URL that points to the ssm:RunCommand invocation result.
  // This only present when auto-enrolling using the Script mode.
  string ssm_invocation_url = 8;
}

// AWSEC2EnrollmentStatus is the status of the discovery config EC2 instance enrollment.
enum AWSEC2EnrollmentStatus {
  AWSEC2_ENROLLMENT_STATUS_UNSPECIFIED = 0;
  // AWSEC2_ENROLLMENT_STATUS_SYNCING means the instance was detected and the auto-enrollment process started.
  AWSEC2_ENROLLMENT_STATUS_SYNCING = 1;
  // AWSEC2_ENROLLMENT_STATUS_SCRIPT_SUCCESS means that teleport successfully ran the script.
  AWSEC2_ENROLLMENT_STATUS_SCRIPT_SUCCESS = 2;
  // AWSEC2_ENROLLMENT_STATUS_SCRIPT_ERROR means that the script failed to run.
  AWSEC2_ENROLLMENT_STATUS_SCRIPT_ERROR = 3;
  // AWSEC2_ENROLLMENT_STATUS_SUCCESS indicates that the instance joined teleport.
  AWSEC2_ENROLLMENT_STATUS_SUCCESS = 4;
  // AWSEC2_ENROLLMENT_STATUS_ERROR indicates some other error when trying to auto-enroll the instance.
  AWSEC2_ENROLLMENT_STATUS_ERROR = 5;
}
