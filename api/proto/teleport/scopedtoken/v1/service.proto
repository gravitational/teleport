// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.scopedtoken.v1;

import "teleport/scopedtoken/v1/token.proto";
import "teleport/scopes/v1/scopes.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/scopedtoken/v1;scopedtoken";

// ScopedTokenService provides an API for managing scoped token resources and their assignments.
service ScopedTokenService {
  // GetScopedToken gets a scoped token by name.
  rpc GetScopedToken(GetScopedTokenRequest) returns (GetScopedTokenResponse);

  // ListScopedTokens returns a paginated list of scoped tokens.
  rpc ListScopedTokens(ListScopedTokensRequest) returns (ListScopedTokensResponse);

  // CreateScopedToken creates a new scoped token.
  rpc CreateScopedToken(CreateScopedTokenRequest) returns (CreateScopedTokenResponse);

  // UpdateScopedToken updates a scoped token.
  rpc UpdateScopedToken(UpdateScopedTokenRequest) returns (UpdateScopedTokenResponse);

  // DeleteScopedToken deletes a scoped token.
  rpc DeleteScopedToken(DeleteScopedTokenRequest) returns (DeleteScopedTokenResponse);
}

// GetScopedTokenRequest is the request to get a scoped token.
message GetScopedTokenRequest {
  // Name is the name of the scoped token.
  string name = 1;
}

// GetScopedTokenResponse is the response to get a scoped token.
message GetScopedTokenResponse {
  // Token is the scoped token.
  ScopedToken token = 1;
}

// ListScopedTokensRequest is the request to list scoped tokens.
message ListScopedTokensRequest {
  // ResourceScope filters tokens by their resource scope if specified.
  teleport.scopes.v1.Filter resource_scope = 1;

  // AssignedScope filters tokens by their assigned scope if specified.
  teleport.scopes.v1.Filter assigned_scope = 2;

  // Cursor is the pagination cursor.
  string cursor = 3;

  // Limit is the maximum number of results to return.
  uint32 limit = 4;
}

// ListScopedTokensResponse is the response to list scoped tokens.
message ListScopedTokensResponse {
  // Tokens is the list of scoped tokens.
  repeated ScopedToken tokens = 1;

  // Cursor is the pagination cursor.
  string cursor = 2;
}

// CreateScopedTokenRequest is the request to create a scoped token.
message CreateScopedTokenRequest {
  // Token is the scoped token to create.
  ScopedToken token = 1;
}

// CreateScopedTokenResponse is the response to create a scoped token.
message CreateScopedTokenResponse {
  // Token is the scoped token that was created.
  ScopedToken token = 1;
}

// UpdateScopedTokenRequest is the request to update a scoped token.
message UpdateScopedTokenRequest {
  // Token is the scoped token to update.
  ScopedToken token = 1;
}

// UpdateScopedTokenResponse is the response to update a scoped token.
message UpdateScopedTokenResponse {
  // Token is the post-update scoped token.
  ScopedToken token = 1;
}

// DeleteScopedTokenRequest is the request to delete a scoped token.
message DeleteScopedTokenRequest {
  // Name is the name of the scoped token to delete.
  string name = 1;

  // Revision asserts the revision of the scoped token to delete (optional).
  string revision = 2;
}

// DeleteScopedTokenResponse is the response to delete a scoped token.
message DeleteScopedTokenResponse {}
