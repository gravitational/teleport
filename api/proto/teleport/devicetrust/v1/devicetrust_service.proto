// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.devicetrust.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "teleport/devicetrust/v1/authenticate_challenge.proto";
import "teleport/devicetrust/v1/device.proto";
import "teleport/devicetrust/v1/device_collected_data.proto";
import "teleport/devicetrust/v1/device_confirmation_token.proto";
import "teleport/devicetrust/v1/device_enroll_token.proto";
import "teleport/devicetrust/v1/device_source.proto";
import "teleport/devicetrust/v1/device_web_token.proto";
import "teleport/devicetrust/v1/tpm.proto";
import "teleport/devicetrust/v1/usage.proto";
import "teleport/devicetrust/v1/user_certificates.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/devicetrust/v1;devicetrustv1";

// DeviceTrustService provides methods to manage, enroll and authenticate
// trusted devices.
//
// A trusted device is a device that is registered and enrolled with Teleport,
// thus allowing the system to provide some guarantees about its provenance and
// state.
//
// Managing devices requires the corresponding CRUD "device" permission.
// Additionally, creating enrollment tokens requires the "create_enroll_token"
// permission and enrolling devices requires the "enroll" permission. See
// CreateDevice, CreateDeviceEnrollToken and EnrollDevice for reference.
//
// An authenticated, trusted device allows its user to perform device-aware
// actions. Such actions include accessing an SSH node, managing sensitive
// resources via `tctl`, etc. The enforcement mode is defined via cluster-wide
// and/or per-role toggles. Device authentication is automatic for enrolled
// devices communicating with Enterprise clusters. See AuthenticateDevice for
// reference.
//
// Device Trust is a Teleport Enterprise feature. Open Source Teleport clusters
// treat all Device RPCs as unimplemented (which, in fact, they are for OSS.)
service DeviceTrustService {
  // CreateDevice creates a device, effectively registering it on Teleport.
  // Devices need to be registered before they can be enrolled.
  //
  // It is possible to create both a Device and a DeviceEnrollToken in a
  // single invocation, see CreateDeviceRequest.create_enroll_token.
  rpc CreateDevice(CreateDeviceRequest) returns (Device);

  // UpdateDevice is a masked device update.
  //
  // Only certain fields may be updated, see Device for details.
  rpc UpdateDevice(UpdateDeviceRequest) returns (Device);

  // UpsertDevice creates or updates a device.
  //
  // UpsertDevice attempts a write of all mutable fields on updates, therefore
  // reading a fresh copy of the device is recommended. Update semantics still
  // apply.
  rpc UpsertDevice(UpsertDeviceRequest) returns (Device);

  // DeleteDevice hard-deletes a device, removing it and all collected data
  // history from the system.
  //
  // Prefer locking the device instead (see the `tctl lock` command). Deleting a
  // device doesn't invalidate existing device certificates, but does prevent
  // new device authentication ceremonies from occurring.
  //
  // Use with caution.
  rpc DeleteDevice(DeleteDeviceRequest) returns (google.protobuf.Empty);

  // FindDevices retrieves devices by device ID and/or asset tag.
  //
  // It provides an in-between search between fetching a device by ID and
  // listing all devices.
  //
  // ID matches are guaranteed to be present in the response.
  rpc FindDevices(FindDevicesRequest) returns (FindDevicesResponse);

  // GetDevice retrieves a device by ID.
  rpc GetDevice(GetDeviceRequest) returns (Device);

  // ListDevices lists all registered devices.
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);

  // BulkCreateDevices is a bulk variant of CreateDevice.
  //
  // Unlike CreateDevice, it does not support creation of enrollment tokens, as
  // it is meant for bulk inventory registration.
  rpc BulkCreateDevices(BulkCreateDevicesRequest) returns (BulkCreateDevicesResponse);

  // CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
  // An enrollment token is required for the enrollment ceremony. See
  // EnrollDevice.
  rpc CreateDeviceEnrollToken(CreateDeviceEnrollTokenRequest) returns (DeviceEnrollToken);

  // EnrollDevice performs the device enrollment ceremony.
  //
  // Enrollment requires a previously-registered Device and a DeviceEnrollToken,
  // see CreateDevice and CreateDeviceEnrollToken.
  //
  // An enrolled device is allowed, via AuthenticateDevice, to acquire
  // certificates containing device extensions, thus gaining access to
  // device-aware actions.
  //
  // macOS enrollment flow:
  // -> EnrollDeviceInit (client)
  // <- MacOSEnrollChallenge (server)
  // -> MacOSEnrollChallengeResponse
  // <- EnrollDeviceSuccess
  //
  // TPM enrollment flow:
  // -> EnrollDeviceInit (client)
  // <- TPMEnrollChallenge (server)
  // -> TPMEnrollChallengeResponse
  // <- EnrollDeviceSuccess
  rpc EnrollDevice(stream EnrollDeviceRequest) returns (stream EnrollDeviceResponse);

  // AuthenticateDevice performs the device authentication ceremony.
  //
  // Device authentication exchanges existing user certificates without device
  // extensions for certificates augmented with device extensions. The new
  // certificates allow the user to perform device-aware actions.
  //
  // Only registered and enrolled devices may perform device authentication.
  rpc AuthenticateDevice(stream AuthenticateDeviceRequest) returns (stream AuthenticateDeviceResponse);

  // ConfirmDeviceWebAuthentication finalizes the device web authentication
  // ceremony started by the creation of a DeviceWebToken and subsequent
  // AuthenticateDevice call.
  //
  // The DeviceConfirmationToken issued by AuthenticateDevice is spent in this
  // method, which consequently augments the corresponding Web Session
  // certificates with device extensions.
  //
  // This method must be called by the Teleport Proxy, and the Proxy itself must
  // be called by the same browser that started the on-behalf-of authentication
  // attempt. See the /webapi/device/webconfirm endpoint.
  //
  // See
  // https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
  rpc ConfirmDeviceWebAuthentication(ConfirmDeviceWebAuthenticationRequest) returns (ConfirmDeviceWebAuthenticationResponse);

  // Syncs device inventory from a source exterior to Teleport, for example an
  // MDM.
  // Allows both partial and full syncs; for the latter, devices missing from
  // the external inventory are handled as specified.
  // Authorized either by a valid MDM service certificate or the appropriate
  // "device" permissions (create/update/delete).
  rpc SyncInventory(stream SyncInventoryRequest) returns (stream SyncInventoryResponse);

  // Superseded by ResourceUsageService.GetUsage.
  rpc GetDevicesUsage(GetDevicesUsageRequest) returns (DevicesUsage) {
    option deprecated = true;
  }
}

// Request for CreateDevice.
message CreateDeviceRequest {
  // Device to create.
  Device device = 1;

  // If true, a DeviceEnrollToken is created along with the Device.
  bool create_enroll_token = 2;

  // If true, create the device as a Teleport resource, meaning that fields that
  // are usually considered read-only or system managed are copied as provided
  // to storage.
  // Prefer using non-resource creation semantics if possible.
  bool create_as_resource = 3;

  // Custom expiration time for enrollment tokens.
  // A short (for humans) server default is used if unset.
  google.protobuf.Timestamp enroll_token_expire_time = 4;
}

// Request for UpdateDevice.
message UpdateDeviceRequest {
  // Device to update.
  Device device = 1;

  // Update mask applied to the resource.
  // Fields are masked according to their proto name.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for UpsertDevice.
message UpsertDeviceRequest {
  // Device to create or update.
  Device device = 1;

  // If true, creates the device using resource semantics.
  // Has no effect on device updates.
  // See create_as_resource in CreateDeviceRequest.
  bool create_as_resource = 2;
}

// Request for DeleteDevice.
message DeleteDeviceRequest {
  // ID of the Device to delete.
  string device_id = 1;
}

// Request for FindDevices.
//
// Inspect the returned devices to determine whether the match was by ID or
// asset tag.
message FindDevicesRequest {
  // Device ID or asset tag.
  string id_or_tag = 1;
}

// Response for FindDevices.
message FindDevicesResponse {
  // Devices that matched the search.
  // The number of resulting devices is expected to be low and may be
  // artificially capped by the server otherwise.
  repeated Device devices = 1;
}

// Request for GetDevice.
message GetDeviceRequest {
  // ID of the device.
  string device_id = 1;
}

// Request for ListDevices.
//
// Follows the pagination semantics of
// https://cloud.google.com/apis/design/standard_methods#list.
message ListDevicesRequest {
  // The maximum number of items to return.
  // The server may impose a different page size at its discretion.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // Specifies which fields of the resource should be returned in the response.
  // Defaults to DEVICE_VIEW_LIST.
  DeviceView view = 3;
}

// Response for ListDevices.
message ListDevicesResponse {
  // Devices that matched the search.
  repeated Device devices = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// DeviceView specifies which fields of returned devices should be present.
enum DeviceView {
  DEVICE_VIEW_UNSPECIFIED = 0;

  // View for general device listings, like `tctl devices ls`.
  // Contains only basic information, such as IDs and enrollment status.
  DEVICE_VIEW_LIST = 1;

  // View for detailed device queries, like `tctl get devices`.
  // Presents a complete view of the device.
  DEVICE_VIEW_RESOURCE = 2;
}

// Request for BulkCreateDevices.
message BulkCreateDevicesRequest {
  // Devices to create.
  repeated Device devices = 1;

  // If true, create the device as a Teleport resource, meaning that fields that
  // are usually considered read-only or system managed are copied as provided
  // to storage.
  // Prefer using non-resource creation semantics if possible.
  bool create_as_resource = 2;
}

// Response for BulkCreateDevices.
message BulkCreateDevicesResponse {
  // Created devices or a failure reason.
  // Responses are sorted according to the request.
  repeated DeviceOrStatus devices = 1;
}

// DeviceOrStatus contains either a device ID, in case of success, or a status
// in case of failures.
message DeviceOrStatus {
  // Status of the operation.
  // May either be absent or contain the OK code for successes, at the
  // implementation's discretion.
  google.rpc.Status status = 1;

  // ID of the created device.
  // Only present if the status is OK.
  string id = 2;

  // If true the action attempted against the device was a delete, instead of a
  // create or update.
  bool deleted = 3;
}

// Request for CreateDeviceEnrollToken.
message CreateDeviceEnrollTokenRequest {
  // ID of the device.
  string device_id = 1;

  // Device collected data.
  // Used to authorize issuance of device enrollment tokens for auto-enrollment.
  // Not required otherwise.
  DeviceCollectedData device_data = 2;

  // Custom expiration time for enrollment tokens.
  // A short (for humans) server default is used if unset.
  google.protobuf.Timestamp expire_time = 3;
}

// Request for EnrollDevice.
message EnrollDeviceRequest {
  oneof payload {
    EnrollDeviceInit init = 1;
    MacOSEnrollChallengeResponse macos_challenge_response = 2;
    TPMEnrollChallengeResponse tpm_challenge_response = 3;
  }
}

// Response for EnrollDevice.
message EnrollDeviceResponse {
  oneof payload {
    EnrollDeviceSuccess success = 1;
    MacOSEnrollChallenge macos_challenge = 2;
    TPMEnrollChallenge tpm_challenge = 3;
  }
}

// EnrollDeviceInit initiates the enrollment ceremony.
message EnrollDeviceInit {
  // Device enrollment token.
  // See CreateDevice or CreateDeviceEnrollToken.
  string token = 1;

  // ID of the device credential.
  string credential_id = 2;

  // Device collected data.
  // Matched against the device registration information and any previously
  // collected data.
  DeviceCollectedData device_data = 3;

  // Payload for macOS-specific data.
  MacOSEnrollPayload macos = 4;

  // Payload for TPM-specific data. Used for Windows/Linux.
  TPMEnrollPayload tpm = 5;
}

// EnrollDeviceSuccess marks a successful device enrollment ceremony.
message EnrollDeviceSuccess {
  // The enrolled device.
  Device device = 1;
}

// MacOSEnrollPayload is the macOS-specific enrollment payload.
message MacOSEnrollPayload {
  // Device public key marshaled as a PKIX, ASN.1 DER.
  bytes public_key_der = 2;
}

// MacOSEnrollChallenge is a macOS enrollment challenge.
message MacOSEnrollChallenge {
  // Randomly-generated, opaque challenge to be signed using the device key.
  bytes challenge = 1;
}

// MacOSEnrollChallengeResponse is a macOS enrollment challenge response.
message MacOSEnrollChallengeResponse {
  // Signature over the challenge, using the device key.
  bytes signature = 2;
}

// The payload containing TPM specific information required on device
// enrollment.
message TPMEnrollPayload {
  oneof ek {
    // The device's endorsement certificate in X509, ASN.1 DER form. This
    // certificate contains the public key of the endorsement key. This is
    // preferred to ek_key.
    bytes ek_cert = 1;
    // The device's public endorsement key in PKIX, ASN.1 DER form. This is
    // used when a TPM does not contain any endorsement certificates.
    bytes ek_key = 2;
  }
  // The attestation key and the parameters necessary to remotely verify it as
  // related to the endorsement key.
  TPMAttestationParameters attestation_parameters = 3;
}

// The attestation key and the parameters necessary to remotely verify it as
// related to the endorsement key.
// See https://pkg.go.dev/github.com/google/go-attestation/attest#AttestationParameters.
// This message excludes the `UseTCSDActivationFormat` field from the link above
// as it is TMP 1.x specific and always false.
message TPMAttestationParameters {
  // The encoded TPMT_PUBLIC structure containing the attestation public key
  // and signing parameters.
  bytes public = 1;
  // The properties of the attestation key, encoded as a TPMS_CREATION_DATA
  // structure.
  bytes create_data = 2;
  // An assertion as to the details of the key, encoded as a TPMS_ATTEST
  // structure.
  bytes create_attestation = 3;
  // A signature of create_attestation, encoded as a TPMT_SIGNATURE structure.
  bytes create_signature = 4;
}

// The challenge sent to the client by the server during enrollment.
// The challenge involves two parts:
// - Solving an encrypted credential with `ActivateCredential`.
// - Producing a platform attestation using the provided nonce.
message TPMEnrollChallenge {
  // The encrypted credential for the client to prove possession of the EK and
  // AK.
  TPMEncryptedCredential encrypted_credential = 1;
  // The nonce to use when producing the quotes over the PCRs with the TPM
  // during the platform attestation.
  bytes attestation_nonce = 2;
}

// These values are used by the TPM2.0 `ActivateCredential` command to produce
// the solution which proves possession of the EK and AK.
//
// For a more in-depth description see:
// - https://pkg.go.dev/github.com/google/go-attestation/attest#EncryptedCredential
// - https://trustedcomputinggroup.org/wp-content/uploads/TCG_TPM2_r1p59_Part3_Commands_code_pub.pdf (Heading 12.5.1 "TPM2_ActivateCredential" "General Description")
// - https://github.com/google/go-attestation/blob/v0.4.3/attest/activation.go#L199
// - https://github.com/google/go-tpm/blob/v0.3.3/tpm2/credactivation/credential_activation.go#L61
message TPMEncryptedCredential {
  // The `credential_blob` parameter to be used with the `ActivateCredential`
  // command. This is used with the decrypted value of `secret` in a
  // cryptographic process to decrypt the solution.
  bytes credential_blob = 1;
  // The `secret` parameter to be used with `ActivateCredential`. This is a
  // seed which can be decrypted with the EK. The decrypted seed is then used
  // when decrypting `credential_blob`.
  bytes secret = 2;
}

// The enrollment challenge response containing the solution returned by
// calling the TPM2.0 `ActivateCredential` command on the client with the
// parameters provided in `TPMEnrollChallenge`.
message TPMEnrollChallengeResponse {
  // The client's solution to `TPMEncryptedCredential` included in
  // `TPMEnrollChallenge` using ActivateCredential.
  bytes solution = 1;
  // The result of the client's platform attestation with the nonce provided
  // in `TPMEnrollChallenge`.
  TPMPlatformParameters platform_parameters = 2;
}

// Request for AuthenticateDevice.
//
// Authentication ceremony flow:
// -> AuthenticateDeviceInit (client)
// <- AuthenticateDeviceChallenge (server)
// -> AuthenticateDeviceChallengeResponse
// <- UserCertificates (regular authn) or ConfirmationToken (web authn)
message AuthenticateDeviceRequest {
  oneof payload {
    AuthenticateDeviceInit init = 1;
    AuthenticateDeviceChallengeResponse challenge_response = 2;
    TPMAuthenticateDeviceChallengeResponse tpm_challenge_response = 3;
  }
}

// Response for AuthenticateDevice.
message AuthenticateDeviceResponse {
  oneof payload {
    AuthenticateDeviceChallenge challenge = 1;

    // User certificates are returned as the result of a successful device
    // authentication attempt ("regular" or non-web authentication).
    UserCertificates user_certificates = 2;

    TPMAuthenticateDeviceChallenge tpm_challenge = 3;

    // A confirmation token is returned as the result of a successful device web
    // authentication.
    //
    // See AuthenticateDeviceInit.device_web_token.
    DeviceConfirmationToken confirmation_token = 4;
  }
}

// AuthenticateDeviceInit initiates the device authentication ceremony.
message AuthenticateDeviceInit {
  // In-band user certificates to augment with device extensions.
  // - The x509 certificate is acquired from the mTLS connection, thus the
  //   in-band certificate is ignored.
  // - All certificates must be valid and issued by the Teleport CA.
  // - All certificates must match (same public key, same Teleport user, plus
  //   whatever additional checks the backend sees fit).
  // - Augmented certificates have the same expiration as the original
  //   certificates.
  UserCertificates user_certificates = 1;

  // ID of the enrolled device credential.
  string credential_id = 2;

  // Device collected data.
  // Matched against the device registration information and any previously
  // collected data.
  DeviceCollectedData device_data = 3;

  // If present, on-behalf-of device authentication is performed.
  // The user_certificates input field is ignored and no certificate data is
  // returned to the caller, instead a confirmation_token is returned in
  // the last step.
  //
  // See ConfirmDeviceWebAuthentication.
  DeviceWebToken device_web_token = 4;
}

// Request for ConfirmDeviceWebAuthentication.
message ConfirmDeviceWebAuthenticationRequest {
  // Confirmation token to be spent.
  DeviceConfirmationToken confirmation_token = 1;

  // Web Session identifier of the session that started this request, via
  // Teleport Proxy.
  //
  // For the request to be successful the Web Session must match the session
  // that started the authentication attempt.
  string current_web_session_id = 2;
}

// Response for ConfirmDeviceWebAuthentication.
message ConfirmDeviceWebAuthenticationResponse {}

// Request for SyncInventory.
//
// A typical message sequence is as follows:
// (-> means client-to-server, <- means server-to-client)
// -> SyncInventoryStart
// <- SyncInventoryAck
// (loop)
// -> SyncInventoryDevices (add/remove devices)
// <- SyncInventoryResult
// (end loop)
// -> SyncInventoryEnd
// (loop until server closes the stream, zero or more times)
// <- SyncInventoryMissingDevices
// -> SyncInventoryDevices (removals only)
// <- SyncInventoryResult
// (end loop)
message SyncInventoryRequest {
  oneof payload {
    SyncInventoryStart start = 1;
    SyncInventoryEnd end = 2;
    SyncInventoryDevices devices_to_upsert = 3;
    SyncInventoryDevices devices_to_remove = 4;
  }
}

// Response for SyncInventory.
message SyncInventoryResponse {
  oneof payload {
    SyncInventoryAck ack = 1;
    SyncInventoryResult result = 2;
    SyncInventoryMissingDevices missing_devices = 3;
  }
}

// SyncInventoryStart starts the inventory sync.
message SyncInventoryStart {
  // Source of the inventory sync.
  // Used for all devices. The `source` field in individual devices is ignored
  // by this RPC.
  DeviceSource source = 1;

  reserved 2; // SyncInventoryMode mode
  reserved "mode";

  reserved 3; // SyncInventoryDeviceAction on_missing_action
  reserved "on_missing_action";

  // If true, the server keeps track of the devices upserted during the sync.
  // After receiving the [SyncInventoryEnd] message, the server informs the
  // client of all devices that are present in storage but not observed in the
  // upserts.
  // See [SyncInventoryRequest] and [SyncInventoryMissingDevices] for details.
  bool track_missing_devices = 4;
}

// SyncInventoryEnd ends the inventory sync, signaling that no more
// SyncInventoryDevices messages will be sent by the client.
message SyncInventoryEnd {
  reserved 1; // bool external_sync_successful
  reserved "external_sync_successful";
}

// SyncInventoryDevices transports devices to add/update/remove.
// Removals only need identifying fields to be set.
message SyncInventoryDevices {
  // Devices to sync.
  repeated Device devices = 1;
}

// SyncInventoryAck is used to confirm successful processing of messages that
// lack a more specific response.
message SyncInventoryAck {}

// SyncInventoryResult is the response for SyncInventoryDevices or
// SyncInventoryEnd
// It lists all synced/deleted devices.
message SyncInventoryResult {
  // Devices modified, in the same order as the input when applicable.
  repeated DeviceOrStatus devices = 1;
}

// SyncInventoryMissingDevices informs the sync client of all stored devices
// that were not observed in upserts during the sync.
//
// Requires `track_missing_devices` to be set in the [SyncInventoryStart]
// message.
//
// The client must follow up with a [SyncInventoryDevices] message, including
// any devices to be deleted.
message SyncInventoryMissingDevices {
  // Devices missing from the client-side sync.
  // Guaranteed to have the following fields: id, os_type, asset_tag and
  // profile.external_id.
  repeated Device devices = 1;
}

// Superseded by ResourceUsageService.GetUsage.
message GetDevicesUsageRequest {}
