// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.integration.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/integration/v1;integrationv1";

// IntegrationService provides methods to manage Integrations with 3rd party APIs.
service IntegrationService {
  // ListIntegrations returns a paginated list of Integration resources.
  rpc ListIntegrations(ListIntegrationsRequest) returns (ListIntegrationsResponse);

  // GetIntegration returns the specified Integration resource.
  rpc GetIntegration(GetIntegrationRequest) returns (types.IntegrationV1);

  // CreateIntegration creates a new Integration resource.
  rpc CreateIntegration(CreateIntegrationRequest) returns (types.IntegrationV1);

  // UpdateIntegration updates an existing Integration resource.
  rpc UpdateIntegration(UpdateIntegrationRequest) returns (types.IntegrationV1);

  // DeleteIntegration removes the specified Integration resource.
  rpc DeleteIntegration(DeleteIntegrationRequest) returns (google.protobuf.Empty);

  // DeleteAllIntegrations removes all Integrations.
  // DEPRECATED: Can't delete all integrations over gRPC.
  rpc DeleteAllIntegrations(DeleteAllIntegrationsRequest) returns (google.protobuf.Empty);

  // GenerateAWSOIDCToken generates a token to be used when executing an AWS OIDC Integration action.
  rpc GenerateAWSOIDCToken(GenerateAWSOIDCTokenRequest) returns (GenerateAWSOIDCTokenResponse);

  // GenerateAzureOIDCToken generates a token to be used when executing an Azure OIDC Integration action.
  rpc GenerateAzureOIDCToken(GenerateAzureOIDCTokenRequest) returns (GenerateAzureOIDCTokenResponse);

  // GenerateGitHubUserCert signs a SSH certificate for GitHub integration.
  rpc GenerateGitHubUserCert(GenerateGitHubUserCertRequest) returns (GenerateGitHubUserCertResponse);

  // ExportIntegrationCertAuthorities exports cert authorities for an integration.
  rpc ExportIntegrationCertAuthorities(ExportIntegrationCertAuthoritiesRequest) returns (ExportIntegrationCertAuthoritiesResponse);

  // GenerateAWSRACredentials generates a set of AWS Credentials using the AWS IAM Roles Anywhere integration.
  rpc GenerateAWSRACredentials(GenerateAWSRACredentialsRequest) returns (GenerateAWSRACredentialsResponse);
}

// ListIntegrationsRequest is a request for a paginated list of Integrations.
message ListIntegrationsRequest {
  // Limit is the maximum amount of resources to retrieve.
  int32 limit = 1;
  // NextKey is the key for the next page of Integrations.
  string next_key = 2;
}

// ListIntegrationsResponse is the response for ListIntegrationsRequest.
message ListIntegrationsResponse {
  // Integrations is a list of Integrations.
  repeated types.IntegrationV1 integrations = 1;
  // NextKey is the key for the next page of Integrations.
  string next_key = 2;
  // TotalCount is the total number of integrations in all pages.
  int32 total_count = 3;
}

// GetIntegrationRequest is a request for a specific Integration resource.
message GetIntegrationRequest {
  // Name is the name of the Integration to be requested.
  string name = 1;
}

// CreateIntegrationRequest is the request to create the provided integration.
message CreateIntegrationRequest {
  // Integration is the integration to be created.
  types.IntegrationV1 integration = 1;
}

// UpdateIntegrationRequest is the request to update the provided integration.
message UpdateIntegrationRequest {
  // Integration is the integration to be created.
  types.IntegrationV1 integration = 1;
}

// DeleteIntegrationRequest is a request for deleting a specific Integration resource.
message DeleteIntegrationRequest {
  // Name is the name of the Integration to be deleted.
  string name = 1;
  // DeleteAssociatedResources allows the request to search associated resources
  // and attempt to delete them.
  bool delete_associated_resources = 2;
}

// DeleteAllIntegrationsRequest is the request for deleting all integrations.
// DEPRECATED: Can't delete all integrations over gRPC.
message DeleteAllIntegrationsRequest {}

// GenerateAWSOIDCTokenRequest are the parameters used to request an AWS OIDC
// Integration token.
message GenerateAWSOIDCTokenRequest {
  // Issuer is the entity that is signing the JWT.
  // This value must contain the AWS OIDC Integration configured provider (Teleport Proxy's Public URL)
  //
  // Deprecated: Ignored because value is calculated server side.
  string issuer = 1 [deprecated = true];

  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 2;
}

// GenerateAWSOIDCTokenResponse contains a signed AWS OIDC Integration token.
message GenerateAWSOIDCTokenResponse {
  // Token is the signed JWT ready to be used
  string token = 1;
}

// GenerateAzureOIDCTokenRequest are the parameters used to request an Azure OIDC
// Integration token.
message GenerateAzureOIDCTokenRequest {
  // Integration is the Azure OIDC Integration name.
  // Required.
  string integration = 1;
}

// GenerateAzureOIDCTokenResponse contains a signed Azure OIDC Integration token.
message GenerateAzureOIDCTokenResponse {
  // Token is the signed JWT ready to be used
  string token = 1;
}

// GenerateGitHubUserCertRequest is a request to sign a client certificate used by
// GitHub integration to authenticate with GitHub enterprise.
message GenerateGitHubUserCertRequest {
  // Integration is the name of the integration;
  string integration = 1;
  // PublicKey is the public key to be signed.
  bytes public_key = 2;
  // UserId is the GitHub user id.
  string user_id = 3;
  // KeyId is the certificate ID, usually the Teleport username.
  string key_id = 4;
  // Ttl is the duration the certificate will be valid for.
  google.protobuf.Duration ttl = 5;
}

// GenerateGitHubUserCertResponse contains a signed certificate.
message GenerateGitHubUserCertResponse {
  // AuthorizedKey is the signed certificate.
  bytes authorized_key = 1;
}

// ExportIntegrationCertAuthoritiesRequest is the request to export cert
// authorities for an integration.
message ExportIntegrationCertAuthoritiesRequest {
  // Integration is the name of the integration;
  string integration = 1;
}

// ExportIntegrationCertAuthoritiesResponse is the response to
// ExportIntegrationCertAuthorities.
message ExportIntegrationCertAuthoritiesResponse {
  // CertAuthorities are the CA key sets used to sign any new certificates.
  types.CAKeySet cert_authorities = 1;
}

// GenerateAWSRACredentialsRequest is a request to generate AWS credentials
// using the AWS IAM Roles Anywhere integration.
message GenerateAWSRACredentialsRequest {
  // Integration is the name of the integration;
  // Must be an AWS IAM Roles Anywhere integration.
  string integration = 1;

  // ProfileARN is the ARN of the AWS IAM Roles Anywhere profile.
  string profile_arn = 2;

  // ProfileAcceptsRoleSessionName indicates whether this Profile accepts a role session name.
  // Setting the role session name when the Profile does not accept it will result in an error.
  bool profile_accepts_role_session_name = 3;

  // RoleARN is the ARN of the AWS IAM Role.
  string role_arn = 4;

  // SubjectName is the name of the subject to be used in the certificate.
  string subject_name = 5;

  // SessionMaxDuration is the maximum duration of the session.
  // Omit the field to use the Profile's default max session duration.
  google.protobuf.Duration session_max_duration = 6;
}

// GenerateAWSRACredentialsResponse contains the AWS credentials generated by the GenerateAWSRACredentialsRequest.
// The credentials are temporary and will expire after the specified expiration time.
message GenerateAWSRACredentialsResponse {
  // AccessKeyId is an AWS access key id.
  string access_key_id = 1;
  // SecretAccessKey is the AWS secret access key.
  string secret_access_key = 2;
  // SessionToken is the the AWS session token for temporary credentials.
  string session_token = 3;
  // Expiration is the timestamp string when the credentials expires.
  google.protobuf.Timestamp expiration = 4;
}
