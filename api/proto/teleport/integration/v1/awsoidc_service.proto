// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.integration.v1;

import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/integration/v1;integrationv1";

// AWSOIDCService provides access to AWS APIs using the AWS OIDC Integration.
service AWSOIDCService {
  // ListEICE returns a list of EC2 Instance Connect Endpoints.
  // An optional NextToken that can be used to fetch the next page.
  // It uses the following API:
  // https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstanceConnectEndpoints.html
  rpc ListEICE(ListEICERequest) returns (ListEICEResponse);

  // CreateEICE creates multiple EC2 Instance Connect Endpoint using the provided Subnets and Security Group IDs.
  // It uses the following API:
  // https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateInstanceConnectEndpoint.html
  rpc CreateEICE(CreateEICERequest) returns (CreateEICEResponse);

  // ListDatabases calls the following AWS API:
  // https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html
  // https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html
  // It returns a list of Databases and an optional NextToken that can be used to fetch the next page
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse);

  // ListSecurityGroups returns a list of AWS VPC SecurityGroups.
  // It uses the following API:
  // https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html
  rpc ListSecurityGroups(ListSecurityGroupsRequest) returns (ListSecurityGroupsResponse);

  // ListSubnets returns a list of AWS VPC subnets.
  // It uses the following API:
  // https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html
  rpc ListSubnets(ListSubnetsRequest) returns (ListSubnetsResponse);

  // ListVPCs returns a list of AWS VPCs.
  // It uses the following API:
  // https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html
  rpc ListVPCs(ListVPCsRequest) returns (ListVPCsResponse);

  // DeployDatabaseService deploys a Database Services to Amazon ECS.
  rpc DeployDatabaseService(DeployDatabaseServiceRequest) returns (DeployDatabaseServiceResponse);

  // DeployService deploys an ECS Service to Amazon ECS.
  rpc DeployService(DeployServiceRequest) returns (DeployServiceResponse);

  // EnrollEKSClusters enrolls EKS clusters by installing kube agent Helm chart.
  rpc EnrollEKSClusters(EnrollEKSClustersRequest) returns (EnrollEKSClustersResponse);

  // ListEC2 lists the EC2 instances of the AWS account per region.
  // It uses the following API:
  // https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html
  rpc ListEC2(ListEC2Request) returns (ListEC2Response);

  // ListEKSClusters retrieves a paginated list of EKS clusters in the specified AWS region for a specific account.
  // It uses the following APIs:
  // https://docs.aws.amazon.com/eks/latest/APIReference/API_ListClusters.html
  // https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeCluster.html
  rpc ListEKSClusters(ListEKSClustersRequest) returns (ListEKSClustersResponse);
}

// ListEICERequest is a request for a paginated list of AWS EC2 Instance Connect Endpoints.
message ListEICERequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // VPCIDs is used to filter for EICEs of those VPCs.
  // Required.
  repeated string vpc_ids = 3;
  // NextToken is the token to be used to fetch the next page.
  // If empty, the first page is fetched.
  string next_token = 4;
}

// EC2InstanceConnectEndpoint is a representation of a Amazon VPC EC2 Instance Connect Endpoint.
message EC2InstanceConnectEndpoint {
  // Name is the endpoint name.
  string name = 1;
  // State is the endpoint state.
  // Known values:
  // create-in-progress | create-complete | create-failed | delete-in-progress | delete-complete | delete-failed
  string state = 2;
  // StateMessage contains a message describing the state of the EICE.
  string state_message = 3;
  // DashboardLink is a URL to AWS Console where the user can see the EC2 Instance Connect Endpoint.
  string dashboard_link = 4;
  // SubnetID is the subnet used by the endpoint.
  string subnet_id = 5;
  // VPCID is the VPC ID where the Endpoint is created.
  string vpc_id = 6;
}

// ListEICEResponse contains a page of AWS EC2 Instance Connect Endpoints.
message ListEICEResponse {
  // EC2ICEs contains the page of EC2 Instance Connect Endpoints.
  repeated EC2InstanceConnectEndpoint ec2ices = 1;
  // DashboardLink is the URL for AWS Web Console that lists all the Endpoints for the queries VPCs.
  string dashboard_link = 2;
  // NextToken is used for pagination.
  // If non-empty, it can be used to request the next page.
  string next_token = 3;
}

// CreateEICERequest contains the required fields to create an AWS EC2 Instance Connect Endpoint.
message CreateEICERequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // Endpoints is is a list of EC2 Instance Connect Endpoints to be created.
  // Required.
  repeated EC2ICEndpoint endpoints = 3;
}

// EC2ICEndpoint contains the information for a single Endpoint to be created.
message EC2ICEndpoint {
  // Name is the endpoint name.
  string name = 1;
  // SubnetID is the Subnet where the Endpoint will be created.
  string subnet_id = 2;
  // SecurityGroupIDs is a list of SecurityGroups to assign to the Endpoint.
  // If not specified, the Endpoint will receive the default SG for the Subnet's VPC.
  repeated string security_group_ids = 3;
}

// CreateEICEResponse is a request to create a VPC Endpoint of EC2 Instance Connect Endpoint type.
message CreateEICEResponse {
  // Name is the Endpoint ID.
  string name = 1;
  // CreatedEndpoints contains the name of created endpoints and their Subnet.
  repeated EC2ICEndpoint created_endpoints = 2;
}

// ListDatabasesRequest is a request for a paginated list of AWS Databases.
message ListDatabasesRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // RDSType is either instance or cluster (for Aurora DBs).
  // Required.
  string rds_type = 3;
  // Engines filters the returned Databases based on their engine.
  // Eg, mysql, postgres, mariadb, aurora, aurora-mysql, aurora-postgresql
  // Required.
  repeated string engines = 4;
  // NextToken is the token to be used to fetch the next page.
  // If empty, the first page is fetched.
  string next_token = 5;
  // VPCID filters databases to only include those deployed in the VPC.
  // If empty, no filtering is done.
  string vpc_id = 6;
}

// ListDatabasesResponse contains a page of AWS Databases.
message ListDatabasesResponse {
  // Databases contains the page of Databases.
  repeated types.DatabaseV3 databases = 1;
  // NextToken is used for pagination.
  // If non-empty, it can be used to request the next page.
  string next_token = 2;
}

// ListSecurityGroupsRequest is a request for a paginated list of AWS SecurityGroups.
message ListSecurityGroupsRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // VPCID is the VPC ID for listing SecurityGroups.
  // Required.
  string vpc_id = 3;
  // NextToken is the token to be used to fetch the next page.
  // If empty, the first page is fetched.
  string next_token = 4;
}

// CIDR has a CIDR (IP Range) and a description for the value.
message SecurityGroupRuleCIDR {
  // CIDR is the IP range using CIDR notation.
  string cidr = 1;
  // Description contains a small text describing the CIDR.
  string description = 2;
}

// SecurityGroupRule is a representation of a SecurityGroupRule.
// Either for Inbound or Outbound rules.
message SecurityGroupRule {
  // IPProtocol is the protocol used to describe the rule.
  // If the rule applies to all protocols, the "all" value is used.
  // The IP protocol name ( tcp , udp , icmp , icmpv6 ) or number (see Protocol
  // Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
  string ip_protocol = 1;
  // FromPort is the inclusive start of the Port range for the Rule.
  int32 from_port = 2;
  // ToPort is the inclusive end of the Port range for the Rule.
  int32 to_port = 3;
  // CIDRs contains a list of IP ranges that this rule applies to and a description for the value.
  repeated SecurityGroupRuleCIDR cidrs = 4;
}

// SecurityGroup is a representation of a SecurityGroup
message SecurityGroup {
  // Name is the SecurityGroup name.
  string name = 1;
  // ID is the SecurityGroup ID.
  string id = 2;
  // Description is a small description of the SecurityGroup.
  string description = 3;
  // InboundRules describe the Security Group Inbound Rules.
  // The CIDR of each rule represents the source IP that the rule applies to.
  repeated SecurityGroupRule inbound_rules = 4;
  // OutboundRules describe the Security Group Outbound Rules.
  // The CIDR of each rule represents the destination IP that the rule applies to.
  repeated SecurityGroupRule outbound_rules = 5;
}

// ListSecurityGroupsResponse contains a page of AWS SecurityGroups.
message ListSecurityGroupsResponse {
  // SecurityGroups contains the page of SecurityGroups.
  repeated SecurityGroup security_groups = 1;
  // NextToken is used for pagination.
  // If non-empty, it can be used to request the next page.
  string next_token = 2;
}

// ListSubnetsRequest is a request for a paginated list of AWS VPC subnets.
message ListSubnetsRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // VPCID is the VPC ID for listing subnets.
  // Required.
  string vpc_id = 3;
  // NextToken is the token to be used to fetch the next page.
  // If empty, the first page is fetched.
  string next_token = 4;
}

// Subnet is a representation of an AWS VPC subnet.
message Subnet {
  // Name is the subnet name. Can be empty.
  string name = 1;
  // ID is the subnet ID.
  string id = 2;
  // AvailabilityZone is the availability zone of the subnet.
  string availability_zone = 3;
}

// ListSubnetsResponse contains a page of AWS VPC subnets.
message ListSubnetsResponse {
  // Subnets contains the page of subnets.
  repeated Subnet subnets = 1;
  // NextToken is used for pagination.
  // If non-empty, it can be used to request the next page.
  string next_token = 2;
}

// ListVPCsRequest is a request for a paginated list of AWS VPCs.
message ListVPCsRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // NextToken is the token to be used to fetch the next page.
  // If empty, the first page is fetched.
  string next_token = 3;
}

// VPC is a representation of an AWS VPC.
message VPC {
  // Name is the VPC name. Can be empty.
  string name = 1;
  // ID is the VPC ID.
  string id = 2;
}

// ListVPCsResponse contains a page of AWS VPCs.
message ListVPCsResponse {
  // VPCs contains the page of VPCs.
  repeated VPC vpcs = 1;
  // NextToken is used for pagination.
  // If non-empty, it can be used to request the next page.
  string next_token = 2;
}

// DeployDatabaseServiceRequest is a request to deploy .
message DeployDatabaseServiceRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // TaskRoleARN is the AWS IAM Role received by the deployed service.
  // Required.
  string task_role_arn = 3;
  // TeleportVersion is the teleport version to be deployed.
  // This is used to fetch the correct tag for the teleport container image.
  // Eg, 14.3.4 (no "v" prefix)
  // Required.
  string teleport_version = 4;
  // DeploymentJoinTokenName is the Teleport IAM Join Token to be used by the deployed
  // service to join the cluster.
  // Required.
  string deployment_join_token_name = 5;
  // Deployments is a list of services that will be deployed.
  repeated DeployDatabaseServiceDeployment deployments = 6;
}

// DeployDatabaseServiceDeployment represents a single deployment.
message DeployDatabaseServiceDeployment {
  // TeleportConfigString is the teleport.yaml configuration (base64 encoded) used by teleport.
  // Required.
  string teleport_config_string = 1;
  // VpcId is the VPCID where the service is going to be deployed.
  // Required.
  string vpc_id = 2;
  // SubnetIds are the subnets for the network configuration.
  // They must belong to the VpcId above.
  // Required.
  repeated string subnet_ids = 3;
  // SecurityGroups are the SecurityGroup IDs to associate with this particular deployment.
  // If empty, the default security group for the VPC is going to be used.
  repeated string security_groups = 4;
}

// DeployDatabaseServiceResponse contains information about the deployed service.
message DeployDatabaseServiceResponse {
  // ClusterArn identifies the cluster where the deployment was made.
  string cluster_arn = 1;
  // ClusterDashboardURL is a link to the Amazon ECS cluster dashboard or a
  // specific cluster service if a single deployment was requested.
  string cluster_dashboard_url = 2;
}

// DeployServiceRequest is a request to deploy .
message DeployServiceRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // DeploymentMode is the deployment name that should be applied when creating the ECS Service.
  // Allowed modes: database-service
  // Required.
  string deployment_mode = 3;
  // SecurityGroups to apply to the service's network configuration.
  // If empty, the default security group for the VPC is going to be used.
  repeated string security_groups = 4;
  // SubnetIds are the subnets for the network configuration.
  // Required.
  repeated string subnet_ids = 5;
  // TaskRoleARN is the AWS IAM Role received by the deployed service.
  // Required.
  string task_role_arn = 6;
  // TeleportVersion is the teleport version to be deployed.
  // This is used to fetch the correct tag for the teleport container image.
  // Eg, 14.3.4 (no "v" prefix)
  // Required.
  string teleport_version = 7;
  // DeploymentJoinTokenName is the Teleport IAM Join Token to be used by the deployed
  // service to join the cluster.
  // Required.
  string deployment_join_token_name = 8;
  // TeleportConfigString is the teleport.yaml configuration (base64 encoded) used by teleport.
  // Required.
  string teleport_config_string = 9;
}

// DeployServiceResponse contains information about the deployed service.
message DeployServiceResponse {
  // ClusterArn identifies the cluster where the deployment was made.
  string cluster_arn = 1;
  // ServiceARN is the Amazon ECS Cluster Service ARN created to run the task.
  string service_arn = 2;
  // TaskDefinitionARN is the Amazon ECS Task Definition ARN created to run the Service.
  string task_definition_arn = 3;
  // ServiceDashboardURL is a link to the service's Dashboard URL in Amazon Console.
  string service_dashboard_url = 4;
}

// EnrollEKSClustersRequest is request to enroll EKS clusters.
message EnrollEKSClustersRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // ClusterNames is names of EKS clusters to enroll.
  // Required.
  repeated string eks_cluster_names = 3;
  // EnableAppDiscovery specifies if we should enable Kubernetes App Discovery inside the enrolled EKS cluster.
  bool enable_app_discovery = 4;
  // AgentVersion is version of agent Helm chart to install on the EKS cluster.
  // Required.
  string agent_version = 5;
}

// EnrollEKSClusterResult contains result for a single cluster enrollment.
message EnrollEKSClusterResult {
  // ClusterName identifies what EKS cluster this result is for.
  string eks_cluster_name = 1;
  // ResourceID shows what internal resource ID label was used by the Helm chart.
  string resource_id = 2;
  // Error show what error happened during enrollment. Empty if no error happened.
  string error = 3;
}

// EnrollEKSClustersResponse is a response to enrolling EKS clusters.
message EnrollEKSClustersResponse {
  // Results shows result of enrollment for each requested EKS cluster.
  repeated EnrollEKSClusterResult results = 1;
}

// ListEC2Request is a request for a paginated list of AWS EC2 instances.
message ListEC2Request {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // NextToken is the token to be used to fetch the next page.
  // If empty, the first page is fetched.
  string next_token = 3;
}

// ListEC2Response contains a page of AWS EC2 instances represented as Nodes.
message ListEC2Response {
  // Servers contains the page of EC2.
  repeated types.ServerV2 servers = 1;
  // NextToken is used for pagination.
  // If non-empty, it can be used to request the next page.
  string next_token = 2;
}

// ListEKSClustersRequest is a request for a paginated list of AWS EKS Clusters.
message ListEKSClustersRequest {
  // Integration is the AWS OIDC Integration name.
  // Required.
  string integration = 1;
  // Region is the AWS Region
  // Required.
  string region = 2;
  // NextToken is the token to be used to fetch the next page.
  // If empty, the first page is fetched.
  string next_token = 3;
}

// EKSCluster represents an Amazon EKS Cluster.
message EKSCluster {
  // Name is the name of AWS EKS cluster.
  string name = 1;
  // Region is an AWS region.
  string region = 2;
  // Arn is an AWS ARN identification of the EKS cluster.
  string arn = 3;
  // Labels are labels of a EKS cluster.
  map<string, string> labels = 4;
  // JoinLabels are Teleport labels that should be injected into kube agent
  // if the cluster will be enrolled into Teleport (agent installed on it).
  map<string, string> join_labels = 5;
  // Status is a current status of an EKS cluster in AWS.
  // Known values are:
  // CREATING | ACTIVE | DELETING | FAILED | UPDATING | PENDING
  string status = 6;
}

// ListEKSClustersResponse contains a page of AWS EKS Clusters.
message ListEKSClustersResponse {
  // Clusters contains the page of EKS Clusters.
  repeated EKSCluster clusters = 1;
  // NextToken is used for pagination.
  // If non-empty, it can be used to request the next page.
  string next_token = 2;
}
