// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.userloginstate.v1;

import "teleport/header/v1/resourceheader.proto";
import "teleport/trait/v1/trait.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/userloginstate/v1;userloginstatev1";

// UserLoginState describes the ephemeral user login state for a user.
message UserLoginState {
  // header is the header for the resource.
  teleport.header.v1.ResourceHeader header = 1;

  // spec is the specification for the user login state.
  Spec spec = 2;
}

// Spec is the specification for a user login state.
message Spec {
  // roles are the user roles attached to the user. It's basically original_roles +
  // access_list_roles.
  repeated string roles = 1;

  // traits are the traits attached to the user. It's basically original_traits +
  // access_list_traits.
  repeated teleport.trait.v1.Trait traits = 2;

  // user_type is the type of user this state represents.
  string user_type = 3;

  // original_roles are the user roles that are part of the user's static definition. These roles
  // are not affected by access granted by access lists and are obtained prior to granting access
  // list access. This is basically roles - access_list_roles.
  repeated string original_roles = 4;

  // original_traits are the user traits that are part of the user's static definition. These
  // traits are not affected by access granted by access lists and are obtained prior to granting
  // access list access. It's basically traits - access_list_traits.
  repeated teleport.trait.v1.Trait original_traits = 5;

  // GitHubIdentity is the external identity attached to this user state.
  ExternalIdentity git_hub_identity = 6;

  // saml_identities are the identities created from the SAML connectors used to log in by this
  // user name. They are useful for RBAC calculation when there is a user with same username form
  // multiple SSO connectors, i.e. having multiple SSO indentities.
  //
  // NOTE: There is no mechanism to clean those identities. If the the user is deleted, the
  // user_login_state and it's saml_identities will not be deleted. Or even if the user still
  // exists, but it's SAML identity expires it isn't cleared from the user_login_state. This means
  // the information stored here can be used only as long as there is a background sync running and
  // making sure the user's info is up-to-date. E.g. Okta assignment creator is using this
  // information, but it is running only when Okta user sync is active and periodically updates the
  // user which in turn updates the user_login_state.
  repeated ExternalIdentity saml_identities = 7;

  // access_list_roles are roles granted to this user by the Access Lists membership/ownership.
  // This is basically roles - original_roles.
  repeated string access_list_roles = 8;

  // access_list_traits are traits granted to this user by the Access Lists membership/ownership.
  // This is basically traits - original_traits.
  repeated teleport.trait.v1.Trait access_list_traits = 9;
}

// ExternalIdentity defines an external identity attached to this user state.
message ExternalIdentity {
  // UserID is the unique identifier of the external identity such as GitHub user
  // ID.
  string user_id = 1;
  // Username is the username of the external identity.
  string username = 2;
  // ConnectorID is the connector this identity was created with. It's empty for the local user.
  string connector_id = 3;
  // GrantedRoles specific for this identity. E.g.: from connector attributes mapping.
  repeated string granted_roles = 4;
  // GrantedTraits specific for this identity. E.g.: from connector roles attributes mapping.
  repeated teleport.trait.v1.Trait granted_traits = 5;
}
