// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.machineid.v1;

import "google/protobuf/empty.proto";
import "teleport/machineid/v1/federation.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/machineid/v1;machineidv1";

// GetSPIFFEFederationRequest is the request message for GetSPIFFEFederation.
message GetSPIFFEFederationRequest {
  // The name of the SPIFFEFederation resource to fetch.
  string name = 1;
}

// Request for ListSPIFFEFederations.
//
// Follows the pagination semantics of
// https://cloud.google.com/apis/design/standard_methods#list
message ListSPIFFEFederationsRequest {
  // The maximum number of items to return.
  // The server may impose a different page size at its discretion.
  int32 page_size = 1;
  // The page_token value returned from a previous ListSPIFFEFederations
  // request, if any.
  string page_token = 2;
}

// ListSPIFFEFederationsResponse is the response message for ListSPIFFEFederations.
message ListSPIFFEFederationsResponse {
  repeated SPIFFEFederation spiffe_federations = 1;
  // Token to retrieve the next page of results, or empty if there are no
  // more results exist.
  string next_page_token = 2;
}

// DeleteSPIFFEFederationRequest is the request message for DeleteSPIFFEFederation.
message DeleteSPIFFEFederationRequest {
  // The name of the SPIFFEFederation resource to delete.
  string name = 1;
}

// CreateSPIFFEFederationRequest is the request message for CreateSPIFFEFederation.
message CreateSPIFFEFederationRequest {
  // The SPIFFEFederation resource to create.
  SPIFFEFederation spiffe_federation = 1;
}

// SPIFFEFederationService provides methods to manage SPIFFE Federations
// between trust domains.
service SPIFFEFederationService {
  // GetSPIFFEFederation returns a SPIFFEFederation resource by name.
  rpc GetSPIFFEFederation(GetSPIFFEFederationRequest) returns (SPIFFEFederation);
  // ListSPIFFEFederations returns a list of SPIFFEFederation resources.
  // Follows the pagination semantics of
  // https://cloud.google.com/apis/design/design_patterns#list_pagination
  rpc ListSPIFFEFederations(ListSPIFFEFederationsRequest) returns (ListSPIFFEFederationsResponse);
  // DeleteSPIFFEFederation deletes a SPIFFEFederation resource by name.
  rpc DeleteSPIFFEFederation(DeleteSPIFFEFederationRequest) returns (google.protobuf.Empty);
  // CreateSPIFFEFederation creates a SPIFFEFederation resource.
  rpc CreateSPIFFEFederation(CreateSPIFFEFederationRequest) returns (SPIFFEFederation);
}
