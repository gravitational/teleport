// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.usertasks.v1;

import "google/protobuf/empty.proto";
import "teleport/usertasks/v1/user_tasks.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/usertasks/v1;usertasksv1";

// UserTaskService is a service that provides methods to manage User Tasks.
service UserTaskService {
  // CreateUserTask creates a User Task.
  rpc CreateUserTask(CreateUserTaskRequest) returns (teleport.usertasks.v1.UserTask);
  // UpsertUserTask creates or updates User Task.
  rpc UpsertUserTask(UpsertUserTaskRequest) returns (teleport.usertasks.v1.UserTask);
  // GetUserTask gets a UserTask by name.
  rpc GetUserTask(GetUserTaskRequest) returns (teleport.usertasks.v1.UserTask);
  // ListUserTasks returns a list of UserTasks. It supports pagination and filters.
  rpc ListUserTasks(ListUserTasksRequest) returns (ListUserTasksResponse);
  // ListUserTasksByIntegration returns a list of UserTasks filtered by an integration and other optional fields. It supports pagination.
  rpc ListUserTasksByIntegration(ListUserTasksByIntegrationRequest) returns (ListUserTasksResponse);
  // UpdateUserTask updates an existing User Task.
  rpc UpdateUserTask(UpdateUserTaskRequest) returns (teleport.usertasks.v1.UserTask);
  // DeleteUserTask deletes a User Task.
  rpc DeleteUserTask(DeleteUserTaskRequest) returns (google.protobuf.Empty);
}

// CreateUserTaskRequest is a request to create a User Task.
message CreateUserTaskRequest {
  teleport.usertasks.v1.UserTask user_task = 1;
}

// UpsertUserTaskRequest is a request to create or update a User Task.
message UpsertUserTaskRequest {
  teleport.usertasks.v1.UserTask user_task = 1;
}

// GetUserTaskRequest is a request to get a User Task by name.
message GetUserTaskRequest {
  // Name is the name of the UserTask to get.
  string name = 1;
}

// ListUserTasksRequest is a request to get a list of User Tasks.
message ListUserTasksRequest {
  // page_size is the maximum number of items to return.
  // The server may impose a different page size at its discretion.
  int64 page_size = 1;
  // page_token is the next_page_token value returned from a previous List request, if any.
  string page_token = 2;
}

// ListUserTasksByIntegrationRequest is a request to get a list of User Tasks filtered by an Integration.
message ListUserTasksByIntegrationRequest {
  // page_size is the maximum number of items to return.
  // The server may impose a different page size at its discretion.
  int64 page_size = 1;
  // page_token is the next_page_token value returned from a previous List request, if any.
  string page_token = 2;
  // integration is the integration name that will be used to filter the returned list.
  string integration = 3;
}

// ListUserTasksResponse is a response to ListUserTasks.
message ListUserTasksResponse {
  repeated teleport.usertasks.v1.UserTask user_tasks = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// UpdateUserTaskRequest is a request to update an existing User Task.
message UpdateUserTaskRequest {
  teleport.usertasks.v1.UserTask user_task = 1;
}

// DeleteUserTaskRequest is a request to delete a User Task.
message DeleteUserTaskRequest {
  // Name is the name of the User Task to delete.
  string name = 1;
}
