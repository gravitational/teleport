// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.plugins.v1;

import "google/protobuf/empty.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/plugins/v1;pluginsv1";

// PluginType represents a single type of hosted plugin
// that can be onboarded.
message PluginType {
  // Type is a string corresponding to api.PluginTypeXXX constants
  string type = 1;

  // OAuthClientID contains the client ID of the OAuth application
  // that is used with this plugin's API provider.
  // For plugins that are not authenticated via OAuth,
  // this will be empty.
  string oauth_client_id = 2;
}

// CreatePluginRequest creates a new plugin from the given spec and initial
// credentials.
message CreatePluginRequest {
  // Plugin is the plugin object without live credentials.
  types.PluginV1 plugin = 1;
  // BootstrapCredentials are the initial credentials
  // issued by e.g. OAuth2 authorization code flow.
  // In the scope of processing this request, these are exchanged for
  // short-lived renewable credentials, which are stored in the Plugin.
  types.PluginBootstrapCredentialsV1 bootstrap_credentials = 2;

  // StaticCredentials are an optional static credential to supply to the
  // plugin.
  types.PluginStaticCredentialsV1 static_credentials = 3;

  // StaticCredentials are an optional collection of static credentials
  // to supply to the plugin. Ignored if `StaticCredentials` is set.
  repeated types.PluginStaticCredentialsV1 static_credentials_list = 4;

  // CredentialLabels are a collection of labels used to identify the
  // credentials secified in the StaticCredentialsList. Ignored if
  // StaticCredentials is used
  map<string, string> credential_labels = 5;
}

// GetPluginRequest is a request to return a plugin instance by name.
message GetPluginRequest {
  // Name is the name of the plugin instance.
  string name = 1;

  // WithSecrets indicates whether plugin secrets (credentials) are requested
  bool with_secrets = 2;
}

// UpdatePluginRequest is a request to update a plugin instance.
message UpdatePluginRequest {
  // Plugin is the plugin object to update.
  types.PluginV1 plugin = 1;
}

// ListPluginsRequest is a paginated request to list all plugin instances.
message ListPluginsRequest {
  // PageSize is the maximum number of plugins to return in a single response.
  int32 page_size = 1;

  // StartKey is the value of NextKey received in the last ListPluginsResponse.
  // When making the initial request, this should be left empty.
  string start_key = 2;

  // WithSecrets indicates whether plugin secrets (credentials) are requested
  bool with_secrets = 3;
}

// ListPluginsResponse is a paginated response to a ListPluginsRequest.
message ListPluginsResponse {
  // Plugins is the list of plugins.
  repeated types.PluginV1 plugins = 1;

  // NextKey is a token to retrieve the next page of results, or empty
  // if there are no more results.
  string next_key = 2;
}

// DeletePluginRequest is a request to delete a plugin instance by name.
message DeletePluginRequest {
  // Name is the name of the plugin instance.
  string name = 1;
}

// SetPluginCredentialsRequest is a request to set credentials for an existing
// plugin
message SetPluginCredentialsRequest {
  // Name is the name of the plugin instance.
  string name = 1;
  // Credentials are the credentials obtained after exchanging the initial
  // credentials, and after successive credential renewals.
  types.PluginCredentialsV1 credentials = 2;
}

// SetPluginStatusRequest is a request to set the status for an existing plugin
message SetPluginStatusRequest {
  // Name is the name of the plugin instance.
  string name = 1;
  // Status is the plugin status.
  types.PluginStatusV1 status = 2;
}

// GetAvailablePluginTypesRequest is the request type for
// GetAvailablePluginTypes
message GetAvailablePluginTypesRequest {}

// GetAvailablePluginTypesResponse is a response to for GetAvailablePluginTypes
message GetAvailablePluginTypesResponse {
  // PluginTypes is a list of hosted plugins
  // that the auth service supports.
  repeated PluginType plugin_types = 1;
}

// SearchPluginStaticCredentialsRequest is the request type for
// SearchPluginStaticCredentials. The labels here are attached to a plugin and
// search credential object at creation time. Labels can be provided to the
// plugin credentials object and then, during plugin creation, a reference to
// those labels augmented along with a uniquely identifying ID will ensure a
// unique mapping between credentials and plugins.
message SearchPluginStaticCredentialsRequest {
  // Labels are matched against static credentials objects and returned.
  map<string, string> labels = 1;
}

// SearchPluginStaticCredentialsResponse is the response type for
// SearchPluginStaticCredentials
message SearchPluginStaticCredentialsResponse {
  // Credentials are the list of credentials matching the requested labels.
  repeated types.PluginStaticCredentialsV1 credentials = 1;
}

// NeedsCleanupRequest is the request type for NeedsCleanup.
message NeedsCleanupRequest {
  // Type is the plugin type. We only need the string representation of the
  // plugin type and not the PluginType message, as we don't want the oauth
  // client ID here.
  string type = 1;
}

// NeedsCleanupResponse is the response type for NeedsCleanup.
message NeedsCleanupResponse {
  // NeedsCleanup will be set to true if the plugin needs cleanup.
  bool needs_cleanup = 1;

  // ResourcesToCleanup are the resources that need to be cleaned up.
  repeated types.ResourceID resources_to_cleanup = 2;

  // PluginActive returns true if the plugin is currently active.
  bool plugin_active = 3;
}

// CleanupRequest is the request type for NeedsCleanup.
message CleanupRequest {
  // Type is the plugin type. We only need the string representation of the
  // plugin type and not the PluginType message, as we don't want the oauth
  // client ID here.
  string type = 1;
}

// PluginService provides CRUD operations for Plugin resources.
service PluginService {
  // CreatePlugin creates a new plugin instance.
  rpc CreatePlugin(CreatePluginRequest) returns (google.protobuf.Empty);

  // GetPlugin returns a plugin instance by name.
  rpc GetPlugin(GetPluginRequest) returns (types.PluginV1);

  // UpdatePlugin updates a plugin instance.
  rpc UpdatePlugin(UpdatePluginRequest) returns (types.PluginV1);

  // DeletePlugin removes the specified plugin instance.
  rpc DeletePlugin(DeletePluginRequest) returns (google.protobuf.Empty);

  // ListPlugins returns a paginated view of plugin instances.
  rpc ListPlugins(ListPluginsRequest) returns (ListPluginsResponse);

  // SetPluginCredentials sets the credentials for the given plugin.
  rpc SetPluginCredentials(SetPluginCredentialsRequest) returns (google.protobuf.Empty);

  // SetPluginCredentials sets the status for the given plugin.
  rpc SetPluginStatus(SetPluginStatusRequest) returns (google.protobuf.Empty);

  // GetAvailablePluginTypes returns the types of plugins
  // that the auth server supports onboarding.
  rpc GetAvailablePluginTypes(GetAvailablePluginTypesRequest) returns (GetAvailablePluginTypesResponse);

  // SearchPluginStaticCredentials returns static credentials that are searched
  // for. Only accessible by RoleAdmin and, in the case of Teleport Assist,
  // RoleProxy.
  rpc SearchPluginStaticCredentials(SearchPluginStaticCredentialsRequest) returns (SearchPluginStaticCredentialsResponse);

  // NeedsCleanup will indicate whether a plugin of the given type needs cleanup
  // before it can be created.
  rpc NeedsCleanup(NeedsCleanupRequest) returns (NeedsCleanupResponse);

  // Cleanup will clean up the resources for the given plugin type.
  rpc Cleanup(CleanupRequest) returns (google.protobuf.Empty);
}
