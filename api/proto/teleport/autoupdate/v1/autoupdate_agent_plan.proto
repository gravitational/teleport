// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.autoupdate.v1;

import "google/protobuf/timestamp.proto";
import "teleport/header/v1/metadata.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/autoupdate/v1;autoupdate";

// AutoUpdateAgentPlan holds dynamic configuration settings for agent autoupdates.
message AutoUpdateAgentPlan {
  // kind is the kind of the resource.
  string kind = 1;
  // sub_kind is the sub kind of the resource.
  string sub_kind = 2;
  // version is the version of the resource.
  string version = 3;
  // metadata is the metadata of the resource.
  teleport.header.v1.Metadata metadata = 4;
  // spec is the spec of the resource.
  AutoUpdateAgentPlanSpec spec = 5;
  // status is the status of the resource.
  AutoUpdateAgentPlanStatus status = 6;
}

// AutoUpdateAgentPlanSpec is the spec for the autoupdate version.
message AutoUpdateAgentPlanSpec {
  // start_version is the version to update from.
  string start_version = 1;
  // target_version is the version to update to.
  string target_version = 2;
  // schedule to use for the rollout
  Schedule schedule = 3;
  // strategy to use for the rollout
  Strategy strategy = 4;
  // autoupdate_mode to use for the rollout
  Mode autoupdate_mode = 5;
}

// Schedule type for the rollout
enum Schedule {
  // UNSPECIFIED update schedule
  SCHEDULE_UNSPECIFIED = 0;
  // REGULAR update schedule
  SCHEDULE_REGULAR = 1;
  // IMMEDIATE update schedule for updating all agents immediately
  SCHEDULE_IMMEDIATE = 2;
}

// Strategy type for the rollout
enum Strategy {
  // UNSPECIFIED update strategy
  STRATEGY_UNSPECIFIED = 0;
  // GROUPED update schedule, with no backpressure
  STRATEGY_GROUPED = 1;
  // BACKPRESSURE update schedule
  STRATEGY_BACKPRESSURE = 2;
}

// Mode of operation
enum Mode {
  // UNSPECIFIED update mode
  MODE_UNSPECIFIED = 0;
  // DISABLE updates
  MODE_DISABLE = 1;
  // ENABLE updates
  MODE_ENABLE = 2;
  // PAUSE updates
  MODE_PAUSE = 3;
}

// AutoUpdateAgentPlanStatus is the status for the AutoUpdateAgentPlan.
message AutoUpdateAgentPlanStatus {
  // name of the group
  string name = 1;
  // start_time of the rollout
  google.protobuf.Timestamp start_time = 2;
  // initial_count is the number of connected agents at the start of the window.
  int64 initial_count = 3;
  // present_count is the current number of connected agents.
  int64 present_count = 4;
  // failed_count specifies the number of failed agents.
  int64 failed_count = 5;
  // canaries is a list of canary agents.
  repeated Canary canaries = 6;
  // progress is the current progress through the rollout.
  float progress = 7;
  // state is the current state of the rollout.
  State state = 8;
  // last_update_time is the time of the previous update for this group.
  google.protobuf.Timestamp last_update_time = 9;
  // last_update_reason is the trigger for the last update
  string last_update_reason = 10;
}

// Canary agent
message Canary {
  // update_uuid of the canary agent
  string update_uuid = 1;
  // host_uuid of the canary agent
  string host_uuid = 2;
  // hostname of the canary agent
  string hostname = 3;
  // success state of the canary agent
  bool success = 4;
}

// State of the rollout
enum State {
  // UNSPECIFIED state
  STATE_UNSPECIFIED = 0;
  // UNSTARTED state
  STATE_UNSTARTED = 1;
  // CANARY state
  STATE_CANARY = 2;
  // ACTIVE state
  STATE_ACTIVE = 3;
  // DONE state
  STATE_DONE = 4;
  // ROLLEDBACK state
  STATE_ROLLEDBACK = 5;
}
