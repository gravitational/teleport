/*
 * Teleport
 * Copyright (C) 2024  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package teleport.notifications.v1;

import "google/protobuf/timestamp.proto";
import "teleport/header/v1/metadata.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/notifications/v1;notificationsv1";

// Notification represents a notification item.
message Notification {
  // kind is the resource kind ("notification").
  string kind = 1;
  // sub_kind represents the unique kind of notification this is, eg. `access-request-approved`
  string sub_kind = 2;
  // version is the resource version.
  string version = 3;
  // metadata is the notification's metadata. This contains the notification's labels, and expiry. All custom notification metadata should be stored in labels.
  teleport.header.v1.Metadata metadata = 4;
  // spec is the notification specification.
  NotificationSpec spec = 5;
}

// NotificationSpec is the notification specification.
message NotificationSpec {
  reserved 1;
  reserved "id";
  // created is when the notification was created, in UNIX time.
  google.protobuf.Timestamp created = 2;
  // unscoped is whether the notification shouldn't be restricted to a specific audience. This is to prevent the potential future possibility that a user-specific notification contains information that the user should no longer be allowed to see. Default is true.
  bool unscoped = 3;
  // username is the username of the target user if this is a user-specific notification. Requests for global notifications with a username will be rejected.
  string username = 4;
}

// GlobalNotification represents a global notification.
message GlobalNotification {
  // kind is the resource kind ("global_notification").
  string kind = 1;
  // sub_kind is the optional resource subkind. This is unused.
  string sub_kind = 2;
  // version is the resource version.
  string version = 3;
  // metadata is the user last seen notification object's metadata.
  teleport.header.v1.Metadata metadata = 4;
  // spec is the global notification's specification.
  GlobalNotificationSpec spec = 5;
}

// GlobalNotificationSpec is the global notification's specification.
message GlobalNotificationSpec {
  // Matcher for determining the target of this notification.
  oneof matcher {
    // by_permissions represents the RoleConditions needed for a user to receive this notification.
    // If multiple permissions are defined and `MatchAllConditions` is true, the user will need to have
    // all of them to receive this notification.
    ByPermissions by_permissions = 1;
    // by_roles represents the roles targeted by this notification.
    // If multiple roles are defined and `MatchAllConditions` is true, the user will need to have all
    // of them to receive this notification.
    ByRoles by_roles = 2;
    // all represents whether to target all users, regardless of roles or permissions.
    bool all = 3;
  }
  // match_all_conditions is whether or not all the conditions specified by the matcher must be met,
  // if false, only one of the conditions needs to be met.
  bool match_all_conditions = 4;
  // notification is the notification itself.
  Notification notification = 5;
}

// ByPermissions represents the RoleConditions needed for a user to receive this notification.
message ByPermissions {
  repeated types.RoleConditions role_conditions = 1;
}

// ByRoles represents the roles targeted by this notification.
message ByRoles {
  repeated string roles = 1;
}

// UserNotificationState represents a notification's state for a user. This is to keep track
// of whether the user has clicked on or dismissed the notification.
message UserNotificationState {
  // kind is the resource kind ("user_notification_state").
  string kind = 1;
  // sub_kind is the optional resource subkind. This is unused.
  string sub_kind = 2;
  // version is the resource version.
  string version = 3;
  // metadata is the user notification state's metadata.
  teleport.header.v1.Metadata metadata = 4;
  // spec is the user notification state's specification.
  UserNotificationStateSpec spec = 5;
  // status is the state of this user notification state, it contains the notification state itself which will be dynamically modified.
  UserNotificationStateStatus status = 6;
}

// UserNotificationStateSpec is the user notification state's specification.
message UserNotificationStateSpec {
  // notification_id is the ID of the notification this state is for.
  string notification_id = 1;
}

// NotificationState the state of a notification for a user. This can represent either "clicked" or "dismissed".
enum NotificationState {
  NOTIFICATION_STATE_UNSPECIFIED = 0;
  // NOTIFICATION_STATE_CLICKED marks this notification as having been clicked on by the user.
  NOTIFICATION_STATE_CLICKED = 1;
  // NOTIFICATION_STATE_DISMISSED marks this notification as having been dismissed by the user.
  NOTIFICATION_STATE_DISMISSED = 2;
}

// UserNotificationStateStatus is the status of this user notification state, it contains the notification state itself which will be dynamically modified.
message UserNotificationStateStatus {
  // notification_state is the state of this notification for the user. This can represent either "clicked" or "dismissed".
  NotificationState notification_state = 1;
}

// UserLastSeenNotification represents the timestamp of the last notification a user has seen.
message UserLastSeenNotification {
  // kind is the resource kind ("user_last_seen_notification").
  string kind = 1;
  // sub_kind is the optional resource subkind. This is unused.
  string sub_kind = 2;
  // version is the resource version.
  string version = 3;
  // metadata is the user last seen notification object's metadata.
  teleport.header.v1.Metadata metadata = 4;
  // UserLastSeenNotificationSpec is the user last seen notification item's specification.
  UserLastSeenNotificationSpec spec = 5;
  reserved 6;
  reserved "time";
  // status is the timestamp of this user's last seen notification, it contains the timestamp of the notification which will be dynamically modified.
  UserLastSeenNotificationStatus status = 7;
}

// UserLastSeenNotificationSpec is a user last seen notification specification.
message UserLastSeenNotificationSpec {}

// UserLastSeenNotificationStatus is the timestamp of this user's last seen notification, it contains the timestamp of the notification which will be dynamically modified.
message UserLastSeenNotificationStatus {
  // last_seen_time is the timestamp of the last notification that the user has seen.
  google.protobuf.Timestamp last_seen_time = 1;
}
