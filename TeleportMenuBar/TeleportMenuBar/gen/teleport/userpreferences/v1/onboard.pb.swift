// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/userpreferences/v1/onboard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Resources are the Resource options in the onboarding questionnaire
public enum Teleport_Userpreferences_V1_Resource: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case windowsDesktops // = 1
  case serverSsh // = 2
  case databases // = 3
  case kubernetes // = 4
  case webApplications // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .windowsDesktops
    case 2: self = .serverSsh
    case 3: self = .databases
    case 4: self = .kubernetes
    case 5: self = .webApplications
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .windowsDesktops: return 1
    case .serverSsh: return 2
    case .databases: return 3
    case .kubernetes: return 4
    case .webApplications: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Teleport_Userpreferences_V1_Resource] = [
    .unspecified,
    .windowsDesktops,
    .serverSsh,
    .databases,
    .kubernetes,
    .webApplications,
  ]

}

/// MarketingParams are the parameters associated with a user via marketing campaign at the time of sign up.
/// They contain both traditional Urchin Tracking Module (UTM) parameters as well as custom parameters.
public struct Teleport_Userpreferences_V1_MarketingParams: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// campaign is the UTM campaign parameter which identifies a specific product promotion
  public var campaign: String = String()

  /// source is the UTM source parameter which identifies which site sent the traffic
  public var source: String = String()

  /// medium is the UTM medium parameter which identifies what type of link was used
  public var medium: String = String()

  /// intent is the internal query param, which identifies any additional marketing intentions
  /// via internally set and directed parameters.
  public var intent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// OnboardUserPreferences is the user preferences selected during onboarding.
public struct Teleport_Userpreferences_V1_OnboardUserPreferences: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// preferredResources is an array of the resources a user selected during their onboarding questionnaire.
  public var preferredResources: [Teleport_Userpreferences_V1_Resource] = []

  /// marketingParams are the parameters associated with a user via marketing campaign at the time of sign up
  public var marketingParams: Teleport_Userpreferences_V1_MarketingParams {
    get {return _marketingParams ?? Teleport_Userpreferences_V1_MarketingParams()}
    set {_marketingParams = newValue}
  }
  /// Returns true if `marketingParams` has been explicitly set.
  public var hasMarketingParams: Bool {return self._marketingParams != nil}
  /// Clears the value of `marketingParams`. Subsequent reads from it will return its default value.
  public mutating func clearMarketingParams() {self._marketingParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _marketingParams: Teleport_Userpreferences_V1_MarketingParams? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.userpreferences.v1"

extension Teleport_Userpreferences_V1_Resource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESOURCE_UNSPECIFIED"),
    1: .same(proto: "RESOURCE_WINDOWS_DESKTOPS"),
    2: .same(proto: "RESOURCE_SERVER_SSH"),
    3: .same(proto: "RESOURCE_DATABASES"),
    4: .same(proto: "RESOURCE_KUBERNETES"),
    5: .same(proto: "RESOURCE_WEB_APPLICATIONS"),
  ]
}

extension Teleport_Userpreferences_V1_MarketingParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MarketingParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "campaign"),
    2: .same(proto: "source"),
    3: .same(proto: "medium"),
    4: .same(proto: "intent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.campaign) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.medium) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.intent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.campaign.isEmpty {
      try visitor.visitSingularStringField(value: self.campaign, fieldNumber: 1)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 2)
    }
    if !self.medium.isEmpty {
      try visitor.visitSingularStringField(value: self.medium, fieldNumber: 3)
    }
    if !self.intent.isEmpty {
      try visitor.visitSingularStringField(value: self.intent, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Teleport_Userpreferences_V1_MarketingParams, rhs: Teleport_Userpreferences_V1_MarketingParams) -> Bool {
    if lhs.campaign != rhs.campaign {return false}
    if lhs.source != rhs.source {return false}
    if lhs.medium != rhs.medium {return false}
    if lhs.intent != rhs.intent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Userpreferences_V1_OnboardUserPreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OnboardUserPreferences"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "preferred_resources"),
    2: .standard(proto: "marketing_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.preferredResources) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._marketingParams) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.preferredResources.isEmpty {
      try visitor.visitPackedEnumField(value: self.preferredResources, fieldNumber: 1)
    }
    try { if let v = self._marketingParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Teleport_Userpreferences_V1_OnboardUserPreferences, rhs: Teleport_Userpreferences_V1_OnboardUserPreferences) -> Bool {
    if lhs.preferredResources != rhs.preferredResources {return false}
    if lhs._marketingParams != rhs._marketingParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
