// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teleport/devicetrust/v1/tpm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Encapsulates the value of a PCR at a point at time.
/// See https://pkg.go.dev/github.com/google/go-attestation/attest#PCR
public struct Teleport_Devicetrust_V1_TPMPCR: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the PCR index in the PCR bank
  public var index: Int32 = 0

  /// the digest currently held in the PCR
  public var digest: Data = Data()

  /// the hash algorithm used to produce the digest in this PCR bank. This value
  /// is the underlying value of the Go crypto.Hash type.
  public var digestAlg: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Encapsulates the result of a quote operation against the TPM over a PCR
/// using an attestation key.
/// See https://pkg.go.dev/github.com/google/go-attestation/attest#Quote
public struct Teleport_Devicetrust_V1_TPMQuote: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var quote: Data = Data()

  public var signature: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The quotes, PCRs and event log from a TPM that attest to the booted state
/// of the machine.
/// See https://pkg.go.dev/github.com/google/go-attestation/attest#PlatformParameters
/// Excludes TPMVersion and Public since these are already known values.
public struct Teleport_Devicetrust_V1_TPMPlatformParameters: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var quotes: [Teleport_Devicetrust_V1_TPMQuote] = []

  public var pcrs: [Teleport_Devicetrust_V1_TPMPCR] = []

  public var eventLog: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Holds the record of a TPM platform attestation, including the platform
/// parameters sent by the device and the nonce the server generated. This allows
/// a historical platform attestation to be revalidated and allows us to compare
/// the incoming state of a device (e.g during authentication) against the
/// historical state in order to detect potentially malicious actions.
public struct Teleport_Devicetrust_V1_TPMPlatformAttestation: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var nonce: Data = Data()

  public var platformParameters: Teleport_Devicetrust_V1_TPMPlatformParameters {
    get {return _platformParameters ?? Teleport_Devicetrust_V1_TPMPlatformParameters()}
    set {_platformParameters = newValue}
  }
  /// Returns true if `platformParameters` has been explicitly set.
  public var hasPlatformParameters: Bool {return self._platformParameters != nil}
  /// Clears the value of `platformParameters`. Subsequent reads from it will return its default value.
  public mutating func clearPlatformParameters() {self._platformParameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _platformParameters: Teleport_Devicetrust_V1_TPMPlatformParameters? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "teleport.devicetrust.v1"

extension Teleport_Devicetrust_V1_TPMPCR: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TPMPCR"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "digest"),
    3: .standard(proto: "digest_alg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.digest) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.digestAlg) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    if !self.digest.isEmpty {
      try visitor.visitSingularBytesField(value: self.digest, fieldNumber: 2)
    }
    if self.digestAlg != 0 {
      try visitor.visitSingularUInt64Field(value: self.digestAlg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Teleport_Devicetrust_V1_TPMPCR, rhs: Teleport_Devicetrust_V1_TPMPCR) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.digest != rhs.digest {return false}
    if lhs.digestAlg != rhs.digestAlg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Devicetrust_V1_TPMQuote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TPMQuote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quote"),
    2: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.quote) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.quote.isEmpty {
      try visitor.visitSingularBytesField(value: self.quote, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Teleport_Devicetrust_V1_TPMQuote, rhs: Teleport_Devicetrust_V1_TPMQuote) -> Bool {
    if lhs.quote != rhs.quote {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Devicetrust_V1_TPMPlatformParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TPMPlatformParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quotes"),
    2: .same(proto: "pcrs"),
    3: .standard(proto: "event_log"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.quotes) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.pcrs) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.eventLog) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.quotes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.quotes, fieldNumber: 1)
    }
    if !self.pcrs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pcrs, fieldNumber: 2)
    }
    if !self.eventLog.isEmpty {
      try visitor.visitSingularBytesField(value: self.eventLog, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Teleport_Devicetrust_V1_TPMPlatformParameters, rhs: Teleport_Devicetrust_V1_TPMPlatformParameters) -> Bool {
    if lhs.quotes != rhs.quotes {return false}
    if lhs.pcrs != rhs.pcrs {return false}
    if lhs.eventLog != rhs.eventLog {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Teleport_Devicetrust_V1_TPMPlatformAttestation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TPMPlatformAttestation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce"),
    2: .standard(proto: "platform_parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._platformParameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 1)
    }
    try { if let v = self._platformParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Teleport_Devicetrust_V1_TPMPlatformAttestation, rhs: Teleport_Devicetrust_V1_TPMPlatformAttestation) -> Bool {
    if lhs.nonce != rhs.nonce {return false}
    if lhs._platformParameters != rhs._platformParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
