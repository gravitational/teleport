// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: teleport/lib/teleterm/v1/service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// TerminalService is used by the Electron app to communicate with the tsh daemon.
///
/// While we aim to preserve backwards compatibility in order to satisfy CI checks and follow the
/// proto practices used within the company, this service is not guaranteed to be stable across
/// versions. The packaging process of Teleport Connect ensures that the server and the client use
/// the same version of the service.
public protocol Teleport_Lib_Teleterm_V1_TerminalServiceClientInterface: Sendable {

    /// UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
    /// supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
    /// before any other from this service.
    ///
    /// The service is supposed to return a response from this call only after the client is ready.
    @discardableResult
    func `updateTshdEventsServerAddress`(request: Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>) -> Void) -> Connect.Cancelable

    /// UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
    /// supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
    /// before any other from this service.
    ///
    /// The service is supposed to return a response from this call only after the client is ready.
    @available(iOS 13, *)
    func `updateTshdEventsServerAddress`(request: Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>

    /// ListRootClusters lists root clusters
    /// Does not include detailed cluster information that would require a network request.
    @discardableResult
    func `listRootClusters`(request: Teleport_Lib_Teleterm_V1_ListClustersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse>) -> Void) -> Connect.Cancelable

    /// ListRootClusters lists root clusters
    /// Does not include detailed cluster information that would require a network request.
    @available(iOS 13, *)
    func `listRootClusters`(request: Teleport_Lib_Teleterm_V1_ListClustersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse>

    /// ListLeafClusters lists leaf clusters
    /// Does not include detailed cluster information that would require a network request.
    @discardableResult
    func `listLeafClusters`(request: Teleport_Lib_Teleterm_V1_ListLeafClustersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse>) -> Void) -> Connect.Cancelable

    /// ListLeafClusters lists leaf clusters
    /// Does not include detailed cluster information that would require a network request.
    @available(iOS 13, *)
    func `listLeafClusters`(request: Teleport_Lib_Teleterm_V1_ListLeafClustersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse>

    /// StartHeadlessWatcher starts a headless watcher.
    /// If the watcher is already running, it is restarted.
    @discardableResult
    func `startHeadlessWatcher`(request: Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>) -> Void) -> Connect.Cancelable

    /// StartHeadlessWatcher starts a headless watcher.
    /// If the watcher is already running, it is restarted.
    @available(iOS 13, *)
    func `startHeadlessWatcher`(request: Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>

    /// ListDatabaseUsers lists allowed users for the given database based on the role set.
    @discardableResult
    func `listDatabaseUsers`(request: Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>) -> Void) -> Connect.Cancelable

    /// ListDatabaseUsers lists allowed users for the given database based on the role set.
    @available(iOS 13, *)
    func `listDatabaseUsers`(request: Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>

    /// GetServers returns filtered, sorted, and paginated servers
    ///
    /// Deprecated: Use ListUnifiedResources instead.
    @available(iOS, introduced: 12, deprecated: 12, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(macOS, introduced: 10.15, deprecated: 10.15, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(tvOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(watchOS, introduced: 6, deprecated: 6, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @discardableResult
    func `getServers`(request: Teleport_Lib_Teleterm_V1_GetServersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetServersResponse>) -> Void) -> Connect.Cancelable

    /// GetServers returns filtered, sorted, and paginated servers
    ///
    /// Deprecated: Use ListUnifiedResources instead.
    @available(iOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    func `getServers`(request: Teleport_Lib_Teleterm_V1_GetServersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetServersResponse>

    /// GetAccessRequests lists filtered AccessRequests
    @discardableResult
    func `getAccessRequests`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>) -> Void) -> Connect.Cancelable

    /// GetAccessRequests lists filtered AccessRequests
    @available(iOS 13, *)
    func `getAccessRequests`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>

    /// GetAccessRequest retreives a single Access Request
    @discardableResult
    func `getAccessRequest`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>) -> Void) -> Connect.Cancelable

    /// GetAccessRequest retreives a single Access Request
    @available(iOS 13, *)
    func `getAccessRequest`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>

    /// DeleteAccessRequest deletes the access request by id
    @discardableResult
    func `deleteAccessRequest`(request: Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable

    /// DeleteAccessRequest deletes the access request by id
    @available(iOS 13, *)
    func `deleteAccessRequest`(request: Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>

    /// CreateAccessRequest creates an access request
    @discardableResult
    func `createAccessRequest`(request: Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>) -> Void) -> Connect.Cancelable

    /// CreateAccessRequest creates an access request
    @available(iOS 13, *)
    func `createAccessRequest`(request: Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>

    /// ReviewAccessRequest submits a review for an Access Request
    @discardableResult
    func `reviewAccessRequest`(request: Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>) -> Void) -> Connect.Cancelable

    /// ReviewAccessRequest submits a review for an Access Request
    @available(iOS 13, *)
    func `reviewAccessRequest`(request: Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>

    /// GetRequestableRoles gets all requestable roles
    @discardableResult
    func `getRequestableRoles`(request: Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>) -> Void) -> Connect.Cancelable

    /// GetRequestableRoles gets all requestable roles
    @available(iOS 13, *)
    func `getRequestableRoles`(request: Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>

    /// AssumeRole assumes the role of the given access request
    @discardableResult
    func `assumeRole`(request: Teleport_Lib_Teleterm_V1_AssumeRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable

    /// AssumeRole assumes the role of the given access request
    @available(iOS 13, *)
    func `assumeRole`(request: Teleport_Lib_Teleterm_V1_AssumeRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>

    /// PromoteAccessRequest promotes an access request to an access list.
    @discardableResult
    func `promoteAccessRequest`(request: Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>) -> Void) -> Connect.Cancelable

    /// PromoteAccessRequest promotes an access request to an access list.
    @available(iOS 13, *)
    func `promoteAccessRequest`(request: Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>

    /// GetSuggestedAccessLists returns suggested access lists for an access request.
    @discardableResult
    func `getSuggestedAccessLists`(request: Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>) -> Void) -> Connect.Cancelable

    /// GetSuggestedAccessLists returns suggested access lists for an access request.
    @available(iOS 13, *)
    func `getSuggestedAccessLists`(request: Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>

    /// ListKubernetesResourcesRequest defines a request to retrieve kube resources paginated.
    /// Only one type of kube resource can be retrieved per request (eg: namespace, pods, secrets, etc.)
    @discardableResult
    func `listKubernetesResources`(request: Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>) -> Void) -> Connect.Cancelable

    /// ListKubernetesResourcesRequest defines a request to retrieve kube resources paginated.
    /// Only one type of kube resource can be retrieved per request (eg: namespace, pods, secrets, etc.)
    @available(iOS 13, *)
    func `listKubernetesResources`(request: Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>

    /// AddCluster adds a cluster to profile
    @discardableResult
    func `addCluster`(request: Teleport_Lib_Teleterm_V1_AddClusterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster>) -> Void) -> Connect.Cancelable

    /// AddCluster adds a cluster to profile
    @available(iOS 13, *)
    func `addCluster`(request: Teleport_Lib_Teleterm_V1_AddClusterRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster>

    /// RemoveCluster removes a cluster from profile
    @discardableResult
    func `removeCluster`(request: Teleport_Lib_Teleterm_V1_RemoveClusterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable

    /// RemoveCluster removes a cluster from profile
    @available(iOS 13, *)
    func `removeCluster`(request: Teleport_Lib_Teleterm_V1_RemoveClusterRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>

    /// ListGateways lists gateways
    @discardableResult
    func `listGateways`(request: Teleport_Lib_Teleterm_V1_ListGatewaysRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>) -> Void) -> Connect.Cancelable

    /// ListGateways lists gateways
    @available(iOS 13, *)
    func `listGateways`(request: Teleport_Lib_Teleterm_V1_ListGatewaysRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>

    /// CreateGateway creates a gateway
    @discardableResult
    func `createGateway`(request: Teleport_Lib_Teleterm_V1_CreateGatewayRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>) -> Void) -> Connect.Cancelable

    /// CreateGateway creates a gateway
    @available(iOS 13, *)
    func `createGateway`(request: Teleport_Lib_Teleterm_V1_CreateGatewayRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>

    /// RemoveGateway removes a gateway
    @discardableResult
    func `removeGateway`(request: Teleport_Lib_Teleterm_V1_RemoveGatewayRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable

    /// RemoveGateway removes a gateway
    @available(iOS 13, *)
    func `removeGateway`(request: Teleport_Lib_Teleterm_V1_RemoveGatewayRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>

    /// SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
    /// and returns the updated version of gateway.Gateway.
    ///
    /// In Connect this is used to update the db name of a db connection along with the CLI command.
    @discardableResult
    func `setGatewayTargetSubresourceName`(request: Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>) -> Void) -> Connect.Cancelable

    /// SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
    /// and returns the updated version of gateway.Gateway.
    ///
    /// In Connect this is used to update the db name of a db connection along with the CLI command.
    @available(iOS 13, *)
    func `setGatewayTargetSubresourceName`(request: Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>

    /// SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
    /// assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
    @discardableResult
    func `setGatewayLocalPort`(request: Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>) -> Void) -> Connect.Cancelable

    /// SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
    /// assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
    @available(iOS 13, *)
    func `setGatewayLocalPort`(request: Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>

    /// GetAuthSettings returns cluster auth settigns
    @discardableResult
    func `getAuthSettings`(request: Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_AuthSettings>) -> Void) -> Connect.Cancelable

    /// GetAuthSettings returns cluster auth settigns
    @available(iOS 13, *)
    func `getAuthSettings`(request: Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_AuthSettings>

    /// GetCluster returns cluster. Makes a network request and includes detailed
    /// information about enterprise features availabed on the connected auth server
    @discardableResult
    func `getCluster`(request: Teleport_Lib_Teleterm_V1_GetClusterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster>) -> Void) -> Connect.Cancelable

    /// GetCluster returns cluster. Makes a network request and includes detailed
    /// information about enterprise features availabed on the connected auth server
    @available(iOS 13, *)
    func `getCluster`(request: Teleport_Lib_Teleterm_V1_GetClusterRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster>

    /// Login logs in a user to a cluster
    @discardableResult
    func `login`(request: Teleport_Lib_Teleterm_V1_LoginRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable

    /// Login logs in a user to a cluster
    @available(iOS 13, *)
    func `login`(request: Teleport_Lib_Teleterm_V1_LoginRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>

    /// LoginPasswordless logs in a user to a cluster passwordlessly.
    ///
    /// The RPC is streaming both ways and the message sequence example for hardware keys are:
    /// (-> means client-to-server, <- means server-to-client)
    ///
    /// Hardware keys:
    /// -> Init
    /// <- Send PasswordlessPrompt enum TAP to choose a device
    /// -> Receive TAP device response
    /// <- Send PasswordlessPrompt enum PIN
    /// -> Receive PIN response
    /// <- Send PasswordlessPrompt enum RETAP to confirm
    /// -> Receive RETAP device response
    /// <- Send list of credentials (e.g. usernames) associated with device
    /// -> Receive the index number associated with the selected credential in list
    /// <- End
    func `loginPasswordless`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest>

    /// LoginPasswordless logs in a user to a cluster passwordlessly.
    ///
    /// The RPC is streaming both ways and the message sequence example for hardware keys are:
    /// (-> means client-to-server, <- means server-to-client)
    ///
    /// Hardware keys:
    /// -> Init
    /// <- Send PasswordlessPrompt enum TAP to choose a device
    /// -> Receive TAP device response
    /// <- Send PasswordlessPrompt enum PIN
    /// -> Receive PIN response
    /// <- Send PasswordlessPrompt enum RETAP to confirm
    /// -> Receive RETAP device response
    /// <- Send list of credentials (e.g. usernames) associated with device
    /// -> Receive the index number associated with the selected credential in list
    /// <- End
    @available(iOS 13, *)
    func `loginPasswordless`(headers: Connect.Headers) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest, Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>

    /// ClusterLogin logs out a user from cluster
    @discardableResult
    func `logout`(request: Teleport_Lib_Teleterm_V1_LogoutRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable

    /// ClusterLogin logs out a user from cluster
    @available(iOS 13, *)
    func `logout`(request: Teleport_Lib_Teleterm_V1_LogoutRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>

    /// TransferFile sends a request to download/upload a file
    func `transferFile`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Lib_Teleterm_V1_FileTransferProgress>) -> Void) -> any Connect.ServerOnlyStreamInterface<Teleport_Lib_Teleterm_V1_FileTransferRequest>

    /// TransferFile sends a request to download/upload a file
    @available(iOS 13, *)
    func `transferFile`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Teleport_Lib_Teleterm_V1_FileTransferRequest, Teleport_Lib_Teleterm_V1_FileTransferProgress>

    /// ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
    @discardableResult
    func `reportUsageEvent`(request: Teleport_Lib_Teleterm_V1_ReportUsageEventRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable

    /// ReportUsageEvent allows to send usage events that are then anonymized and forwarded to prehog
    @available(iOS 13, *)
    func `reportUsageEvent`(request: Teleport_Lib_Teleterm_V1_ReportUsageEventRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>

    /// UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
    /// An MFA challenge will be prompted when approving a headless authentication.
    @discardableResult
    func `updateHeadlessAuthenticationState`(request: Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>) -> Void) -> Connect.Cancelable

    /// UpdateHeadlessAuthenticationState updates a headless authentication resource's state.
    /// An MFA challenge will be prompted when approving a headless authentication.
    @available(iOS 13, *)
    func `updateHeadlessAuthenticationState`(request: Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>

    /// CreateConnectMyComputerRole creates a role which allows access to nodes with the label
    /// teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
    /// the current system user.
    @discardableResult
    func `createConnectMyComputerRole`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>) -> Void) -> Connect.Cancelable

    /// CreateConnectMyComputerRole creates a role which allows access to nodes with the label
    /// teleport.dev/connect-my-computer/owner: <cluster user> and allows logging in to those nodes as
    /// the current system user.
    @available(iOS 13, *)
    func `createConnectMyComputerRole`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>

    /// CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
    @discardableResult
    func `createConnectMyComputerNodeToken`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>) -> Void) -> Connect.Cancelable

    /// CreateConnectMyComputerNodeToken creates a node join token that is valid for 5 minutes
    @available(iOS 13, *)
    func `createConnectMyComputerNodeToken`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>

    /// WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
    /// that the Connect My Computer node for the particular cluster has joined the cluster (the
    /// OpPut event).
    ///
    /// This RPC times out by itself after a minute to prevent the request from hanging forever, in
    /// case the client didn't set a deadline or doesn't abort the request.
    @discardableResult
    func `waitForConnectMyComputerNodeJoin`(request: Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>) -> Void) -> Connect.Cancelable

    /// WaitForConnectMyComputerNodeJoin sets up a watcher and returns a response only after detecting
    /// that the Connect My Computer node for the particular cluster has joined the cluster (the
    /// OpPut event).
    ///
    /// This RPC times out by itself after a minute to prevent the request from hanging forever, in
    /// case the client didn't set a deadline or doesn't abort the request.
    @available(iOS 13, *)
    func `waitForConnectMyComputerNodeJoin`(request: Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>

    /// DeleteConnectMyComputerNode deletes the Connect My Computer node.
    @discardableResult
    func `deleteConnectMyComputerNode`(request: Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>) -> Void) -> Connect.Cancelable

    /// DeleteConnectMyComputerNode deletes the Connect My Computer node.
    @available(iOS 13, *)
    func `deleteConnectMyComputerNode`(request: Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>

    /// GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
    @discardableResult
    func `getConnectMyComputerNodeName`(request: Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>) -> Void) -> Connect.Cancelable

    /// GetConnectMyComputerNodeName reads the Connect My Computer node name (UUID) from a disk.
    @available(iOS 13, *)
    func `getConnectMyComputerNodeName`(request: Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>

    /// ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
    @discardableResult
    func `listUnifiedResources`(request: Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>) -> Void) -> Connect.Cancelable

    /// ListUnifiedResources retrieves a paginated list of all resource types displayable in the UI.
    @available(iOS 13, *)
    func `listUnifiedResources`(request: Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>

    /// GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
    @discardableResult
    func `getUserPreferences`(request: Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>) -> Void) -> Connect.Cancelable

    /// GetUserPreferences returns the combined (root + leaf cluster) preferences for a given user.
    @available(iOS 13, *)
    func `getUserPreferences`(request: Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>

    /// UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
    /// Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
    @discardableResult
    func `updateUserPreferences`(request: Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>) -> Void) -> Connect.Cancelable

    /// UpdateUserPreferences updates the preferences for a given user in appropriate root and leaf clusters.
    /// Only the properties that are set (cluster_preferences, unified_resource_preferences) will be updated.
    @available(iOS 13, *)
    func `updateUserPreferences`(request: Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>

    /// AuthenticateWebDevice blesses a web session with device trust by performing
    /// the on-behalf-of device authentication ceremony.
    ///
    /// See
    /// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    @discardableResult
    func `authenticateWebDevice`(request: Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>) -> Void) -> Connect.Cancelable

    /// AuthenticateWebDevice blesses a web session with device trust by performing
    /// the on-behalf-of device authentication ceremony.
    ///
    /// See
    /// https://github.com/gravitational/teleport.e/blob/master/rfd/0009e-device-trust-web-support.md#device-web-authentication.
    @available(iOS 13, *)
    func `authenticateWebDevice`(request: Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>

    /// GetApp returns details of an app resource. It does not include information about AWS roles and
    /// FQDN.
    @discardableResult
    func `getApp`(request: Teleport_Lib_Teleterm_V1_GetAppRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetAppResponse>) -> Void) -> Connect.Cancelable

    /// GetApp returns details of an app resource. It does not include information about AWS roles and
    /// FQDN.
    @available(iOS 13, *)
    func `getApp`(request: Teleport_Lib_Teleterm_V1_GetAppRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetAppResponse>
}

/// Concrete implementation of `Teleport_Lib_Teleterm_V1_TerminalServiceClientInterface`.
public final class Teleport_Lib_Teleterm_V1_TerminalServiceClient: Teleport_Lib_Teleterm_V1_TerminalServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `updateTshdEventsServerAddress`(request: Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/UpdateTshdEventsServerAddress", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateTshdEventsServerAddress`(request: Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateTshdEventsServerAddressResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/UpdateTshdEventsServerAddress", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listRootClusters`(request: Teleport_Lib_Teleterm_V1_ListClustersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListRootClusters", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listRootClusters`(request: Teleport_Lib_Teleterm_V1_ListClustersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListRootClusters", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listLeafClusters`(request: Teleport_Lib_Teleterm_V1_ListLeafClustersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListLeafClusters", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listLeafClusters`(request: Teleport_Lib_Teleterm_V1_ListLeafClustersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListClustersResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListLeafClusters", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `startHeadlessWatcher`(request: Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/StartHeadlessWatcher", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `startHeadlessWatcher`(request: Teleport_Lib_Teleterm_V1_StartHeadlessWatcherRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_StartHeadlessWatcherResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/StartHeadlessWatcher", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listDatabaseUsers`(request: Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListDatabaseUsers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listDatabaseUsers`(request: Teleport_Lib_Teleterm_V1_ListDatabaseUsersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListDatabaseUsersResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListDatabaseUsers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS, introduced: 12, deprecated: 12, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(macOS, introduced: 10.15, deprecated: 10.15, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(tvOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(watchOS, introduced: 6, deprecated: 6, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @discardableResult
    public func `getServers`(request: Teleport_Lib_Teleterm_V1_GetServersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetServersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetServers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    public func `getServers`(request: Teleport_Lib_Teleterm_V1_GetServersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetServersResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetServers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getAccessRequests`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetAccessRequests", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAccessRequests`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestsResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetAccessRequests", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getAccessRequest`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAccessRequest`(request: Teleport_Lib_Teleterm_V1_GetAccessRequestRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetAccessRequestResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAccessRequest`(request: Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/DeleteAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAccessRequest`(request: Teleport_Lib_Teleterm_V1_DeleteAccessRequestRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/DeleteAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createAccessRequest`(request: Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createAccessRequest`(request: Teleport_Lib_Teleterm_V1_CreateAccessRequestRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_CreateAccessRequestResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `reviewAccessRequest`(request: Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ReviewAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `reviewAccessRequest`(request: Teleport_Lib_Teleterm_V1_ReviewAccessRequestRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ReviewAccessRequestResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ReviewAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getRequestableRoles`(request: Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetRequestableRoles", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getRequestableRoles`(request: Teleport_Lib_Teleterm_V1_GetRequestableRolesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetRequestableRolesResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetRequestableRoles", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `assumeRole`(request: Teleport_Lib_Teleterm_V1_AssumeRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/AssumeRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `assumeRole`(request: Teleport_Lib_Teleterm_V1_AssumeRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/AssumeRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `promoteAccessRequest`(request: Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/PromoteAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `promoteAccessRequest`(request: Teleport_Lib_Teleterm_V1_PromoteAccessRequestRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_PromoteAccessRequestResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/PromoteAccessRequest", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getSuggestedAccessLists`(request: Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetSuggestedAccessLists", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getSuggestedAccessLists`(request: Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetSuggestedAccessListsResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetSuggestedAccessLists", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listKubernetesResources`(request: Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListKubernetesResources", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listKubernetesResources`(request: Teleport_Lib_Teleterm_V1_ListKubernetesResourcesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListKubernetesResourcesResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListKubernetesResources", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `addCluster`(request: Teleport_Lib_Teleterm_V1_AddClusterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/AddCluster", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `addCluster`(request: Teleport_Lib_Teleterm_V1_AddClusterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/AddCluster", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `removeCluster`(request: Teleport_Lib_Teleterm_V1_RemoveClusterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/RemoveCluster", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `removeCluster`(request: Teleport_Lib_Teleterm_V1_RemoveClusterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/RemoveCluster", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listGateways`(request: Teleport_Lib_Teleterm_V1_ListGatewaysRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListGatewaysResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListGateways", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listGateways`(request: Teleport_Lib_Teleterm_V1_ListGatewaysRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListGatewaysResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListGateways", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createGateway`(request: Teleport_Lib_Teleterm_V1_CreateGatewayRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateGateway", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createGateway`(request: Teleport_Lib_Teleterm_V1_CreateGatewayRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateGateway", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `removeGateway`(request: Teleport_Lib_Teleterm_V1_RemoveGatewayRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/RemoveGateway", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `removeGateway`(request: Teleport_Lib_Teleterm_V1_RemoveGatewayRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/RemoveGateway", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `setGatewayTargetSubresourceName`(request: Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/SetGatewayTargetSubresourceName", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `setGatewayTargetSubresourceName`(request: Teleport_Lib_Teleterm_V1_SetGatewayTargetSubresourceNameRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/SetGatewayTargetSubresourceName", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `setGatewayLocalPort`(request: Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/SetGatewayLocalPort", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `setGatewayLocalPort`(request: Teleport_Lib_Teleterm_V1_SetGatewayLocalPortRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Gateway> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/SetGatewayLocalPort", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getAuthSettings`(request: Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_AuthSettings>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetAuthSettings", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAuthSettings`(request: Teleport_Lib_Teleterm_V1_GetAuthSettingsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_AuthSettings> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetAuthSettings", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getCluster`(request: Teleport_Lib_Teleterm_V1_GetClusterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetCluster", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getCluster`(request: Teleport_Lib_Teleterm_V1_GetClusterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_Cluster> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetCluster", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `login`(request: Teleport_Lib_Teleterm_V1_LoginRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/Login", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `login`(request: Teleport_Lib_Teleterm_V1_LoginRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/Login", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public func `loginPasswordless`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse>) -> Void) -> any Connect.BidirectionalStreamInterface<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest> {
        return self.client.bidirectionalStream(path: "/teleport.lib.teleterm.v1.TerminalService/LoginPasswordless", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `loginPasswordless`(headers: Connect.Headers = [:]) -> any Connect.BidirectionalAsyncStreamInterface<Teleport_Lib_Teleterm_V1_LoginPasswordlessRequest, Teleport_Lib_Teleterm_V1_LoginPasswordlessResponse> {
        return self.client.bidirectionalStream(path: "/teleport.lib.teleterm.v1.TerminalService/LoginPasswordless", headers: headers)
    }

    @discardableResult
    public func `logout`(request: Teleport_Lib_Teleterm_V1_LogoutRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/Logout", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `logout`(request: Teleport_Lib_Teleterm_V1_LogoutRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/Logout", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public func `transferFile`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Teleport_Lib_Teleterm_V1_FileTransferProgress>) -> Void) -> any Connect.ServerOnlyStreamInterface<Teleport_Lib_Teleterm_V1_FileTransferRequest> {
        return self.client.serverOnlyStream(path: "/teleport.lib.teleterm.v1.TerminalService/TransferFile", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `transferFile`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Teleport_Lib_Teleterm_V1_FileTransferRequest, Teleport_Lib_Teleterm_V1_FileTransferProgress> {
        return self.client.serverOnlyStream(path: "/teleport.lib.teleterm.v1.TerminalService/TransferFile", headers: headers)
    }

    @discardableResult
    public func `reportUsageEvent`(request: Teleport_Lib_Teleterm_V1_ReportUsageEventRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ReportUsageEvent", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `reportUsageEvent`(request: Teleport_Lib_Teleterm_V1_ReportUsageEventRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_EmptyResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ReportUsageEvent", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateHeadlessAuthenticationState`(request: Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/UpdateHeadlessAuthenticationState", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateHeadlessAuthenticationState`(request: Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateHeadlessAuthenticationStateResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/UpdateHeadlessAuthenticationState", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createConnectMyComputerRole`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateConnectMyComputerRole", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createConnectMyComputerRole`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerRoleResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateConnectMyComputerRole", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createConnectMyComputerNodeToken`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateConnectMyComputerNodeToken", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createConnectMyComputerNodeToken`(request: Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_CreateConnectMyComputerNodeTokenResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/CreateConnectMyComputerNodeToken", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `waitForConnectMyComputerNodeJoin`(request: Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/WaitForConnectMyComputerNodeJoin", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `waitForConnectMyComputerNodeJoin`(request: Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_WaitForConnectMyComputerNodeJoinResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/WaitForConnectMyComputerNodeJoin", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteConnectMyComputerNode`(request: Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/DeleteConnectMyComputerNode", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteConnectMyComputerNode`(request: Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_DeleteConnectMyComputerNodeResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/DeleteConnectMyComputerNode", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getConnectMyComputerNodeName`(request: Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetConnectMyComputerNodeName", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getConnectMyComputerNodeName`(request: Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetConnectMyComputerNodeNameResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetConnectMyComputerNodeName", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listUnifiedResources`(request: Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListUnifiedResources", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listUnifiedResources`(request: Teleport_Lib_Teleterm_V1_ListUnifiedResourcesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_ListUnifiedResourcesResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/ListUnifiedResources", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserPreferences`(request: Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetUserPreferences", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserPreferences`(request: Teleport_Lib_Teleterm_V1_GetUserPreferencesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetUserPreferencesResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetUserPreferences", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUserPreferences`(request: Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/UpdateUserPreferences", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUserPreferences`(request: Teleport_Lib_Teleterm_V1_UpdateUserPreferencesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_UpdateUserPreferencesResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/UpdateUserPreferences", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `authenticateWebDevice`(request: Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/AuthenticateWebDevice", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `authenticateWebDevice`(request: Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_AuthenticateWebDeviceResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/AuthenticateWebDevice", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getApp`(request: Teleport_Lib_Teleterm_V1_GetAppRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Lib_Teleterm_V1_GetAppResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetApp", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getApp`(request: Teleport_Lib_Teleterm_V1_GetAppRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Lib_Teleterm_V1_GetAppResponse> {
        return await self.client.unary(path: "/teleport.lib.teleterm.v1.TerminalService/GetApp", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let updateTshdEventsServerAddress = Connect.MethodSpec(name: "UpdateTshdEventsServerAddress", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let listRootClusters = Connect.MethodSpec(name: "ListRootClusters", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let listLeafClusters = Connect.MethodSpec(name: "ListLeafClusters", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let startHeadlessWatcher = Connect.MethodSpec(name: "StartHeadlessWatcher", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let listDatabaseUsers = Connect.MethodSpec(name: "ListDatabaseUsers", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getServers = Connect.MethodSpec(name: "GetServers", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getAccessRequests = Connect.MethodSpec(name: "GetAccessRequests", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getAccessRequest = Connect.MethodSpec(name: "GetAccessRequest", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let deleteAccessRequest = Connect.MethodSpec(name: "DeleteAccessRequest", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let createAccessRequest = Connect.MethodSpec(name: "CreateAccessRequest", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let reviewAccessRequest = Connect.MethodSpec(name: "ReviewAccessRequest", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getRequestableRoles = Connect.MethodSpec(name: "GetRequestableRoles", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let assumeRole = Connect.MethodSpec(name: "AssumeRole", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let promoteAccessRequest = Connect.MethodSpec(name: "PromoteAccessRequest", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getSuggestedAccessLists = Connect.MethodSpec(name: "GetSuggestedAccessLists", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let listKubernetesResources = Connect.MethodSpec(name: "ListKubernetesResources", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let addCluster = Connect.MethodSpec(name: "AddCluster", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let removeCluster = Connect.MethodSpec(name: "RemoveCluster", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let listGateways = Connect.MethodSpec(name: "ListGateways", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let createGateway = Connect.MethodSpec(name: "CreateGateway", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let removeGateway = Connect.MethodSpec(name: "RemoveGateway", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let setGatewayTargetSubresourceName = Connect.MethodSpec(name: "SetGatewayTargetSubresourceName", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let setGatewayLocalPort = Connect.MethodSpec(name: "SetGatewayLocalPort", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getAuthSettings = Connect.MethodSpec(name: "GetAuthSettings", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getCluster = Connect.MethodSpec(name: "GetCluster", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let login = Connect.MethodSpec(name: "Login", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let loginPasswordless = Connect.MethodSpec(name: "LoginPasswordless", service: "teleport.lib.teleterm.v1.TerminalService", type: .bidirectionalStream)
            public static let logout = Connect.MethodSpec(name: "Logout", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let transferFile = Connect.MethodSpec(name: "TransferFile", service: "teleport.lib.teleterm.v1.TerminalService", type: .serverStream)
            public static let reportUsageEvent = Connect.MethodSpec(name: "ReportUsageEvent", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let updateHeadlessAuthenticationState = Connect.MethodSpec(name: "UpdateHeadlessAuthenticationState", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let createConnectMyComputerRole = Connect.MethodSpec(name: "CreateConnectMyComputerRole", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let createConnectMyComputerNodeToken = Connect.MethodSpec(name: "CreateConnectMyComputerNodeToken", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let waitForConnectMyComputerNodeJoin = Connect.MethodSpec(name: "WaitForConnectMyComputerNodeJoin", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let deleteConnectMyComputerNode = Connect.MethodSpec(name: "DeleteConnectMyComputerNode", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getConnectMyComputerNodeName = Connect.MethodSpec(name: "GetConnectMyComputerNodeName", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let listUnifiedResources = Connect.MethodSpec(name: "ListUnifiedResources", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getUserPreferences = Connect.MethodSpec(name: "GetUserPreferences", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let updateUserPreferences = Connect.MethodSpec(name: "UpdateUserPreferences", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let authenticateWebDevice = Connect.MethodSpec(name: "AuthenticateWebDevice", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
            public static let getApp = Connect.MethodSpec(name: "GetApp", service: "teleport.lib.teleterm.v1.TerminalService", type: .unary)
        }
    }
}
