// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: teleport/accesslist/v1/accesslist_service.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// AccessListService provides CRUD methods for Access List resources.
public protocol Teleport_Accesslist_V1_AccessListServiceClientInterface: Sendable {

    /// GetAccessLists returns a list of all access lists.
    @discardableResult
    func `getAccessLists`(request: Teleport_Accesslist_V1_GetAccessListsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetAccessListsResponse>) -> Void) -> Connect.Cancelable

    /// GetAccessLists returns a list of all access lists.
    @available(iOS 13, *)
    func `getAccessLists`(request: Teleport_Accesslist_V1_GetAccessListsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_GetAccessListsResponse>

    /// ListAccessLists returns a paginated list of all access lists.
    @discardableResult
    func `listAccessLists`(request: Teleport_Accesslist_V1_ListAccessListsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAccessListsResponse>) -> Void) -> Connect.Cancelable

    /// ListAccessLists returns a paginated list of all access lists.
    @available(iOS 13, *)
    func `listAccessLists`(request: Teleport_Accesslist_V1_ListAccessListsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_ListAccessListsResponse>

    /// GetAccessList returns the specified access list resource.
    @discardableResult
    func `getAccessList`(request: Teleport_Accesslist_V1_GetAccessListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessList>) -> Void) -> Connect.Cancelable

    /// GetAccessList returns the specified access list resource.
    @available(iOS 13, *)
    func `getAccessList`(request: Teleport_Accesslist_V1_GetAccessListRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_AccessList>

    /// UpsertAccessList creates or updates an access list resource.
    @discardableResult
    func `upsertAccessList`(request: Teleport_Accesslist_V1_UpsertAccessListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessList>) -> Void) -> Connect.Cancelable

    /// UpsertAccessList creates or updates an access list resource.
    @available(iOS 13, *)
    func `upsertAccessList`(request: Teleport_Accesslist_V1_UpsertAccessListRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_AccessList>

    /// UpdateAccessList updates an access list resource.
    @discardableResult
    func `updateAccessList`(request: Teleport_Accesslist_V1_UpdateAccessListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessList>) -> Void) -> Connect.Cancelable

    /// UpdateAccessList updates an access list resource.
    @available(iOS 13, *)
    func `updateAccessList`(request: Teleport_Accesslist_V1_UpdateAccessListRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_AccessList>

    /// DeleteAccessList hard deletes the specified access list resource.
    @discardableResult
    func `deleteAccessList`(request: Teleport_Accesslist_V1_DeleteAccessListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// DeleteAccessList hard deletes the specified access list resource.
    @available(iOS 13, *)
    func `deleteAccessList`(request: Teleport_Accesslist_V1_DeleteAccessListRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// DeleteAllAccessLists hard deletes all access lists.
    @discardableResult
    func `deleteAllAccessLists`(request: Teleport_Accesslist_V1_DeleteAllAccessListsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// DeleteAllAccessLists hard deletes all access lists.
    @available(iOS 13, *)
    func `deleteAllAccessLists`(request: Teleport_Accesslist_V1_DeleteAllAccessListsRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// GetAccessListsToReview will return access lists that need to be reviewed by
    /// the current user.
    @discardableResult
    func `getAccessListsToReview`(request: Teleport_Accesslist_V1_GetAccessListsToReviewRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>) -> Void) -> Connect.Cancelable

    /// GetAccessListsToReview will return access lists that need to be reviewed by
    /// the current user.
    @available(iOS 13, *)
    func `getAccessListsToReview`(request: Teleport_Accesslist_V1_GetAccessListsToReviewRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>

    /// CountAccessListMembers returns the count of access list members in an
    /// access list.
    @discardableResult
    func `countAccessListMembers`(request: Teleport_Accesslist_V1_CountAccessListMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_CountAccessListMembersResponse>) -> Void) -> Connect.Cancelable

    /// CountAccessListMembers returns the count of access list members in an
    /// access list.
    @available(iOS 13, *)
    func `countAccessListMembers`(request: Teleport_Accesslist_V1_CountAccessListMembersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_CountAccessListMembersResponse>

    /// ListAccessListMembers returns a paginated list of all access list members.
    @discardableResult
    func `listAccessListMembers`(request: Teleport_Accesslist_V1_ListAccessListMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAccessListMembersResponse>) -> Void) -> Connect.Cancelable

    /// ListAccessListMembers returns a paginated list of all access list members.
    @available(iOS 13, *)
    func `listAccessListMembers`(request: Teleport_Accesslist_V1_ListAccessListMembersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_ListAccessListMembersResponse>

    /// ListAllAccessListMembers returns a paginated list of all access list
    /// members for all access lists.
    @discardableResult
    func `listAllAccessListMembers`(request: Teleport_Accesslist_V1_ListAllAccessListMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>) -> Void) -> Connect.Cancelable

    /// ListAllAccessListMembers returns a paginated list of all access list
    /// members for all access lists.
    @available(iOS 13, *)
    func `listAllAccessListMembers`(request: Teleport_Accesslist_V1_ListAllAccessListMembersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>

    /// GetAccessListMember returns the specified access list member resource.
    @discardableResult
    func `getAccessListMember`(request: Teleport_Accesslist_V1_GetAccessListMemberRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_Member>) -> Void) -> Connect.Cancelable

    /// GetAccessListMember returns the specified access list member resource.
    @available(iOS 13, *)
    func `getAccessListMember`(request: Teleport_Accesslist_V1_GetAccessListMemberRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_Member>

    /// GetAccessListOwners returns a list of all owners in an Access List,
    /// including those inherited from nested Access Lists.
    @discardableResult
    func `getAccessListOwners`(request: Teleport_Accesslist_V1_GetAccessListOwnersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetAccessListOwnersResponse>) -> Void) -> Connect.Cancelable

    /// GetAccessListOwners returns a list of all owners in an Access List,
    /// including those inherited from nested Access Lists.
    @available(iOS 13, *)
    func `getAccessListOwners`(request: Teleport_Accesslist_V1_GetAccessListOwnersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_GetAccessListOwnersResponse>

    /// UpsertAccessListMember creates or updates an access list member resource.
    @discardableResult
    func `upsertAccessListMember`(request: Teleport_Accesslist_V1_UpsertAccessListMemberRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_Member>) -> Void) -> Connect.Cancelable

    /// UpsertAccessListMember creates or updates an access list member resource.
    @available(iOS 13, *)
    func `upsertAccessListMember`(request: Teleport_Accesslist_V1_UpsertAccessListMemberRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_Member>

    /// UpdateAccessListMember conditionally updates an access list member resource.
    @discardableResult
    func `updateAccessListMember`(request: Teleport_Accesslist_V1_UpdateAccessListMemberRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_Member>) -> Void) -> Connect.Cancelable

    /// UpdateAccessListMember conditionally updates an access list member resource.
    @available(iOS 13, *)
    func `updateAccessListMember`(request: Teleport_Accesslist_V1_UpdateAccessListMemberRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_Member>

    /// DeleteAccessListMember hard deletes the specified access list member
    /// resource.
    @discardableResult
    func `deleteAccessListMember`(request: Teleport_Accesslist_V1_DeleteAccessListMemberRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// DeleteAccessListMember hard deletes the specified access list member
    /// resource.
    @available(iOS 13, *)
    func `deleteAccessListMember`(request: Teleport_Accesslist_V1_DeleteAccessListMemberRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// DeleteAllAccessListMembers hard deletes all access list members for an
    /// access list.
    @discardableResult
    func `deleteAllAccessListMembersForAccessList`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// DeleteAllAccessListMembers hard deletes all access list members for an
    /// access list.
    @available(iOS 13, *)
    func `deleteAllAccessListMembersForAccessList`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// DeleteAllAccessListMembers hard deletes all access list members for an
    /// access list.
    @discardableResult
    func `deleteAllAccessListMembers`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// DeleteAllAccessListMembers hard deletes all access list members for an
    /// access list.
    @available(iOS 13, *)
    func `deleteAllAccessListMembers`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// UpsertAccessListWithMembers creates or updates an access list with members.
    @discardableResult
    func `upsertAccessListWithMembers`(request: Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>) -> Void) -> Connect.Cancelable

    /// UpsertAccessListWithMembers creates or updates an access list with members.
    @available(iOS 13, *)
    func `upsertAccessListWithMembers`(request: Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>

    /// ListAccessListReviews will list access list reviews for a particular access
    /// list.
    @discardableResult
    func `listAccessListReviews`(request: Teleport_Accesslist_V1_ListAccessListReviewsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAccessListReviewsResponse>) -> Void) -> Connect.Cancelable

    /// ListAccessListReviews will list access list reviews for a particular access
    /// list.
    @available(iOS 13, *)
    func `listAccessListReviews`(request: Teleport_Accesslist_V1_ListAccessListReviewsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_ListAccessListReviewsResponse>

    /// ListAllAccessListReviews will list access list reviews for all access
    /// lists.
    @discardableResult
    func `listAllAccessListReviews`(request: Teleport_Accesslist_V1_ListAllAccessListReviewsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>) -> Void) -> Connect.Cancelable

    /// ListAllAccessListReviews will list access list reviews for all access
    /// lists.
    @available(iOS 13, *)
    func `listAllAccessListReviews`(request: Teleport_Accesslist_V1_ListAllAccessListReviewsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>

    /// CreateAccessListReview will create a new review for an access list. It will
    /// also modify the original access list and its members depending on the
    /// details of the review.
    @discardableResult
    func `createAccessListReview`(request: Teleport_Accesslist_V1_CreateAccessListReviewRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_CreateAccessListReviewResponse>) -> Void) -> Connect.Cancelable

    /// CreateAccessListReview will create a new review for an access list. It will
    /// also modify the original access list and its members depending on the
    /// details of the review.
    @available(iOS 13, *)
    func `createAccessListReview`(request: Teleport_Accesslist_V1_CreateAccessListReviewRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_CreateAccessListReviewResponse>

    /// DeleteAccessListReview will delete an access list review from the backend.
    @discardableResult
    func `deleteAccessListReview`(request: Teleport_Accesslist_V1_DeleteAccessListReviewRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable

    /// DeleteAccessListReview will delete an access list review from the backend.
    @available(iOS 13, *)
    func `deleteAccessListReview`(request: Teleport_Accesslist_V1_DeleteAccessListReviewRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>

    /// AccessRequestPromote promotes an access request to an access list.
    @discardableResult
    func `accessRequestPromote`(request: Teleport_Accesslist_V1_AccessRequestPromoteRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessRequestPromoteResponse>) -> Void) -> Connect.Cancelable

    /// AccessRequestPromote promotes an access request to an access list.
    @available(iOS 13, *)
    func `accessRequestPromote`(request: Teleport_Accesslist_V1_AccessRequestPromoteRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_AccessRequestPromoteResponse>

    /// GetSuggestedAccessLists returns suggested access lists for an access
    /// request.
    @discardableResult
    func `getSuggestedAccessLists`(request: Teleport_Accesslist_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>) -> Void) -> Connect.Cancelable

    /// GetSuggestedAccessLists returns suggested access lists for an access
    /// request.
    @available(iOS 13, *)
    func `getSuggestedAccessLists`(request: Teleport_Accesslist_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>

    /// GetInheritedGrants returns the inherited grants for an access list.
    @discardableResult
    func `getInheritedGrants`(request: Teleport_Accesslist_V1_GetInheritedGrantsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetInheritedGrantsResponse>) -> Void) -> Connect.Cancelable

    /// GetInheritedGrants returns the inherited grants for an access list.
    @available(iOS 13, *)
    func `getInheritedGrants`(request: Teleport_Accesslist_V1_GetInheritedGrantsRequest, headers: Connect.Headers) async -> ResponseMessage<Teleport_Accesslist_V1_GetInheritedGrantsResponse>
}

/// Concrete implementation of `Teleport_Accesslist_V1_AccessListServiceClientInterface`.
public final class Teleport_Accesslist_V1_AccessListServiceClient: Teleport_Accesslist_V1_AccessListServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `getAccessLists`(request: Teleport_Accesslist_V1_GetAccessListsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetAccessListsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessLists", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAccessLists`(request: Teleport_Accesslist_V1_GetAccessListsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_GetAccessListsResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessLists", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listAccessLists`(request: Teleport_Accesslist_V1_ListAccessListsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAccessListsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAccessLists", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listAccessLists`(request: Teleport_Accesslist_V1_ListAccessListsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_ListAccessListsResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAccessLists", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getAccessList`(request: Teleport_Accesslist_V1_GetAccessListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessList>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAccessList`(request: Teleport_Accesslist_V1_GetAccessListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_AccessList> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `upsertAccessList`(request: Teleport_Accesslist_V1_UpsertAccessListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessList>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpsertAccessList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `upsertAccessList`(request: Teleport_Accesslist_V1_UpsertAccessListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_AccessList> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpsertAccessList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateAccessList`(request: Teleport_Accesslist_V1_UpdateAccessListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessList>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpdateAccessList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateAccessList`(request: Teleport_Accesslist_V1_UpdateAccessListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_AccessList> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpdateAccessList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAccessList`(request: Teleport_Accesslist_V1_DeleteAccessListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAccessList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAccessList`(request: Teleport_Accesslist_V1_DeleteAccessListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAccessList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAllAccessLists`(request: Teleport_Accesslist_V1_DeleteAllAccessListsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAllAccessLists", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAllAccessLists`(request: Teleport_Accesslist_V1_DeleteAllAccessListsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAllAccessLists", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getAccessListsToReview`(request: Teleport_Accesslist_V1_GetAccessListsToReviewRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetAccessListsToReviewResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessListsToReview", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAccessListsToReview`(request: Teleport_Accesslist_V1_GetAccessListsToReviewRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_GetAccessListsToReviewResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessListsToReview", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `countAccessListMembers`(request: Teleport_Accesslist_V1_CountAccessListMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_CountAccessListMembersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/CountAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `countAccessListMembers`(request: Teleport_Accesslist_V1_CountAccessListMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_CountAccessListMembersResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/CountAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listAccessListMembers`(request: Teleport_Accesslist_V1_ListAccessListMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAccessListMembersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listAccessListMembers`(request: Teleport_Accesslist_V1_ListAccessListMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_ListAccessListMembersResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listAllAccessListMembers`(request: Teleport_Accesslist_V1_ListAllAccessListMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListMembersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAllAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listAllAccessListMembers`(request: Teleport_Accesslist_V1_ListAllAccessListMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListMembersResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAllAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getAccessListMember`(request: Teleport_Accesslist_V1_GetAccessListMemberRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_Member>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAccessListMember`(request: Teleport_Accesslist_V1_GetAccessListMemberRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_Member> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getAccessListOwners`(request: Teleport_Accesslist_V1_GetAccessListOwnersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetAccessListOwnersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessListOwners", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getAccessListOwners`(request: Teleport_Accesslist_V1_GetAccessListOwnersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_GetAccessListOwnersResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetAccessListOwners", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `upsertAccessListMember`(request: Teleport_Accesslist_V1_UpsertAccessListMemberRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_Member>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpsertAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `upsertAccessListMember`(request: Teleport_Accesslist_V1_UpsertAccessListMemberRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_Member> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpsertAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateAccessListMember`(request: Teleport_Accesslist_V1_UpdateAccessListMemberRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_Member>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpdateAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateAccessListMember`(request: Teleport_Accesslist_V1_UpdateAccessListMemberRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_Member> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpdateAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAccessListMember`(request: Teleport_Accesslist_V1_DeleteAccessListMemberRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAccessListMember`(request: Teleport_Accesslist_V1_DeleteAccessListMemberRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAccessListMember", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAllAccessListMembersForAccessList`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAllAccessListMembersForAccessList", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAllAccessListMembersForAccessList`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersForAccessListRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAllAccessListMembersForAccessList", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAllAccessListMembers`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAllAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAllAccessListMembers`(request: Teleport_Accesslist_V1_DeleteAllAccessListMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAllAccessListMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `upsertAccessListWithMembers`(request: Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpsertAccessListWithMembers", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `upsertAccessListWithMembers`(request: Teleport_Accesslist_V1_UpsertAccessListWithMembersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_UpsertAccessListWithMembersResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/UpsertAccessListWithMembers", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listAccessListReviews`(request: Teleport_Accesslist_V1_ListAccessListReviewsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAccessListReviewsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAccessListReviews", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listAccessListReviews`(request: Teleport_Accesslist_V1_ListAccessListReviewsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_ListAccessListReviewsResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAccessListReviews", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `listAllAccessListReviews`(request: Teleport_Accesslist_V1_ListAllAccessListReviewsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAllAccessListReviews", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `listAllAccessListReviews`(request: Teleport_Accesslist_V1_ListAllAccessListReviewsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_ListAllAccessListReviewsResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/ListAllAccessListReviews", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `createAccessListReview`(request: Teleport_Accesslist_V1_CreateAccessListReviewRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_CreateAccessListReviewResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/CreateAccessListReview", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `createAccessListReview`(request: Teleport_Accesslist_V1_CreateAccessListReviewRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_CreateAccessListReviewResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/CreateAccessListReview", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAccessListReview`(request: Teleport_Accesslist_V1_DeleteAccessListReviewRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAccessListReview", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAccessListReview`(request: Teleport_Accesslist_V1_DeleteAccessListReviewRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/DeleteAccessListReview", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `accessRequestPromote`(request: Teleport_Accesslist_V1_AccessRequestPromoteRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_AccessRequestPromoteResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/AccessRequestPromote", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `accessRequestPromote`(request: Teleport_Accesslist_V1_AccessRequestPromoteRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_AccessRequestPromoteResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/AccessRequestPromote", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getSuggestedAccessLists`(request: Teleport_Accesslist_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetSuggestedAccessLists", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getSuggestedAccessLists`(request: Teleport_Accesslist_V1_GetSuggestedAccessListsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_GetSuggestedAccessListsResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetSuggestedAccessLists", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getInheritedGrants`(request: Teleport_Accesslist_V1_GetInheritedGrantsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Teleport_Accesslist_V1_GetInheritedGrantsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetInheritedGrants", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getInheritedGrants`(request: Teleport_Accesslist_V1_GetInheritedGrantsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Teleport_Accesslist_V1_GetInheritedGrantsResponse> {
        return await self.client.unary(path: "/teleport.accesslist.v1.AccessListService/GetInheritedGrants", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getAccessLists = Connect.MethodSpec(name: "GetAccessLists", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let listAccessLists = Connect.MethodSpec(name: "ListAccessLists", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let getAccessList = Connect.MethodSpec(name: "GetAccessList", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let upsertAccessList = Connect.MethodSpec(name: "UpsertAccessList", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let updateAccessList = Connect.MethodSpec(name: "UpdateAccessList", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let deleteAccessList = Connect.MethodSpec(name: "DeleteAccessList", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let deleteAllAccessLists = Connect.MethodSpec(name: "DeleteAllAccessLists", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let getAccessListsToReview = Connect.MethodSpec(name: "GetAccessListsToReview", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let countAccessListMembers = Connect.MethodSpec(name: "CountAccessListMembers", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let listAccessListMembers = Connect.MethodSpec(name: "ListAccessListMembers", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let listAllAccessListMembers = Connect.MethodSpec(name: "ListAllAccessListMembers", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let getAccessListMember = Connect.MethodSpec(name: "GetAccessListMember", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let getAccessListOwners = Connect.MethodSpec(name: "GetAccessListOwners", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let upsertAccessListMember = Connect.MethodSpec(name: "UpsertAccessListMember", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let updateAccessListMember = Connect.MethodSpec(name: "UpdateAccessListMember", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let deleteAccessListMember = Connect.MethodSpec(name: "DeleteAccessListMember", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let deleteAllAccessListMembersForAccessList = Connect.MethodSpec(name: "DeleteAllAccessListMembersForAccessList", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let deleteAllAccessListMembers = Connect.MethodSpec(name: "DeleteAllAccessListMembers", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let upsertAccessListWithMembers = Connect.MethodSpec(name: "UpsertAccessListWithMembers", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let listAccessListReviews = Connect.MethodSpec(name: "ListAccessListReviews", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let listAllAccessListReviews = Connect.MethodSpec(name: "ListAllAccessListReviews", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let createAccessListReview = Connect.MethodSpec(name: "CreateAccessListReview", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let deleteAccessListReview = Connect.MethodSpec(name: "DeleteAccessListReview", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let accessRequestPromote = Connect.MethodSpec(name: "AccessRequestPromote", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let getSuggestedAccessLists = Connect.MethodSpec(name: "GetSuggestedAccessLists", service: "teleport.accesslist.v1.AccessListService", type: .unary)
            public static let getInheritedGrants = Connect.MethodSpec(name: "GetInheritedGrants", service: "teleport.accesslist.v1.AccessListService", type: .unary)
        }
    }
}
