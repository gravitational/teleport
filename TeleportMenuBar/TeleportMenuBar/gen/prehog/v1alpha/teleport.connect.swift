// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: prehog/v1alpha/teleport.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Prehog_V1alpha_TeleportReportingServiceClientInterface: Sendable {

    /// equivalent to SubmitEvents with a single event, should be unused by now
    @available(iOS, introduced: 12, deprecated: 12, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(macOS, introduced: 10.15, deprecated: 10.15, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(tvOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(watchOS, introduced: 6, deprecated: 6, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @discardableResult
    func `submitEvent`(request: Prehog_V1alpha_SubmitEventRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_SubmitEventResponse>) -> Void) -> Connect.Cancelable

    /// equivalent to SubmitEvents with a single event, should be unused by now
    @available(iOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    func `submitEvent`(request: Prehog_V1alpha_SubmitEventRequest, headers: Connect.Headers) async -> ResponseMessage<Prehog_V1alpha_SubmitEventResponse>

    /// encodes and forwards usage events to the PostHog event database; each
    /// event is annotated with some properties that depend on the identity of the
    /// caller:
    /// - tp.account_id (UUID in string form, can be empty if missing from the
    ///   license)
    /// - tp.license_name (should always be a UUID)
    /// - tp.license_authority (name of the authority that signed the license file
    ///   used for authentication)
    /// - tp.is_cloud (boolean)
    @discardableResult
    func `submitEvents`(request: Prehog_V1alpha_SubmitEventsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_SubmitEventsResponse>) -> Void) -> Connect.Cancelable

    /// encodes and forwards usage events to the PostHog event database; each
    /// event is annotated with some properties that depend on the identity of the
    /// caller:
    /// - tp.account_id (UUID in string form, can be empty if missing from the
    ///   license)
    /// - tp.license_name (should always be a UUID)
    /// - tp.license_authority (name of the authority that signed the license file
    ///   used for authentication)
    /// - tp.is_cloud (boolean)
    @available(iOS 13, *)
    func `submitEvents`(request: Prehog_V1alpha_SubmitEventsRequest, headers: Connect.Headers) async -> ResponseMessage<Prehog_V1alpha_SubmitEventsResponse>

    @discardableResult
    func `helloTeleport`(request: Prehog_V1alpha_HelloTeleportRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_HelloTeleportResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `helloTeleport`(request: Prehog_V1alpha_HelloTeleportRequest, headers: Connect.Headers) async -> ResponseMessage<Prehog_V1alpha_HelloTeleportResponse>
}

/// Concrete implementation of `Prehog_V1alpha_TeleportReportingServiceClientInterface`.
public final class Prehog_V1alpha_TeleportReportingServiceClient: Prehog_V1alpha_TeleportReportingServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS, introduced: 12, deprecated: 12, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(macOS, introduced: 10.15, deprecated: 10.15, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(tvOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @available(watchOS, introduced: 6, deprecated: 6, message: "This RPC has been marked as deprecated in its `.proto` file.")
    @discardableResult
    public func `submitEvent`(request: Prehog_V1alpha_SubmitEventRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_SubmitEventResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/prehog.v1alpha.TeleportReportingService/SubmitEvent", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS, introduced: 13, deprecated: 13, message: "This RPC has been marked as deprecated in its `.proto` file.")
    public func `submitEvent`(request: Prehog_V1alpha_SubmitEventRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Prehog_V1alpha_SubmitEventResponse> {
        return await self.client.unary(path: "/prehog.v1alpha.TeleportReportingService/SubmitEvent", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `submitEvents`(request: Prehog_V1alpha_SubmitEventsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_SubmitEventsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/prehog.v1alpha.TeleportReportingService/SubmitEvents", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `submitEvents`(request: Prehog_V1alpha_SubmitEventsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Prehog_V1alpha_SubmitEventsResponse> {
        return await self.client.unary(path: "/prehog.v1alpha.TeleportReportingService/SubmitEvents", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `helloTeleport`(request: Prehog_V1alpha_HelloTeleportRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_HelloTeleportResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/prehog.v1alpha.TeleportReportingService/HelloTeleport", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `helloTeleport`(request: Prehog_V1alpha_HelloTeleportRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Prehog_V1alpha_HelloTeleportResponse> {
        return await self.client.unary(path: "/prehog.v1alpha.TeleportReportingService/HelloTeleport", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let submitEvent = Connect.MethodSpec(name: "SubmitEvent", service: "prehog.v1alpha.TeleportReportingService", type: .unary)
            public static let submitEvents = Connect.MethodSpec(name: "SubmitEvents", service: "prehog.v1alpha.TeleportReportingService", type: .unary)
            public static let helloTeleport = Connect.MethodSpec(name: "HelloTeleport", service: "prehog.v1alpha.TeleportReportingService", type: .unary)
        }
    }
}
