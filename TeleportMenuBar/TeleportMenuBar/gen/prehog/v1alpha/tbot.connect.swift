// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: prehog/v1alpha/tbot.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Prehog_V1alpha_TbotReportingServiceClientInterface: Sendable {

    @discardableResult
    func `submitTbotEvent`(request: Prehog_V1alpha_SubmitTbotEventRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_SubmitTbotEventResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `submitTbotEvent`(request: Prehog_V1alpha_SubmitTbotEventRequest, headers: Connect.Headers) async -> ResponseMessage<Prehog_V1alpha_SubmitTbotEventResponse>
}

/// Concrete implementation of `Prehog_V1alpha_TbotReportingServiceClientInterface`.
public final class Prehog_V1alpha_TbotReportingServiceClient: Prehog_V1alpha_TbotReportingServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `submitTbotEvent`(request: Prehog_V1alpha_SubmitTbotEventRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Prehog_V1alpha_SubmitTbotEventResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/prehog.v1alpha.TbotReportingService/SubmitTbotEvent", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `submitTbotEvent`(request: Prehog_V1alpha_SubmitTbotEventRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Prehog_V1alpha_SubmitTbotEventResponse> {
        return await self.client.unary(path: "/prehog.v1alpha.TbotReportingService/SubmitTbotEvent", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let submitTbotEvent = Connect.MethodSpec(name: "SubmitTbotEvent", service: "prehog.v1alpha.TbotReportingService", type: .unary)
        }
    }
}
