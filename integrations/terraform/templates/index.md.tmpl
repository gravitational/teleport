---
title: "Teleport Terraform Provider"
description: Reference documentation of the Teleport Terraform provider.
---

{{ "{/*Auto-generated file. Do not edit.*/}" }}
{{ "{/*To regenerate, navigate to integrations/terraform and run `make docs`.*/}" }}

The Teleport Terraform provider allows Terraform users to configure Teleport
from Terraform.

This section is the Teleport Terraform Provider reference.
It lists all the supported resources and their fields.

<Admonition type="tip">
To get started with the Terraform provider, you must start with [the installation
guide](../admin-guides/infrastructure-as-code/terraform-provider.mdx).
Once you got a working provider, we recommend you to follow the
["Managing users and roles with IaC"](
../admin-guides/infrastructure-as-code/managing-resources/user-and-role.mdx) guide.
</Admonition>

The provider exposes Teleport resources both as Terraform data-sources and Terraform resources.
Data-sources are used by Terraform to fetch information from Teleport, while resources are used
to create resources in Teleport.

{/* Note: the awkward `resource-index` file names are here because `data-sources`
is reserved by the generator for the catch-all resource template */}

- [list of supported resources](./terraform-provider/resources.mdx)
- [list of supported data-sources](./terraform-provider/data-sources.mdx)

## Example Usage

<Tabs>
<TabItem label="self-hosted">

{{tffile "./examples/provider/provider.tf" }}

</TabItem>
<TabItem label="cloud">

{{tffile "./examples/provider/provider-cloud.tf" }}

</TabItem>
</Tabs>

## Connection methods

{/* TODO(hugoShaka): Add native MachineID joining and tctl helpers methods here when they will get released */}

### With an identity file

With this connection method, you must provide an identity file.This file allows Terraform to connect both via the Proxy
Service (ports 443 or 3080) and via the Auth Service (port 3025). This is the recommended way of passing credentials to
the Terraform provider.

The identity file can be obtained via several ways:

#### Obtaining an identity file via `tbot`

Tbot relies on [MachineID](../enroll-resources/machine-id/introduction.mdx) to obtain and automatically renew short-lived credentials.
Such credentials are harder to exfiltrate, and you can control more precisely who has access to which roles
(e.g. you can allow only GitHub Actions pipelines targeting the `prod` environment to get certificates).

You can follow [the Terraform Provider guide](../admin-guides/infrastructure-as-code/terraform-provider.mdx) to achieve this setup.

#### Obtaining an identity file via `tctl auth sign`

You can obtain an identity file with the command

```code
$ tctl auth sign --user terraform --format file -o identity.pem
```

This auth method has the following limitations:
- Such credentials are high-privileged and long-lived. They must be protected and rotated.
- This auth method does not work against Teleport clusters with MFA set to `webauthn`.
  On such clusters, Teleport will reject any long-lived certificate and require
  [an additional MFA challenge for administrative actions](../admin-guides/access-controls/guides/mfa-for-admin-actions.mdx).

### With key, certificate, and CA certificate

With this connection method, you must provide a TLS key, a TLS certificate, and the Teleport Auth Service TLS CA certificates.
Those can be obtained with the command:

```code
$ tctl auth sign --user terraform --format=tls -o terraform.pem
```

This auth method has the following limitations:
- The provider can only connect to the Auth directly (port 3025). On most clusters, only the proxy is publicly exposed.
- Such credentials are high-privileged and long-lived. They must be protected and rotated.
- This auth method does not work against Teleport clusters with MFA set to `webauthn`.
  On such clusters, Teleport will reject any long-lived certificate and require
  [an additional MFA challenge for administrative actions](../admin-guides/access-controls/guides/mfa-for-admin-actions.mdx).

{{ .SchemaMarkdown | trimspace }}

