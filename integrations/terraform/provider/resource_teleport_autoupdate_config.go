// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"
	apitypes "github.com/gravitational/teleport/api/types"

	autoupdatev1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/autoupdate/v1"
	headerv1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	schemav1 "github.com/gravitational/teleport/integrations/terraform/tfschema/autoupdate/v1"
)

// resourceTeleportAutoUpdateConfigType is the resource metadata type
type resourceTeleportAutoUpdateConfigType struct{}

// resourceTeleportAutoUpdateConfig is the resource
type resourceTeleportAutoUpdateConfig struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportAutoUpdateConfigType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return schemav1.GenSchemaAutoUpdateConfig(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportAutoUpdateConfigType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportAutoUpdateConfig{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the AutoUpdateConfig
func (r resourceTeleportAutoUpdateConfig) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	autoUpdateConfig := &autoupdatev1.AutoUpdateConfig{}
	diags = schemav1.CopyAutoUpdateConfigFromTerraform(ctx, plan, autoUpdateConfig)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	autoUpdateConfig.Kind = apitypes.KindAutoUpdateConfig

	
	if autoUpdateConfig.GetMetadata() == nil {
		autoUpdateConfig.Metadata = &headerv1.Metadata{}
	}
	if autoUpdateConfig.GetMetadata().GetName() == "" {
		autoUpdateConfig.Metadata.Name = apitypes.MetaNameAutoUpdateConfig
	}

	autoUpdateConfigBefore, err := r.p.Client.GetAutoUpdateConfig(ctx)
	if err != nil && !trace.IsNotFound(err) {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	_, err = r.p.Client.CreateAutoUpdateConfig(ctx, autoUpdateConfig)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	// Not really an inferface, just using the same name for easier templating.
	var autoUpdateConfigI *autoupdatev1.AutoUpdateConfig
	

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		autoUpdateConfigI, err = r.p.Client.GetAutoUpdateConfig(ctx)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
			return
		}

		previousMetadata := autoUpdateConfigBefore.GetMetadata()
		currentMetadata := autoUpdateConfigI.GetMetadata()
		if previousMetadata.GetRevision() != currentMetadata.GetRevision() || false {
			break
		}
		if bErr := backoff.Do(ctx); bErr != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(bErr), "autoupdate_config"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading AutoUpdateConfig (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "autoupdate_config")
			return
		}
	}
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	autoUpdateConfig = autoUpdateConfigI
	

	diags = schemav1.CopyAutoUpdateConfigToTerraform(ctx, autoUpdateConfig, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: autoUpdateConfig.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport AutoUpdateConfig
func (r resourceTeleportAutoUpdateConfig) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	autoUpdateConfigI, err := r.p.Client.GetAutoUpdateConfig(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	autoUpdateConfig := autoUpdateConfigI
	diags = schemav1.CopyAutoUpdateConfigToTerraform(ctx, autoUpdateConfig, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport AutoUpdateConfig
func (r resourceTeleportAutoUpdateConfig) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	autoUpdateConfig := &autoupdatev1.AutoUpdateConfig{}
	diags = schemav1.CopyAutoUpdateConfigFromTerraform(ctx, plan, autoUpdateConfig)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	autoUpdateConfigBefore, err := r.p.Client.GetAutoUpdateConfig(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	_, err = r.p.Client.UpdateAutoUpdateConfig(ctx, autoUpdateConfig)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}
	var autoUpdateConfigI *autoupdatev1.AutoUpdateConfig

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		autoUpdateConfigI, err = r.p.Client.GetAutoUpdateConfig(ctx)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
			return
		}
		if autoUpdateConfigBefore.GetMetadata().Revision != autoUpdateConfigI.GetMetadata().Revision || false {
			break
		}
		if bErr := backoff.Do(ctx); bErr != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(bErr), "autoupdate_config"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading AutoUpdateConfig (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "autoupdate_config")
			return
		}
	}
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	autoUpdateConfig = autoUpdateConfigI

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport AutoUpdateConfig
func (r resourceTeleportAutoUpdateConfig) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	err := r.p.Client.DeleteAutoUpdateConfig(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports AutoUpdateConfig state
func (r resourceTeleportAutoUpdateConfig) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	autoUpdateConfigI, err := r.p.Client.GetAutoUpdateConfig(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}
	autoUpdateConfig := autoUpdateConfigI

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = schemav1.CopyAutoUpdateConfigToTerraform(ctx, autoUpdateConfig, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := autoUpdateConfig.Metadata.Name

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
