// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	apitypes "github.com/gravitational/teleport/api/types"
	
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	"github.com/gravitational/teleport/integrations/terraform/tfschema"
)

// resourceTeleportInstallerType is the resource metadata type
type resourceTeleportInstallerType struct{}

// resourceTeleportInstaller is the resource
type resourceTeleportInstaller struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportInstallerType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaInstallerV1(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportInstallerType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportInstaller{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the Installer
func (r resourceTeleportInstaller) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	installer := &apitypes.InstallerV1{}
	diags = tfschema.CopyInstallerV1FromTerraform(ctx, plan, installer)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	installerResource := installer

	err = installerResource.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error setting Installer defaults", trace.Wrap(err), "installer"))
		return
	}

	id := installerResource.Metadata.Name

	_, err = r.p.Client.GetInstaller(ctx, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("Installer exists in Teleport. Either remove it (tctl rm installer/%v)"+
				" or import it to the existing state (terraform import teleport_installer.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("Installer exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Wrap(err), "installer"))
		return
	}

	err = r.p.Client.SetInstaller(ctx, installerResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating Installer", trace.Wrap(err), "installer"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var installerI apitypes.Installer
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		installerI, err = r.p.Client.GetInstaller(ctx, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Wrap(bErr), "installer"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading Installer (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "installer")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Wrap(err), "installer"))
		return
	}

	installerResource, ok := installerI.(*apitypes.InstallerV1)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Errorf("Can not convert %T to InstallerV1", installerI), "installer"))
		return
	}
	installer = installerResource

	diags = tfschema.CopyInstallerV1ToTerraform(ctx, installer, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: "installer"}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport Installer
func (r resourceTeleportInstaller) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	installerI, err := r.p.Client.GetInstaller(ctx, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Wrap(err), "installer"))
		return
	}
	
	installer := installerI.(*apitypes.InstallerV1)
	diags = tfschema.CopyInstallerV1ToTerraform(ctx, installer, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport Installer
func (r resourceTeleportInstaller) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	installer := &apitypes.InstallerV1{}
	diags = tfschema.CopyInstallerV1FromTerraform(ctx, plan, installer)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	installerResource := installer


	if err := installerResource.CheckAndSetDefaults(); err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating Installer", err, "installer"))
		return
	}
	name := installerResource.Metadata.Name

	installerBefore, err := r.p.Client.GetInstaller(ctx, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", err, "installer"))
		return
	}

	err = r.p.Client.SetInstaller(ctx, installerResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating Installer", err, "installer"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var installerI apitypes.Installer

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		installerI, err = r.p.Client.GetInstaller(ctx, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", err, "installer"))
			return
		}
		if installerBefore.GetMetadata().Revision != installerI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Wrap(err), "installer"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading Installer (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "installer")
			return
		}
	}

	installerResource, ok := installerI.(*apitypes.InstallerV1)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Errorf("Can not convert %T to InstallerV1", installerI), "installer"))
		return
	}
	diags = tfschema.CopyInstallerV1ToTerraform(ctx, installer, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport Installer
func (r resourceTeleportInstaller) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DeleteInstaller(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting InstallerV1", trace.Wrap(err), "installer"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports Installer state
func (r resourceTeleportInstaller) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	installer, err := r.p.Client.GetInstaller(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Installer", trace.Wrap(err), "installer"))
		return
	}

	
	installerResource := installer.(*apitypes.InstallerV1)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopyInstallerV1ToTerraform(ctx, installerResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := installerResource.GetName()

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
