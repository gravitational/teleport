// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"
	apitypes "github.com/gravitational/teleport/api/types"

	accessmonitoringrulesv1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/accessmonitoringrules/v1"
	
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	schemav1 "github.com/gravitational/teleport/integrations/terraform/tfschema/accessmonitoringrules/v1"
)

// resourceTeleportAccessMonitoringRuleType is the resource metadata type
type resourceTeleportAccessMonitoringRuleType struct{}

// resourceTeleportAccessMonitoringRule is the resource
type resourceTeleportAccessMonitoringRule struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportAccessMonitoringRuleType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return schemav1.GenSchemaAccessMonitoringRule(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportAccessMonitoringRuleType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportAccessMonitoringRule{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the AccessMonitoringRule
func (r resourceTeleportAccessMonitoringRule) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	accessMonitoringRule := &accessmonitoringrulesv1.AccessMonitoringRule{}
	diags = schemav1.CopyAccessMonitoringRuleFromTerraform(ctx, plan, accessMonitoringRule)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	accessMonitoringRuleResource := accessMonitoringRule

	accessMonitoringRuleResource.Kind = apitypes.KindAccessMonitoringRule

	id := accessMonitoringRuleResource.Metadata.Name

	_, err = r.p.Client.AccessMonitoringRulesClient().GetAccessMonitoringRule(ctx, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("AccessMonitoringRule exists in Teleport. Either remove it (tctl rm access_monitoring_rule/%v)"+
				" or import it to the existing state (terraform import teleport_access_monitoring_rule.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("AccessMonitoringRule exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", trace.Wrap(err), "access_monitoring_rule"))
		return
	}

	_, err = r.p.Client.AccessMonitoringRulesClient().CreateAccessMonitoringRule(ctx, accessMonitoringRuleResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating AccessMonitoringRule", trace.Wrap(err), "access_monitoring_rule"))
		return
	}
		var accessMonitoringRuleI *accessmonitoringrulesv1.AccessMonitoringRule
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		accessMonitoringRuleI, err = r.p.Client.AccessMonitoringRulesClient().GetAccessMonitoringRule(ctx, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", trace.Wrap(bErr), "access_monitoring_rule"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading AccessMonitoringRule (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "access_monitoring_rule")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", trace.Wrap(err), "access_monitoring_rule"))
		return
	}

	accessMonitoringRuleResource = accessMonitoringRuleI
	
	accessMonitoringRule = accessMonitoringRuleResource

	diags = schemav1.CopyAccessMonitoringRuleToTerraform(ctx, accessMonitoringRule, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: accessMonitoringRule.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport AccessMonitoringRule
func (r resourceTeleportAccessMonitoringRule) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	accessMonitoringRuleI, err := r.p.Client.AccessMonitoringRulesClient().GetAccessMonitoringRule(ctx, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", trace.Wrap(err), "access_monitoring_rule"))
		return
	}
	accessMonitoringRule := accessMonitoringRuleI
	diags = schemav1.CopyAccessMonitoringRuleToTerraform(ctx, accessMonitoringRule, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport AccessMonitoringRule
func (r resourceTeleportAccessMonitoringRule) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	accessMonitoringRule := &accessmonitoringrulesv1.AccessMonitoringRule{}
	diags = schemav1.CopyAccessMonitoringRuleFromTerraform(ctx, plan, accessMonitoringRule)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	accessMonitoringRuleResource := accessMonitoringRule


	
	name := accessMonitoringRuleResource.Metadata.Name

	accessMonitoringRuleBefore, err := r.p.Client.AccessMonitoringRulesClient().GetAccessMonitoringRule(ctx, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", err, "access_monitoring_rule"))
		return
	}

	_, err = r.p.Client.AccessMonitoringRulesClient().UpdateAccessMonitoringRule(ctx, accessMonitoringRuleResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating AccessMonitoringRule", err, "access_monitoring_rule"))
		return
	}
		var accessMonitoringRuleI *accessmonitoringrulesv1.AccessMonitoringRule

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		accessMonitoringRuleI, err = r.p.Client.AccessMonitoringRulesClient().GetAccessMonitoringRule(ctx, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", err, "access_monitoring_rule"))
			return
		}
		if accessMonitoringRuleBefore.GetMetadata().Revision != accessMonitoringRuleI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", trace.Wrap(err), "access_monitoring_rule"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading AccessMonitoringRule (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "access_monitoring_rule")
			return
		}
	}

	accessMonitoringRuleResource = accessMonitoringRuleI
	
	diags = schemav1.CopyAccessMonitoringRuleToTerraform(ctx, accessMonitoringRule, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport AccessMonitoringRule
func (r resourceTeleportAccessMonitoringRule) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.AccessMonitoringRulesClient().DeleteAccessMonitoringRule(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting AccessMonitoringRule", trace.Wrap(err), "access_monitoring_rule"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports AccessMonitoringRule state
func (r resourceTeleportAccessMonitoringRule) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	accessMonitoringRule, err := r.p.Client.AccessMonitoringRulesClient().GetAccessMonitoringRule(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AccessMonitoringRule", trace.Wrap(err), "access_monitoring_rule"))
		return
	}

	accessMonitoringRuleResource := accessMonitoringRule
	

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = schemav1.CopyAccessMonitoringRuleToTerraform(ctx, accessMonitoringRuleResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := accessMonitoringRule.Metadata.Name

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
