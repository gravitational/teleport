// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	workloadidentityv1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1"
	
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	schemav1 "github.com/gravitational/teleport/integrations/terraform/tfschema/workloadidentity/v1"
)

// resourceTeleportWorkloadIdentityType is the resource metadata type
type resourceTeleportWorkloadIdentityType struct{}

// resourceTeleportWorkloadIdentity is the resource
type resourceTeleportWorkloadIdentity struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportWorkloadIdentityType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return schemav1.GenSchemaWorkloadIdentity(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportWorkloadIdentityType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportWorkloadIdentity{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the WorkloadIdentity
func (r resourceTeleportWorkloadIdentity) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	workloadIdentity := &workloadidentityv1.WorkloadIdentity{}
	diags = schemav1.CopyWorkloadIdentityFromTerraform(ctx, plan, workloadIdentity)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	workloadIdentityResource := workloadIdentity

	workloadIdentityResource.Kind = "workload_identity"

	id := workloadIdentityResource.Metadata.Name

	_, err = r.p.Client.WorkloadIdentityResourceServiceClient().GetWorkloadIdentity(ctx, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("WorkloadIdentity exists in Teleport. Either remove it (tctl rm workload_identity/%v)"+
				" or import it to the existing state (terraform import teleport_workload_identity.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("WorkloadIdentity exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", trace.Wrap(err), "workload_identity"))
		return
	}

	_, err = r.p.Client.WorkloadIdentityResourceServiceClient().CreateWorkloadIdentity(ctx, workloadIdentityResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating WorkloadIdentity", trace.Wrap(err), "workload_identity"))
		return
	}
		var workloadIdentityI *workloadidentityv1.WorkloadIdentity
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		workloadIdentityI, err = r.p.Client.WorkloadIdentityResourceServiceClient().GetWorkloadIdentity(ctx, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", trace.Wrap(bErr), "workload_identity"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading WorkloadIdentity (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "workload_identity")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", trace.Wrap(err), "workload_identity"))
		return
	}

	workloadIdentityResource = workloadIdentityI
	
	workloadIdentity = workloadIdentityResource

	diags = schemav1.CopyWorkloadIdentityToTerraform(ctx, workloadIdentity, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: workloadIdentity.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport WorkloadIdentity
func (r resourceTeleportWorkloadIdentity) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	workloadIdentityI, err := r.p.Client.WorkloadIdentityResourceServiceClient().GetWorkloadIdentity(ctx, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", trace.Wrap(err), "workload_identity"))
		return
	}
	workloadIdentity := workloadIdentityI
	diags = schemav1.CopyWorkloadIdentityToTerraform(ctx, workloadIdentity, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport WorkloadIdentity
func (r resourceTeleportWorkloadIdentity) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	workloadIdentity := &workloadidentityv1.WorkloadIdentity{}
	diags = schemav1.CopyWorkloadIdentityFromTerraform(ctx, plan, workloadIdentity)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	workloadIdentityResource := workloadIdentity


	
	name := workloadIdentityResource.Metadata.Name

	workloadIdentityBefore, err := r.p.Client.WorkloadIdentityResourceServiceClient().GetWorkloadIdentity(ctx, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", err, "workload_identity"))
		return
	}

	_, err = r.p.Client.WorkloadIdentityResourceServiceClient().UpsertWorkloadIdentity(ctx, workloadIdentityResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating WorkloadIdentity", err, "workload_identity"))
		return
	}
		var workloadIdentityI *workloadidentityv1.WorkloadIdentity

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		workloadIdentityI, err = r.p.Client.WorkloadIdentityResourceServiceClient().GetWorkloadIdentity(ctx, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", err, "workload_identity"))
			return
		}
		if workloadIdentityBefore.GetMetadata().Revision != workloadIdentityI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", trace.Wrap(err), "workload_identity"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading WorkloadIdentity (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "workload_identity")
			return
		}
	}

	workloadIdentityResource = workloadIdentityI
	
	diags = schemav1.CopyWorkloadIdentityToTerraform(ctx, workloadIdentity, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport WorkloadIdentity
func (r resourceTeleportWorkloadIdentity) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.WorkloadIdentityResourceServiceClient().DeleteWorkloadIdentity(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting WorkloadIdentity", trace.Wrap(err), "workload_identity"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports WorkloadIdentity state
func (r resourceTeleportWorkloadIdentity) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	workloadIdentity, err := r.p.Client.WorkloadIdentityResourceServiceClient().GetWorkloadIdentity(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading WorkloadIdentity", trace.Wrap(err), "workload_identity"))
		return
	}

	workloadIdentityResource := workloadIdentity
	

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = schemav1.CopyWorkloadIdentityToTerraform(ctx, workloadIdentityResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := workloadIdentity.Metadata.Name

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
