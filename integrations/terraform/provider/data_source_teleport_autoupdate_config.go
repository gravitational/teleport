// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"

	
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"

	schemav1 "github.com/gravitational/teleport/integrations/terraform/tfschema/autoupdate/v1"
)

// dataSourceTeleportAutoUpdateConfigType is the data source metadata type
type dataSourceTeleportAutoUpdateConfigType struct{}

// dataSourceTeleportAutoUpdateConfig is the resource
type dataSourceTeleportAutoUpdateConfig struct {
	p Provider
}

// GetSchema returns the data source schema
func (r dataSourceTeleportAutoUpdateConfigType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return schemav1.GenSchemaAutoUpdateConfig(ctx)
}

// NewDataSource creates the empty data source
func (r dataSourceTeleportAutoUpdateConfigType) NewDataSource(_ context.Context, p tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	return dataSourceTeleportAutoUpdateConfig{
		p: *(p.(*Provider)),
	}, nil
}

// Read reads teleport AutoUpdateConfig
func (r dataSourceTeleportAutoUpdateConfig) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	autoUpdateConfigI, err := r.p.Client.GetAutoUpdateConfig(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading AutoUpdateConfig", trace.Wrap(err), "autoupdate_config"))
		return
	}

	var state types.Object
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	autoUpdateConfig := autoUpdateConfigI
	diags := schemav1.CopyAutoUpdateConfigToTerraform(ctx, autoUpdateConfig, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Todo: Remove after updating terraform-plugin to >=v1.5.0.
	// terraform-plugin-testing version <1.5.0 requires data resources to
	// implement the 'id' attribute.
	// https://developer.hashicorp.com/terraform/plugin/framework/acctests#no-id-found-in-attributes
	v, ok := state.Attrs["id"]
	if !ok || v.IsNull() {
		id := autoUpdateConfig.Metadata.Name
		state.Attrs["id"] = types.String{Value: id}
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
