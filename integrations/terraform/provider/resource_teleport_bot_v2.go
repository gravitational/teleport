// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	machineidv1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/machineid/v1"
	
	"github.com/gravitational/teleport/api/utils/retryutils"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"

	schemav1 "github.com/gravitational/teleport/integrations/terraform/tfschema/machineid/v1"
)

// resourceTeleportBotType is the resource metadata type
type resourceTeleportBotType struct{}

// resourceTeleportBot is the resource
type resourceTeleportBot struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportBotType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return schemav1.GenSchemaBot(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportBotType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportBot{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the Bot
func (r resourceTeleportBot) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	bot := &machineidv1.Bot{}
	diags = schemav1.CopyBotFromTerraform(ctx, plan, bot)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	botResource := bot

	botResource.Kind = "bot"

	id := botResource.Metadata.Name

	_, err = r.p.Client.GetBot(ctx, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("Bot exists in Teleport. Either remove it (tctl rm bot/%v)"+
				" or import it to the existing state (terraform import teleport_bot_v2.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("Bot exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", trace.Wrap(err), "bot"))
		return
	}

	_, err = r.p.Client.CreateBot(ctx, botResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating Bot", trace.Wrap(err), "bot"))
		return
	}
		var botI *machineidv1.Bot
	// Try getting the resource until it exists.
	tries := 0
	retry, err := retryutils.NewRetryV2(retryutils.RetryV2Config{
		Driver: retryutils.NewExponentialDriver(r.p.RetryConfig.Base),
		First:  r.p.RetryConfig.Base,
		Max:    r.p.RetryConfig.Cap,
		Jitter: retryutils.HalfJitter,
	})
	if err != nil {
		return
	}
	for {
		tries = tries + 1
		botI, err = r.p.Client.GetBot(ctx, id)
		if trace.IsNotFound(err) {
		    select {
			case <-ctx.Done():
			    resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", trace.Wrap(ctx.Err()), "bot"))
				return
			case <-retry.After():
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading Bot (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "bot")
				return
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", trace.Wrap(err), "bot"))
		return
	}

	botResource = botI
	
	bot = botResource

	diags = schemav1.CopyBotToTerraform(ctx, bot, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: bot.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport Bot
func (r resourceTeleportBot) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	botI, err := r.p.Client.GetBot(ctx, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", trace.Wrap(err), "bot"))
		return
	}
	bot := botI
	diags = schemav1.CopyBotToTerraform(ctx, bot, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport Bot
func (r resourceTeleportBot) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	bot := &machineidv1.Bot{}
	diags = schemav1.CopyBotFromTerraform(ctx, plan, bot)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	botResource := bot


	
	name := botResource.Metadata.Name

	botBefore, err := r.p.Client.GetBot(ctx, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", err, "bot"))
		return
	}

	_, err = r.p.Client.UpsertBot(ctx, botResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating Bot", err, "bot"))
		return
	}
		var botI *machineidv1.Bot

	tries := 0
	retry, err := retryutils.NewRetryV2(retryutils.RetryV2Config{
		Driver: retryutils.NewExponentialDriver(r.p.RetryConfig.Base),
		First:  r.p.RetryConfig.Base,
		Max:    r.p.RetryConfig.Cap,
		Jitter: retryutils.HalfJitter,
	})
	if err != nil {
		return
	}
	for {
		tries = tries + 1
		botI, err = r.p.Client.GetBot(ctx, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", err, "bot"))
			return
		}
		if botBefore.GetMetadata().Revision != botI.GetMetadata().Revision || false {
			break
		}

		select {
		case <-ctx.Done():
		    resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", trace.Wrap(ctx.Err()), "bot"))
			return
		case <-retry.After():
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading Bot (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "bot")
			return
		}
	}

	botResource = botI
	
	diags = schemav1.CopyBotToTerraform(ctx, bot, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport Bot
func (r resourceTeleportBot) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DeleteBot(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting Bot", trace.Wrap(err), "bot"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports Bot state
func (r resourceTeleportBot) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	bot, err := r.p.Client.GetBot(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Bot", trace.Wrap(err), "bot"))
		return
	}

	botResource := bot
	

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = schemav1.CopyBotToTerraform(ctx, botResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := bot.Metadata.Name

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
