// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	apitypes "github.com/gravitational/teleport/api/types"
	
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	"github.com/gravitational/teleport/integrations/terraform/tfschema"
)

// resourceTeleportSAMLIdPServiceProviderType is the resource metadata type
type resourceTeleportSAMLIdPServiceProviderType struct{}

// resourceTeleportSAMLIdPServiceProvider is the resource
type resourceTeleportSAMLIdPServiceProvider struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportSAMLIdPServiceProviderType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaSAMLIdPServiceProviderV1(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportSAMLIdPServiceProviderType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportSAMLIdPServiceProvider{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the SAMLIdPServiceProvider
func (r resourceTeleportSAMLIdPServiceProvider) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	samlIdpServiceProvider := &apitypes.SAMLIdPServiceProviderV1{}
	diags = tfschema.CopySAMLIdPServiceProviderV1FromTerraform(ctx, plan, samlIdpServiceProvider)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	samlIdpServiceProviderResource := samlIdpServiceProvider

	err = samlIdpServiceProviderResource.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error setting SAMLIdPServiceProvider defaults", trace.Wrap(err), "saml"))
		return
	}

	id := samlIdpServiceProviderResource.Metadata.Name

	_, err = r.p.Client.GetSAMLIdPServiceProvider(ctx, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("SAMLIdPServiceProvider exists in Teleport. Either remove it (tctl rm saml/%v)"+
				" or import it to the existing state (terraform import teleport_saml_idp_service_provider.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("SAMLIdPServiceProvider exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Wrap(err), "saml"))
		return
	}

	err = r.p.Client.CreateSAMLIdPServiceProvider(ctx, samlIdpServiceProviderResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating SAMLIdPServiceProvider", trace.Wrap(err), "saml"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var samlIdpServiceProviderI apitypes.SAMLIdPServiceProvider
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		samlIdpServiceProviderI, err = r.p.Client.GetSAMLIdPServiceProvider(ctx, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Wrap(bErr), "saml"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading SAMLIdPServiceProvider (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "saml")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Wrap(err), "saml"))
		return
	}

	samlIdpServiceProviderResource, ok := samlIdpServiceProviderI.(*apitypes.SAMLIdPServiceProviderV1)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Errorf("Can not convert %T to SAMLIdPServiceProviderV1", samlIdpServiceProviderI), "saml"))
		return
	}
	samlIdpServiceProvider = samlIdpServiceProviderResource

	diags = tfschema.CopySAMLIdPServiceProviderV1ToTerraform(ctx, samlIdpServiceProvider, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: samlIdpServiceProvider.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport SAMLIdPServiceProvider
func (r resourceTeleportSAMLIdPServiceProvider) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	samlIdpServiceProviderI, err := r.p.Client.GetSAMLIdPServiceProvider(ctx, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Wrap(err), "saml"))
		return
	}
	
	samlIdpServiceProvider := samlIdpServiceProviderI.(*apitypes.SAMLIdPServiceProviderV1)
	diags = tfschema.CopySAMLIdPServiceProviderV1ToTerraform(ctx, samlIdpServiceProvider, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport SAMLIdPServiceProvider
func (r resourceTeleportSAMLIdPServiceProvider) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	samlIdpServiceProvider := &apitypes.SAMLIdPServiceProviderV1{}
	diags = tfschema.CopySAMLIdPServiceProviderV1FromTerraform(ctx, plan, samlIdpServiceProvider)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	samlIdpServiceProviderResource := samlIdpServiceProvider


	if err := samlIdpServiceProviderResource.CheckAndSetDefaults(); err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating SAMLIdPServiceProvider", err, "saml"))
		return
	}
	name := samlIdpServiceProviderResource.Metadata.Name

	samlIdpServiceProviderBefore, err := r.p.Client.GetSAMLIdPServiceProvider(ctx, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", err, "saml"))
		return
	}

	err = r.p.Client.UpdateSAMLIdPServiceProvider(ctx, samlIdpServiceProviderResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating SAMLIdPServiceProvider", err, "saml"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var samlIdpServiceProviderI apitypes.SAMLIdPServiceProvider

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		samlIdpServiceProviderI, err = r.p.Client.GetSAMLIdPServiceProvider(ctx, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", err, "saml"))
			return
		}
		if samlIdpServiceProviderBefore.GetMetadata().Revision != samlIdpServiceProviderI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Wrap(err), "saml"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading SAMLIdPServiceProvider (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "saml")
			return
		}
	}

	samlIdpServiceProviderResource, ok := samlIdpServiceProviderI.(*apitypes.SAMLIdPServiceProviderV1)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Errorf("Can not convert %T to SAMLIdPServiceProviderV1", samlIdpServiceProviderI), "saml"))
		return
	}
	diags = tfschema.CopySAMLIdPServiceProviderV1ToTerraform(ctx, samlIdpServiceProvider, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport SAMLIdPServiceProvider
func (r resourceTeleportSAMLIdPServiceProvider) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DeleteSAMLIdPServiceProvider(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting SAMLIdPServiceProviderV1", trace.Wrap(err), "saml"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports SAMLIdPServiceProvider state
func (r resourceTeleportSAMLIdPServiceProvider) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	samlIdpServiceProvider, err := r.p.Client.GetSAMLIdPServiceProvider(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading SAMLIdPServiceProvider", trace.Wrap(err), "saml"))
		return
	}

	
	samlIdpServiceProviderResource := samlIdpServiceProvider.(*apitypes.SAMLIdPServiceProviderV1)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopySAMLIdPServiceProviderV1ToTerraform(ctx, samlIdpServiceProviderResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := samlIdpServiceProviderResource.GetName()

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
