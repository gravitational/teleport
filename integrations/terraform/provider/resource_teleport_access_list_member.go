// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	accesslist "github.com/gravitational/teleport/api/gen/proto/go/teleport/accesslist/v1"
	convert "github.com/gravitational/teleport/api/types/accesslist/convert/v1"
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	schemav1 "github.com/gravitational/teleport/integrations/terraform/tfschema/accesslist/v1"
)

// resourceTeleportMemberType is the resource metadata type
type resourceTeleportMemberType struct{}

// resourceTeleportMember is the resource
type resourceTeleportMember struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportMemberType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return schemav1.GenSchemaMember(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportMemberType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportMember{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the Member
func (r resourceTeleportMember) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	accessListMember := &accesslist.Member{}
	diags = schemav1.CopyMemberFromTerraform(ctx, plan, accessListMember)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	accessListMemberResource, err := convert.FromMemberProto(accessListMember)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Errorf("Can not convert %T to Member: %s", accessListMemberResource, err), "access_list_member"))
		return
	}
	err = accessListMemberResource.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error setting Member defaults", trace.Wrap(err), "access_list_member"))
		return
	}

	idPrefix := accessListMemberResource.Spec.AccessList
	id := accessListMemberResource.Metadata.Name

	_, err = r.p.Client.AccessListClient().GetStaticAccessListMember(ctx, idPrefix, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			id := formatID(idPrefix, id)
			existErr := fmt.Sprintf("Member exists in Teleport. Either remove it (tctl rm access_list_member/%v)"+
				" or import it to the existing state (terraform import teleport_access_list_member.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("Member exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Wrap(err), "access_list_member"))
		return
	}

	_, err = r.p.Client.AccessListClient().UpsertStaticAccessListMember(ctx, accessListMemberResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating Member", trace.Wrap(err), "access_list_member"))
		return
	}
		var accessListMemberI = accessListMemberResource
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		accessListMemberI, err = r.p.Client.AccessListClient().GetStaticAccessListMember(ctx, idPrefix, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Wrap(bErr), "access_list_member"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading Member (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "access_list_member")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Wrap(err), "access_list_member"))
		return
	}

	accessListMemberResource = accessListMemberI
	
	accessListMember = convert.ToMemberProto(accessListMemberResource)
	

	diags = schemav1.CopyMemberToTerraform(ctx, accessListMember, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: formatID(idPrefix, accessListMember.Header.Metadata.Name)}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport Member
func (r resourceTeleportMember) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var idPrefix types.String
	diags = req.State.GetAttribute(ctx, path.Root("spec").AtName("access_list"), &idPrefix)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("header").AtName("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	accessListMemberI, err := r.p.Client.AccessListClient().GetStaticAccessListMember(ctx, idPrefix.Value, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Wrap(err), "access_list_member"))
		return
	}
	accessListMember := convert.ToMemberProto(accessListMemberI)
	diags = schemav1.CopyMemberToTerraform(ctx, accessListMember, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport Member
func (r resourceTeleportMember) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	accessListMember := &accesslist.Member{}
	diags = schemav1.CopyMemberFromTerraform(ctx, plan, accessListMember)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	accessListMemberResource, err := convert.FromMemberProto(accessListMember)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Errorf("Can not convert %T to Member: %s", accessListMemberResource, err), "access_list_member"))
		return
	}

	if err := accessListMemberResource.CheckAndSetDefaults(); err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating Member", err, "access_list_member"))
		return
	}
	idPrefix := accessListMemberResource.Spec.AccessList
	name := accessListMemberResource.Metadata.Name

	accessListMemberBefore, err := r.p.Client.AccessListClient().GetStaticAccessListMember(ctx, idPrefix, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", err, "access_list_member"))
		return
	}
	accessListMemberResource.Spec.AddedBy = accessListMemberBefore.Spec.AddedBy
	accessListMemberResource.Spec.Joined = accessListMemberBefore.Spec.Joined
	accessListMemberResource.Spec.MembershipKind = accessListMemberBefore.Spec.MembershipKind
	accessListMemberResource.Spec.Name = accessListMemberBefore.Spec.Name
	accessListMemberResource.Spec.AccessList = accessListMemberBefore.Spec.AccessList

	_, err = r.p.Client.AccessListClient().UpsertStaticAccessListMember(ctx, accessListMemberResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating Member", err, "access_list_member"))
		return
	}
		var accessListMemberI = accessListMemberResource

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		accessListMemberI, err = r.p.Client.AccessListClient().GetStaticAccessListMember(ctx, idPrefix, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", err, "access_list_member"))
			return
		}
		if accessListMemberBefore.GetMetadata().Revision != accessListMemberI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Wrap(err), "access_list_member"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading Member (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "access_list_member")
			return
		}
	}

	accessListMemberResource = accessListMemberI
	
	diags = schemav1.CopyMemberToTerraform(ctx, accessListMember, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport Member
func (r resourceTeleportMember) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var idPrefix types.String
	diags := req.State.GetAttribute(ctx, path.Root("spec").AtName("access_list"), &idPrefix)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("header").AtName("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.AccessListClient().DeleteStaticAccessListMember(ctx, idPrefix.Value, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting Member", trace.Wrap(err), "access_list_member"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports Member state
func (r resourceTeleportMember) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	idPrefix, name, err := parseID(req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error parsing Member ID", trace.Wrap(err), "access_list_member"))
		return
	}
	accessListMember, err := r.p.Client.AccessListClient().GetStaticAccessListMember(ctx, idPrefix, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Member", trace.Wrap(err), "access_list_member"))
		return
	}

	accessListMemberResource := convert.ToMemberProto(accessListMember)
	

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = schemav1.CopyMemberToTerraform(ctx, accessListMemberResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := req.ID

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
