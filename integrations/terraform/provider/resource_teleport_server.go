// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	apitypes "github.com/gravitational/teleport/api/types"
	
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"
	"github.com/gravitational/teleport/api/defaults"

	"github.com/gravitational/teleport/integrations/terraform/tfschema"
)

// resourceTeleportServerType is the resource metadata type
type resourceTeleportServerType struct{}

// resourceTeleportServer is the resource
type resourceTeleportServer struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportServerType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaServerV2(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportServerType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportServer{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the Server
func (r resourceTeleportServer) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	server := &apitypes.ServerV2{}
	diags = tfschema.CopyServerV2FromTerraform(ctx, plan, server)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	serverResource := server

	serverResource.Kind = apitypes.KindNode
	err = serverResource.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error setting Server defaults", trace.Wrap(err), "node"))
		return
	}

	id := serverResource.Metadata.Name

	_, err = r.p.Client.GetNode(ctx, defaults.Namespace, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("Server exists in Teleport. Either remove it (tctl rm node/%v)"+
				" or import it to the existing state (terraform import teleport_server.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("Server exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Wrap(err), "node"))
		return
	}

	_, err = r.p.Client.UpsertNode(ctx, serverResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating Server", trace.Wrap(err), "node"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var serverI apitypes.Server
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		serverI, err = r.p.Client.GetNode(ctx, defaults.Namespace, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Wrap(bErr), "node"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading Server (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "node")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Wrap(err), "node"))
		return
	}

	serverResource, ok := serverI.(*apitypes.ServerV2)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Errorf("Can not convert %T to ServerV2", serverI), "node"))
		return
	}
	server = serverResource

	diags = tfschema.CopyServerV2ToTerraform(ctx, server, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: server.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport Server
func (r resourceTeleportServer) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	serverI, err := r.p.Client.GetNode(ctx, defaults.Namespace, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Wrap(err), "node"))
		return
	}
	
	server := serverI.(*apitypes.ServerV2)
	diags = tfschema.CopyServerV2ToTerraform(ctx, server, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport Server
func (r resourceTeleportServer) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	server := &apitypes.ServerV2{}
	diags = tfschema.CopyServerV2FromTerraform(ctx, plan, server)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	serverResource := server


	if err := serverResource.CheckAndSetDefaults(); err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating Server", err, "node"))
		return
	}
	name := serverResource.Metadata.Name

	serverBefore, err := r.p.Client.GetNode(ctx, defaults.Namespace, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", err, "node"))
		return
	}

	_, err = r.p.Client.UpsertNode(ctx, serverResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating Server", err, "node"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var serverI apitypes.Server

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		serverI, err = r.p.Client.GetNode(ctx, defaults.Namespace, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", err, "node"))
			return
		}
		if serverBefore.GetMetadata().Revision != serverI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Wrap(err), "node"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading Server (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "node")
			return
		}
	}

	serverResource, ok := serverI.(*apitypes.ServerV2)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Errorf("Can not convert %T to ServerV2", serverI), "node"))
		return
	}
	diags = tfschema.CopyServerV2ToTerraform(ctx, server, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport Server
func (r resourceTeleportServer) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DeleteNode(ctx, defaults.Namespace, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting ServerV2", trace.Wrap(err), "node"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports Server state
func (r resourceTeleportServer) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	server, err := r.p.Client.GetNode(ctx, defaults.Namespace, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading Server", trace.Wrap(err), "node"))
		return
	}

	
	serverResource := server.(*apitypes.ServerV2)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopyServerV2ToTerraform(ctx, serverResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := serverResource.GetName()

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
