// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"
	apitypes "github.com/gravitational/teleport/api/types"

	healthcheckconfigv1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/healthcheckconfig/v1"
	
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	schemav1 "github.com/gravitational/teleport/integrations/terraform/tfschema/healthcheckconfig/v1"
)

// resourceTeleportHealthCheckConfigType is the resource metadata type
type resourceTeleportHealthCheckConfigType struct{}

// resourceTeleportHealthCheckConfig is the resource
type resourceTeleportHealthCheckConfig struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportHealthCheckConfigType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return schemav1.GenSchemaHealthCheckConfig(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportHealthCheckConfigType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportHealthCheckConfig{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the HealthCheckConfig
func (r resourceTeleportHealthCheckConfig) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	healthCheckConfig := &healthcheckconfigv1.HealthCheckConfig{}
	diags = schemav1.CopyHealthCheckConfigFromTerraform(ctx, plan, healthCheckConfig)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	healthCheckConfigResource := healthCheckConfig

	healthCheckConfigResource.Kind = apitypes.KindHealthCheckConfig

	id := healthCheckConfigResource.Metadata.Name

	_, err = r.p.Client.GetHealthCheckConfig(ctx, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("HealthCheckConfig exists in Teleport. Either remove it (tctl rm health_check_config/%v)"+
				" or import it to the existing state (terraform import teleport_health_check_config.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("HealthCheckConfig exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", trace.Wrap(err), "health_check_config"))
		return
	}

	_, err = r.p.Client.CreateHealthCheckConfig(ctx, healthCheckConfigResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating HealthCheckConfig", trace.Wrap(err), "health_check_config"))
		return
	}
		var healthCheckConfigI *healthcheckconfigv1.HealthCheckConfig
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		healthCheckConfigI, err = r.p.Client.GetHealthCheckConfig(ctx, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", trace.Wrap(bErr), "health_check_config"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading HealthCheckConfig (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "health_check_config")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", trace.Wrap(err), "health_check_config"))
		return
	}

	healthCheckConfigResource = healthCheckConfigI
	
	healthCheckConfig = healthCheckConfigResource

	diags = schemav1.CopyHealthCheckConfigToTerraform(ctx, healthCheckConfig, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: healthCheckConfig.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport HealthCheckConfig
func (r resourceTeleportHealthCheckConfig) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	healthCheckConfigI, err := r.p.Client.GetHealthCheckConfig(ctx, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", trace.Wrap(err), "health_check_config"))
		return
	}
	healthCheckConfig := healthCheckConfigI
	diags = schemav1.CopyHealthCheckConfigToTerraform(ctx, healthCheckConfig, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport HealthCheckConfig
func (r resourceTeleportHealthCheckConfig) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	healthCheckConfig := &healthcheckconfigv1.HealthCheckConfig{}
	diags = schemav1.CopyHealthCheckConfigFromTerraform(ctx, plan, healthCheckConfig)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	healthCheckConfigResource := healthCheckConfig


	
	name := healthCheckConfigResource.Metadata.Name

	healthCheckConfigBefore, err := r.p.Client.GetHealthCheckConfig(ctx, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", err, "health_check_config"))
		return
	}

	_, err = r.p.Client.UpsertHealthCheckConfig(ctx, healthCheckConfigResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating HealthCheckConfig", err, "health_check_config"))
		return
	}
		var healthCheckConfigI *healthcheckconfigv1.HealthCheckConfig

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		healthCheckConfigI, err = r.p.Client.GetHealthCheckConfig(ctx, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", err, "health_check_config"))
			return
		}
		if healthCheckConfigBefore.GetMetadata().Revision != healthCheckConfigI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", trace.Wrap(err), "health_check_config"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading HealthCheckConfig (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "health_check_config")
			return
		}
	}

	healthCheckConfigResource = healthCheckConfigI
	
	diags = schemav1.CopyHealthCheckConfigToTerraform(ctx, healthCheckConfig, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport HealthCheckConfig
func (r resourceTeleportHealthCheckConfig) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DeleteHealthCheckConfig(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting HealthCheckConfig", trace.Wrap(err), "health_check_config"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports HealthCheckConfig state
func (r resourceTeleportHealthCheckConfig) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	healthCheckConfig, err := r.p.Client.GetHealthCheckConfig(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading HealthCheckConfig", trace.Wrap(err), "health_check_config"))
		return
	}

	healthCheckConfigResource := healthCheckConfig
	

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = schemav1.CopyHealthCheckConfigToTerraform(ctx, healthCheckConfigResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := healthCheckConfig.Metadata.Name

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
