// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2024 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	apitypes "github.com/gravitational/teleport/api/types"
	
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/jonboulle/clockwork"

	"github.com/gravitational/teleport/integrations/terraform/tfschema"
)

// resourceTeleportDynamicWindowsDesktopType is the resource metadata type
type resourceTeleportDynamicWindowsDesktopType struct{}

// resourceTeleportDynamicWindowsDesktop is the resource
type resourceTeleportDynamicWindowsDesktop struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportDynamicWindowsDesktopType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaDynamicWindowsDesktopV1(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportDynamicWindowsDesktopType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportDynamicWindowsDesktop{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the DynamicWindowsDesktop
func (r resourceTeleportDynamicWindowsDesktop) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var err error
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	desktop := &apitypes.DynamicWindowsDesktopV1{}
	diags = tfschema.CopyDynamicWindowsDesktopV1FromTerraform(ctx, plan, desktop)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	
	desktopResource := desktop

	err = desktopResource.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error setting DynamicWindowsDesktop defaults", trace.Wrap(err), "dynamic_windows_desktop"))
		return
	}

	id := desktopResource.Metadata.Name

	_, err = r.p.Client.DynamicDesktopClient().GetDynamicWindowsDesktop(ctx, id)
	if !trace.IsNotFound(err) {
		if err == nil {
			existErr := fmt.Sprintf("DynamicWindowsDesktop exists in Teleport. Either remove it (tctl rm dynamic_windows_desktop/%v)"+
				" or import it to the existing state (terraform import teleport_dynamic_windows_desktop.%v %v)", id, id, id)

			resp.Diagnostics.Append(diagFromErr("DynamicWindowsDesktop exists in Teleport", trace.Errorf(existErr)))
			return
		}

		resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Wrap(err), "dynamic_windows_desktop"))
		return
	}

	_, err = r.p.Client.DynamicDesktopClient().CreateDynamicWindowsDesktop(ctx, desktopResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating DynamicWindowsDesktop", trace.Wrap(err), "dynamic_windows_desktop"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var desktopI apitypes.DynamicWindowsDesktop
	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		desktopI, err = r.p.Client.DynamicDesktopClient().GetDynamicWindowsDesktop(ctx, id)
		if trace.IsNotFound(err) {
			if bErr := backoff.Do(ctx); bErr != nil {
				resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Wrap(bErr), "dynamic_windows_desktop"))
				return
			}
			if tries >= r.p.RetryConfig.MaxTries {
				diagMessage := fmt.Sprintf("Error reading DynamicWindowsDesktop (tried %d times) - state outdated, please import resource", tries)
				resp.Diagnostics.AddError(diagMessage, "dynamic_windows_desktop")
			}
			continue
		}
		break
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Wrap(err), "dynamic_windows_desktop"))
		return
	}

	desktopResource, ok := desktopI.(*apitypes.DynamicWindowsDesktopV1)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Errorf("Can not convert %T to DynamicWindowsDesktopV1", desktopI), "dynamic_windows_desktop"))
		return
	}
	desktop = desktopResource

	diags = tfschema.CopyDynamicWindowsDesktopV1ToTerraform(ctx, desktop, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: desktop.Metadata.Name}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport DynamicWindowsDesktop
func (r resourceTeleportDynamicWindowsDesktop) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var id types.String
	diags = req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	desktopI, err := r.p.Client.DynamicDesktopClient().GetDynamicWindowsDesktop(ctx, id.Value)
	if trace.IsNotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Wrap(err), "dynamic_windows_desktop"))
		return
	}
	
	desktop := desktopI.(*apitypes.DynamicWindowsDesktopV1)
	diags = tfschema.CopyDynamicWindowsDesktopV1ToTerraform(ctx, desktop, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport DynamicWindowsDesktop
func (r resourceTeleportDynamicWindowsDesktop) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	desktop := &apitypes.DynamicWindowsDesktopV1{}
	diags = tfschema.CopyDynamicWindowsDesktopV1FromTerraform(ctx, plan, desktop)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	desktopResource := desktop


	if err := desktopResource.CheckAndSetDefaults(); err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating DynamicWindowsDesktop", err, "dynamic_windows_desktop"))
		return
	}
	name := desktopResource.Metadata.Name

	desktopBefore, err := r.p.Client.DynamicDesktopClient().GetDynamicWindowsDesktop(ctx, name)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", err, "dynamic_windows_desktop"))
		return
	}

	_, err = r.p.Client.DynamicDesktopClient().UpdateDynamicWindowsDesktop(ctx, desktopResource)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating DynamicWindowsDesktop", err, "dynamic_windows_desktop"))
		return
	}
		
	// Not really an inferface, just using the same name for easier templating.
	var desktopI apitypes.DynamicWindowsDesktop

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		desktopI, err = r.p.Client.DynamicDesktopClient().GetDynamicWindowsDesktop(ctx, name)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", err, "dynamic_windows_desktop"))
			return
		}
		if desktopBefore.GetMetadata().Revision != desktopI.GetMetadata().Revision || false {
			break
		}

		if err := backoff.Do(ctx); err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Wrap(err), "dynamic_windows_desktop"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading DynamicWindowsDesktop (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "dynamic_windows_desktop")
			return
		}
	}

	desktopResource, ok := desktopI.(*apitypes.DynamicWindowsDesktopV1)
	if !ok {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Errorf("Can not convert %T to DynamicWindowsDesktopV1", desktopI), "dynamic_windows_desktop"))
		return
	}
	diags = tfschema.CopyDynamicWindowsDesktopV1ToTerraform(ctx, desktop, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport DynamicWindowsDesktop
func (r resourceTeleportDynamicWindowsDesktop) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var id types.String
	diags := req.State.GetAttribute(ctx, path.Root("metadata").AtName("name"), &id)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.p.Client.DynamicDesktopClient().DeleteDynamicWindowsDesktop(ctx, id.Value)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting DynamicWindowsDesktopV1", trace.Wrap(err), "dynamic_windows_desktop"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports DynamicWindowsDesktop state
func (r resourceTeleportDynamicWindowsDesktop) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	desktop, err := r.p.Client.DynamicDesktopClient().GetDynamicWindowsDesktop(ctx, req.ID)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading DynamicWindowsDesktop", trace.Wrap(err), "dynamic_windows_desktop"))
		return
	}

	
	desktopResource := desktop.(*apitypes.DynamicWindowsDesktopV1)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopyDynamicWindowsDesktopV1ToTerraform(ctx, desktopResource, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := desktopResource.GetName()

	state.Attrs["id"] = types.String{Value: id}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
