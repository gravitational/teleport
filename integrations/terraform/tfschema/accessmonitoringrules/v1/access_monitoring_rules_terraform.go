/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/accessmonitoringrules/v1/access_monitoring_rules.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_accessmonitoringrules_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/accessmonitoringrules/v1"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_integrations_terraform_tfschema "github.com/gravitational/teleport/integrations/terraform/tfschema"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenSchemaAccessMonitoringRule returns tfsdk.Schema definition for AccessMonitoringRule
func GenSchemaAccessMonitoringRule(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "kind is a resource kind",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "description is object description.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Description: "expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
				}),
				"labels": {
					Description: "labels is a set of labels.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "name is an object name.",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"revision": {
					Description: "revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "metadata is the rules's metadata.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"condition": {
					Description: "condition is a predicate expression that operates on the specified subject resources, and determines whether the subject will be moved into desired state.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"notification": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"name": {
							Description: "name is the name of the plugin to which this configuration should apply.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"recipients": {
							Description: "recipients is the list of recipients the plugin should notify.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
					}),
					Description: "notification defines the plugin configuration for notifications if rule is triggered.",
					Optional:    true,
				},
				"states": {
					Description: "states are the desired state which the monitoring rule is attempting to bring the subjects matching the condition to.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"subjects": {
					Description: "subjects the rule operates on, can be a resource kind or a particular resource property.",
					Required:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
			}),
			Description: "Spec is an AccessMonitoringRule specification",
			Required:    true,
		},
		"sub_kind": {
			Description: "sub_kind is an optional resource sub kind, used in some resources",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Description: "version is version",
			Required:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// CopyAccessMonitoringRuleFromTerraform copies contents of the source Terraform object into a target struct
func CopyAccessMonitoringRuleFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_accessmonitoringrules_v1.AccessMonitoringRule) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AccessMonitoringRule.metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Metadata = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.Metadata{}
					obj := obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.metadata.name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.metadata.namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.metadata.description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.metadata.labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.metadata.labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.metadata.expires"})
						}
						CopyFromTimestamp(diags, a, &obj.Expires)
					}
					{
						a, ok := tf.Attrs["revision"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.metadata.revision"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Revision = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AccessMonitoringRule.kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AccessMonitoringRule.sub_kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AccessMonitoringRule.version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AccessMonitoringRule.spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Spec = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accessmonitoringrules_v1.AccessMonitoringRuleSpec{}
					obj := obj.Spec
					{
						a, ok := tf.Attrs["subjects"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.spec.subjects"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.subjects", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Subjects = make([]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.subjects", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Subjects[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["states"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.spec.states"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.states", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.States = make([]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.states", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.States[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["condition"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.spec.condition"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.condition", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Condition = t
							}
						}
					}
					{
						a, ok := tf.Attrs["notification"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessMonitoringRule.spec.notification"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.notification", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Notification = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Notification = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accessmonitoringrules_v1.Notification{}
									obj := obj.Notification
									{
										a, ok := tf.Attrs["name"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessMonitoringRule.spec.notification.name"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.notification.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Name = t
											}
										}
									}
									{
										a, ok := tf.Attrs["recipients"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessMonitoringRule.spec.notification.recipients"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.notification.recipients", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Recipients = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessMonitoringRule.spec.notification.recipients", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Recipients[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyAccessMonitoringRuleToTerraform copies contents of the source Terraform object into a target struct
func CopyAccessMonitoringRuleToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_accessmonitoringrules_v1.AccessMonitoringRule, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Metadata == nil {
					v.Null = true
				} else {
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.metadata.name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessMonitoringRule.metadata.name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.metadata.namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessMonitoringRule.metadata.namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.metadata.description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessMonitoringRule.metadata.description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.metadata.labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"AccessMonitoringRule.metadata.labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.metadata.expires"})
						} else {
							v := CopyToTimestamp(diags, obj.Expires, t, tf.Attrs["expires"])
							tf.Attrs["expires"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["revision"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.metadata.revision"})
						} else {
							v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessMonitoringRule.metadata.revision", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Revision) == ""
							}
							v.Value = string(obj.Revision)
							v.Unknown = false
							tf.Attrs["revision"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AccessMonitoringRule.kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.sub_kind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AccessMonitoringRule.sub_kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AccessMonitoringRule.version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Spec == nil {
					v.Null = true
				} else {
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["subjects"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.spec.subjects"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.subjects", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["subjects"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Subjects)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Subjects))
									}
								}
								if obj.Subjects != nil {
									t := o.ElemType
									if len(obj.Subjects) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Subjects))
									}
									for k, a := range obj.Subjects {
										v, ok := tf.Attrs["subjects"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"AccessMonitoringRule.spec.subjects", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.subjects", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = string(a) == ""
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Subjects) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["subjects"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["states"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.spec.states"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.states", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["states"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.States)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.States))
									}
								}
								if obj.States != nil {
									t := o.ElemType
									if len(obj.States) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.States))
									}
									for k, a := range obj.States {
										v, ok := tf.Attrs["states"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"AccessMonitoringRule.spec.states", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.states", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = string(a) == ""
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.States) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["states"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["condition"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.spec.condition"})
						} else {
							v, ok := tf.Attrs["condition"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessMonitoringRule.spec.condition", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.condition", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Condition) == ""
							}
							v.Value = string(obj.Condition)
							v.Unknown = false
							tf.Attrs["condition"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["notification"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.spec.notification"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.notification", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["notification"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Notification == nil {
									v.Null = true
								} else {
									obj := obj.Notification
									tf := &v
									{
										t, ok := tf.AttrTypes["name"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.spec.notification.name"})
										} else {
											v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AccessMonitoringRule.spec.notification.name", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.notification.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Name) == ""
											}
											v.Value = string(obj.Name)
											v.Unknown = false
											tf.Attrs["name"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["recipients"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessMonitoringRule.spec.notification.recipients"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.notification.recipients", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["recipients"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Recipients)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Recipients))
													}
												}
												if obj.Recipients != nil {
													t := o.ElemType
													if len(obj.Recipients) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Recipients))
													}
													for k, a := range obj.Recipients {
														v, ok := tf.Attrs["recipients"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AccessMonitoringRule.spec.notification.recipients", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AccessMonitoringRule.spec.notification.recipients", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Recipients) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["recipients"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["notification"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
