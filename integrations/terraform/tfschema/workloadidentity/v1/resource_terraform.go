/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/workloadidentity/v1/resource.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1"
	github_com_gravitational_teleport_integrations_terraform_tfschema "github.com/gravitational/teleport/integrations/terraform/tfschema"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenSchemaWorkloadIdentity returns tfsdk.Schema definition for WorkloadIdentity
func GenSchemaWorkloadIdentity(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "The kind of resource represented.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "description is object description.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Description: "expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
				}),
				"labels": {
					Description: "labels is a set of labels.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "name is an object name.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"revision": {
					Description: "revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Common metadata that all resources share.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"rules": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"allow": {
						Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"conditions": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"attribute": {
									Description: "The name of the attribute to evaluate the condition against.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"equals": {
									Description: "An exact string that the attribute must match.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "The conditions that must be met for this rule to be considered passed.",
							Optional:    true,
						}}),
						Description: "A list of rules used to determine if a WorkloadIdentity can be issued. If none are provided, it will be considered a pass. If any are provided, then at least one must pass for the rules to be considered passed.",
						Optional:    true,
					}}),
					Description: "The rules which are evaluated before the WorkloadIdentity can be issued.",
					Optional:    true,
				},
				"spiffe": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"hint": {
							Description: "A freeform text field which is provided to workloads along with a credential produced by this WorkloadIdentity. This can be used to provide additional context that can be used to select between multiple credentials.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"id": {
							Description: "The path of the SPIFFE ID that will be issued to the workload.  This should be prefixed with a forward-slash (\"/\").  This field supports templating using attributes.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "Configuration pertaining to the issuance of SPIFFE-compatible workload identity credentials.",
					Optional:    true,
				},
			}),
			Description: "The configured properties of the WorkloadIdentity",
			Optional:    true,
		},
		"sub_kind": {
			Description: "Differentiates variations of the same kind. All resources should contain one, even if it is never populated.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Description: "The version of the resource being represented.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// CopyWorkloadIdentityFromTerraform copies contents of the source Terraform object into a target struct
func CopyWorkloadIdentityFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentity) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"WorkloadIdentity.kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"WorkloadIdentity.sub_kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"WorkloadIdentity.version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"WorkloadIdentity.metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Metadata = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.Metadata{}
					obj := obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.metadata.name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.metadata.namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.metadata.description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.metadata.labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.metadata.labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.metadata.expires"})
						}
						CopyFromTimestamp(diags, a, &obj.Expires)
					}
					{
						a, ok := tf.Attrs["revision"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.metadata.revision"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Revision = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Spec = &github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentitySpec{}
					obj := obj.Spec
					{
						a, ok := tf.Attrs["rules"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.rules"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.rules", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Rules = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Rules = &github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentityRules{}
									obj := obj.Rules
									{
										a, ok := tf.Attrs["allow"]
										if !ok {
											diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.rules.allow"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.rules.allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Allow = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentityRule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.rules.allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentityRule
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentityRule{}
																obj := t
																{
																	a, ok := tf.Attrs["conditions"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.rules.allow.conditions"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.rules.allow.conditions", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Conditions = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentityCondition, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.rules.allow.conditions", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																					} else {
																						var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentityCondition
																						if !v.Null && !v.Unknown {
																							tf := v
																							t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentityCondition{}
																							obj := t
																							{
																								a, ok := tf.Attrs["attribute"]
																								if !ok {
																									diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.rules.allow.conditions.attribute"})
																								} else {
																									v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.rules.allow.conditions.attribute", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																									} else {
																										var t string
																										if !v.Null && !v.Unknown {
																											t = string(v.Value)
																										}
																										obj.Attribute = t
																									}
																								}
																							}
																							{
																								a, ok := tf.Attrs["equals"]
																								if !ok {
																									diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.rules.allow.conditions.equals"})
																								} else {
																									v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.rules.allow.conditions.equals", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																									} else {
																										var t string
																										if !v.Null && !v.Unknown {
																											t = string(v.Value)
																										}
																										obj.Equals = t
																									}
																								}
																							}
																						}
																						obj.Conditions[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Allow[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["spiffe"]
						if !ok {
							diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.spiffe"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.spiffe", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Spiffe = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Spiffe = &github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentitySPIFFE{}
									obj := obj.Spiffe
									{
										a, ok := tf.Attrs["id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.spiffe.id"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.spiffe.id", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Id = t
											}
										}
									}
									{
										a, ok := tf.Attrs["hint"]
										if !ok {
											diags.Append(attrReadMissingDiag{"WorkloadIdentity.spec.spiffe.hint"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"WorkloadIdentity.spec.spiffe.hint", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Hint = t
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyWorkloadIdentityToTerraform copies contents of the source Terraform object into a target struct
func CopyWorkloadIdentityToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_workloadidentity_v1.WorkloadIdentity, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"WorkloadIdentity.kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"WorkloadIdentity.kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"WorkloadIdentity.sub_kind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"WorkloadIdentity.sub_kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"WorkloadIdentity.version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"WorkloadIdentity.version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"WorkloadIdentity.metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Metadata == nil {
					v.Null = true
				} else {
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.metadata.name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"WorkloadIdentity.metadata.name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.metadata.namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"WorkloadIdentity.metadata.namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.metadata.description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"WorkloadIdentity.metadata.description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.metadata.labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"WorkloadIdentity.metadata.labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.metadata.expires"})
						} else {
							v := CopyToTimestamp(diags, obj.Expires, t, tf.Attrs["expires"])
							tf.Attrs["expires"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["revision"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.metadata.revision"})
						} else {
							v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"WorkloadIdentity.metadata.revision", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Revision) == ""
							}
							v.Value = string(obj.Revision)
							v.Unknown = false
							tf.Attrs["revision"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Spec == nil {
					v.Null = true
				} else {
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["rules"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.rules"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.rules", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["rules"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Rules == nil {
									v.Null = true
								} else {
									obj := obj.Rules
									tf := &v
									{
										a, ok := tf.AttrTypes["allow"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.rules.allow"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.rules.allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
												}
												if obj.Allow != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Allow) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
													for k, a := range obj.Allow {
														v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																a, ok := tf.AttrTypes["conditions"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.rules.allow.conditions"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.rules.allow.conditions", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["conditions"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Conditions)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Conditions))
																			}
																		}
																		if obj.Conditions != nil {
																			o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																			if len(obj.Conditions) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Conditions))
																			}
																			for k, a := range obj.Conditions {
																				v, ok := tf.Attrs["conditions"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																				if !ok {
																					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																						AttrTypes: o.AttrTypes,
																						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																					}
																				} else {
																					if v.Attrs == nil {
																						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																					}
																				}
																				if a == nil {
																					v.Null = true
																				} else {
																					obj := a
																					tf := &v
																					{
																						t, ok := tf.AttrTypes["attribute"]
																						if !ok {
																							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.rules.allow.conditions.attribute"})
																						} else {
																							v, ok := tf.Attrs["attribute"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																							if !ok {
																								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																								if err != nil {
																									diags.Append(attrWriteGeneralError{"WorkloadIdentity.spec.rules.allow.conditions.attribute", err})
																								}
																								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.rules.allow.conditions.attribute", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																								}
																								v.Null = string(obj.Attribute) == ""
																							}
																							v.Value = string(obj.Attribute)
																							v.Unknown = false
																							tf.Attrs["attribute"] = v
																						}
																					}
																					{
																						t, ok := tf.AttrTypes["equals"]
																						if !ok {
																							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.rules.allow.conditions.equals"})
																						} else {
																							v, ok := tf.Attrs["equals"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																							if !ok {
																								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																								if err != nil {
																									diags.Append(attrWriteGeneralError{"WorkloadIdentity.spec.rules.allow.conditions.equals", err})
																								}
																								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.rules.allow.conditions.equals", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																								}
																								v.Null = string(obj.Equals) == ""
																							}
																							v.Value = string(obj.Equals)
																							v.Unknown = false
																							tf.Attrs["equals"] = v
																						}
																					}
																				}
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Conditions) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["conditions"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Allow) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["allow"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["rules"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["spiffe"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.spiffe"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.spiffe", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["spiffe"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Spiffe == nil {
									v.Null = true
								} else {
									obj := obj.Spiffe
									tf := &v
									{
										t, ok := tf.AttrTypes["id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.spiffe.id"})
										} else {
											v, ok := tf.Attrs["id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"WorkloadIdentity.spec.spiffe.id", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.spiffe.id", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Id) == ""
											}
											v.Value = string(obj.Id)
											v.Unknown = false
											tf.Attrs["id"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["hint"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"WorkloadIdentity.spec.spiffe.hint"})
										} else {
											v, ok := tf.Attrs["hint"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"WorkloadIdentity.spec.spiffe.hint", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"WorkloadIdentity.spec.spiffe.hint", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Hint) == ""
											}
											v.Value = string(obj.Hint)
											v.Unknown = false
											tf.Attrs["hint"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["spiffe"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
