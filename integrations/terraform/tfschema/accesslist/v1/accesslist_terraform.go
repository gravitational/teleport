/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/accesslist/v1/accesslist.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/accesslist/v1"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/trait/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/trait/v1"
	github_com_gravitational_teleport_integrations_terraform_tfschema "github.com/gravitational/teleport/integrations/terraform/tfschema"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenSchemaAccessList returns tfsdk.Schema definition for AccessList
func GenSchemaAccessList(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"header": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"kind": {
					Description: "kind is a resource kind.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"metadata": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"description": {
							Description: "description is object description.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"expires": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
							Description: "expires is a global expiry time header can be set on any resource in the system.",
							Optional:    true,
							Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
						}),
						"labels": {
							Description: "labels is a set of labels.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"name": {
							Description:   "name is an object name.",
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
							Required:      true,
							Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"namespace": {
							Computed:      true,
							Description:   "namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"revision": {
							Description: "revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "metadata is resource metadata.",
					Optional:    true,
				},
				"sub_kind": {
					Description: "sub_kind is an optional resource sub kind, used in some resources.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"version": {
					Description: "Version is the API version used to create the resource. It must be specified. Based on this version, Teleport will apply different defaults on resource creation or deletion. It must be an integer prefixed by \"v\". For example: `v1`",
					Required:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "header is the header for the resource.",
			Optional:    true,
		},
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"audit": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"next_audit_date": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
							Computed:      true,
							Description:   "next_audit_date is when the next audit date should be done by.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
						}),
						"notifications": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"start": GenSchemaDuration(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								Description: "start specifies when to start notifying users that the next audit date is coming up.",
								Optional:    true,
							})}),
							Description: "notifications is the configuration for notifying users.",
							Optional:    true,
						},
						"recurrence": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"day_of_month": {
									Description: "day_of_month is the day of month that reviews will be scheduled on. Supported values are 0, 1, 15, and 31.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
								},
								"frequency": {
									Description: "frequency is the frequency of reviews. This represents the period in months between two reviews. Supported values are 0, 1, 3, 6, and 12.",
									Required:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
								},
							}),
							Description: "recurrence is the recurrence definition",
							Required:    true,
						},
					}),
					Description: "audit describes the frequency that this Access List must be audited.",
					Required:    true,
				},
				"description": {
					Description: "description is an optional plaintext description of the Access List.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"grants": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"roles": {
							Description: "roles are the roles that are granted to users who are members of the Access List.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"traits": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"key": {
									Description: "key is the name of the trait.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"values": {
									Description: "values is the list of trait values.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "traits are the traits that are granted to users who are members of the Access List.",
							Optional:    true,
						},
					}),
					Description: "grants describes the access granted by membership to this Access List.",
					Required:    true,
				},
				"membership_requires": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"roles": {
							Description: "roles are the user roles that must be present for the user to obtain access.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"traits": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"key": {
									Description: "key is the name of the trait.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"values": {
									Description: "values is the list of trait values.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "traits are the traits that must be present for the user to obtain access.",
							Optional:    true,
						},
					}),
					Description: "membership_requires describes the requirements for a user to be a member of the Access List. For a membership to an Access List to be effective, the user must meet the requirements of Membership_requires and must be in the members list.",
					Optional:    true,
				},
				"owner_grants": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"roles": {
							Description: "roles are the roles that are granted to users who are members of the Access List.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"traits": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"key": {
									Description: "key is the name of the trait.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"values": {
									Description: "values is the list of trait values.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "traits are the traits that are granted to users who are members of the Access List.",
							Optional:    true,
						},
					}),
					Description: "owner_grants describes the access granted by owners to this Access List.",
					Optional:    true,
				},
				"owners": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"description": {
							Description: "description is the plaintext description of the owner and why they are an owner.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"name": {
							Description: "name is the username of the owner.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "owners is a list of owners of the Access List.",
					Required:    true,
				},
				"ownership_requires": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"roles": {
							Description: "roles are the user roles that must be present for the user to obtain access.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"traits": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"key": {
									Description: "key is the name of the trait.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"values": {
									Description: "values is the list of trait values.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "traits are the traits that must be present for the user to obtain access.",
							Optional:    true,
						},
					}),
					Description: "ownership_requires describes the requirements for a user to be an owner of the Access List. For ownership of an Access List to be effective, the user must meet the requirements of ownership_requires and must be in the owners list.",
					Optional:    true,
				},
				"title": {
					Description: "title is a plaintext short description of the Access List.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "spec is the specification for the Access List.",
			Optional:    true,
		},
	}}, nil
}

// CopyAccessListFromTerraform copies contents of the source Terraform object into a target struct
func CopyAccessListFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessList) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["header"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AccessList.header"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AccessList.header", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Header = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Header = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.ResourceHeader{}
					obj := obj.Header
					{
						a, ok := tf.Attrs["kind"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.header.kind"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.header.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Kind = t
							}
						}
					}
					{
						a, ok := tf.Attrs["sub_kind"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.header.sub_kind"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.header.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.SubKind = t
							}
						}
					}
					{
						a, ok := tf.Attrs["version"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.header.version"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.header.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Version = t
							}
						}
					}
					{
						a, ok := tf.Attrs["metadata"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.header.metadata"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.header.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Metadata = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Metadata = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.Metadata{}
									obj := obj.Metadata
									{
										a, ok := tf.Attrs["name"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.header.metadata.name"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.header.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Name = t
											}
										}
									}
									{
										a, ok := tf.Attrs["namespace"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.header.metadata.namespace"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.header.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Namespace = t
											}
										}
									}
									{
										a, ok := tf.Attrs["description"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.header.metadata.description"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.header.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Description = t
											}
										}
									}
									{
										a, ok := tf.Attrs["labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.header.metadata.labels"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.header.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
											} else {
												obj.Labels = make(map[string]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.header.metadata.labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Labels[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["expires"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.header.metadata.expires"})
										}
										CopyFromTimestamp(diags, a, &obj.Expires)
									}
									{
										a, ok := tf.Attrs["revision"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.header.metadata.revision"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.header.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Revision = t
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AccessList.spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AccessList.spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Spec = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListSpec{}
					obj := obj.Spec
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["owners"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.owners"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owners", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Owners = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListOwner, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owners", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListOwner
											if !v.Null && !v.Unknown {
												tf := v
												t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListOwner{}
												obj := t
												{
													a, ok := tf.Attrs["name"]
													if !ok {
														diags.Append(attrReadMissingDiag{"AccessList.spec.owners.name"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owners.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Name = t
														}
													}
												}
												{
													a, ok := tf.Attrs["description"]
													if !ok {
														diags.Append(attrReadMissingDiag{"AccessList.spec.owners.description"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owners.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Description = t
														}
													}
												}
											}
											obj.Owners[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["audit"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.audit"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.audit", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Audit = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Audit = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListAudit{}
									obj := obj.Audit
									{
										a, ok := tf.Attrs["next_audit_date"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.audit.next_audit_date"})
										}
										CopyFromTimestamp(diags, a, &obj.NextAuditDate)
									}
									{
										a, ok := tf.Attrs["recurrence"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.audit.recurrence"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.audit.recurrence", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Recurrence = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.Recurrence = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.Recurrence{}
													obj := obj.Recurrence
													{
														a, ok := tf.Attrs["frequency"]
														if !ok {
															diags.Append(attrReadMissingDiag{"AccessList.spec.audit.recurrence.frequency"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"AccessList.spec.audit.recurrence.frequency", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
															} else {
																var t github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.ReviewFrequency
																if !v.Null && !v.Unknown {
																	t = github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.ReviewFrequency(v.Value)
																}
																obj.Frequency = t
															}
														}
													}
													{
														a, ok := tf.Attrs["day_of_month"]
														if !ok {
															diags.Append(attrReadMissingDiag{"AccessList.spec.audit.recurrence.day_of_month"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"AccessList.spec.audit.recurrence.day_of_month", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
															} else {
																var t github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.ReviewDayOfMonth
																if !v.Null && !v.Unknown {
																	t = github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.ReviewDayOfMonth(v.Value)
																}
																obj.DayOfMonth = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["notifications"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.audit.notifications"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.audit.notifications", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Notifications = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.Notifications = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.Notifications{}
													obj := obj.Notifications
													{
														a, ok := tf.Attrs["start"]
														if !ok {
															diags.Append(attrReadMissingDiag{"AccessList.spec.audit.notifications.start"})
														}
														CopyFromDuration(diags, a, &obj.Start)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["membership_requires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.membership_requires"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.MembershipRequires = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.MembershipRequires = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListRequires{}
									obj := obj.MembershipRequires
									{
										a, ok := tf.Attrs["roles"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.membership_requires.roles"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires.roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Roles = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires.roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Roles[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["traits"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.membership_requires.traits"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires.traits", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Traits = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires.traits", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait{}
																obj := t
																{
																	a, ok := tf.Attrs["key"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.membership_requires.traits.key"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Key = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["values"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.membership_requires.traits.values"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Values = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"AccessList.spec.membership_requires.traits.values", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Values[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Traits[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["ownership_requires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.ownership_requires"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.OwnershipRequires = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.OwnershipRequires = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListRequires{}
									obj := obj.OwnershipRequires
									{
										a, ok := tf.Attrs["roles"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.ownership_requires.roles"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires.roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Roles = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires.roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Roles[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["traits"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.ownership_requires.traits"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires.traits", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Traits = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires.traits", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait{}
																obj := t
																{
																	a, ok := tf.Attrs["key"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.ownership_requires.traits.key"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Key = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["values"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.ownership_requires.traits.values"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Values = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"AccessList.spec.ownership_requires.traits.values", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Values[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Traits[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["grants"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.grants"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Grants = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Grants = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListGrants{}
									obj := obj.Grants
									{
										a, ok := tf.Attrs["roles"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.grants.roles"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants.roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Roles = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants.roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Roles[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["traits"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.grants.traits"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants.traits", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Traits = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants.traits", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait{}
																obj := t
																{
																	a, ok := tf.Attrs["key"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.grants.traits.key"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Key = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["values"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.grants.traits.values"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Values = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"AccessList.spec.grants.traits.values", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Values[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Traits[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["title"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.title"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.title", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Title = t
							}
						}
					}
					{
						a, ok := tf.Attrs["owner_grants"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AccessList.spec.owner_grants"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.OwnerGrants = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.OwnerGrants = &github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessListGrants{}
									obj := obj.OwnerGrants
									{
										a, ok := tf.Attrs["roles"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.owner_grants.roles"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants.roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Roles = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants.roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Roles[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["traits"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AccessList.spec.owner_grants.traits"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants.traits", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Traits = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants.traits", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_trait_v1.Trait{}
																obj := t
																{
																	a, ok := tf.Attrs["key"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.owner_grants.traits.key"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Key = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["values"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AccessList.spec.owner_grants.traits.values"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Values = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"AccessList.spec.owner_grants.traits.values", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Values[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Traits[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyAccessListToTerraform copies contents of the source Terraform object into a target struct
func CopyAccessListToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_accesslist_v1.AccessList, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		a, ok := tf.AttrTypes["header"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AccessList.header"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AccessList.header", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["header"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Header == nil {
					v.Null = true
				} else {
					obj := obj.Header
					tf := &v
					{
						t, ok := tf.AttrTypes["kind"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.header.kind"})
						} else {
							v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessList.header.kind", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessList.header.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Kind) == ""
							}
							v.Value = string(obj.Kind)
							v.Unknown = false
							tf.Attrs["kind"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["sub_kind"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.header.sub_kind"})
						} else {
							v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessList.header.sub_kind", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessList.header.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.SubKind) == ""
							}
							v.Value = string(obj.SubKind)
							v.Unknown = false
							tf.Attrs["sub_kind"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["version"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.header.version"})
						} else {
							v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessList.header.version", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessList.header.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Version) == ""
							}
							v.Value = string(obj.Version)
							v.Unknown = false
							tf.Attrs["version"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["metadata"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.header.metadata"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessList.header.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Metadata == nil {
									v.Null = true
								} else {
									obj := obj.Metadata
									tf := &v
									{
										t, ok := tf.AttrTypes["name"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.header.metadata.name"})
										} else {
											v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AccessList.header.metadata.name", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AccessList.header.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Name) == ""
											}
											v.Value = string(obj.Name)
											v.Unknown = false
											tf.Attrs["name"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["namespace"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.header.metadata.namespace"})
										} else {
											v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AccessList.header.metadata.namespace", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AccessList.header.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Namespace) == ""
											}
											v.Value = string(obj.Namespace)
											v.Unknown = false
											tf.Attrs["namespace"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["description"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.header.metadata.description"})
										} else {
											v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AccessList.header.metadata.description", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AccessList.header.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Description) == ""
											}
											v.Value = string(obj.Description)
											v.Unknown = false
											tf.Attrs["description"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.header.metadata.labels"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.header.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
											} else {
												c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.Map{

														ElemType: o.ElemType,
														Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
													}
												}
												if obj.Labels != nil {
													t := o.ElemType
													for k, a := range obj.Labels {
														v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AccessList.header.metadata.labels", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AccessList.header.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = false
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Labels) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["labels"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["expires"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.header.metadata.expires"})
										} else {
											v := CopyToTimestamp(diags, obj.Expires, t, tf.Attrs["expires"])
											tf.Attrs["expires"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["revision"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.header.metadata.revision"})
										} else {
											v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AccessList.header.metadata.revision", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AccessList.header.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Revision) == ""
											}
											v.Value = string(obj.Revision)
											v.Unknown = false
											tf.Attrs["revision"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["metadata"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["header"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AccessList.spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AccessList.spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Spec == nil {
					v.Null = true
				} else {
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessList.spec.description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["owners"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.owners"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owners", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["owners"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Owners)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Owners))
									}
								}
								if obj.Owners != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.Owners) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Owners))
									}
									for k, a := range obj.Owners {
										v, ok := tf.Attrs["owners"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										if a == nil {
											v.Null = true
										} else {
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["name"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"AccessList.spec.owners.name"})
												} else {
													v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"AccessList.spec.owners.name", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owners.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Name) == ""
													}
													v.Value = string(obj.Name)
													v.Unknown = false
													tf.Attrs["name"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["description"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"AccessList.spec.owners.description"})
												} else {
													v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"AccessList.spec.owners.description", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owners.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Description) == ""
													}
													v.Value = string(obj.Description)
													v.Unknown = false
													tf.Attrs["description"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Owners) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["owners"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["audit"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.audit"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.audit", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["audit"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Audit == nil {
									v.Null = true
								} else {
									obj := obj.Audit
									tf := &v
									{
										t, ok := tf.AttrTypes["next_audit_date"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.audit.next_audit_date"})
										} else {
											v := CopyToTimestamp(diags, obj.NextAuditDate, t, tf.Attrs["next_audit_date"])
											tf.Attrs["next_audit_date"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["recurrence"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.audit.recurrence"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.audit.recurrence", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["recurrence"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.Recurrence == nil {
													v.Null = true
												} else {
													obj := obj.Recurrence
													tf := &v
													{
														t, ok := tf.AttrTypes["frequency"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"AccessList.spec.audit.recurrence.frequency"})
														} else {
															v, ok := tf.Attrs["frequency"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"AccessList.spec.audit.recurrence.frequency", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.audit.recurrence.frequency", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																}
																v.Null = int64(obj.Frequency) == 0
															}
															v.Value = int64(obj.Frequency)
															v.Unknown = false
															tf.Attrs["frequency"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["day_of_month"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"AccessList.spec.audit.recurrence.day_of_month"})
														} else {
															v, ok := tf.Attrs["day_of_month"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"AccessList.spec.audit.recurrence.day_of_month", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.audit.recurrence.day_of_month", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																}
																v.Null = int64(obj.DayOfMonth) == 0
															}
															v.Value = int64(obj.DayOfMonth)
															v.Unknown = false
															tf.Attrs["day_of_month"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["recurrence"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["notifications"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.audit.notifications"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.audit.notifications", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["notifications"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.Notifications == nil {
													v.Null = true
												} else {
													obj := obj.Notifications
													tf := &v
													{
														t, ok := tf.AttrTypes["start"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"AccessList.spec.audit.notifications.start"})
														} else {
															v := CopyToDuration(diags, obj.Start, t, tf.Attrs["start"])
															tf.Attrs["start"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["notifications"] = v
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["audit"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["membership_requires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.membership_requires"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.membership_requires", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["membership_requires"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.MembershipRequires == nil {
									v.Null = true
								} else {
									obj := obj.MembershipRequires
									tf := &v
									{
										a, ok := tf.AttrTypes["roles"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.membership_requires.roles"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.membership_requires.roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
												}
												if obj.Roles != nil {
													t := o.ElemType
													if len(obj.Roles) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
													for k, a := range obj.Roles {
														v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AccessList.spec.membership_requires.roles", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.membership_requires.roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Roles) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["roles"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["traits"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.membership_requires.traits"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.membership_requires.traits", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
												}
												if obj.Traits != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Traits) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
													for k, a := range obj.Traits {
														v, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["key"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.membership_requires.traits.key"})
																} else {
																	v, ok := tf.Attrs["key"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"AccessList.spec.membership_requires.traits.key", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.membership_requires.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Key) == ""
																	}
																	v.Value = string(obj.Key)
																	v.Unknown = false
																	tf.Attrs["key"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["values"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.membership_requires.traits.values"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.membership_requires.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																		}
																		if obj.Values != nil {
																			t := o.ElemType
																			if len(obj.Values) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																			for k, a := range obj.Values {
																				v, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"AccessList.spec.membership_requires.traits.values", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.membership_requires.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Values) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["values"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Traits) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["traits"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["membership_requires"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["ownership_requires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.ownership_requires"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.ownership_requires", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["ownership_requires"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.OwnershipRequires == nil {
									v.Null = true
								} else {
									obj := obj.OwnershipRequires
									tf := &v
									{
										a, ok := tf.AttrTypes["roles"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.ownership_requires.roles"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.ownership_requires.roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
												}
												if obj.Roles != nil {
													t := o.ElemType
													if len(obj.Roles) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
													for k, a := range obj.Roles {
														v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AccessList.spec.ownership_requires.roles", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.ownership_requires.roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Roles) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["roles"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["traits"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.ownership_requires.traits"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.ownership_requires.traits", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
												}
												if obj.Traits != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Traits) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
													for k, a := range obj.Traits {
														v, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["key"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.ownership_requires.traits.key"})
																} else {
																	v, ok := tf.Attrs["key"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"AccessList.spec.ownership_requires.traits.key", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.ownership_requires.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Key) == ""
																	}
																	v.Value = string(obj.Key)
																	v.Unknown = false
																	tf.Attrs["key"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["values"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.ownership_requires.traits.values"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.ownership_requires.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																		}
																		if obj.Values != nil {
																			t := o.ElemType
																			if len(obj.Values) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																			for k, a := range obj.Values {
																				v, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"AccessList.spec.ownership_requires.traits.values", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.ownership_requires.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Values) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["values"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Traits) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["traits"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["ownership_requires"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["grants"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.grants"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.grants", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["grants"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Grants == nil {
									v.Null = true
								} else {
									obj := obj.Grants
									tf := &v
									{
										a, ok := tf.AttrTypes["roles"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.grants.roles"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.grants.roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
												}
												if obj.Roles != nil {
													t := o.ElemType
													if len(obj.Roles) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
													for k, a := range obj.Roles {
														v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AccessList.spec.grants.roles", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.grants.roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Roles) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["roles"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["traits"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.grants.traits"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.grants.traits", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
												}
												if obj.Traits != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Traits) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
													for k, a := range obj.Traits {
														v, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["key"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.grants.traits.key"})
																} else {
																	v, ok := tf.Attrs["key"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"AccessList.spec.grants.traits.key", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.grants.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Key) == ""
																	}
																	v.Value = string(obj.Key)
																	v.Unknown = false
																	tf.Attrs["key"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["values"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.grants.traits.values"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.grants.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																		}
																		if obj.Values != nil {
																			t := o.ElemType
																			if len(obj.Values) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																			for k, a := range obj.Values {
																				v, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"AccessList.spec.grants.traits.values", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.grants.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Values) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["values"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Traits) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["traits"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["grants"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["title"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.title"})
						} else {
							v, ok := tf.Attrs["title"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AccessList.spec.title", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.title", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Title) == ""
							}
							v.Value = string(obj.Title)
							v.Unknown = false
							tf.Attrs["title"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["owner_grants"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AccessList.spec.owner_grants"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owner_grants", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["owner_grants"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.OwnerGrants == nil {
									v.Null = true
								} else {
									obj := obj.OwnerGrants
									tf := &v
									{
										a, ok := tf.AttrTypes["roles"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.owner_grants.roles"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owner_grants.roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
												}
												if obj.Roles != nil {
													t := o.ElemType
													if len(obj.Roles) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
													}
													for k, a := range obj.Roles {
														v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AccessList.spec.owner_grants.roles", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owner_grants.roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Roles) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["roles"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["traits"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AccessList.spec.owner_grants.traits"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owner_grants.traits", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
												}
												if obj.Traits != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Traits) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Traits))
													}
													for k, a := range obj.Traits {
														v, ok := tf.Attrs["traits"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["key"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.owner_grants.traits.key"})
																} else {
																	v, ok := tf.Attrs["key"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"AccessList.spec.owner_grants.traits.key", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owner_grants.traits.key", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Key) == ""
																	}
																	v.Value = string(obj.Key)
																	v.Unknown = false
																	tf.Attrs["key"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["values"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AccessList.spec.owner_grants.traits.values"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owner_grants.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																		}
																		if obj.Values != nil {
																			t := o.ElemType
																			if len(obj.Values) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																			for k, a := range obj.Values {
																				v, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"AccessList.spec.owner_grants.traits.values", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"AccessList.spec.owner_grants.traits.values", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Values) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["values"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Traits) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["traits"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["owner_grants"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
