/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/autoupdate/v1/autoupdate.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/autoupdate/v1"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_integrations_terraform_tfschema "github.com/gravitational/teleport/integrations/terraform/tfschema"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenSchemaAutoUpdateConfig returns tfsdk.Schema definition for AutoUpdateConfig
func GenSchemaAutoUpdateConfig(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "description is object description.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Description: "expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
				}),
				"labels": {
					Description: "labels is a set of labels.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Computed:      true,
					Description:   "name is an object name.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"revision": {
					Description: "revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Computed:      true,
			Description:   "",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"agents": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"maintenance_window_duration": GenSchemaDuration(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
							Description: "maintenance_window_duration is the maintenance window duration. This can only be set if `strategy` is \"time-based\". Once the window is over, the group transitions to the done state. Existing agents won't be updated until the next maintenance window.",
							Optional:    true,
						}),
						"mode": {
							Description: "mode specifies whether agent autoupdates are enabled, disabled, or paused.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"schedules": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"regular": {
								Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
									"days": {
										Description: "days when the update can run. Supported values are \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\" and \"*\"",
										Optional:    true,
										Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
									},
									"name": {
										Description: "name of the group",
										Optional:    true,
										Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
									},
									"start_hour": {
										Description: "start_hour to initiate update",
										Optional:    true,
										Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
									},
									"wait_hours": {
										Description: "wait_hours after last group succeeds before this group can run. This can only be used when the strategy is \"halt-on-failure\". This field must be positive.",
										Optional:    true,
										Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
									},
								}),
								Description: "regular schedules for non-critical versions.",
								Optional:    true,
							}}),
							Description: "schedules specifies schedules for updates of grouped agents.",
							Optional:    true,
						},
						"strategy": {
							Description: "strategy to use for updating the agents.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "",
					Optional:    true,
				},
				"tools": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"mode": {
						Description: "Mode defines state of the client tools auto update.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
					}}),
					Description: "",
					Optional:    true,
				},
			}),
			Description: "",
			Required:    true,
		},
		"sub_kind": {
			Description: "",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Description: "",
			Required:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// GenSchemaAutoUpdateVersion returns tfsdk.Schema definition for AutoUpdateVersion
func GenSchemaAutoUpdateVersion(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "description is object description.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Description: "expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
				}),
				"labels": {
					Description: "labels is a set of labels.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Computed:      true,
					Description:   "name is an object name.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"revision": {
					Description: "revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Computed:      true,
			Description:   "",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"agents": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"mode": {
							Description: "autoupdate_mode to use for the rollout",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"schedule": {
							Description: "schedule to use for the rollout",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"start_version": {
							Description: "start_version is the version to update from.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"target_version": {
							Description: "target_version is the version to update to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "",
					Optional:    true,
				},
				"tools": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"target_version": {
						Description: "TargetVersion specifies the semantic version required for tools to establish a connection with the cluster. Client tools after connection to the cluster going to be updated to this version automatically.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
					}}),
					Description: "",
					Optional:    true,
				},
			}),
			Description: "",
			Required:    true,
		},
		"sub_kind": {
			Description: "",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Description: "",
			Required:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// CopyAutoUpdateConfigFromTerraform copies contents of the source Terraform object into a target struct
func CopyAutoUpdateConfigFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateConfig) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateConfig.kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateConfig.sub_kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateConfig.version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateConfig.metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Metadata = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.Metadata{}
					obj := obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.metadata.name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.metadata.namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.metadata.description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.metadata.labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.metadata.labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.metadata.expires"})
						}
						CopyFromTimestamp(diags, a, &obj.Expires)
					}
					{
						a, ok := tf.Attrs["revision"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.metadata.revision"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Revision = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Spec = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateConfigSpec{}
					obj := obj.Spec
					{
						a, ok := tf.Attrs["tools"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.tools"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.tools", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Tools = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Tools = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateConfigSpecTools{}
									obj := obj.Tools
									{
										a, ok := tf.Attrs["mode"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.tools.mode"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.tools.mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Mode = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["agents"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Agents = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Agents = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateConfigSpecAgents{}
									obj := obj.Agents
									{
										a, ok := tf.Attrs["mode"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.mode"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Mode = t
											}
										}
									}
									{
										a, ok := tf.Attrs["strategy"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.strategy"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.strategy", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Strategy = t
											}
										}
									}
									{
										a, ok := tf.Attrs["maintenance_window_duration"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.maintenance_window_duration"})
										}
										CopyFromDuration(diags, a, &obj.MaintenanceWindowDuration)
									}
									{
										a, ok := tf.Attrs["schedules"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.schedules"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Schedules = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.Schedules = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AgentAutoUpdateSchedules{}
													obj := obj.Schedules
													{
														a, ok := tf.Attrs["regular"]
														if !ok {
															diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Regular = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AgentAutoUpdateGroup, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																		} else {
																			var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AgentAutoUpdateGroup
																			if !v.Null && !v.Unknown {
																				tf := v
																				t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AgentAutoUpdateGroup{}
																				obj := t
																				{
																					a, ok := tf.Attrs["name"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.name"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Name = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["days"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.days"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.days", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																						} else {
																							obj.Days = make([]string, len(v.Elems))
																							if !v.Null && !v.Unknown {
																								for k, a := range v.Elems {
																									v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.days", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																									} else {
																										var t string
																										if !v.Null && !v.Unknown {
																											t = string(v.Value)
																										}
																										obj.Days[k] = t
																									}
																								}
																							}
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["start_hour"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.start_hour"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.start_hour", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						} else {
																							var t int32
																							if !v.Null && !v.Unknown {
																								t = int32(v.Value)
																							}
																							obj.StartHour = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["wait_hours"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.wait_hours"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.wait_hours", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						} else {
																							var t int32
																							if !v.Null && !v.Unknown {
																								t = int32(v.Value)
																							}
																							obj.WaitHours = t
																						}
																					}
																				}
																			}
																			obj.Regular[k] = t
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyAutoUpdateConfigToTerraform copies contents of the source Terraform object into a target struct
func CopyAutoUpdateConfigToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateConfig, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AutoUpdateConfig.kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.sub_kind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AutoUpdateConfig.sub_kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AutoUpdateConfig.version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Metadata == nil {
					v.Null = true
				} else {
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.metadata.name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateConfig.metadata.name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.metadata.namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateConfig.metadata.namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.metadata.description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateConfig.metadata.description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.metadata.labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"AutoUpdateConfig.metadata.labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.metadata.expires"})
						} else {
							v := CopyToTimestamp(diags, obj.Expires, t, tf.Attrs["expires"])
							tf.Attrs["expires"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["revision"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.metadata.revision"})
						} else {
							v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateConfig.metadata.revision", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Revision) == ""
							}
							v.Value = string(obj.Revision)
							v.Unknown = false
							tf.Attrs["revision"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Spec == nil {
					v.Null = true
				} else {
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["tools"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.tools"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.tools", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["tools"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Tools == nil {
									v.Null = true
								} else {
									obj := obj.Tools
									tf := &v
									{
										t, ok := tf.AttrTypes["mode"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.tools.mode"})
										} else {
											v, ok := tf.Attrs["mode"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateConfig.spec.tools.mode", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.tools.mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Mode) == ""
											}
											v.Value = string(obj.Mode)
											v.Unknown = false
											tf.Attrs["mode"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["tools"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["agents"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["agents"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Agents == nil {
									v.Null = true
								} else {
									obj := obj.Agents
									tf := &v
									{
										t, ok := tf.AttrTypes["mode"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.mode"})
										} else {
											v, ok := tf.Attrs["mode"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateConfig.spec.agents.mode", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Mode) == ""
											}
											v.Value = string(obj.Mode)
											v.Unknown = false
											tf.Attrs["mode"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["strategy"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.strategy"})
										} else {
											v, ok := tf.Attrs["strategy"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateConfig.spec.agents.strategy", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.strategy", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Strategy) == ""
											}
											v.Value = string(obj.Strategy)
											v.Unknown = false
											tf.Attrs["strategy"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["maintenance_window_duration"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.maintenance_window_duration"})
										} else {
											v := CopyToDuration(diags, obj.MaintenanceWindowDuration, t, tf.Attrs["maintenance_window_duration"])
											tf.Attrs["maintenance_window_duration"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["schedules"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.schedules"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["schedules"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.Schedules == nil {
													v.Null = true
												} else {
													obj := obj.Schedules
													tf := &v
													{
														a, ok := tf.AttrTypes["regular"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["regular"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Regular)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Regular))
																	}
																}
																if obj.Regular != nil {
																	o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																	if len(obj.Regular) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Regular))
																	}
																	for k, a := range obj.Regular {
																		v, ok := tf.Attrs["regular"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																				AttrTypes: o.AttrTypes,
																				Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																			}
																		} else {
																			if v.Attrs == nil {
																				v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																			}
																		}
																		if a == nil {
																			v.Null = true
																		} else {
																			obj := a
																			tf := &v
																			{
																				t, ok := tf.AttrTypes["name"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.name"})
																				} else {
																					v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"AutoUpdateConfig.spec.agents.schedules.regular.name", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Name) == ""
																					}
																					v.Value = string(obj.Name)
																					v.Unknown = false
																					tf.Attrs["name"] = v
																				}
																			}
																			{
																				a, ok := tf.AttrTypes["days"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.days"})
																				} else {
																					o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.days", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																					} else {
																						c, ok := tf.Attrs["days"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							c = github_com_hashicorp_terraform_plugin_framework_types.List{

																								ElemType: o.ElemType,
																								Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Days)),
																								Null:     true,
																							}
																						} else {
																							if c.Elems == nil {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Days))
																							}
																						}
																						if obj.Days != nil {
																							t := o.ElemType
																							if len(obj.Days) != len(c.Elems) {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Days))
																							}
																							for k, a := range obj.Days {
																								v, ok := tf.Attrs["days"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																									if err != nil {
																										diags.Append(attrWriteGeneralError{"AutoUpdateConfig.spec.agents.schedules.regular.days", err})
																									}
																									v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.days", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																									}
																									v.Null = string(a) == ""
																								}
																								v.Value = string(a)
																								v.Unknown = false
																								c.Elems[k] = v
																							}
																							if len(obj.Days) > 0 {
																								c.Null = false
																							}
																						}
																						c.Unknown = false
																						tf.Attrs["days"] = c
																					}
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["start_hour"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.start_hour"})
																				} else {
																					v, ok := tf.Attrs["start_hour"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"AutoUpdateConfig.spec.agents.schedules.regular.start_hour", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.start_hour", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						}
																						v.Null = int64(obj.StartHour) == 0
																					}
																					v.Value = int64(obj.StartHour)
																					v.Unknown = false
																					tf.Attrs["start_hour"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["wait_hours"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"AutoUpdateConfig.spec.agents.schedules.regular.wait_hours"})
																				} else {
																					v, ok := tf.Attrs["wait_hours"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"AutoUpdateConfig.spec.agents.schedules.regular.wait_hours", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"AutoUpdateConfig.spec.agents.schedules.regular.wait_hours", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						}
																						v.Null = int64(obj.WaitHours) == 0
																					}
																					v.Value = int64(obj.WaitHours)
																					v.Unknown = false
																					tf.Attrs["wait_hours"] = v
																				}
																			}
																		}
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Regular) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["regular"] = c
															}
														}
													}
												}
												v.Unknown = false
												tf.Attrs["schedules"] = v
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["agents"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyAutoUpdateVersionFromTerraform copies contents of the source Terraform object into a target struct
func CopyAutoUpdateVersionFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateVersion) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateVersion.kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateVersion.sub_kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateVersion.version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateVersion.metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Metadata = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.Metadata{}
					obj := obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.metadata.name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.metadata.namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.metadata.description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.metadata.labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.metadata.labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.metadata.expires"})
						}
						CopyFromTimestamp(diags, a, &obj.Expires)
					}
					{
						a, ok := tf.Attrs["revision"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.metadata.revision"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Revision = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Spec = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateVersionSpec{}
					obj := obj.Spec
					{
						a, ok := tf.Attrs["tools"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec.tools"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec.tools", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Tools = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Tools = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateVersionSpecTools{}
									obj := obj.Tools
									{
										a, ok := tf.Attrs["target_version"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec.tools.target_version"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec.tools.target_version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.TargetVersion = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["agents"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec.agents"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec.agents", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Agents = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Agents = &github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateVersionSpecAgents{}
									obj := obj.Agents
									{
										a, ok := tf.Attrs["start_version"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec.agents.start_version"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec.agents.start_version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.StartVersion = t
											}
										}
									}
									{
										a, ok := tf.Attrs["target_version"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec.agents.target_version"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec.agents.target_version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.TargetVersion = t
											}
										}
									}
									{
										a, ok := tf.Attrs["schedule"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec.agents.schedule"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec.agents.schedule", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Schedule = t
											}
										}
									}
									{
										a, ok := tf.Attrs["mode"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AutoUpdateVersion.spec.agents.mode"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AutoUpdateVersion.spec.agents.mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Mode = t
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyAutoUpdateVersionToTerraform copies contents of the source Terraform object into a target struct
func CopyAutoUpdateVersionToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_autoupdate_v1.AutoUpdateVersion, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AutoUpdateVersion.kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.sub_kind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AutoUpdateVersion.sub_kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AutoUpdateVersion.version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Metadata == nil {
					v.Null = true
				} else {
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.metadata.name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateVersion.metadata.name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.metadata.namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateVersion.metadata.namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.metadata.description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateVersion.metadata.description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.metadata.labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"AutoUpdateVersion.metadata.labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.metadata.expires"})
						} else {
							v := CopyToTimestamp(diags, obj.Expires, t, tf.Attrs["expires"])
							tf.Attrs["expires"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["revision"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.metadata.revision"})
						} else {
							v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AutoUpdateVersion.metadata.revision", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Revision) == ""
							}
							v.Value = string(obj.Revision)
							v.Unknown = false
							tf.Attrs["revision"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Spec == nil {
					v.Null = true
				} else {
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["tools"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec.tools"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec.tools", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["tools"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Tools == nil {
									v.Null = true
								} else {
									obj := obj.Tools
									tf := &v
									{
										t, ok := tf.AttrTypes["target_version"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec.tools.target_version"})
										} else {
											v, ok := tf.Attrs["target_version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateVersion.spec.tools.target_version", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec.tools.target_version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.TargetVersion) == ""
											}
											v.Value = string(obj.TargetVersion)
											v.Unknown = false
											tf.Attrs["target_version"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["tools"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["agents"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec.agents"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec.agents", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["agents"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Agents == nil {
									v.Null = true
								} else {
									obj := obj.Agents
									tf := &v
									{
										t, ok := tf.AttrTypes["start_version"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec.agents.start_version"})
										} else {
											v, ok := tf.Attrs["start_version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateVersion.spec.agents.start_version", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec.agents.start_version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.StartVersion) == ""
											}
											v.Value = string(obj.StartVersion)
											v.Unknown = false
											tf.Attrs["start_version"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["target_version"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec.agents.target_version"})
										} else {
											v, ok := tf.Attrs["target_version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateVersion.spec.agents.target_version", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec.agents.target_version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.TargetVersion) == ""
											}
											v.Value = string(obj.TargetVersion)
											v.Unknown = false
											tf.Attrs["target_version"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["schedule"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec.agents.schedule"})
										} else {
											v, ok := tf.Attrs["schedule"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateVersion.spec.agents.schedule", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec.agents.schedule", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Schedule) == ""
											}
											v.Value = string(obj.Schedule)
											v.Unknown = false
											tf.Attrs["schedule"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["mode"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AutoUpdateVersion.spec.agents.mode"})
										} else {
											v, ok := tf.Attrs["mode"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AutoUpdateVersion.spec.agents.mode", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AutoUpdateVersion.spec.agents.mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Mode) == ""
											}
											v.Value = string(obj.Mode)
											v.Unknown = false
											tf.Attrs["mode"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["agents"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
