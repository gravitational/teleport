/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/healthcheckconfig/v1/health_check_config.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_healthcheckconfig_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/healthcheckconfig/v1"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/label/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/label/v1"
	github_com_gravitational_teleport_integrations_terraform_tfschema "github.com/gravitational/teleport/integrations/terraform/tfschema"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
	_ "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenSchemaHealthCheckConfig returns tfsdk.Schema definition for HealthCheckConfig
func GenSchemaHealthCheckConfig(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is the resource kind. Must be \"health_check_config\".",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "description is object description.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Computed:      true,
					Description:   "expires is a global expiry time header can be set on any resource in the system.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
				}),
				"labels": {
					Description: "labels is a set of labels.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "name is an object name.",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"revision": {
					Computed:      true,
					Description:   "revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is the health check config resource's metadata.",
			Required:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"healthy_threshold": {
					Description: "HealthyThreshold is the number of consecutive passing health checks after which a target's health status becomes \"healthy\".",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
				},
				"interval": GenSchemaDuration(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Description: "Interval is the time between each health check.",
					Optional:    true,
				}),
				"match": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"db_labels": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"name": {
									Description: "The name of the label.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"values": {
									Description: "The values associated with the label.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "DBLabels matches database labels. An empty value is ignored. The match result is logically ANDed with DBLabelsExpression, if both are non-empty.",
							Optional:    true,
						},
						"db_labels_expression": {
							Description: "DBLabelsExpression is a label predicate expression to match databases. An empty value is ignored. The match result is logically ANDed with DBLabels, if both are non-empty.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "Match is used to select resources that these settings apply to.",
					Required:    true,
				},
				"timeout": GenSchemaDuration(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Description: "Timeout is the health check connection establishment timeout. An attempt that times out is a failed attempt.",
					Optional:    true,
				}),
				"unhealthy_threshold": {
					Description: "UnhealthyThreshold is the number of consecutive failing health checks after which a target's health status becomes \"unhealthy\".",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
				},
			}),
			Description: "Spec is the health check config specification.",
			Required:    true,
		},
		"sub_kind": {
			Computed:      true,
			Description:   "SubKind is an optional resource sub kind.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Description: "Version is the health check config version.",
			Required:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// CopyHealthCheckConfigFromTerraform copies contents of the source Terraform object into a target struct
func CopyHealthCheckConfigFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_healthcheckconfig_v1.HealthCheckConfig) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"HealthCheckConfig.kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"HealthCheckConfig.sub_kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"HealthCheckConfig.version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"HealthCheckConfig.metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Metadata = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.Metadata{}
					obj := obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.metadata.name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.metadata.namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.metadata.description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.metadata.labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.metadata.labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.metadata.expires"})
						}
						CopyFromTimestamp(diags, a, &obj.Expires)
					}
					{
						a, ok := tf.Attrs["revision"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.metadata.revision"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Revision = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Spec = &github_com_gravitational_teleport_api_gen_proto_go_teleport_healthcheckconfig_v1.HealthCheckConfigSpec{}
					obj := obj.Spec
					{
						a, ok := tf.Attrs["match"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.match"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.match", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Match = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Match = &github_com_gravitational_teleport_api_gen_proto_go_teleport_healthcheckconfig_v1.Matcher{}
									obj := obj.Match
									{
										a, ok := tf.Attrs["db_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.match.db_labels"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DbLabels = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1.Label, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1.Label
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1.Label{}
																obj := t
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.match.db_labels.name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["values"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.match.db_labels.values"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels.values", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Values = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels.values", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Values[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.DbLabels[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["db_labels_expression"]
										if !ok {
											diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.match.db_labels_expression"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels_expression", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.DbLabelsExpression = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["timeout"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.timeout"})
						}
						CopyFromDuration(diags, a, &obj.Timeout)
					}
					{
						a, ok := tf.Attrs["interval"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.interval"})
						}
						CopyFromDuration(diags, a, &obj.Interval)
					}
					{
						a, ok := tf.Attrs["healthy_threshold"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.healthy_threshold"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.healthy_threshold", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
							} else {
								var t uint32
								if !v.Null && !v.Unknown {
									t = uint32(v.Value)
								}
								obj.HealthyThreshold = t
							}
						}
					}
					{
						a, ok := tf.Attrs["unhealthy_threshold"]
						if !ok {
							diags.Append(attrReadMissingDiag{"HealthCheckConfig.spec.unhealthy_threshold"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"HealthCheckConfig.spec.unhealthy_threshold", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
							} else {
								var t uint32
								if !v.Null && !v.Unknown {
									t = uint32(v.Value)
								}
								obj.UnhealthyThreshold = t
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyHealthCheckConfigToTerraform copies contents of the source Terraform object into a target struct
func CopyHealthCheckConfigToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_healthcheckconfig_v1.HealthCheckConfig, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"HealthCheckConfig.kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"HealthCheckConfig.kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"HealthCheckConfig.sub_kind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"HealthCheckConfig.sub_kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"HealthCheckConfig.version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"HealthCheckConfig.version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"HealthCheckConfig.metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Metadata == nil {
					v.Null = true
				} else {
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.metadata.name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"HealthCheckConfig.metadata.name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.metadata.namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"HealthCheckConfig.metadata.namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.metadata.description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"HealthCheckConfig.metadata.description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.metadata.labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"HealthCheckConfig.metadata.labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.metadata.expires"})
						} else {
							v := CopyToTimestamp(diags, obj.Expires, t, tf.Attrs["expires"])
							tf.Attrs["expires"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["revision"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.metadata.revision"})
						} else {
							v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"HealthCheckConfig.metadata.revision", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Revision) == ""
							}
							v.Value = string(obj.Revision)
							v.Unknown = false
							tf.Attrs["revision"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Spec == nil {
					v.Null = true
				} else {
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["match"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.match"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.match", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["match"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Match == nil {
									v.Null = true
								} else {
									obj := obj.Match
									tf := &v
									{
										a, ok := tf.AttrTypes["db_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.match.db_labels"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["db_labels"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DbLabels)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DbLabels))
													}
												}
												if obj.DbLabels != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.DbLabels) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DbLabels))
													}
													for k, a := range obj.DbLabels {
														v, ok := tf.Attrs["db_labels"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.match.db_labels.name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"HealthCheckConfig.spec.match.db_labels.name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["values"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.match.db_labels.values"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels.values", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																		}
																		if obj.Values != nil {
																			t := o.ElemType
																			if len(obj.Values) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																			}
																			for k, a := range obj.Values {
																				v, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"HealthCheckConfig.spec.match.db_labels.values", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels.values", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Values) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["values"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DbLabels) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["db_labels"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["db_labels_expression"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.match.db_labels_expression"})
										} else {
											v, ok := tf.Attrs["db_labels_expression"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"HealthCheckConfig.spec.match.db_labels_expression", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.match.db_labels_expression", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.DbLabelsExpression) == ""
											}
											v.Value = string(obj.DbLabelsExpression)
											v.Unknown = false
											tf.Attrs["db_labels_expression"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["match"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["timeout"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.timeout"})
						} else {
							v := CopyToDuration(diags, obj.Timeout, t, tf.Attrs["timeout"])
							tf.Attrs["timeout"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["interval"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.interval"})
						} else {
							v := CopyToDuration(diags, obj.Interval, t, tf.Attrs["interval"])
							tf.Attrs["interval"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["healthy_threshold"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.healthy_threshold"})
						} else {
							v, ok := tf.Attrs["healthy_threshold"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"HealthCheckConfig.spec.healthy_threshold", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.healthy_threshold", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
								}
								v.Null = int64(obj.HealthyThreshold) == 0
							}
							v.Value = int64(obj.HealthyThreshold)
							v.Unknown = false
							tf.Attrs["healthy_threshold"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["unhealthy_threshold"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"HealthCheckConfig.spec.unhealthy_threshold"})
						} else {
							v, ok := tf.Attrs["unhealthy_threshold"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"HealthCheckConfig.spec.unhealthy_threshold", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"HealthCheckConfig.spec.unhealthy_threshold", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
								}
								v.Null = int64(obj.UnhealthyThreshold) == 0
							}
							v.Value = int64(obj.UnhealthyThreshold)
							v.Unknown = false
							tf.Attrs["unhealthy_threshold"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
