/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/loginrule/v1/loginrule.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"
	time "time"

	proto "github.com/gogo/protobuf/proto"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_loginrule_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/loginrule/v1"
	_ "github.com/gravitational/teleport/api/types"
	github_com_gravitational_teleport_api_types "github.com/gravitational/teleport/api/types"
	github_com_gravitational_teleport_api_types_wrappers "github.com/gravitational/teleport/api/types/wrappers"
	github_com_gravitational_teleport_integrations_terraform_tfschema "github.com/gravitational/teleport/integrations/terraform/tfschema"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// GenSchemaLoginRule returns tfsdk.Schema definition for LoginRule
func GenSchemaLoginRule(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        github_com_gravitational_teleport_integrations_terraform_tfschema.UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"revision": {
					Description: "Revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is resource metadata.",
			Optional:    true,
		},
		"priority": {
			Description: "Priority is the priority of the login rule relative to other login rules in the same cluster. Login rules with a lower numbered priority will be evaluated first.",
			Required:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
		},
		"traits_expression": {
			Description: "TraitsExpression is a predicate expression which should return the desired traits for the user upon login.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"traits_map": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.MapNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"values": {
				Description: "",
				Optional:    true,
				Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
			}}),
			Description: "TraitsMap is a map of trait keys to lists of predicate expressions which should evaluate to the desired values for that trait.",
			Optional:    true,
		},
		"version": {
			Description: "Version is the resource version.",
			Required:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// CopyLoginRuleFromTerraform copies contents of the source Terraform object into a target struct
func CopyLoginRuleFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_loginrule_v1.LoginRule) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginRule.metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Metadata = &github_com_gravitational_teleport_api_types.Metadata{}
					obj := obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"LoginRule.metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"LoginRule.metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"LoginRule.metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"LoginRule.metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"LoginRule.metadata.Expires"})
						} else {
							v, ok := a.(github_com_gravitational_teleport_integrations_terraform_tfschema.TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata.Expires", "github.com/gravitational/teleport/integrations/terraform/tfschema.TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
					{
						a, ok := tf.Attrs["revision"]
						if !ok {
							diags.Append(attrReadMissingDiag{"LoginRule.metadata.Revision"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"LoginRule.metadata.Revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Revision = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginRule.version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"LoginRule.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["priority"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginRule.priority"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"LoginRule.priority", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
			} else {
				var t int32
				if !v.Null && !v.Unknown {
					t = int32(v.Value)
				}
				obj.Priority = t
			}
		}
	}
	{
		a, ok := tf.Attrs["traits_map"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginRule.traits_map"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"LoginRule.traits_map", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
			} else {
				obj.TraitsMap = make(map[string]*github_com_gravitational_teleport_api_types_wrappers.StringValues, len(v.Elems))
				if !v.Null && !v.Unknown {
					for k, a := range v.Elems {
						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
						if !ok {
							diags.Append(attrReadConversionFailureDiag{"LoginRule.traits_map", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
						} else {
							var t *github_com_gravitational_teleport_api_types_wrappers.StringValues
							if !v.Null && !v.Unknown {
								tf := v
								t = &github_com_gravitational_teleport_api_types_wrappers.StringValues{}
								obj := t
								{
									a, ok := tf.Attrs["values"]
									if !ok {
										diags.Append(attrReadMissingDiag{"LoginRule.traits_map.Values"})
									} else {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"LoginRule.traits_map.Values", "github.com/hashicorp/terraform-plugin-framework/types.List"})
										} else {
											obj.Values = make([]string, len(v.Elems))
											if !v.Null && !v.Unknown {
												for k, a := range v.Elems {
													v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														diags.Append(attrReadConversionFailureDiag{"LoginRule.traits_map.Values", "github_com_hashicorp_terraform_plugin_framework_types.String"})
													} else {
														var t string
														if !v.Null && !v.Unknown {
															t = string(v.Value)
														}
														obj.Values[k] = t
													}
												}
											}
										}
									}
								}
							}
							obj.TraitsMap[k] = t
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["traits_expression"]
		if !ok {
			diags.Append(attrReadMissingDiag{"LoginRule.traits_expression"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"LoginRule.traits_expression", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.TraitsExpression = t
			}
		}
	}
	return diags
}

// CopyLoginRuleToTerraform copies contents of the source Terraform object into a target struct
func CopyLoginRuleToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_loginrule_v1.LoginRule, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"LoginRule.metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Metadata == nil {
					v.Null = true
				} else {
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"LoginRule.metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"LoginRule.metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"LoginRule.metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"LoginRule.metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"LoginRule.metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"LoginRule.metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"LoginRule.metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"LoginRule.metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"LoginRule.metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(github_com_gravitational_teleport_integrations_terraform_tfschema.TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"LoginRule.metadata.Expires", err})
								}
								v, ok = i.(github_com_gravitational_teleport_integrations_terraform_tfschema.TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata.Expires", "github.com/gravitational/teleport/integrations/terraform/tfschema.TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["revision"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"LoginRule.metadata.Revision"})
						} else {
							v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"LoginRule.metadata.Revision", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"LoginRule.metadata.Revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Revision) == ""
							}
							v.Value = string(obj.Revision)
							v.Unknown = false
							tf.Attrs["revision"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"LoginRule.version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"LoginRule.version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"LoginRule.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["priority"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"LoginRule.priority"})
		} else {
			v, ok := tf.Attrs["priority"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"LoginRule.priority", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"LoginRule.priority", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
				}
				v.Null = int64(obj.Priority) == 0
			}
			v.Value = int64(obj.Priority)
			v.Unknown = false
			tf.Attrs["priority"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["traits_map"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"LoginRule.traits_map"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"LoginRule.traits_map", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
			} else {
				c, ok := tf.Attrs["traits_map"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
				if !ok {
					c = github_com_hashicorp_terraform_plugin_framework_types.Map{

						ElemType: o.ElemType,
						Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TraitsMap)),
						Null:     true,
					}
				} else {
					if c.Elems == nil {
						c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TraitsMap))
					}
				}
				if obj.TraitsMap != nil {
					o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
					for k, a := range obj.TraitsMap {
						v, ok := tf.Attrs["traits_map"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
						if !ok {
							v = github_com_hashicorp_terraform_plugin_framework_types.Object{

								AttrTypes: o.AttrTypes,
								Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
							}
						} else {
							if v.Attrs == nil {
								v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
							}
						}
						if a == nil {
							v.Null = true
						} else {
							obj := a
							tf := &v
							{
								a, ok := tf.AttrTypes["values"]
								if !ok {
									diags.Append(attrWriteMissingDiag{"LoginRule.traits_map.Values"})
								} else {
									o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
									if !ok {
										diags.Append(attrWriteConversionFailureDiag{"LoginRule.traits_map.Values", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
									} else {
										c, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.List)
										if !ok {
											c = github_com_hashicorp_terraform_plugin_framework_types.List{

												ElemType: o.ElemType,
												Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values)),
												Null:     true,
											}
										} else {
											if c.Elems == nil {
												c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
											}
										}
										if obj.Values != nil {
											t := o.ElemType
											if len(obj.Values) != len(c.Elems) {
												c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
											}
											for k, a := range obj.Values {
												v, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
													if err != nil {
														diags.Append(attrWriteGeneralError{"LoginRule.traits_map.Values", err})
													}
													v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"LoginRule.traits_map.Values", "github.com/hashicorp/terraform-plugin-framework/types.String"})
													}
													v.Null = string(a) == ""
												}
												v.Value = string(a)
												v.Unknown = false
												c.Elems[k] = v
											}
											if len(obj.Values) > 0 {
												c.Null = false
											}
										}
										c.Unknown = false
										tf.Attrs["values"] = c
									}
								}
							}
						}
						v.Unknown = false
						c.Elems[k] = v
					}
					if len(obj.TraitsMap) > 0 {
						c.Null = false
					}
				}
				c.Unknown = false
				tf.Attrs["traits_map"] = c
			}
		}
	}
	{
		t, ok := tf.AttrTypes["traits_expression"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"LoginRule.traits_expression"})
		} else {
			v, ok := tf.Attrs["traits_expression"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"LoginRule.traits_expression", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"LoginRule.traits_expression", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.TraitsExpression) == ""
			}
			v.Value = string(obj.TraitsExpression)
			v.Unknown = false
			tf.Attrs["traits_expression"] = v
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
