/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/userprovisioning/v2/statichostuser.proto

package v2

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/header/v1"
	_ "github.com/gravitational/teleport/api/gen/proto/go/teleport/label/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/label/v1"
	github_com_gravitational_teleport_api_gen_proto_go_teleport_userprovisioning_v2 "github.com/gravitational/teleport/api/gen/proto/go/teleport/userprovisioning/v2"
	github_com_gravitational_teleport_integrations_terraform_tfschema "github.com/gravitational/teleport/integrations/terraform/tfschema"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenSchemaStaticHostUser returns tfsdk.Schema definition for StaticHostUser
func GenSchemaStaticHostUser(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "kind is a resource kind.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "description is object description.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": GenSchemaTimestamp(ctx, github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					Description: "expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{github_com_gravitational_teleport_integrations_terraform_tfschema.MustTimeBeInFuture()},
				}),
				"labels": {
					Description: "labels is a set of labels.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "name is an object name.",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"revision": {
					Description: "revision is an opaque identifier which tracks the versions of a resource over time. Clients should ignore and not alter its value but must return the revision in any updates of a resource.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "metadata is resource metadata.",
			Required:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"matchers": {
				Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
					"default_shell": {
						Description: "default_shell is the new user's default shell",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
					},
					"gid": {
						Description: "gid is the new user's gid.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
					},
					"groups": {
						Description: "groups is a list of additional groups to add the user to.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
					},
					"node_labels": {
						Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
							"name": {
								Description: "The name of the label.",
								Required:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
							},
							"values": {
								Description: "The values associated with the label.",
								Required:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
							},
						}),
						Description: "node_labels is a map of node labels that will create a user from this resource.",
						Optional:    true,
					},
					"node_labels_expression": {
						Description: "node_labels_expression is a predicate expression to create a user from this resource.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
					},
					"sudoers": {
						Description: "sudoers is a list of sudoer entries to add.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
					},
					"take_ownership_if_user_exists": {
						Description: "take_ownership_if_user_exists will take ownership of existing, unmanaged users",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
					},
					"uid": {
						Description: "uid is the new user's uid.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
					},
				}),
				Description: "",
				Required:    true,
			}}),
			Description: "spec is the static host user spec.",
			Required:    true,
		},
		"sub_kind": {
			Description: "sub_kind is an optional resource sub kind, used in some resources.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Description: "version is the resource version. It must be specified. Supported values are: `v2`.",
			Required:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// CopyStaticHostUserFromTerraform copies contents of the source Terraform object into a target struct
func CopyStaticHostUserFromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_userprovisioning_v2.StaticHostUser) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"StaticHostUser.kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"StaticHostUser.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"StaticHostUser.sub_kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"StaticHostUser.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"StaticHostUser.version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"StaticHostUser.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"StaticHostUser.metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"StaticHostUser.metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Metadata = &github_com_gravitational_teleport_api_gen_proto_go_teleport_header_v1.Metadata{}
					obj := obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"StaticHostUser.metadata.name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"StaticHostUser.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"StaticHostUser.metadata.namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"StaticHostUser.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"StaticHostUser.metadata.description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"StaticHostUser.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"StaticHostUser.metadata.labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"StaticHostUser.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"StaticHostUser.metadata.labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"StaticHostUser.metadata.expires"})
						}
						CopyFromTimestamp(diags, a, &obj.Expires)
					}
					{
						a, ok := tf.Attrs["revision"]
						if !ok {
							diags.Append(attrReadMissingDiag{"StaticHostUser.metadata.revision"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"StaticHostUser.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Revision = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"StaticHostUser.spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = nil
				if !v.Null && !v.Unknown {
					tf := v
					obj.Spec = &github_com_gravitational_teleport_api_gen_proto_go_teleport_userprovisioning_v2.StaticHostUserSpec{}
					obj := obj.Spec
					{
						a, ok := tf.Attrs["matchers"]
						if !ok {
							diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Matchers = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_userprovisioning_v2.Matcher, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_userprovisioning_v2.Matcher
											if !v.Null && !v.Unknown {
												tf := v
												t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_userprovisioning_v2.Matcher{}
												obj := t
												{
													a, ok := tf.Attrs["node_labels"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.node_labels"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.NodeLabels = make([]*github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1.Label, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																	} else {
																		var t *github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1.Label
																		if !v.Null && !v.Unknown {
																			tf := v
																			t = &github_com_gravitational_teleport_api_gen_proto_go_teleport_label_v1.Label{}
																			obj := t
																			{
																				a, ok := tf.Attrs["name"]
																				if !ok {
																					diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.node_labels.name"})
																				} else {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Name = t
																					}
																				}
																			}
																			{
																				a, ok := tf.Attrs["values"]
																				if !ok {
																					diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.node_labels.values"})
																				} else {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels.values", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																					} else {
																						obj.Values = make([]string, len(v.Elems))
																						if !v.Null && !v.Unknown {
																							for k, a := range v.Elems {
																								v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels.values", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																								} else {
																									var t string
																									if !v.Null && !v.Unknown {
																										t = string(v.Value)
																									}
																									obj.Values[k] = t
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																		obj.NodeLabels[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["node_labels_expression"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.node_labels_expression"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels_expression", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.NodeLabelsExpression = t
														}
													}
												}
												{
													a, ok := tf.Attrs["groups"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.groups"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.groups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Groups = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.groups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Groups[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["sudoers"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.sudoers"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.sudoers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Sudoers = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.sudoers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Sudoers[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["uid"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.uid"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.uid", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
														} else {
															var t int64
															if !v.Null && !v.Unknown {
																t = int64(v.Value)
															}
															obj.Uid = t
														}
													}
												}
												{
													a, ok := tf.Attrs["gid"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.gid"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.gid", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
														} else {
															var t int64
															if !v.Null && !v.Unknown {
																t = int64(v.Value)
															}
															obj.Gid = t
														}
													}
												}
												{
													a, ok := tf.Attrs["default_shell"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.default_shell"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.default_shell", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DefaultShell = t
														}
													}
												}
												{
													a, ok := tf.Attrs["take_ownership_if_user_exists"]
													if !ok {
														diags.Append(attrReadMissingDiag{"StaticHostUser.spec.matchers.take_ownership_if_user_exists"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"StaticHostUser.spec.matchers.take_ownership_if_user_exists", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
														} else {
															var t bool
															if !v.Null && !v.Unknown {
																t = bool(v.Value)
															}
															obj.TakeOwnershipIfUserExists = t
														}
													}
												}
											}
											obj.Matchers[k] = t
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyStaticHostUserToTerraform copies contents of the source Terraform object into a target struct
func CopyStaticHostUserToTerraform(ctx context.Context, obj *github_com_gravitational_teleport_api_gen_proto_go_teleport_userprovisioning_v2.StaticHostUser, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"StaticHostUser.kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"StaticHostUser.kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"StaticHostUser.sub_kind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"StaticHostUser.sub_kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.sub_kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"StaticHostUser.version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"StaticHostUser.version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"StaticHostUser.metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Metadata == nil {
					v.Null = true
				} else {
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"StaticHostUser.metadata.name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"StaticHostUser.metadata.name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.metadata.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"StaticHostUser.metadata.namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"StaticHostUser.metadata.namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.metadata.namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"StaticHostUser.metadata.description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"StaticHostUser.metadata.description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.metadata.description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"StaticHostUser.metadata.labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"StaticHostUser.metadata.labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.metadata.labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"StaticHostUser.metadata.expires"})
						} else {
							v := CopyToTimestamp(diags, obj.Expires, t, tf.Attrs["expires"])
							tf.Attrs["expires"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["revision"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"StaticHostUser.metadata.revision"})
						} else {
							v, ok := tf.Attrs["revision"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"StaticHostUser.metadata.revision", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.metadata.revision", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Revision) == ""
							}
							v.Value = string(obj.Revision)
							v.Unknown = false
							tf.Attrs["revision"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"StaticHostUser.spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				if obj.Spec == nil {
					v.Null = true
				} else {
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["matchers"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["matchers"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Matchers)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Matchers))
									}
								}
								if obj.Matchers != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.Matchers) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Matchers))
									}
									for k, a := range obj.Matchers {
										v, ok := tf.Attrs["matchers"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										if a == nil {
											v.Null = true
										} else {
											obj := a
											tf := &v
											{
												a, ok := tf.AttrTypes["node_labels"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.node_labels"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["node_labels"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.NodeLabels)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.NodeLabels))
															}
														}
														if obj.NodeLabels != nil {
															o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
															if len(obj.NodeLabels) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.NodeLabels))
															}
															for k, a := range obj.NodeLabels {
																v, ok := tf.Attrs["node_labels"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																if !ok {
																	v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																		AttrTypes: o.AttrTypes,
																		Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																	}
																} else {
																	if v.Attrs == nil {
																		v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																	}
																}
																if a == nil {
																	v.Null = true
																} else {
																	obj := a
																	tf := &v
																	{
																		t, ok := tf.AttrTypes["name"]
																		if !ok {
																			diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.node_labels.name"})
																		} else {
																			v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																				if err != nil {
																					diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.node_labels.name", err})
																				}
																				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels.name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																				}
																				v.Null = string(obj.Name) == ""
																			}
																			v.Value = string(obj.Name)
																			v.Unknown = false
																			tf.Attrs["name"] = v
																		}
																	}
																	{
																		a, ok := tf.AttrTypes["values"]
																		if !ok {
																			diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.node_labels.values"})
																		} else {
																			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels.values", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																			} else {
																				c, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																				if !ok {
																					c = github_com_hashicorp_terraform_plugin_framework_types.List{

																						ElemType: o.ElemType,
																						Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values)),
																						Null:     true,
																					}
																				} else {
																					if c.Elems == nil {
																						c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																					}
																				}
																				if obj.Values != nil {
																					t := o.ElemType
																					if len(obj.Values) != len(c.Elems) {
																						c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Values))
																					}
																					for k, a := range obj.Values {
																						v, ok := tf.Attrs["values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																							if err != nil {
																								diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.node_labels.values", err})
																							}
																							v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																							if !ok {
																								diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels.values", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																							}
																							v.Null = string(a) == ""
																						}
																						v.Value = string(a)
																						v.Unknown = false
																						c.Elems[k] = v
																					}
																					if len(obj.Values) > 0 {
																						c.Null = false
																					}
																				}
																				c.Unknown = false
																				tf.Attrs["values"] = c
																			}
																		}
																	}
																}
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.NodeLabels) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["node_labels"] = c
													}
												}
											}
											{
												t, ok := tf.AttrTypes["node_labels_expression"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.node_labels_expression"})
												} else {
													v, ok := tf.Attrs["node_labels_expression"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.node_labels_expression", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.node_labels_expression", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.NodeLabelsExpression) == ""
													}
													v.Value = string(obj.NodeLabelsExpression)
													v.Unknown = false
													tf.Attrs["node_labels_expression"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["groups"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.groups"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.groups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Groups)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Groups))
															}
														}
														if obj.Groups != nil {
															t := o.ElemType
															if len(obj.Groups) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Groups))
															}
															for k, a := range obj.Groups {
																v, ok := tf.Attrs["groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.groups", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.groups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Groups) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["groups"] = c
													}
												}
											}
											{
												a, ok := tf.AttrTypes["sudoers"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.sudoers"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.sudoers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["sudoers"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Sudoers)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Sudoers))
															}
														}
														if obj.Sudoers != nil {
															t := o.ElemType
															if len(obj.Sudoers) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Sudoers))
															}
															for k, a := range obj.Sudoers {
																v, ok := tf.Attrs["sudoers"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.sudoers", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.sudoers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Sudoers) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["sudoers"] = c
													}
												}
											}
											{
												t, ok := tf.AttrTypes["uid"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.uid"})
												} else {
													v, ok := tf.Attrs["uid"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.uid", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.uid", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
														}
														v.Null = int64(obj.Uid) == 0
													}
													v.Value = int64(obj.Uid)
													v.Unknown = false
													tf.Attrs["uid"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["gid"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.gid"})
												} else {
													v, ok := tf.Attrs["gid"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.gid", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.gid", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
														}
														v.Null = int64(obj.Gid) == 0
													}
													v.Value = int64(obj.Gid)
													v.Unknown = false
													tf.Attrs["gid"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["default_shell"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.default_shell"})
												} else {
													v, ok := tf.Attrs["default_shell"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.default_shell", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.default_shell", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.DefaultShell) == ""
													}
													v.Value = string(obj.DefaultShell)
													v.Unknown = false
													tf.Attrs["default_shell"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["take_ownership_if_user_exists"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"StaticHostUser.spec.matchers.take_ownership_if_user_exists"})
												} else {
													v, ok := tf.Attrs["take_ownership_if_user_exists"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"StaticHostUser.spec.matchers.take_ownership_if_user_exists", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"StaticHostUser.spec.matchers.take_ownership_if_user_exists", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
														}
														v.Null = bool(obj.TakeOwnershipIfUserExists) == false
													}
													v.Value = bool(obj.TakeOwnershipIfUserExists)
													v.Unknown = false
													tf.Attrs["take_ownership_if_user_exists"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Matchers) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["matchers"] = c
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
