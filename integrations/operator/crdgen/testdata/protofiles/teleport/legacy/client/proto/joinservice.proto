/*
 * Teleport
 * Copyright (C) 2023  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package proto;

import "teleport/legacy/client/proto/certs.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/client/proto";

// TODO(nklaassen): Document me.
message RegisterUsingIAMMethodRequest {
  // RegisterUsingTokenRequest holds registration parameters common to all
  // join methods.
  types.RegisterUsingTokenRequest register_using_token_request = 1;
  // StsIdentityRequest is a signed HTTP request to the AWS
  // sts:GetCallerIdentity API endpoint used to prove the AWS identity of a
  // joining node. It must include the challenge string as a signed header.
  bytes sts_identity_request = 2;
}

// RegisterUsingIAMMethodResponse is a stream response and will contain either a
// Challenge or signed Certs to join the cluster.
message RegisterUsingIAMMethodResponse {
  // Challenge is a crypto-random string that should be included in the signed
  // sts:GetCallerIdentity request.
  string challenge = 1;
  // Certs is the returned signed certs.
  Certs certs = 2;
}

// RegisterUsingAzureMethodRequest is the request for registration via the Azure
// join method.
message RegisterUsingAzureMethodRequest {
  // RegisterUsingTokenRequest holds registration parameters common to all
  // join methods.
  types.RegisterUsingTokenRequest register_using_token_request = 1;
  // AttestedData is a signed JSON document from an Azure VM's attested data
  // metadata endpoint used to prove the identity of a joining node. It must
  // include the challenge string as the nonce.
  bytes attested_data = 2;
  // AccessToken is a JWT signed by Azure, used to prove the identity of a
  // joining node.
  string access_token = 3;
}

// RegisterUsingAzureMethodResponse is a stream response and will contain either
// a Challenge or signed Certs to join the cluster.
message RegisterUsingAzureMethodResponse {
  // Challenge is a crypto-random string that should be included in the signed
  // attested data.
  string challenge = 1;
  // Certs is the returned signed certs.
  Certs certs = 2;
}

// JoinService provides methods which allow Teleport nodes, proxies, and other
// services to join the Teleport cluster by fetching signed cluster
// certificates. It is implemented on both the Auth and Proxy servers to serve
// the needs of both nodes connecting directly to the Auth server and IoT mode
// nodes connecting only to the Proxy.
service JoinService {
  // RegisterUsingIAMMethod is used to register a new node to the cluster using
  // the IAM join method.
  rpc RegisterUsingIAMMethod(stream RegisterUsingIAMMethodRequest) returns (stream RegisterUsingIAMMethodResponse);
  // RegisterUsingAzureMethod is used to register a new node to the cluster
  // using the Azure join method.
  rpc RegisterUsingAzureMethod(stream RegisterUsingAzureMethodRequest) returns (stream RegisterUsingAzureMethodResponse);
}
