/*
 * Teleport
 * Copyright (C) 2023  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package proto;

import "gogoproto/gogo.proto";

option go_package = "github.com/gravitational/teleport/api/client/proto";

// ProxyPeerService is a proxy to proxy api.
service ProxyService {
  // DialNode opens a bidrectional stream to the requested node.
  rpc DialNode(stream Frame) returns (stream Frame);
}

// Frame wraps different message types to be sent over a stream.
message Frame {
  oneof Message {
    DialRequest DialRequest = 1;
    ConnectionEstablished ConnectionEstablished = 2;
    Data Data = 3;
  }
}

// DialRequest contains details for connecting to a node.
message DialRequest {
  // NodeID is the {UUID}.{ClusterName} of the node to connect to.
  string NodeID = 1;
  // TunnelType is the type of service being accessed. This differentiates agents that
  // create multiple reverse tunnels for different services.
  string TunnelType = 2 [(gogoproto.casttype) = "github.com/gravitational/teleport/api/types.TunnelType"];
  // Source is the original source address of the client.
  NetAddr Source = 3;
  // Destination is the destination address to connect to over the reverse tunnel.
  NetAddr Destination = 4;
}

// Addr is a network address.
message NetAddr {
  // Network is the type of network socket. For example tcp or udp.
  string Network = 1;
  // Addr is the host:port address. For example 'localhost:22'
  string Addr = 2;
}

// Data contains the raw bytes of a connection.
message Data {
  bytes Bytes = 1;
}

// ConnectionEstablished signals to the client a connection to the node has been established.
message ConnectionEstablished {}
