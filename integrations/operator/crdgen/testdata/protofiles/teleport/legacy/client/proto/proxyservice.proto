// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;

import "gogoproto/gogo.proto";

option go_package = "github.com/gravitational/teleport/api/client/proto";

// ProxyPeerService is a proxy to proxy api.
service ProxyService {
  // DialNode opens a bidrectional stream to the requested node.
  rpc DialNode(stream Frame) returns (stream Frame);
}

// Frame wraps different message types to be sent over a stream.
message Frame {
  oneof Message {
    DialRequest DialRequest = 1;
    ConnectionEstablished ConnectionEstablished = 2;
    Data Data = 3;
  }
}

// DialRequest contains details for connecting to a node.
message DialRequest {
  // NodeID is the {UUID}.{ClusterName} of the node to connect to.
  string NodeID = 1;
  // TunnelType is the type of service being accessed. This differentiates agents that
  // create multiple reverse tunnels for different services.
  string TunnelType = 2 [(gogoproto.casttype) = "github.com/gravitational/teleport/api/types.TunnelType"];
  // Source is the original source address of the client.
  NetAddr Source = 3;
  // Destination is the destination address to connect to over the reverse tunnel.
  NetAddr Destination = 4;
}

// Addr is a network address.
message NetAddr {
  // Network is the type of network socket. For example tcp or udp.
  string Network = 1;
  // Addr is the host:port address. For example 'localhost:22'
  string Addr = 2;
}

// Data contains the raw bytes of a connection.
message Data {
  bytes Bytes = 1;
}

// ConnectionEstablished signals to the client a connection to the node has been established.
message ConnectionEstablished {}
