// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.machineid.v1;

import "google/protobuf/duration.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/machineid/v1;machineidv1";

// WorkloadIdentityService provides the signing of workload identity documents.
// It currently only supports signing SPIFFE x509 SVIDs.
service WorkloadIdentityService {
  // SignX509SVIDs generates signed x509 SVIDs based on the SVIDs provided in
  // the request.
  rpc SignX509SVIDs(SignX509SVIDsRequest) returns (SignX509SVIDsResponse) {}
  // SignJWTSVIDs generates signed JWT SVIDs based on the requested SVIDs.
  rpc SignJWTSVIDs(SignJWTSVIDsRequest) returns (SignJWTSVIDsResponse) {}
}

// The request for an individual x509 SVID.
message SVIDRequest {
  // A PKIX, ASN.1 DER encoded public key that should be included in the x509
  // SVID.
  // Required.
  bytes public_key = 1;
  // The path that should be included in the SPIFFE ID.
  // This should have a preceding slash and should not have a trailing slash.
  // Required.
  string spiffe_id_path = 2;
  // The DNS SANs that should be included in the x509 SVID.
  // Optional.
  repeated string dns_sans = 3;
  // The IP SANs that should be included in the x509 SVID.
  // Optional.
  repeated string ip_sans = 4;
  // A hint that provides a way of distinguishing between SVIDs. These are
  // user configured and are sent back to the actual workload.
  // Optional.
  string hint = 5;
  // The TTL to use for the x509 SVID. A maximum value is enforced on this
  // field. Callers should inspect the returned cert to determine if their
  // requested TTL has been met, and if not, adjust their behaviour. If not
  // supplied, the default TTL will be the maximum value.
  google.protobuf.Duration ttl = 6;
}

// The generated x509 SVID.
message SVIDResponse {
  // A ASN.1 DER encoded x509 SVID.
  bytes certificate = 1;
  // The full SPIFFE ID that was included in the x509 SVID.
  string spiffe_id = 2;
  // The hint that was included in SVIDRequest in order to allow a workload to
  // distinguish an individual SVID.
  string hint = 3;
}

// The request for SignX509SVIDs.
message SignX509SVIDsRequest {
  // The SVIDs that should be generated. This is repeated to allow a bot to
  // request multiple SVIDs at once and reduce the number of round trips.
  // Must be non-zero length.
  repeated SVIDRequest svids = 1;
}

// The response for SignX509SVIDs.
message SignX509SVIDsResponse {
  // The generated SVIDs.
  repeated SVIDResponse svids = 1;
}

// The request for an individual JWT SVID.
message JWTSVIDRequest {
  // The path that should be included in the SPIFFE ID.
  // This should have a preceding slash and should not have a trailing slash.
  // Required.
  string spiffe_id_path = 1;
  // The value that should be included in the JWT SVID as the `aud` claim.
  // Required.
  repeated string audiences = 2;
  // The TTL to use for the x509 SVID. A maximum value is enforced on this
  // field. Callers should inspect the returned cert to determine if their
  // requested TTL has been met, and if not, adjust their behaviour. If not
  // supplied, the default TTL will be the maximum value.
  google.protobuf.Duration ttl = 3;
  // A hint that provides a way of distinguishing between SVIDs. These are
  // user configured and are sent back to the actual workload.
  // Optional.
  string hint = 4;
}

// The generated JWT SVID.
message JWTSVIDResponse {
  // The JWT SVID.
  string jwt = 1;
  // The JTI that was included in the JWT.
  string jti = 2;
  // The full SPIFFE ID that was included in the x509 SVID.
  string spiffe_id = 3;
  // The audiences that were included in the JWT.
  repeated string audiences = 4;
  // The hint that was included in SVIDRequest in order to allow a workload to
  // distinguish an individual SVID.
  string hint = 5;
}

// The request for SignJWTSVIDs.
message SignJWTSVIDsRequest {
  repeated JWTSVIDRequest svids = 1;
}

// The response for SignJWTSVIDs.
message SignJWTSVIDsResponse {
  repeated JWTSVIDResponse svids = 1;
}
