// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.loginrule.v1;

import "google/protobuf/empty.proto";
import "teleport/legacy/types/wrappers/wrappers.proto";
import "teleport/loginrule/v1/loginrule.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/loginrule/v1;loginrulev1";

// LoginRuleService provides CRUD methods for the LoginRule resource.
service LoginRuleService {
  // CreateLoginRule creates a login rule if one with the same name does not
  // already exist, else it returns an error.
  rpc CreateLoginRule(CreateLoginRuleRequest) returns (LoginRule);

  // UpsertLoginRule creates a login rule if one with the same name does not
  // already exist, else it replaces the existing login rule.
  rpc UpsertLoginRule(UpsertLoginRuleRequest) returns (LoginRule);

  // GetLoginRule retrieves a login rule described by the given request.
  rpc GetLoginRule(GetLoginRuleRequest) returns (LoginRule);

  // ListLoginRules lists all login rules.
  rpc ListLoginRules(ListLoginRulesRequest) returns (ListLoginRulesResponse);

  // DeleteLoginRule deletes an existing login rule.
  rpc DeleteLoginRule(DeleteLoginRuleRequest) returns (google.protobuf.Empty);

  // TestLoginRule evaluates login rules against provided user traits
  // to test that the output matches expectations prior to them being enforced and
  // potentially locking out users.
  rpc TestLoginRule(TestLoginRuleRequest) returns (TestLoginRuleResponse);
}

// CreateLoginRuleRequest is a request to create a login rule.
message CreateLoginRuleRequest {
  // LoginRule is the login rule to be created.
  LoginRule login_rule = 1;
}

// UpsertLoginRuleRequest is a request to upsert a login rule.
message UpsertLoginRuleRequest {
  // LoginRule is the login rule to be created.
  LoginRule login_rule = 1;
}

// GetLoginRuleRequest is a request to get a single login rule.
message GetLoginRuleRequest {
  // Name is the name of the login rule to get.
  string name = 1;
}

// ListLoginRulesRequest is a paginated request to list all login rules.
message ListLoginRulesRequest {
  // PageSize is The maximum number of login rules to return in a single
  // reponse.
  int32 page_size = 1;

  // PageToken is the NextPageToken value returned from a previous
  // ListLoginRules request, if any.
  string page_token = 2;
}

// ListLoginRulesResponse is a paginated response to a ListLoginRulesRequest.
message ListLoginRulesResponse {
  // LoginRules is the list of login rules.
  repeated LoginRule login_rules = 1;

  // NextPageToken is a token to retrieve the next page of results, or empty
  // if there are no more results.
  string next_page_token = 2;
}

// DeleteLoginRuleRequest is a request to delete a login rule.
message DeleteLoginRuleRequest {
  // Name is the name of the login rule to delete.
  string name = 1;
}

// TestLoginRuleRequest is a request to test a login rule against traits.
message TestLoginRuleRequest {
  // LoginRules is the list of the rules to evaluate.
  repeated LoginRule login_rules = 1;
  // Traits are the user traits to test the login rule against.
  map<string, wrappers.StringValues> traits = 4;
  // LoadFromCluster indicates if existing login rules should be included
  // when evaluating rules.
  bool load_from_cluster = 3;
}

// TestLoginRuleResponse is a response to a login rule test.
message TestLoginRuleResponse {
  // Traits contain the output from evaluating the login rules.
  map<string, wrappers.StringValues> traits = 4;
}
