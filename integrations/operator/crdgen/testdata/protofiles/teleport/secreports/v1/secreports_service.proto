// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.secreports.v1;

import "google/protobuf/empty.proto";
import "teleport/header/v1/resourceheader.proto";
import "teleport/secreports/v1/secreports.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/secreports/v1;secreportsv1";

// SecReportsService is a service that manages security reports.
service SecReportsService {
  // UpsertAuditQuery upsets an audit query.
  rpc UpsertAuditQuery(UpsertAuditQueryRequest) returns (google.protobuf.Empty);
  // GetAuditQuery returns an audit query.
  rpc GetAuditQuery(GetAuditQueryRequest) returns (AuditQuery);
  // ListAuditQueries returns a paginated list of all Okta import rule resources.
  rpc ListAuditQueries(ListAuditQueriesRequest) returns (ListAuditQueriesResponse);
  // DeleteAuditQuery deletes an audit query.
  rpc DeleteAuditQuery(DeleteAuditQueryRequest) returns (google.protobuf.Empty);

  // UpsertReport upsets a report.
  rpc UpsertReport(UpsertReportRequest) returns (google.protobuf.Empty);
  // GetReport returns a report.
  rpc GetReport(GetReportRequest) returns (Report);
  // ListReports returns a paginated list of all Okta import rule resources.
  rpc ListReports(ListReportsRequest) returns (ListReportsResponse);
  // DeleteReport deletes a security report.
  rpc DeleteReport(DeleteReportRequest) returns (google.protobuf.Empty);

  // RunAuditQuery runs an audit query.
  rpc RunAuditQuery(RunAuditQueryRequest) returns (RunAuditQueryResponse);
  // GetAuditQueryResult returns an audit query result.
  rpc GetAuditQueryResult(GetAuditQueryResultRequest) returns (GetAuditQueryResultResponse);

  // RunReport runs a security report.
  rpc RunReport(RunReportRequest) returns (google.protobuf.Empty);
  // GetReportResult returns a security report result.
  rpc GetReportResult(GetReportResultRequest) returns (GetReportResultResponse);
  // GetReportState returns a security report state.
  rpc GetReportState(GetReportStateRequest) returns (ReportState);

  // GetSchema returns a schema of audit query.
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);
}

// GetAuditQueryResultRequest is a request for GetAuditQueryResult.
message GetAuditQueryResultRequest {
  // result_id is a unique id of the result.
  string result_id = 1;
  // next_token is a token for pagination.
  string next_token = 2;
  // max_results is a maximum number of results to return.
  int32 max_results = 3;
}

// QueryResultColumnInfo is a column info.
message QueryResultColumnInfo {
  // name is name of the column.
  string name = 1;
  // type is type of the column.
  string type = 2;
}

// QueryRowResult is a row result.
message QueryRowResult {
  // data is a list of values.
  repeated string data = 1;
}

// QueryResultSet is a result set.
message QueryResultSet {
  // column_info contains information about columns.
  repeated QueryResultColumnInfo column_info = 1;
  // rows  is a list of rows containing values.
  repeated QueryRowResult rows = 2;
}

// GetAuditQueryResultResponse contains an audit query result.
message GetAuditQueryResultResponse {
  // result is a result set.
  QueryResultSet result = 1;
  // next_token is a token for pagination.
  string next_token = 2;
  // result_id is a unique id of the result.
  string result_id = 3;
}

// RunReportRequest is a request for RunReport.
message RunReportRequest {
  // name is a name of the security report.
  string name = 1;
  // days is a time range is days.
  uint32 days = 2;
}

// GetStateRequest is a request for GetReportState.
message GetReportStateRequest {
  // name is a name of the security report.
  string name = 1;
  // days is a time range is days.
  uint32 days = 2;
}

// DeleteAuditQueryRequest is audit query delete request.
message DeleteAuditQueryRequest {
  // name is the name of the audit query to delete.
  string name = 1;
}

// DeleteReportRequest is security report delete request.
message DeleteReportRequest {
  // name is the name of the security report to delete.
  string name = 1;
}

// RunAuditQueryRequest is audit query run request.
message RunAuditQueryRequest {
  // name is the name of the audit query to run.
  string query = 1;
  // days is a time range is days.
  int32 days = 2;
}

// UpsertAuditQueryRequest is audit query upsert request.
message UpsertAuditQueryRequest {
  // audit_query is the audit query to upsert.
  AuditQuery audit_query = 1;
}

// UpsertReportRequest is security report upsert request.
message UpsertReportRequest {
  // report is the security report to upsert.
  Report report = 1;
}

// GetAuditQueryRequest is audit query get request.
message GetAuditQueryRequest {
  // name is the name of the audit query to get.
  string name = 1;
}

// GetReportRequest is security report get request.
message GetReportRequest {
  // name is the name of the security report to get.
  string name = 1;
}

// GetReportResultRequest is report get request.
message GetReportResultRequest {
  // name is the name of the security report to get.
  string name = 1;
  // days is a time range is days.
  uint32 days = 2;
  // execution_id is a unique id of the execution.
  string execution_id = 3;
}

// ListAuditQueriesRequest is audit query list request.
message ListAuditQueriesRequest {
  // page_size is the number of results to return.
  int32 page_size = 1;
  // page_token is the next_token value returned from a previous List request if any.
  string page_token = 2;
}

// ListAuditQueryResponse is audit query list response.
message ListReportsRequest {
  // page_size is the number of results to return.
  int32 page_size = 1;
  // page_token is the next_token value returned from a previous List request if any.
  string page_token = 2;
}

// ListAuditQueriesResponse is audit query list response.
message ListAuditQueriesResponse {
  // queries is a list of audit queries.
  repeated AuditQuery queries = 1;
  // next_page_token is the next page token. If there are no more results, it will be empty.
  string next_page_token = 2;
}

// GetSchemaRequest is a request for GetSchema.
message GetSchemaRequest {}

// GetSchemaResponse is a response for GetSchema.
message GetSchemaResponse {
  // ViewDesc is a description of view.
  message ViewDesc {
    // ColumnDesc is a description of column.
    message ColumnDesc {
      // name is the name of the column.
      string name = 1;
      // type is the type of the column.
      string type = 2;
      // desc is the description of the column.
      string desc = 3;
    }
    // name is the name of the view.
    string name = 1;
    // desc is the description of the view.
    string desc = 2;
    // columns is the list of columns.
    repeated ColumnDesc columns = 3;
  }
  // views is the list of views.
  repeated ViewDesc views = 1;
}

// RunAuditQueryResponse is audit query run response.
message RunAuditQueryResponse {
  // result_id is a unique id of the result.
  string result_id = 1;
}

// ListReportResponse is security report list response.
message ListReportsResponse {
  // reports is a list of security reports.
  repeated Report reports = 1;
  // next_page_token is the next page token. If there are no more results, it will be empty.
  string next_page_token = 2;
}

// GetReportResultResponse is report result get response.
message GetReportResultResponse {
  // result is a report execution result.
  ReportResult result = 1;
}

// Report is the result of security report.
message ReportResult {
  // name is a name of the security report.
  string name = 1;
  // description is a description of the security report.
  string description = 2;
  // AuditQueryResult is a result of audit query.
  message AuditQueryResult {
    // audit_query is the audit query spec containing information about audit query.
    AuditQuerySpec audit_query = 1;
    // result is the result set.
    QueryResultSet result = 2;
    // result_id is a unique id of the result.
    string result_id = 3;
    // execution_time_in_millis is a time in milliseconds when the audit query was executed.
    int64 execution_time_in_millis = 4;
    // data_scanned_in_bytes is a number of bytes scanned.
    int64 data_scanned_in_bytes = 5;
  }
  // audit_query_results is a list of audit query results.
  repeated AuditQueryResult audit_query_results = 3;
  // updated_at is a time when the security report was updated.
  string updated_at = 4;

  // total_execution_time_in_millis is a time in milliseconds when the security report was executed.
  int64 total_execution_time_in_millis = 5;
  // total_data_scanned_in_bytes is a number of bytes scanned.
  int64 total_data_scanned_in_bytes = 6;
}

// Report is a security report.
message ReportSate {
  // name is a name of the security report.
  enum State {
    // STATE_UNSPECIFIED is an unspecified state.
    STATE_UNSPECIFIED = 0;
    // STATE_ERROR is an error state.
    STATE_ERROR = 1;
    // STATE_SUCCESS is a success state.
    STATE_SUCCESS = 2;
    // STATE_RUNNING is a running state.
    STATE_RUNNING = 3;
  }
  // header is a resource header.
  teleport.header.v1.ResourceHeader header = 1;
  // state is a state of the security report.
  State state = 2;
  // updated_at is a time when the security report state was updated.
  string updated_at = 3;
}
