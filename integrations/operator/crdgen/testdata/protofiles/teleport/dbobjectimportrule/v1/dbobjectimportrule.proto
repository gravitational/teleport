// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.dbobjectimportrule.v1;

import "teleport/header/v1/metadata.proto";
import "teleport/label/v1/label.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/dbobjectimportrule/v1;dbobjectimportrulev1";

// DatabaseObjectImportRule is the resource representing a global database object import rule.
// The import rules govern which database objects are imported from databases.
// See type teleport.dbobject.v1.DatabaseObject for the description of a database object.
// For rationale behind this type, see the RFD 151.
message DatabaseObjectImportRule {
  // The kind of resource represented.
  string kind = 1;
  // Mandatory field for all resources. Not populated for this resource type.
  string sub_kind = 2;
  // The version of the resource being represented.
  string version = 3;
  // Common metadata that all resources share.
  teleport.header.v1.Metadata metadata = 4;

  // spec represents the specifications for the database object import rule.
  DatabaseObjectImportRuleSpec spec = 5;
}

// DatabaseObjectImportRuleSpec is the spec for database object import rule.
message DatabaseObjectImportRuleSpec {
  // priority represents the priority of the rule application.
  //
  // Rules are processed from lowest to highest priority.
  // If two rules apply the same label, then the value applied with the rule with the highest priority wins.
  int32 priority = 1;

  reserved 2;
  reserved "db_labels";

  // db_labels is a set of labels matched against database labels.
  repeated teleport.label.v1.Label database_labels = 3;

  // mappings is a list of matches that will map match conditions to labels.
  repeated DatabaseObjectImportRuleMapping mappings = 4;
}

// DatabaseObjectImportRuleMapping is the mapping between object properties and labels that will be added to the object.
message DatabaseObjectImportRuleMapping {
  // match specifies the matching rules, like the object names.
  DatabaseObjectImportMatch match = 1;

  // scope specifies the object scope. Optional. If not provided, all scopes will be accepted.
  DatabaseObjectImportScope scope = 2;

  // add_labels specifies which labels to add if the match succeeds. At least one should be present.
  map<string, string> add_labels = 3;
}

// DatabaseObjectImportMatch specifies acceptable object names. Must have at least one non-empty member.
message DatabaseObjectImportMatch {
  // table_names specify the names of the tables to match. Optional.
  repeated string table_names = 1;

  // view_names specify the names of the views to match. Optional.
  repeated string view_names = 2;

  // procedure_names specify the names of the procedures to match. Optional.
  repeated string procedure_names = 3;
}

// DatabaseObjectImportScope specifies the object scope. Members are matched independently of each other.
message DatabaseObjectImportScope {
  // database_names specify the names of the databases to include in the scope. Optional.
  repeated string database_names = 1;

  // schema_names specify the names of the schemas to include in the scope. Optional.
  repeated string schema_names = 2;
}
