// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.devicetrust.v1;

import "google/protobuf/timestamp.proto";
import "teleport/devicetrust/v1/device_collected_data.proto";
import "teleport/devicetrust/v1/device_enroll_token.proto";
import "teleport/devicetrust/v1/device_profile.proto";
import "teleport/devicetrust/v1/device_source.proto";
import "teleport/devicetrust/v1/os_type.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/devicetrust/v1;devicetrustv1";

// Device represents a registered device.
// Registered devices may be enrolled. Enrolled devices are allowed to perform
// device-aware actions.
message Device {
  // API version of the Device definition, present for compatibility with
  // types.DeviceV1.
  // Always "v1".
  string api_version = 1;

  // Unique device identifier.
  // System managed.
  string id = 2;

  // Device operating system.
  // Required.
  OSType os_type = 3;

  // Device inventory identifier.
  // Takes different meanings depending on the device and operating system.
  // For macOS devices it is the device serial number.
  // Required.
  string asset_tag = 4;

  // Create time.
  // System managed.
  google.protobuf.Timestamp create_time = 5;

  // Last update time.
  // System managed.
  google.protobuf.Timestamp update_time = 6;

  // Enrollment token for the device.
  // Only present in situations where device creation and enrollment are rolled
  // into a single operation.
  // Transient.
  DeviceEnrollToken enroll_token = 7;

  // Enrollment status of the device.
  // May be changed to DEVICE_ENROLL_STATUS_NOT_ENROLLED at any time to
  // forcefully unenroll a device (server-side only).
  // System managed.
  DeviceEnrollStatus enroll_status = 8;

  // Currently enrolled device credential.
  // Manually unenrolling a device clears the credential.
  // System managed.
  DeviceCredential credential = 9;

  // Device data collected during enrollment and device authentication.
  // Enrollment data is always present, while authentication data is capped at N
  // most recent events.
  // Only present in certain read modes.
  // Transient.
  repeated DeviceCollectedData collected_data = 10;

  // Source of the device.
  // Devices managed directly via Teleport (`tctl`, Web UI, etc) have no
  // assigned source.
  DeviceSource source = 11;

  // Device information acquired from an external source.
  DeviceProfile profile = 12;

  // Device owner.
  // Usually the owner is the same user who performed the enrollment ceremony.
  // May be empty for legacy devices (Teleport v13.2 and older).
  // Manually unenrolling a device clears the owner.
  // System-managed.
  string owner = 13;
}

// DeviceCredential represents the current enrolled public key of a device.
message DeviceCredential {
  // Unique identifier of the credential, defined client-side.
  string id = 1;
  // Device public key marshaled as a PKIX, ASN.1 DER. Used only on MacOS.
  bytes public_key_der = 2;
  // The degree to which the device credential is attested.
  DeviceAttestationType device_attestation_type = 3;
  // For TPM devices, the serial number of the TPM endorsement certificate.
  string tpm_ekcert_serial = 4;
  // For TPM devices, the encoded TPMT_PUBLIC structure containing the
  // attestation public key and signing parameters.
  bytes tpm_ak_public = 5;
}

// AttestationType indicates the degree to which the device credential has
// been attested.
enum DeviceAttestationType {
  // Bare public key which has only verified with proof of ownership.
  // Used on macOS.
  DEVICE_ATTESTATION_TYPE_UNSPECIFIED = 0;
  // Credential was verified through a TPM EK->AK chain on enrollment.
  DEVICE_ATTESTATION_TYPE_TPM_EKPUB = 1;
  // Credential was verified through a TPM EKCert->AK chain on enrollment,
  // but no allow-listed CAs were configured to validate this EKCert against.
  DEVICE_ATTESTATION_TYPE_TPM_EKCERT = 2;
  // Credential was verified through a TPM EKCert->AK chain on enrollment, and
  // the EKCert was signed by a configured allow-listed CA.
  DEVICE_ATTESTATION_TYPE_TPM_EKCERT_TRUSTED = 3;
}

// DeviceEnrollStatus represents the enrollment status of a device.
enum DeviceEnrollStatus {
  DEVICE_ENROLL_STATUS_UNSPECIFIED = 0;
  // Device is registered but not enrolled.
  DEVICE_ENROLL_STATUS_NOT_ENROLLED = 1;
  // Device is registered and enrolled.
  DEVICE_ENROLL_STATUS_ENROLLED = 2;
}
