// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.auditlog.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/auditlog/v1;auditlogv1";

// AuditLogService provides methods to access audit log.
service AuditLogService {
  // StreamUnstructuredSessionEvents streams audit events from a given session recording in an unstructured format.
  // This endpoint is used by the event handler to retrieve the session events as JSON.
  rpc StreamUnstructuredSessionEvents(StreamUnstructuredSessionEventsRequest) returns (stream EventUnstructured);
  // GetUnstructuredEvents gets events from the audit log in an unstructured format.
  // This endpoint is used by the event handler to retrieve the events as JSON.
  rpc GetUnstructuredEvents(GetUnstructuredEventsRequest) returns (EventsUnstructured);
  // ExportUnstructuredEvents exports events from a given event chunk returned by GetEventExportChunks. This API prioritizes
  // performance over ordering and filtering, and is intended for bulk export of events.
  rpc ExportUnstructuredEvents(ExportUnstructuredEventsRequest) returns (stream ExportEventUnstructured);
  // GetEventExportChunks returns a stream of event chunks that can be exported via ExportUnstructuredEvents. The returned
  // list isn't ordered and polling for new chunks requires re-consuming the entire stream from the beginning.
  rpc GetEventExportChunks(GetEventExportChunksRequest) returns (stream EventExportChunk);
}

// StreamUnstructuredSessionEventsRequest is a request containing data needed to fetch a session recording.
message StreamUnstructuredSessionEventsRequest {
  // session_id is the ID for a given session in an UUIDv4 format.
  string session_id = 1;
  // start_index is the index of the event to resume the stream after.
  // A start_index of 0 creates a new stream.
  int32 start_index = 2;
}

// Order controls the ordering of objects returned based on the timestamp field.
enum Order {
  ORDER_DESCENDING_UNSPECIFIED = 0;
  ORDER_ASCENDING = 1;
}

// GetUnstructuredEventsRequest is a request with the needed data to fetch events.
message GetUnstructuredEventsRequest {
  // namespace, if not set, defaults to 'default'.
  string namespace = 1;
  // start_date is the oldest date of returned events.
  google.protobuf.Timestamp start_date = 2;
  // end_date is the newest date of returned events.
  google.protobuf.Timestamp end_date = 3;
  // event_types is optional, if not set, returns all events.
  repeated string event_types = 4;
  // limit is the maximum amount of events returned.
  int32 limit = 5;
  // start_key is used to resume a query in order to enable pagination.
  // If the previous response had LastKey set then this should be
  // set to its value. Otherwise leave empty.
  string start_key = 6;
  // order specifies an ascending or descending order of events.
  // A value of 0 means a descending order and a value of 1 means an ascending order.
  Order order = 7;
}

// EventsUnstructured represents a list of events.AuditEvent in an unstructured format.
message EventsUnstructured {
  // items is a list of unstructured formatted audit events.
  repeated EventUnstructured items = 1;
  // last_key is the key of the last event if the returned set did not contain all events found i.e limit <
  // actual amount. this is the key clients can supply in another API request to continue fetching
  // events from the previous last position.
  string last_key = 2;
}

// ExportUnstructuredEventsRequest is a request with the needed data to export events.
message ExportUnstructuredEventsRequest {
  // date is the target date from which to export events. note that only the UTC date of the
  // timestamp value is used. use of a specific local timestamp may produce confusing results.
  google.protobuf.Timestamp date = 1;
  // chunk is the chunk to export events from.
  string chunk = 2;
  // cursor is an optional mechanism to resume interrupted streams for a given chunk.
  string cursor = 3;
}

// ExportEventUnstructured is the stream item of the ExportUnstructuredEvents method.
message ExportEventUnstructured {
  // event is the unstructured representation of the event payload.
  EventUnstructured event = 1;
  // cursor is the cursor to resume the stream after this point.
  string cursor = 2;
}

// EventUnstructured represents a single events.AuditEvent in an unstructured format.
message EventUnstructured {
  // type is the type of the event.
  string type = 1;
  // id is the unique ID of the event.
  // If the underlying event defines an ID, it will be used, otherwise
  // it is a SHA256 hash of the event payload.
  string id = 2;
  // time is the time when the event was generated.
  google.protobuf.Timestamp time = 3;
  // index is the index of the event.
  int64 index = 4;
  // unstructured is the unstructured representation of the event payload.
  google.protobuf.Struct unstructured = 5;
}

// GetEventExportChunksRequest is used to request the next set of event chunks to export.
message GetEventExportChunksRequest {
  // date is the date for which to list export shards.
  google.protobuf.Timestamp date = 1;
}

// EventExportChunk represents a chunk of events to export.
message EventExportChunk {
  // chunk is the chunk to export.
  string chunk = 1;
}
