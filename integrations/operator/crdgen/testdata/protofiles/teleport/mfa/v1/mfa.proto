// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.mfa.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/mfa/v1;mfav1";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// ChallengeExtensions contains MFA challenge extensions used by Teleport
// during MFA authentication.
message ChallengeExtensions {
  // Scope is an authorization scope for this MFA challenge.
  // Required.
  ChallengeScope scope = 1;
  // AllowReuse determines whether the MFA challenge allows reuse.
  // Defaults to CHALLENGE_ALLOW_REUSE_NO.
  //
  // Note that reuse is only permitted for specific actions by the discretion
  // of the server. See the server implementation for details.
  ChallengeAllowReuse allow_reuse = 2;
  // User verification requirement for the challenge.
  //
  // * https://www.w3.org/TR/webauthn-2/#enum-userVerificationRequirement.
  // * https://pkg.go.dev/github.com/go-webauthn/webauthn/protocol#UserVerificationRequirement.
  //
  // Optional. Empty is equivalent to "discouraged".
  string user_verification_requirement = 3;
}

// ChallengeScope is a scope authorized by an MFA challenge resolution.
enum ChallengeScope {
  // Scope unknown or not specified.
  CHALLENGE_SCOPE_UNSPECIFIED = 0;
  // Standard webauthn login.
  CHALLENGE_SCOPE_LOGIN = 1;
  // Passwordless webauthn login.
  CHALLENGE_SCOPE_PASSWORDLESS_LOGIN = 2;
  // Headless login.
  CHALLENGE_SCOPE_HEADLESS_LOGIN = 3;
  // MFA device management.
  CHALLENGE_SCOPE_MANAGE_DEVICES = 4;
  // Account recovery.
  CHALLENGE_SCOPE_ACCOUNT_RECOVERY = 5;
  // Used for per-session MFA and moderated session presence checks.
  CHALLENGE_SCOPE_USER_SESSION = 6;
  // Used for various administrative actions, such as adding, updating, or
  // deleting administrative resources (users, roles, etc.).
  //
  // Note: this scope should not be used for new MFA capabilities that have
  // more precise scope. Instead, new scopes should be added. This scope may
  // also be split into multiple smaller scopes in the future.
  CHALLENGE_SCOPE_ADMIN_ACTION = 7;
  // Used for changing user's password.
  CHALLENGE_SCOPE_CHANGE_PASSWORD = 8;
}

// ChallengeAllowReuse determines whether an MFA challenge response can be used
// to authenticate the user more than once until the challenge expires.
//
// Reuse is only permitted for specific actions by the discretion of the server.
// See the server implementation for details.
enum ChallengeAllowReuse {
  // Reuse unspecified, treated as CHALLENGE_ALLOW_REUSE_NO.
  CHALLENGE_ALLOW_REUSE_UNSPECIFIED = 0;
  // Reuse is permitted.
  CHALLENGE_ALLOW_REUSE_YES = 1;
  // Reuse is not permitted.
  CHALLENGE_ALLOW_REUSE_NO = 2;
}
