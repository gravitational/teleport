// Copyright 2025 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.healthcheckconfig.v1;

import "google/protobuf/duration.proto";
import "teleport/header/v1/metadata.proto";
import "teleport/label/v1/label.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/healthcheckconfig/v1;healthcheckconfigv1";

// HealthCheckConfig is the configuration for network health checks from an
// agent to its proxied resource.
message HealthCheckConfig {
  // Kind is the resource kind. Must be "health_check_config".
  string kind = 1;
  // SubKind is an optional resource sub kind.
  string sub_kind = 2;
  // Version is the health check config version.
  string version = 3;
  // Metadata is the health check config resource's metadata.
  teleport.header.v1.Metadata metadata = 4;

  // Spec is the health check config specification.
  HealthCheckConfigSpec spec = 5;
}

// HealthCheckConfigSpec is the health check spec.
message HealthCheckConfigSpec {
  // Match is used to select resources that these settings apply to.
  Matcher match = 1;
  // Timeout is the health check connection establishment timeout.
  // An attempt that times out is a failed attempt.
  google.protobuf.Duration timeout = 2;
  // Interval is the time between each health check.
  google.protobuf.Duration interval = 3;
  // HealthyThreshold is the number of consecutive passing health checks after
  // which a target's health status becomes "healthy".
  uint32 healthy_threshold = 4;
  // UnhealthyThreshold is the number of consecutive failing health checks after
  // which a target's health status becomes "unhealthy".
  uint32 unhealthy_threshold = 5;
}

// Matcher is a resource matcher for health check config.
message Matcher {
  // DBLabels matches database labels. An empty value is ignored. The match
  // result is logically ANDed with DBLabelsExpression, if both are non-empty.
  repeated teleport.label.v1.Label db_labels = 1;
  // DBLabelsExpression is a label predicate expression to match databases. An
  // empty value is ignored. The match result is logically ANDed with DBLabels,
  // if both are non-empty.
  string db_labels_expression = 2;
}
