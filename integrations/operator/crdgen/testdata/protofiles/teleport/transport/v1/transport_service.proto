// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.transport.v1;

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/transport/v1;transportv1";

// TransportService provides methods to proxy connections to various Teleport instances.
//
// All connections are operate on top of a bidirectional stream which transports
// raw payloads from higher level protocols (i.e. SSH). Clients must send an initial
// message on the stream to set up the connections accordingly. After the initial
// request either side may freely send data in any order until the stream is terminated.
service TransportService {
  // GetClusterDetails provides cluster information that may affect how transport
  // should occur.
  rpc GetClusterDetails(GetClusterDetailsRequest) returns (GetClusterDetailsResponse);

  // ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
  //
  // The client must first send a DialTarget before the connection is established. Agent frames
  // will be populated if SSH Agent forwarding is enabled for the connection. SSH frames contain
  // raw SSH payload to be processed by an x/crypto/ssh.Client or x/crypto/ssh.Server.
  rpc ProxySSH(stream ProxySSHRequest) returns (stream ProxySSHResponse);

  // ProxyCluster establishes a connection to the target cluster.
  //
  // The client must first send a ProxyClusterRequest with the desired cluster name before the
  // connection is established. After which the connection can be used to construct a new
  // auth.Client to the tunneled cluster.
  rpc ProxyCluster(stream ProxyClusterRequest) returns (stream ProxyClusterResponse);
}

// Request for ProxySSH
//
// In order for proxying to begin the client must send a request with the
// TargetHost populated. Creating the stream doesn't actually open the SSH connection.
// Any attempts to exchange frames prior to the client sending a TargetHost message will
// result in the stream being terminated.
message ProxySSHRequest {
  // Contains the information required to dial the target.
  // Must be populated on the initial request so that SSH connection can be established.
  TargetHost dial_target = 1;
  // Payload from SSH/SSH Agent Protocols
  oneof frame {
    // Raw SSH payload
    Frame ssh = 2;
    // Raw SSH Agent payload, populated for agent forwarding
    Frame agent = 3;
  }
}

// Response for ProxySSH
//
// The first response from the server will contain ClusterDetails
// so that clients may get information about a particular cluster
// without needing to call GetClusterDetails first. All subsequent
// response will only contain Frames.
message ProxySSHResponse {
  // Cluster information returned *ONLY* with the first frame
  ClusterDetails details = 1;
  // Payload from SSH/SSH Agent Protocols
  oneof frame {
    // SSH payload
    Frame ssh = 2;
    // SSH Agent payload, populated for agent forwarding
    Frame agent = 3;
  }
}

// Request for ProxyCluster
//
// In order for proxying to begin the client must send a request with the
// cluster name populated. Creating the stream doesn't actually open the connection.
// Any attempts to exchange frames prior to the client sending a cluster name will
// result in the stream being terminated. All subsequent messages only need to
// provide a Frame.
message ProxyClusterRequest {
  // Name of the cluster to connect to. Must
  // be sent first so the connection can be established.
  string cluster = 1;
  // Raw payload
  Frame frame = 2;
}

// Response for ProxyCluster
message ProxyClusterResponse {
  // Raw payload
  Frame frame = 1;
}

// Encapsulates protocol specific payloads
message Frame {
  // The raw packet of data
  bytes payload = 1;
}

// TargetHost indicates which server the connection is for
message TargetHost {
  // The hostname/ip/uuid:port of the remote host.
  string host_port = 1;
  // The cluster the server is a member of
  string cluster = 2;
}

// Request for GetClusterDetails.
message GetClusterDetailsRequest {}

// Response for GetClusterDetails.
message GetClusterDetailsResponse {
  // Cluster configuration details
  ClusterDetails details = 1;
}

// ClusterDetails contains cluster configuration information
message ClusterDetails {
  // If the cluster is running in FIPS mode
  bool fips_enabled = 1;
}
